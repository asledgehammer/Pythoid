from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from gnu.trove import TIntCollection
from gnu.trove.impl.hash import TObjectHash, TIntHash, THashPrimitiveIterator
from gnu.trove.iterator import TIntIterator
from gnu.trove.iterator.hash import TObjectHashIterator
from gnu.trove.procedure import TIntProcedure
from java.io import ObjectInput, ObjectOutput
from java.util import Collection, Iterator, Spliterator, Set
from java.util.function import Consumer

E = TypeVar('E', default=Any)
T = TypeVar('T', default=Any)

class THashSet[E](TObjectHash):

  @overload
  def add(self, arg0: object) -> bool: ...

  @overload
  def add(self, arg0: object) -> bool: ...

  @overload
  def addAll(self, arg0: Collection[E]) -> bool: ...

  @overload
  def addAll(self, arg0: Collection[E]) -> bool: ...

  @overload
  def clear(self) -> None: ...

  @overload
  def clear(self) -> None: ...

  def contains(self, arg0: object) -> bool: ...

  @overload
  def containsAll(self, arg0: Collection[Any]) -> bool: ...

  @overload
  def containsAll(self, arg0: Collection[Any]) -> bool: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  def forEach(self, arg0: Consumer[T]) -> None: ...

  @overload
  def hashCode(self) -> int: ...

  @overload
  def hashCode(self) -> int: ...

  def isEmpty(self) -> bool: ...

  @overload
  def iterator(self) -> Iterator: ...

  @overload
  def iterator(self) -> TObjectHashIterator[E]: ...

  @overload
  def iterator(self) -> Iterator[E]: ...

  @overload
  def iterator(self) -> Iterator[T]: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def remove(self, arg0: object) -> bool: ...

  @overload
  def remove(self, arg0: object) -> bool: ...

  @overload
  def removeAll(self, arg0: Collection[Any]) -> bool: ...

  @overload
  def removeAll(self, arg0: Collection[Any]) -> bool: ...

  @overload
  def retainAll(self, arg0: Collection[Any]) -> bool: ...

  @overload
  def retainAll(self, arg0: Collection[Any]) -> bool: ...

  def size(self) -> int: ...

  @overload
  def spliterator(self) -> Spliterator[E]: ...

  @overload
  def spliterator(self) -> Spliterator[T]: ...

  @overload
  def toArray(self) -> list[object]: ...

  @overload
  def toArray(self) -> list[object]: ...

  @overload
  def toArray(self, arg0: list[object]) -> list[object]: ...

  @overload
  def toArray(self, arg0: list[object]) -> list[object]: ...

  def toString(self) -> str: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @staticmethod
  def copyOf(arg0: Collection[E]) -> Set[E]: ...

  @staticmethod
  @overload
  def of() -> Set[E]: ...

  @staticmethod
  @overload
  def of(arg0: list[object]) -> Set[E]: ...

  @staticmethod
  @overload
  def of(arg0: object) -> Set[E]: ...

  @staticmethod
  @overload
  def of(arg0: object, arg1: object) -> Set[E]: ...

  @staticmethod
  @overload
  def of(arg0: object, arg1: object, arg2: object) -> Set[E]: ...

  @staticmethod
  @overload
  def of(arg0: object, arg1: object, arg2: object, arg3: object) -> Set[E]: ...

  @staticmethod
  @overload
  def of(arg0: object, arg1: object, arg2: object, arg3: object, arg4: object) -> Set[E]: ...

  @staticmethod
  @overload
  def of(arg0: object, arg1: object, arg2: object, arg3: object, arg4: object, arg5: object) -> Set[E]: ...

  @staticmethod
  @overload
  def of(arg0: object, arg1: object, arg2: object, arg3: object, arg4: object, arg5: object, arg6: object) -> Set[E]: ...

  @staticmethod
  @overload
  def of(arg0: object, arg1: object, arg2: object, arg3: object, arg4: object, arg5: object, arg6: object, arg7: object) -> Set[E]: ...

  @staticmethod
  @overload
  def of(arg0: object, arg1: object, arg2: object, arg3: object, arg4: object, arg5: object, arg6: object, arg7: object, arg8: object) -> Set[E]: ...

  @staticmethod
  @overload
  def of(arg0: object, arg1: object, arg2: object, arg3: object, arg4: object, arg5: object, arg6: object, arg7: object, arg8: object, arg9: object) -> Set[E]: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: int): ...
  @overload
  def __init__(self, arg0: Collection[E]): ...
  @overload
  def __init__(self, arg0: int, arg1: float): ...

  class HashProcedure:

    @overload
    def execute(self, arg0: object) -> bool: ...

    @overload
    def execute(self, arg0: object) -> bool: ...

    def getHashCode(self) -> int: ...


class TIntHashSet(TIntHash):

  @overload
  def add(self, arg0: int) -> bool: ...

  @overload
  def add(self, arg0: int) -> bool: ...

  @overload
  def addAll(self, arg0: list[int]) -> bool: ...

  @overload
  def addAll(self, arg0: list[int]) -> bool: ...

  @overload
  def addAll(self, arg0: TIntCollection) -> bool: ...

  @overload
  def addAll(self, arg0: TIntCollection) -> bool: ...

  @overload
  def addAll(self, arg0: Collection[Integer]) -> bool: ...

  @overload
  def addAll(self, arg0: Collection[Integer]) -> bool: ...

  @overload
  def clear(self) -> None: ...

  @overload
  def clear(self) -> None: ...

  def contains(self, arg0: int) -> bool: ...

  @overload
  def containsAll(self, arg0: list[int]) -> bool: ...

  @overload
  def containsAll(self, arg0: list[int]) -> bool: ...

  @overload
  def containsAll(self, arg0: TIntCollection) -> bool: ...

  @overload
  def containsAll(self, arg0: TIntCollection) -> bool: ...

  @overload
  def containsAll(self, arg0: Collection[Any]) -> bool: ...

  @overload
  def containsAll(self, arg0: Collection[Any]) -> bool: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  def forEach(self, arg0: TIntProcedure) -> bool: ...

  def getNoEntryValue(self) -> int: ...

  @overload
  def hashCode(self) -> int: ...

  @overload
  def hashCode(self) -> int: ...

  def isEmpty(self) -> bool: ...

  @overload
  def iterator(self) -> TIntIterator: ...

  @overload
  def iterator(self) -> TIntIterator: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def remove(self, arg0: int) -> bool: ...

  @overload
  def remove(self, arg0: int) -> bool: ...

  @overload
  def removeAll(self, arg0: list[int]) -> bool: ...

  @overload
  def removeAll(self, arg0: list[int]) -> bool: ...

  @overload
  def removeAll(self, arg0: TIntCollection) -> bool: ...

  @overload
  def removeAll(self, arg0: TIntCollection) -> bool: ...

  @overload
  def removeAll(self, arg0: Collection[Any]) -> bool: ...

  @overload
  def removeAll(self, arg0: Collection[Any]) -> bool: ...

  @overload
  def retainAll(self, arg0: list[int]) -> bool: ...

  @overload
  def retainAll(self, arg0: list[int]) -> bool: ...

  @overload
  def retainAll(self, arg0: TIntCollection) -> bool: ...

  @overload
  def retainAll(self, arg0: TIntCollection) -> bool: ...

  @overload
  def retainAll(self, arg0: Collection[Any]) -> bool: ...

  @overload
  def retainAll(self, arg0: Collection[Any]) -> bool: ...

  def size(self) -> int: ...

  @overload
  def toArray(self) -> list[int]: ...

  @overload
  def toArray(self) -> list[int]: ...

  @overload
  def toArray(self, arg0: list[int]) -> list[int]: ...

  @overload
  def toArray(self, arg0: list[int]) -> list[int]: ...

  def toString(self) -> str: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: list[int]): ...
  @overload
  def __init__(self, arg0: TIntCollection): ...
  @overload
  def __init__(self, arg0: int): ...
  @overload
  def __init__(self, arg0: Collection[Integer]): ...
  @overload
  def __init__(self, arg0: int, arg1: float): ...
  @overload
  def __init__(self, arg0: int, arg1: float, arg2: int): ...

  class TIntHashIterator(THashPrimitiveIterator):

    @overload
    def next(self) -> int: ...

    @overload
    def next(self) -> int: ...

    def __init__(self, arg0: TIntHashSet, arg1: TIntHash): ...

