from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from gnu.trove import TByteCollection, TFloatCollection, TIntCollection, TLongCollection, TShortCollection
from gnu.trove.function import TByteFunction, TFloatFunction, TIntFunction, TLongFunction, TShortFunction
from gnu.trove.iterator import TByteIterator, TFloatIterator, TIntIterator, TLongIterator, TShortIterator
from gnu.trove.list import TByteList, TFloatList, TIntList, TLongList, TShortList
from gnu.trove.procedure import TByteProcedure, TFloatProcedure, TIntProcedure, TLongProcedure, TShortProcedure
from java.io import ObjectInput, ObjectOutput
from java.util import Collection, Random

class TByteArrayList:

  @overload
  def add(self, arg0: list[int]) -> None: ...

  @overload
  def add(self, arg0: list[int]) -> None: ...

  @overload
  def add(self, arg0: int) -> bool: ...

  @overload
  def add(self, arg0: int) -> bool: ...

  @overload
  def add(self, arg0: list[int], arg1: int, arg2: int) -> None: ...

  @overload
  def add(self, arg0: list[int], arg1: int, arg2: int) -> None: ...

  @overload
  def addAll(self, arg0: list[int]) -> bool: ...

  @overload
  def addAll(self, arg0: TByteCollection) -> bool: ...

  @overload
  def addAll(self, arg0: Collection[Byte]) -> bool: ...

  @overload
  def binarySearch(self, arg0: int) -> int: ...

  @overload
  def binarySearch(self, arg0: int) -> int: ...

  @overload
  def binarySearch(self, arg0: int, arg1: int, arg2: int) -> int: ...

  @overload
  def binarySearch(self, arg0: int, arg1: int, arg2: int) -> int: ...

  @overload
  def clear(self) -> None: ...

  @overload
  def clear(self) -> None: ...

  @overload
  def clear(self, arg0: int) -> None: ...

  @overload
  def contains(self, arg0: int) -> bool: ...

  @overload
  def contains(self, arg0: int) -> bool: ...

  @overload
  def containsAll(self, arg0: list[int]) -> bool: ...

  @overload
  def containsAll(self, arg0: TByteCollection) -> bool: ...

  @overload
  def containsAll(self, arg0: Collection[Any]) -> bool: ...

  def ensureCapacity(self, arg0: int) -> None: ...

  def equals(self, arg0: object) -> bool: ...

  @overload
  def fill(self, arg0: int) -> None: ...

  @overload
  def fill(self, arg0: int) -> None: ...

  @overload
  def fill(self, arg0: int, arg1: int, arg2: int) -> None: ...

  @overload
  def fill(self, arg0: int, arg1: int, arg2: int) -> None: ...

  @overload
  def forEach(self, arg0: TByteProcedure) -> bool: ...

  @overload
  def forEach(self, arg0: TByteProcedure) -> bool: ...

  @overload
  def forEachDescending(self, arg0: TByteProcedure) -> bool: ...

  @overload
  def forEachDescending(self, arg0: TByteProcedure) -> bool: ...

  @overload
  def get(self, arg0: int) -> int: ...

  @overload
  def get(self, arg0: int) -> int: ...

  @overload
  def getNoEntryValue(self) -> int: ...

  @overload
  def getNoEntryValue(self) -> int: ...

  def getQuick(self, arg0: int) -> int: ...

  @overload
  def grep(self, arg0: TByteProcedure) -> TByteList: ...

  @overload
  def grep(self, arg0: TByteProcedure) -> TByteList: ...

  def hashCode(self) -> int: ...

  @overload
  def indexOf(self, arg0: int) -> int: ...

  @overload
  def indexOf(self, arg0: int) -> int: ...

  @overload
  def indexOf(self, arg0: int, arg1: int) -> int: ...

  @overload
  def indexOf(self, arg0: int, arg1: int) -> int: ...

  @overload
  def insert(self, arg0: int, arg1: list[int]) -> None: ...

  @overload
  def insert(self, arg0: int, arg1: list[int]) -> None: ...

  @overload
  def insert(self, arg0: int, arg1: int) -> None: ...

  @overload
  def insert(self, arg0: int, arg1: int) -> None: ...

  @overload
  def insert(self, arg0: int, arg1: list[int], arg2: int, arg3: int) -> None: ...

  @overload
  def insert(self, arg0: int, arg1: list[int], arg2: int, arg3: int) -> None: ...

  @overload
  def inverseGrep(self, arg0: TByteProcedure) -> TByteList: ...

  @overload
  def inverseGrep(self, arg0: TByteProcedure) -> TByteList: ...

  @overload
  def isEmpty(self) -> bool: ...

  @overload
  def isEmpty(self) -> bool: ...

  def iterator(self) -> TByteIterator: ...

  @overload
  def lastIndexOf(self, arg0: int) -> int: ...

  @overload
  def lastIndexOf(self, arg0: int) -> int: ...

  @overload
  def lastIndexOf(self, arg0: int, arg1: int) -> int: ...

  @overload
  def lastIndexOf(self, arg0: int, arg1: int) -> int: ...

  @overload
  def max(self) -> int: ...

  @overload
  def max(self) -> int: ...

  @overload
  def min(self) -> int: ...

  @overload
  def min(self) -> int: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def remove(self, arg0: int) -> bool: ...

  @overload
  def remove(self, arg0: int) -> bool: ...

  @overload
  def remove(self, arg0: int, arg1: int) -> None: ...

  @overload
  def remove(self, arg0: int, arg1: int) -> None: ...

  @overload
  def removeAll(self, arg0: list[int]) -> bool: ...

  @overload
  def removeAll(self, arg0: TByteCollection) -> bool: ...

  @overload
  def removeAll(self, arg0: Collection[Any]) -> bool: ...

  @overload
  def removeAt(self, arg0: int) -> int: ...

  @overload
  def removeAt(self, arg0: int) -> int: ...

  @overload
  def replace(self, arg0: int, arg1: int) -> int: ...

  @overload
  def replace(self, arg0: int, arg1: int) -> int: ...

  def reset(self) -> None: ...

  def resetQuick(self) -> None: ...

  @overload
  def retainAll(self, arg0: list[int]) -> bool: ...

  @overload
  def retainAll(self, arg0: TByteCollection) -> bool: ...

  @overload
  def retainAll(self, arg0: Collection[Any]) -> bool: ...

  @overload
  def reverse(self) -> None: ...

  @overload
  def reverse(self) -> None: ...

  @overload
  def reverse(self, arg0: int, arg1: int) -> None: ...

  @overload
  def reverse(self, arg0: int, arg1: int) -> None: ...

  @overload
  def set(self, arg0: int, arg1: list[int]) -> None: ...

  @overload
  def set(self, arg0: int, arg1: list[int]) -> None: ...

  @overload
  def set(self, arg0: int, arg1: int) -> int: ...

  @overload
  def set(self, arg0: int, arg1: int) -> int: ...

  @overload
  def set(self, arg0: int, arg1: list[int], arg2: int, arg3: int) -> None: ...

  @overload
  def set(self, arg0: int, arg1: list[int], arg2: int, arg3: int) -> None: ...

  def setQuick(self, arg0: int, arg1: int) -> None: ...

  @overload
  def shuffle(self, arg0: Random) -> None: ...

  @overload
  def shuffle(self, arg0: Random) -> None: ...

  @overload
  def size(self) -> int: ...

  @overload
  def size(self) -> int: ...

  @overload
  def sort(self) -> None: ...

  @overload
  def sort(self) -> None: ...

  @overload
  def sort(self, arg0: int, arg1: int) -> None: ...

  @overload
  def sort(self, arg0: int, arg1: int) -> None: ...

  @overload
  def subList(self, arg0: int, arg1: int) -> TByteList: ...

  @overload
  def subList(self, arg0: int, arg1: int) -> TByteList: ...

  @overload
  def sum(self) -> int: ...

  @overload
  def sum(self) -> int: ...

  @overload
  def toArray(self) -> list[int]: ...

  @overload
  def toArray(self) -> list[int]: ...

  @overload
  def toArray(self, arg0: list[int]) -> list[int]: ...

  @overload
  def toArray(self, arg0: list[int]) -> list[int]: ...

  @overload
  def toArray(self, arg0: int, arg1: int) -> list[int]: ...

  @overload
  def toArray(self, arg0: int, arg1: int) -> list[int]: ...

  @overload
  def toArray(self, arg0: list[int], arg1: int, arg2: int) -> list[int]: ...

  @overload
  def toArray(self, arg0: list[int], arg1: int, arg2: int) -> list[int]: ...

  @overload
  def toArray(self, arg0: list[int], arg1: int, arg2: int, arg3: int) -> list[int]: ...

  @overload
  def toArray(self, arg0: list[int], arg1: int, arg2: int, arg3: int) -> list[int]: ...

  def toString(self) -> str: ...

  @overload
  def transformValues(self, arg0: TByteFunction) -> None: ...

  @overload
  def transformValues(self, arg0: TByteFunction) -> None: ...

  def trimToSize(self) -> None: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @staticmethod
  @overload
  def wrap(arg0: list[int]) -> TByteArrayList: ...

  @staticmethod
  @overload
  def wrap(arg0: list[int], arg1: int) -> TByteArrayList: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: list[int]): ...
  @overload
  def __init__(self, arg0: TByteCollection): ...
  @overload
  def __init__(self, arg0: int): ...
  @overload
  def __init__(self, arg0: int, arg1: int): ...

  class TByteArrayIterator:

    def hasNext(self) -> bool: ...

    @overload
    def next(self) -> int: ...

    @overload
    def next(self) -> int: ...

    def remove(self) -> None: ...


class TFloatArrayList:

  @overload
  def add(self, arg0: list[float]) -> None: ...

  @overload
  def add(self, arg0: list[float]) -> None: ...

  @overload
  def add(self, arg0: float) -> bool: ...

  @overload
  def add(self, arg0: float) -> bool: ...

  @overload
  def add(self, arg0: list[float], arg1: int, arg2: int) -> None: ...

  @overload
  def add(self, arg0: list[float], arg1: int, arg2: int) -> None: ...

  @overload
  def addAll(self, arg0: list[float]) -> bool: ...

  @overload
  def addAll(self, arg0: TFloatCollection) -> bool: ...

  @overload
  def addAll(self, arg0: Collection[Float]) -> bool: ...

  @overload
  def binarySearch(self, arg0: float) -> int: ...

  @overload
  def binarySearch(self, arg0: float) -> int: ...

  @overload
  def binarySearch(self, arg0: float, arg1: int, arg2: int) -> int: ...

  @overload
  def binarySearch(self, arg0: float, arg1: int, arg2: int) -> int: ...

  @overload
  def clear(self) -> None: ...

  @overload
  def clear(self) -> None: ...

  @overload
  def clear(self, arg0: int) -> None: ...

  @overload
  def contains(self, arg0: float) -> bool: ...

  @overload
  def contains(self, arg0: float) -> bool: ...

  @overload
  def containsAll(self, arg0: list[float]) -> bool: ...

  @overload
  def containsAll(self, arg0: TFloatCollection) -> bool: ...

  @overload
  def containsAll(self, arg0: Collection[Any]) -> bool: ...

  def ensureCapacity(self, arg0: int) -> None: ...

  def equals(self, arg0: object) -> bool: ...

  @overload
  def fill(self, arg0: float) -> None: ...

  @overload
  def fill(self, arg0: float) -> None: ...

  @overload
  def fill(self, arg0: int, arg1: int, arg2: float) -> None: ...

  @overload
  def fill(self, arg0: int, arg1: int, arg2: float) -> None: ...

  @overload
  def forEach(self, arg0: TFloatProcedure) -> bool: ...

  @overload
  def forEach(self, arg0: TFloatProcedure) -> bool: ...

  @overload
  def forEachDescending(self, arg0: TFloatProcedure) -> bool: ...

  @overload
  def forEachDescending(self, arg0: TFloatProcedure) -> bool: ...

  @overload
  def get(self, arg0: int) -> float: ...

  @overload
  def get(self, arg0: int) -> float: ...

  @overload
  def getNoEntryValue(self) -> float: ...

  @overload
  def getNoEntryValue(self) -> float: ...

  def getQuick(self, arg0: int) -> float: ...

  @overload
  def grep(self, arg0: TFloatProcedure) -> TFloatList: ...

  @overload
  def grep(self, arg0: TFloatProcedure) -> TFloatList: ...

  def hashCode(self) -> int: ...

  @overload
  def indexOf(self, arg0: float) -> int: ...

  @overload
  def indexOf(self, arg0: float) -> int: ...

  @overload
  def indexOf(self, arg0: int, arg1: float) -> int: ...

  @overload
  def indexOf(self, arg0: int, arg1: float) -> int: ...

  @overload
  def insert(self, arg0: int, arg1: list[float]) -> None: ...

  @overload
  def insert(self, arg0: int, arg1: list[float]) -> None: ...

  @overload
  def insert(self, arg0: int, arg1: float) -> None: ...

  @overload
  def insert(self, arg0: int, arg1: float) -> None: ...

  @overload
  def insert(self, arg0: int, arg1: list[float], arg2: int, arg3: int) -> None: ...

  @overload
  def insert(self, arg0: int, arg1: list[float], arg2: int, arg3: int) -> None: ...

  @overload
  def inverseGrep(self, arg0: TFloatProcedure) -> TFloatList: ...

  @overload
  def inverseGrep(self, arg0: TFloatProcedure) -> TFloatList: ...

  @overload
  def isEmpty(self) -> bool: ...

  @overload
  def isEmpty(self) -> bool: ...

  def iterator(self) -> TFloatIterator: ...

  @overload
  def lastIndexOf(self, arg0: float) -> int: ...

  @overload
  def lastIndexOf(self, arg0: float) -> int: ...

  @overload
  def lastIndexOf(self, arg0: int, arg1: float) -> int: ...

  @overload
  def lastIndexOf(self, arg0: int, arg1: float) -> int: ...

  @overload
  def max(self) -> float: ...

  @overload
  def max(self) -> float: ...

  @overload
  def min(self) -> float: ...

  @overload
  def min(self) -> float: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def remove(self, arg0: float) -> bool: ...

  @overload
  def remove(self, arg0: float) -> bool: ...

  @overload
  def remove(self, arg0: int, arg1: int) -> None: ...

  @overload
  def remove(self, arg0: int, arg1: int) -> None: ...

  @overload
  def removeAll(self, arg0: list[float]) -> bool: ...

  @overload
  def removeAll(self, arg0: TFloatCollection) -> bool: ...

  @overload
  def removeAll(self, arg0: Collection[Any]) -> bool: ...

  @overload
  def removeAt(self, arg0: int) -> float: ...

  @overload
  def removeAt(self, arg0: int) -> float: ...

  @overload
  def replace(self, arg0: int, arg1: float) -> float: ...

  @overload
  def replace(self, arg0: int, arg1: float) -> float: ...

  def reset(self) -> None: ...

  def resetQuick(self) -> None: ...

  @overload
  def retainAll(self, arg0: list[float]) -> bool: ...

  @overload
  def retainAll(self, arg0: TFloatCollection) -> bool: ...

  @overload
  def retainAll(self, arg0: Collection[Any]) -> bool: ...

  @overload
  def reverse(self) -> None: ...

  @overload
  def reverse(self) -> None: ...

  @overload
  def reverse(self, arg0: int, arg1: int) -> None: ...

  @overload
  def reverse(self, arg0: int, arg1: int) -> None: ...

  @overload
  def set(self, arg0: int, arg1: list[float]) -> None: ...

  @overload
  def set(self, arg0: int, arg1: list[float]) -> None: ...

  @overload
  def set(self, arg0: int, arg1: float) -> float: ...

  @overload
  def set(self, arg0: int, arg1: float) -> float: ...

  @overload
  def set(self, arg0: int, arg1: list[float], arg2: int, arg3: int) -> None: ...

  @overload
  def set(self, arg0: int, arg1: list[float], arg2: int, arg3: int) -> None: ...

  def setQuick(self, arg0: int, arg1: float) -> None: ...

  @overload
  def shuffle(self, arg0: Random) -> None: ...

  @overload
  def shuffle(self, arg0: Random) -> None: ...

  @overload
  def size(self) -> int: ...

  @overload
  def size(self) -> int: ...

  @overload
  def sort(self) -> None: ...

  @overload
  def sort(self) -> None: ...

  @overload
  def sort(self, arg0: int, arg1: int) -> None: ...

  @overload
  def sort(self, arg0: int, arg1: int) -> None: ...

  @overload
  def subList(self, arg0: int, arg1: int) -> TFloatList: ...

  @overload
  def subList(self, arg0: int, arg1: int) -> TFloatList: ...

  @overload
  def sum(self) -> float: ...

  @overload
  def sum(self) -> float: ...

  @overload
  def toArray(self) -> list[float]: ...

  @overload
  def toArray(self) -> list[float]: ...

  @overload
  def toArray(self, arg0: list[float]) -> list[float]: ...

  @overload
  def toArray(self, arg0: list[float]) -> list[float]: ...

  @overload
  def toArray(self, arg0: int, arg1: int) -> list[float]: ...

  @overload
  def toArray(self, arg0: int, arg1: int) -> list[float]: ...

  @overload
  def toArray(self, arg0: list[float], arg1: int, arg2: int) -> list[float]: ...

  @overload
  def toArray(self, arg0: list[float], arg1: int, arg2: int) -> list[float]: ...

  @overload
  def toArray(self, arg0: list[float], arg1: int, arg2: int, arg3: int) -> list[float]: ...

  @overload
  def toArray(self, arg0: list[float], arg1: int, arg2: int, arg3: int) -> list[float]: ...

  def toString(self) -> str: ...

  @overload
  def transformValues(self, arg0: TFloatFunction) -> None: ...

  @overload
  def transformValues(self, arg0: TFloatFunction) -> None: ...

  def trimToSize(self) -> None: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @staticmethod
  @overload
  def wrap(arg0: list[float]) -> TFloatArrayList: ...

  @staticmethod
  @overload
  def wrap(arg0: list[float], arg1: float) -> TFloatArrayList: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: list[float]): ...
  @overload
  def __init__(self, arg0: TFloatCollection): ...
  @overload
  def __init__(self, arg0: int): ...
  @overload
  def __init__(self, arg0: int, arg1: float): ...

  class TFloatArrayIterator:

    def hasNext(self) -> bool: ...

    @overload
    def next(self) -> float: ...

    @overload
    def next(self) -> float: ...

    def remove(self) -> None: ...


class TIntArrayList:

  @overload
  def add(self, arg0: list[int]) -> None: ...

  @overload
  def add(self, arg0: list[int]) -> None: ...

  @overload
  def add(self, arg0: int) -> bool: ...

  @overload
  def add(self, arg0: int) -> bool: ...

  @overload
  def add(self, arg0: list[int], arg1: int, arg2: int) -> None: ...

  @overload
  def add(self, arg0: list[int], arg1: int, arg2: int) -> None: ...

  @overload
  def addAll(self, arg0: list[int]) -> bool: ...

  @overload
  def addAll(self, arg0: TIntCollection) -> bool: ...

  @overload
  def addAll(self, arg0: Collection[Integer]) -> bool: ...

  @overload
  def binarySearch(self, arg0: int) -> int: ...

  @overload
  def binarySearch(self, arg0: int) -> int: ...

  @overload
  def binarySearch(self, arg0: int, arg1: int, arg2: int) -> int: ...

  @overload
  def binarySearch(self, arg0: int, arg1: int, arg2: int) -> int: ...

  @overload
  def clear(self) -> None: ...

  @overload
  def clear(self) -> None: ...

  @overload
  def clear(self, arg0: int) -> None: ...

  @overload
  def contains(self, arg0: int) -> bool: ...

  @overload
  def contains(self, arg0: int) -> bool: ...

  @overload
  def containsAll(self, arg0: list[int]) -> bool: ...

  @overload
  def containsAll(self, arg0: TIntCollection) -> bool: ...

  @overload
  def containsAll(self, arg0: Collection[Any]) -> bool: ...

  def ensureCapacity(self, arg0: int) -> None: ...

  def equals(self, arg0: object) -> bool: ...

  @overload
  def fill(self, arg0: int) -> None: ...

  @overload
  def fill(self, arg0: int) -> None: ...

  @overload
  def fill(self, arg0: int, arg1: int, arg2: int) -> None: ...

  @overload
  def fill(self, arg0: int, arg1: int, arg2: int) -> None: ...

  @overload
  def forEach(self, arg0: TIntProcedure) -> bool: ...

  @overload
  def forEach(self, arg0: TIntProcedure) -> bool: ...

  @overload
  def forEachDescending(self, arg0: TIntProcedure) -> bool: ...

  @overload
  def forEachDescending(self, arg0: TIntProcedure) -> bool: ...

  @overload
  def get(self, arg0: int) -> int: ...

  @overload
  def get(self, arg0: int) -> int: ...

  @overload
  def getNoEntryValue(self) -> int: ...

  @overload
  def getNoEntryValue(self) -> int: ...

  def getQuick(self, arg0: int) -> int: ...

  @overload
  def grep(self, arg0: TIntProcedure) -> TIntList: ...

  @overload
  def grep(self, arg0: TIntProcedure) -> TIntList: ...

  def hashCode(self) -> int: ...

  @overload
  def indexOf(self, arg0: int) -> int: ...

  @overload
  def indexOf(self, arg0: int) -> int: ...

  @overload
  def indexOf(self, arg0: int, arg1: int) -> int: ...

  @overload
  def indexOf(self, arg0: int, arg1: int) -> int: ...

  @overload
  def insert(self, arg0: int, arg1: list[int]) -> None: ...

  @overload
  def insert(self, arg0: int, arg1: list[int]) -> None: ...

  @overload
  def insert(self, arg0: int, arg1: int) -> None: ...

  @overload
  def insert(self, arg0: int, arg1: int) -> None: ...

  @overload
  def insert(self, arg0: int, arg1: list[int], arg2: int, arg3: int) -> None: ...

  @overload
  def insert(self, arg0: int, arg1: list[int], arg2: int, arg3: int) -> None: ...

  @overload
  def inverseGrep(self, arg0: TIntProcedure) -> TIntList: ...

  @overload
  def inverseGrep(self, arg0: TIntProcedure) -> TIntList: ...

  @overload
  def isEmpty(self) -> bool: ...

  @overload
  def isEmpty(self) -> bool: ...

  def iterator(self) -> TIntIterator: ...

  @overload
  def lastIndexOf(self, arg0: int) -> int: ...

  @overload
  def lastIndexOf(self, arg0: int) -> int: ...

  @overload
  def lastIndexOf(self, arg0: int, arg1: int) -> int: ...

  @overload
  def lastIndexOf(self, arg0: int, arg1: int) -> int: ...

  @overload
  def max(self) -> int: ...

  @overload
  def max(self) -> int: ...

  @overload
  def min(self) -> int: ...

  @overload
  def min(self) -> int: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def remove(self, arg0: int) -> bool: ...

  @overload
  def remove(self, arg0: int) -> bool: ...

  @overload
  def remove(self, arg0: int, arg1: int) -> None: ...

  @overload
  def remove(self, arg0: int, arg1: int) -> None: ...

  @overload
  def removeAll(self, arg0: list[int]) -> bool: ...

  @overload
  def removeAll(self, arg0: TIntCollection) -> bool: ...

  @overload
  def removeAll(self, arg0: Collection[Any]) -> bool: ...

  @overload
  def removeAt(self, arg0: int) -> int: ...

  @overload
  def removeAt(self, arg0: int) -> int: ...

  @overload
  def replace(self, arg0: int, arg1: int) -> int: ...

  @overload
  def replace(self, arg0: int, arg1: int) -> int: ...

  def reset(self) -> None: ...

  def resetQuick(self) -> None: ...

  @overload
  def retainAll(self, arg0: list[int]) -> bool: ...

  @overload
  def retainAll(self, arg0: TIntCollection) -> bool: ...

  @overload
  def retainAll(self, arg0: Collection[Any]) -> bool: ...

  @overload
  def reverse(self) -> None: ...

  @overload
  def reverse(self) -> None: ...

  @overload
  def reverse(self, arg0: int, arg1: int) -> None: ...

  @overload
  def reverse(self, arg0: int, arg1: int) -> None: ...

  @overload
  def set(self, arg0: int, arg1: list[int]) -> None: ...

  @overload
  def set(self, arg0: int, arg1: list[int]) -> None: ...

  @overload
  def set(self, arg0: int, arg1: int) -> int: ...

  @overload
  def set(self, arg0: int, arg1: int) -> int: ...

  @overload
  def set(self, arg0: int, arg1: list[int], arg2: int, arg3: int) -> None: ...

  @overload
  def set(self, arg0: int, arg1: list[int], arg2: int, arg3: int) -> None: ...

  def setQuick(self, arg0: int, arg1: int) -> None: ...

  @overload
  def shuffle(self, arg0: Random) -> None: ...

  @overload
  def shuffle(self, arg0: Random) -> None: ...

  @overload
  def size(self) -> int: ...

  @overload
  def size(self) -> int: ...

  @overload
  def sort(self) -> None: ...

  @overload
  def sort(self) -> None: ...

  @overload
  def sort(self, arg0: int, arg1: int) -> None: ...

  @overload
  def sort(self, arg0: int, arg1: int) -> None: ...

  @overload
  def subList(self, arg0: int, arg1: int) -> TIntList: ...

  @overload
  def subList(self, arg0: int, arg1: int) -> TIntList: ...

  @overload
  def sum(self) -> int: ...

  @overload
  def sum(self) -> int: ...

  @overload
  def toArray(self) -> list[int]: ...

  @overload
  def toArray(self) -> list[int]: ...

  @overload
  def toArray(self, arg0: list[int]) -> list[int]: ...

  @overload
  def toArray(self, arg0: list[int]) -> list[int]: ...

  @overload
  def toArray(self, arg0: int, arg1: int) -> list[int]: ...

  @overload
  def toArray(self, arg0: int, arg1: int) -> list[int]: ...

  @overload
  def toArray(self, arg0: list[int], arg1: int, arg2: int) -> list[int]: ...

  @overload
  def toArray(self, arg0: list[int], arg1: int, arg2: int) -> list[int]: ...

  @overload
  def toArray(self, arg0: list[int], arg1: int, arg2: int, arg3: int) -> list[int]: ...

  @overload
  def toArray(self, arg0: list[int], arg1: int, arg2: int, arg3: int) -> list[int]: ...

  def toString(self) -> str: ...

  @overload
  def transformValues(self, arg0: TIntFunction) -> None: ...

  @overload
  def transformValues(self, arg0: TIntFunction) -> None: ...

  def trimToSize(self) -> None: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @staticmethod
  @overload
  def wrap(arg0: list[int]) -> TIntArrayList: ...

  @staticmethod
  @overload
  def wrap(arg0: list[int], arg1: int) -> TIntArrayList: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: list[int]): ...
  @overload
  def __init__(self, arg0: TIntCollection): ...
  @overload
  def __init__(self, arg0: int): ...
  @overload
  def __init__(self, arg0: int, arg1: int): ...

  class TIntArrayIterator:

    def hasNext(self) -> bool: ...

    @overload
    def next(self) -> int: ...

    @overload
    def next(self) -> int: ...

    def remove(self) -> None: ...


class TLongArrayList:

  @overload
  def add(self, arg0: list[int]) -> None: ...

  @overload
  def add(self, arg0: list[int]) -> None: ...

  @overload
  def add(self, arg0: int) -> bool: ...

  @overload
  def add(self, arg0: int) -> bool: ...

  @overload
  def add(self, arg0: list[int], arg1: int, arg2: int) -> None: ...

  @overload
  def add(self, arg0: list[int], arg1: int, arg2: int) -> None: ...

  @overload
  def addAll(self, arg0: list[int]) -> bool: ...

  @overload
  def addAll(self, arg0: TLongCollection) -> bool: ...

  @overload
  def addAll(self, arg0: Collection[Long]) -> bool: ...

  @overload
  def binarySearch(self, arg0: int) -> int: ...

  @overload
  def binarySearch(self, arg0: int) -> int: ...

  @overload
  def binarySearch(self, arg0: int, arg1: int, arg2: int) -> int: ...

  @overload
  def binarySearch(self, arg0: int, arg1: int, arg2: int) -> int: ...

  @overload
  def clear(self) -> None: ...

  @overload
  def clear(self) -> None: ...

  @overload
  def clear(self, arg0: int) -> None: ...

  @overload
  def contains(self, arg0: int) -> bool: ...

  @overload
  def contains(self, arg0: int) -> bool: ...

  @overload
  def containsAll(self, arg0: list[int]) -> bool: ...

  @overload
  def containsAll(self, arg0: TLongCollection) -> bool: ...

  @overload
  def containsAll(self, arg0: Collection[Any]) -> bool: ...

  def ensureCapacity(self, arg0: int) -> None: ...

  def equals(self, arg0: object) -> bool: ...

  @overload
  def fill(self, arg0: int) -> None: ...

  @overload
  def fill(self, arg0: int) -> None: ...

  @overload
  def fill(self, arg0: int, arg1: int, arg2: int) -> None: ...

  @overload
  def fill(self, arg0: int, arg1: int, arg2: int) -> None: ...

  @overload
  def forEach(self, arg0: TLongProcedure) -> bool: ...

  @overload
  def forEach(self, arg0: TLongProcedure) -> bool: ...

  @overload
  def forEachDescending(self, arg0: TLongProcedure) -> bool: ...

  @overload
  def forEachDescending(self, arg0: TLongProcedure) -> bool: ...

  @overload
  def get(self, arg0: int) -> int: ...

  @overload
  def get(self, arg0: int) -> int: ...

  @overload
  def getNoEntryValue(self) -> int: ...

  @overload
  def getNoEntryValue(self) -> int: ...

  def getQuick(self, arg0: int) -> int: ...

  @overload
  def grep(self, arg0: TLongProcedure) -> TLongList: ...

  @overload
  def grep(self, arg0: TLongProcedure) -> TLongList: ...

  def hashCode(self) -> int: ...

  @overload
  def indexOf(self, arg0: int) -> int: ...

  @overload
  def indexOf(self, arg0: int) -> int: ...

  @overload
  def indexOf(self, arg0: int, arg1: int) -> int: ...

  @overload
  def indexOf(self, arg0: int, arg1: int) -> int: ...

  @overload
  def insert(self, arg0: int, arg1: list[int]) -> None: ...

  @overload
  def insert(self, arg0: int, arg1: list[int]) -> None: ...

  @overload
  def insert(self, arg0: int, arg1: int) -> None: ...

  @overload
  def insert(self, arg0: int, arg1: int) -> None: ...

  @overload
  def insert(self, arg0: int, arg1: list[int], arg2: int, arg3: int) -> None: ...

  @overload
  def insert(self, arg0: int, arg1: list[int], arg2: int, arg3: int) -> None: ...

  @overload
  def inverseGrep(self, arg0: TLongProcedure) -> TLongList: ...

  @overload
  def inverseGrep(self, arg0: TLongProcedure) -> TLongList: ...

  @overload
  def isEmpty(self) -> bool: ...

  @overload
  def isEmpty(self) -> bool: ...

  def iterator(self) -> TLongIterator: ...

  @overload
  def lastIndexOf(self, arg0: int) -> int: ...

  @overload
  def lastIndexOf(self, arg0: int) -> int: ...

  @overload
  def lastIndexOf(self, arg0: int, arg1: int) -> int: ...

  @overload
  def lastIndexOf(self, arg0: int, arg1: int) -> int: ...

  @overload
  def max(self) -> int: ...

  @overload
  def max(self) -> int: ...

  @overload
  def min(self) -> int: ...

  @overload
  def min(self) -> int: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def remove(self, arg0: int) -> bool: ...

  @overload
  def remove(self, arg0: int) -> bool: ...

  @overload
  def remove(self, arg0: int, arg1: int) -> None: ...

  @overload
  def remove(self, arg0: int, arg1: int) -> None: ...

  @overload
  def removeAll(self, arg0: list[int]) -> bool: ...

  @overload
  def removeAll(self, arg0: TLongCollection) -> bool: ...

  @overload
  def removeAll(self, arg0: Collection[Any]) -> bool: ...

  @overload
  def removeAt(self, arg0: int) -> int: ...

  @overload
  def removeAt(self, arg0: int) -> int: ...

  @overload
  def replace(self, arg0: int, arg1: int) -> int: ...

  @overload
  def replace(self, arg0: int, arg1: int) -> int: ...

  def reset(self) -> None: ...

  def resetQuick(self) -> None: ...

  @overload
  def retainAll(self, arg0: list[int]) -> bool: ...

  @overload
  def retainAll(self, arg0: TLongCollection) -> bool: ...

  @overload
  def retainAll(self, arg0: Collection[Any]) -> bool: ...

  @overload
  def reverse(self) -> None: ...

  @overload
  def reverse(self) -> None: ...

  @overload
  def reverse(self, arg0: int, arg1: int) -> None: ...

  @overload
  def reverse(self, arg0: int, arg1: int) -> None: ...

  @overload
  def set(self, arg0: int, arg1: list[int]) -> None: ...

  @overload
  def set(self, arg0: int, arg1: list[int]) -> None: ...

  @overload
  def set(self, arg0: int, arg1: int) -> int: ...

  @overload
  def set(self, arg0: int, arg1: int) -> int: ...

  @overload
  def set(self, arg0: int, arg1: list[int], arg2: int, arg3: int) -> None: ...

  @overload
  def set(self, arg0: int, arg1: list[int], arg2: int, arg3: int) -> None: ...

  def setQuick(self, arg0: int, arg1: int) -> None: ...

  @overload
  def shuffle(self, arg0: Random) -> None: ...

  @overload
  def shuffle(self, arg0: Random) -> None: ...

  @overload
  def size(self) -> int: ...

  @overload
  def size(self) -> int: ...

  @overload
  def sort(self) -> None: ...

  @overload
  def sort(self) -> None: ...

  @overload
  def sort(self, arg0: int, arg1: int) -> None: ...

  @overload
  def sort(self, arg0: int, arg1: int) -> None: ...

  @overload
  def subList(self, arg0: int, arg1: int) -> TLongList: ...

  @overload
  def subList(self, arg0: int, arg1: int) -> TLongList: ...

  @overload
  def sum(self) -> int: ...

  @overload
  def sum(self) -> int: ...

  @overload
  def toArray(self) -> list[int]: ...

  @overload
  def toArray(self) -> list[int]: ...

  @overload
  def toArray(self, arg0: list[int]) -> list[int]: ...

  @overload
  def toArray(self, arg0: list[int]) -> list[int]: ...

  @overload
  def toArray(self, arg0: int, arg1: int) -> list[int]: ...

  @overload
  def toArray(self, arg0: int, arg1: int) -> list[int]: ...

  @overload
  def toArray(self, arg0: list[int], arg1: int, arg2: int) -> list[int]: ...

  @overload
  def toArray(self, arg0: list[int], arg1: int, arg2: int) -> list[int]: ...

  @overload
  def toArray(self, arg0: list[int], arg1: int, arg2: int, arg3: int) -> list[int]: ...

  @overload
  def toArray(self, arg0: list[int], arg1: int, arg2: int, arg3: int) -> list[int]: ...

  def toString(self) -> str: ...

  @overload
  def transformValues(self, arg0: TLongFunction) -> None: ...

  @overload
  def transformValues(self, arg0: TLongFunction) -> None: ...

  def trimToSize(self) -> None: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @staticmethod
  @overload
  def wrap(arg0: list[int]) -> TLongArrayList: ...

  @staticmethod
  @overload
  def wrap(arg0: list[int], arg1: int) -> TLongArrayList: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: list[int]): ...
  @overload
  def __init__(self, arg0: TLongCollection): ...
  @overload
  def __init__(self, arg0: int): ...
  @overload
  def __init__(self, arg0: int, arg1: int): ...

  class TLongArrayIterator:

    def hasNext(self) -> bool: ...

    @overload
    def next(self) -> int: ...

    @overload
    def next(self) -> int: ...

    def remove(self) -> None: ...


class TShortArrayList:

  @overload
  def add(self, arg0: list[int]) -> None: ...

  @overload
  def add(self, arg0: list[int]) -> None: ...

  @overload
  def add(self, arg0: int) -> bool: ...

  @overload
  def add(self, arg0: int) -> bool: ...

  @overload
  def add(self, arg0: list[int], arg1: int, arg2: int) -> None: ...

  @overload
  def add(self, arg0: list[int], arg1: int, arg2: int) -> None: ...

  @overload
  def addAll(self, arg0: list[int]) -> bool: ...

  @overload
  def addAll(self, arg0: TShortCollection) -> bool: ...

  @overload
  def addAll(self, arg0: Collection[Short]) -> bool: ...

  @overload
  def binarySearch(self, arg0: int) -> int: ...

  @overload
  def binarySearch(self, arg0: int) -> int: ...

  @overload
  def binarySearch(self, arg0: int, arg1: int, arg2: int) -> int: ...

  @overload
  def binarySearch(self, arg0: int, arg1: int, arg2: int) -> int: ...

  @overload
  def clear(self) -> None: ...

  @overload
  def clear(self) -> None: ...

  @overload
  def clear(self, arg0: int) -> None: ...

  @overload
  def contains(self, arg0: int) -> bool: ...

  @overload
  def contains(self, arg0: int) -> bool: ...

  @overload
  def containsAll(self, arg0: list[int]) -> bool: ...

  @overload
  def containsAll(self, arg0: TShortCollection) -> bool: ...

  @overload
  def containsAll(self, arg0: Collection[Any]) -> bool: ...

  def ensureCapacity(self, arg0: int) -> None: ...

  def equals(self, arg0: object) -> bool: ...

  @overload
  def fill(self, arg0: int) -> None: ...

  @overload
  def fill(self, arg0: int) -> None: ...

  @overload
  def fill(self, arg0: int, arg1: int, arg2: int) -> None: ...

  @overload
  def fill(self, arg0: int, arg1: int, arg2: int) -> None: ...

  @overload
  def forEach(self, arg0: TShortProcedure) -> bool: ...

  @overload
  def forEach(self, arg0: TShortProcedure) -> bool: ...

  @overload
  def forEachDescending(self, arg0: TShortProcedure) -> bool: ...

  @overload
  def forEachDescending(self, arg0: TShortProcedure) -> bool: ...

  @overload
  def get(self, arg0: int) -> int: ...

  @overload
  def get(self, arg0: int) -> int: ...

  @overload
  def getNoEntryValue(self) -> int: ...

  @overload
  def getNoEntryValue(self) -> int: ...

  def getQuick(self, arg0: int) -> int: ...

  @overload
  def grep(self, arg0: TShortProcedure) -> TShortList: ...

  @overload
  def grep(self, arg0: TShortProcedure) -> TShortList: ...

  def hashCode(self) -> int: ...

  @overload
  def indexOf(self, arg0: int) -> int: ...

  @overload
  def indexOf(self, arg0: int) -> int: ...

  @overload
  def indexOf(self, arg0: int, arg1: int) -> int: ...

  @overload
  def indexOf(self, arg0: int, arg1: int) -> int: ...

  @overload
  def insert(self, arg0: int, arg1: list[int]) -> None: ...

  @overload
  def insert(self, arg0: int, arg1: list[int]) -> None: ...

  @overload
  def insert(self, arg0: int, arg1: int) -> None: ...

  @overload
  def insert(self, arg0: int, arg1: int) -> None: ...

  @overload
  def insert(self, arg0: int, arg1: list[int], arg2: int, arg3: int) -> None: ...

  @overload
  def insert(self, arg0: int, arg1: list[int], arg2: int, arg3: int) -> None: ...

  @overload
  def inverseGrep(self, arg0: TShortProcedure) -> TShortList: ...

  @overload
  def inverseGrep(self, arg0: TShortProcedure) -> TShortList: ...

  @overload
  def isEmpty(self) -> bool: ...

  @overload
  def isEmpty(self) -> bool: ...

  def iterator(self) -> TShortIterator: ...

  @overload
  def lastIndexOf(self, arg0: int) -> int: ...

  @overload
  def lastIndexOf(self, arg0: int) -> int: ...

  @overload
  def lastIndexOf(self, arg0: int, arg1: int) -> int: ...

  @overload
  def lastIndexOf(self, arg0: int, arg1: int) -> int: ...

  @overload
  def max(self) -> int: ...

  @overload
  def max(self) -> int: ...

  @overload
  def min(self) -> int: ...

  @overload
  def min(self) -> int: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def remove(self, arg0: int) -> bool: ...

  @overload
  def remove(self, arg0: int) -> bool: ...

  @overload
  def remove(self, arg0: int, arg1: int) -> None: ...

  @overload
  def remove(self, arg0: int, arg1: int) -> None: ...

  @overload
  def removeAll(self, arg0: list[int]) -> bool: ...

  @overload
  def removeAll(self, arg0: TShortCollection) -> bool: ...

  @overload
  def removeAll(self, arg0: Collection[Any]) -> bool: ...

  @overload
  def removeAt(self, arg0: int) -> int: ...

  @overload
  def removeAt(self, arg0: int) -> int: ...

  @overload
  def replace(self, arg0: int, arg1: int) -> int: ...

  @overload
  def replace(self, arg0: int, arg1: int) -> int: ...

  def reset(self) -> None: ...

  def resetQuick(self) -> None: ...

  @overload
  def retainAll(self, arg0: list[int]) -> bool: ...

  @overload
  def retainAll(self, arg0: TShortCollection) -> bool: ...

  @overload
  def retainAll(self, arg0: Collection[Any]) -> bool: ...

  @overload
  def reverse(self) -> None: ...

  @overload
  def reverse(self) -> None: ...

  @overload
  def reverse(self, arg0: int, arg1: int) -> None: ...

  @overload
  def reverse(self, arg0: int, arg1: int) -> None: ...

  @overload
  def set(self, arg0: int, arg1: list[int]) -> None: ...

  @overload
  def set(self, arg0: int, arg1: list[int]) -> None: ...

  @overload
  def set(self, arg0: int, arg1: int) -> int: ...

  @overload
  def set(self, arg0: int, arg1: int) -> int: ...

  @overload
  def set(self, arg0: int, arg1: list[int], arg2: int, arg3: int) -> None: ...

  @overload
  def set(self, arg0: int, arg1: list[int], arg2: int, arg3: int) -> None: ...

  def setQuick(self, arg0: int, arg1: int) -> None: ...

  @overload
  def shuffle(self, arg0: Random) -> None: ...

  @overload
  def shuffle(self, arg0: Random) -> None: ...

  @overload
  def size(self) -> int: ...

  @overload
  def size(self) -> int: ...

  @overload
  def sort(self) -> None: ...

  @overload
  def sort(self) -> None: ...

  @overload
  def sort(self, arg0: int, arg1: int) -> None: ...

  @overload
  def sort(self, arg0: int, arg1: int) -> None: ...

  @overload
  def subList(self, arg0: int, arg1: int) -> TShortList: ...

  @overload
  def subList(self, arg0: int, arg1: int) -> TShortList: ...

  @overload
  def sum(self) -> int: ...

  @overload
  def sum(self) -> int: ...

  @overload
  def toArray(self) -> list[int]: ...

  @overload
  def toArray(self) -> list[int]: ...

  @overload
  def toArray(self, arg0: list[int]) -> list[int]: ...

  @overload
  def toArray(self, arg0: list[int]) -> list[int]: ...

  @overload
  def toArray(self, arg0: int, arg1: int) -> list[int]: ...

  @overload
  def toArray(self, arg0: int, arg1: int) -> list[int]: ...

  @overload
  def toArray(self, arg0: list[int], arg1: int, arg2: int) -> list[int]: ...

  @overload
  def toArray(self, arg0: list[int], arg1: int, arg2: int) -> list[int]: ...

  @overload
  def toArray(self, arg0: list[int], arg1: int, arg2: int, arg3: int) -> list[int]: ...

  @overload
  def toArray(self, arg0: list[int], arg1: int, arg2: int, arg3: int) -> list[int]: ...

  def toString(self) -> str: ...

  @overload
  def transformValues(self, arg0: TShortFunction) -> None: ...

  @overload
  def transformValues(self, arg0: TShortFunction) -> None: ...

  def trimToSize(self) -> None: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @staticmethod
  @overload
  def wrap(arg0: list[int]) -> TShortArrayList: ...

  @staticmethod
  @overload
  def wrap(arg0: list[int], arg1: int) -> TShortArrayList: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: list[int]): ...
  @overload
  def __init__(self, arg0: TShortCollection): ...
  @overload
  def __init__(self, arg0: int): ...
  @overload
  def __init__(self, arg0: int, arg1: int): ...

  class TShortArrayIterator:

    def hasNext(self) -> bool: ...

    @overload
    def next(self) -> int: ...

    @overload
    def next(self) -> int: ...

    def remove(self) -> None: ...

