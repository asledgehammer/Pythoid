from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from gnu.trove import TIntCollection, TLongCollection, TShortCollection
from gnu.trove.iterator import TIntIterator, TLongIterator, TShortIterator
from gnu.trove.procedure import TIntProcedure, TLongProcedure, TShortProcedure
from java.util import Collection

class TIntSet:

  serialVersionUID: int

  @overload
  def add(self, arg0: int) -> bool: ...

  @overload
  def add(self, arg0: int) -> bool: ...

  @overload
  def addAll(self, arg0: list[int]) -> bool: ...

  @overload
  def addAll(self, arg0: list[int]) -> bool: ...

  @overload
  def addAll(self, arg0: TIntCollection) -> bool: ...

  @overload
  def addAll(self, arg0: TIntCollection) -> bool: ...

  @overload
  def addAll(self, arg0: Collection[Integer]) -> bool: ...

  @overload
  def addAll(self, arg0: Collection[Integer]) -> bool: ...

  @overload
  def clear(self) -> None: ...

  @overload
  def clear(self) -> None: ...

  @overload
  def contains(self, arg0: int) -> bool: ...

  @overload
  def contains(self, arg0: int) -> bool: ...

  @overload
  def containsAll(self, arg0: list[int]) -> bool: ...

  @overload
  def containsAll(self, arg0: list[int]) -> bool: ...

  @overload
  def containsAll(self, arg0: TIntCollection) -> bool: ...

  @overload
  def containsAll(self, arg0: TIntCollection) -> bool: ...

  @overload
  def containsAll(self, arg0: Collection[Any]) -> bool: ...

  @overload
  def containsAll(self, arg0: Collection[Any]) -> bool: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def forEach(self, arg0: TIntProcedure) -> bool: ...

  @overload
  def forEach(self, arg0: TIntProcedure) -> bool: ...

  @overload
  def getNoEntryValue(self) -> int: ...

  @overload
  def getNoEntryValue(self) -> int: ...

  @overload
  def hashCode(self) -> int: ...

  @overload
  def hashCode(self) -> int: ...

  @overload
  def isEmpty(self) -> bool: ...

  @overload
  def isEmpty(self) -> bool: ...

  @overload
  def iterator(self) -> TIntIterator: ...

  @overload
  def iterator(self) -> TIntIterator: ...

  @overload
  def remove(self, arg0: int) -> bool: ...

  @overload
  def remove(self, arg0: int) -> bool: ...

  @overload
  def removeAll(self, arg0: list[int]) -> bool: ...

  @overload
  def removeAll(self, arg0: list[int]) -> bool: ...

  @overload
  def removeAll(self, arg0: TIntCollection) -> bool: ...

  @overload
  def removeAll(self, arg0: TIntCollection) -> bool: ...

  @overload
  def removeAll(self, arg0: Collection[Any]) -> bool: ...

  @overload
  def removeAll(self, arg0: Collection[Any]) -> bool: ...

  @overload
  def retainAll(self, arg0: list[int]) -> bool: ...

  @overload
  def retainAll(self, arg0: list[int]) -> bool: ...

  @overload
  def retainAll(self, arg0: TIntCollection) -> bool: ...

  @overload
  def retainAll(self, arg0: TIntCollection) -> bool: ...

  @overload
  def retainAll(self, arg0: Collection[Any]) -> bool: ...

  @overload
  def retainAll(self, arg0: Collection[Any]) -> bool: ...

  @overload
  def size(self) -> int: ...

  @overload
  def size(self) -> int: ...

  @overload
  def toArray(self) -> list[int]: ...

  @overload
  def toArray(self) -> list[int]: ...

  @overload
  def toArray(self, arg0: list[int]) -> list[int]: ...

  @overload
  def toArray(self, arg0: list[int]) -> list[int]: ...


class TLongSet:

  serialVersionUID: int

  @overload
  def add(self, arg0: int) -> bool: ...

  @overload
  def add(self, arg0: int) -> bool: ...

  @overload
  def addAll(self, arg0: list[int]) -> bool: ...

  @overload
  def addAll(self, arg0: list[int]) -> bool: ...

  @overload
  def addAll(self, arg0: TLongCollection) -> bool: ...

  @overload
  def addAll(self, arg0: TLongCollection) -> bool: ...

  @overload
  def addAll(self, arg0: Collection[Long]) -> bool: ...

  @overload
  def addAll(self, arg0: Collection[Long]) -> bool: ...

  @overload
  def clear(self) -> None: ...

  @overload
  def clear(self) -> None: ...

  @overload
  def contains(self, arg0: int) -> bool: ...

  @overload
  def contains(self, arg0: int) -> bool: ...

  @overload
  def containsAll(self, arg0: list[int]) -> bool: ...

  @overload
  def containsAll(self, arg0: list[int]) -> bool: ...

  @overload
  def containsAll(self, arg0: TLongCollection) -> bool: ...

  @overload
  def containsAll(self, arg0: TLongCollection) -> bool: ...

  @overload
  def containsAll(self, arg0: Collection[Any]) -> bool: ...

  @overload
  def containsAll(self, arg0: Collection[Any]) -> bool: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def forEach(self, arg0: TLongProcedure) -> bool: ...

  @overload
  def forEach(self, arg0: TLongProcedure) -> bool: ...

  @overload
  def getNoEntryValue(self) -> int: ...

  @overload
  def getNoEntryValue(self) -> int: ...

  @overload
  def hashCode(self) -> int: ...

  @overload
  def hashCode(self) -> int: ...

  @overload
  def isEmpty(self) -> bool: ...

  @overload
  def isEmpty(self) -> bool: ...

  @overload
  def iterator(self) -> TLongIterator: ...

  @overload
  def iterator(self) -> TLongIterator: ...

  @overload
  def remove(self, arg0: int) -> bool: ...

  @overload
  def remove(self, arg0: int) -> bool: ...

  @overload
  def removeAll(self, arg0: list[int]) -> bool: ...

  @overload
  def removeAll(self, arg0: list[int]) -> bool: ...

  @overload
  def removeAll(self, arg0: TLongCollection) -> bool: ...

  @overload
  def removeAll(self, arg0: TLongCollection) -> bool: ...

  @overload
  def removeAll(self, arg0: Collection[Any]) -> bool: ...

  @overload
  def removeAll(self, arg0: Collection[Any]) -> bool: ...

  @overload
  def retainAll(self, arg0: list[int]) -> bool: ...

  @overload
  def retainAll(self, arg0: list[int]) -> bool: ...

  @overload
  def retainAll(self, arg0: TLongCollection) -> bool: ...

  @overload
  def retainAll(self, arg0: TLongCollection) -> bool: ...

  @overload
  def retainAll(self, arg0: Collection[Any]) -> bool: ...

  @overload
  def retainAll(self, arg0: Collection[Any]) -> bool: ...

  @overload
  def size(self) -> int: ...

  @overload
  def size(self) -> int: ...

  @overload
  def toArray(self) -> list[int]: ...

  @overload
  def toArray(self) -> list[int]: ...

  @overload
  def toArray(self, arg0: list[int]) -> list[int]: ...

  @overload
  def toArray(self, arg0: list[int]) -> list[int]: ...


class TShortSet:

  serialVersionUID: int

  @overload
  def add(self, arg0: int) -> bool: ...

  @overload
  def add(self, arg0: int) -> bool: ...

  @overload
  def addAll(self, arg0: list[int]) -> bool: ...

  @overload
  def addAll(self, arg0: list[int]) -> bool: ...

  @overload
  def addAll(self, arg0: TShortCollection) -> bool: ...

  @overload
  def addAll(self, arg0: TShortCollection) -> bool: ...

  @overload
  def addAll(self, arg0: Collection[Short]) -> bool: ...

  @overload
  def addAll(self, arg0: Collection[Short]) -> bool: ...

  @overload
  def clear(self) -> None: ...

  @overload
  def clear(self) -> None: ...

  @overload
  def contains(self, arg0: int) -> bool: ...

  @overload
  def contains(self, arg0: int) -> bool: ...

  @overload
  def containsAll(self, arg0: list[int]) -> bool: ...

  @overload
  def containsAll(self, arg0: list[int]) -> bool: ...

  @overload
  def containsAll(self, arg0: TShortCollection) -> bool: ...

  @overload
  def containsAll(self, arg0: TShortCollection) -> bool: ...

  @overload
  def containsAll(self, arg0: Collection[Any]) -> bool: ...

  @overload
  def containsAll(self, arg0: Collection[Any]) -> bool: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def forEach(self, arg0: TShortProcedure) -> bool: ...

  @overload
  def forEach(self, arg0: TShortProcedure) -> bool: ...

  @overload
  def getNoEntryValue(self) -> int: ...

  @overload
  def getNoEntryValue(self) -> int: ...

  @overload
  def hashCode(self) -> int: ...

  @overload
  def hashCode(self) -> int: ...

  @overload
  def isEmpty(self) -> bool: ...

  @overload
  def isEmpty(self) -> bool: ...

  @overload
  def iterator(self) -> TShortIterator: ...

  @overload
  def iterator(self) -> TShortIterator: ...

  @overload
  def remove(self, arg0: int) -> bool: ...

  @overload
  def remove(self, arg0: int) -> bool: ...

  @overload
  def removeAll(self, arg0: list[int]) -> bool: ...

  @overload
  def removeAll(self, arg0: list[int]) -> bool: ...

  @overload
  def removeAll(self, arg0: TShortCollection) -> bool: ...

  @overload
  def removeAll(self, arg0: TShortCollection) -> bool: ...

  @overload
  def removeAll(self, arg0: Collection[Any]) -> bool: ...

  @overload
  def removeAll(self, arg0: Collection[Any]) -> bool: ...

  @overload
  def retainAll(self, arg0: list[int]) -> bool: ...

  @overload
  def retainAll(self, arg0: list[int]) -> bool: ...

  @overload
  def retainAll(self, arg0: TShortCollection) -> bool: ...

  @overload
  def retainAll(self, arg0: TShortCollection) -> bool: ...

  @overload
  def retainAll(self, arg0: Collection[Any]) -> bool: ...

  @overload
  def retainAll(self, arg0: Collection[Any]) -> bool: ...

  @overload
  def size(self) -> int: ...

  @overload
  def size(self) -> int: ...

  @overload
  def toArray(self) -> list[int]: ...

  @overload
  def toArray(self) -> list[int]: ...

  @overload
  def toArray(self, arg0: list[int]) -> list[int]: ...

  @overload
  def toArray(self, arg0: list[int]) -> list[int]: ...

