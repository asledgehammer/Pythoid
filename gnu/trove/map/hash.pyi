from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from gnu.trove import TIntCollection, TLongCollection, TShortCollection
from gnu.trove.function import TObjectFunction, TIntFunction, TLongFunction, TShortFunction
from gnu.trove.impl.hash import TObjectHash, TIntIntHash, THashPrimitiveIterator, TIntLongHash, TIntHash, TLongHash, TShortHash, TShortShortHash
from gnu.trove.iterator import TIntIntIterator, TIntIterator, TIntLongIterator, TLongIterator, TIntObjectIterator, TLongObjectIterator, TObjectIntIterator, TShortObjectIterator, TShortIterator, TShortShortIterator
from gnu.trove.iterator.hash import TObjectHashIterator
from gnu.trove.map import TIntIntMap, TIntLongMap, TIntObjectMap, TLongObjectMap, TObjectIntMap, TShortObjectMap, TShortShortMap
from gnu.trove.procedure import TObjectObjectProcedure, TObjectProcedure, TIntIntProcedure, TIntProcedure, TIntLongProcedure, TLongProcedure, TIntObjectProcedure, TLongObjectProcedure, TObjectIntProcedure, TShortObjectProcedure, TShortProcedure, TShortShortProcedure
from gnu.trove.set import TIntSet, TLongSet, TShortSet
from java.io import ObjectInput, ObjectOutput
from java.util import Set, Map, Collection, Comparator, Iterator, AbstractSet, Spliterator
from java.util.function import Consumer

K = TypeVar('K', default=Any)
V = TypeVar('V', default=Any)
E = TypeVar('E', default=Any)
T = TypeVar('T', default=Any)
EqProcedure_K = TypeVar('EqProcedure_K', default=Any)
EqProcedure_V = TypeVar('EqProcedure_V', default=Any)
TIntObjectHashIterator_V = TypeVar('TIntObjectHashIterator_V', default=Any)
TLongObjectHashIterator_V = TypeVar('TLongObjectHashIterator_V', default=Any)
TObjectIntHashIterator_K = TypeVar('TObjectIntHashIterator_K', default=Any)
TShortObjectHashIterator_V = TypeVar('TShortObjectHashIterator_V', default=Any)

class THashMap[K, V](TObjectHash):

  def clear(self) -> None: ...

  def containsKey(self, arg0: object) -> bool: ...

  def containsValue(self, arg0: object) -> bool: ...

  def entrySet(self) -> Set[Map.Entry[K, V]]: ...

  def equals(self, arg0: object) -> bool: ...

  @overload
  def forEachEntry(self, arg0: TObjectObjectProcedure[K, V]) -> bool: ...

  @overload
  def forEachEntry(self, arg0: TObjectObjectProcedure[K, V]) -> bool: ...

  @overload
  def forEachKey(self, arg0: TObjectProcedure[K]) -> bool: ...

  @overload
  def forEachKey(self, arg0: TObjectProcedure[K]) -> bool: ...

  @overload
  def forEachValue(self, arg0: TObjectProcedure[V]) -> bool: ...

  @overload
  def forEachValue(self, arg0: TObjectProcedure[V]) -> bool: ...

  def get(self, arg0: object) -> object: ...

  def hashCode(self) -> int: ...

  def keySet(self) -> Set[K]: ...

  def put(self, arg0: object, arg1: object) -> object: ...

  def putAll(self, arg0: Map[K, V]) -> None: ...

  @overload
  def putIfAbsent(self, arg0: object, arg1: object) -> object: ...

  @overload
  def putIfAbsent(self, arg0: object, arg1: object) -> object: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  def remove(self, arg0: object) -> object: ...

  def removeAt(self, arg0: int) -> None: ...

  @overload
  def retainEntries(self, arg0: TObjectObjectProcedure[K, V]) -> bool: ...

  @overload
  def retainEntries(self, arg0: TObjectObjectProcedure[K, V]) -> bool: ...

  def setUp(self, arg0: int) -> int: ...

  def toString(self) -> str: ...

  @overload
  def transformValues(self, arg0: TObjectFunction[V, V]) -> None: ...

  @overload
  def transformValues(self, arg0: TObjectFunction[V, V]) -> None: ...

  def values(self) -> Collection[V]: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: THashMap[K, V]): ...
  @overload
  def __init__(self, arg0: int): ...
  @overload
  def __init__(self, arg0: Map[K, V]): ...
  @overload
  def __init__(self, arg0: int, arg1: float): ...

  class Entry:

    @overload
    def equals(self, arg0: object) -> bool: ...

    @overload
    def equals(self, arg0: object) -> bool: ...

    @overload
    def getKey(self) -> object: ...

    @overload
    def getKey(self) -> object: ...

    @overload
    def getValue(self) -> object: ...

    @overload
    def getValue(self) -> object: ...

    @overload
    def hashCode(self) -> int: ...

    @overload
    def hashCode(self) -> int: ...

    @overload
    def setValue(self, arg0: object) -> object: ...

    @overload
    def setValue(self, arg0: object) -> object: ...

    def toString(self) -> str: ...

    @staticmethod
    @overload
    def comparingByKey() -> Comparator[Map.Entry[K, V]]: ...

    @staticmethod
    @overload
    def comparingByKey(arg0: Comparator[K]) -> Comparator[Map.Entry[K, V]]: ...

    @staticmethod
    @overload
    def comparingByValue() -> Comparator[Map.Entry[K, V]]: ...

    @staticmethod
    @overload
    def comparingByValue(arg0: Comparator[V]) -> Comparator[Map.Entry[K, V]]: ...

    @staticmethod
    def copyOf(arg0: Map.Entry) -> Map.Entry: ...

  class KeyView(THashMap.MapBackedView):

    def containsElement(self, arg0: object) -> bool: ...

    def iterator(self) -> Iterator[K]: ...

    def removeElement(self, arg0: object) -> bool: ...

  class MapBackedView[E](AbstractSet):

    @overload
    def add(self, arg0: object) -> bool: ...

    @overload
    def add(self, arg0: object) -> bool: ...

    @overload
    def addAll(self, arg0: Collection[E]) -> bool: ...

    @overload
    def addAll(self, arg0: Collection[E]) -> bool: ...

    @overload
    def clear(self) -> None: ...

    @overload
    def clear(self) -> None: ...

    @overload
    def contains(self, arg0: object) -> bool: ...

    @overload
    def contains(self, arg0: object) -> bool: ...

    def containsAll(self, arg0: Collection[Any]) -> bool: ...

    def containsElement(self, arg0: object) -> bool: ...

    def equals(self, arg0: object) -> bool: ...

    def forEach(self, arg0: Consumer[T]) -> None: ...

    def hashCode(self) -> int: ...

    @overload
    def isEmpty(self) -> bool: ...

    @overload
    def isEmpty(self) -> bool: ...

    @overload
    def iterator(self) -> Iterator[E]: ...

    @overload
    def iterator(self) -> Iterator[E]: ...

    @overload
    def iterator(self) -> Iterator[T]: ...

    @overload
    def remove(self, arg0: object) -> bool: ...

    @overload
    def remove(self, arg0: object) -> bool: ...

    def removeAll(self, arg0: Collection[Any]) -> bool: ...

    def removeElement(self, arg0: object) -> bool: ...

    @overload
    def retainAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def retainAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def size(self) -> int: ...

    @overload
    def size(self) -> int: ...

    @overload
    def spliterator(self) -> Spliterator[E]: ...

    @overload
    def spliterator(self) -> Spliterator[T]: ...

    @overload
    def toArray(self) -> list[object]: ...

    @overload
    def toArray(self) -> list[object]: ...

    @overload
    def toArray(self, arg0: list[object]) -> list[object]: ...

    @overload
    def toArray(self, arg0: list[object]) -> list[object]: ...

    def toString(self) -> str: ...

    @staticmethod
    def copyOf(arg0: Collection[E]) -> Set[E]: ...

    @staticmethod
    @overload
    def of() -> Set[E]: ...

    @staticmethod
    @overload
    def of(arg0: list[object]) -> Set[E]: ...

    @staticmethod
    @overload
    def of(arg0: object) -> Set[E]: ...

    @staticmethod
    @overload
    def of(arg0: object, arg1: object) -> Set[E]: ...

    @staticmethod
    @overload
    def of(arg0: object, arg1: object, arg2: object) -> Set[E]: ...

    @staticmethod
    @overload
    def of(arg0: object, arg1: object, arg2: object, arg3: object) -> Set[E]: ...

    @staticmethod
    @overload
    def of(arg0: object, arg1: object, arg2: object, arg3: object, arg4: object) -> Set[E]: ...

    @staticmethod
    @overload
    def of(arg0: object, arg1: object, arg2: object, arg3: object, arg4: object, arg5: object) -> Set[E]: ...

    @staticmethod
    @overload
    def of(arg0: object, arg1: object, arg2: object, arg3: object, arg4: object, arg5: object, arg6: object) -> Set[E]: ...

    @staticmethod
    @overload
    def of(arg0: object, arg1: object, arg2: object, arg3: object, arg4: object, arg5: object, arg6: object, arg7: object) -> Set[E]: ...

    @staticmethod
    @overload
    def of(arg0: object, arg1: object, arg2: object, arg3: object, arg4: object, arg5: object, arg6: object, arg7: object, arg8: object) -> Set[E]: ...

    @staticmethod
    @overload
    def of(arg0: object, arg1: object, arg2: object, arg3: object, arg4: object, arg5: object, arg6: object, arg7: object, arg8: object, arg9: object) -> Set[E]: ...

  class EntryView(THashMap.MapBackedView):

    @overload
    def containsElement(self, arg0: object) -> bool: ...

    @overload
    def containsElement(self, arg0: Map.Entry) -> bool: ...

    def iterator(self) -> Iterator[Map.Entry[K, V]]: ...

    @overload
    def removeElement(self, arg0: object) -> bool: ...

    @overload
    def removeElement(self, arg0: Map.Entry) -> bool: ...

    class EntryIterator(TObjectHashIterator):

      @overload
      def objectAtIndex(self, arg0: int) -> THashMap.Entry: ...

      @overload
      def objectAtIndex(self, arg0: int) -> object: ...

  class ValueView(THashMap.MapBackedView):

    def containsElement(self, arg0: object) -> bool: ...

    def iterator(self) -> Iterator[V]: ...

    def removeElement(self, arg0: object) -> bool: ...

  class EqProcedure[EqProcedure_K, EqProcedure_V]:

    @overload
    def execute(self, arg0: object, arg1: object) -> bool: ...

    @overload
    def execute(self, arg0: object, arg1: object) -> bool: ...

  class HashProcedure:

    @overload
    def execute(self, arg0: object, arg1: object) -> bool: ...

    @overload
    def execute(self, arg0: object, arg1: object) -> bool: ...

    def getHashCode(self) -> int: ...


class TIntIntHashMap(TIntIntHash):

  @overload
  def adjustOrPutValue(self, arg0: int, arg1: int, arg2: int) -> int: ...

  @overload
  def adjustOrPutValue(self, arg0: int, arg1: int, arg2: int) -> int: ...

  @overload
  def adjustValue(self, arg0: int, arg1: int) -> bool: ...

  @overload
  def adjustValue(self, arg0: int, arg1: int) -> bool: ...

  @overload
  def clear(self) -> None: ...

  @overload
  def clear(self) -> None: ...

  @overload
  def containsKey(self, arg0: int) -> bool: ...

  @overload
  def containsKey(self, arg0: int) -> bool: ...

  @overload
  def containsValue(self, arg0: int) -> bool: ...

  @overload
  def containsValue(self, arg0: int) -> bool: ...

  def equals(self, arg0: object) -> bool: ...

  @overload
  def forEachEntry(self, arg0: TIntIntProcedure) -> bool: ...

  @overload
  def forEachEntry(self, arg0: TIntIntProcedure) -> bool: ...

  @overload
  def forEachKey(self, arg0: TIntProcedure) -> bool: ...

  @overload
  def forEachKey(self, arg0: TIntProcedure) -> bool: ...

  @overload
  def forEachValue(self, arg0: TIntProcedure) -> bool: ...

  @overload
  def forEachValue(self, arg0: TIntProcedure) -> bool: ...

  @overload
  def get(self, arg0: int) -> int: ...

  @overload
  def get(self, arg0: int) -> int: ...

  def getNoEntryKey(self) -> int: ...

  def getNoEntryValue(self) -> int: ...

  def hashCode(self) -> int: ...

  @overload
  def increment(self, arg0: int) -> bool: ...

  @overload
  def increment(self, arg0: int) -> bool: ...

  @overload
  def isEmpty(self) -> bool: ...

  @overload
  def isEmpty(self) -> bool: ...

  @overload
  def iterator(self) -> TIntIntIterator: ...

  @overload
  def iterator(self) -> TIntIntIterator: ...

  @overload
  def keySet(self) -> TIntSet: ...

  @overload
  def keySet(self) -> TIntSet: ...

  @overload
  def keys(self) -> list[int]: ...

  @overload
  def keys(self) -> list[int]: ...

  @overload
  def keys(self, arg0: list[int]) -> list[int]: ...

  @overload
  def keys(self, arg0: list[int]) -> list[int]: ...

  @overload
  def put(self, arg0: int, arg1: int) -> int: ...

  @overload
  def put(self, arg0: int, arg1: int) -> int: ...

  @overload
  def putAll(self, arg0: TIntIntMap) -> None: ...

  @overload
  def putAll(self, arg0: TIntIntMap) -> None: ...

  @overload
  def putAll(self, arg0: Map[Integer, Integer]) -> None: ...

  @overload
  def putAll(self, arg0: Map[Integer, Integer]) -> None: ...

  @overload
  def putIfAbsent(self, arg0: int, arg1: int) -> int: ...

  @overload
  def putIfAbsent(self, arg0: int, arg1: int) -> int: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def remove(self, arg0: int) -> int: ...

  @overload
  def remove(self, arg0: int) -> int: ...

  @overload
  def retainEntries(self, arg0: TIntIntProcedure) -> bool: ...

  @overload
  def retainEntries(self, arg0: TIntIntProcedure) -> bool: ...

  def size(self) -> int: ...

  def toString(self) -> str: ...

  @overload
  def transformValues(self, arg0: TIntFunction) -> None: ...

  @overload
  def transformValues(self, arg0: TIntFunction) -> None: ...

  @overload
  def valueCollection(self) -> TIntCollection: ...

  @overload
  def valueCollection(self) -> TIntCollection: ...

  @overload
  def values(self) -> list[int]: ...

  @overload
  def values(self) -> list[int]: ...

  @overload
  def values(self, arg0: list[int]) -> list[int]: ...

  @overload
  def values(self, arg0: list[int]) -> list[int]: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: TIntIntMap): ...
  @overload
  def __init__(self, arg0: int): ...
  @overload
  def __init__(self, arg0: list[int], arg1: list[int]): ...
  @overload
  def __init__(self, arg0: int, arg1: float): ...
  @overload
  def __init__(self, arg0: int, arg1: float, arg2: int, arg3: int): ...

  class TIntIntHashIterator(THashPrimitiveIterator):

    def advance(self) -> None: ...

    @overload
    def key(self) -> int: ...

    @overload
    def key(self) -> int: ...

    def remove(self) -> None: ...

    @overload
    def setValue(self, arg0: int) -> int: ...

    @overload
    def setValue(self, arg0: int) -> int: ...

    @overload
    def value(self) -> int: ...

    @overload
    def value(self) -> int: ...

  class TIntIntValueHashIterator(THashPrimitiveIterator):

    @overload
    def next(self) -> int: ...

    @overload
    def next(self) -> int: ...

    def remove(self) -> None: ...

  class TIntIntKeyHashIterator(THashPrimitiveIterator):

    @overload
    def next(self) -> int: ...

    @overload
    def next(self) -> int: ...

    def remove(self) -> None: ...

  class TValueView:

    serialVersionUID: int

    @overload
    def add(self, arg0: int) -> bool: ...

    @overload
    def add(self, arg0: int) -> bool: ...

    @overload
    def addAll(self, arg0: list[int]) -> bool: ...

    @overload
    def addAll(self, arg0: list[int]) -> bool: ...

    @overload
    def addAll(self, arg0: TIntCollection) -> bool: ...

    @overload
    def addAll(self, arg0: TIntCollection) -> bool: ...

    @overload
    def addAll(self, arg0: Collection[Integer]) -> bool: ...

    @overload
    def addAll(self, arg0: Collection[Integer]) -> bool: ...

    @overload
    def clear(self) -> None: ...

    @overload
    def clear(self) -> None: ...

    @overload
    def contains(self, arg0: int) -> bool: ...

    @overload
    def contains(self, arg0: int) -> bool: ...

    @overload
    def containsAll(self, arg0: list[int]) -> bool: ...

    @overload
    def containsAll(self, arg0: list[int]) -> bool: ...

    @overload
    def containsAll(self, arg0: TIntCollection) -> bool: ...

    @overload
    def containsAll(self, arg0: TIntCollection) -> bool: ...

    @overload
    def containsAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def containsAll(self, arg0: Collection[Any]) -> bool: ...

    def equals(self, arg0: object) -> bool: ...

    @overload
    def forEach(self, arg0: TIntProcedure) -> bool: ...

    @overload
    def forEach(self, arg0: TIntProcedure) -> bool: ...

    @overload
    def getNoEntryValue(self) -> int: ...

    @overload
    def getNoEntryValue(self) -> int: ...

    def hashCode(self) -> int: ...

    @overload
    def isEmpty(self) -> bool: ...

    @overload
    def isEmpty(self) -> bool: ...

    @overload
    def iterator(self) -> TIntIterator: ...

    @overload
    def iterator(self) -> TIntIterator: ...

    @overload
    def remove(self, arg0: int) -> bool: ...

    @overload
    def remove(self, arg0: int) -> bool: ...

    @overload
    def removeAll(self, arg0: list[int]) -> bool: ...

    @overload
    def removeAll(self, arg0: list[int]) -> bool: ...

    @overload
    def removeAll(self, arg0: TIntCollection) -> bool: ...

    @overload
    def removeAll(self, arg0: TIntCollection) -> bool: ...

    @overload
    def removeAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def removeAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def retainAll(self, arg0: list[int]) -> bool: ...

    @overload
    def retainAll(self, arg0: list[int]) -> bool: ...

    @overload
    def retainAll(self, arg0: TIntCollection) -> bool: ...

    @overload
    def retainAll(self, arg0: TIntCollection) -> bool: ...

    @overload
    def retainAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def retainAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def size(self) -> int: ...

    @overload
    def size(self) -> int: ...

    @overload
    def toArray(self) -> list[int]: ...

    @overload
    def toArray(self) -> list[int]: ...

    @overload
    def toArray(self, arg0: list[int]) -> list[int]: ...

    @overload
    def toArray(self, arg0: list[int]) -> list[int]: ...

    def toString(self) -> str: ...

  class TKeyView:

    @overload
    def add(self, arg0: int) -> bool: ...

    @overload
    def add(self, arg0: int) -> bool: ...

    @overload
    def addAll(self, arg0: list[int]) -> bool: ...

    @overload
    def addAll(self, arg0: list[int]) -> bool: ...

    @overload
    def addAll(self, arg0: TIntCollection) -> bool: ...

    @overload
    def addAll(self, arg0: TIntCollection) -> bool: ...

    @overload
    def addAll(self, arg0: Collection[Integer]) -> bool: ...

    @overload
    def addAll(self, arg0: Collection[Integer]) -> bool: ...

    @overload
    def clear(self) -> None: ...

    @overload
    def clear(self) -> None: ...

    @overload
    def contains(self, arg0: int) -> bool: ...

    @overload
    def contains(self, arg0: int) -> bool: ...

    @overload
    def containsAll(self, arg0: list[int]) -> bool: ...

    @overload
    def containsAll(self, arg0: list[int]) -> bool: ...

    @overload
    def containsAll(self, arg0: TIntCollection) -> bool: ...

    @overload
    def containsAll(self, arg0: TIntCollection) -> bool: ...

    @overload
    def containsAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def containsAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def equals(self, arg0: object) -> bool: ...

    @overload
    def equals(self, arg0: object) -> bool: ...

    @overload
    def forEach(self, arg0: TIntProcedure) -> bool: ...

    @overload
    def forEach(self, arg0: TIntProcedure) -> bool: ...

    @overload
    def getNoEntryValue(self) -> int: ...

    @overload
    def getNoEntryValue(self) -> int: ...

    @overload
    def hashCode(self) -> int: ...

    @overload
    def hashCode(self) -> int: ...

    @overload
    def isEmpty(self) -> bool: ...

    @overload
    def isEmpty(self) -> bool: ...

    @overload
    def iterator(self) -> TIntIterator: ...

    @overload
    def iterator(self) -> TIntIterator: ...

    @overload
    def remove(self, arg0: int) -> bool: ...

    @overload
    def remove(self, arg0: int) -> bool: ...

    @overload
    def removeAll(self, arg0: list[int]) -> bool: ...

    @overload
    def removeAll(self, arg0: list[int]) -> bool: ...

    @overload
    def removeAll(self, arg0: TIntCollection) -> bool: ...

    @overload
    def removeAll(self, arg0: TIntCollection) -> bool: ...

    @overload
    def removeAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def removeAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def retainAll(self, arg0: list[int]) -> bool: ...

    @overload
    def retainAll(self, arg0: list[int]) -> bool: ...

    @overload
    def retainAll(self, arg0: TIntCollection) -> bool: ...

    @overload
    def retainAll(self, arg0: TIntCollection) -> bool: ...

    @overload
    def retainAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def retainAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def size(self) -> int: ...

    @overload
    def size(self) -> int: ...

    @overload
    def toArray(self) -> list[int]: ...

    @overload
    def toArray(self) -> list[int]: ...

    @overload
    def toArray(self, arg0: list[int]) -> list[int]: ...

    @overload
    def toArray(self, arg0: list[int]) -> list[int]: ...

    def toString(self) -> str: ...


class TIntLongHashMap(TIntLongHash):

  @overload
  def adjustOrPutValue(self, arg0: int, arg1: int, arg2: int) -> int: ...

  @overload
  def adjustOrPutValue(self, arg0: int, arg1: int, arg2: int) -> int: ...

  @overload
  def adjustValue(self, arg0: int, arg1: int) -> bool: ...

  @overload
  def adjustValue(self, arg0: int, arg1: int) -> bool: ...

  @overload
  def clear(self) -> None: ...

  @overload
  def clear(self) -> None: ...

  @overload
  def containsKey(self, arg0: int) -> bool: ...

  @overload
  def containsKey(self, arg0: int) -> bool: ...

  @overload
  def containsValue(self, arg0: int) -> bool: ...

  @overload
  def containsValue(self, arg0: int) -> bool: ...

  def equals(self, arg0: object) -> bool: ...

  @overload
  def forEachEntry(self, arg0: TIntLongProcedure) -> bool: ...

  @overload
  def forEachEntry(self, arg0: TIntLongProcedure) -> bool: ...

  @overload
  def forEachKey(self, arg0: TIntProcedure) -> bool: ...

  @overload
  def forEachKey(self, arg0: TIntProcedure) -> bool: ...

  @overload
  def forEachValue(self, arg0: TLongProcedure) -> bool: ...

  @overload
  def forEachValue(self, arg0: TLongProcedure) -> bool: ...

  @overload
  def get(self, arg0: int) -> int: ...

  @overload
  def get(self, arg0: int) -> int: ...

  def getNoEntryKey(self) -> int: ...

  def getNoEntryValue(self) -> int: ...

  def hashCode(self) -> int: ...

  @overload
  def increment(self, arg0: int) -> bool: ...

  @overload
  def increment(self, arg0: int) -> bool: ...

  @overload
  def isEmpty(self) -> bool: ...

  @overload
  def isEmpty(self) -> bool: ...

  @overload
  def iterator(self) -> TIntLongIterator: ...

  @overload
  def iterator(self) -> TIntLongIterator: ...

  @overload
  def keySet(self) -> TIntSet: ...

  @overload
  def keySet(self) -> TIntSet: ...

  @overload
  def keys(self) -> list[int]: ...

  @overload
  def keys(self) -> list[int]: ...

  @overload
  def keys(self, arg0: list[int]) -> list[int]: ...

  @overload
  def keys(self, arg0: list[int]) -> list[int]: ...

  @overload
  def put(self, arg0: int, arg1: int) -> int: ...

  @overload
  def put(self, arg0: int, arg1: int) -> int: ...

  @overload
  def putAll(self, arg0: TIntLongMap) -> None: ...

  @overload
  def putAll(self, arg0: TIntLongMap) -> None: ...

  @overload
  def putAll(self, arg0: Map[Integer, Long]) -> None: ...

  @overload
  def putAll(self, arg0: Map[Integer, Long]) -> None: ...

  @overload
  def putIfAbsent(self, arg0: int, arg1: int) -> int: ...

  @overload
  def putIfAbsent(self, arg0: int, arg1: int) -> int: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def remove(self, arg0: int) -> int: ...

  @overload
  def remove(self, arg0: int) -> int: ...

  @overload
  def retainEntries(self, arg0: TIntLongProcedure) -> bool: ...

  @overload
  def retainEntries(self, arg0: TIntLongProcedure) -> bool: ...

  def size(self) -> int: ...

  def toString(self) -> str: ...

  @overload
  def transformValues(self, arg0: TLongFunction) -> None: ...

  @overload
  def transformValues(self, arg0: TLongFunction) -> None: ...

  @overload
  def valueCollection(self) -> TLongCollection: ...

  @overload
  def valueCollection(self) -> TLongCollection: ...

  @overload
  def values(self) -> list[int]: ...

  @overload
  def values(self) -> list[int]: ...

  @overload
  def values(self, arg0: list[int]) -> list[int]: ...

  @overload
  def values(self, arg0: list[int]) -> list[int]: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: TIntLongMap): ...
  @overload
  def __init__(self, arg0: int): ...
  @overload
  def __init__(self, arg0: list[int], arg1: list[int]): ...
  @overload
  def __init__(self, arg0: int, arg1: float): ...
  @overload
  def __init__(self, arg0: int, arg1: float, arg2: int, arg3: int): ...

  class TIntLongHashIterator(THashPrimitiveIterator):

    def advance(self) -> None: ...

    @overload
    def key(self) -> int: ...

    @overload
    def key(self) -> int: ...

    def remove(self) -> None: ...

    @overload
    def setValue(self, arg0: int) -> int: ...

    @overload
    def setValue(self, arg0: int) -> int: ...

    @overload
    def value(self) -> int: ...

    @overload
    def value(self) -> int: ...

  class TIntLongValueHashIterator(THashPrimitiveIterator):

    @overload
    def next(self) -> int: ...

    @overload
    def next(self) -> int: ...

    def remove(self) -> None: ...

  class TIntLongKeyHashIterator(THashPrimitiveIterator):

    @overload
    def next(self) -> int: ...

    @overload
    def next(self) -> int: ...

    def remove(self) -> None: ...

  class TValueView:

    serialVersionUID: int

    @overload
    def add(self, arg0: int) -> bool: ...

    @overload
    def add(self, arg0: int) -> bool: ...

    @overload
    def addAll(self, arg0: list[int]) -> bool: ...

    @overload
    def addAll(self, arg0: list[int]) -> bool: ...

    @overload
    def addAll(self, arg0: TLongCollection) -> bool: ...

    @overload
    def addAll(self, arg0: TLongCollection) -> bool: ...

    @overload
    def addAll(self, arg0: Collection[Long]) -> bool: ...

    @overload
    def addAll(self, arg0: Collection[Long]) -> bool: ...

    @overload
    def clear(self) -> None: ...

    @overload
    def clear(self) -> None: ...

    @overload
    def contains(self, arg0: int) -> bool: ...

    @overload
    def contains(self, arg0: int) -> bool: ...

    @overload
    def containsAll(self, arg0: list[int]) -> bool: ...

    @overload
    def containsAll(self, arg0: list[int]) -> bool: ...

    @overload
    def containsAll(self, arg0: TLongCollection) -> bool: ...

    @overload
    def containsAll(self, arg0: TLongCollection) -> bool: ...

    @overload
    def containsAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def containsAll(self, arg0: Collection[Any]) -> bool: ...

    def equals(self, arg0: object) -> bool: ...

    @overload
    def forEach(self, arg0: TLongProcedure) -> bool: ...

    @overload
    def forEach(self, arg0: TLongProcedure) -> bool: ...

    @overload
    def getNoEntryValue(self) -> int: ...

    @overload
    def getNoEntryValue(self) -> int: ...

    def hashCode(self) -> int: ...

    @overload
    def isEmpty(self) -> bool: ...

    @overload
    def isEmpty(self) -> bool: ...

    @overload
    def iterator(self) -> TLongIterator: ...

    @overload
    def iterator(self) -> TLongIterator: ...

    @overload
    def remove(self, arg0: int) -> bool: ...

    @overload
    def remove(self, arg0: int) -> bool: ...

    @overload
    def removeAll(self, arg0: list[int]) -> bool: ...

    @overload
    def removeAll(self, arg0: list[int]) -> bool: ...

    @overload
    def removeAll(self, arg0: TLongCollection) -> bool: ...

    @overload
    def removeAll(self, arg0: TLongCollection) -> bool: ...

    @overload
    def removeAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def removeAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def retainAll(self, arg0: list[int]) -> bool: ...

    @overload
    def retainAll(self, arg0: list[int]) -> bool: ...

    @overload
    def retainAll(self, arg0: TLongCollection) -> bool: ...

    @overload
    def retainAll(self, arg0: TLongCollection) -> bool: ...

    @overload
    def retainAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def retainAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def size(self) -> int: ...

    @overload
    def size(self) -> int: ...

    @overload
    def toArray(self) -> list[int]: ...

    @overload
    def toArray(self) -> list[int]: ...

    @overload
    def toArray(self, arg0: list[int]) -> list[int]: ...

    @overload
    def toArray(self, arg0: list[int]) -> list[int]: ...

    def toString(self) -> str: ...

  class TKeyView:

    @overload
    def add(self, arg0: int) -> bool: ...

    @overload
    def add(self, arg0: int) -> bool: ...

    @overload
    def addAll(self, arg0: list[int]) -> bool: ...

    @overload
    def addAll(self, arg0: list[int]) -> bool: ...

    @overload
    def addAll(self, arg0: TIntCollection) -> bool: ...

    @overload
    def addAll(self, arg0: TIntCollection) -> bool: ...

    @overload
    def addAll(self, arg0: Collection[Integer]) -> bool: ...

    @overload
    def addAll(self, arg0: Collection[Integer]) -> bool: ...

    @overload
    def clear(self) -> None: ...

    @overload
    def clear(self) -> None: ...

    @overload
    def contains(self, arg0: int) -> bool: ...

    @overload
    def contains(self, arg0: int) -> bool: ...

    @overload
    def containsAll(self, arg0: list[int]) -> bool: ...

    @overload
    def containsAll(self, arg0: list[int]) -> bool: ...

    @overload
    def containsAll(self, arg0: TIntCollection) -> bool: ...

    @overload
    def containsAll(self, arg0: TIntCollection) -> bool: ...

    @overload
    def containsAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def containsAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def equals(self, arg0: object) -> bool: ...

    @overload
    def equals(self, arg0: object) -> bool: ...

    @overload
    def forEach(self, arg0: TIntProcedure) -> bool: ...

    @overload
    def forEach(self, arg0: TIntProcedure) -> bool: ...

    @overload
    def getNoEntryValue(self) -> int: ...

    @overload
    def getNoEntryValue(self) -> int: ...

    @overload
    def hashCode(self) -> int: ...

    @overload
    def hashCode(self) -> int: ...

    @overload
    def isEmpty(self) -> bool: ...

    @overload
    def isEmpty(self) -> bool: ...

    @overload
    def iterator(self) -> TIntIterator: ...

    @overload
    def iterator(self) -> TIntIterator: ...

    @overload
    def remove(self, arg0: int) -> bool: ...

    @overload
    def remove(self, arg0: int) -> bool: ...

    @overload
    def removeAll(self, arg0: list[int]) -> bool: ...

    @overload
    def removeAll(self, arg0: list[int]) -> bool: ...

    @overload
    def removeAll(self, arg0: TIntCollection) -> bool: ...

    @overload
    def removeAll(self, arg0: TIntCollection) -> bool: ...

    @overload
    def removeAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def removeAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def retainAll(self, arg0: list[int]) -> bool: ...

    @overload
    def retainAll(self, arg0: list[int]) -> bool: ...

    @overload
    def retainAll(self, arg0: TIntCollection) -> bool: ...

    @overload
    def retainAll(self, arg0: TIntCollection) -> bool: ...

    @overload
    def retainAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def retainAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def size(self) -> int: ...

    @overload
    def size(self) -> int: ...

    @overload
    def toArray(self) -> list[int]: ...

    @overload
    def toArray(self) -> list[int]: ...

    @overload
    def toArray(self, arg0: list[int]) -> list[int]: ...

    @overload
    def toArray(self, arg0: list[int]) -> list[int]: ...

    def toString(self) -> str: ...


class TIntObjectHashMap[V](TIntHash):

  @overload
  def clear(self) -> None: ...

  @overload
  def clear(self) -> None: ...

  @overload
  def containsKey(self, arg0: int) -> bool: ...

  @overload
  def containsKey(self, arg0: int) -> bool: ...

  @overload
  def containsValue(self, arg0: object) -> bool: ...

  @overload
  def containsValue(self, arg0: object) -> bool: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def forEachEntry(self, arg0: TIntObjectProcedure[V]) -> bool: ...

  @overload
  def forEachEntry(self, arg0: TIntObjectProcedure[V]) -> bool: ...

  @overload
  def forEachKey(self, arg0: TIntProcedure) -> bool: ...

  @overload
  def forEachKey(self, arg0: TIntProcedure) -> bool: ...

  @overload
  def forEachValue(self, arg0: TObjectProcedure[V]) -> bool: ...

  @overload
  def forEachValue(self, arg0: TObjectProcedure[V]) -> bool: ...

  @overload
  def get(self, arg0: int) -> object: ...

  @overload
  def get(self, arg0: int) -> object: ...

  @overload
  def getNoEntryKey(self) -> int: ...

  @overload
  def getNoEntryKey(self) -> int: ...

  @overload
  def hashCode(self) -> int: ...

  @overload
  def hashCode(self) -> int: ...

  def isEmpty(self) -> bool: ...

  @overload
  def iterator(self) -> TIntObjectIterator[V]: ...

  @overload
  def iterator(self) -> TIntObjectIterator[V]: ...

  @overload
  def keySet(self) -> TIntSet: ...

  @overload
  def keySet(self) -> TIntSet: ...

  @overload
  def keys(self) -> list[int]: ...

  @overload
  def keys(self) -> list[int]: ...

  @overload
  def keys(self, arg0: list[int]) -> list[int]: ...

  @overload
  def keys(self, arg0: list[int]) -> list[int]: ...

  @overload
  def put(self, arg0: int, arg1: object) -> object: ...

  @overload
  def put(self, arg0: int, arg1: object) -> object: ...

  @overload
  def putAll(self, arg0: TIntObjectMap[V]) -> None: ...

  @overload
  def putAll(self, arg0: TIntObjectMap[V]) -> None: ...

  @overload
  def putAll(self, arg0: Map[Integer, V]) -> None: ...

  @overload
  def putAll(self, arg0: Map[Integer, V]) -> None: ...

  @overload
  def putIfAbsent(self, arg0: int, arg1: object) -> object: ...

  @overload
  def putIfAbsent(self, arg0: int, arg1: object) -> object: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def remove(self, arg0: int) -> object: ...

  @overload
  def remove(self, arg0: int) -> object: ...

  @overload
  def retainEntries(self, arg0: TIntObjectProcedure[V]) -> bool: ...

  @overload
  def retainEntries(self, arg0: TIntObjectProcedure[V]) -> bool: ...

  def size(self) -> int: ...

  def toString(self) -> str: ...

  @overload
  def transformValues(self, arg0: TObjectFunction[V, V]) -> None: ...

  @overload
  def transformValues(self, arg0: TObjectFunction[V, V]) -> None: ...

  @overload
  def valueCollection(self) -> Collection[V]: ...

  @overload
  def valueCollection(self) -> Collection[V]: ...

  @overload
  def values(self) -> list[object]: ...

  @overload
  def values(self) -> list[object]: ...

  @overload
  def values(self, arg0: list[object]) -> list[object]: ...

  @overload
  def values(self, arg0: list[object]) -> list[object]: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: TIntObjectMap[V]): ...
  @overload
  def __init__(self, arg0: int): ...
  @overload
  def __init__(self, arg0: int, arg1: float): ...
  @overload
  def __init__(self, arg0: int, arg1: float, arg2: int): ...

  class TIntObjectHashIterator[TIntObjectHashIterator_V](THashPrimitiveIterator):

    def advance(self) -> None: ...

    @overload
    def key(self) -> int: ...

    @overload
    def key(self) -> int: ...

    @overload
    def setValue(self, arg0: object) -> object: ...

    @overload
    def setValue(self, arg0: object) -> object: ...

    @overload
    def value(self) -> object: ...

    @overload
    def value(self) -> object: ...

    def __init__(self, arg0: TIntObjectHashMap, arg1: TIntObjectHashMap): ...

  class MapBackedView[E](AbstractSet):

    @overload
    def add(self, arg0: object) -> bool: ...

    @overload
    def add(self, arg0: object) -> bool: ...

    @overload
    def addAll(self, arg0: Collection[E]) -> bool: ...

    @overload
    def addAll(self, arg0: Collection[E]) -> bool: ...

    @overload
    def clear(self) -> None: ...

    @overload
    def clear(self) -> None: ...

    @overload
    def contains(self, arg0: object) -> bool: ...

    @overload
    def contains(self, arg0: object) -> bool: ...

    def containsAll(self, arg0: Collection[Any]) -> bool: ...

    def containsElement(self, arg0: object) -> bool: ...

    def equals(self, arg0: object) -> bool: ...

    def forEach(self, arg0: Consumer[T]) -> None: ...

    def hashCode(self) -> int: ...

    @overload
    def isEmpty(self) -> bool: ...

    @overload
    def isEmpty(self) -> bool: ...

    @overload
    def iterator(self) -> Iterator[E]: ...

    @overload
    def iterator(self) -> Iterator[E]: ...

    @overload
    def iterator(self) -> Iterator[T]: ...

    @overload
    def remove(self, arg0: object) -> bool: ...

    @overload
    def remove(self, arg0: object) -> bool: ...

    def removeAll(self, arg0: Collection[Any]) -> bool: ...

    def removeElement(self, arg0: object) -> bool: ...

    @overload
    def retainAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def retainAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def size(self) -> int: ...

    @overload
    def size(self) -> int: ...

    @overload
    def spliterator(self) -> Spliterator[E]: ...

    @overload
    def spliterator(self) -> Spliterator[T]: ...

    @overload
    def toArray(self) -> list[object]: ...

    @overload
    def toArray(self) -> list[object]: ...

    @overload
    def toArray(self, arg0: list[object]) -> list[object]: ...

    @overload
    def toArray(self, arg0: list[object]) -> list[object]: ...

    @staticmethod
    def copyOf(arg0: Collection[E]) -> Set[E]: ...

    @staticmethod
    @overload
    def of() -> Set[E]: ...

    @staticmethod
    @overload
    def of(arg0: list[object]) -> Set[E]: ...

    @staticmethod
    @overload
    def of(arg0: object) -> Set[E]: ...

    @staticmethod
    @overload
    def of(arg0: object, arg1: object) -> Set[E]: ...

    @staticmethod
    @overload
    def of(arg0: object, arg1: object, arg2: object) -> Set[E]: ...

    @staticmethod
    @overload
    def of(arg0: object, arg1: object, arg2: object, arg3: object) -> Set[E]: ...

    @staticmethod
    @overload
    def of(arg0: object, arg1: object, arg2: object, arg3: object, arg4: object) -> Set[E]: ...

    @staticmethod
    @overload
    def of(arg0: object, arg1: object, arg2: object, arg3: object, arg4: object, arg5: object) -> Set[E]: ...

    @staticmethod
    @overload
    def of(arg0: object, arg1: object, arg2: object, arg3: object, arg4: object, arg5: object, arg6: object) -> Set[E]: ...

    @staticmethod
    @overload
    def of(arg0: object, arg1: object, arg2: object, arg3: object, arg4: object, arg5: object, arg6: object, arg7: object) -> Set[E]: ...

    @staticmethod
    @overload
    def of(arg0: object, arg1: object, arg2: object, arg3: object, arg4: object, arg5: object, arg6: object, arg7: object, arg8: object) -> Set[E]: ...

    @staticmethod
    @overload
    def of(arg0: object, arg1: object, arg2: object, arg3: object, arg4: object, arg5: object, arg6: object, arg7: object, arg8: object, arg9: object) -> Set[E]: ...

  class ValueView(TIntObjectHashMap.MapBackedView):

    def containsElement(self, arg0: object) -> bool: ...

    def iterator(self) -> Iterator[V]: ...

    def removeElement(self, arg0: object) -> bool: ...

    class TIntObjectValueHashIterator(THashPrimitiveIterator):

      def forEachRemaining(self, arg0: Consumer[E]) -> None: ...

      def hasNext(self) -> bool: ...

      @overload
      def next(self) -> object: ...

      @overload
      def next(self) -> object: ...

      def remove(self) -> None: ...

      def __init__(self, arg0: TIntObjectHashMap.ValueView, arg1: TIntObjectHashMap): ...

  class KeyView:

    @overload
    def add(self, arg0: int) -> bool: ...

    @overload
    def add(self, arg0: int) -> bool: ...

    @overload
    def addAll(self, arg0: list[int]) -> bool: ...

    @overload
    def addAll(self, arg0: list[int]) -> bool: ...

    @overload
    def addAll(self, arg0: TIntCollection) -> bool: ...

    @overload
    def addAll(self, arg0: TIntCollection) -> bool: ...

    @overload
    def addAll(self, arg0: Collection[Integer]) -> bool: ...

    @overload
    def addAll(self, arg0: Collection[Integer]) -> bool: ...

    @overload
    def clear(self) -> None: ...

    @overload
    def clear(self) -> None: ...

    @overload
    def contains(self, arg0: int) -> bool: ...

    @overload
    def contains(self, arg0: int) -> bool: ...

    @overload
    def containsAll(self, arg0: list[int]) -> bool: ...

    @overload
    def containsAll(self, arg0: list[int]) -> bool: ...

    @overload
    def containsAll(self, arg0: TIntCollection) -> bool: ...

    @overload
    def containsAll(self, arg0: TIntCollection) -> bool: ...

    @overload
    def containsAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def containsAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def equals(self, arg0: object) -> bool: ...

    @overload
    def equals(self, arg0: object) -> bool: ...

    @overload
    def forEach(self, arg0: TIntProcedure) -> bool: ...

    @overload
    def forEach(self, arg0: TIntProcedure) -> bool: ...

    @overload
    def getNoEntryValue(self) -> int: ...

    @overload
    def getNoEntryValue(self) -> int: ...

    @overload
    def hashCode(self) -> int: ...

    @overload
    def hashCode(self) -> int: ...

    @overload
    def isEmpty(self) -> bool: ...

    @overload
    def isEmpty(self) -> bool: ...

    @overload
    def iterator(self) -> TIntIterator: ...

    @overload
    def iterator(self) -> TIntIterator: ...

    @overload
    def remove(self, arg0: int) -> bool: ...

    @overload
    def remove(self, arg0: int) -> bool: ...

    @overload
    def removeAll(self, arg0: list[int]) -> bool: ...

    @overload
    def removeAll(self, arg0: list[int]) -> bool: ...

    @overload
    def removeAll(self, arg0: TIntCollection) -> bool: ...

    @overload
    def removeAll(self, arg0: TIntCollection) -> bool: ...

    @overload
    def removeAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def removeAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def retainAll(self, arg0: list[int]) -> bool: ...

    @overload
    def retainAll(self, arg0: list[int]) -> bool: ...

    @overload
    def retainAll(self, arg0: TIntCollection) -> bool: ...

    @overload
    def retainAll(self, arg0: TIntCollection) -> bool: ...

    @overload
    def retainAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def retainAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def size(self) -> int: ...

    @overload
    def size(self) -> int: ...

    @overload
    def toArray(self) -> list[int]: ...

    @overload
    def toArray(self) -> list[int]: ...

    @overload
    def toArray(self, arg0: list[int]) -> list[int]: ...

    @overload
    def toArray(self, arg0: list[int]) -> list[int]: ...

    def toString(self) -> str: ...

    class TIntHashIterator(THashPrimitiveIterator):

      @overload
      def next(self) -> int: ...

      @overload
      def next(self) -> int: ...

      def __init__(self, arg0: TIntObjectHashMap.KeyView, arg1: TIntHash): ...


class TLongObjectHashMap[V](TLongHash):

  @overload
  def clear(self) -> None: ...

  @overload
  def clear(self) -> None: ...

  @overload
  def containsKey(self, arg0: int) -> bool: ...

  @overload
  def containsKey(self, arg0: int) -> bool: ...

  @overload
  def containsValue(self, arg0: object) -> bool: ...

  @overload
  def containsValue(self, arg0: object) -> bool: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def forEachEntry(self, arg0: TLongObjectProcedure[V]) -> bool: ...

  @overload
  def forEachEntry(self, arg0: TLongObjectProcedure[V]) -> bool: ...

  @overload
  def forEachKey(self, arg0: TLongProcedure) -> bool: ...

  @overload
  def forEachKey(self, arg0: TLongProcedure) -> bool: ...

  @overload
  def forEachValue(self, arg0: TObjectProcedure[V]) -> bool: ...

  @overload
  def forEachValue(self, arg0: TObjectProcedure[V]) -> bool: ...

  @overload
  def get(self, arg0: int) -> object: ...

  @overload
  def get(self, arg0: int) -> object: ...

  @overload
  def getNoEntryKey(self) -> int: ...

  @overload
  def getNoEntryKey(self) -> int: ...

  @overload
  def hashCode(self) -> int: ...

  @overload
  def hashCode(self) -> int: ...

  def isEmpty(self) -> bool: ...

  @overload
  def iterator(self) -> TLongObjectIterator[V]: ...

  @overload
  def iterator(self) -> TLongObjectIterator[V]: ...

  @overload
  def keySet(self) -> TLongSet: ...

  @overload
  def keySet(self) -> TLongSet: ...

  @overload
  def keys(self) -> list[int]: ...

  @overload
  def keys(self) -> list[int]: ...

  @overload
  def keys(self, arg0: list[int]) -> list[int]: ...

  @overload
  def keys(self, arg0: list[int]) -> list[int]: ...

  @overload
  def put(self, arg0: int, arg1: object) -> object: ...

  @overload
  def put(self, arg0: int, arg1: object) -> object: ...

  @overload
  def putAll(self, arg0: TLongObjectMap[V]) -> None: ...

  @overload
  def putAll(self, arg0: TLongObjectMap[V]) -> None: ...

  @overload
  def putAll(self, arg0: Map[Long, V]) -> None: ...

  @overload
  def putAll(self, arg0: Map[Long, V]) -> None: ...

  @overload
  def putIfAbsent(self, arg0: int, arg1: object) -> object: ...

  @overload
  def putIfAbsent(self, arg0: int, arg1: object) -> object: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def remove(self, arg0: int) -> object: ...

  @overload
  def remove(self, arg0: int) -> object: ...

  @overload
  def retainEntries(self, arg0: TLongObjectProcedure[V]) -> bool: ...

  @overload
  def retainEntries(self, arg0: TLongObjectProcedure[V]) -> bool: ...

  def size(self) -> int: ...

  def toString(self) -> str: ...

  @overload
  def transformValues(self, arg0: TObjectFunction[V, V]) -> None: ...

  @overload
  def transformValues(self, arg0: TObjectFunction[V, V]) -> None: ...

  @overload
  def valueCollection(self) -> Collection[V]: ...

  @overload
  def valueCollection(self) -> Collection[V]: ...

  @overload
  def values(self) -> list[object]: ...

  @overload
  def values(self) -> list[object]: ...

  @overload
  def values(self, arg0: list[object]) -> list[object]: ...

  @overload
  def values(self, arg0: list[object]) -> list[object]: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: TLongObjectMap[V]): ...
  @overload
  def __init__(self, arg0: int): ...
  @overload
  def __init__(self, arg0: int, arg1: float): ...
  @overload
  def __init__(self, arg0: int, arg1: float, arg2: int): ...

  class TLongObjectHashIterator[TLongObjectHashIterator_V](THashPrimitiveIterator):

    def advance(self) -> None: ...

    @overload
    def key(self) -> int: ...

    @overload
    def key(self) -> int: ...

    @overload
    def setValue(self, arg0: object) -> object: ...

    @overload
    def setValue(self, arg0: object) -> object: ...

    @overload
    def value(self) -> object: ...

    @overload
    def value(self) -> object: ...

    def __init__(self, arg0: TLongObjectHashMap, arg1: TLongObjectHashMap): ...

  class MapBackedView[E](AbstractSet):

    @overload
    def add(self, arg0: object) -> bool: ...

    @overload
    def add(self, arg0: object) -> bool: ...

    @overload
    def addAll(self, arg0: Collection[E]) -> bool: ...

    @overload
    def addAll(self, arg0: Collection[E]) -> bool: ...

    @overload
    def clear(self) -> None: ...

    @overload
    def clear(self) -> None: ...

    @overload
    def contains(self, arg0: object) -> bool: ...

    @overload
    def contains(self, arg0: object) -> bool: ...

    def containsAll(self, arg0: Collection[Any]) -> bool: ...

    def containsElement(self, arg0: object) -> bool: ...

    def equals(self, arg0: object) -> bool: ...

    def forEach(self, arg0: Consumer[T]) -> None: ...

    def hashCode(self) -> int: ...

    @overload
    def isEmpty(self) -> bool: ...

    @overload
    def isEmpty(self) -> bool: ...

    @overload
    def iterator(self) -> Iterator[E]: ...

    @overload
    def iterator(self) -> Iterator[E]: ...

    @overload
    def iterator(self) -> Iterator[T]: ...

    @overload
    def remove(self, arg0: object) -> bool: ...

    @overload
    def remove(self, arg0: object) -> bool: ...

    def removeAll(self, arg0: Collection[Any]) -> bool: ...

    def removeElement(self, arg0: object) -> bool: ...

    @overload
    def retainAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def retainAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def size(self) -> int: ...

    @overload
    def size(self) -> int: ...

    @overload
    def spliterator(self) -> Spliterator[E]: ...

    @overload
    def spliterator(self) -> Spliterator[T]: ...

    @overload
    def toArray(self) -> list[object]: ...

    @overload
    def toArray(self) -> list[object]: ...

    @overload
    def toArray(self, arg0: list[object]) -> list[object]: ...

    @overload
    def toArray(self, arg0: list[object]) -> list[object]: ...

    @staticmethod
    def copyOf(arg0: Collection[E]) -> Set[E]: ...

    @staticmethod
    @overload
    def of() -> Set[E]: ...

    @staticmethod
    @overload
    def of(arg0: list[object]) -> Set[E]: ...

    @staticmethod
    @overload
    def of(arg0: object) -> Set[E]: ...

    @staticmethod
    @overload
    def of(arg0: object, arg1: object) -> Set[E]: ...

    @staticmethod
    @overload
    def of(arg0: object, arg1: object, arg2: object) -> Set[E]: ...

    @staticmethod
    @overload
    def of(arg0: object, arg1: object, arg2: object, arg3: object) -> Set[E]: ...

    @staticmethod
    @overload
    def of(arg0: object, arg1: object, arg2: object, arg3: object, arg4: object) -> Set[E]: ...

    @staticmethod
    @overload
    def of(arg0: object, arg1: object, arg2: object, arg3: object, arg4: object, arg5: object) -> Set[E]: ...

    @staticmethod
    @overload
    def of(arg0: object, arg1: object, arg2: object, arg3: object, arg4: object, arg5: object, arg6: object) -> Set[E]: ...

    @staticmethod
    @overload
    def of(arg0: object, arg1: object, arg2: object, arg3: object, arg4: object, arg5: object, arg6: object, arg7: object) -> Set[E]: ...

    @staticmethod
    @overload
    def of(arg0: object, arg1: object, arg2: object, arg3: object, arg4: object, arg5: object, arg6: object, arg7: object, arg8: object) -> Set[E]: ...

    @staticmethod
    @overload
    def of(arg0: object, arg1: object, arg2: object, arg3: object, arg4: object, arg5: object, arg6: object, arg7: object, arg8: object, arg9: object) -> Set[E]: ...

  class ValueView(TLongObjectHashMap.MapBackedView):

    def containsElement(self, arg0: object) -> bool: ...

    def iterator(self) -> Iterator[V]: ...

    def removeElement(self, arg0: object) -> bool: ...

    class TLongObjectValueHashIterator(THashPrimitiveIterator):

      def forEachRemaining(self, arg0: Consumer[E]) -> None: ...

      def hasNext(self) -> bool: ...

      @overload
      def next(self) -> object: ...

      @overload
      def next(self) -> object: ...

      def remove(self) -> None: ...

      def __init__(self, arg0: TLongObjectHashMap.ValueView, arg1: TLongObjectHashMap): ...

  class KeyView:

    @overload
    def add(self, arg0: int) -> bool: ...

    @overload
    def add(self, arg0: int) -> bool: ...

    @overload
    def addAll(self, arg0: list[int]) -> bool: ...

    @overload
    def addAll(self, arg0: list[int]) -> bool: ...

    @overload
    def addAll(self, arg0: TLongCollection) -> bool: ...

    @overload
    def addAll(self, arg0: TLongCollection) -> bool: ...

    @overload
    def addAll(self, arg0: Collection[Long]) -> bool: ...

    @overload
    def addAll(self, arg0: Collection[Long]) -> bool: ...

    @overload
    def clear(self) -> None: ...

    @overload
    def clear(self) -> None: ...

    @overload
    def contains(self, arg0: int) -> bool: ...

    @overload
    def contains(self, arg0: int) -> bool: ...

    @overload
    def containsAll(self, arg0: list[int]) -> bool: ...

    @overload
    def containsAll(self, arg0: list[int]) -> bool: ...

    @overload
    def containsAll(self, arg0: TLongCollection) -> bool: ...

    @overload
    def containsAll(self, arg0: TLongCollection) -> bool: ...

    @overload
    def containsAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def containsAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def equals(self, arg0: object) -> bool: ...

    @overload
    def equals(self, arg0: object) -> bool: ...

    @overload
    def forEach(self, arg0: TLongProcedure) -> bool: ...

    @overload
    def forEach(self, arg0: TLongProcedure) -> bool: ...

    @overload
    def getNoEntryValue(self) -> int: ...

    @overload
    def getNoEntryValue(self) -> int: ...

    @overload
    def hashCode(self) -> int: ...

    @overload
    def hashCode(self) -> int: ...

    @overload
    def isEmpty(self) -> bool: ...

    @overload
    def isEmpty(self) -> bool: ...

    @overload
    def iterator(self) -> TLongIterator: ...

    @overload
    def iterator(self) -> TLongIterator: ...

    @overload
    def remove(self, arg0: int) -> bool: ...

    @overload
    def remove(self, arg0: int) -> bool: ...

    @overload
    def removeAll(self, arg0: list[int]) -> bool: ...

    @overload
    def removeAll(self, arg0: list[int]) -> bool: ...

    @overload
    def removeAll(self, arg0: TLongCollection) -> bool: ...

    @overload
    def removeAll(self, arg0: TLongCollection) -> bool: ...

    @overload
    def removeAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def removeAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def retainAll(self, arg0: list[int]) -> bool: ...

    @overload
    def retainAll(self, arg0: list[int]) -> bool: ...

    @overload
    def retainAll(self, arg0: TLongCollection) -> bool: ...

    @overload
    def retainAll(self, arg0: TLongCollection) -> bool: ...

    @overload
    def retainAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def retainAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def size(self) -> int: ...

    @overload
    def size(self) -> int: ...

    @overload
    def toArray(self) -> list[int]: ...

    @overload
    def toArray(self) -> list[int]: ...

    @overload
    def toArray(self, arg0: list[int]) -> list[int]: ...

    @overload
    def toArray(self, arg0: list[int]) -> list[int]: ...

    def toString(self) -> str: ...

    class TLongHashIterator(THashPrimitiveIterator):

      @overload
      def next(self) -> int: ...

      @overload
      def next(self) -> int: ...

      def __init__(self, arg0: TLongObjectHashMap.KeyView, arg1: TLongHash): ...


class TObjectIntHashMap[K](TObjectHash):

  @overload
  def adjustOrPutValue(self, arg0: object, arg1: int, arg2: int) -> int: ...

  @overload
  def adjustOrPutValue(self, arg0: object, arg1: int, arg2: int) -> int: ...

  @overload
  def adjustValue(self, arg0: object, arg1: int) -> bool: ...

  @overload
  def adjustValue(self, arg0: object, arg1: int) -> bool: ...

  @overload
  def clear(self) -> None: ...

  @overload
  def clear(self) -> None: ...

  @overload
  def containsKey(self, arg0: object) -> bool: ...

  @overload
  def containsKey(self, arg0: object) -> bool: ...

  @overload
  def containsValue(self, arg0: int) -> bool: ...

  @overload
  def containsValue(self, arg0: int) -> bool: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def forEachEntry(self, arg0: TObjectIntProcedure[K]) -> bool: ...

  @overload
  def forEachEntry(self, arg0: TObjectIntProcedure[K]) -> bool: ...

  @overload
  def forEachKey(self, arg0: TObjectProcedure[K]) -> bool: ...

  @overload
  def forEachKey(self, arg0: TObjectProcedure[K]) -> bool: ...

  @overload
  def forEachValue(self, arg0: TIntProcedure) -> bool: ...

  @overload
  def forEachValue(self, arg0: TIntProcedure) -> bool: ...

  @overload
  def get(self, arg0: object) -> int: ...

  @overload
  def get(self, arg0: object) -> int: ...

  @overload
  def getNoEntryValue(self) -> int: ...

  @overload
  def getNoEntryValue(self) -> int: ...

  @overload
  def hashCode(self) -> int: ...

  @overload
  def hashCode(self) -> int: ...

  @overload
  def increment(self, arg0: object) -> bool: ...

  @overload
  def increment(self, arg0: object) -> bool: ...

  def isEmpty(self) -> bool: ...

  @overload
  def iterator(self) -> TObjectIntIterator[K]: ...

  @overload
  def iterator(self) -> TObjectIntIterator[K]: ...

  @overload
  def keySet(self) -> Set[K]: ...

  @overload
  def keySet(self) -> Set[K]: ...

  @overload
  def keys(self) -> list[object]: ...

  @overload
  def keys(self) -> list[object]: ...

  @overload
  def keys(self, arg0: list[object]) -> list[object]: ...

  @overload
  def keys(self, arg0: list[object]) -> list[object]: ...

  @overload
  def put(self, arg0: object, arg1: int) -> int: ...

  @overload
  def put(self, arg0: object, arg1: int) -> int: ...

  @overload
  def putAll(self, arg0: TObjectIntMap[K]) -> None: ...

  @overload
  def putAll(self, arg0: TObjectIntMap[K]) -> None: ...

  @overload
  def putAll(self, arg0: Map[K, Integer]) -> None: ...

  @overload
  def putAll(self, arg0: Map[K, Integer]) -> None: ...

  @overload
  def putIfAbsent(self, arg0: object, arg1: int) -> int: ...

  @overload
  def putIfAbsent(self, arg0: object, arg1: int) -> int: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def remove(self, arg0: object) -> int: ...

  @overload
  def remove(self, arg0: object) -> int: ...

  @overload
  def retainEntries(self, arg0: TObjectIntProcedure[K]) -> bool: ...

  @overload
  def retainEntries(self, arg0: TObjectIntProcedure[K]) -> bool: ...

  def setUp(self, arg0: int) -> int: ...

  def size(self) -> int: ...

  def toString(self) -> str: ...

  @overload
  def transformValues(self, arg0: TIntFunction) -> None: ...

  @overload
  def transformValues(self, arg0: TIntFunction) -> None: ...

  @overload
  def valueCollection(self) -> TIntCollection: ...

  @overload
  def valueCollection(self) -> TIntCollection: ...

  @overload
  def values(self) -> list[int]: ...

  @overload
  def values(self) -> list[int]: ...

  @overload
  def values(self, arg0: list[int]) -> list[int]: ...

  @overload
  def values(self, arg0: list[int]) -> list[int]: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: TObjectIntMap[K]): ...
  @overload
  def __init__(self, arg0: int): ...
  @overload
  def __init__(self, arg0: int, arg1: float): ...
  @overload
  def __init__(self, arg0: int, arg1: float, arg2: int): ...

  class TObjectIntHashIterator[TObjectIntHashIterator_K](TObjectHashIterator):

    def advance(self) -> None: ...

    @overload
    def key(self) -> object: ...

    @overload
    def key(self) -> object: ...

    @overload
    def setValue(self, arg0: int) -> int: ...

    @overload
    def setValue(self, arg0: int) -> int: ...

    @overload
    def value(self) -> int: ...

    @overload
    def value(self) -> int: ...

    def __init__(self, arg0: TObjectIntHashMap, arg1: TObjectIntHashMap): ...

  class TIntValueCollection:

    serialVersionUID: int

    @overload
    def add(self, arg0: int) -> bool: ...

    @overload
    def add(self, arg0: int) -> bool: ...

    @overload
    def addAll(self, arg0: list[int]) -> bool: ...

    @overload
    def addAll(self, arg0: list[int]) -> bool: ...

    @overload
    def addAll(self, arg0: TIntCollection) -> bool: ...

    @overload
    def addAll(self, arg0: TIntCollection) -> bool: ...

    @overload
    def addAll(self, arg0: Collection[Integer]) -> bool: ...

    @overload
    def addAll(self, arg0: Collection[Integer]) -> bool: ...

    @overload
    def clear(self) -> None: ...

    @overload
    def clear(self) -> None: ...

    @overload
    def contains(self, arg0: int) -> bool: ...

    @overload
    def contains(self, arg0: int) -> bool: ...

    @overload
    def containsAll(self, arg0: list[int]) -> bool: ...

    @overload
    def containsAll(self, arg0: list[int]) -> bool: ...

    @overload
    def containsAll(self, arg0: TIntCollection) -> bool: ...

    @overload
    def containsAll(self, arg0: TIntCollection) -> bool: ...

    @overload
    def containsAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def containsAll(self, arg0: Collection[Any]) -> bool: ...

    def equals(self, arg0: object) -> bool: ...

    @overload
    def forEach(self, arg0: TIntProcedure) -> bool: ...

    @overload
    def forEach(self, arg0: TIntProcedure) -> bool: ...

    @overload
    def getNoEntryValue(self) -> int: ...

    @overload
    def getNoEntryValue(self) -> int: ...

    def hashCode(self) -> int: ...

    @overload
    def isEmpty(self) -> bool: ...

    @overload
    def isEmpty(self) -> bool: ...

    @overload
    def iterator(self) -> TIntIterator: ...

    @overload
    def iterator(self) -> TIntIterator: ...

    @overload
    def remove(self, arg0: int) -> bool: ...

    @overload
    def remove(self, arg0: int) -> bool: ...

    @overload
    def removeAll(self, arg0: list[int]) -> bool: ...

    @overload
    def removeAll(self, arg0: list[int]) -> bool: ...

    @overload
    def removeAll(self, arg0: TIntCollection) -> bool: ...

    @overload
    def removeAll(self, arg0: TIntCollection) -> bool: ...

    @overload
    def removeAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def removeAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def retainAll(self, arg0: list[int]) -> bool: ...

    @overload
    def retainAll(self, arg0: list[int]) -> bool: ...

    @overload
    def retainAll(self, arg0: TIntCollection) -> bool: ...

    @overload
    def retainAll(self, arg0: TIntCollection) -> bool: ...

    @overload
    def retainAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def retainAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def size(self) -> int: ...

    @overload
    def size(self) -> int: ...

    @overload
    def toArray(self) -> list[int]: ...

    @overload
    def toArray(self) -> list[int]: ...

    @overload
    def toArray(self, arg0: list[int]) -> list[int]: ...

    @overload
    def toArray(self, arg0: list[int]) -> list[int]: ...

    def toString(self) -> str: ...

    class TObjectIntValueHashIterator:

      def hasNext(self) -> bool: ...

      @overload
      def next(self) -> int: ...

      @overload
      def next(self) -> int: ...

      def remove(self) -> None: ...

  class MapBackedView[E](AbstractSet):

    @overload
    def add(self, arg0: object) -> bool: ...

    @overload
    def add(self, arg0: object) -> bool: ...

    @overload
    def addAll(self, arg0: Collection[E]) -> bool: ...

    @overload
    def addAll(self, arg0: Collection[E]) -> bool: ...

    @overload
    def clear(self) -> None: ...

    @overload
    def clear(self) -> None: ...

    @overload
    def contains(self, arg0: object) -> bool: ...

    @overload
    def contains(self, arg0: object) -> bool: ...

    def containsAll(self, arg0: Collection[Any]) -> bool: ...

    def containsElement(self, arg0: object) -> bool: ...

    def equals(self, arg0: object) -> bool: ...

    def forEach(self, arg0: Consumer[T]) -> None: ...

    def hashCode(self) -> int: ...

    @overload
    def isEmpty(self) -> bool: ...

    @overload
    def isEmpty(self) -> bool: ...

    @overload
    def iterator(self) -> Iterator[E]: ...

    @overload
    def iterator(self) -> Iterator[T]: ...

    @overload
    def remove(self, arg0: object) -> bool: ...

    @overload
    def remove(self, arg0: object) -> bool: ...

    def removeAll(self, arg0: Collection[Any]) -> bool: ...

    def removeElement(self, arg0: object) -> bool: ...

    @overload
    def retainAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def retainAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def size(self) -> int: ...

    @overload
    def size(self) -> int: ...

    @overload
    def spliterator(self) -> Spliterator[E]: ...

    @overload
    def spliterator(self) -> Spliterator[T]: ...

    @overload
    def toArray(self) -> list[object]: ...

    @overload
    def toArray(self) -> list[object]: ...

    @overload
    def toArray(self, arg0: list[object]) -> list[object]: ...

    @overload
    def toArray(self, arg0: list[object]) -> list[object]: ...

    @staticmethod
    def copyOf(arg0: Collection[E]) -> Set[E]: ...

    @staticmethod
    @overload
    def of() -> Set[E]: ...

    @staticmethod
    @overload
    def of(arg0: list[object]) -> Set[E]: ...

    @staticmethod
    @overload
    def of(arg0: object) -> Set[E]: ...

    @staticmethod
    @overload
    def of(arg0: object, arg1: object) -> Set[E]: ...

    @staticmethod
    @overload
    def of(arg0: object, arg1: object, arg2: object) -> Set[E]: ...

    @staticmethod
    @overload
    def of(arg0: object, arg1: object, arg2: object, arg3: object) -> Set[E]: ...

    @staticmethod
    @overload
    def of(arg0: object, arg1: object, arg2: object, arg3: object, arg4: object) -> Set[E]: ...

    @staticmethod
    @overload
    def of(arg0: object, arg1: object, arg2: object, arg3: object, arg4: object, arg5: object) -> Set[E]: ...

    @staticmethod
    @overload
    def of(arg0: object, arg1: object, arg2: object, arg3: object, arg4: object, arg5: object, arg6: object) -> Set[E]: ...

    @staticmethod
    @overload
    def of(arg0: object, arg1: object, arg2: object, arg3: object, arg4: object, arg5: object, arg6: object, arg7: object) -> Set[E]: ...

    @staticmethod
    @overload
    def of(arg0: object, arg1: object, arg2: object, arg3: object, arg4: object, arg5: object, arg6: object, arg7: object, arg8: object) -> Set[E]: ...

    @staticmethod
    @overload
    def of(arg0: object, arg1: object, arg2: object, arg3: object, arg4: object, arg5: object, arg6: object, arg7: object, arg8: object, arg9: object) -> Set[E]: ...

  class KeyView(TObjectIntHashMap.MapBackedView):

    def containsElement(self, arg0: object) -> bool: ...

    def iterator(self) -> Iterator[K]: ...

    def removeElement(self, arg0: object) -> bool: ...


class TShortObjectHashMap[V](TShortHash):

  @overload
  def clear(self) -> None: ...

  @overload
  def clear(self) -> None: ...

  @overload
  def containsKey(self, arg0: int) -> bool: ...

  @overload
  def containsKey(self, arg0: int) -> bool: ...

  @overload
  def containsValue(self, arg0: object) -> bool: ...

  @overload
  def containsValue(self, arg0: object) -> bool: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def forEachEntry(self, arg0: TShortObjectProcedure[V]) -> bool: ...

  @overload
  def forEachEntry(self, arg0: TShortObjectProcedure[V]) -> bool: ...

  @overload
  def forEachKey(self, arg0: TShortProcedure) -> bool: ...

  @overload
  def forEachKey(self, arg0: TShortProcedure) -> bool: ...

  @overload
  def forEachValue(self, arg0: TObjectProcedure[V]) -> bool: ...

  @overload
  def forEachValue(self, arg0: TObjectProcedure[V]) -> bool: ...

  @overload
  def get(self, arg0: int) -> object: ...

  @overload
  def get(self, arg0: int) -> object: ...

  @overload
  def getNoEntryKey(self) -> int: ...

  @overload
  def getNoEntryKey(self) -> int: ...

  @overload
  def hashCode(self) -> int: ...

  @overload
  def hashCode(self) -> int: ...

  def isEmpty(self) -> bool: ...

  @overload
  def iterator(self) -> TShortObjectIterator[V]: ...

  @overload
  def iterator(self) -> TShortObjectIterator[V]: ...

  @overload
  def keySet(self) -> TShortSet: ...

  @overload
  def keySet(self) -> TShortSet: ...

  @overload
  def keys(self) -> list[int]: ...

  @overload
  def keys(self) -> list[int]: ...

  @overload
  def keys(self, arg0: list[int]) -> list[int]: ...

  @overload
  def keys(self, arg0: list[int]) -> list[int]: ...

  @overload
  def put(self, arg0: int, arg1: object) -> object: ...

  @overload
  def put(self, arg0: int, arg1: object) -> object: ...

  @overload
  def putAll(self, arg0: TShortObjectMap[V]) -> None: ...

  @overload
  def putAll(self, arg0: TShortObjectMap[V]) -> None: ...

  @overload
  def putAll(self, arg0: Map[Short, V]) -> None: ...

  @overload
  def putAll(self, arg0: Map[Short, V]) -> None: ...

  @overload
  def putIfAbsent(self, arg0: int, arg1: object) -> object: ...

  @overload
  def putIfAbsent(self, arg0: int, arg1: object) -> object: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def remove(self, arg0: int) -> object: ...

  @overload
  def remove(self, arg0: int) -> object: ...

  @overload
  def retainEntries(self, arg0: TShortObjectProcedure[V]) -> bool: ...

  @overload
  def retainEntries(self, arg0: TShortObjectProcedure[V]) -> bool: ...

  def size(self) -> int: ...

  def toString(self) -> str: ...

  @overload
  def transformValues(self, arg0: TObjectFunction[V, V]) -> None: ...

  @overload
  def transformValues(self, arg0: TObjectFunction[V, V]) -> None: ...

  @overload
  def valueCollection(self) -> Collection[V]: ...

  @overload
  def valueCollection(self) -> Collection[V]: ...

  @overload
  def values(self) -> list[object]: ...

  @overload
  def values(self) -> list[object]: ...

  @overload
  def values(self, arg0: list[object]) -> list[object]: ...

  @overload
  def values(self, arg0: list[object]) -> list[object]: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: TShortObjectMap[V]): ...
  @overload
  def __init__(self, arg0: int): ...
  @overload
  def __init__(self, arg0: int, arg1: float): ...
  @overload
  def __init__(self, arg0: int, arg1: float, arg2: int): ...

  class TShortObjectHashIterator[TShortObjectHashIterator_V](THashPrimitiveIterator):

    def advance(self) -> None: ...

    @overload
    def key(self) -> int: ...

    @overload
    def key(self) -> int: ...

    @overload
    def setValue(self, arg0: object) -> object: ...

    @overload
    def setValue(self, arg0: object) -> object: ...

    @overload
    def value(self) -> object: ...

    @overload
    def value(self) -> object: ...

    def __init__(self, arg0: TShortObjectHashMap, arg1: TShortObjectHashMap): ...

  class MapBackedView[E](AbstractSet):

    @overload
    def add(self, arg0: object) -> bool: ...

    @overload
    def add(self, arg0: object) -> bool: ...

    @overload
    def addAll(self, arg0: Collection[E]) -> bool: ...

    @overload
    def addAll(self, arg0: Collection[E]) -> bool: ...

    @overload
    def clear(self) -> None: ...

    @overload
    def clear(self) -> None: ...

    @overload
    def contains(self, arg0: object) -> bool: ...

    @overload
    def contains(self, arg0: object) -> bool: ...

    def containsAll(self, arg0: Collection[Any]) -> bool: ...

    def containsElement(self, arg0: object) -> bool: ...

    def equals(self, arg0: object) -> bool: ...

    def forEach(self, arg0: Consumer[T]) -> None: ...

    def hashCode(self) -> int: ...

    @overload
    def isEmpty(self) -> bool: ...

    @overload
    def isEmpty(self) -> bool: ...

    @overload
    def iterator(self) -> Iterator[E]: ...

    @overload
    def iterator(self) -> Iterator[E]: ...

    @overload
    def iterator(self) -> Iterator[T]: ...

    @overload
    def remove(self, arg0: object) -> bool: ...

    @overload
    def remove(self, arg0: object) -> bool: ...

    def removeAll(self, arg0: Collection[Any]) -> bool: ...

    def removeElement(self, arg0: object) -> bool: ...

    @overload
    def retainAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def retainAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def size(self) -> int: ...

    @overload
    def size(self) -> int: ...

    @overload
    def spliterator(self) -> Spliterator[E]: ...

    @overload
    def spliterator(self) -> Spliterator[T]: ...

    @overload
    def toArray(self) -> list[object]: ...

    @overload
    def toArray(self) -> list[object]: ...

    @overload
    def toArray(self, arg0: list[object]) -> list[object]: ...

    @overload
    def toArray(self, arg0: list[object]) -> list[object]: ...

    @staticmethod
    def copyOf(arg0: Collection[E]) -> Set[E]: ...

    @staticmethod
    @overload
    def of() -> Set[E]: ...

    @staticmethod
    @overload
    def of(arg0: list[object]) -> Set[E]: ...

    @staticmethod
    @overload
    def of(arg0: object) -> Set[E]: ...

    @staticmethod
    @overload
    def of(arg0: object, arg1: object) -> Set[E]: ...

    @staticmethod
    @overload
    def of(arg0: object, arg1: object, arg2: object) -> Set[E]: ...

    @staticmethod
    @overload
    def of(arg0: object, arg1: object, arg2: object, arg3: object) -> Set[E]: ...

    @staticmethod
    @overload
    def of(arg0: object, arg1: object, arg2: object, arg3: object, arg4: object) -> Set[E]: ...

    @staticmethod
    @overload
    def of(arg0: object, arg1: object, arg2: object, arg3: object, arg4: object, arg5: object) -> Set[E]: ...

    @staticmethod
    @overload
    def of(arg0: object, arg1: object, arg2: object, arg3: object, arg4: object, arg5: object, arg6: object) -> Set[E]: ...

    @staticmethod
    @overload
    def of(arg0: object, arg1: object, arg2: object, arg3: object, arg4: object, arg5: object, arg6: object, arg7: object) -> Set[E]: ...

    @staticmethod
    @overload
    def of(arg0: object, arg1: object, arg2: object, arg3: object, arg4: object, arg5: object, arg6: object, arg7: object, arg8: object) -> Set[E]: ...

    @staticmethod
    @overload
    def of(arg0: object, arg1: object, arg2: object, arg3: object, arg4: object, arg5: object, arg6: object, arg7: object, arg8: object, arg9: object) -> Set[E]: ...

  class ValueView(TShortObjectHashMap.MapBackedView):

    def containsElement(self, arg0: object) -> bool: ...

    def iterator(self) -> Iterator[V]: ...

    def removeElement(self, arg0: object) -> bool: ...

    class TShortObjectValueHashIterator(THashPrimitiveIterator):

      def forEachRemaining(self, arg0: Consumer[E]) -> None: ...

      def hasNext(self) -> bool: ...

      @overload
      def next(self) -> object: ...

      @overload
      def next(self) -> object: ...

      def remove(self) -> None: ...

      def __init__(self, arg0: TShortObjectHashMap.ValueView, arg1: TShortObjectHashMap): ...

  class KeyView:

    @overload
    def add(self, arg0: int) -> bool: ...

    @overload
    def add(self, arg0: int) -> bool: ...

    @overload
    def addAll(self, arg0: list[int]) -> bool: ...

    @overload
    def addAll(self, arg0: list[int]) -> bool: ...

    @overload
    def addAll(self, arg0: TShortCollection) -> bool: ...

    @overload
    def addAll(self, arg0: TShortCollection) -> bool: ...

    @overload
    def addAll(self, arg0: Collection[Short]) -> bool: ...

    @overload
    def addAll(self, arg0: Collection[Short]) -> bool: ...

    @overload
    def clear(self) -> None: ...

    @overload
    def clear(self) -> None: ...

    @overload
    def contains(self, arg0: int) -> bool: ...

    @overload
    def contains(self, arg0: int) -> bool: ...

    @overload
    def containsAll(self, arg0: list[int]) -> bool: ...

    @overload
    def containsAll(self, arg0: list[int]) -> bool: ...

    @overload
    def containsAll(self, arg0: TShortCollection) -> bool: ...

    @overload
    def containsAll(self, arg0: TShortCollection) -> bool: ...

    @overload
    def containsAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def containsAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def equals(self, arg0: object) -> bool: ...

    @overload
    def equals(self, arg0: object) -> bool: ...

    @overload
    def forEach(self, arg0: TShortProcedure) -> bool: ...

    @overload
    def forEach(self, arg0: TShortProcedure) -> bool: ...

    @overload
    def getNoEntryValue(self) -> int: ...

    @overload
    def getNoEntryValue(self) -> int: ...

    @overload
    def hashCode(self) -> int: ...

    @overload
    def hashCode(self) -> int: ...

    @overload
    def isEmpty(self) -> bool: ...

    @overload
    def isEmpty(self) -> bool: ...

    @overload
    def iterator(self) -> TShortIterator: ...

    @overload
    def iterator(self) -> TShortIterator: ...

    @overload
    def remove(self, arg0: int) -> bool: ...

    @overload
    def remove(self, arg0: int) -> bool: ...

    @overload
    def removeAll(self, arg0: list[int]) -> bool: ...

    @overload
    def removeAll(self, arg0: list[int]) -> bool: ...

    @overload
    def removeAll(self, arg0: TShortCollection) -> bool: ...

    @overload
    def removeAll(self, arg0: TShortCollection) -> bool: ...

    @overload
    def removeAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def removeAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def retainAll(self, arg0: list[int]) -> bool: ...

    @overload
    def retainAll(self, arg0: list[int]) -> bool: ...

    @overload
    def retainAll(self, arg0: TShortCollection) -> bool: ...

    @overload
    def retainAll(self, arg0: TShortCollection) -> bool: ...

    @overload
    def retainAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def retainAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def size(self) -> int: ...

    @overload
    def size(self) -> int: ...

    @overload
    def toArray(self) -> list[int]: ...

    @overload
    def toArray(self) -> list[int]: ...

    @overload
    def toArray(self, arg0: list[int]) -> list[int]: ...

    @overload
    def toArray(self, arg0: list[int]) -> list[int]: ...

    def toString(self) -> str: ...

    class TShortHashIterator(THashPrimitiveIterator):

      @overload
      def next(self) -> int: ...

      @overload
      def next(self) -> int: ...

      def __init__(self, arg0: TShortObjectHashMap.KeyView, arg1: TShortHash): ...


class TShortShortHashMap(TShortShortHash):

  @overload
  def adjustOrPutValue(self, arg0: int, arg1: int, arg2: int) -> int: ...

  @overload
  def adjustOrPutValue(self, arg0: int, arg1: int, arg2: int) -> int: ...

  @overload
  def adjustValue(self, arg0: int, arg1: int) -> bool: ...

  @overload
  def adjustValue(self, arg0: int, arg1: int) -> bool: ...

  @overload
  def clear(self) -> None: ...

  @overload
  def clear(self) -> None: ...

  @overload
  def containsKey(self, arg0: int) -> bool: ...

  @overload
  def containsKey(self, arg0: int) -> bool: ...

  @overload
  def containsValue(self, arg0: int) -> bool: ...

  @overload
  def containsValue(self, arg0: int) -> bool: ...

  def equals(self, arg0: object) -> bool: ...

  @overload
  def forEachEntry(self, arg0: TShortShortProcedure) -> bool: ...

  @overload
  def forEachEntry(self, arg0: TShortShortProcedure) -> bool: ...

  @overload
  def forEachKey(self, arg0: TShortProcedure) -> bool: ...

  @overload
  def forEachKey(self, arg0: TShortProcedure) -> bool: ...

  @overload
  def forEachValue(self, arg0: TShortProcedure) -> bool: ...

  @overload
  def forEachValue(self, arg0: TShortProcedure) -> bool: ...

  @overload
  def get(self, arg0: int) -> int: ...

  @overload
  def get(self, arg0: int) -> int: ...

  def getNoEntryKey(self) -> int: ...

  def getNoEntryValue(self) -> int: ...

  def hashCode(self) -> int: ...

  @overload
  def increment(self, arg0: int) -> bool: ...

  @overload
  def increment(self, arg0: int) -> bool: ...

  @overload
  def isEmpty(self) -> bool: ...

  @overload
  def isEmpty(self) -> bool: ...

  @overload
  def iterator(self) -> TShortShortIterator: ...

  @overload
  def iterator(self) -> TShortShortIterator: ...

  @overload
  def keySet(self) -> TShortSet: ...

  @overload
  def keySet(self) -> TShortSet: ...

  @overload
  def keys(self) -> list[int]: ...

  @overload
  def keys(self) -> list[int]: ...

  @overload
  def keys(self, arg0: list[int]) -> list[int]: ...

  @overload
  def keys(self, arg0: list[int]) -> list[int]: ...

  @overload
  def put(self, arg0: int, arg1: int) -> int: ...

  @overload
  def put(self, arg0: int, arg1: int) -> int: ...

  @overload
  def putAll(self, arg0: TShortShortMap) -> None: ...

  @overload
  def putAll(self, arg0: TShortShortMap) -> None: ...

  @overload
  def putAll(self, arg0: Map[Short, Short]) -> None: ...

  @overload
  def putAll(self, arg0: Map[Short, Short]) -> None: ...

  @overload
  def putIfAbsent(self, arg0: int, arg1: int) -> int: ...

  @overload
  def putIfAbsent(self, arg0: int, arg1: int) -> int: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def remove(self, arg0: int) -> int: ...

  @overload
  def remove(self, arg0: int) -> int: ...

  @overload
  def retainEntries(self, arg0: TShortShortProcedure) -> bool: ...

  @overload
  def retainEntries(self, arg0: TShortShortProcedure) -> bool: ...

  def size(self) -> int: ...

  def toString(self) -> str: ...

  @overload
  def transformValues(self, arg0: TShortFunction) -> None: ...

  @overload
  def transformValues(self, arg0: TShortFunction) -> None: ...

  @overload
  def valueCollection(self) -> TShortCollection: ...

  @overload
  def valueCollection(self) -> TShortCollection: ...

  @overload
  def values(self) -> list[int]: ...

  @overload
  def values(self) -> list[int]: ...

  @overload
  def values(self, arg0: list[int]) -> list[int]: ...

  @overload
  def values(self, arg0: list[int]) -> list[int]: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: TShortShortMap): ...
  @overload
  def __init__(self, arg0: int): ...
  @overload
  def __init__(self, arg0: list[int], arg1: list[int]): ...
  @overload
  def __init__(self, arg0: int, arg1: float): ...
  @overload
  def __init__(self, arg0: int, arg1: float, arg2: int, arg3: int): ...

  class TShortShortHashIterator(THashPrimitiveIterator):

    def advance(self) -> None: ...

    @overload
    def key(self) -> int: ...

    @overload
    def key(self) -> int: ...

    def remove(self) -> None: ...

    @overload
    def setValue(self, arg0: int) -> int: ...

    @overload
    def setValue(self, arg0: int) -> int: ...

    @overload
    def value(self) -> int: ...

    @overload
    def value(self) -> int: ...

  class TShortShortValueHashIterator(THashPrimitiveIterator):

    @overload
    def next(self) -> int: ...

    @overload
    def next(self) -> int: ...

    def remove(self) -> None: ...

  class TShortShortKeyHashIterator(THashPrimitiveIterator):

    @overload
    def next(self) -> int: ...

    @overload
    def next(self) -> int: ...

    def remove(self) -> None: ...

  class TValueView:

    serialVersionUID: int

    @overload
    def add(self, arg0: int) -> bool: ...

    @overload
    def add(self, arg0: int) -> bool: ...

    @overload
    def addAll(self, arg0: list[int]) -> bool: ...

    @overload
    def addAll(self, arg0: list[int]) -> bool: ...

    @overload
    def addAll(self, arg0: TShortCollection) -> bool: ...

    @overload
    def addAll(self, arg0: TShortCollection) -> bool: ...

    @overload
    def addAll(self, arg0: Collection[Short]) -> bool: ...

    @overload
    def addAll(self, arg0: Collection[Short]) -> bool: ...

    @overload
    def clear(self) -> None: ...

    @overload
    def clear(self) -> None: ...

    @overload
    def contains(self, arg0: int) -> bool: ...

    @overload
    def contains(self, arg0: int) -> bool: ...

    @overload
    def containsAll(self, arg0: list[int]) -> bool: ...

    @overload
    def containsAll(self, arg0: list[int]) -> bool: ...

    @overload
    def containsAll(self, arg0: TShortCollection) -> bool: ...

    @overload
    def containsAll(self, arg0: TShortCollection) -> bool: ...

    @overload
    def containsAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def containsAll(self, arg0: Collection[Any]) -> bool: ...

    def equals(self, arg0: object) -> bool: ...

    @overload
    def forEach(self, arg0: TShortProcedure) -> bool: ...

    @overload
    def forEach(self, arg0: TShortProcedure) -> bool: ...

    @overload
    def getNoEntryValue(self) -> int: ...

    @overload
    def getNoEntryValue(self) -> int: ...

    def hashCode(self) -> int: ...

    @overload
    def isEmpty(self) -> bool: ...

    @overload
    def isEmpty(self) -> bool: ...

    @overload
    def iterator(self) -> TShortIterator: ...

    @overload
    def iterator(self) -> TShortIterator: ...

    @overload
    def remove(self, arg0: int) -> bool: ...

    @overload
    def remove(self, arg0: int) -> bool: ...

    @overload
    def removeAll(self, arg0: list[int]) -> bool: ...

    @overload
    def removeAll(self, arg0: list[int]) -> bool: ...

    @overload
    def removeAll(self, arg0: TShortCollection) -> bool: ...

    @overload
    def removeAll(self, arg0: TShortCollection) -> bool: ...

    @overload
    def removeAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def removeAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def retainAll(self, arg0: list[int]) -> bool: ...

    @overload
    def retainAll(self, arg0: list[int]) -> bool: ...

    @overload
    def retainAll(self, arg0: TShortCollection) -> bool: ...

    @overload
    def retainAll(self, arg0: TShortCollection) -> bool: ...

    @overload
    def retainAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def retainAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def size(self) -> int: ...

    @overload
    def size(self) -> int: ...

    @overload
    def toArray(self) -> list[int]: ...

    @overload
    def toArray(self) -> list[int]: ...

    @overload
    def toArray(self, arg0: list[int]) -> list[int]: ...

    @overload
    def toArray(self, arg0: list[int]) -> list[int]: ...

    def toString(self) -> str: ...

  class TKeyView:

    @overload
    def add(self, arg0: int) -> bool: ...

    @overload
    def add(self, arg0: int) -> bool: ...

    @overload
    def addAll(self, arg0: list[int]) -> bool: ...

    @overload
    def addAll(self, arg0: list[int]) -> bool: ...

    @overload
    def addAll(self, arg0: TShortCollection) -> bool: ...

    @overload
    def addAll(self, arg0: TShortCollection) -> bool: ...

    @overload
    def addAll(self, arg0: Collection[Short]) -> bool: ...

    @overload
    def addAll(self, arg0: Collection[Short]) -> bool: ...

    @overload
    def clear(self) -> None: ...

    @overload
    def clear(self) -> None: ...

    @overload
    def contains(self, arg0: int) -> bool: ...

    @overload
    def contains(self, arg0: int) -> bool: ...

    @overload
    def containsAll(self, arg0: list[int]) -> bool: ...

    @overload
    def containsAll(self, arg0: list[int]) -> bool: ...

    @overload
    def containsAll(self, arg0: TShortCollection) -> bool: ...

    @overload
    def containsAll(self, arg0: TShortCollection) -> bool: ...

    @overload
    def containsAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def containsAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def equals(self, arg0: object) -> bool: ...

    @overload
    def equals(self, arg0: object) -> bool: ...

    @overload
    def forEach(self, arg0: TShortProcedure) -> bool: ...

    @overload
    def forEach(self, arg0: TShortProcedure) -> bool: ...

    @overload
    def getNoEntryValue(self) -> int: ...

    @overload
    def getNoEntryValue(self) -> int: ...

    @overload
    def hashCode(self) -> int: ...

    @overload
    def hashCode(self) -> int: ...

    @overload
    def isEmpty(self) -> bool: ...

    @overload
    def isEmpty(self) -> bool: ...

    @overload
    def iterator(self) -> TShortIterator: ...

    @overload
    def iterator(self) -> TShortIterator: ...

    @overload
    def remove(self, arg0: int) -> bool: ...

    @overload
    def remove(self, arg0: int) -> bool: ...

    @overload
    def removeAll(self, arg0: list[int]) -> bool: ...

    @overload
    def removeAll(self, arg0: list[int]) -> bool: ...

    @overload
    def removeAll(self, arg0: TShortCollection) -> bool: ...

    @overload
    def removeAll(self, arg0: TShortCollection) -> bool: ...

    @overload
    def removeAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def removeAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def retainAll(self, arg0: list[int]) -> bool: ...

    @overload
    def retainAll(self, arg0: list[int]) -> bool: ...

    @overload
    def retainAll(self, arg0: TShortCollection) -> bool: ...

    @overload
    def retainAll(self, arg0: TShortCollection) -> bool: ...

    @overload
    def retainAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def retainAll(self, arg0: Collection[Any]) -> bool: ...

    @overload
    def size(self) -> int: ...

    @overload
    def size(self) -> int: ...

    @overload
    def toArray(self) -> list[int]: ...

    @overload
    def toArray(self) -> list[int]: ...

    @overload
    def toArray(self, arg0: list[int]) -> list[int]: ...

    @overload
    def toArray(self, arg0: list[int]) -> list[int]: ...

    def toString(self) -> str: ...

