from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from gnu.trove import TByteCollection, TFloatCollection, TIntCollection, TLongCollection, TShortCollection
from gnu.trove.function import TByteFunction, TFloatFunction, TIntFunction, TLongFunction, TShortFunction
from gnu.trove.iterator import TByteIterator, TFloatIterator, TIntIterator, TLongIterator, TShortIterator
from gnu.trove.procedure import TByteProcedure, TFloatProcedure, TIntProcedure, TLongProcedure, TShortProcedure
from java.util import Collection, Random

class TByteList:

  serialVersionUID: int

  @overload
  def add(self, arg0: list[int]) -> None: ...

  @overload
  def add(self, arg0: int) -> bool: ...

  @overload
  def add(self, arg0: int) -> bool: ...

  @overload
  def add(self, arg0: list[int], arg1: int, arg2: int) -> None: ...

  @overload
  def addAll(self, arg0: list[int]) -> bool: ...

  @overload
  def addAll(self, arg0: TByteCollection) -> bool: ...

  @overload
  def addAll(self, arg0: Collection[Byte]) -> bool: ...

  @overload
  def binarySearch(self, arg0: int) -> int: ...

  @overload
  def binarySearch(self, arg0: int, arg1: int, arg2: int) -> int: ...

  @overload
  def clear(self) -> None: ...

  @overload
  def clear(self) -> None: ...

  @overload
  def contains(self, arg0: int) -> bool: ...

  @overload
  def contains(self, arg0: int) -> bool: ...

  @overload
  def containsAll(self, arg0: list[int]) -> bool: ...

  @overload
  def containsAll(self, arg0: TByteCollection) -> bool: ...

  @overload
  def containsAll(self, arg0: Collection[Any]) -> bool: ...

  def equals(self, arg0: object) -> bool: ...

  @overload
  def fill(self, arg0: int) -> None: ...

  @overload
  def fill(self, arg0: int, arg1: int, arg2: int) -> None: ...

  @overload
  def forEach(self, arg0: TByteProcedure) -> bool: ...

  @overload
  def forEach(self, arg0: TByteProcedure) -> bool: ...

  def forEachDescending(self, arg0: TByteProcedure) -> bool: ...

  def get(self, arg0: int) -> int: ...

  @overload
  def getNoEntryValue(self) -> int: ...

  @overload
  def getNoEntryValue(self) -> int: ...

  def grep(self, arg0: TByteProcedure) -> TByteList: ...

  def hashCode(self) -> int: ...

  @overload
  def indexOf(self, arg0: int) -> int: ...

  @overload
  def indexOf(self, arg0: int, arg1: int) -> int: ...

  @overload
  def insert(self, arg0: int, arg1: list[int]) -> None: ...

  @overload
  def insert(self, arg0: int, arg1: int) -> None: ...

  @overload
  def insert(self, arg0: int, arg1: list[int], arg2: int, arg3: int) -> None: ...

  def inverseGrep(self, arg0: TByteProcedure) -> TByteList: ...

  @overload
  def isEmpty(self) -> bool: ...

  @overload
  def isEmpty(self) -> bool: ...

  def iterator(self) -> TByteIterator: ...

  @overload
  def lastIndexOf(self, arg0: int) -> int: ...

  @overload
  def lastIndexOf(self, arg0: int, arg1: int) -> int: ...

  def max(self) -> int: ...

  def min(self) -> int: ...

  @overload
  def remove(self, arg0: int) -> bool: ...

  @overload
  def remove(self, arg0: int) -> bool: ...

  @overload
  def remove(self, arg0: int, arg1: int) -> None: ...

  @overload
  def removeAll(self, arg0: list[int]) -> bool: ...

  @overload
  def removeAll(self, arg0: TByteCollection) -> bool: ...

  @overload
  def removeAll(self, arg0: Collection[Any]) -> bool: ...

  def removeAt(self, arg0: int) -> int: ...

  def replace(self, arg0: int, arg1: int) -> int: ...

  @overload
  def retainAll(self, arg0: list[int]) -> bool: ...

  @overload
  def retainAll(self, arg0: TByteCollection) -> bool: ...

  @overload
  def retainAll(self, arg0: Collection[Any]) -> bool: ...

  @overload
  def reverse(self) -> None: ...

  @overload
  def reverse(self, arg0: int, arg1: int) -> None: ...

  @overload
  def set(self, arg0: int, arg1: list[int]) -> None: ...

  @overload
  def set(self, arg0: int, arg1: int) -> int: ...

  @overload
  def set(self, arg0: int, arg1: list[int], arg2: int, arg3: int) -> None: ...

  def shuffle(self, arg0: Random) -> None: ...

  @overload
  def size(self) -> int: ...

  @overload
  def size(self) -> int: ...

  @overload
  def sort(self) -> None: ...

  @overload
  def sort(self, arg0: int, arg1: int) -> None: ...

  def subList(self, arg0: int, arg1: int) -> TByteList: ...

  def sum(self) -> int: ...

  @overload
  def toArray(self) -> list[int]: ...

  @overload
  def toArray(self) -> list[int]: ...

  @overload
  def toArray(self, arg0: list[int]) -> list[int]: ...

  @overload
  def toArray(self, arg0: list[int]) -> list[int]: ...

  @overload
  def toArray(self, arg0: int, arg1: int) -> list[int]: ...

  @overload
  def toArray(self, arg0: list[int], arg1: int, arg2: int) -> list[int]: ...

  @overload
  def toArray(self, arg0: list[int], arg1: int, arg2: int, arg3: int) -> list[int]: ...

  def transformValues(self, arg0: TByteFunction) -> None: ...


class TFloatList:

  serialVersionUID: int

  @overload
  def add(self, arg0: list[float]) -> None: ...

  @overload
  def add(self, arg0: float) -> bool: ...

  @overload
  def add(self, arg0: float) -> bool: ...

  @overload
  def add(self, arg0: list[float], arg1: int, arg2: int) -> None: ...

  @overload
  def addAll(self, arg0: list[float]) -> bool: ...

  @overload
  def addAll(self, arg0: TFloatCollection) -> bool: ...

  @overload
  def addAll(self, arg0: Collection[Float]) -> bool: ...

  @overload
  def binarySearch(self, arg0: float) -> int: ...

  @overload
  def binarySearch(self, arg0: float, arg1: int, arg2: int) -> int: ...

  @overload
  def clear(self) -> None: ...

  @overload
  def clear(self) -> None: ...

  @overload
  def contains(self, arg0: float) -> bool: ...

  @overload
  def contains(self, arg0: float) -> bool: ...

  @overload
  def containsAll(self, arg0: list[float]) -> bool: ...

  @overload
  def containsAll(self, arg0: TFloatCollection) -> bool: ...

  @overload
  def containsAll(self, arg0: Collection[Any]) -> bool: ...

  def equals(self, arg0: object) -> bool: ...

  @overload
  def fill(self, arg0: float) -> None: ...

  @overload
  def fill(self, arg0: int, arg1: int, arg2: float) -> None: ...

  @overload
  def forEach(self, arg0: TFloatProcedure) -> bool: ...

  @overload
  def forEach(self, arg0: TFloatProcedure) -> bool: ...

  def forEachDescending(self, arg0: TFloatProcedure) -> bool: ...

  def get(self, arg0: int) -> float: ...

  @overload
  def getNoEntryValue(self) -> float: ...

  @overload
  def getNoEntryValue(self) -> float: ...

  def grep(self, arg0: TFloatProcedure) -> TFloatList: ...

  def hashCode(self) -> int: ...

  @overload
  def indexOf(self, arg0: float) -> int: ...

  @overload
  def indexOf(self, arg0: int, arg1: float) -> int: ...

  @overload
  def insert(self, arg0: int, arg1: list[float]) -> None: ...

  @overload
  def insert(self, arg0: int, arg1: float) -> None: ...

  @overload
  def insert(self, arg0: int, arg1: list[float], arg2: int, arg3: int) -> None: ...

  def inverseGrep(self, arg0: TFloatProcedure) -> TFloatList: ...

  @overload
  def isEmpty(self) -> bool: ...

  @overload
  def isEmpty(self) -> bool: ...

  def iterator(self) -> TFloatIterator: ...

  @overload
  def lastIndexOf(self, arg0: float) -> int: ...

  @overload
  def lastIndexOf(self, arg0: int, arg1: float) -> int: ...

  def max(self) -> float: ...

  def min(self) -> float: ...

  @overload
  def remove(self, arg0: float) -> bool: ...

  @overload
  def remove(self, arg0: float) -> bool: ...

  @overload
  def remove(self, arg0: int, arg1: int) -> None: ...

  @overload
  def removeAll(self, arg0: list[float]) -> bool: ...

  @overload
  def removeAll(self, arg0: TFloatCollection) -> bool: ...

  @overload
  def removeAll(self, arg0: Collection[Any]) -> bool: ...

  def removeAt(self, arg0: int) -> float: ...

  def replace(self, arg0: int, arg1: float) -> float: ...

  @overload
  def retainAll(self, arg0: list[float]) -> bool: ...

  @overload
  def retainAll(self, arg0: TFloatCollection) -> bool: ...

  @overload
  def retainAll(self, arg0: Collection[Any]) -> bool: ...

  @overload
  def reverse(self) -> None: ...

  @overload
  def reverse(self, arg0: int, arg1: int) -> None: ...

  @overload
  def set(self, arg0: int, arg1: list[float]) -> None: ...

  @overload
  def set(self, arg0: int, arg1: float) -> float: ...

  @overload
  def set(self, arg0: int, arg1: list[float], arg2: int, arg3: int) -> None: ...

  def shuffle(self, arg0: Random) -> None: ...

  @overload
  def size(self) -> int: ...

  @overload
  def size(self) -> int: ...

  @overload
  def sort(self) -> None: ...

  @overload
  def sort(self, arg0: int, arg1: int) -> None: ...

  def subList(self, arg0: int, arg1: int) -> TFloatList: ...

  def sum(self) -> float: ...

  @overload
  def toArray(self) -> list[float]: ...

  @overload
  def toArray(self) -> list[float]: ...

  @overload
  def toArray(self, arg0: list[float]) -> list[float]: ...

  @overload
  def toArray(self, arg0: list[float]) -> list[float]: ...

  @overload
  def toArray(self, arg0: int, arg1: int) -> list[float]: ...

  @overload
  def toArray(self, arg0: list[float], arg1: int, arg2: int) -> list[float]: ...

  @overload
  def toArray(self, arg0: list[float], arg1: int, arg2: int, arg3: int) -> list[float]: ...

  def transformValues(self, arg0: TFloatFunction) -> None: ...


class TIntList:

  serialVersionUID: int

  @overload
  def add(self, arg0: list[int]) -> None: ...

  @overload
  def add(self, arg0: int) -> bool: ...

  @overload
  def add(self, arg0: int) -> bool: ...

  @overload
  def add(self, arg0: list[int], arg1: int, arg2: int) -> None: ...

  @overload
  def addAll(self, arg0: list[int]) -> bool: ...

  @overload
  def addAll(self, arg0: TIntCollection) -> bool: ...

  @overload
  def addAll(self, arg0: Collection[Integer]) -> bool: ...

  @overload
  def binarySearch(self, arg0: int) -> int: ...

  @overload
  def binarySearch(self, arg0: int, arg1: int, arg2: int) -> int: ...

  @overload
  def clear(self) -> None: ...

  @overload
  def clear(self) -> None: ...

  @overload
  def contains(self, arg0: int) -> bool: ...

  @overload
  def contains(self, arg0: int) -> bool: ...

  @overload
  def containsAll(self, arg0: list[int]) -> bool: ...

  @overload
  def containsAll(self, arg0: TIntCollection) -> bool: ...

  @overload
  def containsAll(self, arg0: Collection[Any]) -> bool: ...

  def equals(self, arg0: object) -> bool: ...

  @overload
  def fill(self, arg0: int) -> None: ...

  @overload
  def fill(self, arg0: int, arg1: int, arg2: int) -> None: ...

  @overload
  def forEach(self, arg0: TIntProcedure) -> bool: ...

  @overload
  def forEach(self, arg0: TIntProcedure) -> bool: ...

  def forEachDescending(self, arg0: TIntProcedure) -> bool: ...

  def get(self, arg0: int) -> int: ...

  @overload
  def getNoEntryValue(self) -> int: ...

  @overload
  def getNoEntryValue(self) -> int: ...

  def grep(self, arg0: TIntProcedure) -> TIntList: ...

  def hashCode(self) -> int: ...

  @overload
  def indexOf(self, arg0: int) -> int: ...

  @overload
  def indexOf(self, arg0: int, arg1: int) -> int: ...

  @overload
  def insert(self, arg0: int, arg1: list[int]) -> None: ...

  @overload
  def insert(self, arg0: int, arg1: int) -> None: ...

  @overload
  def insert(self, arg0: int, arg1: list[int], arg2: int, arg3: int) -> None: ...

  def inverseGrep(self, arg0: TIntProcedure) -> TIntList: ...

  @overload
  def isEmpty(self) -> bool: ...

  @overload
  def isEmpty(self) -> bool: ...

  def iterator(self) -> TIntIterator: ...

  @overload
  def lastIndexOf(self, arg0: int) -> int: ...

  @overload
  def lastIndexOf(self, arg0: int, arg1: int) -> int: ...

  def max(self) -> int: ...

  def min(self) -> int: ...

  @overload
  def remove(self, arg0: int) -> bool: ...

  @overload
  def remove(self, arg0: int) -> bool: ...

  @overload
  def remove(self, arg0: int, arg1: int) -> None: ...

  @overload
  def removeAll(self, arg0: list[int]) -> bool: ...

  @overload
  def removeAll(self, arg0: TIntCollection) -> bool: ...

  @overload
  def removeAll(self, arg0: Collection[Any]) -> bool: ...

  def removeAt(self, arg0: int) -> int: ...

  def replace(self, arg0: int, arg1: int) -> int: ...

  @overload
  def retainAll(self, arg0: list[int]) -> bool: ...

  @overload
  def retainAll(self, arg0: TIntCollection) -> bool: ...

  @overload
  def retainAll(self, arg0: Collection[Any]) -> bool: ...

  @overload
  def reverse(self) -> None: ...

  @overload
  def reverse(self, arg0: int, arg1: int) -> None: ...

  @overload
  def set(self, arg0: int, arg1: list[int]) -> None: ...

  @overload
  def set(self, arg0: int, arg1: int) -> int: ...

  @overload
  def set(self, arg0: int, arg1: list[int], arg2: int, arg3: int) -> None: ...

  def shuffle(self, arg0: Random) -> None: ...

  @overload
  def size(self) -> int: ...

  @overload
  def size(self) -> int: ...

  @overload
  def sort(self) -> None: ...

  @overload
  def sort(self, arg0: int, arg1: int) -> None: ...

  def subList(self, arg0: int, arg1: int) -> TIntList: ...

  def sum(self) -> int: ...

  @overload
  def toArray(self) -> list[int]: ...

  @overload
  def toArray(self) -> list[int]: ...

  @overload
  def toArray(self, arg0: list[int]) -> list[int]: ...

  @overload
  def toArray(self, arg0: list[int]) -> list[int]: ...

  @overload
  def toArray(self, arg0: int, arg1: int) -> list[int]: ...

  @overload
  def toArray(self, arg0: list[int], arg1: int, arg2: int) -> list[int]: ...

  @overload
  def toArray(self, arg0: list[int], arg1: int, arg2: int, arg3: int) -> list[int]: ...

  def transformValues(self, arg0: TIntFunction) -> None: ...


class TLongList:

  serialVersionUID: int

  @overload
  def add(self, arg0: list[int]) -> None: ...

  @overload
  def add(self, arg0: int) -> bool: ...

  @overload
  def add(self, arg0: int) -> bool: ...

  @overload
  def add(self, arg0: list[int], arg1: int, arg2: int) -> None: ...

  @overload
  def addAll(self, arg0: list[int]) -> bool: ...

  @overload
  def addAll(self, arg0: TLongCollection) -> bool: ...

  @overload
  def addAll(self, arg0: Collection[Long]) -> bool: ...

  @overload
  def binarySearch(self, arg0: int) -> int: ...

  @overload
  def binarySearch(self, arg0: int, arg1: int, arg2: int) -> int: ...

  @overload
  def clear(self) -> None: ...

  @overload
  def clear(self) -> None: ...

  @overload
  def contains(self, arg0: int) -> bool: ...

  @overload
  def contains(self, arg0: int) -> bool: ...

  @overload
  def containsAll(self, arg0: list[int]) -> bool: ...

  @overload
  def containsAll(self, arg0: TLongCollection) -> bool: ...

  @overload
  def containsAll(self, arg0: Collection[Any]) -> bool: ...

  def equals(self, arg0: object) -> bool: ...

  @overload
  def fill(self, arg0: int) -> None: ...

  @overload
  def fill(self, arg0: int, arg1: int, arg2: int) -> None: ...

  @overload
  def forEach(self, arg0: TLongProcedure) -> bool: ...

  @overload
  def forEach(self, arg0: TLongProcedure) -> bool: ...

  def forEachDescending(self, arg0: TLongProcedure) -> bool: ...

  def get(self, arg0: int) -> int: ...

  @overload
  def getNoEntryValue(self) -> int: ...

  @overload
  def getNoEntryValue(self) -> int: ...

  def grep(self, arg0: TLongProcedure) -> TLongList: ...

  def hashCode(self) -> int: ...

  @overload
  def indexOf(self, arg0: int) -> int: ...

  @overload
  def indexOf(self, arg0: int, arg1: int) -> int: ...

  @overload
  def insert(self, arg0: int, arg1: list[int]) -> None: ...

  @overload
  def insert(self, arg0: int, arg1: int) -> None: ...

  @overload
  def insert(self, arg0: int, arg1: list[int], arg2: int, arg3: int) -> None: ...

  def inverseGrep(self, arg0: TLongProcedure) -> TLongList: ...

  @overload
  def isEmpty(self) -> bool: ...

  @overload
  def isEmpty(self) -> bool: ...

  def iterator(self) -> TLongIterator: ...

  @overload
  def lastIndexOf(self, arg0: int) -> int: ...

  @overload
  def lastIndexOf(self, arg0: int, arg1: int) -> int: ...

  def max(self) -> int: ...

  def min(self) -> int: ...

  @overload
  def remove(self, arg0: int) -> bool: ...

  @overload
  def remove(self, arg0: int) -> bool: ...

  @overload
  def remove(self, arg0: int, arg1: int) -> None: ...

  @overload
  def removeAll(self, arg0: list[int]) -> bool: ...

  @overload
  def removeAll(self, arg0: TLongCollection) -> bool: ...

  @overload
  def removeAll(self, arg0: Collection[Any]) -> bool: ...

  def removeAt(self, arg0: int) -> int: ...

  def replace(self, arg0: int, arg1: int) -> int: ...

  @overload
  def retainAll(self, arg0: list[int]) -> bool: ...

  @overload
  def retainAll(self, arg0: TLongCollection) -> bool: ...

  @overload
  def retainAll(self, arg0: Collection[Any]) -> bool: ...

  @overload
  def reverse(self) -> None: ...

  @overload
  def reverse(self, arg0: int, arg1: int) -> None: ...

  @overload
  def set(self, arg0: int, arg1: list[int]) -> None: ...

  @overload
  def set(self, arg0: int, arg1: int) -> int: ...

  @overload
  def set(self, arg0: int, arg1: list[int], arg2: int, arg3: int) -> None: ...

  def shuffle(self, arg0: Random) -> None: ...

  @overload
  def size(self) -> int: ...

  @overload
  def size(self) -> int: ...

  @overload
  def sort(self) -> None: ...

  @overload
  def sort(self, arg0: int, arg1: int) -> None: ...

  def subList(self, arg0: int, arg1: int) -> TLongList: ...

  def sum(self) -> int: ...

  @overload
  def toArray(self) -> list[int]: ...

  @overload
  def toArray(self) -> list[int]: ...

  @overload
  def toArray(self, arg0: list[int]) -> list[int]: ...

  @overload
  def toArray(self, arg0: list[int]) -> list[int]: ...

  @overload
  def toArray(self, arg0: int, arg1: int) -> list[int]: ...

  @overload
  def toArray(self, arg0: list[int], arg1: int, arg2: int) -> list[int]: ...

  @overload
  def toArray(self, arg0: list[int], arg1: int, arg2: int, arg3: int) -> list[int]: ...

  def transformValues(self, arg0: TLongFunction) -> None: ...


class TShortList:

  serialVersionUID: int

  @overload
  def add(self, arg0: list[int]) -> None: ...

  @overload
  def add(self, arg0: int) -> bool: ...

  @overload
  def add(self, arg0: int) -> bool: ...

  @overload
  def add(self, arg0: list[int], arg1: int, arg2: int) -> None: ...

  @overload
  def addAll(self, arg0: list[int]) -> bool: ...

  @overload
  def addAll(self, arg0: TShortCollection) -> bool: ...

  @overload
  def addAll(self, arg0: Collection[Short]) -> bool: ...

  @overload
  def binarySearch(self, arg0: int) -> int: ...

  @overload
  def binarySearch(self, arg0: int, arg1: int, arg2: int) -> int: ...

  @overload
  def clear(self) -> None: ...

  @overload
  def clear(self) -> None: ...

  @overload
  def contains(self, arg0: int) -> bool: ...

  @overload
  def contains(self, arg0: int) -> bool: ...

  @overload
  def containsAll(self, arg0: list[int]) -> bool: ...

  @overload
  def containsAll(self, arg0: TShortCollection) -> bool: ...

  @overload
  def containsAll(self, arg0: Collection[Any]) -> bool: ...

  def equals(self, arg0: object) -> bool: ...

  @overload
  def fill(self, arg0: int) -> None: ...

  @overload
  def fill(self, arg0: int, arg1: int, arg2: int) -> None: ...

  @overload
  def forEach(self, arg0: TShortProcedure) -> bool: ...

  @overload
  def forEach(self, arg0: TShortProcedure) -> bool: ...

  def forEachDescending(self, arg0: TShortProcedure) -> bool: ...

  def get(self, arg0: int) -> int: ...

  @overload
  def getNoEntryValue(self) -> int: ...

  @overload
  def getNoEntryValue(self) -> int: ...

  def grep(self, arg0: TShortProcedure) -> TShortList: ...

  def hashCode(self) -> int: ...

  @overload
  def indexOf(self, arg0: int) -> int: ...

  @overload
  def indexOf(self, arg0: int, arg1: int) -> int: ...

  @overload
  def insert(self, arg0: int, arg1: list[int]) -> None: ...

  @overload
  def insert(self, arg0: int, arg1: int) -> None: ...

  @overload
  def insert(self, arg0: int, arg1: list[int], arg2: int, arg3: int) -> None: ...

  def inverseGrep(self, arg0: TShortProcedure) -> TShortList: ...

  @overload
  def isEmpty(self) -> bool: ...

  @overload
  def isEmpty(self) -> bool: ...

  def iterator(self) -> TShortIterator: ...

  @overload
  def lastIndexOf(self, arg0: int) -> int: ...

  @overload
  def lastIndexOf(self, arg0: int, arg1: int) -> int: ...

  def max(self) -> int: ...

  def min(self) -> int: ...

  @overload
  def remove(self, arg0: int) -> bool: ...

  @overload
  def remove(self, arg0: int) -> bool: ...

  @overload
  def remove(self, arg0: int, arg1: int) -> None: ...

  @overload
  def removeAll(self, arg0: list[int]) -> bool: ...

  @overload
  def removeAll(self, arg0: TShortCollection) -> bool: ...

  @overload
  def removeAll(self, arg0: Collection[Any]) -> bool: ...

  def removeAt(self, arg0: int) -> int: ...

  def replace(self, arg0: int, arg1: int) -> int: ...

  @overload
  def retainAll(self, arg0: list[int]) -> bool: ...

  @overload
  def retainAll(self, arg0: TShortCollection) -> bool: ...

  @overload
  def retainAll(self, arg0: Collection[Any]) -> bool: ...

  @overload
  def reverse(self) -> None: ...

  @overload
  def reverse(self, arg0: int, arg1: int) -> None: ...

  @overload
  def set(self, arg0: int, arg1: list[int]) -> None: ...

  @overload
  def set(self, arg0: int, arg1: int) -> int: ...

  @overload
  def set(self, arg0: int, arg1: list[int], arg2: int, arg3: int) -> None: ...

  def shuffle(self, arg0: Random) -> None: ...

  @overload
  def size(self) -> int: ...

  @overload
  def size(self) -> int: ...

  @overload
  def sort(self) -> None: ...

  @overload
  def sort(self, arg0: int, arg1: int) -> None: ...

  def subList(self, arg0: int, arg1: int) -> TShortList: ...

  def sum(self) -> int: ...

  @overload
  def toArray(self) -> list[int]: ...

  @overload
  def toArray(self) -> list[int]: ...

  @overload
  def toArray(self, arg0: list[int]) -> list[int]: ...

  @overload
  def toArray(self, arg0: list[int]) -> list[int]: ...

  @overload
  def toArray(self, arg0: int, arg1: int) -> list[int]: ...

  @overload
  def toArray(self, arg0: list[int], arg1: int, arg2: int) -> list[int]: ...

  @overload
  def toArray(self, arg0: list[int], arg1: int, arg2: int, arg3: int) -> list[int]: ...

  def transformValues(self, arg0: TShortFunction) -> None: ...

