from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation

V = TypeVar('V', default=Any)
K = TypeVar('K', default=Any)

class TAdvancingIterator:

  def advance(self) -> None: ...

  def hasNext(self) -> bool: ...

  def remove(self) -> None: ...


class TByteIterator:

  def hasNext(self) -> bool: ...

  def next(self) -> int: ...

  def remove(self) -> None: ...


class TFloatIterator:

  def hasNext(self) -> bool: ...

  def next(self) -> float: ...

  def remove(self) -> None: ...


class TIntIntIterator:

  def advance(self) -> None: ...

  def key(self) -> int: ...

  def setValue(self, arg0: int) -> int: ...

  def value(self) -> int: ...


class TIntIterator:

  def hasNext(self) -> bool: ...

  def next(self) -> int: ...

  def remove(self) -> None: ...


class TIntLongIterator:

  def advance(self) -> None: ...

  def key(self) -> int: ...

  def setValue(self, arg0: int) -> int: ...

  def value(self) -> int: ...


class TIntObjectIterator[V]:

  def advance(self) -> None: ...

  def key(self) -> int: ...

  def setValue(self, arg0: object) -> object: ...

  def value(self) -> object: ...


class TIterator:

  def hasNext(self) -> bool: ...

  def remove(self) -> None: ...


class TLongIterator:

  def hasNext(self) -> bool: ...

  def next(self) -> int: ...

  def remove(self) -> None: ...


class TLongObjectIterator[V]:

  def advance(self) -> None: ...

  def key(self) -> int: ...

  def setValue(self, arg0: object) -> object: ...

  def value(self) -> object: ...


class TObjectIntIterator[K]:

  def advance(self) -> None: ...

  def key(self) -> object: ...

  def setValue(self, arg0: int) -> int: ...

  def value(self) -> int: ...


class TPrimitiveIterator:

  @overload
  def hasNext(self) -> bool: ...

  @overload
  def hasNext(self) -> bool: ...

  @overload
  def remove(self) -> None: ...

  @overload
  def remove(self) -> None: ...


class TShortIterator:

  def hasNext(self) -> bool: ...

  def next(self) -> int: ...

  def remove(self) -> None: ...


class TShortObjectIterator[V]:

  def advance(self) -> None: ...

  def key(self) -> int: ...

  def setValue(self, arg0: object) -> object: ...

  def value(self) -> object: ...


class TShortShortIterator:

  def advance(self) -> None: ...

  def key(self) -> int: ...

  def setValue(self, arg0: int) -> int: ...

  def value(self) -> int: ...

