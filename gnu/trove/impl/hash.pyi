from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from gnu.trove.procedure import TIntProcedure, TLongProcedure, TObjectProcedure, TShortProcedure
from java.io import ObjectInput, ObjectOutput
from java.util.function import Consumer

V = TypeVar('V', default=Any)
T = TypeVar('T', default=Any)

class THash:

  def capacity(self) -> int: ...

  def clear(self) -> None: ...

  def compact(self) -> None: ...

  def ensureCapacity(self, arg0: int) -> None: ...

  def getAutoCompactionFactor(self) -> float: ...

  def isEmpty(self) -> bool: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  def reenableAutoCompaction(self, arg0: bool) -> None: ...

  def setAutoCompactionFactor(self, arg0: float) -> None: ...

  def size(self) -> int: ...

  def tempDisableAutoCompaction(self) -> None: ...

  def trimToSize(self) -> None: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: int): ...
  @overload
  def __init__(self, arg0: int, arg1: float): ...


class THashIterator[V]:

  def forEachRemaining(self, arg0: Consumer[E]) -> None: ...

  @overload
  def hasNext(self) -> bool: ...

  @overload
  def hasNext(self) -> bool: ...

  @overload
  def hasNext(self) -> bool: ...

  @overload
  def next(self) -> object: ...

  @overload
  def next(self) -> object: ...

  @overload
  def remove(self) -> None: ...

  @overload
  def remove(self) -> None: ...

  @overload
  def remove(self) -> None: ...


class THashPrimitiveIterator:

  @overload
  def hasNext(self) -> bool: ...

  @overload
  def hasNext(self) -> bool: ...

  @overload
  def remove(self) -> None: ...

  @overload
  def remove(self) -> None: ...

  def __init__(self, arg0: TPrimitiveHash): ...


class TIntHash(TPrimitiveHash):

  def contains(self, arg0: int) -> bool: ...

  def forEach(self, arg0: TIntProcedure) -> bool: ...

  def getNoEntryValue(self) -> int: ...

  @overload
  def __init__(self):
    self._set: list[int]

  @overload
  def __init__(self, arg0: int): ...
  @overload
  def __init__(self, arg0: int, arg1: float): ...
  @overload
  def __init__(self, arg0: int, arg1: float, arg2: int): ...


class TIntIntHash(TPrimitiveHash):

  def contains(self, arg0: int) -> bool: ...

  def forEach(self, arg0: TIntProcedure) -> bool: ...

  def getNoEntryKey(self) -> int: ...

  def getNoEntryValue(self) -> int: ...

  def readExternal(self, arg0: ObjectInput) -> None: ...

  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def __init__(self):
    self._set: list[int]

  @overload
  def __init__(self, arg0: int): ...
  @overload
  def __init__(self, arg0: int, arg1: float): ...
  @overload
  def __init__(self, arg0: int, arg1: float, arg2: int, arg3: int): ...


class TIntLongHash(TPrimitiveHash):

  def contains(self, arg0: int) -> bool: ...

  def forEach(self, arg0: TIntProcedure) -> bool: ...

  def getNoEntryKey(self) -> int: ...

  def getNoEntryValue(self) -> int: ...

  def readExternal(self, arg0: ObjectInput) -> None: ...

  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def __init__(self):
    self._set: list[int]

  @overload
  def __init__(self, arg0: int): ...
  @overload
  def __init__(self, arg0: int, arg1: float): ...
  @overload
  def __init__(self, arg0: int, arg1: float, arg2: int, arg3: int): ...


class TLongHash(TPrimitiveHash):

  def contains(self, arg0: int) -> bool: ...

  def forEach(self, arg0: TLongProcedure) -> bool: ...

  def getNoEntryValue(self) -> int: ...

  @overload
  def __init__(self):
    self._set: list[int]

  @overload
  def __init__(self, arg0: int): ...
  @overload
  def __init__(self, arg0: int, arg1: float): ...
  @overload
  def __init__(self, arg0: int, arg1: float, arg2: int): ...


class TObjectHash[T](THash):

  FREE: object

  REMOVED: object

  def capacity(self) -> int: ...

  def contains(self, arg0: object) -> bool: ...

  def forEach(self, arg0: TObjectProcedure[T]) -> bool: ...

  def readExternal(self, arg0: ObjectInput) -> None: ...

  def setUp(self, arg0: int) -> int: ...

  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def __init__(self):
    self._set: list[object]

  @overload
  def __init__(self, arg0: int): ...
  @overload
  def __init__(self, arg0: int, arg1: float): ...


class TPrimitiveHash(THash):

  FREE: int

  FULL: int

  REMOVED: int

  def capacity(self) -> int: ...

  @overload
  def __init__(self):
    self._states: list[int]

  @overload
  def __init__(self, arg0: int): ...
  @overload
  def __init__(self, arg0: int, arg1: float): ...


class TShortHash(TPrimitiveHash):

  def contains(self, arg0: int) -> bool: ...

  def forEach(self, arg0: TShortProcedure) -> bool: ...

  def getNoEntryValue(self) -> int: ...

  @overload
  def __init__(self):
    self._set: list[int]

  @overload
  def __init__(self, arg0: int): ...
  @overload
  def __init__(self, arg0: int, arg1: float): ...
  @overload
  def __init__(self, arg0: int, arg1: float, arg2: int): ...


class TShortShortHash(TPrimitiveHash):

  def contains(self, arg0: int) -> bool: ...

  def forEach(self, arg0: TShortProcedure) -> bool: ...

  def getNoEntryKey(self) -> int: ...

  def getNoEntryValue(self) -> int: ...

  def readExternal(self, arg0: ObjectInput) -> None: ...

  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def __init__(self):
    self._set: list[int]

  @overload
  def __init__(self, arg0: int): ...
  @overload
  def __init__(self, arg0: int, arg1: float): ...
  @overload
  def __init__(self, arg0: int, arg1: float, arg2: int, arg3: int): ...

