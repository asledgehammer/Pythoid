from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from gnu.trove.iterator import TByteIterator, TFloatIterator, TIntIterator, TLongIterator, TShortIterator
from gnu.trove.procedure import TByteProcedure, TFloatProcedure, TIntProcedure, TLongProcedure, TShortProcedure
from java.util import Collection

class TByteCollection:

  serialVersionUID: int

  def add(self, arg0: int) -> bool: ...

  @overload
  def addAll(self, arg0: list[int]) -> bool: ...

  @overload
  def addAll(self, arg0: TByteCollection) -> bool: ...

  @overload
  def addAll(self, arg0: Collection[Byte]) -> bool: ...

  def clear(self) -> None: ...

  def contains(self, arg0: int) -> bool: ...

  @overload
  def containsAll(self, arg0: list[int]) -> bool: ...

  @overload
  def containsAll(self, arg0: TByteCollection) -> bool: ...

  @overload
  def containsAll(self, arg0: Collection[Any]) -> bool: ...

  def equals(self, arg0: object) -> bool: ...

  def forEach(self, arg0: TByteProcedure) -> bool: ...

  def getNoEntryValue(self) -> int: ...

  def hashCode(self) -> int: ...

  def isEmpty(self) -> bool: ...

  def iterator(self) -> TByteIterator: ...

  def remove(self, arg0: int) -> bool: ...

  @overload
  def removeAll(self, arg0: list[int]) -> bool: ...

  @overload
  def removeAll(self, arg0: TByteCollection) -> bool: ...

  @overload
  def removeAll(self, arg0: Collection[Any]) -> bool: ...

  @overload
  def retainAll(self, arg0: list[int]) -> bool: ...

  @overload
  def retainAll(self, arg0: TByteCollection) -> bool: ...

  @overload
  def retainAll(self, arg0: Collection[Any]) -> bool: ...

  def size(self) -> int: ...

  @overload
  def toArray(self) -> list[int]: ...

  @overload
  def toArray(self, arg0: list[int]) -> list[int]: ...


class TFloatCollection:

  serialVersionUID: int

  def add(self, arg0: float) -> bool: ...

  @overload
  def addAll(self, arg0: list[float]) -> bool: ...

  @overload
  def addAll(self, arg0: TFloatCollection) -> bool: ...

  @overload
  def addAll(self, arg0: Collection[Float]) -> bool: ...

  def clear(self) -> None: ...

  def contains(self, arg0: float) -> bool: ...

  @overload
  def containsAll(self, arg0: list[float]) -> bool: ...

  @overload
  def containsAll(self, arg0: TFloatCollection) -> bool: ...

  @overload
  def containsAll(self, arg0: Collection[Any]) -> bool: ...

  def equals(self, arg0: object) -> bool: ...

  def forEach(self, arg0: TFloatProcedure) -> bool: ...

  def getNoEntryValue(self) -> float: ...

  def hashCode(self) -> int: ...

  def isEmpty(self) -> bool: ...

  def iterator(self) -> TFloatIterator: ...

  def remove(self, arg0: float) -> bool: ...

  @overload
  def removeAll(self, arg0: list[float]) -> bool: ...

  @overload
  def removeAll(self, arg0: TFloatCollection) -> bool: ...

  @overload
  def removeAll(self, arg0: Collection[Any]) -> bool: ...

  @overload
  def retainAll(self, arg0: list[float]) -> bool: ...

  @overload
  def retainAll(self, arg0: TFloatCollection) -> bool: ...

  @overload
  def retainAll(self, arg0: Collection[Any]) -> bool: ...

  def size(self) -> int: ...

  @overload
  def toArray(self) -> list[float]: ...

  @overload
  def toArray(self, arg0: list[float]) -> list[float]: ...


class TIntCollection:

  serialVersionUID: int

  def add(self, arg0: int) -> bool: ...

  @overload
  def addAll(self, arg0: list[int]) -> bool: ...

  @overload
  def addAll(self, arg0: TIntCollection) -> bool: ...

  @overload
  def addAll(self, arg0: Collection[Integer]) -> bool: ...

  def clear(self) -> None: ...

  def contains(self, arg0: int) -> bool: ...

  @overload
  def containsAll(self, arg0: list[int]) -> bool: ...

  @overload
  def containsAll(self, arg0: TIntCollection) -> bool: ...

  @overload
  def containsAll(self, arg0: Collection[Any]) -> bool: ...

  def equals(self, arg0: object) -> bool: ...

  def forEach(self, arg0: TIntProcedure) -> bool: ...

  def getNoEntryValue(self) -> int: ...

  def hashCode(self) -> int: ...

  def isEmpty(self) -> bool: ...

  def iterator(self) -> TIntIterator: ...

  def remove(self, arg0: int) -> bool: ...

  @overload
  def removeAll(self, arg0: list[int]) -> bool: ...

  @overload
  def removeAll(self, arg0: TIntCollection) -> bool: ...

  @overload
  def removeAll(self, arg0: Collection[Any]) -> bool: ...

  @overload
  def retainAll(self, arg0: list[int]) -> bool: ...

  @overload
  def retainAll(self, arg0: TIntCollection) -> bool: ...

  @overload
  def retainAll(self, arg0: Collection[Any]) -> bool: ...

  def size(self) -> int: ...

  @overload
  def toArray(self) -> list[int]: ...

  @overload
  def toArray(self, arg0: list[int]) -> list[int]: ...


class TLongCollection:

  serialVersionUID: int

  def add(self, arg0: int) -> bool: ...

  @overload
  def addAll(self, arg0: list[int]) -> bool: ...

  @overload
  def addAll(self, arg0: TLongCollection) -> bool: ...

  @overload
  def addAll(self, arg0: Collection[Long]) -> bool: ...

  def clear(self) -> None: ...

  def contains(self, arg0: int) -> bool: ...

  @overload
  def containsAll(self, arg0: list[int]) -> bool: ...

  @overload
  def containsAll(self, arg0: TLongCollection) -> bool: ...

  @overload
  def containsAll(self, arg0: Collection[Any]) -> bool: ...

  def equals(self, arg0: object) -> bool: ...

  def forEach(self, arg0: TLongProcedure) -> bool: ...

  def getNoEntryValue(self) -> int: ...

  def hashCode(self) -> int: ...

  def isEmpty(self) -> bool: ...

  def iterator(self) -> TLongIterator: ...

  def remove(self, arg0: int) -> bool: ...

  @overload
  def removeAll(self, arg0: list[int]) -> bool: ...

  @overload
  def removeAll(self, arg0: TLongCollection) -> bool: ...

  @overload
  def removeAll(self, arg0: Collection[Any]) -> bool: ...

  @overload
  def retainAll(self, arg0: list[int]) -> bool: ...

  @overload
  def retainAll(self, arg0: TLongCollection) -> bool: ...

  @overload
  def retainAll(self, arg0: Collection[Any]) -> bool: ...

  def size(self) -> int: ...

  @overload
  def toArray(self) -> list[int]: ...

  @overload
  def toArray(self, arg0: list[int]) -> list[int]: ...


class TShortCollection:

  serialVersionUID: int

  def add(self, arg0: int) -> bool: ...

  @overload
  def addAll(self, arg0: list[int]) -> bool: ...

  @overload
  def addAll(self, arg0: TShortCollection) -> bool: ...

  @overload
  def addAll(self, arg0: Collection[Short]) -> bool: ...

  def clear(self) -> None: ...

  def contains(self, arg0: int) -> bool: ...

  @overload
  def containsAll(self, arg0: list[int]) -> bool: ...

  @overload
  def containsAll(self, arg0: TShortCollection) -> bool: ...

  @overload
  def containsAll(self, arg0: Collection[Any]) -> bool: ...

  def equals(self, arg0: object) -> bool: ...

  def forEach(self, arg0: TShortProcedure) -> bool: ...

  def getNoEntryValue(self) -> int: ...

  def hashCode(self) -> int: ...

  def isEmpty(self) -> bool: ...

  def iterator(self) -> TShortIterator: ...

  def remove(self, arg0: int) -> bool: ...

  @overload
  def removeAll(self, arg0: list[int]) -> bool: ...

  @overload
  def removeAll(self, arg0: TShortCollection) -> bool: ...

  @overload
  def removeAll(self, arg0: Collection[Any]) -> bool: ...

  @overload
  def retainAll(self, arg0: list[int]) -> bool: ...

  @overload
  def retainAll(self, arg0: TShortCollection) -> bool: ...

  @overload
  def retainAll(self, arg0: Collection[Any]) -> bool: ...

  def size(self) -> int: ...

  @overload
  def toArray(self) -> list[int]: ...

  @overload
  def toArray(self, arg0: list[int]) -> list[int]: ...

