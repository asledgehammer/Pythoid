from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.lang import Class
from java.lang.reflect import Constructor, Method
from se.krka.kahlua.integration.expose import ReturnValues

class AbstractCaller:

  def call(self, arg0: object, arg1: ReturnValues, arg2: list[object]) -> None: ...

  def getDescriptor(self) -> str: ...

  @overload
  def getParameterTypes(self) -> list[Class]: ...

  @overload
  def getParameterTypes(self) -> list[Class]: ...

  @overload
  def getVarargType(self) -> Class[Any]: ...

  @overload
  def getVarargType(self) -> Class[Any]: ...

  def hasSelf(self) -> bool: ...

  @overload
  def hasVararg(self) -> bool: ...

  @overload
  def hasVararg(self) -> bool: ...

  @overload
  def needsMultipleReturnValues(self) -> bool: ...

  @overload
  def needsMultipleReturnValues(self) -> bool: ...


class Caller:

  def call(self, arg0: object, arg1: ReturnValues, arg2: list[object]) -> None: ...

  def getDescriptor(self) -> str: ...

  def getParameterTypes(self) -> list[Class]: ...

  def getVarargType(self) -> Class[Any]: ...

  def hasSelf(self) -> bool: ...

  def hasVararg(self) -> bool: ...

  def needsMultipleReturnValues(self) -> bool: ...


class ConstructorCaller(AbstractCaller):

  def call(self, arg0: object, arg1: ReturnValues, arg2: list[object]) -> None: ...

  def equals(self, arg0: object) -> bool: ...

  def getDescriptor(self) -> str: ...

  def hasSelf(self) -> bool: ...

  def hashCode(self) -> int: ...

  def __init__(self, arg0: Constructor[Any]): ...


class MethodCaller(AbstractCaller):

  def call(self, arg0: object, arg1: ReturnValues, arg2: list[object]) -> None: ...

  def equals(self, arg0: object) -> bool: ...

  def getDescriptor(self) -> str: ...

  def hasSelf(self) -> bool: ...

  def hashCode(self) -> int: ...

  def __init__(self, arg0: Method, arg1: object, arg2: bool): ...

