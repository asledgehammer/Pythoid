from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.lang import Boolean, RuntimeException
from java.util import AbstractList
from se.krka.kahlua.converter import KahluaConverterManager
from se.krka.kahlua.vm import KahluaThread

class LuaCaller:

  @overload
  def pcall(self, arg0: KahluaThread, arg1: object, arg2: list[object]) -> list[object]: ...

  @overload
  def pcall(self, arg0: KahluaThread, arg1: object, arg2: object) -> list[object]: ...

  @overload
  def pcallBoolean(self, arg0: KahluaThread, arg1: object, arg2: list[object]) -> Boolean: ...

  @overload
  def pcallBoolean(self, arg0: KahluaThread, arg1: object, arg2: object, arg3: object) -> Boolean: ...

  @overload
  def pcallBoolean(self, arg0: KahluaThread, arg1: object, arg2: object, arg3: object, arg4: object) -> Boolean: ...

  @overload
  def pcallvoid(self, arg0: KahluaThread, arg1: object, arg2: list[object]) -> None: ...

  @overload
  def pcallvoid(self, arg0: KahluaThread, arg1: object, arg2: object) -> None: ...

  @overload
  def pcallvoid(self, arg0: KahluaThread, arg1: object, arg2: object, arg3: object) -> None: ...

  @overload
  def pcallvoid(self, arg0: KahluaThread, arg1: object, arg2: object, arg3: object, arg4: object) -> None: ...

  def protectedCall(self, arg0: KahluaThread, arg1: object, arg2: list[object]) -> LuaReturn: ...

  @overload
  def protectedCallBoolean(self, arg0: KahluaThread, arg1: object, arg2: list[object]) -> Boolean: ...

  @overload
  def protectedCallBoolean(self, arg0: KahluaThread, arg1: object, arg2: object) -> Boolean: ...

  @overload
  def protectedCallBoolean(self, arg0: KahluaThread, arg1: object, arg2: object, arg3: object) -> Boolean: ...

  @overload
  def protectedCallBoolean(self, arg0: KahluaThread, arg1: object, arg2: object, arg3: object, arg4: object) -> Boolean: ...

  @overload
  def protectedCallVoid(self, arg0: KahluaThread, arg1: object, arg2: list[object]) -> None: ...

  @overload
  def protectedCallVoid(self, arg0: KahluaThread, arg1: object, arg2: object) -> None: ...

  @overload
  def protectedCallVoid(self, arg0: KahluaThread, arg1: object, arg2: object, arg3: object) -> None: ...

  @overload
  def protectedCallVoid(self, arg0: KahluaThread, arg1: object, arg2: object, arg3: object, arg4: object) -> None: ...

  def __init__(self, arg0: KahluaConverterManager): ...


class LuaFail(LuaReturn):

  def getErrorObject(self) -> object: ...

  def getErrorString(self) -> str: ...

  def getJavaException(self) -> RuntimeException: ...

  def getLuaStackTrace(self) -> str: ...

  def isSuccess(self) -> bool: ...

  def size(self) -> int: ...

  def toString(self) -> str: ...


class LuaReturn(AbstractList):

  def get(self, arg0: int) -> object: ...

  def getErrorObject(self) -> object: ...

  def getErrorString(self) -> str: ...

  def getFirst(self) -> object: ...

  def getJavaException(self) -> RuntimeException: ...

  def getLuaStackTrace(self) -> str: ...

  def getSecond(self) -> object: ...

  def getThird(self) -> object: ...

  def isSuccess(self) -> bool: ...

  def size(self) -> int: ...

  @staticmethod
  def createReturn(arg0: list[object]) -> LuaReturn: ...


class LuaSuccess(LuaReturn):

  def getErrorObject(self) -> object: ...

  def getErrorString(self) -> str: ...

  def getJavaException(self) -> RuntimeException: ...

  def getLuaStackTrace(self) -> str: ...

  def isSuccess(self) -> bool: ...

