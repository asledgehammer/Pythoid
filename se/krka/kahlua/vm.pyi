from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.io import DataInputStream, DataOutputStream, PrintStream, OutputStream, InputStream
from java.lang import Class, RuntimeException, Exception, Boolean, StringBuilder, Double
from java.nio import ByteBuffer
from java.util import ArrayList, HashMap, Comparator
from java.util.function import Function, ToDoubleFunction, ToIntFunction, ToLongFunction
from zombie.core.utils import HashMap

U = TypeVar('U', default=Any)
T = TypeVar('T', default=Any)

class Coroutine:

  def addStackTrace(self, arg0: LuaCallFrame) -> None: ...

  def atBottom(self) -> bool: ...

  def cleanCallFrames(self, arg0: LuaCallFrame) -> None: ...

  def closeUpvalues(self, arg0: int) -> None: ...

  def currentCallFrame(self) -> LuaCallFrame: ...

  def destroy(self) -> None: ...

  def findUpvalue(self, arg0: int) -> UpValue: ...

  def getCallFrame(self, arg0: int) -> LuaCallFrame: ...

  def getCallframeStack(self) -> list[LuaCallFrame]: ...

  def getCallframeTop(self) -> int: ...

  def getCurrentStackTrace(self, arg0: int, arg1: int, arg2: int) -> str: ...

  def getObjectFromStack(self, arg0: int) -> object: ...

  def getObjectStackSize(self) -> int: ...

  @overload
  def getParent(self) -> Coroutine: ...

  @overload
  def getParent(self, arg0: int) -> LuaCallFrame: ...

  def getParentCallframe(self) -> LuaCallFrame: ...

  def getParentNoAssert(self, arg0: int) -> LuaCallFrame: ...

  def getPlatform(self) -> Platform: ...

  def getStatus(self) -> str: ...

  def getThread(self) -> KahluaThread: ...

  def getTop(self) -> int: ...

  def isDead(self) -> bool: ...

  def popCallFrame(self) -> None: ...

  def pushNewCallFrame(self, arg0: LuaClosure, arg1: JavaFunction, arg2: int, arg3: int, arg4: int, arg5: bool, arg6: bool) -> LuaCallFrame: ...

  def resume(self, arg0: Coroutine) -> None: ...

  def setCallFrameStackTop(self, arg0: int) -> None: ...

  def setTop(self, arg0: int) -> None: ...

  def stackClear(self, arg0: int, arg1: int) -> None: ...

  def stackCopy(self, arg0: int, arg1: int, arg2: int) -> None: ...

  @staticmethod
  def yieldHelper(arg0: LuaCallFrame, arg1: LuaCallFrame, arg2: int) -> None: ...

  @overload
  def __init__(self):
    self.environment: KahluaTable

    self.objectstack: list[object]

    self.stacktrace: str

  @overload
  def __init__(self, arg0: Platform, arg1: KahluaTable): ...
  @overload
  def __init__(self, arg0: Platform, arg1: KahluaTable, arg2: KahluaThread): ...


class JavaFunction:

  def call(self, arg0: LuaCallFrame, arg1: int) -> int: ...


class KahluaArray:

  def getJavaClass(self) -> Class[Any]: ...

  @overload
  def getMetatable(self) -> KahluaTable: ...

  @overload
  def getMetatable(self) -> KahluaTable: ...

  @overload
  def getString(self, arg0: str) -> str: ...

  @overload
  def getString(self, arg0: str) -> str: ...

  @overload
  def isEmpty(self) -> bool: ...

  @overload
  def isEmpty(self) -> bool: ...

  @overload
  def iterator(self) -> KahluaTableIterator: ...

  @overload
  def iterator(self) -> KahluaTableIterator: ...

  @overload
  def len(self) -> int: ...

  @overload
  def len(self) -> int: ...

  @overload
  def load(self, arg0: DataInputStream, arg1: int) -> None: ...

  @overload
  def load(self, arg0: DataInputStream, arg1: int) -> None: ...

  @overload
  def load(self, arg0: ByteBuffer, arg1: int) -> None: ...

  @overload
  def load(self, arg0: ByteBuffer, arg1: int) -> None: ...

  def next(self, arg0: object) -> object: ...

  @overload
  def rawget(self, arg0: int) -> object: ...

  @overload
  def rawget(self, arg0: int) -> object: ...

  @overload
  def rawget(self, arg0: object) -> object: ...

  @overload
  def rawget(self, arg0: object) -> object: ...

  @overload
  def rawset(self, arg0: int, arg1: object) -> None: ...

  @overload
  def rawset(self, arg0: int, arg1: object) -> None: ...

  @overload
  def rawset(self, arg0: object, arg1: object) -> None: ...

  @overload
  def rawset(self, arg0: object, arg1: object) -> None: ...

  @overload
  def save(self, arg0: DataOutputStream) -> None: ...

  @overload
  def save(self, arg0: DataOutputStream) -> None: ...

  @overload
  def save(self, arg0: ByteBuffer) -> None: ...

  @overload
  def save(self, arg0: ByteBuffer) -> None: ...

  @overload
  def setMetatable(self, arg0: KahluaTable) -> None: ...

  @overload
  def setMetatable(self, arg0: KahluaTable) -> None: ...

  @overload
  def size(self) -> int: ...

  @overload
  def size(self) -> int: ...

  @overload
  def wipe(self) -> None: ...

  @overload
  def wipe(self) -> None: ...

  def __init__(self): ...


class KahluaException(RuntimeException):

  def getMessage(self) -> str: ...

  def __init__(self, arg0: object):
    self.errormessage: object


class KahluaTable:

  def getMetatable(self) -> KahluaTable: ...

  def getString(self, arg0: str) -> str: ...

  def isEmpty(self) -> bool: ...

  def iterator(self) -> KahluaTableIterator: ...

  def len(self) -> int: ...

  @overload
  def load(self, arg0: DataInputStream, arg1: int) -> None: ...

  @overload
  def load(self, arg0: ByteBuffer, arg1: int) -> None: ...

  @overload
  def rawget(self, arg0: int) -> object: ...

  @overload
  def rawget(self, arg0: object) -> object: ...

  @overload
  def rawset(self, arg0: int, arg1: object) -> None: ...

  @overload
  def rawset(self, arg0: object, arg1: object) -> None: ...

  @overload
  def save(self, arg0: DataOutputStream) -> None: ...

  @overload
  def save(self, arg0: ByteBuffer) -> None: ...

  def setMetatable(self, arg0: KahluaTable) -> None: ...

  def size(self) -> int: ...

  def wipe(self) -> None: ...


class KahluaTableIterator:

  def advance(self) -> bool: ...

  def call(self, arg0: LuaCallFrame, arg1: int) -> int: ...

  def getKey(self) -> object: ...

  def getValue(self) -> object: ...


class KahluaThread:

  LastCallFrame: LuaCallFrame

  m_error_count: int

  m_errors_list: ArrayList[str]

  def breakpointToggle(self, arg0: str, arg1: int) -> None: ...

  @overload
  def call(self, arg0: int) -> int: ...

  @overload
  def call(self, arg0: object, arg1: list[object]) -> object: ...

  @overload
  def call(self, arg0: object, arg1: object, arg2: object, arg3: object) -> object: ...

  def debugException(self, arg0: Exception) -> None: ...

  @overload
  def doStacktraceProper(self) -> None: ...

  @overload
  def doStacktraceProper(self, arg0: LuaCallFrame) -> None: ...

  def flushErrorMessage(self) -> None: ...

  def getCurrentCoroutine(self) -> Coroutine: ...

  def getEnvironment(self) -> KahluaTable: ...

  def getOut(self) -> PrintStream: ...

  def getPlatform(self) -> Platform: ...

  def getmetatable(self, arg0: object, arg1: bool) -> object: ...

  def hasBreakpoint(self, arg0: str, arg1: int) -> bool: ...

  def hasDataBreakpoint(self, arg0: KahluaTable, arg1: object) -> bool: ...

  def hasReadDataBreakpoint(self, arg0: KahluaTable, arg1: object) -> bool: ...

  def isCurrent(self, arg0: str, arg1: int) -> bool: ...

  @overload
  def pcall(self, arg0: int) -> int: ...

  @overload
  def pcall(self, arg0: object) -> list[object]: ...

  @overload
  def pcall(self, arg0: object, arg1: list[object]) -> list[object]: ...

  @overload
  def pcallBoolean(self, arg0: object, arg1: list[object]) -> Boolean: ...

  @overload
  def pcallBoolean(self, arg0: object, arg1: object) -> Boolean: ...

  @overload
  def pcallBoolean(self, arg0: object, arg1: object, arg2: object) -> Boolean: ...

  @overload
  def pcallBoolean(self, arg0: object, arg1: object, arg2: object, arg3: object) -> Boolean: ...

  @overload
  def pcallvoid(self, arg0: object, arg1: list[object]) -> None: ...

  @overload
  def pcallvoid(self, arg0: object, arg1: object) -> None: ...

  @overload
  def pcallvoid(self, arg0: object, arg1: object, arg2: object) -> None: ...

  @overload
  def pcallvoid(self, arg0: object, arg1: object, arg2: object, arg3: object) -> None: ...

  def setmetatable(self, arg0: object, arg1: KahluaTable) -> None: ...

  def startErrorMessage(self) -> StringBuilder: ...

  def tableSet(self, arg0: object, arg1: object, arg2: object) -> None: ...

  def tableget(self, arg0: object, arg1: object) -> object: ...

  def toggleBreakOnChange(self, arg0: KahluaTable, arg1: object) -> None: ...

  def toggleBreakOnRead(self, arg0: KahluaTable, arg1: object) -> None: ...

  @overload
  def __init__(self, arg0: Platform, arg1: KahluaTable):
    self.breset: bool

    self.bstep: bool

    self.bstepinto: bool

    self.currentcoroutine: Coroutine

    self.currentfile: str

    self.currentline: int

    self.lastcallframe: int

    self.lastline: int

    self.profileentries: ArrayList[KahluaThread.Entry]

    self.profileentrymap: HashMap[str, KahluaThread.Entry]

  @overload
  def __init__(self, arg0: PrintStream, arg1: Platform, arg2: KahluaTable): ...

  class Entry:

    def __init__(self):
      self.file: str
      self.time: float

  class ProfileEntryComparitor:

    @overload
    def compare(self, arg0: object, arg1: object) -> int: ...

    @overload
    def compare(self, arg0: object, arg1: object) -> int: ...

    @overload
    def compare(self, arg0: KahluaThread.Entry, arg1: KahluaThread.Entry) -> int: ...

    def equals(self, arg0: object) -> bool: ...

    def reversed(self) -> Comparator[T]: ...

    @overload
    def thenComparing(self, arg0: Comparator[T]) -> Comparator[T]: ...

    @overload
    def thenComparing(self, arg0: Function[T, U]) -> Comparator[T]: ...

    @overload
    def thenComparing(self, arg0: Function[T, U], arg1: Comparator[U]) -> Comparator[T]: ...

    def thenComparingDouble(self, arg0: ToDoubleFunction[T]) -> Comparator[T]: ...

    def thenComparingInt(self, arg0: ToIntFunction[T]) -> Comparator[T]: ...

    def thenComparingLong(self, arg0: ToLongFunction[T]) -> Comparator[T]: ...

    @staticmethod
    @overload
    def comparing(arg0: Function[T, U]) -> Comparator[T]: ...

    @staticmethod
    @overload
    def comparing(arg0: Function[T, U], arg1: Comparator[U]) -> Comparator[T]: ...

    @staticmethod
    def comparingDouble(arg0: ToDoubleFunction[T]) -> Comparator[T]: ...

    @staticmethod
    def comparingInt(arg0: ToIntFunction[T]) -> Comparator[T]: ...

    @staticmethod
    def comparingLong(arg0: ToLongFunction[T]) -> Comparator[T]: ...

    @staticmethod
    def naturalOrder() -> Comparator[T]: ...

    @staticmethod
    def nullsFirst(arg0: Comparator[T]) -> Comparator[T]: ...

    @staticmethod
    def nullsLast(arg0: Comparator[T]) -> Comparator[T]: ...

    @staticmethod
    def reverseOrder() -> Comparator[T]: ...

    def __init__(self): ...


class KahluaUtil:

  @staticmethod
  def assertArgNotNull(arg0: object, arg1: int, arg2: str, arg3: str) -> None: ...

  @staticmethod
  def boolEval(arg0: object) -> bool: ...

  @staticmethod
  def fail(arg0: str) -> None: ...

  @staticmethod
  def fromDouble(arg0: object) -> float: ...

  @staticmethod
  def getArg(arg0: LuaCallFrame, arg1: int, arg2: str) -> object: ...

  @staticmethod
  def getClassMetatables(arg0: Platform, arg1: KahluaTable) -> KahluaTable: ...

  @staticmethod
  def getDoubleArg(arg0: LuaCallFrame, arg1: int, arg2: str) -> float: ...

  @staticmethod
  def getNumberArg(arg0: LuaCallFrame, arg1: int, arg2: str) -> Double: ...

  @staticmethod
  def getOptionalArg(arg0: LuaCallFrame, arg1: int) -> object: ...

  @staticmethod
  def getOptionalNumberArg(arg0: LuaCallFrame, arg1: int) -> Double: ...

  @staticmethod
  def getOptionalStringArg(arg0: LuaCallFrame, arg1: int) -> str: ...

  @staticmethod
  def getOrCreateTable(arg0: Platform, arg1: KahluaTable, arg2: str) -> KahluaTable: ...

  @staticmethod
  def getStringArg(arg0: LuaCallFrame, arg1: int, arg2: str) -> str: ...

  @staticmethod
  def getWorkerThread(arg0: Platform, arg1: KahluaTable) -> KahluaThread: ...

  @staticmethod
  def ipow(arg0: int, arg1: int) -> int: ...

  @staticmethod
  def isNegative(arg0: float) -> bool: ...

  @staticmethod
  def len(arg0: KahluaTable, arg1: int, arg2: int) -> int: ...

  @staticmethod
  def loadByteCodeFromResource(arg0: str, arg1: KahluaTable) -> LuaClosure: ...

  @staticmethod
  def luaAssert(arg0: bool, arg1: str) -> None: ...

  @staticmethod
  def numberToString(arg0: Double) -> str: ...

  @staticmethod
  def rawTonumber(arg0: object) -> Double: ...

  @staticmethod
  def rawTostring(arg0: object) -> str: ...

  @staticmethod
  def rawTostring2(arg0: object) -> str: ...

  @staticmethod
  def round(arg0: float) -> float: ...

  @staticmethod
  def setWorkerThread(arg0: KahluaTable, arg1: KahluaThread) -> None: ...

  @staticmethod
  def setupLibrary(arg0: KahluaTable, arg1: KahluaThread, arg2: str) -> None: ...

  @staticmethod
  def toBoolean(arg0: bool) -> Boolean: ...

  @staticmethod
  @overload
  def toDouble(arg0: float) -> Double: ...

  @staticmethod
  @overload
  def toDouble(arg0: int) -> Double: ...

  @staticmethod
  @overload
  def tonumber(arg0: str) -> Double: ...

  @staticmethod
  @overload
  def tonumber(arg0: str, arg1: int) -> Double: ...

  @staticmethod
  def tostring(arg0: object, arg1: KahluaThread) -> str: ...

  @staticmethod
  def type(arg0: object) -> str: ...

  def __init__(self): ...


class LuaCallFrame:

  def clearFromIndex(self, arg0: int) -> None: ...

  def closeUpvalues(self, arg0: int) -> None: ...

  def findUpvalue(self, arg0: int) -> UpValue: ...

  def get(self, arg0: int) -> object: ...

  def getClosure(self) -> LuaClosure: ...

  def getEnvironment(self) -> KahluaTable: ...

  def getFilename(self) -> str: ...

  def getNameOfStack(self, arg0: int) -> str: ...

  def getPlatform(self) -> Platform: ...

  def getThread(self) -> KahluaThread: ...

  def getTop(self) -> int: ...

  def init(self) -> None: ...

  def isJava(self) -> bool: ...

  def isLua(self) -> bool: ...

  def printoutLocalVars(self) -> None: ...

  @overload
  def push(self, arg0: object) -> int: ...

  @overload
  def push(self, arg0: object, arg1: object) -> int: ...

  def pushNil(self) -> int: ...

  def pushVarargs(self, arg0: int, arg1: int) -> None: ...

  def set(self, arg0: int, arg1: object) -> None: ...

  def setLocalVarToStack(self, arg0: str, arg1: int) -> None: ...

  def setPrototypeStacksize(self) -> None: ...

  def setTop(self, arg0: int) -> None: ...

  def stackClear(self, arg0: int, arg1: int) -> None: ...

  def stackCopy(self, arg0: int, arg1: int, arg2: int) -> None: ...

  def toString(self) -> str: ...

  def toString2(self) -> str: ...

  def __init__(self, arg0: Coroutine):
    self.canyield: bool
    self.closure: LuaClosure
    self.coroutine: Coroutine
    self.javafunction: JavaFunction
    self.localbase: int
    self.localsassigned: int
    self.localstacktovarmap: HashMap
    self.localvarnames: ArrayList[str]
    self.localvartostackmap: HashMap
    self.narguments: int
    self.pc: int


class LuaClosure:

  def toString(self) -> str: ...

  def toString2(self, arg0: int) -> str: ...

  def __init__(self, arg0: Prototype, arg1: KahluaTable):
    self.debugname: str
    self.env: KahluaTable
    self.prototype: Prototype
    self.upvalues: list[UpValue]


class Platform:

  def newEnvironment(self) -> KahluaTable: ...

  def newTable(self) -> KahluaTable: ...

  def pow(self, arg0: float, arg1: float) -> float: ...

  def setupEnvironment(self, arg0: KahluaTable) -> None: ...


class Prototype:

  def dump(self, arg0: OutputStream) -> None: ...

  def toString(self) -> str: ...

  @staticmethod
  @overload
  def loadByteCode(arg0: DataInputStream, arg1: KahluaTable) -> LuaClosure: ...

  @staticmethod
  @overload
  def loadByteCode(arg0: InputStream, arg1: KahluaTable) -> LuaClosure: ...

  @staticmethod
  @overload
  def rev(arg0: int) -> int: ...

  @staticmethod
  @overload
  def rev(arg0: int) -> int: ...

  @staticmethod
  def toInt(arg0: int, arg1: bool) -> int: ...

  @staticmethod
  def toLong(arg0: int, arg1: bool) -> int: ...

  @overload
  def __init__(self):
    self.code: list[int]

    self.constants: list[object]

    self.file: str

    self.filename: str

    self.isvararg: bool

    self.lines: list[int]

    self.locvarlines: list[int]

    self.locvars: list[str]

    self.maxstacksize: int

    self.name: str

    self.numparams: int

    self.numupvalues: int

    self.prototypes: list[Prototype]

  @overload
  def __init__(self, arg0: DataInputStream, arg1: bool, arg2: str, arg3: int): ...


class UpValue:

  def close(self) -> None: ...

  def getIndex(self) -> int: ...

  def getValue(self) -> object: ...

  def setValue(self, arg0: object) -> None: ...

  def __init__(self, arg0: Coroutine, arg1: int): ...

