from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.io import InputStream
from java.util import Map

class AudioFileFormat:

  def getByteLength(self) -> int: ...

  def getFormat(self) -> AudioFormat: ...

  def getFrameLength(self) -> int: ...

  def getProperty(self, arg0: str) -> object: ...

  def getType(self) -> AudioFileFormat.Type: ...

  def properties(self) -> Map[str, object]: ...

  def toString(self) -> str: ...

  @overload
  def __init__(self, arg0: AudioFileFormat.Type, arg1: AudioFormat, arg2: int): ...
  @overload
  def __init__(self, arg0: AudioFileFormat.Type, arg1: AudioFormat, arg2: int, arg3: Map[str, object]): ...

  class Type:

    AIFC: AudioFileFormat.Type

    AIFF: AudioFileFormat.Type

    AU: AudioFileFormat.Type

    SND: AudioFileFormat.Type

    WAVE: AudioFileFormat.Type

    def equals(self, arg0: object) -> bool: ...

    def getExtension(self) -> str: ...

    def hashCode(self) -> int: ...

    def toString(self) -> str: ...

    def __init__(self, arg0: str, arg1: str): ...


class AudioFormat:

  def getChannels(self) -> int: ...

  def getEncoding(self) -> AudioFormat.Encoding: ...

  def getFrameRate(self) -> float: ...

  def getFrameSize(self) -> int: ...

  def getProperty(self, arg0: str) -> object: ...

  def getSampleRate(self) -> float: ...

  def getSampleSizeInBits(self) -> int: ...

  def isBigEndian(self) -> bool: ...

  def matches(self, arg0: AudioFormat) -> bool: ...

  def properties(self) -> Map[str, object]: ...

  def toString(self) -> str: ...

  @overload
  def __init__(self, arg0: float, arg1: int, arg2: int, arg3: bool, arg4: bool): ...
  @overload
  def __init__(self, arg0: AudioFormat.Encoding, arg1: float, arg2: int, arg3: int, arg4: int, arg5: float, arg6: bool): ...
  @overload
  def __init__(self, arg0: AudioFormat.Encoding, arg1: float, arg2: int, arg3: int, arg4: int, arg5: float, arg6: bool, arg7: Map[str, object]): ...

  class Encoding:

    ALAW: AudioFormat.Encoding

    PCM_FLOAT: AudioFormat.Encoding

    PCM_SIGNED: AudioFormat.Encoding

    PCM_UNSIGNED: AudioFormat.Encoding

    ULAW: AudioFormat.Encoding

    def equals(self, arg0: object) -> bool: ...

    def hashCode(self) -> int: ...

    def toString(self) -> str: ...

    def __init__(self, arg0: str): ...


class AudioInputStream(InputStream):

  def available(self) -> int: ...

  def close(self) -> None: ...

  def getFormat(self) -> AudioFormat: ...

  def getFrameLength(self) -> int: ...

  def mark(self, arg0: int) -> None: ...

  def markSupported(self) -> bool: ...

  @overload
  def read(self) -> int: ...

  @overload
  def read(self, arg0: list[int]) -> int: ...

  @overload
  def read(self, arg0: list[int], arg1: int, arg2: int) -> int: ...

  def reset(self) -> None: ...

  def skip(self, arg0: int) -> int: ...

  @overload
  def __init__(self, arg0: TargetDataLine): ...
  @overload
  def __init__(self, arg0: InputStream, arg1: AudioFormat, arg2: int): ...

  class TargetDataLineInputStream(InputStream):

    def available(self) -> int: ...

    def close(self) -> None: ...

    @overload
    def read(self) -> int: ...

    @overload
    def read(self, arg0: list[int], arg1: int, arg2: int) -> int: ...


class TargetDataLine:

  def available(self) -> int: ...

  def drain(self) -> None: ...

  def flush(self) -> None: ...

  def getBufferSize(self) -> int: ...

  def getFormat(self) -> AudioFormat: ...

  def getFramePosition(self) -> int: ...

  def getLevel(self) -> float: ...

  def getLongFramePosition(self) -> int: ...

  def getMicrosecondPosition(self) -> int: ...

  def isActive(self) -> bool: ...

  def isRunning(self) -> bool: ...

  @overload
  def open(self, arg0: AudioFormat) -> None: ...

  @overload
  def open(self, arg0: AudioFormat, arg1: int) -> None: ...

  def read(self, arg0: list[int], arg1: int, arg2: int) -> int: ...

  def start(self) -> None: ...

  def stop(self) -> None: ...

