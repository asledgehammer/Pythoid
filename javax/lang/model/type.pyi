from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.lang import Class, Enum
from java.lang.annotation import Annotation
from java.util import List
from javax.lang.model.element import Element

R = TypeVar('R', default=Any)
P = TypeVar('P', default=Any)
A = TypeVar('A', default=Any)

class ArrayType:

  def getComponentType(self) -> TypeMirror: ...


class DeclaredType:

  def asElement(self) -> Element: ...

  def getEnclosingType(self) -> TypeMirror: ...

  def getTypeArguments(self) -> List[TypeMirror]: ...


class ErrorType:

  def asElement(self) -> Element: ...

  def getEnclosingType(self) -> TypeMirror: ...

  def getTypeArguments(self) -> List[TypeMirror]: ...


class ExecutableType:

  def accept(self, arg0: TypeVisitor[R, P], arg1: object) -> object: ...

  def equals(self, arg0: object) -> bool: ...

  def getAnnotation(self, arg0: Class[A]) -> A: ...

  def getAnnotationMirrors(self) -> List[AnnotationMirror]: ...

  def getAnnotationsByType(self, arg0: Class[A]) -> list[Annotation]: ...

  def getKind(self) -> TypeKind: ...

  def getParameterTypes(self) -> List[TypeMirror]: ...

  def getReceiverType(self) -> TypeMirror: ...

  def getReturnType(self) -> TypeMirror: ...

  def getThrownTypes(self) -> List[TypeMirror]: ...

  def getTypeVariables(self) -> List[TypeVariable]: ...

  def hashCode(self) -> int: ...

  def toString(self) -> str: ...


class IntersectionType:

  def accept(self, arg0: TypeVisitor[R, P], arg1: object) -> object: ...

  def equals(self, arg0: object) -> bool: ...

  def getAnnotation(self, arg0: Class[A]) -> A: ...

  def getAnnotationMirrors(self) -> List[AnnotationMirror]: ...

  def getAnnotationsByType(self, arg0: Class[A]) -> list[Annotation]: ...

  def getBounds(self) -> List[TypeMirror]: ...

  def getKind(self) -> TypeKind: ...

  def hashCode(self) -> int: ...

  def toString(self) -> str: ...


class NoType:

  def accept(self, arg0: TypeVisitor[R, P], arg1: object) -> object: ...

  def equals(self, arg0: object) -> bool: ...

  def getAnnotation(self, arg0: Class[A]) -> A: ...

  def getAnnotationMirrors(self) -> List[AnnotationMirror]: ...

  def getAnnotationsByType(self, arg0: Class[A]) -> list[Annotation]: ...

  def getKind(self) -> TypeKind: ...

  def hashCode(self) -> int: ...

  def toString(self) -> str: ...


class NullType: ...


class PrimitiveType:

  def accept(self, arg0: TypeVisitor[R, P], arg1: object) -> object: ...

  def equals(self, arg0: object) -> bool: ...

  def getAnnotation(self, arg0: Class[A]) -> A: ...

  def getAnnotationMirrors(self) -> List[AnnotationMirror]: ...

  def getAnnotationsByType(self, arg0: Class[A]) -> list[Annotation]: ...

  def getKind(self) -> TypeKind: ...

  def hashCode(self) -> int: ...

  def toString(self) -> str: ...


class TypeKind(Enum):

  ARRAY: TypeKind

  BOOLEAN: TypeKind

  BYTE: TypeKind

  CHAR: TypeKind

  DECLARED: TypeKind

  DOUBLE: TypeKind

  ERROR: TypeKind

  EXECUTABLE: TypeKind

  FLOAT: TypeKind

  INT: TypeKind

  INTERSECTION: TypeKind

  LONG: TypeKind

  MODULE: TypeKind

  NONE: TypeKind

  NULL: TypeKind

  OTHER: TypeKind

  PACKAGE: TypeKind

  SHORT: TypeKind

  TYPEVAR: TypeKind

  UNION: TypeKind

  VOID: TypeKind

  WILDCARD: TypeKind

  def isPrimitive(self) -> bool: ...

  @staticmethod
  def valueOf(arg0: str) -> TypeKind: ...

  @staticmethod
  def values() -> list[TypeKind]: ...


class TypeMirror:

  def accept(self, arg0: TypeVisitor[R, P], arg1: object) -> object: ...

  def equals(self, arg0: object) -> bool: ...

  @overload
  def getAnnotation(self, arg0: Class[A]) -> A: ...

  @overload
  def getAnnotation(self, arg0: Class[A]) -> A: ...

  @overload
  def getAnnotationMirrors(self) -> List[AnnotationMirror]: ...

  @overload
  def getAnnotationMirrors(self) -> List[AnnotationMirror]: ...

  @overload
  def getAnnotationsByType(self, arg0: Class[A]) -> list[Annotation]: ...

  @overload
  def getAnnotationsByType(self, arg0: Class[A]) -> list[Annotation]: ...

  def getKind(self) -> TypeKind: ...

  def hashCode(self) -> int: ...

  def toString(self) -> str: ...


class TypeVariable:

  def asElement(self) -> Element: ...

  def getLowerBound(self) -> TypeMirror: ...

  def getUpperBound(self) -> TypeMirror: ...


class TypeVisitor[R, P]:

  @overload
  def visit(self, arg0: TypeMirror) -> object: ...

  @overload
  def visit(self, arg0: TypeMirror, arg1: object) -> object: ...

  def visitArray(self, arg0: ArrayType, arg1: object) -> object: ...

  def visitDeclared(self, arg0: DeclaredType, arg1: object) -> object: ...

  def visitError(self, arg0: ErrorType, arg1: object) -> object: ...

  def visitExecutable(self, arg0: ExecutableType, arg1: object) -> object: ...

  def visitIntersection(self, arg0: IntersectionType, arg1: object) -> object: ...

  def visitNoType(self, arg0: NoType, arg1: object) -> object: ...

  def visitNull(self, arg0: NullType, arg1: object) -> object: ...

  def visitPrimitive(self, arg0: PrimitiveType, arg1: object) -> object: ...

  def visitTypeVariable(self, arg0: TypeVariable, arg1: object) -> object: ...

  def visitUnion(self, arg0: UnionType, arg1: object) -> object: ...

  def visitUnknown(self, arg0: TypeMirror, arg1: object) -> object: ...

  def visitWildcard(self, arg0: WildcardType, arg1: object) -> object: ...


class UnionType:

  def accept(self, arg0: TypeVisitor[R, P], arg1: object) -> object: ...

  def equals(self, arg0: object) -> bool: ...

  def getAlternatives(self) -> List[TypeMirror]: ...

  def getAnnotation(self, arg0: Class[A]) -> A: ...

  def getAnnotationMirrors(self) -> List[AnnotationMirror]: ...

  def getAnnotationsByType(self, arg0: Class[A]) -> list[Annotation]: ...

  def getKind(self) -> TypeKind: ...

  def hashCode(self) -> int: ...

  def toString(self) -> str: ...


class WildcardType:

  def accept(self, arg0: TypeVisitor[R, P], arg1: object) -> object: ...

  def equals(self, arg0: object) -> bool: ...

  def getAnnotation(self, arg0: Class[A]) -> A: ...

  def getAnnotationMirrors(self) -> List[AnnotationMirror]: ...

  def getAnnotationsByType(self, arg0: Class[A]) -> list[Annotation]: ...

  def getExtendsBound(self) -> TypeMirror: ...

  def getKind(self) -> TypeKind: ...

  def getSuperBound(self) -> TypeMirror: ...

  def hashCode(self) -> int: ...

  def toString(self) -> str: ...

