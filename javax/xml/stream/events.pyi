from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.io import Writer
from java.util import Iterator
from javax.xml.namespace import QName, NamespaceContext
from javax.xml.stream import Location

class Attribute:

  def asCharacters(self) -> Characters: ...

  def asEndElement(self) -> EndElement: ...

  def asStartElement(self) -> StartElement: ...

  def getDTDType(self) -> str: ...

  def getEventType(self) -> int: ...

  def getLocation(self) -> Location: ...

  def getName(self) -> QName: ...

  def getSchemaType(self) -> QName: ...

  def getValue(self) -> str: ...

  def isAttribute(self) -> bool: ...

  def isCharacters(self) -> bool: ...

  def isEndDocument(self) -> bool: ...

  def isEndElement(self) -> bool: ...

  def isEntityReference(self) -> bool: ...

  def isNamespace(self) -> bool: ...

  def isProcessingInstruction(self) -> bool: ...

  def isSpecified(self) -> bool: ...

  def isStartDocument(self) -> bool: ...

  def isStartElement(self) -> bool: ...

  def writeAsEncodedUnicode(self, arg0: Writer) -> None: ...


class Characters:

  def asCharacters(self) -> Characters: ...

  def asEndElement(self) -> EndElement: ...

  def asStartElement(self) -> StartElement: ...

  def getData(self) -> str: ...

  def getEventType(self) -> int: ...

  def getLocation(self) -> Location: ...

  def getSchemaType(self) -> QName: ...

  def isAttribute(self) -> bool: ...

  def isCData(self) -> bool: ...

  def isCharacters(self) -> bool: ...

  def isEndDocument(self) -> bool: ...

  def isEndElement(self) -> bool: ...

  def isEntityReference(self) -> bool: ...

  def isIgnorableWhiteSpace(self) -> bool: ...

  def isNamespace(self) -> bool: ...

  def isProcessingInstruction(self) -> bool: ...

  def isStartDocument(self) -> bool: ...

  def isStartElement(self) -> bool: ...

  def isWhiteSpace(self) -> bool: ...

  def writeAsEncodedUnicode(self, arg0: Writer) -> None: ...


class EndElement:

  def asCharacters(self) -> Characters: ...

  def asEndElement(self) -> EndElement: ...

  def asStartElement(self) -> StartElement: ...

  def getEventType(self) -> int: ...

  def getLocation(self) -> Location: ...

  def getName(self) -> QName: ...

  def getNamespaces(self) -> Iterator[Namespace]: ...

  def getSchemaType(self) -> QName: ...

  def isAttribute(self) -> bool: ...

  def isCharacters(self) -> bool: ...

  def isEndDocument(self) -> bool: ...

  def isEndElement(self) -> bool: ...

  def isEntityReference(self) -> bool: ...

  def isNamespace(self) -> bool: ...

  def isProcessingInstruction(self) -> bool: ...

  def isStartDocument(self) -> bool: ...

  def isStartElement(self) -> bool: ...

  def writeAsEncodedUnicode(self, arg0: Writer) -> None: ...


class StartElement:

  def asCharacters(self) -> Characters: ...

  def asEndElement(self) -> EndElement: ...

  def asStartElement(self) -> StartElement: ...

  def getAttributeByName(self, arg0: QName) -> Attribute: ...

  def getAttributes(self) -> Iterator[Attribute]: ...

  def getEventType(self) -> int: ...

  def getLocation(self) -> Location: ...

  def getName(self) -> QName: ...

  def getNamespaceContext(self) -> NamespaceContext: ...

  def getNamespaceURI(self, arg0: str) -> str: ...

  def getNamespaces(self) -> Iterator[Namespace]: ...

  def getSchemaType(self) -> QName: ...

  def isAttribute(self) -> bool: ...

  def isCharacters(self) -> bool: ...

  def isEndDocument(self) -> bool: ...

  def isEndElement(self) -> bool: ...

  def isEntityReference(self) -> bool: ...

  def isNamespace(self) -> bool: ...

  def isProcessingInstruction(self) -> bool: ...

  def isStartDocument(self) -> bool: ...

  def isStartElement(self) -> bool: ...

  def writeAsEncodedUnicode(self, arg0: Writer) -> None: ...


class XMLEvent:

  ATTRIBUTE: int

  CDATA: int

  CHARACTERS: int

  COMMENT: int

  DTD: int

  END_DOCUMENT: int

  END_ELEMENT: int

  ENTITY_DECLARATION: int

  ENTITY_REFERENCE: int

  NAMESPACE: int

  NOTATION_DECLARATION: int

  PROCESSING_INSTRUCTION: int

  SPACE: int

  START_DOCUMENT: int

  START_ELEMENT: int

  def asCharacters(self) -> Characters: ...

  def asEndElement(self) -> EndElement: ...

  def asStartElement(self) -> StartElement: ...

  def getEventType(self) -> int: ...

  def getLocation(self) -> Location: ...

  def getSchemaType(self) -> QName: ...

  def isAttribute(self) -> bool: ...

  def isCharacters(self) -> bool: ...

  def isEndDocument(self) -> bool: ...

  def isEndElement(self) -> bool: ...

  def isEntityReference(self) -> bool: ...

  def isNamespace(self) -> bool: ...

  def isProcessingInstruction(self) -> bool: ...

  def isStartDocument(self) -> bool: ...

  def isStartElement(self) -> bool: ...

  def writeAsEncodedUnicode(self, arg0: Writer) -> None: ...

