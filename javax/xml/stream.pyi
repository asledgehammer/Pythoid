from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.util.function import Consumer
from javax.xml.namespace import NamespaceContext, QName
from javax.xml.stream.events import XMLEvent

class Location:

  def getCharacterOffset(self) -> int: ...

  def getColumnNumber(self) -> int: ...

  def getLineNumber(self) -> int: ...

  def getPublicId(self) -> str: ...

  def getSystemId(self) -> str: ...


class XMLEventReader:

  def close(self) -> None: ...

  def forEachRemaining(self, arg0: Consumer[E]) -> None: ...

  def getElementText(self) -> str: ...

  def getProperty(self, arg0: str) -> object: ...

  @overload
  def hasNext(self) -> bool: ...

  @overload
  def hasNext(self) -> bool: ...

  def next(self) -> object: ...

  def nextEvent(self) -> XMLEvent: ...

  def nextTag(self) -> XMLEvent: ...

  def peek(self) -> XMLEvent: ...

  def remove(self) -> None: ...


class XMLEventWriter:

  @overload
  def add(self, arg0: XMLEventReader) -> None: ...

  @overload
  def add(self, arg0: XMLEvent) -> None: ...

  @overload
  def add(self, arg0: XMLEvent) -> None: ...

  def close(self) -> None: ...

  def flush(self) -> None: ...

  def getNamespaceContext(self) -> NamespaceContext: ...

  def getPrefix(self, arg0: str) -> str: ...

  def setDefaultNamespace(self, arg0: str) -> None: ...

  def setNamespaceContext(self, arg0: NamespaceContext) -> None: ...

  def setPrefix(self, arg0: str, arg1: str) -> None: ...


class XMLStreamReader:

  ATTRIBUTE: int

  CDATA: int

  CHARACTERS: int

  COMMENT: int

  DTD: int

  END_DOCUMENT: int

  END_ELEMENT: int

  ENTITY_DECLARATION: int

  ENTITY_REFERENCE: int

  NAMESPACE: int

  NOTATION_DECLARATION: int

  PROCESSING_INSTRUCTION: int

  SPACE: int

  START_DOCUMENT: int

  START_ELEMENT: int

  def close(self) -> None: ...

  def getAttributeCount(self) -> int: ...

  def getAttributeLocalName(self, arg0: int) -> str: ...

  def getAttributeName(self, arg0: int) -> QName: ...

  def getAttributeNamespace(self, arg0: int) -> str: ...

  def getAttributePrefix(self, arg0: int) -> str: ...

  def getAttributeType(self, arg0: int) -> str: ...

  @overload
  def getAttributeValue(self, arg0: int) -> str: ...

  @overload
  def getAttributeValue(self, arg0: str, arg1: str) -> str: ...

  def getCharacterEncodingScheme(self) -> str: ...

  def getElementText(self) -> str: ...

  def getEncoding(self) -> str: ...

  def getEventType(self) -> int: ...

  def getLocalName(self) -> str: ...

  def getLocation(self) -> Location: ...

  def getName(self) -> QName: ...

  def getNamespaceContext(self) -> NamespaceContext: ...

  def getNamespaceCount(self) -> int: ...

  def getNamespacePrefix(self, arg0: int) -> str: ...

  @overload
  def getNamespaceURI(self) -> str: ...

  @overload
  def getNamespaceURI(self, arg0: int) -> str: ...

  @overload
  def getNamespaceURI(self, arg0: str) -> str: ...

  def getPIData(self) -> str: ...

  def getPITarget(self) -> str: ...

  def getPrefix(self) -> str: ...

  def getProperty(self, arg0: str) -> object: ...

  def getText(self) -> str: ...

  @overload
  def getTextCharacters(self) -> list[str]: ...

  @overload
  def getTextCharacters(self, arg0: int, arg1: list[str], arg2: int, arg3: int) -> int: ...

  def getTextLength(self) -> int: ...

  def getTextStart(self) -> int: ...

  def getVersion(self) -> str: ...

  def hasName(self) -> bool: ...

  def hasNext(self) -> bool: ...

  def hasText(self) -> bool: ...

  def isAttributeSpecified(self, arg0: int) -> bool: ...

  def isCharacters(self) -> bool: ...

  def isEndElement(self) -> bool: ...

  def isStandalone(self) -> bool: ...

  def isStartElement(self) -> bool: ...

  def isWhiteSpace(self) -> bool: ...

  def next(self) -> int: ...

  def nextTag(self) -> int: ...

  def require(self, arg0: int, arg1: str, arg2: str) -> None: ...

  def standaloneSet(self) -> bool: ...


class XMLStreamWriter:

  def close(self) -> None: ...

  def flush(self) -> None: ...

  def getNamespaceContext(self) -> NamespaceContext: ...

  def getPrefix(self, arg0: str) -> str: ...

  def getProperty(self, arg0: str) -> object: ...

  def setDefaultNamespace(self, arg0: str) -> None: ...

  def setNamespaceContext(self, arg0: NamespaceContext) -> None: ...

  def setPrefix(self, arg0: str, arg1: str) -> None: ...

  @overload
  def writeAttribute(self, arg0: str, arg1: str) -> None: ...

  @overload
  def writeAttribute(self, arg0: str, arg1: str, arg2: str) -> None: ...

  @overload
  def writeAttribute(self, arg0: str, arg1: str, arg2: str, arg3: str) -> None: ...

  def writeCData(self, arg0: str) -> None: ...

  @overload
  def writeCharacters(self, arg0: str) -> None: ...

  @overload
  def writeCharacters(self, arg0: list[str], arg1: int, arg2: int) -> None: ...

  def writeComment(self, arg0: str) -> None: ...

  def writeDTD(self, arg0: str) -> None: ...

  def writeDefaultNamespace(self, arg0: str) -> None: ...

  @overload
  def writeEmptyElement(self, arg0: str) -> None: ...

  @overload
  def writeEmptyElement(self, arg0: str, arg1: str) -> None: ...

  @overload
  def writeEmptyElement(self, arg0: str, arg1: str, arg2: str) -> None: ...

  def writeEndDocument(self) -> None: ...

  def writeEndElement(self) -> None: ...

  def writeEntityRef(self, arg0: str) -> None: ...

  def writeNamespace(self, arg0: str, arg1: str) -> None: ...

  @overload
  def writeProcessingInstruction(self, arg0: str) -> None: ...

  @overload
  def writeProcessingInstruction(self, arg0: str, arg1: str) -> None: ...

  @overload
  def writeStartDocument(self) -> None: ...

  @overload
  def writeStartDocument(self, arg0: str) -> None: ...

  @overload
  def writeStartDocument(self, arg0: str, arg1: str) -> None: ...

  @overload
  def writeStartElement(self, arg0: str) -> None: ...

  @overload
  def writeStartElement(self, arg0: str, arg1: str) -> None: ...

  @overload
  def writeStartElement(self, arg0: str, arg1: str, arg2: str) -> None: ...

