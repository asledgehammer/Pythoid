from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.awt import Insets, Image, LayoutManager, Rectangle, Point, Component, Graphics, Container, Font, FontMetrics, Dimension, Color, Cursor, Frame, GraphicsConfiguration, ComponentOrientation, Window, AWTKeyStroke
from java.awt.datatransfer import DataFlavor, Clipboard, Transferable
from java.awt.dnd import DragGestureRecognizer, DragSourceDropEvent, DragSourceDragEvent, DragSourceEvent, DragGestureEvent, DropTargetDragEvent, DropTargetEvent, DropTargetDropEvent, DropTarget, DropTargetListener
from java.awt.event import ActionListener, ItemListener, ActionEvent, ItemEvent, MouseEvent, FocusListener, FocusEvent, ContainerEvent, KeyEvent, WindowAdapter, WindowEvent, InputEvent
from java.beans import PropertyChangeListener, PropertyChangeEvent, VetoableChangeListener
from java.lang import Number, Class, Integer, Character
from java.lang.ref import WeakReference
from java.util import Enumeration, EventListener, Set, Locale
from java.util.concurrent import Delayed, TimeUnit
from javax.accessibility import AccessibleAction, AccessibleIcon, AccessibleKeyBinding, AccessibleRelationSet, AccessibleStateSet, AccessibleText, AccessibleValue, AccessibleContext, AccessibleRole, Accessible, AccessibleComponent, AccessibleSelection
from javax.swing.border import Border
from javax.swing.event import ChangeListener, ChangeEvent, AncestorListener, MenuListener, MenuDragMouseListener, MenuKeyListener, MenuDragMouseEvent, MenuKeyEvent, PopupMenuListener
from javax.swing.plaf import ButtonUI, ComponentUI, MenuBarUI, MenuItemUI, PanelUI, PopupMenuUI, RootPaneUI, SeparatorUI, ToolTipUI
from javax.swing.text import AttributeSet
from sun.swing import UIAction

T = TypeVar('T', default=Any)
U = TypeVar('U', default=Any)

class AbstractButton(JComponent):

  BORDER_PAINTED_CHANGED_PROPERTY: str

  BOTTOM: int

  CENTER: int

  CONTENT_AREA_FILLED_CHANGED_PROPERTY: str

  DISABLED_ICON_CHANGED_PROPERTY: str

  DISABLED_SELECTED_ICON_CHANGED_PROPERTY: str

  EAST: int

  FOCUS_PAINTED_CHANGED_PROPERTY: str

  HORIZONTAL: int

  HORIZONTAL_ALIGNMENT_CHANGED_PROPERTY: str

  HORIZONTAL_TEXT_POSITION_CHANGED_PROPERTY: str

  ICON_CHANGED_PROPERTY: str

  LEADING: int

  LEFT: int

  MARGIN_CHANGED_PROPERTY: str

  MNEMONIC_CHANGED_PROPERTY: str

  MODEL_CHANGED_PROPERTY: str

  NEXT: int

  NORTH: int

  NORTH_EAST: int

  NORTH_WEST: int

  PRESSED_ICON_CHANGED_PROPERTY: str

  PREVIOUS: int

  RIGHT: int

  ROLLOVER_ENABLED_CHANGED_PROPERTY: str

  ROLLOVER_ICON_CHANGED_PROPERTY: str

  ROLLOVER_SELECTED_ICON_CHANGED_PROPERTY: str

  SELECTED_ICON_CHANGED_PROPERTY: str

  SOUTH: int

  SOUTH_EAST: int

  SOUTH_WEST: int

  TEXT_CHANGED_PROPERTY: str

  TOP: int

  TRAILING: int

  VERTICAL: int

  VERTICAL_ALIGNMENT_CHANGED_PROPERTY: str

  VERTICAL_TEXT_POSITION_CHANGED_PROPERTY: str

  WEST: int

  def addActionListener(self, arg0: ActionListener) -> None: ...

  def addChangeListener(self, arg0: ChangeListener) -> None: ...

  @overload
  def addItemListener(self, arg0: ItemListener) -> None: ...

  @overload
  def addItemListener(self, arg0: ItemListener) -> None: ...

  @overload
  def doClick(self) -> None: ...

  @overload
  def doClick(self, arg0: int) -> None: ...

  def getAction(self) -> Action: ...

  def getActionCommand(self) -> str: ...

  def getActionListeners(self) -> list[ActionListener]: ...

  def getChangeListeners(self) -> list[ChangeListener]: ...

  def getDisabledIcon(self) -> Icon: ...

  def getDisabledSelectedIcon(self) -> Icon: ...

  def getDisplayedMnemonicIndex(self) -> int: ...

  def getHideActionText(self) -> bool: ...

  def getHorizontalAlignment(self) -> int: ...

  def getHorizontalTextPosition(self) -> int: ...

  def getIcon(self) -> Icon: ...

  def getIconTextGap(self) -> int: ...

  def getItemListeners(self) -> list[ItemListener]: ...

  def getLabel(self) -> str: ...

  def getMargin(self) -> Insets: ...

  def getMnemonic(self) -> int: ...

  def getModel(self) -> ButtonModel: ...

  def getMultiClickThreshhold(self) -> int: ...

  def getPressedIcon(self) -> Icon: ...

  def getRolloverIcon(self) -> Icon: ...

  def getRolloverSelectedIcon(self) -> Icon: ...

  def getSelectedIcon(self) -> Icon: ...

  @overload
  def getSelectedObjects(self) -> list[object]: ...

  @overload
  def getSelectedObjects(self) -> list[object]: ...

  def getText(self) -> str: ...

  @overload
  def getUI(self) -> ButtonUI: ...

  @overload
  def getUI(self) -> ComponentUI: ...

  def getVerticalAlignment(self) -> int: ...

  def getVerticalTextPosition(self) -> int: ...

  def imageUpdate(self, arg0: Image, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int) -> bool: ...

  def isBorderPainted(self) -> bool: ...

  def isContentAreaFilled(self) -> bool: ...

  def isFocusPainted(self) -> bool: ...

  def isRolloverEnabled(self) -> bool: ...

  def isSelected(self) -> bool: ...

  def removeActionListener(self, arg0: ActionListener) -> None: ...

  def removeChangeListener(self, arg0: ChangeListener) -> None: ...

  @overload
  def removeItemListener(self, arg0: ItemListener) -> None: ...

  @overload
  def removeItemListener(self, arg0: ItemListener) -> None: ...

  def removeNotify(self) -> None: ...

  def setAction(self, arg0: Action) -> None: ...

  def setActionCommand(self, arg0: str) -> None: ...

  def setBorderPainted(self, arg0: bool) -> None: ...

  def setContentAreaFilled(self, arg0: bool) -> None: ...

  def setDisabledIcon(self, arg0: Icon) -> None: ...

  def setDisabledSelectedIcon(self, arg0: Icon) -> None: ...

  def setDisplayedMnemonicIndex(self, arg0: int) -> None: ...

  def setEnabled(self, arg0: bool) -> None: ...

  def setFocusPainted(self, arg0: bool) -> None: ...

  def setHideActionText(self, arg0: bool) -> None: ...

  def setHorizontalAlignment(self, arg0: int) -> None: ...

  def setHorizontalTextPosition(self, arg0: int) -> None: ...

  def setIcon(self, arg0: Icon) -> None: ...

  def setIconTextGap(self, arg0: int) -> None: ...

  def setLabel(self, arg0: str) -> None: ...

  def setLayout(self, arg0: LayoutManager) -> None: ...

  def setMargin(self, arg0: Insets) -> None: ...

  @overload
  def setMnemonic(self, arg0: str) -> None: ...

  @overload
  def setMnemonic(self, arg0: int) -> None: ...

  def setModel(self, arg0: ButtonModel) -> None: ...

  def setMultiClickThreshhold(self, arg0: int) -> None: ...

  def setPressedIcon(self, arg0: Icon) -> None: ...

  def setRolloverEnabled(self, arg0: bool) -> None: ...

  def setRolloverIcon(self, arg0: Icon) -> None: ...

  def setRolloverSelectedIcon(self, arg0: Icon) -> None: ...

  def setSelected(self, arg0: bool) -> None: ...

  def setSelectedIcon(self, arg0: Icon) -> None: ...

  def setText(self, arg0: str) -> None: ...

  def setUI(self, arg0: ButtonUI) -> None: ...

  def setVerticalAlignment(self, arg0: int) -> None: ...

  def setVerticalTextPosition(self, arg0: int) -> None: ...

  def updateUI(self) -> None: ...

  class ButtonActionPropertyChangeListener(ActionPropertyChangeListener): ...

  class Handler:

    @overload
    def actionPerformed(self, arg0: ActionEvent) -> None: ...

    @overload
    def actionPerformed(self, arg0: ActionEvent) -> None: ...

    @overload
    def itemStateChanged(self, arg0: ItemEvent) -> None: ...

    @overload
    def itemStateChanged(self, arg0: ItemEvent) -> None: ...

    @overload
    def stateChanged(self, arg0: ChangeEvent) -> None: ...

    @overload
    def stateChanged(self, arg0: ChangeEvent) -> None: ...

  class AccessibleAbstractButton(JComponent.AccessibleJComponent):

    CHARACTER: int

    CLICK: str

    DECREMENT: str

    INCREMENT: str

    SENTENCE: int

    TOGGLE_EXPAND: str

    TOGGLE_POPUP: str

    WORD: int

    @overload
    def doAccessibleAction(self, arg0: int) -> bool: ...

    @overload
    def doAccessibleAction(self, arg0: int) -> bool: ...

    def getAccessibleAction(self) -> AccessibleAction: ...

    @overload
    def getAccessibleActionCount(self) -> int: ...

    @overload
    def getAccessibleActionCount(self) -> int: ...

    @overload
    def getAccessibleActionDescription(self, arg0: int) -> str: ...

    @overload
    def getAccessibleActionDescription(self, arg0: int) -> str: ...

    def getAccessibleIcon(self) -> list[AccessibleIcon]: ...

    @overload
    def getAccessibleKeyBinding(self) -> AccessibleKeyBinding: ...

    @overload
    def getAccessibleKeyBinding(self) -> AccessibleKeyBinding: ...

    def getAccessibleName(self) -> str: ...

    def getAccessibleRelationSet(self) -> AccessibleRelationSet: ...

    def getAccessibleStateSet(self) -> AccessibleStateSet: ...

    def getAccessibleText(self) -> AccessibleText: ...

    def getAccessibleValue(self) -> AccessibleValue: ...

    @overload
    def getAfterIndex(self, arg0: int, arg1: int) -> str: ...

    @overload
    def getAfterIndex(self, arg0: int, arg1: int) -> str: ...

    @overload
    def getAtIndex(self, arg0: int, arg1: int) -> str: ...

    @overload
    def getAtIndex(self, arg0: int, arg1: int) -> str: ...

    @overload
    def getBeforeIndex(self, arg0: int, arg1: int) -> str: ...

    @overload
    def getBeforeIndex(self, arg0: int, arg1: int) -> str: ...

    @overload
    def getCaretPosition(self) -> int: ...

    @overload
    def getCaretPosition(self) -> int: ...

    @overload
    def getCharCount(self) -> int: ...

    @overload
    def getCharCount(self) -> int: ...

    @overload
    def getCharacterAttribute(self, arg0: int) -> AttributeSet: ...

    @overload
    def getCharacterAttribute(self, arg0: int) -> AttributeSet: ...

    @overload
    def getCharacterBounds(self, arg0: int) -> Rectangle: ...

    @overload
    def getCharacterBounds(self, arg0: int) -> Rectangle: ...

    @overload
    def getCurrentAccessibleValue(self) -> Number: ...

    @overload
    def getCurrentAccessibleValue(self) -> Number: ...

    @overload
    def getIndexAtPoint(self, arg0: Point) -> int: ...

    @overload
    def getIndexAtPoint(self, arg0: Point) -> int: ...

    @overload
    def getMaximumAccessibleValue(self) -> Number: ...

    @overload
    def getMaximumAccessibleValue(self) -> Number: ...

    @overload
    def getMinimumAccessibleValue(self) -> Number: ...

    @overload
    def getMinimumAccessibleValue(self) -> Number: ...

    @overload
    def getSelectedText(self) -> str: ...

    @overload
    def getSelectedText(self) -> str: ...

    @overload
    def getSelectionEnd(self) -> int: ...

    @overload
    def getSelectionEnd(self) -> int: ...

    @overload
    def getSelectionStart(self) -> int: ...

    @overload
    def getSelectionStart(self) -> int: ...

    @overload
    def getTitledBorderText(self) -> str: ...

    @overload
    def getTitledBorderText(self) -> str: ...

    @overload
    def getToolTipText(self) -> str: ...

    @overload
    def getToolTipText(self) -> str: ...

    @overload
    def setCurrentAccessibleValue(self, arg0: Number) -> bool: ...

    @overload
    def setCurrentAccessibleValue(self, arg0: Number) -> bool: ...

    class ButtonKeyBinding:

      @overload
      def getAccessibleKeyBinding(self, arg0: int) -> object: ...

      @overload
      def getAccessibleKeyBinding(self, arg0: int) -> object: ...

      @overload
      def getAccessibleKeyBindingCount(self) -> int: ...

      @overload
      def getAccessibleKeyBindingCount(self) -> int: ...

  class ButtonChangeListener:

    @overload
    def stateChanged(self, arg0: ChangeEvent) -> None: ...

    @overload
    def stateChanged(self, arg0: ChangeEvent) -> None: ...


class Action:

  ACCELERATOR_KEY: str

  ACTION_COMMAND_KEY: str

  DEFAULT: str

  DISPLAYED_MNEMONIC_INDEX_KEY: str

  LARGE_ICON_KEY: str

  LONG_DESCRIPTION: str

  MNEMONIC_KEY: str

  NAME: str

  SELECTED_KEY: str

  SHORT_DESCRIPTION: str

  SMALL_ICON: str

  def accept(self, arg0: object) -> bool: ...

  def actionPerformed(self, arg0: ActionEvent) -> None: ...

  def addPropertyChangeListener(self, arg0: PropertyChangeListener) -> None: ...

  def getValue(self, arg0: str) -> object: ...

  def isEnabled(self) -> bool: ...

  def putValue(self, arg0: str, arg1: object) -> None: ...

  def removePropertyChangeListener(self, arg0: PropertyChangeListener) -> None: ...

  def setEnabled(self, arg0: bool) -> None: ...


class ActionMap:

  def allKeys(self) -> list[object]: ...

  def clear(self) -> None: ...

  def get(self, arg0: object) -> Action: ...

  def getParent(self) -> ActionMap: ...

  def keys(self) -> list[object]: ...

  def put(self, arg0: object, arg1: Action) -> None: ...

  def remove(self, arg0: object) -> None: ...

  def setParent(self, arg0: ActionMap) -> None: ...

  def size(self) -> int: ...

  def __init__(self): ...


class ActionPropertyChangeListener[T]:

  def getAction(self) -> Action: ...

  def getTarget(self) -> T: ...

  @overload
  def propertyChange(self, arg0: PropertyChangeEvent) -> None: ...

  @overload
  def propertyChange(self, arg0: PropertyChangeEvent) -> None: ...

  def __init__(self, arg0: T, arg1: Action): ...

  class OwnedWeakReference[U](WeakReference):

    def getOwner(self) -> ActionPropertyChangeListener[Any]: ...


class ArrayTable:

  def clear(self) -> None: ...

  def clone(self) -> object: ...

  def containsKey(self, arg0: object) -> bool: ...

  def get(self, arg0: object) -> object: ...

  def getKeys(self, arg0: list[object]) -> list[object]: ...

  def put(self, arg0: object, arg1: object) -> None: ...

  def remove(self, arg0: object) -> object: ...

  def size(self) -> int: ...


class ButtonGroup:

  def add(self, arg0: AbstractButton) -> None: ...

  def clearSelection(self) -> None: ...

  def getButtonCount(self) -> int: ...

  def getElements(self) -> Enumeration[AbstractButton]: ...

  def getSelection(self) -> ButtonModel: ...

  def isSelected(self, arg0: ButtonModel) -> bool: ...

  def remove(self, arg0: AbstractButton) -> None: ...

  def setSelected(self, arg0: ButtonModel, arg1: bool) -> None: ...

  def __init__(self): ...


class ButtonModel:

  def addActionListener(self, arg0: ActionListener) -> None: ...

  def addChangeListener(self, arg0: ChangeListener) -> None: ...

  @overload
  def addItemListener(self, arg0: ItemListener) -> None: ...

  @overload
  def addItemListener(self, arg0: ItemListener) -> None: ...

  def getActionCommand(self) -> str: ...

  def getGroup(self) -> ButtonGroup: ...

  def getMnemonic(self) -> int: ...

  def getSelectedObjects(self) -> list[object]: ...

  def isArmed(self) -> bool: ...

  def isEnabled(self) -> bool: ...

  def isPressed(self) -> bool: ...

  def isRollover(self) -> bool: ...

  def isSelected(self) -> bool: ...

  def removeActionListener(self, arg0: ActionListener) -> None: ...

  def removeChangeListener(self, arg0: ChangeListener) -> None: ...

  @overload
  def removeItemListener(self, arg0: ItemListener) -> None: ...

  @overload
  def removeItemListener(self, arg0: ItemListener) -> None: ...

  def setActionCommand(self, arg0: str) -> None: ...

  def setArmed(self, arg0: bool) -> None: ...

  def setEnabled(self, arg0: bool) -> None: ...

  def setGroup(self, arg0: ButtonGroup) -> None: ...

  def setMnemonic(self, arg0: int) -> None: ...

  def setPressed(self, arg0: bool) -> None: ...

  def setRollover(self, arg0: bool) -> None: ...

  def setSelected(self, arg0: bool) -> None: ...


class ComponentInputMap(InputMap):

  def clear(self) -> None: ...

  def getComponent(self) -> JComponent: ...

  def put(self, arg0: KeyStroke, arg1: object) -> None: ...

  def remove(self, arg0: KeyStroke) -> None: ...

  def setParent(self, arg0: InputMap) -> None: ...

  def __init__(self, arg0: JComponent): ...


class Icon:

  def getIconHeight(self) -> int: ...

  def getIconWidth(self) -> int: ...

  def paintIcon(self, arg0: Component, arg1: Graphics, arg2: int, arg3: int) -> None: ...


class InputMap:

  def allKeys(self) -> list[KeyStroke]: ...

  def clear(self) -> None: ...

  def get(self, arg0: KeyStroke) -> object: ...

  def getParent(self) -> InputMap: ...

  def keys(self) -> list[KeyStroke]: ...

  def put(self, arg0: KeyStroke, arg1: object) -> None: ...

  def remove(self, arg0: KeyStroke) -> None: ...

  def setParent(self, arg0: InputMap) -> None: ...

  def size(self) -> int: ...

  def __init__(self): ...


class InputVerifier:

  @overload
  def shouldYieldFocus(self, arg0: JComponent) -> bool: ...

  @overload
  def shouldYieldFocus(self, arg0: JComponent, arg1: JComponent) -> bool: ...

  def verify(self, arg0: JComponent) -> bool: ...

  def verifyTarget(self, arg0: JComponent) -> bool: ...


class JButton(AbstractButton):

  @overload
  def getAccessibleContext(self) -> AccessibleContext: ...

  @overload
  def getAccessibleContext(self) -> AccessibleContext: ...

  def getUIClassID(self) -> str: ...

  def isDefaultButton(self) -> bool: ...

  def isDefaultCapable(self) -> bool: ...

  def removeNotify(self) -> None: ...

  def setDefaultCapable(self, arg0: bool) -> None: ...

  def updateUI(self) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: str): ...
  @overload
  def __init__(self, arg0: Action): ...
  @overload
  def __init__(self, arg0: Icon): ...
  @overload
  def __init__(self, arg0: str, arg1: Icon): ...

  class AccessibleJButton(AbstractButton.AccessibleAbstractButton):

    def getAccessibleRole(self) -> AccessibleRole: ...


class JComponent(Container):

  TOOL_TIP_TEXT_KEY: str

  UNDEFINED_CONDITION: int

  WHEN_ANCESTOR_OF_FOCUSED_COMPONENT: int

  WHEN_FOCUSED: int

  WHEN_IN_FOCUSED_WINDOW: int

  def addAncestorListener(self, arg0: AncestorListener) -> None: ...

  def addNotify(self) -> None: ...

  def addVetoableChangeListener(self, arg0: VetoableChangeListener) -> None: ...

  def computeVisibleRect(self, arg0: Rectangle) -> None: ...

  def contains(self, arg0: int, arg1: int) -> bool: ...

  def createToolTip(self) -> JToolTip: ...

  def disable(self) -> None: ...

  def enable(self) -> None: ...

  @overload
  def firePropertyChange(self, arg0: str, arg1: bool, arg2: bool) -> None: ...

  @overload
  def firePropertyChange(self, arg0: str, arg1: str, arg2: str) -> None: ...

  @overload
  def firePropertyChange(self, arg0: str, arg1: int, arg2: int) -> None: ...

  def getActionForKeyStroke(self, arg0: KeyStroke) -> ActionListener: ...

  def getActionMap(self) -> ActionMap: ...

  def getAlignmentX(self) -> float: ...

  def getAlignmentY(self) -> float: ...

  def getAncestorListeners(self) -> list[AncestorListener]: ...

  def getAutoscrolls(self) -> bool: ...

  def getBaseline(self, arg0: int, arg1: int) -> int: ...

  def getBaselineResizeBehavior(self) -> Component.BaselineResizeBehavior: ...

  def getBorder(self) -> Border: ...

  def getBounds(self, arg0: Rectangle) -> Rectangle: ...

  def getClientProperty(self, arg0: object) -> object: ...

  def getComponentPopupMenu(self) -> JPopupMenu: ...

  def getConditionForKeyStroke(self, arg0: KeyStroke) -> int: ...

  def getDebugGraphicsOptions(self) -> int: ...

  def getFontMetrics(self, arg0: Font) -> FontMetrics: ...

  def getGraphics(self) -> Graphics: ...

  def getHeight(self) -> int: ...

  def getInheritsPopupMenu(self) -> bool: ...

  @overload
  def getInputMap(self) -> InputMap: ...

  @overload
  def getInputMap(self, arg0: int) -> InputMap: ...

  def getInputVerifier(self) -> InputVerifier: ...

  @overload
  def getInsets(self) -> Insets: ...

  @overload
  def getInsets(self, arg0: Insets) -> Insets: ...

  def getListeners(self, arg0: Class[T]) -> list[EventListener]: ...

  def getLocation(self, arg0: Point) -> Point: ...

  def getMaximumSize(self) -> Dimension: ...

  def getMinimumSize(self) -> Dimension: ...

  def getNextFocusableComponent(self) -> Component: ...

  def getPopupLocation(self, arg0: MouseEvent) -> Point: ...

  def getPreferredSize(self) -> Dimension: ...

  def getRegisteredKeyStrokes(self) -> list[KeyStroke]: ...

  def getRootPane(self) -> JRootPane: ...

  def getSize(self, arg0: Dimension) -> Dimension: ...

  def getToolTipLocation(self, arg0: MouseEvent) -> Point: ...

  @overload
  def getToolTipText(self) -> str: ...

  @overload
  def getToolTipText(self, arg0: MouseEvent) -> str: ...

  def getTopLevelAncestor(self) -> Container: ...

  @overload
  def getTransferHandler(self) -> TransferHandler: ...

  @overload
  def getTransferHandler(self) -> TransferHandler: ...

  def getUI(self) -> ComponentUI: ...

  def getUIClassID(self) -> str: ...

  def getVerifyInputWhenFocusTarget(self) -> bool: ...

  def getVetoableChangeListeners(self) -> list[VetoableChangeListener]: ...

  def getVisibleRect(self) -> Rectangle: ...

  def getWidth(self) -> int: ...

  def getX(self) -> int: ...

  def getY(self) -> int: ...

  def grabFocus(self) -> None: ...

  def hide(self) -> None: ...

  def isDoubleBuffered(self) -> bool: ...

  def isManagingFocus(self) -> bool: ...

  def isOpaque(self) -> bool: ...

  def isOptimizedDrawingEnabled(self) -> bool: ...

  def isPaintingForPrint(self) -> bool: ...

  def isPaintingTile(self) -> bool: ...

  def isRequestFocusEnabled(self) -> bool: ...

  def isValidateRoot(self) -> bool: ...

  def paint(self, arg0: Graphics) -> None: ...

  @overload
  def paintImmediately(self, arg0: Rectangle) -> None: ...

  @overload
  def paintImmediately(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...

  def print(self, arg0: Graphics) -> None: ...

  def printAll(self, arg0: Graphics) -> None: ...

  def putClientProperty(self, arg0: object, arg1: object) -> None: ...

  @overload
  def registerKeyboardAction(self, arg0: ActionListener, arg1: KeyStroke, arg2: int) -> None: ...

  @overload
  def registerKeyboardAction(self, arg0: ActionListener, arg1: str, arg2: KeyStroke, arg3: int) -> None: ...

  def removeAncestorListener(self, arg0: AncestorListener) -> None: ...

  def removeNotify(self) -> None: ...

  def removeVetoableChangeListener(self, arg0: VetoableChangeListener) -> None: ...

  @overload
  def repaint(self, arg0: Rectangle) -> None: ...

  @overload
  def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int) -> None: ...

  def requestDefaultFocus(self) -> bool: ...

  @overload
  def requestFocus(self) -> None: ...

  @overload
  def requestFocus(self, arg0: bool) -> bool: ...

  def requestFocusInWindow(self) -> bool: ...

  def resetKeyboardActions(self) -> None: ...

  def reshape(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...

  def revalidate(self) -> None: ...

  def scrollRectToVisible(self, arg0: Rectangle) -> None: ...

  def setActionMap(self, arg0: ActionMap) -> None: ...

  def setAlignmentX(self, arg0: float) -> None: ...

  def setAlignmentY(self, arg0: float) -> None: ...

  def setAutoscrolls(self, arg0: bool) -> None: ...

  def setBackground(self, arg0: Color) -> None: ...

  def setBorder(self, arg0: Border) -> None: ...

  def setComponentPopupMenu(self, arg0: JPopupMenu) -> None: ...

  def setDebugGraphicsOptions(self, arg0: int) -> None: ...

  def setDoubleBuffered(self, arg0: bool) -> None: ...

  def setEnabled(self, arg0: bool) -> None: ...

  def setFocusTraversalKeys(self, arg0: int, arg1: Set[AWTKeyStroke]) -> None: ...

  def setFont(self, arg0: Font) -> None: ...

  def setForeground(self, arg0: Color) -> None: ...

  def setInheritsPopupMenu(self, arg0: bool) -> None: ...

  def setInputMap(self, arg0: int, arg1: InputMap) -> None: ...

  def setInputVerifier(self, arg0: InputVerifier) -> None: ...

  def setMaximumSize(self, arg0: Dimension) -> None: ...

  def setMinimumSize(self, arg0: Dimension) -> None: ...

  def setNextFocusableComponent(self, arg0: Component) -> None: ...

  def setOpaque(self, arg0: bool) -> None: ...

  def setPreferredSize(self, arg0: Dimension) -> None: ...

  def setRequestFocusEnabled(self, arg0: bool) -> None: ...

  def setToolTipText(self, arg0: str) -> None: ...

  def setTransferHandler(self, arg0: TransferHandler) -> None: ...

  def setVerifyInputWhenFocusTarget(self, arg0: bool) -> None: ...

  def setVisible(self, arg0: bool) -> None: ...

  def unregisterKeyboardAction(self, arg0: KeyStroke) -> None: ...

  def update(self, arg0: Graphics) -> None: ...

  def updateUI(self) -> None: ...

  @staticmethod
  def getDefaultLocale() -> Locale: ...

  @staticmethod
  def isLightweightComponent(arg0: Component) -> bool: ...

  @staticmethod
  def setDefaultLocale(arg0: Locale) -> None: ...

  def __init__(self): ...

  class ActionStandin:

    ACCELERATOR_KEY: str

    ACTION_COMMAND_KEY: str

    DEFAULT: str

    DISPLAYED_MNEMONIC_INDEX_KEY: str

    LARGE_ICON_KEY: str

    LONG_DESCRIPTION: str

    MNEMONIC_KEY: str

    NAME: str

    SELECTED_KEY: str

    SHORT_DESCRIPTION: str

    SMALL_ICON: str

    def accept(self, arg0: object) -> bool: ...

    def actionPerformed(self, arg0: ActionEvent) -> None: ...

    @overload
    def addPropertyChangeListener(self, arg0: PropertyChangeListener) -> None: ...

    @overload
    def addPropertyChangeListener(self, arg0: PropertyChangeListener) -> None: ...

    @overload
    def getValue(self, arg0: str) -> object: ...

    @overload
    def getValue(self, arg0: str) -> object: ...

    @overload
    def isEnabled(self) -> bool: ...

    @overload
    def isEnabled(self) -> bool: ...

    @overload
    def putValue(self, arg0: str, arg1: object) -> None: ...

    @overload
    def putValue(self, arg0: str, arg1: object) -> None: ...

    @overload
    def removePropertyChangeListener(self, arg0: PropertyChangeListener) -> None: ...

    @overload
    def removePropertyChangeListener(self, arg0: PropertyChangeListener) -> None: ...

    @overload
    def setEnabled(self, arg0: bool) -> None: ...

    @overload
    def setEnabled(self, arg0: bool) -> None: ...

  class KeyboardState: ...

  class ReadObjectCallback:

    @overload
    def validateObject(self) -> None: ...

    @overload
    def validateObject(self) -> None: ...

  class AccessibleJComponent(Container.AccessibleAWTContainer):

    def addFocusListener(self, arg0: FocusListener) -> None: ...

    def addPropertyChangeListener(self, arg0: PropertyChangeListener) -> None: ...

    def contains(self, arg0: Point) -> bool: ...

    def getAccessibleAt(self, arg0: Point) -> Accessible: ...

    def getAccessibleChild(self, arg0: int) -> Accessible: ...

    def getAccessibleChildrenCount(self) -> int: ...

    def getAccessibleComponent(self) -> AccessibleComponent: ...

    def getAccessibleDescription(self) -> str: ...

    def getAccessibleIndexInParent(self) -> int: ...

    @overload
    def getAccessibleKeyBinding(self) -> AccessibleKeyBinding: ...

    @overload
    def getAccessibleKeyBinding(self) -> AccessibleKeyBinding: ...

    def getAccessibleName(self) -> str: ...

    def getAccessibleParent(self) -> Accessible: ...

    def getAccessibleRole(self) -> AccessibleRole: ...

    def getAccessibleStateSet(self) -> AccessibleStateSet: ...

    def getBackground(self) -> Color: ...

    def getBounds(self) -> Rectangle: ...

    def getCursor(self) -> Cursor: ...

    def getFont(self) -> Font: ...

    def getFontMetrics(self, arg0: Font) -> FontMetrics: ...

    def getForeground(self) -> Color: ...

    def getLocale(self) -> Locale: ...

    def getLocation(self) -> Point: ...

    def getLocationOnScreen(self) -> Point: ...

    def getSize(self) -> Dimension: ...

    @overload
    def getTitledBorderText(self) -> str: ...

    @overload
    def getTitledBorderText(self) -> str: ...

    @overload
    def getToolTipText(self) -> str: ...

    @overload
    def getToolTipText(self) -> str: ...

    def isEnabled(self) -> bool: ...

    def isFocusTraversable(self) -> bool: ...

    def isShowing(self) -> bool: ...

    def isVisible(self) -> bool: ...

    def removeFocusListener(self, arg0: FocusListener) -> None: ...

    def removePropertyChangeListener(self, arg0: PropertyChangeListener) -> None: ...

    def requestFocus(self) -> None: ...

    def setBackground(self, arg0: Color) -> None: ...

    def setBounds(self, arg0: Rectangle) -> None: ...

    def setCursor(self, arg0: Cursor) -> None: ...

    def setEnabled(self, arg0: bool) -> None: ...

    def setFont(self, arg0: Font) -> None: ...

    def setForeground(self, arg0: Color) -> None: ...

    def setLocation(self, arg0: Point) -> None: ...

    def setSize(self, arg0: Dimension) -> None: ...

    def setVisible(self, arg0: bool) -> None: ...

    class AccessibleFocusHandler:

      @overload
      def focusGained(self, arg0: FocusEvent) -> None: ...

      @overload
      def focusGained(self, arg0: FocusEvent) -> None: ...

      @overload
      def focusLost(self, arg0: FocusEvent) -> None: ...

      @overload
      def focusLost(self, arg0: FocusEvent) -> None: ...

    class AccessibleContainerHandler:

      @overload
      def componentAdded(self, arg0: ContainerEvent) -> None: ...

      @overload
      def componentAdded(self, arg0: ContainerEvent) -> None: ...

      @overload
      def componentRemoved(self, arg0: ContainerEvent) -> None: ...

      @overload
      def componentRemoved(self, arg0: ContainerEvent) -> None: ...

  class IntVector: ...


class JFrame(Frame):

  DISPOSE_ON_CLOSE: int

  DO_NOTHING_ON_CLOSE: int

  EXIT_ON_CLOSE: int

  HIDE_ON_CLOSE: int

  @overload
  def getAccessibleContext(self) -> AccessibleContext: ...

  @overload
  def getAccessibleContext(self) -> AccessibleContext: ...

  @overload
  def getContentPane(self) -> Container: ...

  @overload
  def getContentPane(self) -> Container: ...

  def getDefaultCloseOperation(self) -> int: ...

  @overload
  def getGlassPane(self) -> Component: ...

  @overload
  def getGlassPane(self) -> Component: ...

  def getGraphics(self) -> Graphics: ...

  def getJMenuBar(self) -> JMenuBar: ...

  @overload
  def getLayeredPane(self) -> JLayeredPane: ...

  @overload
  def getLayeredPane(self) -> JLayeredPane: ...

  @overload
  def getRootPane(self) -> JRootPane: ...

  @overload
  def getRootPane(self) -> JRootPane: ...

  @overload
  def getTransferHandler(self) -> TransferHandler: ...

  @overload
  def getTransferHandler(self) -> TransferHandler: ...

  def remove(self, arg0: Component) -> None: ...

  def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int) -> None: ...

  @overload
  def setContentPane(self, arg0: Container) -> None: ...

  @overload
  def setContentPane(self, arg0: Container) -> None: ...

  def setDefaultCloseOperation(self, arg0: int) -> None: ...

  @overload
  def setGlassPane(self, arg0: Component) -> None: ...

  @overload
  def setGlassPane(self, arg0: Component) -> None: ...

  def setIconImage(self, arg0: Image) -> None: ...

  def setJMenuBar(self, arg0: JMenuBar) -> None: ...

  @overload
  def setLayeredPane(self, arg0: JLayeredPane) -> None: ...

  @overload
  def setLayeredPane(self, arg0: JLayeredPane) -> None: ...

  def setLayout(self, arg0: LayoutManager) -> None: ...

  def setTransferHandler(self, arg0: TransferHandler) -> None: ...

  def update(self, arg0: Graphics) -> None: ...

  @staticmethod
  def isDefaultLookAndFeelDecorated() -> bool: ...

  @staticmethod
  def setDefaultLookAndFeelDecorated(arg0: bool) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: GraphicsConfiguration): ...
  @overload
  def __init__(self, arg0: str): ...
  @overload
  def __init__(self, arg0: str, arg1: GraphicsConfiguration): ...

  class AccessibleJFrame(Frame.AccessibleAWTFrame):

    def getAccessibleName(self) -> str: ...

    def getAccessibleStateSet(self) -> AccessibleStateSet: ...


class JLayeredPane(JComponent):

  DEFAULT_LAYER: Integer

  DRAG_LAYER: Integer

  FRAME_CONTENT_LAYER: Integer

  LAYER_PROPERTY: str

  MODAL_LAYER: Integer

  PALETTE_LAYER: Integer

  POPUP_LAYER: Integer

  @overload
  def getAccessibleContext(self) -> AccessibleContext: ...

  @overload
  def getAccessibleContext(self) -> AccessibleContext: ...

  def getComponentCountInLayer(self, arg0: int) -> int: ...

  def getComponentsInLayer(self, arg0: int) -> list[Component]: ...

  def getIndexOf(self, arg0: Component) -> int: ...

  def getLayer(self, arg0: Component) -> int: ...

  def getPosition(self, arg0: Component) -> int: ...

  def highestLayer(self) -> int: ...

  def isOptimizedDrawingEnabled(self) -> bool: ...

  def lowestLayer(self) -> int: ...

  def moveToBack(self, arg0: Component) -> None: ...

  def moveToFront(self, arg0: Component) -> None: ...

  def paint(self, arg0: Graphics) -> None: ...

  def remove(self, arg0: int) -> None: ...

  def removeAll(self) -> None: ...

  @overload
  def setLayer(self, arg0: Component, arg1: int) -> None: ...

  @overload
  def setLayer(self, arg0: Component, arg1: int, arg2: int) -> None: ...

  def setPosition(self, arg0: Component, arg1: int) -> None: ...

  @staticmethod
  def getLayeredPaneAbove(arg0: Component) -> JLayeredPane: ...

  @staticmethod
  def putLayer(arg0: JComponent, arg1: int) -> None: ...

  def __init__(self): ...

  class AccessibleJLayeredPane(JComponent.AccessibleJComponent):

    def getAccessibleRole(self) -> AccessibleRole: ...


class JMenu(JMenuItem):

  @overload
  def add(self, arg0: Component) -> Component: ...

  @overload
  def add(self, arg0: str) -> JMenuItem: ...

  @overload
  def add(self, arg0: Action) -> JMenuItem: ...

  @overload
  def add(self, arg0: JMenuItem) -> JMenuItem: ...

  @overload
  def add(self, arg0: Component, arg1: int) -> Component: ...

  def addMenuListener(self, arg0: MenuListener) -> None: ...

  def addSeparator(self) -> None: ...

  def applyComponentOrientation(self, arg0: ComponentOrientation) -> None: ...

  def doClick(self, arg0: int) -> None: ...

  @overload
  def getAccessibleContext(self) -> AccessibleContext: ...

  @overload
  def getAccessibleContext(self) -> AccessibleContext: ...

  @overload
  def getComponent(self) -> Component: ...

  @overload
  def getComponent(self) -> Component: ...

  def getDelay(self) -> int: ...

  def getItem(self, arg0: int) -> JMenuItem: ...

  def getItemCount(self) -> int: ...

  def getMenuComponent(self, arg0: int) -> Component: ...

  def getMenuComponentCount(self) -> int: ...

  def getMenuComponents(self) -> list[Component]: ...

  def getMenuListeners(self) -> list[MenuListener]: ...

  def getPopupMenu(self) -> JPopupMenu: ...

  @overload
  def getSubElements(self) -> list[MenuElement]: ...

  @overload
  def getSubElements(self) -> list[MenuElement]: ...

  def getUIClassID(self) -> str: ...

  @overload
  def insert(self, arg0: str, arg1: int) -> None: ...

  @overload
  def insert(self, arg0: Action, arg1: int) -> JMenuItem: ...

  @overload
  def insert(self, arg0: JMenuItem, arg1: int) -> JMenuItem: ...

  def insertSeparator(self, arg0: int) -> None: ...

  def isMenuComponent(self, arg0: Component) -> bool: ...

  def isPopupMenuVisible(self) -> bool: ...

  def isSelected(self) -> bool: ...

  def isTearOff(self) -> bool: ...

  def isTopLevelMenu(self) -> bool: ...

  @overload
  def menuSelectionChanged(self, arg0: bool) -> None: ...

  @overload
  def menuSelectionChanged(self, arg0: bool) -> None: ...

  def processKeyEvent(self, arg0: KeyEvent, arg1: list[MenuElement], arg2: MenuSelectionManager) -> None: ...

  def processMouseEvent(self, arg0: MouseEvent, arg1: list[MenuElement], arg2: MenuSelectionManager) -> None: ...

  @overload
  def remove(self, arg0: int) -> None: ...

  @overload
  def remove(self, arg0: Component) -> None: ...

  @overload
  def remove(self, arg0: JMenuItem) -> None: ...

  def removeAll(self) -> None: ...

  def removeMenuListener(self, arg0: MenuListener) -> None: ...

  def setAccelerator(self, arg0: KeyStroke) -> None: ...

  def setComponentOrientation(self, arg0: ComponentOrientation) -> None: ...

  def setDelay(self, arg0: int) -> None: ...

  def setMenuLocation(self, arg0: int, arg1: int) -> None: ...

  def setModel(self, arg0: ButtonModel) -> None: ...

  def setPopupMenuVisible(self, arg0: bool) -> None: ...

  def setSelected(self, arg0: bool) -> None: ...

  def updateUI(self) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: str): ...
  @overload
  def __init__(self, arg0: Action): ...
  @overload
  def __init__(self, arg0: str, arg1: bool): ...

  class WinListener(WindowAdapter):

    def windowClosing(self, arg0: WindowEvent) -> None: ...

    def __init__(self, arg0: JMenu, arg1: JPopupMenu): ...

  class MenuChangeListener:

    @overload
    def stateChanged(self, arg0: ChangeEvent) -> None: ...

    @overload
    def stateChanged(self, arg0: ChangeEvent) -> None: ...

  class AccessibleJMenu(JMenuItem.AccessibleJMenuItem):

    @overload
    def addAccessibleSelection(self, arg0: int) -> None: ...

    @overload
    def addAccessibleSelection(self, arg0: int) -> None: ...

    @overload
    def clearAccessibleSelection(self) -> None: ...

    @overload
    def clearAccessibleSelection(self) -> None: ...

    def getAccessibleChild(self, arg0: int) -> Accessible: ...

    def getAccessibleChildrenCount(self) -> int: ...

    def getAccessibleRole(self) -> AccessibleRole: ...

    @overload
    def getAccessibleSelection(self) -> AccessibleSelection: ...

    @overload
    def getAccessibleSelection(self, arg0: int) -> Accessible: ...

    @overload
    def getAccessibleSelection(self, arg0: int) -> Accessible: ...

    @overload
    def getAccessibleSelectionCount(self) -> int: ...

    @overload
    def getAccessibleSelectionCount(self) -> int: ...

    @overload
    def isAccessibleChildSelected(self, arg0: int) -> bool: ...

    @overload
    def isAccessibleChildSelected(self, arg0: int) -> bool: ...

    @overload
    def removeAccessibleSelection(self, arg0: int) -> None: ...

    @overload
    def removeAccessibleSelection(self, arg0: int) -> None: ...

    @overload
    def selectAllAccessibleSelection(self) -> None: ...

    @overload
    def selectAllAccessibleSelection(self) -> None: ...


class JMenuBar(JComponent):

  def add(self, arg0: JMenu) -> JMenu: ...

  def addNotify(self) -> None: ...

  @overload
  def getAccessibleContext(self) -> AccessibleContext: ...

  @overload
  def getAccessibleContext(self) -> AccessibleContext: ...

  @overload
  def getComponent(self) -> Component: ...

  @overload
  def getComponent(self) -> Component: ...

  def getComponentAtIndex(self, arg0: int) -> Component: ...

  def getComponentIndex(self, arg0: Component) -> int: ...

  def getHelpMenu(self) -> JMenu: ...

  def getMargin(self) -> Insets: ...

  def getMenu(self, arg0: int) -> JMenu: ...

  def getMenuCount(self) -> int: ...

  def getSelectionModel(self) -> SingleSelectionModel: ...

  @overload
  def getSubElements(self) -> list[MenuElement]: ...

  @overload
  def getSubElements(self) -> list[MenuElement]: ...

  @overload
  def getUI(self) -> ComponentUI: ...

  @overload
  def getUI(self) -> MenuBarUI: ...

  def getUIClassID(self) -> str: ...

  def isBorderPainted(self) -> bool: ...

  def isSelected(self) -> bool: ...

  @overload
  def menuSelectionChanged(self, arg0: bool) -> None: ...

  @overload
  def menuSelectionChanged(self, arg0: bool) -> None: ...

  @overload
  def processKeyEvent(self, arg0: KeyEvent, arg1: list[MenuElement], arg2: MenuSelectionManager) -> None: ...

  @overload
  def processKeyEvent(self, arg0: KeyEvent, arg1: list[MenuElement], arg2: MenuSelectionManager) -> None: ...

  @overload
  def processMouseEvent(self, arg0: MouseEvent, arg1: list[MenuElement], arg2: MenuSelectionManager) -> None: ...

  @overload
  def processMouseEvent(self, arg0: MouseEvent, arg1: list[MenuElement], arg2: MenuSelectionManager) -> None: ...

  def removeNotify(self) -> None: ...

  def setBorderPainted(self, arg0: bool) -> None: ...

  def setHelpMenu(self, arg0: JMenu) -> None: ...

  def setMargin(self, arg0: Insets) -> None: ...

  def setSelected(self, arg0: Component) -> None: ...

  def setSelectionModel(self, arg0: SingleSelectionModel) -> None: ...

  def setUI(self, arg0: MenuBarUI) -> None: ...

  def updateUI(self) -> None: ...

  def __init__(self): ...

  class AccessibleJMenuBar(JComponent.AccessibleJComponent):

    @overload
    def addAccessibleSelection(self, arg0: int) -> None: ...

    @overload
    def addAccessibleSelection(self, arg0: int) -> None: ...

    @overload
    def clearAccessibleSelection(self) -> None: ...

    @overload
    def clearAccessibleSelection(self) -> None: ...

    def getAccessibleRole(self) -> AccessibleRole: ...

    @overload
    def getAccessibleSelection(self) -> AccessibleSelection: ...

    @overload
    def getAccessibleSelection(self, arg0: int) -> Accessible: ...

    @overload
    def getAccessibleSelection(self, arg0: int) -> Accessible: ...

    @overload
    def getAccessibleSelectionCount(self) -> int: ...

    @overload
    def getAccessibleSelectionCount(self) -> int: ...

    def getAccessibleStateSet(self) -> AccessibleStateSet: ...

    @overload
    def isAccessibleChildSelected(self, arg0: int) -> bool: ...

    @overload
    def isAccessibleChildSelected(self, arg0: int) -> bool: ...

    @overload
    def removeAccessibleSelection(self, arg0: int) -> None: ...

    @overload
    def removeAccessibleSelection(self, arg0: int) -> None: ...

    @overload
    def selectAllAccessibleSelection(self) -> None: ...

    @overload
    def selectAllAccessibleSelection(self) -> None: ...


class JMenuItem(AbstractButton):

  def addMenuDragMouseListener(self, arg0: MenuDragMouseListener) -> None: ...

  def addMenuKeyListener(self, arg0: MenuKeyListener) -> None: ...

  def getAccelerator(self) -> KeyStroke: ...

  @overload
  def getAccessibleContext(self) -> AccessibleContext: ...

  @overload
  def getAccessibleContext(self) -> AccessibleContext: ...

  @overload
  def getComponent(self) -> Component: ...

  @overload
  def getComponent(self) -> Component: ...

  def getMenuDragMouseListeners(self) -> list[MenuDragMouseListener]: ...

  def getMenuKeyListeners(self) -> list[MenuKeyListener]: ...

  @overload
  def getSubElements(self) -> list[MenuElement]: ...

  @overload
  def getSubElements(self) -> list[MenuElement]: ...

  def getUIClassID(self) -> str: ...

  def isArmed(self) -> bool: ...

  @overload
  def menuSelectionChanged(self, arg0: bool) -> None: ...

  @overload
  def menuSelectionChanged(self, arg0: bool) -> None: ...

  @overload
  def processKeyEvent(self, arg0: KeyEvent, arg1: list[MenuElement], arg2: MenuSelectionManager) -> None: ...

  @overload
  def processKeyEvent(self, arg0: KeyEvent, arg1: list[MenuElement], arg2: MenuSelectionManager) -> None: ...

  def processMenuDragMouseEvent(self, arg0: MenuDragMouseEvent) -> None: ...

  def processMenuKeyEvent(self, arg0: MenuKeyEvent) -> None: ...

  @overload
  def processMouseEvent(self, arg0: MouseEvent, arg1: list[MenuElement], arg2: MenuSelectionManager) -> None: ...

  @overload
  def processMouseEvent(self, arg0: MouseEvent, arg1: list[MenuElement], arg2: MenuSelectionManager) -> None: ...

  def removeMenuDragMouseListener(self, arg0: MenuDragMouseListener) -> None: ...

  def removeMenuKeyListener(self, arg0: MenuKeyListener) -> None: ...

  def setAccelerator(self, arg0: KeyStroke) -> None: ...

  def setArmed(self, arg0: bool) -> None: ...

  def setEnabled(self, arg0: bool) -> None: ...

  def setModel(self, arg0: ButtonModel) -> None: ...

  def setUI(self, arg0: MenuItemUI) -> None: ...

  def updateUI(self) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: str): ...
  @overload
  def __init__(self, arg0: Action): ...
  @overload
  def __init__(self, arg0: Icon): ...
  @overload
  def __init__(self, arg0: str, arg1: int): ...
  @overload
  def __init__(self, arg0: str, arg1: Icon): ...

  class MenuItemFocusListener:

    @overload
    def focusGained(self, arg0: FocusEvent) -> None: ...

    @overload
    def focusGained(self, arg0: FocusEvent) -> None: ...

    @overload
    def focusLost(self, arg0: FocusEvent) -> None: ...

    @overload
    def focusLost(self, arg0: FocusEvent) -> None: ...

  class AccessibleJMenuItem(AbstractButton.AccessibleAbstractButton):

    def getAccessibleRole(self) -> AccessibleRole: ...

    @overload
    def stateChanged(self, arg0: ChangeEvent) -> None: ...

    @overload
    def stateChanged(self, arg0: ChangeEvent) -> None: ...


class JPanel(JComponent):

  @overload
  def getAccessibleContext(self) -> AccessibleContext: ...

  @overload
  def getAccessibleContext(self) -> AccessibleContext: ...

  @overload
  def getUI(self) -> ComponentUI: ...

  @overload
  def getUI(self) -> PanelUI: ...

  def getUIClassID(self) -> str: ...

  def setUI(self, arg0: PanelUI) -> None: ...

  def updateUI(self) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: bool): ...
  @overload
  def __init__(self, arg0: LayoutManager): ...
  @overload
  def __init__(self, arg0: LayoutManager, arg1: bool): ...

  class AccessibleJPanel(JComponent.AccessibleJComponent):

    def getAccessibleRole(self) -> AccessibleRole: ...


class JPopupMenu(JComponent):

  @overload
  def add(self, arg0: str) -> JMenuItem: ...

  @overload
  def add(self, arg0: Action) -> JMenuItem: ...

  @overload
  def add(self, arg0: JMenuItem) -> JMenuItem: ...

  def addMenuKeyListener(self, arg0: MenuKeyListener) -> None: ...

  def addPopupMenuListener(self, arg0: PopupMenuListener) -> None: ...

  def addSeparator(self) -> None: ...

  @overload
  def getAccessibleContext(self) -> AccessibleContext: ...

  @overload
  def getAccessibleContext(self) -> AccessibleContext: ...

  @overload
  def getComponent(self) -> Component: ...

  @overload
  def getComponent(self) -> Component: ...

  def getComponentAtIndex(self, arg0: int) -> Component: ...

  def getComponentIndex(self, arg0: Component) -> int: ...

  def getInvoker(self) -> Component: ...

  def getLabel(self) -> str: ...

  def getMargin(self) -> Insets: ...

  def getMenuKeyListeners(self) -> list[MenuKeyListener]: ...

  def getPopupMenuListeners(self) -> list[PopupMenuListener]: ...

  def getSelectionModel(self) -> SingleSelectionModel: ...

  @overload
  def getSubElements(self) -> list[MenuElement]: ...

  @overload
  def getSubElements(self) -> list[MenuElement]: ...

  @overload
  def getUI(self) -> PopupMenuUI: ...

  @overload
  def getUI(self) -> ComponentUI: ...

  def getUIClassID(self) -> str: ...

  @overload
  def insert(self, arg0: Component, arg1: int) -> None: ...

  @overload
  def insert(self, arg0: Action, arg1: int) -> None: ...

  def isBorderPainted(self) -> bool: ...

  def isLightWeightPopupEnabled(self) -> bool: ...

  def isPopupTrigger(self, arg0: MouseEvent) -> bool: ...

  def isVisible(self) -> bool: ...

  @overload
  def menuSelectionChanged(self, arg0: bool) -> None: ...

  @overload
  def menuSelectionChanged(self, arg0: bool) -> None: ...

  def pack(self) -> None: ...

  @overload
  def processKeyEvent(self, arg0: KeyEvent, arg1: list[MenuElement], arg2: MenuSelectionManager) -> None: ...

  @overload
  def processKeyEvent(self, arg0: KeyEvent, arg1: list[MenuElement], arg2: MenuSelectionManager) -> None: ...

  @overload
  def processMouseEvent(self, arg0: MouseEvent, arg1: list[MenuElement], arg2: MenuSelectionManager) -> None: ...

  @overload
  def processMouseEvent(self, arg0: MouseEvent, arg1: list[MenuElement], arg2: MenuSelectionManager) -> None: ...

  def remove(self, arg0: int) -> None: ...

  def removeMenuKeyListener(self, arg0: MenuKeyListener) -> None: ...

  def removePopupMenuListener(self, arg0: PopupMenuListener) -> None: ...

  def setBorderPainted(self, arg0: bool) -> None: ...

  def setInvoker(self, arg0: Component) -> None: ...

  def setLabel(self, arg0: str) -> None: ...

  def setLightWeightPopupEnabled(self, arg0: bool) -> None: ...

  def setLocation(self, arg0: int, arg1: int) -> None: ...

  @overload
  def setPopupSize(self, arg0: Dimension) -> None: ...

  @overload
  def setPopupSize(self, arg0: int, arg1: int) -> None: ...

  def setSelected(self, arg0: Component) -> None: ...

  def setSelectionModel(self, arg0: SingleSelectionModel) -> None: ...

  def setUI(self, arg0: PopupMenuUI) -> None: ...

  def setVisible(self, arg0: bool) -> None: ...

  def show(self, arg0: Component, arg1: int, arg2: int) -> None: ...

  def updateUI(self) -> None: ...

  @staticmethod
  def getDefaultLightWeightPopupEnabled() -> bool: ...

  @staticmethod
  def setDefaultLightWeightPopupEnabled(arg0: bool) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: str): ...

  class Separator(JSeparator):

    def getUIClassID(self) -> str: ...

    def __init__(self): ...

  class AccessibleJPopupMenu(JComponent.AccessibleJComponent):

    def getAccessibleRole(self) -> AccessibleRole: ...

    @overload
    def propertyChange(self, arg0: PropertyChangeEvent) -> None: ...

    @overload
    def propertyChange(self, arg0: PropertyChangeEvent) -> None: ...


class JRootPane(JComponent):

  COLOR_CHOOSER_DIALOG: int

  ERROR_DIALOG: int

  FILE_CHOOSER_DIALOG: int

  FRAME: int

  INFORMATION_DIALOG: int

  NONE: int

  PLAIN_DIALOG: int

  QUESTION_DIALOG: int

  WARNING_DIALOG: int

  def addNotify(self) -> None: ...

  @overload
  def getAccessibleContext(self) -> AccessibleContext: ...

  @overload
  def getAccessibleContext(self) -> AccessibleContext: ...

  def getContentPane(self) -> Container: ...

  def getDefaultButton(self) -> JButton: ...

  def getGlassPane(self) -> Component: ...

  def getJMenuBar(self) -> JMenuBar: ...

  def getLayeredPane(self) -> JLayeredPane: ...

  def getMenuBar(self) -> JMenuBar: ...

  @overload
  def getUI(self) -> RootPaneUI: ...

  @overload
  def getUI(self) -> ComponentUI: ...

  def getUIClassID(self) -> str: ...

  def getWindowDecorationStyle(self) -> int: ...

  def isOptimizedDrawingEnabled(self) -> bool: ...

  def isValidateRoot(self) -> bool: ...

  def removeNotify(self) -> None: ...

  def setContentPane(self, arg0: Container) -> None: ...

  def setDefaultButton(self, arg0: JButton) -> None: ...

  def setDoubleBuffered(self, arg0: bool) -> None: ...

  def setGlassPane(self, arg0: Component) -> None: ...

  def setJMenuBar(self, arg0: JMenuBar) -> None: ...

  def setLayeredPane(self, arg0: JLayeredPane) -> None: ...

  def setMenuBar(self, arg0: JMenuBar) -> None: ...

  def setUI(self, arg0: RootPaneUI) -> None: ...

  def setWindowDecorationStyle(self, arg0: int) -> None: ...

  def updateUI(self) -> None: ...

  def __init__(self): ...

  class RootLayout:

    @overload
    def addLayoutComponent(self, arg0: Component, arg1: object) -> None: ...

    @overload
    def addLayoutComponent(self, arg0: Component, arg1: object) -> None: ...

    @overload
    def addLayoutComponent(self, arg0: str, arg1: Component) -> None: ...

    @overload
    def getLayoutAlignmentX(self, arg0: Container) -> float: ...

    @overload
    def getLayoutAlignmentX(self, arg0: Container) -> float: ...

    @overload
    def getLayoutAlignmentY(self, arg0: Container) -> float: ...

    @overload
    def getLayoutAlignmentY(self, arg0: Container) -> float: ...

    @overload
    def invalidateLayout(self, arg0: Container) -> None: ...

    @overload
    def invalidateLayout(self, arg0: Container) -> None: ...

    def layoutContainer(self, arg0: Container) -> None: ...

    @overload
    def maximumLayoutSize(self, arg0: Container) -> Dimension: ...

    @overload
    def maximumLayoutSize(self, arg0: Container) -> Dimension: ...

    def minimumLayoutSize(self, arg0: Container) -> Dimension: ...

    def preferredLayoutSize(self, arg0: Container) -> Dimension: ...

    def removeLayoutComponent(self, arg0: Component) -> None: ...

  class AccessibleJRootPane(JComponent.AccessibleJComponent):

    def getAccessibleChild(self, arg0: int) -> Accessible: ...

    def getAccessibleChildrenCount(self) -> int: ...

    def getAccessibleRole(self) -> AccessibleRole: ...


class JSeparator(JComponent):

  BOTTOM: int

  CENTER: int

  EAST: int

  HORIZONTAL: int

  LEADING: int

  LEFT: int

  NEXT: int

  NORTH: int

  NORTH_EAST: int

  NORTH_WEST: int

  PREVIOUS: int

  RIGHT: int

  SOUTH: int

  SOUTH_EAST: int

  SOUTH_WEST: int

  TOP: int

  TRAILING: int

  VERTICAL: int

  WEST: int

  @overload
  def getAccessibleContext(self) -> AccessibleContext: ...

  @overload
  def getAccessibleContext(self) -> AccessibleContext: ...

  def getOrientation(self) -> int: ...

  @overload
  def getUI(self) -> SeparatorUI: ...

  @overload
  def getUI(self) -> ComponentUI: ...

  def getUIClassID(self) -> str: ...

  def setOrientation(self, arg0: int) -> None: ...

  def setUI(self, arg0: SeparatorUI) -> None: ...

  def updateUI(self) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: int): ...

  class AccessibleJSeparator(JComponent.AccessibleJComponent):

    def getAccessibleRole(self) -> AccessibleRole: ...


class JToolTip(JComponent):

  @overload
  def getAccessibleContext(self) -> AccessibleContext: ...

  @overload
  def getAccessibleContext(self) -> AccessibleContext: ...

  def getComponent(self) -> JComponent: ...

  def getTipText(self) -> str: ...

  @overload
  def getUI(self) -> ToolTipUI: ...

  @overload
  def getUI(self) -> ComponentUI: ...

  def getUIClassID(self) -> str: ...

  def setComponent(self, arg0: JComponent) -> None: ...

  def setTipText(self, arg0: str) -> None: ...

  def updateUI(self) -> None: ...

  def __init__(self): ...

  class AccessibleJToolTip(JComponent.AccessibleJComponent):

    def getAccessibleDescription(self) -> str: ...

    def getAccessibleRole(self) -> AccessibleRole: ...


class JWindow(Window):

  @overload
  def getAccessibleContext(self) -> AccessibleContext: ...

  @overload
  def getAccessibleContext(self) -> AccessibleContext: ...

  @overload
  def getContentPane(self) -> Container: ...

  @overload
  def getContentPane(self) -> Container: ...

  @overload
  def getGlassPane(self) -> Component: ...

  @overload
  def getGlassPane(self) -> Component: ...

  def getGraphics(self) -> Graphics: ...

  @overload
  def getLayeredPane(self) -> JLayeredPane: ...

  @overload
  def getLayeredPane(self) -> JLayeredPane: ...

  @overload
  def getRootPane(self) -> JRootPane: ...

  @overload
  def getRootPane(self) -> JRootPane: ...

  @overload
  def getTransferHandler(self) -> TransferHandler: ...

  @overload
  def getTransferHandler(self) -> TransferHandler: ...

  def remove(self, arg0: Component) -> None: ...

  def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int) -> None: ...

  @overload
  def setContentPane(self, arg0: Container) -> None: ...

  @overload
  def setContentPane(self, arg0: Container) -> None: ...

  @overload
  def setGlassPane(self, arg0: Component) -> None: ...

  @overload
  def setGlassPane(self, arg0: Component) -> None: ...

  @overload
  def setLayeredPane(self, arg0: JLayeredPane) -> None: ...

  @overload
  def setLayeredPane(self, arg0: JLayeredPane) -> None: ...

  def setLayout(self, arg0: LayoutManager) -> None: ...

  def setTransferHandler(self, arg0: TransferHandler) -> None: ...

  def update(self, arg0: Graphics) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: Frame): ...
  @overload
  def __init__(self, arg0: GraphicsConfiguration): ...
  @overload
  def __init__(self, arg0: Window): ...
  @overload
  def __init__(self, arg0: Window, arg1: GraphicsConfiguration): ...

  class AccessibleJWindow(Window.AccessibleAWTWindow): ...


class KeyStroke(AWTKeyStroke):

  @staticmethod
  @overload
  def getKeyStroke(arg0: str) -> KeyStroke: ...

  @staticmethod
  @overload
  def getKeyStroke(arg0: str) -> KeyStroke: ...

  @staticmethod
  @overload
  def getKeyStroke(arg0: str, arg1: bool) -> KeyStroke: ...

  @staticmethod
  @overload
  def getKeyStroke(arg0: int, arg1: int) -> KeyStroke: ...

  @staticmethod
  @overload
  def getKeyStroke(arg0: str, arg1: int) -> KeyStroke: ...

  @staticmethod
  @overload
  def getKeyStroke(arg0: int, arg1: int, arg2: bool) -> KeyStroke: ...

  @staticmethod
  def getKeyStrokeForEvent(arg0: KeyEvent) -> KeyStroke: ...


class MenuElement:

  def getComponent(self) -> Component: ...

  def getSubElements(self) -> list[MenuElement]: ...

  def menuSelectionChanged(self, arg0: bool) -> None: ...

  def processKeyEvent(self, arg0: KeyEvent, arg1: list[MenuElement], arg2: MenuSelectionManager) -> None: ...

  def processMouseEvent(self, arg0: MouseEvent, arg1: list[MenuElement], arg2: MenuSelectionManager) -> None: ...


class MenuSelectionManager:

  def addChangeListener(self, arg0: ChangeListener) -> None: ...

  def clearSelectedPath(self) -> None: ...

  def componentForPoint(self, arg0: Component, arg1: Point) -> Component: ...

  def getChangeListeners(self) -> list[ChangeListener]: ...

  def getSelectedPath(self) -> list[MenuElement]: ...

  def isComponentPartOfCurrentMenu(self, arg0: Component) -> bool: ...

  def processKeyEvent(self, arg0: KeyEvent) -> None: ...

  def processMouseEvent(self, arg0: MouseEvent) -> None: ...

  def removeChangeListener(self, arg0: ChangeListener) -> None: ...

  def setSelectedPath(self, arg0: list[MenuElement]) -> None: ...

  @staticmethod
  def defaultManager() -> MenuSelectionManager: ...

  def __init__(self): ...


class Popup:

  def hide(self) -> None: ...

  def show(self) -> None: ...

  class DefaultFrame(Frame): ...

  class HeavyWeightWindow(JWindow):

    def show(self) -> None: ...

    def update(self, arg0: Graphics) -> None: ...


class SingleSelectionModel:

  def addChangeListener(self, arg0: ChangeListener) -> None: ...

  def clearSelection(self) -> None: ...

  def getSelectedIndex(self) -> int: ...

  def isSelected(self) -> bool: ...

  def removeChangeListener(self, arg0: ChangeListener) -> None: ...

  def setSelectedIndex(self, arg0: int) -> None: ...


class Timer:

  def addActionListener(self, arg0: ActionListener) -> None: ...

  def getActionCommand(self) -> str: ...

  def getActionListeners(self) -> list[ActionListener]: ...

  def getDelay(self) -> int: ...

  def getInitialDelay(self) -> int: ...

  def getListeners(self, arg0: Class[T]) -> list[EventListener]: ...

  def isCoalesce(self) -> bool: ...

  def isRepeats(self) -> bool: ...

  def isRunning(self) -> bool: ...

  def removeActionListener(self, arg0: ActionListener) -> None: ...

  def restart(self) -> None: ...

  def setActionCommand(self, arg0: str) -> None: ...

  def setCoalesce(self, arg0: bool) -> None: ...

  def setDelay(self, arg0: int) -> None: ...

  def setInitialDelay(self, arg0: int) -> None: ...

  def setRepeats(self, arg0: bool) -> None: ...

  def start(self) -> None: ...

  def stop(self) -> None: ...

  @staticmethod
  def getLogTimers() -> bool: ...

  @staticmethod
  def setLogTimers(arg0: bool) -> None: ...

  def __init__(self, arg0: int, arg1: ActionListener): ...

  class DoPostEvent:

    @overload
    def run(self) -> None: ...

    @overload
    def run(self) -> None: ...


class TimerQueue:

  @overload
  def run(self) -> None: ...

  @overload
  def run(self) -> None: ...

  def toString(self) -> str: ...

  @staticmethod
  def sharedInstance() -> TimerQueue: ...

  def __init__(self): ...

  class DelayedTimer:

    @overload
    def compareTo(self, arg0: object) -> int: ...

    @overload
    def compareTo(self, arg0: Delayed) -> int: ...

    @overload
    def getDelay(self, arg0: TimeUnit) -> int: ...

    @overload
    def getDelay(self, arg0: TimeUnit) -> int: ...


class TransferHandler:

  COPY: int

  COPY_OR_MOVE: int

  LINK: int

  MOVE: int

  NONE: int

  @overload
  def canImport(self, arg0: TransferHandler.TransferSupport) -> bool: ...

  @overload
  def canImport(self, arg0: JComponent, arg1: list[DataFlavor]) -> bool: ...

  def exportAsDrag(self, arg0: JComponent, arg1: InputEvent, arg2: int) -> None: ...

  def exportToClipboard(self, arg0: JComponent, arg1: Clipboard, arg2: int) -> None: ...

  def getDragImage(self) -> Image: ...

  def getDragImageOffset(self) -> Point: ...

  def getSourceActions(self, arg0: JComponent) -> int: ...

  def getVisualRepresentation(self, arg0: Transferable) -> Icon: ...

  @overload
  def importData(self, arg0: TransferHandler.TransferSupport) -> bool: ...

  @overload
  def importData(self, arg0: JComponent, arg1: Transferable) -> bool: ...

  def setDragImage(self, arg0: Image) -> None: ...

  def setDragImageOffset(self, arg0: Point) -> None: ...

  @staticmethod
  def getCopyAction() -> Action: ...

  @staticmethod
  def getCutAction() -> Action: ...

  @staticmethod
  def getPasteAction() -> Action: ...

  def __init__(self, arg0: str): ...

  class SwingDragGestureRecognizer(DragGestureRecognizer): ...

  class DragHandler:

    @overload
    def dragDropEnd(self, arg0: DragSourceDropEvent) -> None: ...

    @overload
    def dragDropEnd(self, arg0: DragSourceDropEvent) -> None: ...

    @overload
    def dragEnter(self, arg0: DragSourceDragEvent) -> None: ...

    @overload
    def dragEnter(self, arg0: DragSourceDragEvent) -> None: ...

    @overload
    def dragExit(self, arg0: DragSourceEvent) -> None: ...

    @overload
    def dragExit(self, arg0: DragSourceEvent) -> None: ...

    @overload
    def dragGestureRecognized(self, arg0: DragGestureEvent) -> None: ...

    @overload
    def dragGestureRecognized(self, arg0: DragGestureEvent) -> None: ...

    @overload
    def dragOver(self, arg0: DragSourceDragEvent) -> None: ...

    @overload
    def dragOver(self, arg0: DragSourceDragEvent) -> None: ...

    @overload
    def dropActionChanged(self, arg0: DragSourceDragEvent) -> None: ...

    @overload
    def dropActionChanged(self, arg0: DragSourceDragEvent) -> None: ...

  class TransferSupport:

    def getComponent(self) -> Component: ...

    def getDataFlavors(self) -> list[DataFlavor]: ...

    def getDropAction(self) -> int: ...

    def getDropLocation(self) -> TransferHandler.DropLocation: ...

    def getSourceDropActions(self) -> int: ...

    def getTransferable(self) -> Transferable: ...

    def getUserDropAction(self) -> int: ...

    def isDataFlavorSupported(self, arg0: DataFlavor) -> bool: ...

    def isDrop(self) -> bool: ...

    def setDropAction(self, arg0: int) -> None: ...

    def setShowDropLocation(self, arg0: bool) -> None: ...

    def __init__(self, arg0: Component, arg1: Transferable): ...

  class PropertyTransferable:

    @overload
    def getTransferData(self, arg0: DataFlavor) -> object: ...

    @overload
    def getTransferData(self, arg0: DataFlavor) -> object: ...

    @overload
    def getTransferDataFlavors(self) -> list[DataFlavor]: ...

    @overload
    def getTransferDataFlavors(self) -> list[DataFlavor]: ...

    @overload
    def isDataFlavorSupported(self, arg0: DataFlavor) -> bool: ...

    @overload
    def isDataFlavorSupported(self, arg0: DataFlavor) -> bool: ...

  class DropHandler:

    @overload
    def actionPerformed(self, arg0: ActionEvent) -> None: ...

    @overload
    def actionPerformed(self, arg0: ActionEvent) -> None: ...

    @overload
    def dragEnter(self, arg0: DropTargetDragEvent) -> None: ...

    @overload
    def dragEnter(self, arg0: DropTargetDragEvent) -> None: ...

    @overload
    def dragExit(self, arg0: DropTargetEvent) -> None: ...

    @overload
    def dragExit(self, arg0: DropTargetEvent) -> None: ...

    @overload
    def dragOver(self, arg0: DropTargetDragEvent) -> None: ...

    @overload
    def dragOver(self, arg0: DropTargetDragEvent) -> None: ...

    @overload
    def drop(self, arg0: DropTargetDropEvent) -> None: ...

    @overload
    def drop(self, arg0: DropTargetDropEvent) -> None: ...

    @overload
    def dropActionChanged(self, arg0: DropTargetDragEvent) -> None: ...

    @overload
    def dropActionChanged(self, arg0: DropTargetDragEvent) -> None: ...

  class TransferAction(UIAction):

    def accept(self, arg0: object) -> bool: ...

    def actionPerformed(self, arg0: ActionEvent) -> None: ...

  class SwingDropTarget(DropTarget):

    def addDropTargetListener(self, arg0: DropTargetListener) -> None: ...

    def dragEnter(self, arg0: DropTargetDragEvent) -> None: ...

    def dragExit(self, arg0: DropTargetEvent) -> None: ...

    def dragOver(self, arg0: DropTargetDragEvent) -> None: ...

    def drop(self, arg0: DropTargetDropEvent) -> None: ...

    def dropActionChanged(self, arg0: DropTargetDragEvent) -> None: ...

    def removeDropTargetListener(self, arg0: DropTargetListener) -> None: ...

  class DropLocation:

    def getDropPoint(self) -> Point: ...

    def toString(self) -> str: ...

  class HasGetTransferHandler:

    def getTransferHandler(self) -> TransferHandler: ...

