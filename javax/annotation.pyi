from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.lang import Class
from java.lang.annotation import Annotation
from javax.annotation.meta import When

class Nonnull:

  def annotationType(self) -> Class[Annotation]: ...

  def equals(self, arg0: object) -> bool: ...

  def hashCode(self) -> int: ...

  def toString(self) -> str: ...

  def when(self) -> When: ...

  class Checker:

    @overload
    def forConstantValue(self, arg0: Annotation, arg1: object) -> When: ...

    @overload
    def forConstantValue(self, arg0: A, arg1: object) -> When: ...

    @overload
    def forConstantValue(self, arg0: Nonnull, arg1: object) -> When: ...

    def __init__(self): ...


class Nullable:

  def annotationType(self) -> Class[Annotation]: ...

  def equals(self, arg0: object) -> bool: ...

  def hashCode(self) -> int: ...

  def toString(self) -> str: ...

