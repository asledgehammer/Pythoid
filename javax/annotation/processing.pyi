from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.lang import CharSequence, Class
from java.util import Locale, Map, Set
from javax.lang.model import SourceVersion
from javax.lang.model.element import Element, AnnotationMirror, AnnotationValue, TypeElement
from javax.lang.model.util import Elements, Types
from javax.tools import JavaFileObject, JavaFileManager, FileObject, Diagnostic

class Filer:

  def createClassFile(self, arg0: CharSequence, arg1: list[Element]) -> JavaFileObject: ...

  def createResource(self, arg0: JavaFileManager.Location, arg1: CharSequence, arg2: CharSequence, arg3: list[Element]) -> FileObject: ...

  def createSourceFile(self, arg0: CharSequence, arg1: list[Element]) -> JavaFileObject: ...

  def getResource(self, arg0: JavaFileManager.Location, arg1: CharSequence, arg2: CharSequence) -> FileObject: ...


class Messager:

  @overload
  def printError(self, arg0: CharSequence) -> None: ...

  @overload
  def printError(self, arg0: CharSequence, arg1: Element) -> None: ...

  @overload
  def printMessage(self, arg0: Diagnostic.Kind, arg1: CharSequence) -> None: ...

  @overload
  def printMessage(self, arg0: Diagnostic.Kind, arg1: CharSequence, arg2: Element) -> None: ...

  @overload
  def printMessage(self, arg0: Diagnostic.Kind, arg1: CharSequence, arg2: Element, arg3: AnnotationMirror) -> None: ...

  @overload
  def printMessage(self, arg0: Diagnostic.Kind, arg1: CharSequence, arg2: Element, arg3: AnnotationMirror, arg4: AnnotationValue) -> None: ...

  @overload
  def printNote(self, arg0: CharSequence) -> None: ...

  @overload
  def printNote(self, arg0: CharSequence, arg1: Element) -> None: ...

  @overload
  def printWarning(self, arg0: CharSequence) -> None: ...

  @overload
  def printWarning(self, arg0: CharSequence, arg1: Element) -> None: ...


class ProcessingEnvironment:

  def getElementUtils(self) -> Elements: ...

  def getFiler(self) -> Filer: ...

  def getLocale(self) -> Locale: ...

  def getMessager(self) -> Messager: ...

  def getOptions(self) -> Map[str, str]: ...

  def getSourceVersion(self) -> SourceVersion: ...

  def getTypeUtils(self) -> Types: ...

  def isPreviewEnabled(self) -> bool: ...


class RoundEnvironment:

  def errorRaised(self) -> bool: ...

  @overload
  def getElementsAnnotatedWith(self, arg0: Class[Annotation]) -> Set[Element]: ...

  @overload
  def getElementsAnnotatedWith(self, arg0: TypeElement) -> Set[Element]: ...

  @overload
  def getElementsAnnotatedWithAny(self, arg0: list[TypeElement]) -> Set[Element]: ...

  @overload
  def getElementsAnnotatedWithAny(self, arg0: Set[Class[Annotation]]) -> Set[Element]: ...

  def getRootElements(self) -> Set[Element]: ...

  def processingOver(self) -> bool: ...

