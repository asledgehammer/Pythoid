from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.awt import Color
from java.lang import RuntimeException

class AxisAngle4d:

  def clone(self) -> object: ...

  def epsilonEquals(self, arg0: AxisAngle4d, arg1: float) -> bool: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def equals(self, arg0: AxisAngle4d) -> bool: ...

  def get(self, arg0: list[float]) -> None: ...

  def getAngle(self) -> float: ...

  def getX(self) -> float: ...

  def getY(self) -> float: ...

  def getZ(self) -> float: ...

  def hashCode(self) -> int: ...

  @overload
  def set(self, arg0: list[float]) -> None: ...

  @overload
  def set(self, arg0: AxisAngle4d) -> None: ...

  @overload
  def set(self, arg0: AxisAngle4f) -> None: ...

  @overload
  def set(self, arg0: Matrix3d) -> None: ...

  @overload
  def set(self, arg0: Matrix3f) -> None: ...

  @overload
  def set(self, arg0: Matrix4d) -> None: ...

  @overload
  def set(self, arg0: Matrix4f) -> None: ...

  @overload
  def set(self, arg0: Quat4d) -> None: ...

  @overload
  def set(self, arg0: Quat4f) -> None: ...

  @overload
  def set(self, arg0: Vector3d, arg1: float) -> None: ...

  @overload
  def set(self, arg0: float, arg1: float, arg2: float, arg3: float) -> None: ...

  def setAngle(self, arg0: float) -> None: ...

  def setX(self, arg0: float) -> None: ...

  def setY(self, arg0: float) -> None: ...

  def setZ(self, arg0: float) -> None: ...

  def toString(self) -> str: ...

  @overload
  def __init__(self):
    self.angle: float

    self.x: float

    self.y: float

    self.z: float

  @overload
  def __init__(self, arg0: list[float]): ...
  @overload
  def __init__(self, arg0: AxisAngle4d): ...
  @overload
  def __init__(self, arg0: AxisAngle4f): ...
  @overload
  def __init__(self, arg0: Vector3d, arg1: float): ...
  @overload
  def __init__(self, arg0: float, arg1: float, arg2: float, arg3: float): ...


class AxisAngle4f:

  def clone(self) -> object: ...

  def epsilonEquals(self, arg0: AxisAngle4f, arg1: float) -> bool: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def equals(self, arg0: AxisAngle4f) -> bool: ...

  def get(self, arg0: list[float]) -> None: ...

  def getAngle(self) -> float: ...

  def getX(self) -> float: ...

  def getY(self) -> float: ...

  def getZ(self) -> float: ...

  def hashCode(self) -> int: ...

  @overload
  def set(self, arg0: list[float]) -> None: ...

  @overload
  def set(self, arg0: AxisAngle4d) -> None: ...

  @overload
  def set(self, arg0: AxisAngle4f) -> None: ...

  @overload
  def set(self, arg0: Matrix3d) -> None: ...

  @overload
  def set(self, arg0: Matrix3f) -> None: ...

  @overload
  def set(self, arg0: Matrix4d) -> None: ...

  @overload
  def set(self, arg0: Matrix4f) -> None: ...

  @overload
  def set(self, arg0: Quat4d) -> None: ...

  @overload
  def set(self, arg0: Quat4f) -> None: ...

  @overload
  def set(self, arg0: Vector3f, arg1: float) -> None: ...

  @overload
  def set(self, arg0: float, arg1: float, arg2: float, arg3: float) -> None: ...

  def setAngle(self, arg0: float) -> None: ...

  def setX(self, arg0: float) -> None: ...

  def setY(self, arg0: float) -> None: ...

  def setZ(self, arg0: float) -> None: ...

  def toString(self) -> str: ...

  @overload
  def __init__(self):
    self.angle: float

    self.x: float

    self.y: float

    self.z: float

  @overload
  def __init__(self, arg0: list[float]): ...
  @overload
  def __init__(self, arg0: AxisAngle4d): ...
  @overload
  def __init__(self, arg0: AxisAngle4f): ...
  @overload
  def __init__(self, arg0: Vector3f, arg1: float): ...
  @overload
  def __init__(self, arg0: float, arg1: float, arg2: float, arg3: float): ...


class Color3b(Tuple3b):

  def get(self) -> Color: ...

  def set(self, arg0: Color) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: list[int]): ...
  @overload
  def __init__(self, arg0: Color): ...
  @overload
  def __init__(self, arg0: Color3b): ...
  @overload
  def __init__(self, arg0: Tuple3b): ...
  @overload
  def __init__(self, arg0: int, arg1: int, arg2: int): ...


class Color3f(Tuple3f):

  def get(self) -> Color: ...

  def set(self, arg0: Color) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: list[float]): ...
  @overload
  def __init__(self, arg0: Color): ...
  @overload
  def __init__(self, arg0: Color3f): ...
  @overload
  def __init__(self, arg0: Tuple3d): ...
  @overload
  def __init__(self, arg0: Tuple3f): ...
  @overload
  def __init__(self, arg0: float, arg1: float, arg2: float): ...


class Color4b(Tuple4b):

  def get(self) -> Color: ...

  def set(self, arg0: Color) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: list[int]): ...
  @overload
  def __init__(self, arg0: Color): ...
  @overload
  def __init__(self, arg0: Color4b): ...
  @overload
  def __init__(self, arg0: Tuple4b): ...
  @overload
  def __init__(self, arg0: int, arg1: int, arg2: int, arg3: int): ...


class Color4f(Tuple4f):

  def get(self) -> Color: ...

  def set(self, arg0: Color) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: list[float]): ...
  @overload
  def __init__(self, arg0: Color): ...
  @overload
  def __init__(self, arg0: Color4f): ...
  @overload
  def __init__(self, arg0: Tuple4d): ...
  @overload
  def __init__(self, arg0: Tuple4f): ...
  @overload
  def __init__(self, arg0: float, arg1: float, arg2: float, arg3: float): ...


class GMatrix:

  def LUD(self, arg0: GMatrix, arg1: GVector) -> int: ...

  def SVD(self, arg0: GMatrix, arg1: GMatrix, arg2: GMatrix) -> int: ...

  @overload
  def add(self, arg0: GMatrix) -> None: ...

  @overload
  def add(self, arg0: GMatrix, arg1: GMatrix) -> None: ...

  def clone(self) -> object: ...

  def copySubMatrix(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: GMatrix) -> None: ...

  @overload
  def epsilonEquals(self, arg0: GMatrix, arg1: float) -> bool: ...

  @overload
  def epsilonEquals(self, arg0: GMatrix, arg1: float) -> bool: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def equals(self, arg0: GMatrix) -> bool: ...

  @overload
  def get(self, arg0: GMatrix) -> None: ...

  @overload
  def get(self, arg0: Matrix3d) -> None: ...

  @overload
  def get(self, arg0: Matrix3f) -> None: ...

  @overload
  def get(self, arg0: Matrix4d) -> None: ...

  @overload
  def get(self, arg0: Matrix4f) -> None: ...

  @overload
  def getColumn(self, arg0: int, arg1: list[float]) -> None: ...

  @overload
  def getColumn(self, arg0: int, arg1: GVector) -> None: ...

  def getElement(self, arg0: int, arg1: int) -> float: ...

  def getNumCol(self) -> int: ...

  def getNumRow(self) -> int: ...

  @overload
  def getRow(self, arg0: int, arg1: list[float]) -> None: ...

  @overload
  def getRow(self, arg0: int, arg1: GVector) -> None: ...

  def hashCode(self) -> int: ...

  def identityMinus(self) -> None: ...

  @overload
  def invert(self) -> None: ...

  @overload
  def invert(self, arg0: GMatrix) -> None: ...

  @overload
  def mul(self, arg0: GMatrix) -> None: ...

  @overload
  def mul(self, arg0: GMatrix, arg1: GMatrix) -> None: ...

  @overload
  def mul(self, arg0: GVector, arg1: GVector) -> None: ...

  def mulTransposeBoth(self, arg0: GMatrix, arg1: GMatrix) -> None: ...

  def mulTransposeLeft(self, arg0: GMatrix, arg1: GMatrix) -> None: ...

  def mulTransposeRight(self, arg0: GMatrix, arg1: GMatrix) -> None: ...

  @overload
  def negate(self) -> None: ...

  @overload
  def negate(self, arg0: GMatrix) -> None: ...

  @overload
  def set(self, arg0: list[float]) -> None: ...

  @overload
  def set(self, arg0: GMatrix) -> None: ...

  @overload
  def set(self, arg0: Matrix3d) -> None: ...

  @overload
  def set(self, arg0: Matrix3f) -> None: ...

  @overload
  def set(self, arg0: Matrix4d) -> None: ...

  @overload
  def set(self, arg0: Matrix4f) -> None: ...

  @overload
  def setColumn(self, arg0: int, arg1: list[float]) -> None: ...

  @overload
  def setColumn(self, arg0: int, arg1: GVector) -> None: ...

  def setElement(self, arg0: int, arg1: int, arg2: float) -> None: ...

  def setIdentity(self) -> None: ...

  @overload
  def setRow(self, arg0: int, arg1: list[float]) -> None: ...

  @overload
  def setRow(self, arg0: int, arg1: GVector) -> None: ...

  def setScale(self, arg0: float) -> None: ...

  def setSize(self, arg0: int, arg1: int) -> None: ...

  def setZero(self) -> None: ...

  @overload
  def sub(self, arg0: GMatrix) -> None: ...

  @overload
  def sub(self, arg0: GMatrix, arg1: GMatrix) -> None: ...

  def toString(self) -> str: ...

  def trace(self) -> float: ...

  @overload
  def transpose(self) -> None: ...

  @overload
  def transpose(self, arg0: GMatrix) -> None: ...

  @overload
  def __init__(self, arg0: GMatrix): ...
  @overload
  def __init__(self, arg0: int, arg1: int): ...
  @overload
  def __init__(self, arg0: int, arg1: int, arg2: list[float]): ...


class GVector:

  def LUDBackSolve(self, arg0: GMatrix, arg1: GVector, arg2: GVector) -> None: ...

  def SVDBackSolve(self, arg0: GMatrix, arg1: GMatrix, arg2: GMatrix, arg3: GVector) -> None: ...

  @overload
  def add(self, arg0: GVector) -> None: ...

  @overload
  def add(self, arg0: GVector, arg1: GVector) -> None: ...

  def angle(self, arg0: GVector) -> float: ...

  def clone(self) -> object: ...

  def dot(self, arg0: GVector) -> float: ...

  def epsilonEquals(self, arg0: GVector, arg1: float) -> bool: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def equals(self, arg0: GVector) -> bool: ...

  def getElement(self, arg0: int) -> float: ...

  def getSize(self) -> int: ...

  def hashCode(self) -> int: ...

  @overload
  def interpolate(self, arg0: GVector, arg1: float) -> None: ...

  @overload
  def interpolate(self, arg0: GVector, arg1: float) -> None: ...

  @overload
  def interpolate(self, arg0: GVector, arg1: GVector, arg2: float) -> None: ...

  @overload
  def interpolate(self, arg0: GVector, arg1: GVector, arg2: float) -> None: ...

  @overload
  def mul(self, arg0: GMatrix, arg1: GVector) -> None: ...

  @overload
  def mul(self, arg0: GVector, arg1: GMatrix) -> None: ...

  def negate(self) -> None: ...

  def norm(self) -> float: ...

  def normSquared(self) -> float: ...

  @overload
  def normalize(self) -> None: ...

  @overload
  def normalize(self, arg0: GVector) -> None: ...

  @overload
  def scale(self, arg0: float) -> None: ...

  @overload
  def scale(self, arg0: float, arg1: GVector) -> None: ...

  def scaleAdd(self, arg0: float, arg1: GVector, arg2: GVector) -> None: ...

  @overload
  def set(self, arg0: list[float]) -> None: ...

  @overload
  def set(self, arg0: GVector) -> None: ...

  @overload
  def set(self, arg0: Tuple2f) -> None: ...

  @overload
  def set(self, arg0: Tuple3d) -> None: ...

  @overload
  def set(self, arg0: Tuple3f) -> None: ...

  @overload
  def set(self, arg0: Tuple4d) -> None: ...

  @overload
  def set(self, arg0: Tuple4f) -> None: ...

  def setElement(self, arg0: int, arg1: float) -> None: ...

  def setSize(self, arg0: int) -> None: ...

  @overload
  def sub(self, arg0: GVector) -> None: ...

  @overload
  def sub(self, arg0: GVector, arg1: GVector) -> None: ...

  def toString(self) -> str: ...

  def zero(self) -> None: ...

  @overload
  def __init__(self, arg0: list[float]): ...
  @overload
  def __init__(self, arg0: int): ...
  @overload
  def __init__(self, arg0: GVector): ...
  @overload
  def __init__(self, arg0: Tuple2f): ...
  @overload
  def __init__(self, arg0: Tuple3d): ...
  @overload
  def __init__(self, arg0: Tuple3f): ...
  @overload
  def __init__(self, arg0: Tuple4d): ...
  @overload
  def __init__(self, arg0: Tuple4f): ...
  @overload
  def __init__(self, arg0: list[float], arg1: int): ...


class Matrix3d:

  @overload
  def add(self, arg0: float) -> None: ...

  @overload
  def add(self, arg0: Matrix3d) -> None: ...

  @overload
  def add(self, arg0: float, arg1: Matrix3d) -> None: ...

  @overload
  def add(self, arg0: Matrix3d, arg1: Matrix3d) -> None: ...

  def clone(self) -> object: ...

  def determinant(self) -> float: ...

  def epsilonEquals(self, arg0: Matrix3d, arg1: float) -> bool: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def equals(self, arg0: Matrix3d) -> bool: ...

  @overload
  def getColumn(self, arg0: int, arg1: list[float]) -> None: ...

  @overload
  def getColumn(self, arg0: int, arg1: Vector3d) -> None: ...

  def getElement(self, arg0: int, arg1: int) -> float: ...

  def getM00(self) -> float: ...

  def getM01(self) -> float: ...

  def getM02(self) -> float: ...

  def getM10(self) -> float: ...

  def getM11(self) -> float: ...

  def getM12(self) -> float: ...

  def getM20(self) -> float: ...

  def getM21(self) -> float: ...

  def getM22(self) -> float: ...

  @overload
  def getRow(self, arg0: int, arg1: list[float]) -> None: ...

  @overload
  def getRow(self, arg0: int, arg1: Vector3d) -> None: ...

  def getScale(self) -> float: ...

  def hashCode(self) -> int: ...

  @overload
  def invert(self) -> None: ...

  @overload
  def invert(self, arg0: Matrix3d) -> None: ...

  @overload
  def mul(self, arg0: float) -> None: ...

  @overload
  def mul(self, arg0: Matrix3d) -> None: ...

  @overload
  def mul(self, arg0: float, arg1: Matrix3d) -> None: ...

  @overload
  def mul(self, arg0: Matrix3d, arg1: Matrix3d) -> None: ...

  @overload
  def mulNormalize(self, arg0: Matrix3d) -> None: ...

  @overload
  def mulNormalize(self, arg0: Matrix3d, arg1: Matrix3d) -> None: ...

  def mulTransposeBoth(self, arg0: Matrix3d, arg1: Matrix3d) -> None: ...

  def mulTransposeLeft(self, arg0: Matrix3d, arg1: Matrix3d) -> None: ...

  def mulTransposeRight(self, arg0: Matrix3d, arg1: Matrix3d) -> None: ...

  @overload
  def negate(self) -> None: ...

  @overload
  def negate(self, arg0: Matrix3d) -> None: ...

  @overload
  def normalize(self) -> None: ...

  @overload
  def normalize(self, arg0: Matrix3d) -> None: ...

  @overload
  def normalizeCP(self) -> None: ...

  @overload
  def normalizeCP(self, arg0: Matrix3d) -> None: ...

  def rotX(self, arg0: float) -> None: ...

  def rotY(self, arg0: float) -> None: ...

  def rotZ(self, arg0: float) -> None: ...

  @overload
  def set(self, arg0: list[float]) -> None: ...

  @overload
  def set(self, arg0: float) -> None: ...

  @overload
  def set(self, arg0: AxisAngle4d) -> None: ...

  @overload
  def set(self, arg0: AxisAngle4f) -> None: ...

  @overload
  def set(self, arg0: Matrix3d) -> None: ...

  @overload
  def set(self, arg0: Matrix3f) -> None: ...

  @overload
  def set(self, arg0: Quat4d) -> None: ...

  @overload
  def set(self, arg0: Quat4f) -> None: ...

  @overload
  def setColumn(self, arg0: int, arg1: list[float]) -> None: ...

  @overload
  def setColumn(self, arg0: int, arg1: Vector3d) -> None: ...

  @overload
  def setColumn(self, arg0: int, arg1: float, arg2: float, arg3: float) -> None: ...

  def setElement(self, arg0: int, arg1: int, arg2: float) -> None: ...

  def setIdentity(self) -> None: ...

  def setM00(self, arg0: float) -> None: ...

  def setM01(self, arg0: float) -> None: ...

  def setM02(self, arg0: float) -> None: ...

  def setM10(self, arg0: float) -> None: ...

  def setM11(self, arg0: float) -> None: ...

  def setM12(self, arg0: float) -> None: ...

  def setM20(self, arg0: float) -> None: ...

  def setM21(self, arg0: float) -> None: ...

  def setM22(self, arg0: float) -> None: ...

  @overload
  def setRow(self, arg0: int, arg1: list[float]) -> None: ...

  @overload
  def setRow(self, arg0: int, arg1: Vector3d) -> None: ...

  @overload
  def setRow(self, arg0: int, arg1: float, arg2: float, arg3: float) -> None: ...

  def setScale(self, arg0: float) -> None: ...

  def setZero(self) -> None: ...

  @overload
  def sub(self, arg0: Matrix3d) -> None: ...

  @overload
  def sub(self, arg0: Matrix3d, arg1: Matrix3d) -> None: ...

  def toString(self) -> str: ...

  @overload
  def transform(self, arg0: Tuple3d) -> None: ...

  @overload
  def transform(self, arg0: Tuple3d, arg1: Tuple3d) -> None: ...

  @overload
  def transpose(self) -> None: ...

  @overload
  def transpose(self, arg0: Matrix3d) -> None: ...

  @overload
  def __init__(self):
    self.m00: float

    self.m01: float

    self.m02: float

    self.m10: float

    self.m11: float

    self.m12: float

    self.m20: float

    self.m21: float

    self.m22: float

  @overload
  def __init__(self, arg0: list[float]): ...
  @overload
  def __init__(self, arg0: Matrix3d): ...
  @overload
  def __init__(self, arg0: Matrix3f): ...
  @overload
  def __init__(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float): ...


class Matrix3f:

  @overload
  def add(self, arg0: float) -> None: ...

  @overload
  def add(self, arg0: Matrix3f) -> None: ...

  @overload
  def add(self, arg0: float, arg1: Matrix3f) -> None: ...

  @overload
  def add(self, arg0: Matrix3f, arg1: Matrix3f) -> None: ...

  def clone(self) -> object: ...

  def determinant(self) -> float: ...

  def epsilonEquals(self, arg0: Matrix3f, arg1: float) -> bool: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def equals(self, arg0: Matrix3f) -> bool: ...

  @overload
  def getColumn(self, arg0: int, arg1: list[float]) -> None: ...

  @overload
  def getColumn(self, arg0: int, arg1: Vector3f) -> None: ...

  def getElement(self, arg0: int, arg1: int) -> float: ...

  def getM00(self) -> float: ...

  def getM01(self) -> float: ...

  def getM02(self) -> float: ...

  def getM10(self) -> float: ...

  def getM11(self) -> float: ...

  def getM12(self) -> float: ...

  def getM20(self) -> float: ...

  def getM21(self) -> float: ...

  def getM22(self) -> float: ...

  @overload
  def getRow(self, arg0: int, arg1: list[float]) -> None: ...

  @overload
  def getRow(self, arg0: int, arg1: Vector3f) -> None: ...

  def getScale(self) -> float: ...

  def hashCode(self) -> int: ...

  @overload
  def invert(self) -> None: ...

  @overload
  def invert(self, arg0: Matrix3f) -> None: ...

  @overload
  def mul(self, arg0: float) -> None: ...

  @overload
  def mul(self, arg0: Matrix3f) -> None: ...

  @overload
  def mul(self, arg0: float, arg1: Matrix3f) -> None: ...

  @overload
  def mul(self, arg0: Matrix3f, arg1: Matrix3f) -> None: ...

  @overload
  def mulNormalize(self, arg0: Matrix3f) -> None: ...

  @overload
  def mulNormalize(self, arg0: Matrix3f, arg1: Matrix3f) -> None: ...

  def mulTransposeBoth(self, arg0: Matrix3f, arg1: Matrix3f) -> None: ...

  def mulTransposeLeft(self, arg0: Matrix3f, arg1: Matrix3f) -> None: ...

  def mulTransposeRight(self, arg0: Matrix3f, arg1: Matrix3f) -> None: ...

  @overload
  def negate(self) -> None: ...

  @overload
  def negate(self, arg0: Matrix3f) -> None: ...

  @overload
  def normalize(self) -> None: ...

  @overload
  def normalize(self, arg0: Matrix3f) -> None: ...

  @overload
  def normalizeCP(self) -> None: ...

  @overload
  def normalizeCP(self, arg0: Matrix3f) -> None: ...

  def rotX(self, arg0: float) -> None: ...

  def rotY(self, arg0: float) -> None: ...

  def rotZ(self, arg0: float) -> None: ...

  @overload
  def set(self, arg0: list[float]) -> None: ...

  @overload
  def set(self, arg0: float) -> None: ...

  @overload
  def set(self, arg0: AxisAngle4d) -> None: ...

  @overload
  def set(self, arg0: AxisAngle4f) -> None: ...

  @overload
  def set(self, arg0: Matrix3d) -> None: ...

  @overload
  def set(self, arg0: Matrix3f) -> None: ...

  @overload
  def set(self, arg0: Quat4d) -> None: ...

  @overload
  def set(self, arg0: Quat4f) -> None: ...

  @overload
  def setColumn(self, arg0: int, arg1: list[float]) -> None: ...

  @overload
  def setColumn(self, arg0: int, arg1: Vector3f) -> None: ...

  @overload
  def setColumn(self, arg0: int, arg1: float, arg2: float, arg3: float) -> None: ...

  def setElement(self, arg0: int, arg1: int, arg2: float) -> None: ...

  def setIdentity(self) -> None: ...

  def setM00(self, arg0: float) -> None: ...

  def setM01(self, arg0: float) -> None: ...

  def setM02(self, arg0: float) -> None: ...

  def setM10(self, arg0: float) -> None: ...

  def setM11(self, arg0: float) -> None: ...

  def setM12(self, arg0: float) -> None: ...

  def setM20(self, arg0: float) -> None: ...

  def setM21(self, arg0: float) -> None: ...

  def setM22(self, arg0: float) -> None: ...

  @overload
  def setRow(self, arg0: int, arg1: list[float]) -> None: ...

  @overload
  def setRow(self, arg0: int, arg1: Vector3f) -> None: ...

  @overload
  def setRow(self, arg0: int, arg1: float, arg2: float, arg3: float) -> None: ...

  def setScale(self, arg0: float) -> None: ...

  def setZero(self) -> None: ...

  @overload
  def sub(self, arg0: Matrix3f) -> None: ...

  @overload
  def sub(self, arg0: Matrix3f, arg1: Matrix3f) -> None: ...

  def toString(self) -> str: ...

  @overload
  def transform(self, arg0: Tuple3f) -> None: ...

  @overload
  def transform(self, arg0: Tuple3f, arg1: Tuple3f) -> None: ...

  @overload
  def transpose(self) -> None: ...

  @overload
  def transpose(self, arg0: Matrix3f) -> None: ...

  @overload
  def __init__(self):
    self.m00: float

    self.m01: float

    self.m02: float

    self.m10: float

    self.m11: float

    self.m12: float

    self.m20: float

    self.m21: float

    self.m22: float

  @overload
  def __init__(self, arg0: list[float]): ...
  @overload
  def __init__(self, arg0: Matrix3d): ...
  @overload
  def __init__(self, arg0: Matrix3f): ...
  @overload
  def __init__(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float): ...


class Matrix4d:

  @overload
  def add(self, arg0: float) -> None: ...

  @overload
  def add(self, arg0: Matrix4d) -> None: ...

  @overload
  def add(self, arg0: float, arg1: Matrix4d) -> None: ...

  @overload
  def add(self, arg0: Matrix4d, arg1: Matrix4d) -> None: ...

  def clone(self) -> object: ...

  def determinant(self) -> float: ...

  @overload
  def epsilonEquals(self, arg0: Matrix4d, arg1: float) -> bool: ...

  @overload
  def epsilonEquals(self, arg0: Matrix4d, arg1: float) -> bool: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def equals(self, arg0: Matrix4d) -> bool: ...

  @overload
  def get(self, arg0: Matrix3d) -> None: ...

  @overload
  def get(self, arg0: Matrix3f) -> None: ...

  @overload
  def get(self, arg0: Quat4d) -> None: ...

  @overload
  def get(self, arg0: Quat4f) -> None: ...

  @overload
  def get(self, arg0: Vector3d) -> None: ...

  @overload
  def get(self, arg0: Matrix3d, arg1: Vector3d) -> float: ...

  @overload
  def get(self, arg0: Matrix3f, arg1: Vector3d) -> float: ...

  @overload
  def getColumn(self, arg0: int, arg1: list[float]) -> None: ...

  @overload
  def getColumn(self, arg0: int, arg1: Vector4d) -> None: ...

  def getElement(self, arg0: int, arg1: int) -> float: ...

  def getM00(self) -> float: ...

  def getM01(self) -> float: ...

  def getM02(self) -> float: ...

  def getM03(self) -> float: ...

  def getM10(self) -> float: ...

  def getM11(self) -> float: ...

  def getM12(self) -> float: ...

  def getM13(self) -> float: ...

  def getM20(self) -> float: ...

  def getM21(self) -> float: ...

  def getM22(self) -> float: ...

  def getM23(self) -> float: ...

  def getM30(self) -> float: ...

  def getM31(self) -> float: ...

  def getM32(self) -> float: ...

  def getM33(self) -> float: ...

  @overload
  def getRotationScale(self, arg0: Matrix3d) -> None: ...

  @overload
  def getRotationScale(self, arg0: Matrix3f) -> None: ...

  @overload
  def getRow(self, arg0: int, arg1: list[float]) -> None: ...

  @overload
  def getRow(self, arg0: int, arg1: Vector4d) -> None: ...

  def getScale(self) -> float: ...

  def hashCode(self) -> int: ...

  @overload
  def invert(self) -> None: ...

  @overload
  def invert(self, arg0: Matrix4d) -> None: ...

  @overload
  def mul(self, arg0: float) -> None: ...

  @overload
  def mul(self, arg0: Matrix4d) -> None: ...

  @overload
  def mul(self, arg0: float, arg1: Matrix4d) -> None: ...

  @overload
  def mul(self, arg0: Matrix4d, arg1: Matrix4d) -> None: ...

  def mulTransposeBoth(self, arg0: Matrix4d, arg1: Matrix4d) -> None: ...

  def mulTransposeLeft(self, arg0: Matrix4d, arg1: Matrix4d) -> None: ...

  def mulTransposeRight(self, arg0: Matrix4d, arg1: Matrix4d) -> None: ...

  @overload
  def negate(self) -> None: ...

  @overload
  def negate(self, arg0: Matrix4d) -> None: ...

  def rotX(self, arg0: float) -> None: ...

  def rotY(self, arg0: float) -> None: ...

  def rotZ(self, arg0: float) -> None: ...

  @overload
  def set(self, arg0: list[float]) -> None: ...

  @overload
  def set(self, arg0: float) -> None: ...

  @overload
  def set(self, arg0: AxisAngle4d) -> None: ...

  @overload
  def set(self, arg0: AxisAngle4f) -> None: ...

  @overload
  def set(self, arg0: Matrix3d) -> None: ...

  @overload
  def set(self, arg0: Matrix3f) -> None: ...

  @overload
  def set(self, arg0: Matrix4d) -> None: ...

  @overload
  def set(self, arg0: Matrix4f) -> None: ...

  @overload
  def set(self, arg0: Quat4d) -> None: ...

  @overload
  def set(self, arg0: Quat4f) -> None: ...

  @overload
  def set(self, arg0: Vector3d) -> None: ...

  @overload
  def set(self, arg0: float, arg1: Vector3d) -> None: ...

  @overload
  def set(self, arg0: Vector3d, arg1: float) -> None: ...

  @overload
  def set(self, arg0: Matrix3d, arg1: Vector3d, arg2: float) -> None: ...

  @overload
  def set(self, arg0: Matrix3f, arg1: Vector3f, arg2: float) -> None: ...

  @overload
  def set(self, arg0: Quat4d, arg1: Vector3d, arg2: float) -> None: ...

  @overload
  def set(self, arg0: Quat4f, arg1: Vector3d, arg2: float) -> None: ...

  @overload
  def set(self, arg0: Quat4f, arg1: Vector3f, arg2: float) -> None: ...

  @overload
  def setColumn(self, arg0: int, arg1: list[float]) -> None: ...

  @overload
  def setColumn(self, arg0: int, arg1: Vector4d) -> None: ...

  @overload
  def setColumn(self, arg0: int, arg1: float, arg2: float, arg3: float, arg4: float) -> None: ...

  def setElement(self, arg0: int, arg1: int, arg2: float) -> None: ...

  def setIdentity(self) -> None: ...

  def setM00(self, arg0: float) -> None: ...

  def setM01(self, arg0: float) -> None: ...

  def setM02(self, arg0: float) -> None: ...

  def setM03(self, arg0: float) -> None: ...

  def setM10(self, arg0: float) -> None: ...

  def setM11(self, arg0: float) -> None: ...

  def setM12(self, arg0: float) -> None: ...

  def setM13(self, arg0: float) -> None: ...

  def setM20(self, arg0: float) -> None: ...

  def setM21(self, arg0: float) -> None: ...

  def setM22(self, arg0: float) -> None: ...

  def setM23(self, arg0: float) -> None: ...

  def setM30(self, arg0: float) -> None: ...

  def setM31(self, arg0: float) -> None: ...

  def setM32(self, arg0: float) -> None: ...

  def setM33(self, arg0: float) -> None: ...

  @overload
  def setRotation(self, arg0: AxisAngle4d) -> None: ...

  @overload
  def setRotation(self, arg0: Matrix3d) -> None: ...

  @overload
  def setRotation(self, arg0: Matrix3f) -> None: ...

  @overload
  def setRotation(self, arg0: Quat4d) -> None: ...

  @overload
  def setRotation(self, arg0: Quat4f) -> None: ...

  @overload
  def setRotationScale(self, arg0: Matrix3d) -> None: ...

  @overload
  def setRotationScale(self, arg0: Matrix3f) -> None: ...

  @overload
  def setRow(self, arg0: int, arg1: list[float]) -> None: ...

  @overload
  def setRow(self, arg0: int, arg1: Vector4d) -> None: ...

  @overload
  def setRow(self, arg0: int, arg1: float, arg2: float, arg3: float, arg4: float) -> None: ...

  def setScale(self, arg0: float) -> None: ...

  def setTranslation(self, arg0: Vector3d) -> None: ...

  def setZero(self) -> None: ...

  @overload
  def sub(self, arg0: Matrix4d) -> None: ...

  @overload
  def sub(self, arg0: Matrix4d, arg1: Matrix4d) -> None: ...

  def toString(self) -> str: ...

  @overload
  def transform(self, arg0: Point3d) -> None: ...

  @overload
  def transform(self, arg0: Point3f) -> None: ...

  @overload
  def transform(self, arg0: Tuple4d) -> None: ...

  @overload
  def transform(self, arg0: Tuple4f) -> None: ...

  @overload
  def transform(self, arg0: Vector3d) -> None: ...

  @overload
  def transform(self, arg0: Vector3f) -> None: ...

  @overload
  def transform(self, arg0: Point3d, arg1: Point3d) -> None: ...

  @overload
  def transform(self, arg0: Point3f, arg1: Point3f) -> None: ...

  @overload
  def transform(self, arg0: Tuple4d, arg1: Tuple4d) -> None: ...

  @overload
  def transform(self, arg0: Tuple4f, arg1: Tuple4f) -> None: ...

  @overload
  def transform(self, arg0: Vector3d, arg1: Vector3d) -> None: ...

  @overload
  def transform(self, arg0: Vector3f, arg1: Vector3f) -> None: ...

  @overload
  def transpose(self) -> None: ...

  @overload
  def transpose(self, arg0: Matrix4d) -> None: ...

  @overload
  def __init__(self):
    self.m00: float

    self.m01: float

    self.m02: float

    self.m03: float

    self.m10: float

    self.m11: float

    self.m12: float

    self.m13: float

    self.m20: float

    self.m21: float

    self.m22: float

    self.m23: float

    self.m30: float

    self.m31: float

    self.m32: float

    self.m33: float

  @overload
  def __init__(self, arg0: list[float]): ...
  @overload
  def __init__(self, arg0: Matrix4d): ...
  @overload
  def __init__(self, arg0: Matrix4f): ...
  @overload
  def __init__(self, arg0: Matrix3d, arg1: Vector3d, arg2: float): ...
  @overload
  def __init__(self, arg0: Matrix3f, arg1: Vector3d, arg2: float): ...
  @overload
  def __init__(self, arg0: Quat4d, arg1: Vector3d, arg2: float): ...
  @overload
  def __init__(self, arg0: Quat4f, arg1: Vector3d, arg2: float): ...
  @overload
  def __init__(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float, arg10: float, arg11: float, arg12: float, arg13: float, arg14: float, arg15: float): ...


class Matrix4f:

  @overload
  def add(self, arg0: float) -> None: ...

  @overload
  def add(self, arg0: Matrix4f) -> None: ...

  @overload
  def add(self, arg0: float, arg1: Matrix4f) -> None: ...

  @overload
  def add(self, arg0: Matrix4f, arg1: Matrix4f) -> None: ...

  def clone(self) -> object: ...

  def determinant(self) -> float: ...

  def epsilonEquals(self, arg0: Matrix4f, arg1: float) -> bool: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def equals(self, arg0: Matrix4f) -> bool: ...

  @overload
  def get(self, arg0: Matrix3d) -> None: ...

  @overload
  def get(self, arg0: Matrix3f) -> None: ...

  @overload
  def get(self, arg0: Quat4f) -> None: ...

  @overload
  def get(self, arg0: Vector3f) -> None: ...

  @overload
  def get(self, arg0: Matrix3f, arg1: Vector3f) -> float: ...

  @overload
  def getColumn(self, arg0: int, arg1: list[float]) -> None: ...

  @overload
  def getColumn(self, arg0: int, arg1: Vector4f) -> None: ...

  def getElement(self, arg0: int, arg1: int) -> float: ...

  def getM00(self) -> float: ...

  def getM01(self) -> float: ...

  def getM02(self) -> float: ...

  def getM03(self) -> float: ...

  def getM10(self) -> float: ...

  def getM11(self) -> float: ...

  def getM12(self) -> float: ...

  def getM13(self) -> float: ...

  def getM20(self) -> float: ...

  def getM21(self) -> float: ...

  def getM22(self) -> float: ...

  def getM23(self) -> float: ...

  def getM30(self) -> float: ...

  def getM31(self) -> float: ...

  def getM32(self) -> float: ...

  def getM33(self) -> float: ...

  def getRotationScale(self, arg0: Matrix3f) -> None: ...

  @overload
  def getRow(self, arg0: int, arg1: list[float]) -> None: ...

  @overload
  def getRow(self, arg0: int, arg1: Vector4f) -> None: ...

  def getScale(self) -> float: ...

  def hashCode(self) -> int: ...

  @overload
  def invert(self) -> None: ...

  @overload
  def invert(self, arg0: Matrix4f) -> None: ...

  @overload
  def mul(self, arg0: float) -> None: ...

  @overload
  def mul(self, arg0: Matrix4f) -> None: ...

  @overload
  def mul(self, arg0: float, arg1: Matrix4f) -> None: ...

  @overload
  def mul(self, arg0: Matrix4f, arg1: Matrix4f) -> None: ...

  def mulTransposeBoth(self, arg0: Matrix4f, arg1: Matrix4f) -> None: ...

  def mulTransposeLeft(self, arg0: Matrix4f, arg1: Matrix4f) -> None: ...

  def mulTransposeRight(self, arg0: Matrix4f, arg1: Matrix4f) -> None: ...

  @overload
  def negate(self) -> None: ...

  @overload
  def negate(self, arg0: Matrix4f) -> None: ...

  def rotX(self, arg0: float) -> None: ...

  def rotY(self, arg0: float) -> None: ...

  def rotZ(self, arg0: float) -> None: ...

  @overload
  def set(self, arg0: list[float]) -> None: ...

  @overload
  def set(self, arg0: float) -> None: ...

  @overload
  def set(self, arg0: AxisAngle4d) -> None: ...

  @overload
  def set(self, arg0: AxisAngle4f) -> None: ...

  @overload
  def set(self, arg0: Matrix3d) -> None: ...

  @overload
  def set(self, arg0: Matrix3f) -> None: ...

  @overload
  def set(self, arg0: Matrix4d) -> None: ...

  @overload
  def set(self, arg0: Matrix4f) -> None: ...

  @overload
  def set(self, arg0: Quat4d) -> None: ...

  @overload
  def set(self, arg0: Quat4f) -> None: ...

  @overload
  def set(self, arg0: Vector3f) -> None: ...

  @overload
  def set(self, arg0: float, arg1: Vector3f) -> None: ...

  @overload
  def set(self, arg0: Vector3f, arg1: float) -> None: ...

  @overload
  def set(self, arg0: Matrix3d, arg1: Vector3d, arg2: float) -> None: ...

  @overload
  def set(self, arg0: Matrix3f, arg1: Vector3f, arg2: float) -> None: ...

  @overload
  def set(self, arg0: Quat4d, arg1: Vector3d, arg2: float) -> None: ...

  @overload
  def set(self, arg0: Quat4f, arg1: Vector3f, arg2: float) -> None: ...

  @overload
  def setColumn(self, arg0: int, arg1: list[float]) -> None: ...

  @overload
  def setColumn(self, arg0: int, arg1: Vector4f) -> None: ...

  @overload
  def setColumn(self, arg0: int, arg1: float, arg2: float, arg3: float, arg4: float) -> None: ...

  def setElement(self, arg0: int, arg1: int, arg2: float) -> None: ...

  def setIdentity(self) -> None: ...

  def setM00(self, arg0: float) -> None: ...

  def setM01(self, arg0: float) -> None: ...

  def setM02(self, arg0: float) -> None: ...

  def setM03(self, arg0: float) -> None: ...

  def setM10(self, arg0: float) -> None: ...

  def setM11(self, arg0: float) -> None: ...

  def setM12(self, arg0: float) -> None: ...

  def setM13(self, arg0: float) -> None: ...

  def setM20(self, arg0: float) -> None: ...

  def setM21(self, arg0: float) -> None: ...

  def setM22(self, arg0: float) -> None: ...

  def setM23(self, arg0: float) -> None: ...

  def setM30(self, arg0: float) -> None: ...

  def setM31(self, arg0: float) -> None: ...

  def setM32(self, arg0: float) -> None: ...

  def setM33(self, arg0: float) -> None: ...

  @overload
  def setRotation(self, arg0: AxisAngle4f) -> None: ...

  @overload
  def setRotation(self, arg0: Matrix3d) -> None: ...

  @overload
  def setRotation(self, arg0: Matrix3f) -> None: ...

  @overload
  def setRotation(self, arg0: Quat4d) -> None: ...

  @overload
  def setRotation(self, arg0: Quat4f) -> None: ...

  def setRotationScale(self, arg0: Matrix3f) -> None: ...

  @overload
  def setRow(self, arg0: int, arg1: list[float]) -> None: ...

  @overload
  def setRow(self, arg0: int, arg1: Vector4f) -> None: ...

  @overload
  def setRow(self, arg0: int, arg1: float, arg2: float, arg3: float, arg4: float) -> None: ...

  def setScale(self, arg0: float) -> None: ...

  def setTranslation(self, arg0: Vector3f) -> None: ...

  def setZero(self) -> None: ...

  @overload
  def sub(self, arg0: Matrix4f) -> None: ...

  @overload
  def sub(self, arg0: Matrix4f, arg1: Matrix4f) -> None: ...

  def toString(self) -> str: ...

  @overload
  def transform(self, arg0: Point3f) -> None: ...

  @overload
  def transform(self, arg0: Tuple4f) -> None: ...

  @overload
  def transform(self, arg0: Vector3f) -> None: ...

  @overload
  def transform(self, arg0: Point3f, arg1: Point3f) -> None: ...

  @overload
  def transform(self, arg0: Tuple4f, arg1: Tuple4f) -> None: ...

  @overload
  def transform(self, arg0: Vector3f, arg1: Vector3f) -> None: ...

  @overload
  def transpose(self) -> None: ...

  @overload
  def transpose(self, arg0: Matrix4f) -> None: ...

  @overload
  def __init__(self):
    self.m00: float

    self.m01: float

    self.m02: float

    self.m03: float

    self.m10: float

    self.m11: float

    self.m12: float

    self.m13: float

    self.m20: float

    self.m21: float

    self.m22: float

    self.m23: float

    self.m30: float

    self.m31: float

    self.m32: float

    self.m33: float

  @overload
  def __init__(self, arg0: list[float]): ...
  @overload
  def __init__(self, arg0: Matrix4d): ...
  @overload
  def __init__(self, arg0: Matrix4f): ...
  @overload
  def __init__(self, arg0: Matrix3f, arg1: Vector3f, arg2: float): ...
  @overload
  def __init__(self, arg0: Quat4f, arg1: Vector3f, arg2: float): ...
  @overload
  def __init__(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float, arg10: float, arg11: float, arg12: float, arg13: float, arg14: float, arg15: float): ...


class MismatchedSizeException(RuntimeException):

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: str): ...


class Point2d(Tuple2d):

  def distance(self, arg0: Point2d) -> float: ...

  def distanceL1(self, arg0: Point2d) -> float: ...

  def distanceLinf(self, arg0: Point2d) -> float: ...

  def distanceSquared(self, arg0: Point2d) -> float: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: list[float]): ...
  @overload
  def __init__(self, arg0: Point2d): ...
  @overload
  def __init__(self, arg0: Point2f): ...
  @overload
  def __init__(self, arg0: Tuple2d): ...
  @overload
  def __init__(self, arg0: Tuple2f): ...
  @overload
  def __init__(self, arg0: float, arg1: float): ...


class Point2f(Tuple2f):

  def distance(self, arg0: Point2f) -> float: ...

  def distanceL1(self, arg0: Point2f) -> float: ...

  def distanceLinf(self, arg0: Point2f) -> float: ...

  def distanceSquared(self, arg0: Point2f) -> float: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: list[float]): ...
  @overload
  def __init__(self, arg0: Point2d): ...
  @overload
  def __init__(self, arg0: Point2f): ...
  @overload
  def __init__(self, arg0: Tuple2d): ...
  @overload
  def __init__(self, arg0: Tuple2f): ...
  @overload
  def __init__(self, arg0: float, arg1: float): ...


class Point2i(Tuple2i):

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: list[int]): ...
  @overload
  def __init__(self, arg0: Tuple2i): ...
  @overload
  def __init__(self, arg0: int, arg1: int): ...


class Point3d(Tuple3d):

  def distance(self, arg0: Point3d) -> float: ...

  def distanceL1(self, arg0: Point3d) -> float: ...

  def distanceLinf(self, arg0: Point3d) -> float: ...

  def distanceSquared(self, arg0: Point3d) -> float: ...

  def project(self, arg0: Point4d) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: list[float]): ...
  @overload
  def __init__(self, arg0: Point3d): ...
  @overload
  def __init__(self, arg0: Point3f): ...
  @overload
  def __init__(self, arg0: Tuple3d): ...
  @overload
  def __init__(self, arg0: Tuple3f): ...
  @overload
  def __init__(self, arg0: float, arg1: float, arg2: float): ...


class Point3f(Tuple3f):

  def distance(self, arg0: Point3f) -> float: ...

  def distanceL1(self, arg0: Point3f) -> float: ...

  def distanceLinf(self, arg0: Point3f) -> float: ...

  def distanceSquared(self, arg0: Point3f) -> float: ...

  def project(self, arg0: Point4f) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: list[float]): ...
  @overload
  def __init__(self, arg0: Point3d): ...
  @overload
  def __init__(self, arg0: Point3f): ...
  @overload
  def __init__(self, arg0: Tuple3d): ...
  @overload
  def __init__(self, arg0: Tuple3f): ...
  @overload
  def __init__(self, arg0: float, arg1: float, arg2: float): ...


class Point3i(Tuple3i):

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: list[int]): ...
  @overload
  def __init__(self, arg0: Tuple3i): ...
  @overload
  def __init__(self, arg0: int, arg1: int, arg2: int): ...


class Point4d(Tuple4d):

  def distance(self, arg0: Point4d) -> float: ...

  def distanceL1(self, arg0: Point4d) -> float: ...

  def distanceLinf(self, arg0: Point4d) -> float: ...

  def distanceSquared(self, arg0: Point4d) -> float: ...

  def project(self, arg0: Point4d) -> None: ...

  def set(self, arg0: Tuple3d) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: list[float]): ...
  @overload
  def __init__(self, arg0: Point4d): ...
  @overload
  def __init__(self, arg0: Point4f): ...
  @overload
  def __init__(self, arg0: Tuple3d): ...
  @overload
  def __init__(self, arg0: Tuple4d): ...
  @overload
  def __init__(self, arg0: Tuple4f): ...
  @overload
  def __init__(self, arg0: float, arg1: float, arg2: float, arg3: float): ...


class Point4f(Tuple4f):

  def distance(self, arg0: Point4f) -> float: ...

  def distanceL1(self, arg0: Point4f) -> float: ...

  def distanceLinf(self, arg0: Point4f) -> float: ...

  def distanceSquared(self, arg0: Point4f) -> float: ...

  def project(self, arg0: Point4f) -> None: ...

  def set(self, arg0: Tuple3f) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: list[float]): ...
  @overload
  def __init__(self, arg0: Point4d): ...
  @overload
  def __init__(self, arg0: Point4f): ...
  @overload
  def __init__(self, arg0: Tuple3f): ...
  @overload
  def __init__(self, arg0: Tuple4d): ...
  @overload
  def __init__(self, arg0: Tuple4f): ...
  @overload
  def __init__(self, arg0: float, arg1: float, arg2: float, arg3: float): ...


class Point4i(Tuple4i):

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: list[int]): ...
  @overload
  def __init__(self, arg0: Tuple4i): ...
  @overload
  def __init__(self, arg0: int, arg1: int, arg2: int, arg3: int): ...


class Quat4d(Tuple4d):

  @overload
  def conjugate(self) -> None: ...

  @overload
  def conjugate(self, arg0: Quat4d) -> None: ...

  @overload
  def interpolate(self, arg0: Quat4d, arg1: float) -> None: ...

  @overload
  def interpolate(self, arg0: Quat4d, arg1: Quat4d, arg2: float) -> None: ...

  @overload
  def inverse(self) -> None: ...

  @overload
  def inverse(self, arg0: Quat4d) -> None: ...

  @overload
  def mul(self, arg0: Quat4d) -> None: ...

  @overload
  def mul(self, arg0: Quat4d, arg1: Quat4d) -> None: ...

  @overload
  def mulInverse(self, arg0: Quat4d) -> None: ...

  @overload
  def mulInverse(self, arg0: Quat4d, arg1: Quat4d) -> None: ...

  @overload
  def normalize(self) -> None: ...

  @overload
  def normalize(self, arg0: Quat4d) -> None: ...

  @overload
  def set(self, arg0: AxisAngle4d) -> None: ...

  @overload
  def set(self, arg0: AxisAngle4f) -> None: ...

  @overload
  def set(self, arg0: Matrix3d) -> None: ...

  @overload
  def set(self, arg0: Matrix3f) -> None: ...

  @overload
  def set(self, arg0: Matrix4d) -> None: ...

  @overload
  def set(self, arg0: Matrix4f) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: list[float]): ...
  @overload
  def __init__(self, arg0: Quat4d): ...
  @overload
  def __init__(self, arg0: Quat4f): ...
  @overload
  def __init__(self, arg0: Tuple4d): ...
  @overload
  def __init__(self, arg0: Tuple4f): ...
  @overload
  def __init__(self, arg0: float, arg1: float, arg2: float, arg3: float): ...


class Quat4f(Tuple4f):

  @overload
  def conjugate(self) -> None: ...

  @overload
  def conjugate(self, arg0: Quat4f) -> None: ...

  @overload
  def interpolate(self, arg0: Quat4f, arg1: float) -> None: ...

  @overload
  def interpolate(self, arg0: Quat4f, arg1: Quat4f, arg2: float) -> None: ...

  @overload
  def inverse(self) -> None: ...

  @overload
  def inverse(self, arg0: Quat4f) -> None: ...

  @overload
  def mul(self, arg0: Quat4f) -> None: ...

  @overload
  def mul(self, arg0: Quat4f, arg1: Quat4f) -> None: ...

  @overload
  def mulInverse(self, arg0: Quat4f) -> None: ...

  @overload
  def mulInverse(self, arg0: Quat4f, arg1: Quat4f) -> None: ...

  @overload
  def normalize(self) -> None: ...

  @overload
  def normalize(self, arg0: Quat4f) -> None: ...

  @overload
  def set(self, arg0: AxisAngle4d) -> None: ...

  @overload
  def set(self, arg0: AxisAngle4f) -> None: ...

  @overload
  def set(self, arg0: Matrix3d) -> None: ...

  @overload
  def set(self, arg0: Matrix3f) -> None: ...

  @overload
  def set(self, arg0: Matrix4d) -> None: ...

  @overload
  def set(self, arg0: Matrix4f) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: list[float]): ...
  @overload
  def __init__(self, arg0: Quat4d): ...
  @overload
  def __init__(self, arg0: Quat4f): ...
  @overload
  def __init__(self, arg0: Tuple4d): ...
  @overload
  def __init__(self, arg0: Tuple4f): ...
  @overload
  def __init__(self, arg0: float, arg1: float, arg2: float, arg3: float): ...


class SingularMatrixException(RuntimeException):

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: str): ...


class TexCoord2f(Tuple2f):

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: list[float]): ...
  @overload
  def __init__(self, arg0: TexCoord2f): ...
  @overload
  def __init__(self, arg0: Tuple2f): ...
  @overload
  def __init__(self, arg0: float, arg1: float): ...


class TexCoord3f(Tuple3f):

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: list[float]): ...
  @overload
  def __init__(self, arg0: TexCoord3f): ...
  @overload
  def __init__(self, arg0: Tuple3d): ...
  @overload
  def __init__(self, arg0: Tuple3f): ...
  @overload
  def __init__(self, arg0: float, arg1: float, arg2: float): ...


class TexCoord4f(Tuple4f):

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: list[float]): ...
  @overload
  def __init__(self, arg0: TexCoord4f): ...
  @overload
  def __init__(self, arg0: Tuple4d): ...
  @overload
  def __init__(self, arg0: Tuple4f): ...
  @overload
  def __init__(self, arg0: float, arg1: float, arg2: float, arg3: float): ...


class Tuple2d:

  @overload
  def absolute(self) -> None: ...

  @overload
  def absolute(self, arg0: Tuple2d) -> None: ...

  @overload
  def add(self, arg0: Tuple2d) -> None: ...

  @overload
  def add(self, arg0: Tuple2d, arg1: Tuple2d) -> None: ...

  @overload
  def clamp(self, arg0: float, arg1: float) -> None: ...

  @overload
  def clamp(self, arg0: float, arg1: float, arg2: Tuple2d) -> None: ...

  @overload
  def clampMax(self, arg0: float) -> None: ...

  @overload
  def clampMax(self, arg0: float, arg1: Tuple2d) -> None: ...

  @overload
  def clampMin(self, arg0: float) -> None: ...

  @overload
  def clampMin(self, arg0: float, arg1: Tuple2d) -> None: ...

  def clone(self) -> object: ...

  def epsilonEquals(self, arg0: Tuple2d, arg1: float) -> bool: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def equals(self, arg0: Tuple2d) -> bool: ...

  def get(self, arg0: list[float]) -> None: ...

  def getX(self) -> float: ...

  def getY(self) -> float: ...

  def hashCode(self) -> int: ...

  @overload
  def interpolate(self, arg0: Tuple2d, arg1: float) -> None: ...

  @overload
  def interpolate(self, arg0: Tuple2d, arg1: Tuple2d, arg2: float) -> None: ...

  @overload
  def negate(self) -> None: ...

  @overload
  def negate(self, arg0: Tuple2d) -> None: ...

  @overload
  def scale(self, arg0: float) -> None: ...

  @overload
  def scale(self, arg0: float, arg1: Tuple2d) -> None: ...

  @overload
  def scaleAdd(self, arg0: float, arg1: Tuple2d) -> None: ...

  @overload
  def scaleAdd(self, arg0: float, arg1: Tuple2d, arg2: Tuple2d) -> None: ...

  @overload
  def set(self, arg0: list[float]) -> None: ...

  @overload
  def set(self, arg0: Tuple2d) -> None: ...

  @overload
  def set(self, arg0: Tuple2f) -> None: ...

  @overload
  def set(self, arg0: float, arg1: float) -> None: ...

  def setX(self, arg0: float) -> None: ...

  def setY(self, arg0: float) -> None: ...

  @overload
  def sub(self, arg0: Tuple2d) -> None: ...

  @overload
  def sub(self, arg0: Tuple2d, arg1: Tuple2d) -> None: ...

  def toString(self) -> str: ...

  @overload
  def __init__(self):
    self.x: float

    self.y: float

  @overload
  def __init__(self, arg0: list[float]): ...
  @overload
  def __init__(self, arg0: Tuple2d): ...
  @overload
  def __init__(self, arg0: Tuple2f): ...
  @overload
  def __init__(self, arg0: float, arg1: float): ...


class Tuple2f:

  @overload
  def absolute(self) -> None: ...

  @overload
  def absolute(self, arg0: Tuple2f) -> None: ...

  @overload
  def add(self, arg0: Tuple2f) -> None: ...

  @overload
  def add(self, arg0: Tuple2f, arg1: Tuple2f) -> None: ...

  @overload
  def clamp(self, arg0: float, arg1: float) -> None: ...

  @overload
  def clamp(self, arg0: float, arg1: float, arg2: Tuple2f) -> None: ...

  @overload
  def clampMax(self, arg0: float) -> None: ...

  @overload
  def clampMax(self, arg0: float, arg1: Tuple2f) -> None: ...

  @overload
  def clampMin(self, arg0: float) -> None: ...

  @overload
  def clampMin(self, arg0: float, arg1: Tuple2f) -> None: ...

  def clone(self) -> object: ...

  def epsilonEquals(self, arg0: Tuple2f, arg1: float) -> bool: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def equals(self, arg0: Tuple2f) -> bool: ...

  def get(self, arg0: list[float]) -> None: ...

  def getX(self) -> float: ...

  def getY(self) -> float: ...

  def hashCode(self) -> int: ...

  @overload
  def interpolate(self, arg0: Tuple2f, arg1: float) -> None: ...

  @overload
  def interpolate(self, arg0: Tuple2f, arg1: Tuple2f, arg2: float) -> None: ...

  @overload
  def negate(self) -> None: ...

  @overload
  def negate(self, arg0: Tuple2f) -> None: ...

  @overload
  def scale(self, arg0: float) -> None: ...

  @overload
  def scale(self, arg0: float, arg1: Tuple2f) -> None: ...

  @overload
  def scaleAdd(self, arg0: float, arg1: Tuple2f) -> None: ...

  @overload
  def scaleAdd(self, arg0: float, arg1: Tuple2f, arg2: Tuple2f) -> None: ...

  @overload
  def set(self, arg0: list[float]) -> None: ...

  @overload
  def set(self, arg0: Tuple2d) -> None: ...

  @overload
  def set(self, arg0: Tuple2f) -> None: ...

  @overload
  def set(self, arg0: float, arg1: float) -> None: ...

  def setX(self, arg0: float) -> None: ...

  def setY(self, arg0: float) -> None: ...

  @overload
  def sub(self, arg0: Tuple2f) -> None: ...

  @overload
  def sub(self, arg0: Tuple2f, arg1: Tuple2f) -> None: ...

  def toString(self) -> str: ...

  @overload
  def __init__(self):
    self.x: float

    self.y: float

  @overload
  def __init__(self, arg0: list[float]): ...
  @overload
  def __init__(self, arg0: Tuple2d): ...
  @overload
  def __init__(self, arg0: Tuple2f): ...
  @overload
  def __init__(self, arg0: float, arg1: float): ...


class Tuple2i:

  @overload
  def absolute(self) -> None: ...

  @overload
  def absolute(self, arg0: Tuple2i) -> None: ...

  @overload
  def add(self, arg0: Tuple2i) -> None: ...

  @overload
  def add(self, arg0: Tuple2i, arg1: Tuple2i) -> None: ...

  @overload
  def clamp(self, arg0: int, arg1: int) -> None: ...

  @overload
  def clamp(self, arg0: int, arg1: int, arg2: Tuple2i) -> None: ...

  @overload
  def clampMax(self, arg0: int) -> None: ...

  @overload
  def clampMax(self, arg0: int, arg1: Tuple2i) -> None: ...

  @overload
  def clampMin(self, arg0: int) -> None: ...

  @overload
  def clampMin(self, arg0: int, arg1: Tuple2i) -> None: ...

  def clone(self) -> object: ...

  def equals(self, arg0: object) -> bool: ...

  @overload
  def get(self, arg0: list[int]) -> None: ...

  @overload
  def get(self, arg0: Tuple2i) -> None: ...

  def getX(self) -> int: ...

  def getY(self) -> int: ...

  def hashCode(self) -> int: ...

  @overload
  def negate(self) -> None: ...

  @overload
  def negate(self, arg0: Tuple2i) -> None: ...

  @overload
  def scale(self, arg0: int) -> None: ...

  @overload
  def scale(self, arg0: int, arg1: Tuple2i) -> None: ...

  @overload
  def scaleAdd(self, arg0: int, arg1: Tuple2i) -> None: ...

  @overload
  def scaleAdd(self, arg0: int, arg1: Tuple2i, arg2: Tuple2i) -> None: ...

  @overload
  def set(self, arg0: list[int]) -> None: ...

  @overload
  def set(self, arg0: Tuple2i) -> None: ...

  @overload
  def set(self, arg0: int, arg1: int) -> None: ...

  def setX(self, arg0: int) -> None: ...

  def setY(self, arg0: int) -> None: ...

  @overload
  def sub(self, arg0: Tuple2i) -> None: ...

  @overload
  def sub(self, arg0: Tuple2i, arg1: Tuple2i) -> None: ...

  def toString(self) -> str: ...

  @overload
  def __init__(self):
    self.x: int

    self.y: int

  @overload
  def __init__(self, arg0: list[int]): ...
  @overload
  def __init__(self, arg0: Tuple2i): ...
  @overload
  def __init__(self, arg0: int, arg1: int): ...


class Tuple3b:

  def clone(self) -> object: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def equals(self, arg0: Tuple3b) -> bool: ...

  @overload
  def get(self, arg0: list[int]) -> None: ...

  @overload
  def get(self, arg0: Tuple3b) -> None: ...

  def getX(self) -> int: ...

  def getY(self) -> int: ...

  def getZ(self) -> int: ...

  def hashCode(self) -> int: ...

  @overload
  def set(self, arg0: list[int]) -> None: ...

  @overload
  def set(self, arg0: Tuple3b) -> None: ...

  def setX(self, arg0: int) -> None: ...

  def setY(self, arg0: int) -> None: ...

  def setZ(self, arg0: int) -> None: ...

  def toString(self) -> str: ...

  @overload
  def __init__(self):
    self.x: int

    self.y: int

    self.z: int

  @overload
  def __init__(self, arg0: list[int]): ...
  @overload
  def __init__(self, arg0: Tuple3b): ...
  @overload
  def __init__(self, arg0: int, arg1: int, arg2: int): ...


class Tuple3d:

  @overload
  def absolute(self) -> None: ...

  @overload
  def absolute(self, arg0: Tuple3d) -> None: ...

  @overload
  def add(self, arg0: Tuple3d) -> None: ...

  @overload
  def add(self, arg0: Tuple3d, arg1: Tuple3d) -> None: ...

  @overload
  def clamp(self, arg0: float, arg1: float) -> None: ...

  @overload
  def clamp(self, arg0: float, arg1: float) -> None: ...

  @overload
  def clamp(self, arg0: float, arg1: float, arg2: Tuple3d) -> None: ...

  @overload
  def clamp(self, arg0: float, arg1: float, arg2: Tuple3d) -> None: ...

  @overload
  def clampMax(self, arg0: float) -> None: ...

  @overload
  def clampMax(self, arg0: float) -> None: ...

  @overload
  def clampMax(self, arg0: float, arg1: Tuple3d) -> None: ...

  @overload
  def clampMax(self, arg0: float, arg1: Tuple3d) -> None: ...

  @overload
  def clampMin(self, arg0: float) -> None: ...

  @overload
  def clampMin(self, arg0: float) -> None: ...

  @overload
  def clampMin(self, arg0: float, arg1: Tuple3d) -> None: ...

  @overload
  def clampMin(self, arg0: float, arg1: Tuple3d) -> None: ...

  def clone(self) -> object: ...

  def epsilonEquals(self, arg0: Tuple3d, arg1: float) -> bool: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def equals(self, arg0: Tuple3d) -> bool: ...

  @overload
  def get(self, arg0: list[float]) -> None: ...

  @overload
  def get(self, arg0: Tuple3d) -> None: ...

  def getX(self) -> float: ...

  def getY(self) -> float: ...

  def getZ(self) -> float: ...

  def hashCode(self) -> int: ...

  @overload
  def interpolate(self, arg0: Tuple3d, arg1: float) -> None: ...

  @overload
  def interpolate(self, arg0: Tuple3d, arg1: float) -> None: ...

  @overload
  def interpolate(self, arg0: Tuple3d, arg1: Tuple3d, arg2: float) -> None: ...

  @overload
  def interpolate(self, arg0: Tuple3d, arg1: Tuple3d, arg2: float) -> None: ...

  @overload
  def negate(self) -> None: ...

  @overload
  def negate(self, arg0: Tuple3d) -> None: ...

  @overload
  def scale(self, arg0: float) -> None: ...

  @overload
  def scale(self, arg0: float, arg1: Tuple3d) -> None: ...

  @overload
  def scaleAdd(self, arg0: float, arg1: Tuple3d) -> None: ...

  @overload
  def scaleAdd(self, arg0: float, arg1: Tuple3f) -> None: ...

  @overload
  def scaleAdd(self, arg0: float, arg1: Tuple3d, arg2: Tuple3d) -> None: ...

  @overload
  def set(self, arg0: list[float]) -> None: ...

  @overload
  def set(self, arg0: Tuple3d) -> None: ...

  @overload
  def set(self, arg0: Tuple3f) -> None: ...

  @overload
  def set(self, arg0: float, arg1: float, arg2: float) -> None: ...

  def setX(self, arg0: float) -> None: ...

  def setY(self, arg0: float) -> None: ...

  def setZ(self, arg0: float) -> None: ...

  @overload
  def sub(self, arg0: Tuple3d) -> None: ...

  @overload
  def sub(self, arg0: Tuple3d, arg1: Tuple3d) -> None: ...

  def toString(self) -> str: ...

  @overload
  def __init__(self):
    self.x: float

    self.y: float

    self.z: float

  @overload
  def __init__(self, arg0: list[float]): ...
  @overload
  def __init__(self, arg0: Tuple3d): ...
  @overload
  def __init__(self, arg0: Tuple3f): ...
  @overload
  def __init__(self, arg0: float, arg1: float, arg2: float): ...


class Tuple3f:

  @overload
  def absolute(self) -> None: ...

  @overload
  def absolute(self, arg0: Tuple3f) -> None: ...

  @overload
  def add(self, arg0: Tuple3f) -> None: ...

  @overload
  def add(self, arg0: Tuple3f, arg1: Tuple3f) -> None: ...

  @overload
  def clamp(self, arg0: float, arg1: float) -> None: ...

  @overload
  def clamp(self, arg0: float, arg1: float, arg2: Tuple3f) -> None: ...

  @overload
  def clampMax(self, arg0: float) -> None: ...

  @overload
  def clampMax(self, arg0: float, arg1: Tuple3f) -> None: ...

  @overload
  def clampMin(self, arg0: float) -> None: ...

  @overload
  def clampMin(self, arg0: float, arg1: Tuple3f) -> None: ...

  def clone(self) -> object: ...

  def epsilonEquals(self, arg0: Tuple3f, arg1: float) -> bool: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def equals(self, arg0: Tuple3f) -> bool: ...

  @overload
  def get(self, arg0: list[float]) -> None: ...

  @overload
  def get(self, arg0: Tuple3f) -> None: ...

  def getX(self) -> float: ...

  def getY(self) -> float: ...

  def getZ(self) -> float: ...

  def hashCode(self) -> int: ...

  @overload
  def interpolate(self, arg0: Tuple3f, arg1: float) -> None: ...

  @overload
  def interpolate(self, arg0: Tuple3f, arg1: Tuple3f, arg2: float) -> None: ...

  @overload
  def negate(self) -> None: ...

  @overload
  def negate(self, arg0: Tuple3f) -> None: ...

  @overload
  def scale(self, arg0: float) -> None: ...

  @overload
  def scale(self, arg0: float, arg1: Tuple3f) -> None: ...

  @overload
  def scaleAdd(self, arg0: float, arg1: Tuple3f) -> None: ...

  @overload
  def scaleAdd(self, arg0: float, arg1: Tuple3f, arg2: Tuple3f) -> None: ...

  @overload
  def set(self, arg0: list[float]) -> None: ...

  @overload
  def set(self, arg0: Tuple3d) -> None: ...

  @overload
  def set(self, arg0: Tuple3f) -> None: ...

  @overload
  def set(self, arg0: float, arg1: float, arg2: float) -> None: ...

  def setX(self, arg0: float) -> None: ...

  def setY(self, arg0: float) -> None: ...

  def setZ(self, arg0: float) -> None: ...

  @overload
  def sub(self, arg0: Tuple3f) -> None: ...

  @overload
  def sub(self, arg0: Tuple3f, arg1: Tuple3f) -> None: ...

  def toString(self) -> str: ...

  @overload
  def __init__(self):
    self.x: float

    self.y: float

    self.z: float

  @overload
  def __init__(self, arg0: list[float]): ...
  @overload
  def __init__(self, arg0: Tuple3d): ...
  @overload
  def __init__(self, arg0: Tuple3f): ...
  @overload
  def __init__(self, arg0: float, arg1: float, arg2: float): ...


class Tuple3i:

  @overload
  def absolute(self) -> None: ...

  @overload
  def absolute(self, arg0: Tuple3i) -> None: ...

  @overload
  def add(self, arg0: Tuple3i) -> None: ...

  @overload
  def add(self, arg0: Tuple3i, arg1: Tuple3i) -> None: ...

  @overload
  def clamp(self, arg0: int, arg1: int) -> None: ...

  @overload
  def clamp(self, arg0: int, arg1: int, arg2: Tuple3i) -> None: ...

  @overload
  def clampMax(self, arg0: int) -> None: ...

  @overload
  def clampMax(self, arg0: int, arg1: Tuple3i) -> None: ...

  @overload
  def clampMin(self, arg0: int) -> None: ...

  @overload
  def clampMin(self, arg0: int, arg1: Tuple3i) -> None: ...

  def clone(self) -> object: ...

  def equals(self, arg0: object) -> bool: ...

  @overload
  def get(self, arg0: list[int]) -> None: ...

  @overload
  def get(self, arg0: Tuple3i) -> None: ...

  def getX(self) -> int: ...

  def getY(self) -> int: ...

  def getZ(self) -> int: ...

  def hashCode(self) -> int: ...

  @overload
  def negate(self) -> None: ...

  @overload
  def negate(self, arg0: Tuple3i) -> None: ...

  @overload
  def scale(self, arg0: int) -> None: ...

  @overload
  def scale(self, arg0: int, arg1: Tuple3i) -> None: ...

  @overload
  def scaleAdd(self, arg0: int, arg1: Tuple3i) -> None: ...

  @overload
  def scaleAdd(self, arg0: int, arg1: Tuple3i, arg2: Tuple3i) -> None: ...

  @overload
  def set(self, arg0: list[int]) -> None: ...

  @overload
  def set(self, arg0: Tuple3i) -> None: ...

  @overload
  def set(self, arg0: int, arg1: int, arg2: int) -> None: ...

  def setX(self, arg0: int) -> None: ...

  def setY(self, arg0: int) -> None: ...

  def setZ(self, arg0: int) -> None: ...

  @overload
  def sub(self, arg0: Tuple3i) -> None: ...

  @overload
  def sub(self, arg0: Tuple3i, arg1: Tuple3i) -> None: ...

  def toString(self) -> str: ...

  @overload
  def __init__(self):
    self.x: int

    self.y: int

    self.z: int

  @overload
  def __init__(self, arg0: list[int]): ...
  @overload
  def __init__(self, arg0: Tuple3i): ...
  @overload
  def __init__(self, arg0: int, arg1: int, arg2: int): ...


class Tuple4b:

  def clone(self) -> object: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def equals(self, arg0: Tuple4b) -> bool: ...

  @overload
  def get(self, arg0: list[int]) -> None: ...

  @overload
  def get(self, arg0: Tuple4b) -> None: ...

  def getW(self) -> int: ...

  def getX(self) -> int: ...

  def getY(self) -> int: ...

  def getZ(self) -> int: ...

  def hashCode(self) -> int: ...

  @overload
  def set(self, arg0: list[int]) -> None: ...

  @overload
  def set(self, arg0: Tuple4b) -> None: ...

  def setW(self, arg0: int) -> None: ...

  def setX(self, arg0: int) -> None: ...

  def setY(self, arg0: int) -> None: ...

  def setZ(self, arg0: int) -> None: ...

  def toString(self) -> str: ...

  @overload
  def __init__(self):
    self.w: int

    self.x: int

    self.y: int

    self.z: int

  @overload
  def __init__(self, arg0: list[int]): ...
  @overload
  def __init__(self, arg0: Tuple4b): ...
  @overload
  def __init__(self, arg0: int, arg1: int, arg2: int, arg3: int): ...


class Tuple4d:

  @overload
  def absolute(self) -> None: ...

  @overload
  def absolute(self, arg0: Tuple4d) -> None: ...

  @overload
  def add(self, arg0: Tuple4d) -> None: ...

  @overload
  def add(self, arg0: Tuple4d, arg1: Tuple4d) -> None: ...

  @overload
  def clamp(self, arg0: float, arg1: float) -> None: ...

  @overload
  def clamp(self, arg0: float, arg1: float) -> None: ...

  @overload
  def clamp(self, arg0: float, arg1: float, arg2: Tuple4d) -> None: ...

  @overload
  def clamp(self, arg0: float, arg1: float, arg2: Tuple4d) -> None: ...

  @overload
  def clampMax(self, arg0: float) -> None: ...

  @overload
  def clampMax(self, arg0: float) -> None: ...

  @overload
  def clampMax(self, arg0: float, arg1: Tuple4d) -> None: ...

  @overload
  def clampMax(self, arg0: float, arg1: Tuple4d) -> None: ...

  @overload
  def clampMin(self, arg0: float) -> None: ...

  @overload
  def clampMin(self, arg0: float) -> None: ...

  @overload
  def clampMin(self, arg0: float, arg1: Tuple4d) -> None: ...

  @overload
  def clampMin(self, arg0: float, arg1: Tuple4d) -> None: ...

  def clone(self) -> object: ...

  def epsilonEquals(self, arg0: Tuple4d, arg1: float) -> bool: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def equals(self, arg0: Tuple4d) -> bool: ...

  @overload
  def get(self, arg0: list[float]) -> None: ...

  @overload
  def get(self, arg0: Tuple4d) -> None: ...

  def getW(self) -> float: ...

  def getX(self) -> float: ...

  def getY(self) -> float: ...

  def getZ(self) -> float: ...

  def hashCode(self) -> int: ...

  @overload
  def interpolate(self, arg0: Tuple4d, arg1: float) -> None: ...

  @overload
  def interpolate(self, arg0: Tuple4d, arg1: float) -> None: ...

  @overload
  def interpolate(self, arg0: Tuple4d, arg1: Tuple4d, arg2: float) -> None: ...

  @overload
  def interpolate(self, arg0: Tuple4d, arg1: Tuple4d, arg2: float) -> None: ...

  @overload
  def negate(self) -> None: ...

  @overload
  def negate(self, arg0: Tuple4d) -> None: ...

  @overload
  def scale(self, arg0: float) -> None: ...

  @overload
  def scale(self, arg0: float, arg1: Tuple4d) -> None: ...

  @overload
  def scaleAdd(self, arg0: float, arg1: Tuple4d) -> None: ...

  @overload
  def scaleAdd(self, arg0: float, arg1: Tuple4d) -> None: ...

  @overload
  def scaleAdd(self, arg0: float, arg1: Tuple4d, arg2: Tuple4d) -> None: ...

  @overload
  def set(self, arg0: list[float]) -> None: ...

  @overload
  def set(self, arg0: Tuple4d) -> None: ...

  @overload
  def set(self, arg0: Tuple4f) -> None: ...

  @overload
  def set(self, arg0: float, arg1: float, arg2: float, arg3: float) -> None: ...

  def setW(self, arg0: float) -> None: ...

  def setX(self, arg0: float) -> None: ...

  def setY(self, arg0: float) -> None: ...

  def setZ(self, arg0: float) -> None: ...

  @overload
  def sub(self, arg0: Tuple4d) -> None: ...

  @overload
  def sub(self, arg0: Tuple4d, arg1: Tuple4d) -> None: ...

  def toString(self) -> str: ...

  @overload
  def __init__(self):
    self.w: float

    self.x: float

    self.y: float

    self.z: float

  @overload
  def __init__(self, arg0: list[float]): ...
  @overload
  def __init__(self, arg0: Tuple4d): ...
  @overload
  def __init__(self, arg0: Tuple4f): ...
  @overload
  def __init__(self, arg0: float, arg1: float, arg2: float, arg3: float): ...


class Tuple4f:

  @overload
  def absolute(self) -> None: ...

  @overload
  def absolute(self, arg0: Tuple4f) -> None: ...

  @overload
  def add(self, arg0: Tuple4f) -> None: ...

  @overload
  def add(self, arg0: Tuple4f, arg1: Tuple4f) -> None: ...

  @overload
  def clamp(self, arg0: float, arg1: float) -> None: ...

  @overload
  def clamp(self, arg0: float, arg1: float, arg2: Tuple4f) -> None: ...

  @overload
  def clampMax(self, arg0: float) -> None: ...

  @overload
  def clampMax(self, arg0: float, arg1: Tuple4f) -> None: ...

  @overload
  def clampMin(self, arg0: float) -> None: ...

  @overload
  def clampMin(self, arg0: float, arg1: Tuple4f) -> None: ...

  def clone(self) -> object: ...

  def epsilonEquals(self, arg0: Tuple4f, arg1: float) -> bool: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def equals(self, arg0: Tuple4f) -> bool: ...

  @overload
  def get(self, arg0: list[float]) -> None: ...

  @overload
  def get(self, arg0: Tuple4f) -> None: ...

  def getW(self) -> float: ...

  def getX(self) -> float: ...

  def getY(self) -> float: ...

  def getZ(self) -> float: ...

  def hashCode(self) -> int: ...

  @overload
  def interpolate(self, arg0: Tuple4f, arg1: float) -> None: ...

  @overload
  def interpolate(self, arg0: Tuple4f, arg1: Tuple4f, arg2: float) -> None: ...

  @overload
  def negate(self) -> None: ...

  @overload
  def negate(self, arg0: Tuple4f) -> None: ...

  @overload
  def scale(self, arg0: float) -> None: ...

  @overload
  def scale(self, arg0: float, arg1: Tuple4f) -> None: ...

  @overload
  def scaleAdd(self, arg0: float, arg1: Tuple4f) -> None: ...

  @overload
  def scaleAdd(self, arg0: float, arg1: Tuple4f, arg2: Tuple4f) -> None: ...

  @overload
  def set(self, arg0: list[float]) -> None: ...

  @overload
  def set(self, arg0: Tuple4d) -> None: ...

  @overload
  def set(self, arg0: Tuple4f) -> None: ...

  @overload
  def set(self, arg0: float, arg1: float, arg2: float, arg3: float) -> None: ...

  def setW(self, arg0: float) -> None: ...

  def setX(self, arg0: float) -> None: ...

  def setY(self, arg0: float) -> None: ...

  def setZ(self, arg0: float) -> None: ...

  @overload
  def sub(self, arg0: Tuple4f) -> None: ...

  @overload
  def sub(self, arg0: Tuple4f, arg1: Tuple4f) -> None: ...

  def toString(self) -> str: ...

  @overload
  def __init__(self):
    self.w: float

    self.x: float

    self.y: float

    self.z: float

  @overload
  def __init__(self, arg0: list[float]): ...
  @overload
  def __init__(self, arg0: Tuple4d): ...
  @overload
  def __init__(self, arg0: Tuple4f): ...
  @overload
  def __init__(self, arg0: float, arg1: float, arg2: float, arg3: float): ...


class Tuple4i:

  @overload
  def absolute(self) -> None: ...

  @overload
  def absolute(self, arg0: Tuple4i) -> None: ...

  @overload
  def add(self, arg0: Tuple4i) -> None: ...

  @overload
  def add(self, arg0: Tuple4i, arg1: Tuple4i) -> None: ...

  @overload
  def clamp(self, arg0: int, arg1: int) -> None: ...

  @overload
  def clamp(self, arg0: int, arg1: int, arg2: Tuple4i) -> None: ...

  @overload
  def clampMax(self, arg0: int) -> None: ...

  @overload
  def clampMax(self, arg0: int, arg1: Tuple4i) -> None: ...

  @overload
  def clampMin(self, arg0: int) -> None: ...

  @overload
  def clampMin(self, arg0: int, arg1: Tuple4i) -> None: ...

  def clone(self) -> object: ...

  def equals(self, arg0: object) -> bool: ...

  @overload
  def get(self, arg0: list[int]) -> None: ...

  @overload
  def get(self, arg0: Tuple4i) -> None: ...

  def getW(self) -> int: ...

  def getX(self) -> int: ...

  def getY(self) -> int: ...

  def getZ(self) -> int: ...

  def hashCode(self) -> int: ...

  @overload
  def negate(self) -> None: ...

  @overload
  def negate(self, arg0: Tuple4i) -> None: ...

  @overload
  def scale(self, arg0: int) -> None: ...

  @overload
  def scale(self, arg0: int, arg1: Tuple4i) -> None: ...

  @overload
  def scaleAdd(self, arg0: int, arg1: Tuple4i) -> None: ...

  @overload
  def scaleAdd(self, arg0: int, arg1: Tuple4i, arg2: Tuple4i) -> None: ...

  @overload
  def set(self, arg0: list[int]) -> None: ...

  @overload
  def set(self, arg0: Tuple4i) -> None: ...

  @overload
  def set(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...

  def setW(self, arg0: int) -> None: ...

  def setX(self, arg0: int) -> None: ...

  def setY(self, arg0: int) -> None: ...

  def setZ(self, arg0: int) -> None: ...

  @overload
  def sub(self, arg0: Tuple4i) -> None: ...

  @overload
  def sub(self, arg0: Tuple4i, arg1: Tuple4i) -> None: ...

  def toString(self) -> str: ...

  @overload
  def __init__(self):
    self.w: int

    self.x: int

    self.y: int

    self.z: int

  @overload
  def __init__(self, arg0: list[int]): ...
  @overload
  def __init__(self, arg0: Tuple4i): ...
  @overload
  def __init__(self, arg0: int, arg1: int, arg2: int, arg3: int): ...


class Vector2d(Tuple2d):

  def angle(self, arg0: Vector2d) -> float: ...

  def dot(self, arg0: Vector2d) -> float: ...

  def length(self) -> float: ...

  def lengthSquared(self) -> float: ...

  @overload
  def normalize(self) -> None: ...

  @overload
  def normalize(self, arg0: Vector2d) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: list[float]): ...
  @overload
  def __init__(self, arg0: Tuple2d): ...
  @overload
  def __init__(self, arg0: Tuple2f): ...
  @overload
  def __init__(self, arg0: Vector2d): ...
  @overload
  def __init__(self, arg0: Vector2f): ...
  @overload
  def __init__(self, arg0: float, arg1: float): ...


class Vector2f(Tuple2f):

  def angle(self, arg0: Vector2f) -> float: ...

  def dot(self, arg0: Vector2f) -> float: ...

  def length(self) -> float: ...

  def lengthSquared(self) -> float: ...

  @overload
  def normalize(self) -> None: ...

  @overload
  def normalize(self, arg0: Vector2f) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: list[float]): ...
  @overload
  def __init__(self, arg0: Tuple2d): ...
  @overload
  def __init__(self, arg0: Tuple2f): ...
  @overload
  def __init__(self, arg0: Vector2d): ...
  @overload
  def __init__(self, arg0: Vector2f): ...
  @overload
  def __init__(self, arg0: float, arg1: float): ...


class Vector3d(Tuple3d):

  def angle(self, arg0: Vector3d) -> float: ...

  def cross(self, arg0: Vector3d, arg1: Vector3d) -> None: ...

  def dot(self, arg0: Vector3d) -> float: ...

  def length(self) -> float: ...

  def lengthSquared(self) -> float: ...

  @overload
  def normalize(self) -> None: ...

  @overload
  def normalize(self, arg0: Vector3d) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: list[float]): ...
  @overload
  def __init__(self, arg0: Tuple3d): ...
  @overload
  def __init__(self, arg0: Tuple3f): ...
  @overload
  def __init__(self, arg0: Vector3d): ...
  @overload
  def __init__(self, arg0: Vector3f): ...
  @overload
  def __init__(self, arg0: float, arg1: float, arg2: float): ...


class Vector3f(Tuple3f):

  def angle(self, arg0: Vector3f) -> float: ...

  def cross(self, arg0: Vector3f, arg1: Vector3f) -> None: ...

  def dot(self, arg0: Vector3f) -> float: ...

  def length(self) -> float: ...

  def lengthSquared(self) -> float: ...

  @overload
  def normalize(self) -> None: ...

  @overload
  def normalize(self, arg0: Vector3f) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: list[float]): ...
  @overload
  def __init__(self, arg0: Tuple3d): ...
  @overload
  def __init__(self, arg0: Tuple3f): ...
  @overload
  def __init__(self, arg0: Vector3d): ...
  @overload
  def __init__(self, arg0: Vector3f): ...
  @overload
  def __init__(self, arg0: float, arg1: float, arg2: float): ...


class Vector4d(Tuple4d):

  def angle(self, arg0: Vector4d) -> float: ...

  def dot(self, arg0: Vector4d) -> float: ...

  def length(self) -> float: ...

  def lengthSquared(self) -> float: ...

  @overload
  def normalize(self) -> None: ...

  @overload
  def normalize(self, arg0: Vector4d) -> None: ...

  def set(self, arg0: Tuple3d) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: list[float]): ...
  @overload
  def __init__(self, arg0: Tuple3d): ...
  @overload
  def __init__(self, arg0: Tuple4d): ...
  @overload
  def __init__(self, arg0: Tuple4f): ...
  @overload
  def __init__(self, arg0: Vector4d): ...
  @overload
  def __init__(self, arg0: Vector4f): ...
  @overload
  def __init__(self, arg0: float, arg1: float, arg2: float, arg3: float): ...


class Vector4f(Tuple4f):

  def angle(self, arg0: Vector4f) -> float: ...

  def dot(self, arg0: Vector4f) -> float: ...

  def length(self) -> float: ...

  def lengthSquared(self) -> float: ...

  @overload
  def normalize(self) -> None: ...

  @overload
  def normalize(self, arg0: Vector4f) -> None: ...

  def set(self, arg0: Tuple3f) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: list[float]): ...
  @overload
  def __init__(self, arg0: Tuple3f): ...
  @overload
  def __init__(self, arg0: Tuple4d): ...
  @overload
  def __init__(self, arg0: Tuple4f): ...
  @overload
  def __init__(self, arg0: Vector4d): ...
  @overload
  def __init__(self, arg0: Vector4f): ...
  @overload
  def __init__(self, arg0: float, arg1: float, arg2: float, arg3: float): ...

