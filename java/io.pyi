from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.lang import Enum, Exception, Throwable, Class, CharSequence, Appendable, StringBuffer
from java.lang.ref import SoftReference
from java.lang.reflect import Constructor, Member, Field, Method
from java.net import URI, URL
from java.nio import CharBuffer
from java.nio.channels import FileChannel
from java.nio.charset import Charset, CharsetDecoder, CharsetEncoder
from java.nio.file import Path
from java.security import Permission, PermissionCollection, BasicPermission
from java.util import Comparator, Locale
from java.util.concurrent import ConcurrentHashMap
from java.util.function import Predicate, BinaryOperator
from java.util.stream import Stream
from jdk.internal.ref import PhantomCleanable

T = TypeVar('T', default=Any)
CacheRef_T = TypeVar('CacheRef_T', default=Any)

class BufferedInputStream(FilterInputStream):

  def available(self) -> int: ...

  def close(self) -> None: ...

  def mark(self, arg0: int) -> None: ...

  def markSupported(self) -> bool: ...

  @overload
  def read(self) -> int: ...

  @overload
  def read(self, arg0: list[int], arg1: int, arg2: int) -> int: ...

  def reset(self) -> None: ...

  def skip(self, arg0: int) -> int: ...

  @overload
  def __init__(self, arg0: InputStream): ...
  @overload
  def __init__(self, arg0: InputStream, arg1: int): ...


class BufferedOutputStream(FilterOutputStream):

  def flush(self) -> None: ...

  @overload
  def write(self, arg0: int) -> None: ...

  @overload
  def write(self, arg0: list[int], arg1: int, arg2: int) -> None: ...

  @overload
  def __init__(self, arg0: OutputStream): ...
  @overload
  def __init__(self, arg0: OutputStream, arg1: int): ...


class BufferedReader(Reader):

  def close(self) -> None: ...

  def lines(self) -> Stream[str]: ...

  def mark(self, arg0: int) -> None: ...

  def markSupported(self) -> bool: ...

  @overload
  def read(self) -> int: ...

  @overload
  def read(self, arg0: list[str], arg1: int, arg2: int) -> int: ...

  def readLine(self) -> str: ...

  def ready(self) -> bool: ...

  def reset(self) -> None: ...

  def skip(self, arg0: int) -> int: ...

  @overload
  def __init__(self, arg0: Reader): ...
  @overload
  def __init__(self, arg0: Reader, arg1: int): ...


class BufferedWriter(Writer):

  def close(self) -> None: ...

  def flush(self) -> None: ...

  def newLine(self) -> None: ...

  @overload
  def write(self, arg0: int) -> None: ...

  @overload
  def write(self, arg0: list[str], arg1: int, arg2: int) -> None: ...

  @overload
  def write(self, arg0: str, arg1: int, arg2: int) -> None: ...

  @overload
  def __init__(self, arg0: Writer): ...
  @overload
  def __init__(self, arg0: Writer, arg1: int): ...


class ByteArrayInputStream(InputStream):

  def available(self) -> int: ...

  def close(self) -> None: ...

  def mark(self, arg0: int) -> None: ...

  def markSupported(self) -> bool: ...

  @overload
  def read(self) -> int: ...

  @overload
  def read(self, arg0: list[int], arg1: int, arg2: int) -> int: ...

  def readAllBytes(self) -> list[int]: ...

  def readNBytes(self, arg0: list[int], arg1: int, arg2: int) -> int: ...

  def reset(self) -> None: ...

  def skip(self, arg0: int) -> int: ...

  def transferTo(self, arg0: OutputStream) -> int: ...

  @overload
  def __init__(self, arg0: list[int]): ...
  @overload
  def __init__(self, arg0: list[int], arg1: int, arg2: int): ...


class ByteArrayOutputStream(OutputStream):

  def close(self) -> None: ...

  def reset(self) -> None: ...

  def size(self) -> int: ...

  def toByteArray(self) -> list[int]: ...

  @overload
  def toString(self) -> str: ...

  @overload
  def toString(self, arg0: int) -> str: ...

  @overload
  def toString(self, arg0: str) -> str: ...

  @overload
  def toString(self, arg0: Charset) -> str: ...

  @overload
  def write(self, arg0: int) -> None: ...

  @overload
  def write(self, arg0: list[int], arg1: int, arg2: int) -> None: ...

  def writeBytes(self, arg0: list[int]) -> None: ...

  def writeTo(self, arg0: OutputStream) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: int): ...


class ClassCache[T]:

  class CacheRef[CacheRef_T](SoftReference): ...


class Closeable:

  @overload
  def close(self) -> None: ...

  @overload
  def close(self) -> None: ...


class Console:

  def charset(self) -> Charset: ...

  @overload
  def flush(self) -> None: ...

  @overload
  def flush(self) -> None: ...

  def format(self, arg0: str, arg1: list[object]) -> Console: ...

  def printf(self, arg0: str, arg1: list[object]) -> Console: ...

  @overload
  def readLine(self) -> str: ...

  @overload
  def readLine(self, arg0: str, arg1: list[object]) -> str: ...

  @overload
  def readPassword(self) -> list[str]: ...

  @overload
  def readPassword(self, arg0: str, arg1: list[object]) -> list[str]: ...

  def reader(self) -> Reader: ...

  def writer(self) -> PrintWriter: ...

  class LineReader(Reader):

    def close(self) -> None: ...

    def read(self, arg0: list[str], arg1: int, arg2: int) -> int: ...

    def ready(self) -> bool: ...


class DataInput:

  def readBoolean(self) -> bool: ...

  def readByte(self) -> int: ...

  def readChar(self) -> str: ...

  def readDouble(self) -> float: ...

  def readFloat(self) -> float: ...

  @overload
  def readFully(self, arg0: list[int]) -> None: ...

  @overload
  def readFully(self, arg0: list[int], arg1: int, arg2: int) -> None: ...

  def readInt(self) -> int: ...

  def readLine(self) -> str: ...

  def readLong(self) -> int: ...

  def readShort(self) -> int: ...

  def readUTF(self) -> str: ...

  def readUnsignedByte(self) -> int: ...

  def readUnsignedShort(self) -> int: ...

  def skipBytes(self, arg0: int) -> int: ...


class DataInputStream(FilterInputStream):

  @overload
  def read(self, arg0: list[int]) -> int: ...

  @overload
  def read(self, arg0: list[int], arg1: int, arg2: int) -> int: ...

  @overload
  def readBoolean(self) -> bool: ...

  @overload
  def readBoolean(self) -> bool: ...

  @overload
  def readByte(self) -> int: ...

  @overload
  def readByte(self) -> int: ...

  @overload
  def readChar(self) -> str: ...

  @overload
  def readChar(self) -> str: ...

  @overload
  def readDouble(self) -> float: ...

  @overload
  def readDouble(self) -> float: ...

  @overload
  def readFloat(self) -> float: ...

  @overload
  def readFloat(self) -> float: ...

  @overload
  def readFully(self, arg0: list[int]) -> None: ...

  @overload
  def readFully(self, arg0: list[int]) -> None: ...

  @overload
  def readFully(self, arg0: list[int], arg1: int, arg2: int) -> None: ...

  @overload
  def readFully(self, arg0: list[int], arg1: int, arg2: int) -> None: ...

  @overload
  def readInt(self) -> int: ...

  @overload
  def readInt(self) -> int: ...

  @overload
  def readLine(self) -> str: ...

  @overload
  def readLine(self) -> str: ...

  @overload
  def readLong(self) -> int: ...

  @overload
  def readLong(self) -> int: ...

  @overload
  def readShort(self) -> int: ...

  @overload
  def readShort(self) -> int: ...

  @overload
  def readUTF(self) -> str: ...

  @overload
  def readUTF(self) -> str: ...

  @overload
  def readUnsignedByte(self) -> int: ...

  @overload
  def readUnsignedByte(self) -> int: ...

  @overload
  def readUnsignedShort(self) -> int: ...

  @overload
  def readUnsignedShort(self) -> int: ...

  @overload
  def skipBytes(self, arg0: int) -> int: ...

  @overload
  def skipBytes(self, arg0: int) -> int: ...

  def __init__(self, arg0: InputStream): ...


class DataOutput:

  @overload
  def write(self, arg0: list[int]) -> None: ...

  @overload
  def write(self, arg0: int) -> None: ...

  @overload
  def write(self, arg0: list[int], arg1: int, arg2: int) -> None: ...

  def writeBoolean(self, arg0: bool) -> None: ...

  def writeByte(self, arg0: int) -> None: ...

  def writeBytes(self, arg0: str) -> None: ...

  def writeChar(self, arg0: int) -> None: ...

  def writeChars(self, arg0: str) -> None: ...

  def writeDouble(self, arg0: float) -> None: ...

  def writeFloat(self, arg0: float) -> None: ...

  def writeInt(self, arg0: int) -> None: ...

  def writeLong(self, arg0: int) -> None: ...

  def writeShort(self, arg0: int) -> None: ...

  def writeUTF(self, arg0: str) -> None: ...


class DataOutputStream(FilterOutputStream):

  def flush(self) -> None: ...

  def size(self) -> int: ...

  @overload
  def write(self, arg0: list[int]) -> None: ...

  @overload
  def write(self, arg0: int) -> None: ...

  @overload
  def write(self, arg0: int) -> None: ...

  @overload
  def write(self, arg0: list[int], arg1: int, arg2: int) -> None: ...

  @overload
  def write(self, arg0: list[int], arg1: int, arg2: int) -> None: ...

  @overload
  def writeBoolean(self, arg0: bool) -> None: ...

  @overload
  def writeBoolean(self, arg0: bool) -> None: ...

  @overload
  def writeByte(self, arg0: int) -> None: ...

  @overload
  def writeByte(self, arg0: int) -> None: ...

  @overload
  def writeBytes(self, arg0: str) -> None: ...

  @overload
  def writeBytes(self, arg0: str) -> None: ...

  @overload
  def writeChar(self, arg0: int) -> None: ...

  @overload
  def writeChar(self, arg0: int) -> None: ...

  @overload
  def writeChars(self, arg0: str) -> None: ...

  @overload
  def writeChars(self, arg0: str) -> None: ...

  @overload
  def writeDouble(self, arg0: float) -> None: ...

  @overload
  def writeDouble(self, arg0: float) -> None: ...

  @overload
  def writeFloat(self, arg0: float) -> None: ...

  @overload
  def writeFloat(self, arg0: float) -> None: ...

  @overload
  def writeInt(self, arg0: int) -> None: ...

  @overload
  def writeInt(self, arg0: int) -> None: ...

  @overload
  def writeLong(self, arg0: int) -> None: ...

  @overload
  def writeLong(self, arg0: int) -> None: ...

  @overload
  def writeShort(self, arg0: int) -> None: ...

  @overload
  def writeShort(self, arg0: int) -> None: ...

  @overload
  def writeUTF(self, arg0: str) -> None: ...

  @overload
  def writeUTF(self, arg0: str) -> None: ...

  def __init__(self, arg0: OutputStream): ...


class DefaultFileSystem:

  @staticmethod
  def getFileSystem() -> FileSystem: ...


class EOFException(IOException):

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: str): ...


class ExpiringCache:

  class Entry: ...


class Externalizable:

  def readExternal(self, arg0: ObjectInput) -> None: ...

  def writeExternal(self, arg0: ObjectOutput) -> None: ...


class File:

  pathSeparator: str

  pathSeparatorChar: str

  separator: str

  separatorChar: str

  def canExecute(self) -> bool: ...

  def canRead(self) -> bool: ...

  def canWrite(self) -> bool: ...

  @overload
  def compareTo(self, arg0: File) -> int: ...

  @overload
  def compareTo(self, arg0: object) -> int: ...

  @overload
  def compareTo(self, arg0: object) -> int: ...

  def createNewFile(self) -> bool: ...

  def delete(self) -> bool: ...

  def deleteOnExit(self) -> None: ...

  def equals(self, arg0: object) -> bool: ...

  def exists(self) -> bool: ...

  def getAbsoluteFile(self) -> File: ...

  def getAbsolutePath(self) -> str: ...

  def getCanonicalFile(self) -> File: ...

  def getCanonicalPath(self) -> str: ...

  def getFreeSpace(self) -> int: ...

  def getName(self) -> str: ...

  def getParent(self) -> str: ...

  def getParentFile(self) -> File: ...

  def getPath(self) -> str: ...

  def getTotalSpace(self) -> int: ...

  def getUsableSpace(self) -> int: ...

  def hashCode(self) -> int: ...

  def isAbsolute(self) -> bool: ...

  def isDirectory(self) -> bool: ...

  def isFile(self) -> bool: ...

  def isHidden(self) -> bool: ...

  def lastModified(self) -> int: ...

  def length(self) -> int: ...

  @overload
  def list(self) -> list[str]: ...

  @overload
  def list(self, arg0: FilenameFilter) -> list[str]: ...

  @overload
  def listFiles(self) -> list[File]: ...

  @overload
  def listFiles(self, arg0: FileFilter) -> list[File]: ...

  @overload
  def listFiles(self, arg0: FilenameFilter) -> list[File]: ...

  def mkdir(self) -> bool: ...

  def mkdirs(self) -> bool: ...

  def renameTo(self, arg0: File) -> bool: ...

  @overload
  def setExecutable(self, arg0: bool) -> bool: ...

  @overload
  def setExecutable(self, arg0: bool, arg1: bool) -> bool: ...

  def setLastModified(self, arg0: int) -> bool: ...

  def setReadOnly(self) -> bool: ...

  @overload
  def setReadable(self, arg0: bool) -> bool: ...

  @overload
  def setReadable(self, arg0: bool, arg1: bool) -> bool: ...

  @overload
  def setWritable(self, arg0: bool) -> bool: ...

  @overload
  def setWritable(self, arg0: bool, arg1: bool) -> bool: ...

  def toPath(self) -> Path: ...

  def toString(self) -> str: ...

  def toURI(self) -> URI: ...

  def toURL(self) -> URL: ...

  @staticmethod
  @overload
  def createTempFile(arg0: str, arg1: str) -> File: ...

  @staticmethod
  @overload
  def createTempFile(arg0: str, arg1: str, arg2: File) -> File: ...

  @staticmethod
  def listRoots() -> list[File]: ...

  @overload
  def __init__(self, arg0: str): ...
  @overload
  def __init__(self, arg0: URI): ...
  @overload
  def __init__(self, arg0: File, arg1: str): ...
  @overload
  def __init__(self, arg0: str, arg1: str): ...

  class PathStatus(Enum):

    CHECKED: File.PathStatus

    INVALID: File.PathStatus

    @staticmethod
    def valueOf(arg0: str) -> File.PathStatus: ...

    @staticmethod
    def values() -> list[File.PathStatus]: ...

  class TempDirectory: ...


class FileCleanable(PhantomCleanable): ...


class FileDescriptor:

  err: FileDescriptor

  out: FileDescriptor

  def sync(self) -> None: ...

  def valid(self) -> bool: ...

  def __init__(self): ...


class FileFilter:

  def accept(self, arg0: File) -> bool: ...


class FileInputStream(InputStream):

  def available(self) -> int: ...

  def close(self) -> None: ...

  def getChannel(self) -> FileChannel: ...

  def getFD(self) -> FileDescriptor: ...

  @overload
  def read(self) -> int: ...

  @overload
  def read(self, arg0: list[int]) -> int: ...

  @overload
  def read(self, arg0: list[int], arg1: int, arg2: int) -> int: ...

  def readAllBytes(self) -> list[int]: ...

  def readNBytes(self, arg0: int) -> list[int]: ...

  def skip(self, arg0: int) -> int: ...

  def transferTo(self, arg0: OutputStream) -> int: ...

  @overload
  def __init__(self, arg0: File): ...
  @overload
  def __init__(self, arg0: FileDescriptor): ...
  @overload
  def __init__(self, arg0: str): ...


class FileNotFoundException(IOException):

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: str): ...


class FileOutputStream(OutputStream):

  def close(self) -> None: ...

  def getChannel(self) -> FileChannel: ...

  def getFD(self) -> FileDescriptor: ...

  @overload
  def write(self, arg0: list[int]) -> None: ...

  @overload
  def write(self, arg0: int) -> None: ...

  @overload
  def write(self, arg0: list[int], arg1: int, arg2: int) -> None: ...

  @overload
  def __init__(self, arg0: File): ...
  @overload
  def __init__(self, arg0: FileDescriptor): ...
  @overload
  def __init__(self, arg0: str): ...
  @overload
  def __init__(self, arg0: File, arg1: bool): ...
  @overload
  def __init__(self, arg0: str, arg1: bool): ...


class FilePermission(Permission):

  def equals(self, arg0: object) -> bool: ...

  def getActions(self) -> str: ...

  def hashCode(self) -> int: ...

  def implies(self, arg0: Permission) -> bool: ...

  def newPermissionCollection(self) -> PermissionCollection: ...

  def __init__(self, arg0: str, arg1: str): ...


class FileReader(InputStreamReader):

  @overload
  def __init__(self, arg0: File): ...
  @overload
  def __init__(self, arg0: FileDescriptor): ...
  @overload
  def __init__(self, arg0: str): ...
  @overload
  def __init__(self, arg0: File, arg1: Charset): ...
  @overload
  def __init__(self, arg0: str, arg1: Charset): ...


class FileSystem:

  ACCESS_EXECUTE: int

  ACCESS_READ: int

  ACCESS_WRITE: int

  BA_DIRECTORY: int

  BA_EXISTS: int

  BA_HIDDEN: int

  BA_REGULAR: int

  SPACE_FREE: int

  SPACE_TOTAL: int

  SPACE_USABLE: int

  def canonicalize(self, arg0: str) -> str: ...

  def checkAccess(self, arg0: File, arg1: int) -> bool: ...

  def compare(self, arg0: File, arg1: File) -> int: ...

  def createDirectory(self, arg0: File) -> bool: ...

  def createFileExclusively(self, arg0: str) -> bool: ...

  def delete(self, arg0: File) -> bool: ...

  def fromURIPath(self, arg0: str) -> str: ...

  def getBooleanAttributes(self, arg0: File) -> int: ...

  def getDefaultParent(self) -> str: ...

  def getLastModifiedTime(self, arg0: File) -> int: ...

  def getLength(self, arg0: File) -> int: ...

  def getNameMax(self, arg0: str) -> int: ...

  def getPathSeparator(self) -> str: ...

  def getSeparator(self) -> str: ...

  def getSpace(self, arg0: File, arg1: int) -> int: ...

  def hasBooleanAttributes(self, arg0: File, arg1: int) -> bool: ...

  def hashCode(self, arg0: File) -> int: ...

  def isAbsolute(self, arg0: File) -> bool: ...

  def isInvalid(self, arg0: File) -> bool: ...

  def list(self, arg0: File) -> list[str]: ...

  def listRoots(self) -> list[File]: ...

  def normalize(self, arg0: str) -> str: ...

  def prefixLength(self, arg0: str) -> int: ...

  def rename(self, arg0: File, arg1: File) -> bool: ...

  @overload
  def resolve(self, arg0: File) -> str: ...

  @overload
  def resolve(self, arg0: str, arg1: str) -> str: ...

  def setLastModifiedTime(self, arg0: File, arg1: int) -> bool: ...

  def setPermission(self, arg0: File, arg1: int, arg2: bool, arg3: bool) -> bool: ...

  def setReadOnly(self, arg0: File) -> bool: ...


class FileWriter(OutputStreamWriter):

  @overload
  def __init__(self, arg0: File): ...
  @overload
  def __init__(self, arg0: FileDescriptor): ...
  @overload
  def __init__(self, arg0: str): ...
  @overload
  def __init__(self, arg0: File, arg1: bool): ...
  @overload
  def __init__(self, arg0: File, arg1: Charset): ...
  @overload
  def __init__(self, arg0: str, arg1: bool): ...
  @overload
  def __init__(self, arg0: str, arg1: Charset): ...
  @overload
  def __init__(self, arg0: File, arg1: Charset, arg2: bool): ...
  @overload
  def __init__(self, arg0: str, arg1: Charset, arg2: bool): ...


class FilenameFilter:

  def accept(self, arg0: File, arg1: str) -> bool: ...


class FilterInputStream(InputStream):

  def available(self) -> int: ...

  def close(self) -> None: ...

  def mark(self, arg0: int) -> None: ...

  def markSupported(self) -> bool: ...

  @overload
  def read(self) -> int: ...

  @overload
  def read(self, arg0: list[int]) -> int: ...

  @overload
  def read(self, arg0: list[int], arg1: int, arg2: int) -> int: ...

  def reset(self) -> None: ...

  def skip(self, arg0: int) -> int: ...


class FilterOutputStream(OutputStream):

  def close(self) -> None: ...

  def flush(self) -> None: ...

  @overload
  def write(self, arg0: list[int]) -> None: ...

  @overload
  def write(self, arg0: int) -> None: ...

  @overload
  def write(self, arg0: list[int], arg1: int, arg2: int) -> None: ...

  def __init__(self, arg0: OutputStream): ...


class Flushable:

  def flush(self) -> None: ...


class IOException(Exception):

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: str): ...
  @overload
  def __init__(self, arg0: Throwable): ...
  @overload
  def __init__(self, arg0: str, arg1: Throwable): ...


class InputStream:

  def available(self) -> int: ...

  @overload
  def close(self) -> None: ...

  @overload
  def close(self) -> None: ...

  def mark(self, arg0: int) -> None: ...

  def markSupported(self) -> bool: ...

  @overload
  def read(self) -> int: ...

  @overload
  def read(self, arg0: list[int]) -> int: ...

  @overload
  def read(self, arg0: list[int], arg1: int, arg2: int) -> int: ...

  def readAllBytes(self) -> list[int]: ...

  @overload
  def readNBytes(self, arg0: int) -> list[int]: ...

  @overload
  def readNBytes(self, arg0: list[int], arg1: int, arg2: int) -> int: ...

  def reset(self) -> None: ...

  def skip(self, arg0: int) -> int: ...

  def skipNBytes(self, arg0: int) -> None: ...

  def transferTo(self, arg0: OutputStream) -> int: ...

  @staticmethod
  def nullInputStream() -> InputStream: ...

  def __init__(self): ...


class InputStreamReader(Reader):

  def close(self) -> None: ...

  def getEncoding(self) -> str: ...

  @overload
  def read(self) -> int: ...

  @overload
  def read(self, arg0: CharBuffer) -> int: ...

  @overload
  def read(self, arg0: list[str], arg1: int, arg2: int) -> int: ...

  def ready(self) -> bool: ...

  @overload
  def __init__(self, arg0: InputStream): ...
  @overload
  def __init__(self, arg0: InputStream, arg1: str): ...
  @overload
  def __init__(self, arg0: InputStream, arg1: Charset): ...
  @overload
  def __init__(self, arg0: InputStream, arg1: CharsetDecoder): ...


class InvalidClassException(ObjectStreamException):

  def getMessage(self) -> str: ...

  @overload
  def __init__(self, arg0: str):
    self.classname: str

  @overload
  def __init__(self, arg0: str, arg1: str): ...


class InvalidObjectException(ObjectStreamException):

  def __init__(self, arg0: str): ...


class NotActiveException(ObjectStreamException):

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: str): ...


class ObjectInput:

  def available(self) -> int: ...

  @overload
  def close(self) -> None: ...

  @overload
  def close(self) -> None: ...

  @overload
  def read(self) -> int: ...

  @overload
  def read(self, arg0: list[int]) -> int: ...

  @overload
  def read(self, arg0: list[int], arg1: int, arg2: int) -> int: ...

  def readBoolean(self) -> bool: ...

  def readByte(self) -> int: ...

  def readChar(self) -> str: ...

  def readDouble(self) -> float: ...

  def readFloat(self) -> float: ...

  @overload
  def readFully(self, arg0: list[int]) -> None: ...

  @overload
  def readFully(self, arg0: list[int], arg1: int, arg2: int) -> None: ...

  def readInt(self) -> int: ...

  def readLine(self) -> str: ...

  def readLong(self) -> int: ...

  def readObject(self) -> object: ...

  def readShort(self) -> int: ...

  def readUTF(self) -> str: ...

  def readUnsignedByte(self) -> int: ...

  def readUnsignedShort(self) -> int: ...

  def skip(self, arg0: int) -> int: ...

  def skipBytes(self, arg0: int) -> int: ...


class ObjectInputFilter:

  def checkInput(self, arg0: ObjectInputFilter.FilterInfo) -> ObjectInputFilter.Status: ...

  @staticmethod
  def allowFilter(arg0: Predicate[Class[Any]], arg1: ObjectInputFilter.Status) -> ObjectInputFilter: ...

  @staticmethod
  def merge(arg0: ObjectInputFilter, arg1: ObjectInputFilter) -> ObjectInputFilter: ...

  @staticmethod
  def rejectFilter(arg0: Predicate[Class[Any]], arg1: ObjectInputFilter.Status) -> ObjectInputFilter: ...

  @staticmethod
  def rejectUndecidedClass(arg0: ObjectInputFilter) -> ObjectInputFilter: ...

  class Config:

    @staticmethod
    def createFilter(arg0: str) -> ObjectInputFilter: ...

    @staticmethod
    def getSerialFilter() -> ObjectInputFilter: ...

    @staticmethod
    def getSerialFilterFactory() -> BinaryOperator[ObjectInputFilter]: ...

    @staticmethod
    def setSerialFilter(arg0: ObjectInputFilter) -> None: ...

    @staticmethod
    def setSerialFilterFactory(arg0: BinaryOperator[ObjectInputFilter]) -> None: ...

    class Global:

      @overload
      def checkInput(self, arg0: ObjectInputFilter.FilterInfo) -> ObjectInputFilter.Status: ...

      @overload
      def checkInput(self, arg0: ObjectInputFilter.FilterInfo) -> ObjectInputFilter.Status: ...

      def toString(self) -> str: ...

      @staticmethod
      def allowFilter(arg0: Predicate[Class[Any]], arg1: ObjectInputFilter.Status) -> ObjectInputFilter: ...

      @staticmethod
      def merge(arg0: ObjectInputFilter, arg1: ObjectInputFilter) -> ObjectInputFilter: ...

      @staticmethod
      def rejectFilter(arg0: Predicate[Class[Any]], arg1: ObjectInputFilter.Status) -> ObjectInputFilter: ...

      @staticmethod
      def rejectUndecidedClass(arg0: ObjectInputFilter) -> ObjectInputFilter: ...

    class BuiltinFilterFactory:

      @overload
      def apply(self, arg0: ObjectInputFilter, arg1: ObjectInputFilter) -> ObjectInputFilter: ...

      @overload
      def apply(self, arg0: object, arg1: object) -> object: ...

      def toString(self) -> str: ...

      @staticmethod
      def maxBy(arg0: Comparator[T]) -> BinaryOperator[T]: ...

      @staticmethod
      def minBy(arg0: Comparator[T]) -> BinaryOperator[T]: ...

    class RejectUndecidedFilter:

      @overload
      def checkInput(self, arg0: ObjectInputFilter.FilterInfo) -> ObjectInputFilter.Status: ...

      @overload
      def checkInput(self, arg0: ObjectInputFilter.FilterInfo) -> ObjectInputFilter.Status: ...

      def toString(self) -> str: ...

      @staticmethod
      def allowFilter(arg0: Predicate[Class[Any]], arg1: ObjectInputFilter.Status) -> ObjectInputFilter: ...

      @staticmethod
      def merge(arg0: ObjectInputFilter, arg1: ObjectInputFilter) -> ObjectInputFilter: ...

      @staticmethod
      def rejectFilter(arg0: Predicate[Class[Any]], arg1: ObjectInputFilter.Status) -> ObjectInputFilter: ...

      @staticmethod
      def rejectUndecidedClass(arg0: ObjectInputFilter) -> ObjectInputFilter: ...

      class SerialInfo:

        @overload
        def arrayLength(self) -> int: ...

        @overload
        def arrayLength(self) -> int: ...

        @overload
        def depth(self) -> int: ...

        @overload
        def depth(self) -> int: ...

        @overload
        def references(self) -> int: ...

        @overload
        def references(self) -> int: ...

        @overload
        def serialClass(self) -> Class[Any]: ...

        @overload
        def serialClass(self) -> Class[Any]: ...

        @overload
        def streamBytes(self) -> int: ...

        @overload
        def streamBytes(self) -> int: ...

    class MergeFilter:

      @overload
      def checkInput(self, arg0: ObjectInputFilter.FilterInfo) -> ObjectInputFilter.Status: ...

      @overload
      def checkInput(self, arg0: ObjectInputFilter.FilterInfo) -> ObjectInputFilter.Status: ...

      def toString(self) -> str: ...

      @staticmethod
      def allowFilter(arg0: Predicate[Class[Any]], arg1: ObjectInputFilter.Status) -> ObjectInputFilter: ...

      @staticmethod
      def merge(arg0: ObjectInputFilter, arg1: ObjectInputFilter) -> ObjectInputFilter: ...

      @staticmethod
      def rejectFilter(arg0: Predicate[Class[Any]], arg1: ObjectInputFilter.Status) -> ObjectInputFilter: ...

      @staticmethod
      def rejectUndecidedClass(arg0: ObjectInputFilter) -> ObjectInputFilter: ...

    class PredicateFilter:

      @overload
      def checkInput(self, arg0: ObjectInputFilter.FilterInfo) -> ObjectInputFilter.Status: ...

      @overload
      def checkInput(self, arg0: ObjectInputFilter.FilterInfo) -> ObjectInputFilter.Status: ...

      def toString(self) -> str: ...

      @staticmethod
      def allowFilter(arg0: Predicate[Class[Any]], arg1: ObjectInputFilter.Status) -> ObjectInputFilter: ...

      @staticmethod
      def merge(arg0: ObjectInputFilter, arg1: ObjectInputFilter) -> ObjectInputFilter: ...

      @staticmethod
      def rejectFilter(arg0: Predicate[Class[Any]], arg1: ObjectInputFilter.Status) -> ObjectInputFilter: ...

      @staticmethod
      def rejectUndecidedClass(arg0: ObjectInputFilter) -> ObjectInputFilter: ...

  class Status(Enum):

    ALLOWED: ObjectInputFilter.Status

    REJECTED: ObjectInputFilter.Status

    UNDECIDED: ObjectInputFilter.Status

    @staticmethod
    def valueOf(arg0: str) -> ObjectInputFilter.Status: ...

    @staticmethod
    def values() -> list[ObjectInputFilter.Status]: ...

  class FilterInfo:

    def arrayLength(self) -> int: ...

    def depth(self) -> int: ...

    def references(self) -> int: ...

    def serialClass(self) -> Class[Any]: ...

    def streamBytes(self) -> int: ...


class ObjectInputStream(InputStream):

  baseWireHandle: int

  PROTOCOL_VERSION_1: int

  PROTOCOL_VERSION_2: int

  SC_BLOCK_DATA: int

  SC_ENUM: int

  SC_EXTERNALIZABLE: int

  SC_SERIALIZABLE: int

  SC_WRITE_METHOD: int

  SERIAL_FILTER_PERMISSION: SerializablePermission

  STREAM_MAGIC: int

  STREAM_VERSION: int

  SUBCLASS_IMPLEMENTATION_PERMISSION: SerializablePermission

  SUBSTITUTION_PERMISSION: SerializablePermission

  TC_ARRAY: int

  TC_BASE: int

  TC_BLOCKDATA: int

  TC_BLOCKDATALONG: int

  TC_CLASS: int

  TC_CLASSDESC: int

  TC_ENDBLOCKDATA: int

  TC_ENUM: int

  TC_EXCEPTION: int

  TC_LONGSTRING: int

  TC_MAX: int

  TC_NULL: int

  TC_OBJECT: int

  TC_PROXYCLASSDESC: int

  TC_REFERENCE: int

  TC_RESET: int

  TC_STRING: int

  @overload
  def available(self) -> int: ...

  @overload
  def available(self) -> int: ...

  @overload
  def close(self) -> None: ...

  @overload
  def close(self) -> None: ...

  def defaultReadObject(self) -> None: ...

  def getObjectInputFilter(self) -> ObjectInputFilter: ...

  @overload
  def read(self) -> int: ...

  @overload
  def read(self) -> int: ...

  @overload
  def read(self, arg0: list[int]) -> int: ...

  @overload
  def read(self, arg0: list[int], arg1: int, arg2: int) -> int: ...

  @overload
  def read(self, arg0: list[int], arg1: int, arg2: int) -> int: ...

  def readBoolean(self) -> bool: ...

  def readByte(self) -> int: ...

  def readChar(self) -> str: ...

  def readDouble(self) -> float: ...

  def readFields(self) -> ObjectInputStream.GetField: ...

  def readFloat(self) -> float: ...

  @overload
  def readFully(self, arg0: list[int]) -> None: ...

  @overload
  def readFully(self, arg0: list[int], arg1: int, arg2: int) -> None: ...

  def readInt(self) -> int: ...

  def readLine(self) -> str: ...

  def readLong(self) -> int: ...

  @overload
  def readObject(self) -> object: ...

  @overload
  def readObject(self) -> object: ...

  def readShort(self) -> int: ...

  def readUTF(self) -> str: ...

  def readUnshared(self) -> object: ...

  def readUnsignedByte(self) -> int: ...

  def readUnsignedShort(self) -> int: ...

  def registerValidation(self, arg0: ObjectInputValidation, arg1: int) -> None: ...

  def setObjectInputFilter(self, arg0: ObjectInputFilter) -> None: ...

  def skip(self, arg0: int) -> int: ...

  def skipBytes(self, arg0: int) -> int: ...

  def __init__(self, arg0: InputStream): ...

  class BlockDataInputStream(InputStream):

    def available(self) -> int: ...

    def close(self) -> None: ...

    @overload
    def read(self) -> int: ...

    @overload
    def read(self, arg0: list[int], arg1: int, arg2: int) -> int: ...

    @overload
    def readBoolean(self) -> bool: ...

    @overload
    def readBoolean(self) -> bool: ...

    @overload
    def readByte(self) -> int: ...

    @overload
    def readByte(self) -> int: ...

    @overload
    def readChar(self) -> str: ...

    @overload
    def readChar(self) -> str: ...

    @overload
    def readDouble(self) -> float: ...

    @overload
    def readDouble(self) -> float: ...

    @overload
    def readFloat(self) -> float: ...

    @overload
    def readFloat(self) -> float: ...

    @overload
    def readFully(self, arg0: list[int]) -> None: ...

    @overload
    def readFully(self, arg0: list[int]) -> None: ...

    @overload
    def readFully(self, arg0: list[int], arg1: int, arg2: int) -> None: ...

    @overload
    def readFully(self, arg0: list[int], arg1: int, arg2: int) -> None: ...

    @overload
    def readFully(self, arg0: list[int], arg1: int, arg2: int, arg3: bool) -> None: ...

    @overload
    def readInt(self) -> int: ...

    @overload
    def readInt(self) -> int: ...

    @overload
    def readLine(self) -> str: ...

    @overload
    def readLine(self) -> str: ...

    @overload
    def readLong(self) -> int: ...

    @overload
    def readLong(self) -> int: ...

    @overload
    def readShort(self) -> int: ...

    @overload
    def readShort(self) -> int: ...

    @overload
    def readUTF(self) -> str: ...

    @overload
    def readUTF(self) -> str: ...

    @overload
    def readUnsignedByte(self) -> int: ...

    @overload
    def readUnsignedByte(self) -> int: ...

    @overload
    def readUnsignedShort(self) -> int: ...

    @overload
    def readUnsignedShort(self) -> int: ...

    def skip(self, arg0: int) -> int: ...

    @overload
    def skipBytes(self, arg0: int) -> int: ...

    @overload
    def skipBytes(self, arg0: int) -> int: ...

  class HandleTable:

    class HandleList:

      def add(self, arg0: int) -> None: ...

      def get(self, arg0: int) -> int: ...

      def size(self) -> int: ...

      def __init__(self): ...

  class ValidationList:

    def clear(self) -> None: ...

    class Callback: ...

  class FieldValues(ObjectInputStream.GetField):

    def defaulted(self, arg0: str) -> bool: ...

    @overload
    def get(self, arg0: str, arg1: bool) -> bool: ...

    @overload
    def get(self, arg0: str, arg1: int) -> int: ...

    @overload
    def get(self, arg0: str, arg1: str) -> str: ...

    @overload
    def get(self, arg0: str, arg1: float) -> float: ...

    @overload
    def get(self, arg0: str, arg1: float) -> float: ...

    @overload
    def get(self, arg0: str, arg1: int) -> int: ...

    @overload
    def get(self, arg0: str, arg1: object) -> object: ...

    @overload
    def get(self, arg0: str, arg1: int) -> int: ...

    @overload
    def get(self, arg0: str, arg1: int) -> int: ...

    def getObjectStreamClass(self) -> ObjectStreamClass: ...

  class Caches: ...

  class FilterValues:

    @overload
    def arrayLength(self) -> int: ...

    @overload
    def arrayLength(self) -> int: ...

    @overload
    def depth(self) -> int: ...

    @overload
    def depth(self) -> int: ...

    @overload
    def references(self) -> int: ...

    @overload
    def references(self) -> int: ...

    @overload
    def serialClass(self) -> Class[Any]: ...

    @overload
    def serialClass(self) -> Class[Any]: ...

    @overload
    def streamBytes(self) -> int: ...

    @overload
    def streamBytes(self) -> int: ...

    def __init__(self, arg0: Class[Any], arg1: int, arg2: int, arg3: int, arg4: int): ...

  class Logging: ...

  class PeekInputStream(InputStream):

    def available(self) -> int: ...

    def close(self) -> None: ...

    def getBytesRead(self) -> int: ...

    @overload
    def read(self) -> int: ...

    @overload
    def read(self, arg0: list[int], arg1: int, arg2: int) -> int: ...

    def skip(self, arg0: int) -> int: ...

  class GetField:

    def defaulted(self, arg0: str) -> bool: ...

    @overload
    def get(self, arg0: str, arg1: bool) -> bool: ...

    @overload
    def get(self, arg0: str, arg1: int) -> int: ...

    @overload
    def get(self, arg0: str, arg1: str) -> str: ...

    @overload
    def get(self, arg0: str, arg1: float) -> float: ...

    @overload
    def get(self, arg0: str, arg1: float) -> float: ...

    @overload
    def get(self, arg0: str, arg1: int) -> int: ...

    @overload
    def get(self, arg0: str, arg1: object) -> object: ...

    @overload
    def get(self, arg0: str, arg1: int) -> int: ...

    @overload
    def get(self, arg0: str, arg1: int) -> int: ...

    def getObjectStreamClass(self) -> ObjectStreamClass: ...

    def __init__(self): ...


class ObjectInputValidation:

  def validateObject(self) -> None: ...


class ObjectOutput:

  @overload
  def close(self) -> None: ...

  @overload
  def close(self) -> None: ...

  def flush(self) -> None: ...

  @overload
  def write(self, arg0: list[int]) -> None: ...

  @overload
  def write(self, arg0: list[int]) -> None: ...

  @overload
  def write(self, arg0: int) -> None: ...

  @overload
  def write(self, arg0: int) -> None: ...

  @overload
  def write(self, arg0: list[int], arg1: int, arg2: int) -> None: ...

  @overload
  def write(self, arg0: list[int], arg1: int, arg2: int) -> None: ...

  def writeBoolean(self, arg0: bool) -> None: ...

  def writeByte(self, arg0: int) -> None: ...

  def writeBytes(self, arg0: str) -> None: ...

  def writeChar(self, arg0: int) -> None: ...

  def writeChars(self, arg0: str) -> None: ...

  def writeDouble(self, arg0: float) -> None: ...

  def writeFloat(self, arg0: float) -> None: ...

  def writeInt(self, arg0: int) -> None: ...

  def writeLong(self, arg0: int) -> None: ...

  def writeObject(self, arg0: object) -> None: ...

  def writeShort(self, arg0: int) -> None: ...

  def writeUTF(self, arg0: str) -> None: ...


class ObjectOutputStream(OutputStream):

  baseWireHandle: int

  PROTOCOL_VERSION_1: int

  PROTOCOL_VERSION_2: int

  SC_BLOCK_DATA: int

  SC_ENUM: int

  SC_EXTERNALIZABLE: int

  SC_SERIALIZABLE: int

  SC_WRITE_METHOD: int

  SERIAL_FILTER_PERMISSION: SerializablePermission

  STREAM_MAGIC: int

  STREAM_VERSION: int

  SUBCLASS_IMPLEMENTATION_PERMISSION: SerializablePermission

  SUBSTITUTION_PERMISSION: SerializablePermission

  TC_ARRAY: int

  TC_BASE: int

  TC_BLOCKDATA: int

  TC_BLOCKDATALONG: int

  TC_CLASS: int

  TC_CLASSDESC: int

  TC_ENDBLOCKDATA: int

  TC_ENUM: int

  TC_EXCEPTION: int

  TC_LONGSTRING: int

  TC_MAX: int

  TC_NULL: int

  TC_OBJECT: int

  TC_PROXYCLASSDESC: int

  TC_REFERENCE: int

  TC_RESET: int

  TC_STRING: int

  @overload
  def close(self) -> None: ...

  @overload
  def close(self) -> None: ...

  def defaultWriteObject(self) -> None: ...

  @overload
  def flush(self) -> None: ...

  @overload
  def flush(self) -> None: ...

  def putFields(self) -> ObjectOutputStream.PutField: ...

  def reset(self) -> None: ...

  def useProtocolVersion(self, arg0: int) -> None: ...

  @overload
  def write(self, arg0: list[int]) -> None: ...

  @overload
  def write(self, arg0: list[int]) -> None: ...

  @overload
  def write(self, arg0: int) -> None: ...

  @overload
  def write(self, arg0: int) -> None: ...

  @overload
  def write(self, arg0: list[int], arg1: int, arg2: int) -> None: ...

  @overload
  def write(self, arg0: list[int], arg1: int, arg2: int) -> None: ...

  def writeBoolean(self, arg0: bool) -> None: ...

  def writeByte(self, arg0: int) -> None: ...

  def writeBytes(self, arg0: str) -> None: ...

  def writeChar(self, arg0: int) -> None: ...

  def writeChars(self, arg0: str) -> None: ...

  def writeDouble(self, arg0: float) -> None: ...

  def writeFields(self) -> None: ...

  def writeFloat(self, arg0: float) -> None: ...

  def writeInt(self, arg0: int) -> None: ...

  def writeLong(self, arg0: int) -> None: ...

  @overload
  def writeObject(self, arg0: object) -> None: ...

  @overload
  def writeObject(self, arg0: object) -> None: ...

  def writeShort(self, arg0: int) -> None: ...

  def writeUTF(self, arg0: str) -> None: ...

  def writeUnshared(self, arg0: object) -> None: ...

  def __init__(self, arg0: OutputStream): ...

  class BlockDataOutputStream(OutputStream):

    def close(self) -> None: ...

    def flush(self) -> None: ...

    @overload
    def write(self, arg0: list[int]) -> None: ...

    @overload
    def write(self, arg0: list[int]) -> None: ...

    @overload
    def write(self, arg0: int) -> None: ...

    @overload
    def write(self, arg0: int) -> None: ...

    @overload
    def write(self, arg0: list[int], arg1: int, arg2: int) -> None: ...

    @overload
    def write(self, arg0: list[int], arg1: int, arg2: int) -> None: ...

    @overload
    def writeBoolean(self, arg0: bool) -> None: ...

    @overload
    def writeBoolean(self, arg0: bool) -> None: ...

    @overload
    def writeByte(self, arg0: int) -> None: ...

    @overload
    def writeByte(self, arg0: int) -> None: ...

    @overload
    def writeBytes(self, arg0: str) -> None: ...

    @overload
    def writeBytes(self, arg0: str) -> None: ...

    @overload
    def writeChar(self, arg0: int) -> None: ...

    @overload
    def writeChar(self, arg0: int) -> None: ...

    @overload
    def writeChars(self, arg0: str) -> None: ...

    @overload
    def writeChars(self, arg0: str) -> None: ...

    @overload
    def writeDouble(self, arg0: float) -> None: ...

    @overload
    def writeDouble(self, arg0: float) -> None: ...

    @overload
    def writeFloat(self, arg0: float) -> None: ...

    @overload
    def writeFloat(self, arg0: float) -> None: ...

    @overload
    def writeInt(self, arg0: int) -> None: ...

    @overload
    def writeInt(self, arg0: int) -> None: ...

    @overload
    def writeLong(self, arg0: int) -> None: ...

    @overload
    def writeLong(self, arg0: int) -> None: ...

    @overload
    def writeShort(self, arg0: int) -> None: ...

    @overload
    def writeShort(self, arg0: int) -> None: ...

    @overload
    def writeUTF(self, arg0: str) -> None: ...

    @overload
    def writeUTF(self, arg0: str) -> None: ...

  class HandleTable: ...

  class ReplaceTable: ...

  class DebugTraceInfoStack:

    def toString(self) -> str: ...

  class PutFieldImpl(ObjectOutputStream.PutField):

    @overload
    def put(self, arg0: str, arg1: bool) -> None: ...

    @overload
    def put(self, arg0: str, arg1: int) -> None: ...

    @overload
    def put(self, arg0: str, arg1: str) -> None: ...

    @overload
    def put(self, arg0: str, arg1: float) -> None: ...

    @overload
    def put(self, arg0: str, arg1: float) -> None: ...

    @overload
    def put(self, arg0: str, arg1: int) -> None: ...

    @overload
    def put(self, arg0: str, arg1: object) -> None: ...

    @overload
    def put(self, arg0: str, arg1: int) -> None: ...

    @overload
    def put(self, arg0: str, arg1: int) -> None: ...

    def write(self, arg0: ObjectOutput) -> None: ...

  class Caches: ...

  class PutField:

    @overload
    def put(self, arg0: str, arg1: bool) -> None: ...

    @overload
    def put(self, arg0: str, arg1: int) -> None: ...

    @overload
    def put(self, arg0: str, arg1: str) -> None: ...

    @overload
    def put(self, arg0: str, arg1: float) -> None: ...

    @overload
    def put(self, arg0: str, arg1: float) -> None: ...

    @overload
    def put(self, arg0: str, arg1: int) -> None: ...

    @overload
    def put(self, arg0: str, arg1: object) -> None: ...

    @overload
    def put(self, arg0: str, arg1: int) -> None: ...

    @overload
    def put(self, arg0: str, arg1: int) -> None: ...

    def write(self, arg0: ObjectOutput) -> None: ...

    def __init__(self): ...


class ObjectStreamClass:

  NO_FIELDS: list[ObjectStreamField]

  def forClass(self) -> Class[Any]: ...

  def getField(self, arg0: str) -> ObjectStreamField: ...

  def getFields(self) -> list[ObjectStreamField]: ...

  def getName(self) -> str: ...

  def getSerialVersionUID(self) -> int: ...

  def toString(self) -> str: ...

  @staticmethod
  def lookup(arg0: Class[Any]) -> ObjectStreamClass: ...

  @staticmethod
  def lookupAny(arg0: Class[Any]) -> ObjectStreamClass: ...

  class Caches: ...

  class FieldReflector: ...

  class ExceptionInfo: ...

  class DeserializationConstructorsCache(ConcurrentHashMap):

    class Key:

      def equals(self, arg0: object) -> bool: ...

      def hashCode(self) -> int: ...

      class Impl(ObjectStreamClass.DeserializationConstructorsCache.Key): ...

      class Lookup(ObjectStreamClass.DeserializationConstructorsCache.Key): ...

  class ClassDataSlot: ...

  class MemberSignature:

    @overload
    def __init__(self, arg0: Constructor[Any]):
      self.member: Member

      self.name: str

      self.signature: str

    @overload
    def __init__(self, arg0: Field): ...
    @overload
    def __init__(self, arg0: Method): ...

  class FieldReflectorKey:

    def equals(self, arg0: object) -> bool: ...

    def hashCode(self) -> int: ...

  class RecordSupport: ...


class ObjectStreamConstants:

  baseWireHandle: int

  PROTOCOL_VERSION_1: int

  PROTOCOL_VERSION_2: int

  SC_BLOCK_DATA: int

  SC_ENUM: int

  SC_EXTERNALIZABLE: int

  SC_SERIALIZABLE: int

  SC_WRITE_METHOD: int

  SERIAL_FILTER_PERMISSION: SerializablePermission

  STREAM_MAGIC: int

  STREAM_VERSION: int

  SUBCLASS_IMPLEMENTATION_PERMISSION: SerializablePermission

  SUBSTITUTION_PERMISSION: SerializablePermission

  TC_ARRAY: int

  TC_BASE: int

  TC_BLOCKDATA: int

  TC_BLOCKDATALONG: int

  TC_CLASS: int

  TC_CLASSDESC: int

  TC_ENDBLOCKDATA: int

  TC_ENUM: int

  TC_EXCEPTION: int

  TC_LONGSTRING: int

  TC_MAX: int

  TC_NULL: int

  TC_OBJECT: int

  TC_PROXYCLASSDESC: int

  TC_REFERENCE: int

  TC_RESET: int

  TC_STRING: int


class ObjectStreamException(IOException): ...


class ObjectStreamField:

  @overload
  def compareTo(self, arg0: object) -> int: ...

  @overload
  def compareTo(self, arg0: object) -> int: ...

  def getName(self) -> str: ...

  def getOffset(self) -> int: ...

  def getType(self) -> Class[Any]: ...

  def getTypeCode(self) -> str: ...

  def getTypeString(self) -> str: ...

  def isPrimitive(self) -> bool: ...

  def isUnshared(self) -> bool: ...

  def toString(self) -> str: ...

  @overload
  def __init__(self, arg0: str, arg1: Class[Any]): ...
  @overload
  def __init__(self, arg0: str, arg1: Class[Any], arg2: bool): ...


class OptionalDataException(ObjectStreamException): ...


class OutputStream:

  @overload
  def close(self) -> None: ...

  @overload
  def close(self) -> None: ...

  @overload
  def flush(self) -> None: ...

  @overload
  def flush(self) -> None: ...

  @overload
  def write(self, arg0: list[int]) -> None: ...

  @overload
  def write(self, arg0: int) -> None: ...

  @overload
  def write(self, arg0: list[int], arg1: int, arg2: int) -> None: ...

  @staticmethod
  def nullOutputStream() -> OutputStream: ...

  def __init__(self): ...


class OutputStreamWriter(Writer):

  @overload
  def append(self, arg0: CharSequence) -> Appendable: ...

  @overload
  def append(self, arg0: CharSequence) -> Writer: ...

  @overload
  def append(self, arg0: CharSequence, arg1: int, arg2: int) -> Writer: ...

  @overload
  def append(self, arg0: CharSequence, arg1: int, arg2: int) -> Appendable: ...

  def close(self) -> None: ...

  def flush(self) -> None: ...

  def getEncoding(self) -> str: ...

  @overload
  def write(self, arg0: int) -> None: ...

  @overload
  def write(self, arg0: list[str], arg1: int, arg2: int) -> None: ...

  @overload
  def write(self, arg0: str, arg1: int, arg2: int) -> None: ...

  @overload
  def __init__(self, arg0: OutputStream): ...
  @overload
  def __init__(self, arg0: OutputStream, arg1: str): ...
  @overload
  def __init__(self, arg0: OutputStream, arg1: Charset): ...
  @overload
  def __init__(self, arg0: OutputStream, arg1: CharsetEncoder): ...


class PrintStream(FilterOutputStream):

  @overload
  def append(self, arg0: str) -> Appendable: ...

  @overload
  def append(self, arg0: str) -> PrintStream: ...

  @overload
  def append(self, arg0: str) -> Appendable: ...

  @overload
  def append(self, arg0: CharSequence) -> Appendable: ...

  @overload
  def append(self, arg0: CharSequence) -> PrintStream: ...

  @overload
  def append(self, arg0: CharSequence) -> Appendable: ...

  @overload
  def append(self, arg0: CharSequence, arg1: int, arg2: int) -> Appendable: ...

  @overload
  def append(self, arg0: CharSequence, arg1: int, arg2: int) -> PrintStream: ...

  @overload
  def append(self, arg0: CharSequence, arg1: int, arg2: int) -> Appendable: ...

  def charset(self) -> Charset: ...

  def checkError(self) -> bool: ...

  @overload
  def close(self) -> None: ...

  @overload
  def close(self) -> None: ...

  def flush(self) -> None: ...

  @overload
  def format(self, arg0: str, arg1: list[object]) -> PrintStream: ...

  @overload
  def format(self, arg0: Locale, arg1: str, arg2: list[object]) -> PrintStream: ...

  @overload
  def print(self, arg0: list[str]) -> None: ...

  @overload
  def print(self, arg0: bool) -> None: ...

  @overload
  def print(self, arg0: str) -> None: ...

  @overload
  def print(self, arg0: float) -> None: ...

  @overload
  def print(self, arg0: float) -> None: ...

  @overload
  def print(self, arg0: int) -> None: ...

  @overload
  def print(self, arg0: object) -> None: ...

  @overload
  def print(self, arg0: str) -> None: ...

  @overload
  def print(self, arg0: int) -> None: ...

  @overload
  def printf(self, arg0: str, arg1: list[object]) -> PrintStream: ...

  @overload
  def printf(self, arg0: Locale, arg1: str, arg2: list[object]) -> PrintStream: ...

  @overload
  def println(self) -> None: ...

  @overload
  def println(self, arg0: list[str]) -> None: ...

  @overload
  def println(self, arg0: bool) -> None: ...

  @overload
  def println(self, arg0: str) -> None: ...

  @overload
  def println(self, arg0: float) -> None: ...

  @overload
  def println(self, arg0: float) -> None: ...

  @overload
  def println(self, arg0: int) -> None: ...

  @overload
  def println(self, arg0: object) -> None: ...

  @overload
  def println(self, arg0: str) -> None: ...

  @overload
  def println(self, arg0: int) -> None: ...

  @overload
  def write(self, arg0: list[int]) -> None: ...

  @overload
  def write(self, arg0: int) -> None: ...

  @overload
  def write(self, arg0: list[int], arg1: int, arg2: int) -> None: ...

  def writeBytes(self, arg0: list[int]) -> None: ...

  @overload
  def __init__(self, arg0: File): ...
  @overload
  def __init__(self, arg0: OutputStream): ...
  @overload
  def __init__(self, arg0: str): ...
  @overload
  def __init__(self, arg0: File, arg1: str): ...
  @overload
  def __init__(self, arg0: File, arg1: Charset): ...
  @overload
  def __init__(self, arg0: OutputStream, arg1: bool): ...
  @overload
  def __init__(self, arg0: str, arg1: str): ...
  @overload
  def __init__(self, arg0: str, arg1: Charset): ...
  @overload
  def __init__(self, arg0: OutputStream, arg1: bool, arg2: str): ...
  @overload
  def __init__(self, arg0: OutputStream, arg1: bool, arg2: Charset): ...


class PrintWriter(Writer):

  @overload
  def append(self, arg0: str) -> PrintWriter: ...

  @overload
  def append(self, arg0: str) -> Appendable: ...

  @overload
  def append(self, arg0: str) -> Writer: ...

  @overload
  def append(self, arg0: CharSequence) -> PrintWriter: ...

  @overload
  def append(self, arg0: CharSequence) -> Appendable: ...

  @overload
  def append(self, arg0: CharSequence) -> Writer: ...

  @overload
  def append(self, arg0: CharSequence, arg1: int, arg2: int) -> PrintWriter: ...

  @overload
  def append(self, arg0: CharSequence, arg1: int, arg2: int) -> Appendable: ...

  @overload
  def append(self, arg0: CharSequence, arg1: int, arg2: int) -> Writer: ...

  def checkError(self) -> bool: ...

  def close(self) -> None: ...

  def flush(self) -> None: ...

  @overload
  def format(self, arg0: str, arg1: list[object]) -> PrintWriter: ...

  @overload
  def format(self, arg0: Locale, arg1: str, arg2: list[object]) -> PrintWriter: ...

  @overload
  def print(self, arg0: list[str]) -> None: ...

  @overload
  def print(self, arg0: bool) -> None: ...

  @overload
  def print(self, arg0: str) -> None: ...

  @overload
  def print(self, arg0: float) -> None: ...

  @overload
  def print(self, arg0: float) -> None: ...

  @overload
  def print(self, arg0: int) -> None: ...

  @overload
  def print(self, arg0: object) -> None: ...

  @overload
  def print(self, arg0: str) -> None: ...

  @overload
  def print(self, arg0: int) -> None: ...

  @overload
  def printf(self, arg0: str, arg1: list[object]) -> PrintWriter: ...

  @overload
  def printf(self, arg0: Locale, arg1: str, arg2: list[object]) -> PrintWriter: ...

  @overload
  def println(self) -> None: ...

  @overload
  def println(self, arg0: list[str]) -> None: ...

  @overload
  def println(self, arg0: bool) -> None: ...

  @overload
  def println(self, arg0: str) -> None: ...

  @overload
  def println(self, arg0: float) -> None: ...

  @overload
  def println(self, arg0: float) -> None: ...

  @overload
  def println(self, arg0: int) -> None: ...

  @overload
  def println(self, arg0: object) -> None: ...

  @overload
  def println(self, arg0: str) -> None: ...

  @overload
  def println(self, arg0: int) -> None: ...

  @overload
  def write(self, arg0: list[str]) -> None: ...

  @overload
  def write(self, arg0: int) -> None: ...

  @overload
  def write(self, arg0: str) -> None: ...

  @overload
  def write(self, arg0: list[str], arg1: int, arg2: int) -> None: ...

  @overload
  def write(self, arg0: str, arg1: int, arg2: int) -> None: ...

  @overload
  def __init__(self, arg0: File): ...
  @overload
  def __init__(self, arg0: OutputStream): ...
  @overload
  def __init__(self, arg0: Writer): ...
  @overload
  def __init__(self, arg0: str): ...
  @overload
  def __init__(self, arg0: File, arg1: str): ...
  @overload
  def __init__(self, arg0: File, arg1: Charset): ...
  @overload
  def __init__(self, arg0: OutputStream, arg1: bool): ...
  @overload
  def __init__(self, arg0: Writer, arg1: bool): ...
  @overload
  def __init__(self, arg0: str, arg1: str): ...
  @overload
  def __init__(self, arg0: str, arg1: Charset): ...
  @overload
  def __init__(self, arg0: OutputStream, arg1: bool, arg2: Charset): ...


class RandomAccessFile:

  @overload
  def close(self) -> None: ...

  @overload
  def close(self) -> None: ...

  def getChannel(self) -> FileChannel: ...

  def getFD(self) -> FileDescriptor: ...

  def getFilePointer(self) -> int: ...

  def length(self) -> int: ...

  @overload
  def read(self) -> int: ...

  @overload
  def read(self, arg0: list[int]) -> int: ...

  @overload
  def read(self, arg0: list[int], arg1: int, arg2: int) -> int: ...

  @overload
  def readBoolean(self) -> bool: ...

  @overload
  def readBoolean(self) -> bool: ...

  @overload
  def readByte(self) -> int: ...

  @overload
  def readByte(self) -> int: ...

  @overload
  def readChar(self) -> str: ...

  @overload
  def readChar(self) -> str: ...

  @overload
  def readDouble(self) -> float: ...

  @overload
  def readDouble(self) -> float: ...

  @overload
  def readFloat(self) -> float: ...

  @overload
  def readFloat(self) -> float: ...

  @overload
  def readFully(self, arg0: list[int]) -> None: ...

  @overload
  def readFully(self, arg0: list[int]) -> None: ...

  @overload
  def readFully(self, arg0: list[int], arg1: int, arg2: int) -> None: ...

  @overload
  def readFully(self, arg0: list[int], arg1: int, arg2: int) -> None: ...

  @overload
  def readInt(self) -> int: ...

  @overload
  def readInt(self) -> int: ...

  @overload
  def readLine(self) -> str: ...

  @overload
  def readLine(self) -> str: ...

  @overload
  def readLong(self) -> int: ...

  @overload
  def readLong(self) -> int: ...

  @overload
  def readShort(self) -> int: ...

  @overload
  def readShort(self) -> int: ...

  @overload
  def readUTF(self) -> str: ...

  @overload
  def readUTF(self) -> str: ...

  @overload
  def readUnsignedByte(self) -> int: ...

  @overload
  def readUnsignedByte(self) -> int: ...

  @overload
  def readUnsignedShort(self) -> int: ...

  @overload
  def readUnsignedShort(self) -> int: ...

  def seek(self, arg0: int) -> None: ...

  def setLength(self, arg0: int) -> None: ...

  @overload
  def skipBytes(self, arg0: int) -> int: ...

  @overload
  def skipBytes(self, arg0: int) -> int: ...

  @overload
  def write(self, arg0: list[int]) -> None: ...

  @overload
  def write(self, arg0: list[int]) -> None: ...

  @overload
  def write(self, arg0: int) -> None: ...

  @overload
  def write(self, arg0: int) -> None: ...

  @overload
  def write(self, arg0: list[int], arg1: int, arg2: int) -> None: ...

  @overload
  def write(self, arg0: list[int], arg1: int, arg2: int) -> None: ...

  @overload
  def writeBoolean(self, arg0: bool) -> None: ...

  @overload
  def writeBoolean(self, arg0: bool) -> None: ...

  @overload
  def writeByte(self, arg0: int) -> None: ...

  @overload
  def writeByte(self, arg0: int) -> None: ...

  @overload
  def writeBytes(self, arg0: str) -> None: ...

  @overload
  def writeBytes(self, arg0: str) -> None: ...

  @overload
  def writeChar(self, arg0: int) -> None: ...

  @overload
  def writeChar(self, arg0: int) -> None: ...

  @overload
  def writeChars(self, arg0: str) -> None: ...

  @overload
  def writeChars(self, arg0: str) -> None: ...

  @overload
  def writeDouble(self, arg0: float) -> None: ...

  @overload
  def writeDouble(self, arg0: float) -> None: ...

  @overload
  def writeFloat(self, arg0: float) -> None: ...

  @overload
  def writeFloat(self, arg0: float) -> None: ...

  @overload
  def writeInt(self, arg0: int) -> None: ...

  @overload
  def writeInt(self, arg0: int) -> None: ...

  @overload
  def writeLong(self, arg0: int) -> None: ...

  @overload
  def writeLong(self, arg0: int) -> None: ...

  @overload
  def writeShort(self, arg0: int) -> None: ...

  @overload
  def writeShort(self, arg0: int) -> None: ...

  @overload
  def writeUTF(self, arg0: str) -> None: ...

  @overload
  def writeUTF(self, arg0: str) -> None: ...

  @overload
  def __init__(self, arg0: File, arg1: str): ...
  @overload
  def __init__(self, arg0: str, arg1: str): ...


class Reader:

  @overload
  def close(self) -> None: ...

  @overload
  def close(self) -> None: ...

  def mark(self, arg0: int) -> None: ...

  def markSupported(self) -> bool: ...

  @overload
  def read(self) -> int: ...

  @overload
  def read(self, arg0: list[str]) -> int: ...

  @overload
  def read(self, arg0: CharBuffer) -> int: ...

  @overload
  def read(self, arg0: CharBuffer) -> int: ...

  @overload
  def read(self, arg0: list[str], arg1: int, arg2: int) -> int: ...

  def ready(self) -> bool: ...

  def reset(self) -> None: ...

  def skip(self, arg0: int) -> int: ...

  def transferTo(self, arg0: Writer) -> int: ...

  @staticmethod
  def nullReader() -> Reader: ...


class SerialCallbackContext:

  def check(self) -> None: ...

  def checkAndSetUsed(self) -> None: ...

  def getDesc(self) -> ObjectStreamClass: ...

  def getObj(self) -> object: ...

  def setUsed(self) -> None: ...

  def __init__(self, arg0: object, arg1: ObjectStreamClass): ...


class Serializable: ...


class SerializablePermission(BasicPermission):

  @overload
  def __init__(self, arg0: str): ...
  @overload
  def __init__(self, arg0: str, arg1: str): ...


class StreamCorruptedException(ObjectStreamException):

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: str): ...


class StringReader(Reader):

  def close(self) -> None: ...

  def mark(self, arg0: int) -> None: ...

  def markSupported(self) -> bool: ...

  @overload
  def read(self) -> int: ...

  @overload
  def read(self, arg0: list[str], arg1: int, arg2: int) -> int: ...

  def ready(self) -> bool: ...

  def reset(self) -> None: ...

  def skip(self, arg0: int) -> int: ...

  def __init__(self, arg0: str): ...


class StringWriter(Writer):

  @overload
  def append(self, arg0: str) -> StringWriter: ...

  @overload
  def append(self, arg0: str) -> Writer: ...

  @overload
  def append(self, arg0: str) -> Appendable: ...

  @overload
  def append(self, arg0: CharSequence) -> Writer: ...

  @overload
  def append(self, arg0: CharSequence) -> Appendable: ...

  @overload
  def append(self, arg0: CharSequence) -> StringWriter: ...

  @overload
  def append(self, arg0: CharSequence, arg1: int, arg2: int) -> StringWriter: ...

  @overload
  def append(self, arg0: CharSequence, arg1: int, arg2: int) -> Writer: ...

  @overload
  def append(self, arg0: CharSequence, arg1: int, arg2: int) -> Appendable: ...

  def close(self) -> None: ...

  def flush(self) -> None: ...

  def getBuffer(self) -> StringBuffer: ...

  def toString(self) -> str: ...

  @overload
  def write(self, arg0: int) -> None: ...

  @overload
  def write(self, arg0: str) -> None: ...

  @overload
  def write(self, arg0: list[str], arg1: int, arg2: int) -> None: ...

  @overload
  def write(self, arg0: str, arg1: int, arg2: int) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: int): ...


class SyncFailedException(IOException):

  def __init__(self, arg0: str): ...


class UTFDataFormatException(IOException):

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: str): ...


class UnsupportedEncodingException(IOException):

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: str): ...


class WinNTFileSystem(FileSystem):

  def canonicalize(self, arg0: str) -> str: ...

  def checkAccess(self, arg0: File, arg1: int) -> bool: ...

  def compare(self, arg0: File, arg1: File) -> int: ...

  def createDirectory(self, arg0: File) -> bool: ...

  def createFileExclusively(self, arg0: str) -> bool: ...

  def delete(self, arg0: File) -> bool: ...

  def fromURIPath(self, arg0: str) -> str: ...

  def getBooleanAttributes(self, arg0: File) -> int: ...

  def getDefaultParent(self) -> str: ...

  def getLastModifiedTime(self, arg0: File) -> int: ...

  def getLength(self, arg0: File) -> int: ...

  def getNameMax(self, arg0: str) -> int: ...

  def getPathSeparator(self) -> str: ...

  def getSeparator(self) -> str: ...

  def getSpace(self, arg0: File, arg1: int) -> int: ...

  def hashCode(self, arg0: File) -> int: ...

  def isAbsolute(self, arg0: File) -> bool: ...

  def isInvalid(self, arg0: File) -> bool: ...

  def list(self, arg0: File) -> list[str]: ...

  def listRoots(self) -> list[File]: ...

  def normalize(self, arg0: str) -> str: ...

  def prefixLength(self, arg0: str) -> int: ...

  def rename(self, arg0: File, arg1: File) -> bool: ...

  @overload
  def resolve(self, arg0: File) -> str: ...

  @overload
  def resolve(self, arg0: str, arg1: str) -> str: ...

  def setLastModifiedTime(self, arg0: File, arg1: int) -> bool: ...

  def setPermission(self, arg0: File, arg1: int, arg2: bool, arg3: bool) -> bool: ...

  def setReadOnly(self, arg0: File) -> bool: ...

  def __init__(self): ...


class Writer:

  @overload
  def append(self, arg0: str) -> Writer: ...

  @overload
  def append(self, arg0: str) -> Appendable: ...

  @overload
  def append(self, arg0: str) -> Appendable: ...

  @overload
  def append(self, arg0: CharSequence) -> Appendable: ...

  @overload
  def append(self, arg0: CharSequence) -> Writer: ...

  @overload
  def append(self, arg0: CharSequence) -> Appendable: ...

  @overload
  def append(self, arg0: CharSequence, arg1: int, arg2: int) -> Writer: ...

  @overload
  def append(self, arg0: CharSequence, arg1: int, arg2: int) -> Appendable: ...

  @overload
  def append(self, arg0: CharSequence, arg1: int, arg2: int) -> Appendable: ...

  @overload
  def close(self) -> None: ...

  @overload
  def close(self) -> None: ...

  @overload
  def flush(self) -> None: ...

  @overload
  def flush(self) -> None: ...

  @overload
  def write(self, arg0: list[str]) -> None: ...

  @overload
  def write(self, arg0: int) -> None: ...

  @overload
  def write(self, arg0: str) -> None: ...

  @overload
  def write(self, arg0: list[str], arg1: int, arg2: int) -> None: ...

  @overload
  def write(self, arg0: str, arg1: int, arg2: int) -> None: ...

  @staticmethod
  def nullWriter() -> Writer: ...

