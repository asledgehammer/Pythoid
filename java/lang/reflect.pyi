from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.lang import Class, ReflectiveOperationException, Throwable, ClassLoader, RuntimeException
from java.lang.annotation import Annotation
from jdk.internal.org.objectweb.asm import ClassWriter
from jdk.internal.reflect import ConstructorAccessor, MethodAccessor

T = TypeVar('T', default=Any)
D = TypeVar('D', default=Any)

class AccessibleObject:

  def canAccess(self, arg0: object) -> bool: ...

  @overload
  def getAnnotation(self, arg0: Class[T]) -> T: ...

  @overload
  def getAnnotation(self, arg0: Class[T]) -> T: ...

  @overload
  def getAnnotations(self) -> list[Annotation]: ...

  @overload
  def getAnnotations(self) -> list[Annotation]: ...

  @overload
  def getAnnotationsByType(self, arg0: Class[T]) -> list[Annotation]: ...

  @overload
  def getAnnotationsByType(self, arg0: Class[T]) -> list[Annotation]: ...

  @overload
  def getDeclaredAnnotation(self, arg0: Class[T]) -> T: ...

  @overload
  def getDeclaredAnnotation(self, arg0: Class[T]) -> T: ...

  @overload
  def getDeclaredAnnotations(self) -> list[Annotation]: ...

  @overload
  def getDeclaredAnnotations(self) -> list[Annotation]: ...

  @overload
  def getDeclaredAnnotationsByType(self, arg0: Class[T]) -> list[Annotation]: ...

  @overload
  def getDeclaredAnnotationsByType(self, arg0: Class[T]) -> list[Annotation]: ...

  def isAccessible(self) -> bool: ...

  @overload
  def isAnnotationPresent(self, arg0: Class[Annotation]) -> bool: ...

  @overload
  def isAnnotationPresent(self, arg0: Class[Annotation]) -> bool: ...

  def setAccessible(self, arg0: bool) -> None: ...

  def trySetAccessible(self) -> bool: ...

  class Cache: ...


class AnnotatedElement:

  def getAnnotation(self, arg0: Class[T]) -> T: ...

  def getAnnotations(self) -> list[Annotation]: ...

  def getAnnotationsByType(self, arg0: Class[T]) -> list[Annotation]: ...

  def getDeclaredAnnotation(self, arg0: Class[T]) -> T: ...

  def getDeclaredAnnotations(self) -> list[Annotation]: ...

  def getDeclaredAnnotationsByType(self, arg0: Class[T]) -> list[Annotation]: ...

  def isAnnotationPresent(self, arg0: Class[Annotation]) -> bool: ...


class AnnotatedType:

  def getAnnotatedOwnerType(self) -> AnnotatedType: ...

  @overload
  def getAnnotation(self, arg0: Class[T]) -> T: ...

  @overload
  def getAnnotation(self, arg0: Class[T]) -> T: ...

  @overload
  def getAnnotations(self) -> list[Annotation]: ...

  @overload
  def getAnnotations(self) -> list[Annotation]: ...

  def getAnnotationsByType(self, arg0: Class[T]) -> list[Annotation]: ...

  def getDeclaredAnnotation(self, arg0: Class[T]) -> T: ...

  @overload
  def getDeclaredAnnotations(self) -> list[Annotation]: ...

  @overload
  def getDeclaredAnnotations(self) -> list[Annotation]: ...

  def getDeclaredAnnotationsByType(self, arg0: Class[T]) -> list[Annotation]: ...

  def getType(self) -> Type: ...

  def isAnnotationPresent(self, arg0: Class[Annotation]) -> bool: ...


class Array:

  @staticmethod
  def get(arg0: object, arg1: int) -> object: ...

  @staticmethod
  def getBoolean(arg0: object, arg1: int) -> bool: ...

  @staticmethod
  def getByte(arg0: object, arg1: int) -> int: ...

  @staticmethod
  def getChar(arg0: object, arg1: int) -> str: ...

  @staticmethod
  def getDouble(arg0: object, arg1: int) -> float: ...

  @staticmethod
  def getFloat(arg0: object, arg1: int) -> float: ...

  @staticmethod
  def getInt(arg0: object, arg1: int) -> int: ...

  @staticmethod
  def getLength(arg0: object) -> int: ...

  @staticmethod
  def getLong(arg0: object, arg1: int) -> int: ...

  @staticmethod
  def getShort(arg0: object, arg1: int) -> int: ...

  @staticmethod
  @overload
  def newInstance(arg0: Class[Any], arg1: list[int]) -> object: ...

  @staticmethod
  @overload
  def newInstance(arg0: Class[Any], arg1: int) -> object: ...

  @staticmethod
  def set(arg0: object, arg1: int, arg2: object) -> None: ...

  @staticmethod
  def setBoolean(arg0: object, arg1: int, arg2: bool) -> None: ...

  @staticmethod
  def setByte(arg0: object, arg1: int, arg2: int) -> None: ...

  @staticmethod
  def setChar(arg0: object, arg1: int, arg2: str) -> None: ...

  @staticmethod
  def setDouble(arg0: object, arg1: int, arg2: float) -> None: ...

  @staticmethod
  def setFloat(arg0: object, arg1: int, arg2: float) -> None: ...

  @staticmethod
  def setInt(arg0: object, arg1: int, arg2: int) -> None: ...

  @staticmethod
  def setLong(arg0: object, arg1: int, arg2: int) -> None: ...

  @staticmethod
  def setShort(arg0: object, arg1: int, arg2: int) -> None: ...


class Constructor[T](Executable):

  def equals(self, arg0: object) -> bool: ...

  def getAnnotatedReceiverType(self) -> AnnotatedType: ...

  def getAnnotatedReturnType(self) -> AnnotatedType: ...

  def getAnnotation(self, arg0: Class[T]) -> T: ...

  def getDeclaredAnnotations(self) -> list[Annotation]: ...

  def getDeclaringClass(self) -> Class[T]: ...

  def getExceptionTypes(self) -> list[Class]: ...

  def getGenericExceptionTypes(self) -> list[Type]: ...

  def getGenericParameterTypes(self) -> list[Type]: ...

  def getModifiers(self) -> int: ...

  def getName(self) -> str: ...

  def getParameterAnnotations(self) -> list[list[Annotation]]: ...

  def getParameterCount(self) -> int: ...

  def getParameterTypes(self) -> list[Class]: ...

  def getTypeParameters(self) -> list[TypeVariable]: ...

  def hashCode(self) -> int: ...

  def isSynthetic(self) -> bool: ...

  def isVarArgs(self) -> bool: ...

  def newInstance(self, arg0: list[object]) -> object: ...

  def setAccessible(self, arg0: bool) -> None: ...

  def toGenericString(self) -> str: ...

  def toString(self) -> str: ...


class Executable(AccessibleObject):

  DECLARED: int

  PUBLIC: int

  def getAnnotatedExceptionTypes(self) -> list[AnnotatedType]: ...

  def getAnnotatedParameterTypes(self) -> list[AnnotatedType]: ...

  def getAnnotatedReceiverType(self) -> AnnotatedType: ...

  def getAnnotatedReturnType(self) -> AnnotatedType: ...

  def getAnnotation(self, arg0: Class[T]) -> T: ...

  def getAnnotationsByType(self, arg0: Class[T]) -> list[Annotation]: ...

  def getDeclaredAnnotations(self) -> list[Annotation]: ...

  @overload
  def getDeclaringClass(self) -> Class[Any]: ...

  @overload
  def getDeclaringClass(self) -> Class[Any]: ...

  def getExceptionTypes(self) -> list[Class]: ...

  def getGenericExceptionTypes(self) -> list[Type]: ...

  def getGenericParameterTypes(self) -> list[Type]: ...

  @overload
  def getModifiers(self) -> int: ...

  @overload
  def getModifiers(self) -> int: ...

  @overload
  def getName(self) -> str: ...

  @overload
  def getName(self) -> str: ...

  def getParameterAnnotations(self) -> list[list[Annotation]]: ...

  def getParameterCount(self) -> int: ...

  def getParameterTypes(self) -> list[Class]: ...

  def getParameters(self) -> list[Parameter]: ...

  @overload
  def getTypeParameters(self) -> list[TypeVariable]: ...

  @overload
  def getTypeParameters(self) -> list[TypeVariable]: ...

  @overload
  def isSynthetic(self) -> bool: ...

  @overload
  def isSynthetic(self) -> bool: ...

  def isVarArgs(self) -> bool: ...

  def toGenericString(self) -> str: ...


class Field(AccessibleObject):

  DECLARED: int

  PUBLIC: int

  def equals(self, arg0: object) -> bool: ...

  def get(self, arg0: object) -> object: ...

  def getAnnotatedType(self) -> AnnotatedType: ...

  def getAnnotation(self, arg0: Class[T]) -> T: ...

  def getAnnotationsByType(self, arg0: Class[T]) -> list[Annotation]: ...

  def getBoolean(self, arg0: object) -> bool: ...

  def getByte(self, arg0: object) -> int: ...

  def getChar(self, arg0: object) -> str: ...

  def getDeclaredAnnotations(self) -> list[Annotation]: ...

  @overload
  def getDeclaringClass(self) -> Class[Any]: ...

  @overload
  def getDeclaringClass(self) -> Class[Any]: ...

  def getDouble(self, arg0: object) -> float: ...

  def getFloat(self, arg0: object) -> float: ...

  def getGenericType(self) -> Type: ...

  def getInt(self, arg0: object) -> int: ...

  def getLong(self, arg0: object) -> int: ...

  @overload
  def getModifiers(self) -> int: ...

  @overload
  def getModifiers(self) -> int: ...

  @overload
  def getName(self) -> str: ...

  @overload
  def getName(self) -> str: ...

  def getShort(self, arg0: object) -> int: ...

  def getType(self) -> Class[Any]: ...

  def hashCode(self) -> int: ...

  def isEnumConstant(self) -> bool: ...

  @overload
  def isSynthetic(self) -> bool: ...

  @overload
  def isSynthetic(self) -> bool: ...

  def set(self, arg0: object, arg1: object) -> None: ...

  def setAccessible(self, arg0: bool) -> None: ...

  def setBoolean(self, arg0: object, arg1: bool) -> None: ...

  def setByte(self, arg0: object, arg1: int) -> None: ...

  def setChar(self, arg0: object, arg1: str) -> None: ...

  def setDouble(self, arg0: object, arg1: float) -> None: ...

  def setFloat(self, arg0: object, arg1: float) -> None: ...

  def setInt(self, arg0: object, arg1: int) -> None: ...

  def setLong(self, arg0: object, arg1: int) -> None: ...

  def setShort(self, arg0: object, arg1: int) -> None: ...

  def toGenericString(self) -> str: ...

  def toString(self) -> str: ...


class GenericArrayType:

  def getGenericComponentType(self) -> Type: ...

  def getTypeName(self) -> str: ...


class GenericDeclaration:

  def getAnnotation(self, arg0: Class[T]) -> T: ...

  def getAnnotations(self) -> list[Annotation]: ...

  def getAnnotationsByType(self, arg0: Class[T]) -> list[Annotation]: ...

  def getDeclaredAnnotation(self, arg0: Class[T]) -> T: ...

  def getDeclaredAnnotations(self) -> list[Annotation]: ...

  def getDeclaredAnnotationsByType(self, arg0: Class[T]) -> list[Annotation]: ...

  def getTypeParameters(self) -> list[TypeVariable]: ...

  def isAnnotationPresent(self, arg0: Class[Annotation]) -> bool: ...


class InvocationHandler:

  def invoke(self, arg0: object, arg1: Method, arg2: list[object]) -> object: ...

  @staticmethod
  def invokeDefault(arg0: object, arg1: Method, arg2: list[object]) -> object: ...


class InvocationTargetException(ReflectiveOperationException):

  def getCause(self) -> Throwable: ...

  def getTargetException(self) -> Throwable: ...

  @overload
  def __init__(self, arg0: Throwable): ...
  @overload
  def __init__(self, arg0: Throwable, arg1: str): ...


class Member:

  DECLARED: int

  PUBLIC: int

  def getDeclaringClass(self) -> Class[Any]: ...

  def getModifiers(self) -> int: ...

  def getName(self) -> str: ...

  def isSynthetic(self) -> bool: ...


class Method(Executable):

  def equals(self, arg0: object) -> bool: ...

  def getAnnotatedReturnType(self) -> AnnotatedType: ...

  def getAnnotation(self, arg0: Class[T]) -> T: ...

  def getDeclaredAnnotations(self) -> list[Annotation]: ...

  def getDeclaringClass(self) -> Class[Any]: ...

  def getDefaultValue(self) -> object: ...

  def getExceptionTypes(self) -> list[Class]: ...

  def getGenericExceptionTypes(self) -> list[Type]: ...

  def getGenericParameterTypes(self) -> list[Type]: ...

  def getGenericReturnType(self) -> Type: ...

  def getModifiers(self) -> int: ...

  def getName(self) -> str: ...

  def getParameterAnnotations(self) -> list[list[Annotation]]: ...

  def getParameterCount(self) -> int: ...

  def getParameterTypes(self) -> list[Class]: ...

  def getReturnType(self) -> Class[Any]: ...

  def getTypeParameters(self) -> list[TypeVariable]: ...

  def hashCode(self) -> int: ...

  def invoke(self, arg0: object, arg1: list[object]) -> object: ...

  def isBridge(self) -> bool: ...

  def isDefault(self) -> bool: ...

  def isSynthetic(self) -> bool: ...

  def isVarArgs(self) -> bool: ...

  def setAccessible(self, arg0: bool) -> None: ...

  def toGenericString(self) -> str: ...

  def toString(self) -> str: ...


class Modifier:

  ABSTRACT: int

  FINAL: int

  INTERFACE: int

  NATIVE: int

  PRIVATE: int

  PROTECTED: int

  PUBLIC: int

  STATIC: int

  STRICT: int

  SYNCHRONIZED: int

  TRANSIENT: int

  VOLATILE: int

  @staticmethod
  def classModifiers() -> int: ...

  @staticmethod
  def constructorModifiers() -> int: ...

  @staticmethod
  def fieldModifiers() -> int: ...

  @staticmethod
  def interfaceModifiers() -> int: ...

  @staticmethod
  def isAbstract(arg0: int) -> bool: ...

  @staticmethod
  def isFinal(arg0: int) -> bool: ...

  @staticmethod
  def isInterface(arg0: int) -> bool: ...

  @staticmethod
  def isNative(arg0: int) -> bool: ...

  @staticmethod
  def isPrivate(arg0: int) -> bool: ...

  @staticmethod
  def isProtected(arg0: int) -> bool: ...

  @staticmethod
  def isPublic(arg0: int) -> bool: ...

  @staticmethod
  def isStatic(arg0: int) -> bool: ...

  @staticmethod
  def isStrict(arg0: int) -> bool: ...

  @staticmethod
  def isSynchronized(arg0: int) -> bool: ...

  @staticmethod
  def isTransient(arg0: int) -> bool: ...

  @staticmethod
  def isVolatile(arg0: int) -> bool: ...

  @staticmethod
  def methodModifiers() -> int: ...

  @staticmethod
  def parameterModifiers() -> int: ...

  @staticmethod
  def toString(arg0: int) -> str: ...


class Parameter:

  def equals(self, arg0: object) -> bool: ...

  def getAnnotatedType(self) -> AnnotatedType: ...

  @overload
  def getAnnotation(self, arg0: Class[T]) -> T: ...

  @overload
  def getAnnotation(self, arg0: Class[T]) -> T: ...

  @overload
  def getAnnotations(self) -> list[Annotation]: ...

  @overload
  def getAnnotations(self) -> list[Annotation]: ...

  @overload
  def getAnnotationsByType(self, arg0: Class[T]) -> list[Annotation]: ...

  @overload
  def getAnnotationsByType(self, arg0: Class[T]) -> list[Annotation]: ...

  @overload
  def getDeclaredAnnotation(self, arg0: Class[T]) -> T: ...

  @overload
  def getDeclaredAnnotation(self, arg0: Class[T]) -> T: ...

  @overload
  def getDeclaredAnnotations(self) -> list[Annotation]: ...

  @overload
  def getDeclaredAnnotations(self) -> list[Annotation]: ...

  @overload
  def getDeclaredAnnotationsByType(self, arg0: Class[T]) -> list[Annotation]: ...

  @overload
  def getDeclaredAnnotationsByType(self, arg0: Class[T]) -> list[Annotation]: ...

  def getDeclaringExecutable(self) -> Executable: ...

  def getModifiers(self) -> int: ...

  def getName(self) -> str: ...

  def getParameterizedType(self) -> Type: ...

  def getType(self) -> Class[Any]: ...

  def hashCode(self) -> int: ...

  def isAnnotationPresent(self, arg0: Class[Annotation]) -> bool: ...

  def isImplicit(self) -> bool: ...

  def isNamePresent(self) -> bool: ...

  def isSynthetic(self) -> bool: ...

  def isVarArgs(self) -> bool: ...

  def toString(self) -> str: ...


class ParameterizedType:

  def getActualTypeArguments(self) -> list[Type]: ...

  def getOwnerType(self) -> Type: ...

  def getRawType(self) -> Type: ...

  def getTypeName(self) -> str: ...


class Proxy:

  @staticmethod
  def getInvocationHandler(arg0: object) -> InvocationHandler: ...

  @staticmethod
  def getProxyClass(arg0: ClassLoader, arg1: list[Class]) -> Class[Any]: ...

  @staticmethod
  def isProxyClass(arg0: Class[Any]) -> bool: ...

  @staticmethod
  def newProxyInstance(arg0: ClassLoader, arg1: list[Class], arg2: InvocationHandler) -> object: ...

  class ProxyBuilder: ...

  class InvocationException(ReflectiveOperationException): ...


class ProxyGenerator(ClassWriter):

  class ProxyMethod:

    def toString(self) -> str: ...

  class PrimitiveTypeInfo:

    @staticmethod
    def get(arg0: Class[Any]) -> ProxyGenerator.PrimitiveTypeInfo: ...


class RecordComponent:

  def getAccessor(self) -> Method: ...

  def getAnnotatedType(self) -> AnnotatedType: ...

  @overload
  def getAnnotation(self, arg0: Class[T]) -> T: ...

  @overload
  def getAnnotation(self, arg0: Class[T]) -> T: ...

  @overload
  def getAnnotations(self) -> list[Annotation]: ...

  @overload
  def getAnnotations(self) -> list[Annotation]: ...

  def getAnnotationsByType(self, arg0: Class[T]) -> list[Annotation]: ...

  def getDeclaredAnnotation(self, arg0: Class[T]) -> T: ...

  @overload
  def getDeclaredAnnotations(self) -> list[Annotation]: ...

  @overload
  def getDeclaredAnnotations(self) -> list[Annotation]: ...

  def getDeclaredAnnotationsByType(self, arg0: Class[T]) -> list[Annotation]: ...

  def getDeclaringRecord(self) -> Class[Any]: ...

  def getGenericSignature(self) -> str: ...

  def getGenericType(self) -> Type: ...

  def getName(self) -> str: ...

  def getType(self) -> Class[Any]: ...

  def isAnnotationPresent(self, arg0: Class[Annotation]) -> bool: ...

  def toString(self) -> str: ...


class ReflectAccess:

  @overload
  def copyConstructor(self, arg0: Constructor[T]) -> Constructor[T]: ...

  @overload
  def copyConstructor(self, arg0: Constructor[T]) -> Constructor[T]: ...

  @overload
  def copyField(self, arg0: Field) -> Field: ...

  @overload
  def copyField(self, arg0: Field) -> Field: ...

  @overload
  def copyMethod(self, arg0: Method) -> Method: ...

  @overload
  def copyMethod(self, arg0: Method) -> Method: ...

  @overload
  def getConstructorAccessor(self, arg0: Constructor[Any]) -> ConstructorAccessor: ...

  @overload
  def getConstructorAccessor(self, arg0: Constructor[Any]) -> ConstructorAccessor: ...

  @overload
  def getConstructorAnnotations(self, arg0: Constructor[Any]) -> list[int]: ...

  @overload
  def getConstructorAnnotations(self, arg0: Constructor[Any]) -> list[int]: ...

  @overload
  def getConstructorParameterAnnotations(self, arg0: Constructor[Any]) -> list[int]: ...

  @overload
  def getConstructorParameterAnnotations(self, arg0: Constructor[Any]) -> list[int]: ...

  @overload
  def getConstructorSignature(self, arg0: Constructor[Any]) -> str: ...

  @overload
  def getConstructorSignature(self, arg0: Constructor[Any]) -> str: ...

  @overload
  def getConstructorSlot(self, arg0: Constructor[Any]) -> int: ...

  @overload
  def getConstructorSlot(self, arg0: Constructor[Any]) -> int: ...

  @overload
  def getExecutableSharedParameterTypes(self, arg0: Executable) -> list[Class]: ...

  @overload
  def getExecutableSharedParameterTypes(self, arg0: Executable) -> list[Class]: ...

  @overload
  def getExecutableTypeAnnotationBytes(self, arg0: Executable) -> list[int]: ...

  @overload
  def getExecutableTypeAnnotationBytes(self, arg0: Executable) -> list[int]: ...

  @overload
  def getMethodAccessor(self, arg0: Method) -> MethodAccessor: ...

  @overload
  def getMethodAccessor(self, arg0: Method) -> MethodAccessor: ...

  @overload
  def getRoot(self, arg0: T) -> T: ...

  @overload
  def getRoot(self, arg0: T) -> T: ...

  @overload
  def isTrustedFinalField(self, arg0: Field) -> bool: ...

  @overload
  def isTrustedFinalField(self, arg0: Field) -> bool: ...

  @overload
  def leafCopyMethod(self, arg0: Method) -> Method: ...

  @overload
  def leafCopyMethod(self, arg0: Method) -> Method: ...

  @overload
  def newConstructor(self, arg0: Class[T], arg1: list[Class], arg2: list[Class], arg3: int, arg4: int, arg5: str, arg6: list[int], arg7: list[int]) -> Constructor[T]: ...

  @overload
  def newConstructor(self, arg0: Class[T], arg1: list[Class], arg2: list[Class], arg3: int, arg4: int, arg5: str, arg6: list[int], arg7: list[int]) -> Constructor[T]: ...

  @overload
  def newInstance(self, arg0: Constructor[T], arg1: list[object], arg2: Class[Any]) -> object: ...

  @overload
  def newInstance(self, arg0: Constructor[T], arg1: list[object], arg2: Class[Any]) -> object: ...

  @overload
  def setConstructorAccessor(self, arg0: Constructor[Any], arg1: ConstructorAccessor) -> None: ...

  @overload
  def setConstructorAccessor(self, arg0: Constructor[Any], arg1: ConstructorAccessor) -> None: ...

  @overload
  def setMethodAccessor(self, arg0: Method, arg1: MethodAccessor) -> None: ...

  @overload
  def setMethodAccessor(self, arg0: Method, arg1: MethodAccessor) -> None: ...


class Type:

  def getTypeName(self) -> str: ...


class TypeVariable[D]:

  def getAnnotatedBounds(self) -> list[AnnotatedType]: ...

  def getAnnotation(self, arg0: Class[T]) -> T: ...

  def getAnnotations(self) -> list[Annotation]: ...

  def getAnnotationsByType(self, arg0: Class[T]) -> list[Annotation]: ...

  def getBounds(self) -> list[Type]: ...

  def getDeclaredAnnotation(self, arg0: Class[T]) -> T: ...

  def getDeclaredAnnotations(self) -> list[Annotation]: ...

  def getDeclaredAnnotationsByType(self, arg0: Class[T]) -> list[Annotation]: ...

  def getGenericDeclaration(self) -> D: ...

  def getName(self) -> str: ...

  def getTypeName(self) -> str: ...

  def isAnnotationPresent(self, arg0: Class[Annotation]) -> bool: ...


class UndeclaredThrowableException(RuntimeException):

  def getUndeclaredThrowable(self) -> Throwable: ...

  @overload
  def __init__(self, arg0: Throwable): ...
  @overload
  def __init__(self, arg0: Throwable, arg1: str): ...


class WildcardType:

  def getLowerBounds(self) -> list[Type]: ...

  def getTypeName(self) -> str: ...

  def getUpperBounds(self) -> list[Type]: ...

