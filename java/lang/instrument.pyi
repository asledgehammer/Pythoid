from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.lang import Class, ClassLoader, Module, Exception
from java.security import ProtectionDomain
from java.util import Set, Map, List
from java.util.jar import JarFile

class ClassDefinition:

  def getDefinitionClass(self) -> Class[Any]: ...

  def getDefinitionClassFile(self) -> list[int]: ...

  def __init__(self, arg0: Class[Any], arg1: list[int]): ...


class ClassFileTransformer:

  @overload
  def transform(self, arg0: ClassLoader, arg1: str, arg2: Class[Any], arg3: ProtectionDomain, arg4: list[int]) -> list[int]: ...

  @overload
  def transform(self, arg0: Module, arg1: ClassLoader, arg2: str, arg3: Class[Any], arg4: ProtectionDomain, arg5: list[int]) -> list[int]: ...


class IllegalClassFormatException(Exception):

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: str): ...


class Instrumentation:

  @overload
  def addTransformer(self, arg0: ClassFileTransformer) -> None: ...

  @overload
  def addTransformer(self, arg0: ClassFileTransformer, arg1: bool) -> None: ...

  def appendToBootstrapClassLoaderSearch(self, arg0: JarFile) -> None: ...

  def appendToSystemClassLoaderSearch(self, arg0: JarFile) -> None: ...

  def getAllLoadedClasses(self) -> list[Class]: ...

  def getInitiatedClasses(self, arg0: ClassLoader) -> list[Class]: ...

  def getObjectSize(self, arg0: object) -> int: ...

  def isModifiableClass(self, arg0: Class[Any]) -> bool: ...

  def isModifiableModule(self, arg0: Module) -> bool: ...

  def isNativeMethodPrefixSupported(self) -> bool: ...

  def isRedefineClassesSupported(self) -> bool: ...

  def isRetransformClassesSupported(self) -> bool: ...

  def redefineClasses(self, arg0: list[ClassDefinition]) -> None: ...

  def redefineModule(self, arg0: Module, arg1: Set[Module], arg2: Map[str, Set[Module]], arg3: Map[str, Set[Module]], arg4: Set[Class[Any]], arg5: Map[Class[Any], List[Class[Any]]]) -> None: ...

  def removeTransformer(self, arg0: ClassFileTransformer) -> bool: ...

  def retransformClasses(self, arg0: list[Class]) -> None: ...

  def setNativeMethodPrefix(self, arg0: ClassFileTransformer, arg1: str) -> None: ...


class UnmodifiableClassException(Exception):

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: str): ...

