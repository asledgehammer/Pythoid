from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.awt.color import ColorSpace
from java.awt.datatransfer import Clipboard
from java.awt.desktop import SystemEventListener, AboutHandler, OpenFilesHandler, OpenURIHandler, PreferencesHandler, PrintFilesHandler, QuitHandler, QuitStrategy
from java.awt.dnd import DropTarget, DragSource, DragGestureListener
from java.awt.event import ActionEvent, AdjustmentEvent, HierarchyEvent, InputMethodEvent, ContainerEvent, ComponentEvent, FocusEvent, ItemEvent, KeyEvent, MouseEvent, MouseWheelEvent, TextEvent, WindowEvent, ActionListener, AdjustmentListener, ComponentListener, ContainerListener, FocusListener, HierarchyBoundsListener, HierarchyListener, InputMethodListener, ItemListener, KeyListener, MouseListener, MouseMotionListener, MouseWheelListener, TextListener, WindowFocusListener, WindowListener, WindowStateListener, AWTEventListener
from java.awt.font import FontRenderContext, GlyphVector, TextAttribute, LineMetrics
from java.awt.geom import Rectangle2D, AffineTransform, Dimension2D, Point2D, PathIterator
from java.awt.im import InputContext, InputMethodRequests, InputMethodHighlight
from java.awt.image import ColorModel, BufferStrategy, ImageObserver, ImageProducer, VolatileImage, Raster, WritableRaster, BufferedImage, BufferedImageOp, RenderedImage
from java.awt.image.renderable import RenderableImage
from java.awt.peer import FontPeer
from java.beans import PropertyChangeListener, PropertyChangeSupport, PropertyChangeEvent
from java.io import PrintStream, PrintWriter, File, FilenameFilter, InputStream
from java.lang import Class, Exception, Character, Number, Enum, Thread, Runnable, UnsupportedOperationException, IllegalStateException, Integer
from java.net import URI, URL
from java.text import CharacterIterator, AttributedCharacterIterator
from java.util import EventObject, EventListener, Set, Locale, ResourceBundle, Map, Enumeration, Collection, Properties, List
from java.util.function import BiFunction, Function, BiConsumer
from javax.accessibility import AccessibleContext, AccessibleAction, AccessibleRole, AccessibleValue, AccessibleStateSet, Accessible, AccessibleComponent, AccessibleSelection, AccessibleText
from javax.swing import JMenuBar
from javax.swing.text import AttributeSet
from sun.font import FontAccess, Font2D, Font2DHandle
from sun.java2d.pipe.hw import ExtendedBufferCapabilities

T = TypeVar('T', default=Any)
K = TypeVar('K', default=Any)
V = TypeVar('V', default=Any)

class AWTEvent(EventObject):

  ACTION_EVENT_MASK: int

  ADJUSTMENT_EVENT_MASK: int

  COMPONENT_EVENT_MASK: int

  CONTAINER_EVENT_MASK: int

  FOCUS_EVENT_MASK: int

  HIERARCHY_BOUNDS_EVENT_MASK: int

  HIERARCHY_EVENT_MASK: int

  INPUT_METHOD_EVENT_MASK: int

  INVOCATION_EVENT_MASK: int

  ITEM_EVENT_MASK: int

  KEY_EVENT_MASK: int

  MOUSE_EVENT_MASK: int

  MOUSE_MOTION_EVENT_MASK: int

  MOUSE_WHEEL_EVENT_MASK: int

  PAINT_EVENT_MASK: int

  RESERVED_ID_MAX: int

  TEXT_EVENT_MASK: int

  WINDOW_EVENT_MASK: int

  WINDOW_FOCUS_EVENT_MASK: int

  WINDOW_STATE_EVENT_MASK: int

  def getID(self) -> int: ...

  def paramString(self) -> str: ...

  def setSource(self, arg0: object) -> None: ...

  def toString(self) -> str: ...

  @overload
  def __init__(self, arg0: Event): ...
  @overload
  def __init__(self, arg0: object, arg1: int): ...


class AWTEventMulticaster:

  @overload
  def actionPerformed(self, arg0: ActionEvent) -> None: ...

  @overload
  def actionPerformed(self, arg0: ActionEvent) -> None: ...

  @overload
  def adjustmentValueChanged(self, arg0: AdjustmentEvent) -> None: ...

  @overload
  def adjustmentValueChanged(self, arg0: AdjustmentEvent) -> None: ...

  @overload
  def ancestorMoved(self, arg0: HierarchyEvent) -> None: ...

  @overload
  def ancestorMoved(self, arg0: HierarchyEvent) -> None: ...

  @overload
  def ancestorResized(self, arg0: HierarchyEvent) -> None: ...

  @overload
  def ancestorResized(self, arg0: HierarchyEvent) -> None: ...

  @overload
  def caretPositionChanged(self, arg0: InputMethodEvent) -> None: ...

  @overload
  def caretPositionChanged(self, arg0: InputMethodEvent) -> None: ...

  @overload
  def componentAdded(self, arg0: ContainerEvent) -> None: ...

  @overload
  def componentAdded(self, arg0: ContainerEvent) -> None: ...

  @overload
  def componentHidden(self, arg0: ComponentEvent) -> None: ...

  @overload
  def componentHidden(self, arg0: ComponentEvent) -> None: ...

  @overload
  def componentMoved(self, arg0: ComponentEvent) -> None: ...

  @overload
  def componentMoved(self, arg0: ComponentEvent) -> None: ...

  @overload
  def componentRemoved(self, arg0: ContainerEvent) -> None: ...

  @overload
  def componentRemoved(self, arg0: ContainerEvent) -> None: ...

  @overload
  def componentResized(self, arg0: ComponentEvent) -> None: ...

  @overload
  def componentResized(self, arg0: ComponentEvent) -> None: ...

  @overload
  def componentShown(self, arg0: ComponentEvent) -> None: ...

  @overload
  def componentShown(self, arg0: ComponentEvent) -> None: ...

  @overload
  def focusGained(self, arg0: FocusEvent) -> None: ...

  @overload
  def focusGained(self, arg0: FocusEvent) -> None: ...

  @overload
  def focusLost(self, arg0: FocusEvent) -> None: ...

  @overload
  def focusLost(self, arg0: FocusEvent) -> None: ...

  @overload
  def hierarchyChanged(self, arg0: HierarchyEvent) -> None: ...

  @overload
  def hierarchyChanged(self, arg0: HierarchyEvent) -> None: ...

  @overload
  def inputMethodTextChanged(self, arg0: InputMethodEvent) -> None: ...

  @overload
  def inputMethodTextChanged(self, arg0: InputMethodEvent) -> None: ...

  @overload
  def itemStateChanged(self, arg0: ItemEvent) -> None: ...

  @overload
  def itemStateChanged(self, arg0: ItemEvent) -> None: ...

  @overload
  def keyPressed(self, arg0: KeyEvent) -> None: ...

  @overload
  def keyPressed(self, arg0: KeyEvent) -> None: ...

  @overload
  def keyReleased(self, arg0: KeyEvent) -> None: ...

  @overload
  def keyReleased(self, arg0: KeyEvent) -> None: ...

  @overload
  def keyTyped(self, arg0: KeyEvent) -> None: ...

  @overload
  def keyTyped(self, arg0: KeyEvent) -> None: ...

  @overload
  def mouseClicked(self, arg0: MouseEvent) -> None: ...

  @overload
  def mouseClicked(self, arg0: MouseEvent) -> None: ...

  @overload
  def mouseDragged(self, arg0: MouseEvent) -> None: ...

  @overload
  def mouseDragged(self, arg0: MouseEvent) -> None: ...

  @overload
  def mouseEntered(self, arg0: MouseEvent) -> None: ...

  @overload
  def mouseEntered(self, arg0: MouseEvent) -> None: ...

  @overload
  def mouseExited(self, arg0: MouseEvent) -> None: ...

  @overload
  def mouseExited(self, arg0: MouseEvent) -> None: ...

  @overload
  def mouseMoved(self, arg0: MouseEvent) -> None: ...

  @overload
  def mouseMoved(self, arg0: MouseEvent) -> None: ...

  @overload
  def mousePressed(self, arg0: MouseEvent) -> None: ...

  @overload
  def mousePressed(self, arg0: MouseEvent) -> None: ...

  @overload
  def mouseReleased(self, arg0: MouseEvent) -> None: ...

  @overload
  def mouseReleased(self, arg0: MouseEvent) -> None: ...

  @overload
  def mouseWheelMoved(self, arg0: MouseWheelEvent) -> None: ...

  @overload
  def mouseWheelMoved(self, arg0: MouseWheelEvent) -> None: ...

  @overload
  def textValueChanged(self, arg0: TextEvent) -> None: ...

  @overload
  def textValueChanged(self, arg0: TextEvent) -> None: ...

  @overload
  def windowActivated(self, arg0: WindowEvent) -> None: ...

  @overload
  def windowActivated(self, arg0: WindowEvent) -> None: ...

  @overload
  def windowClosed(self, arg0: WindowEvent) -> None: ...

  @overload
  def windowClosed(self, arg0: WindowEvent) -> None: ...

  @overload
  def windowClosing(self, arg0: WindowEvent) -> None: ...

  @overload
  def windowClosing(self, arg0: WindowEvent) -> None: ...

  @overload
  def windowDeactivated(self, arg0: WindowEvent) -> None: ...

  @overload
  def windowDeactivated(self, arg0: WindowEvent) -> None: ...

  @overload
  def windowDeiconified(self, arg0: WindowEvent) -> None: ...

  @overload
  def windowDeiconified(self, arg0: WindowEvent) -> None: ...

  @overload
  def windowGainedFocus(self, arg0: WindowEvent) -> None: ...

  @overload
  def windowGainedFocus(self, arg0: WindowEvent) -> None: ...

  @overload
  def windowIconified(self, arg0: WindowEvent) -> None: ...

  @overload
  def windowIconified(self, arg0: WindowEvent) -> None: ...

  @overload
  def windowLostFocus(self, arg0: WindowEvent) -> None: ...

  @overload
  def windowLostFocus(self, arg0: WindowEvent) -> None: ...

  @overload
  def windowOpened(self, arg0: WindowEvent) -> None: ...

  @overload
  def windowOpened(self, arg0: WindowEvent) -> None: ...

  @overload
  def windowStateChanged(self, arg0: WindowEvent) -> None: ...

  @overload
  def windowStateChanged(self, arg0: WindowEvent) -> None: ...

  @staticmethod
  @overload
  def add(arg0: ActionListener, arg1: ActionListener) -> ActionListener: ...

  @staticmethod
  @overload
  def add(arg0: AdjustmentListener, arg1: AdjustmentListener) -> AdjustmentListener: ...

  @staticmethod
  @overload
  def add(arg0: ComponentListener, arg1: ComponentListener) -> ComponentListener: ...

  @staticmethod
  @overload
  def add(arg0: ContainerListener, arg1: ContainerListener) -> ContainerListener: ...

  @staticmethod
  @overload
  def add(arg0: FocusListener, arg1: FocusListener) -> FocusListener: ...

  @staticmethod
  @overload
  def add(arg0: HierarchyBoundsListener, arg1: HierarchyBoundsListener) -> HierarchyBoundsListener: ...

  @staticmethod
  @overload
  def add(arg0: HierarchyListener, arg1: HierarchyListener) -> HierarchyListener: ...

  @staticmethod
  @overload
  def add(arg0: InputMethodListener, arg1: InputMethodListener) -> InputMethodListener: ...

  @staticmethod
  @overload
  def add(arg0: ItemListener, arg1: ItemListener) -> ItemListener: ...

  @staticmethod
  @overload
  def add(arg0: KeyListener, arg1: KeyListener) -> KeyListener: ...

  @staticmethod
  @overload
  def add(arg0: MouseListener, arg1: MouseListener) -> MouseListener: ...

  @staticmethod
  @overload
  def add(arg0: MouseMotionListener, arg1: MouseMotionListener) -> MouseMotionListener: ...

  @staticmethod
  @overload
  def add(arg0: MouseWheelListener, arg1: MouseWheelListener) -> MouseWheelListener: ...

  @staticmethod
  @overload
  def add(arg0: TextListener, arg1: TextListener) -> TextListener: ...

  @staticmethod
  @overload
  def add(arg0: WindowFocusListener, arg1: WindowFocusListener) -> WindowFocusListener: ...

  @staticmethod
  @overload
  def add(arg0: WindowListener, arg1: WindowListener) -> WindowListener: ...

  @staticmethod
  @overload
  def add(arg0: WindowStateListener, arg1: WindowStateListener) -> WindowStateListener: ...

  @staticmethod
  def getListeners(arg0: EventListener, arg1: Class[T]) -> list[EventListener]: ...

  @staticmethod
  @overload
  def remove(arg0: ActionListener, arg1: ActionListener) -> ActionListener: ...

  @staticmethod
  @overload
  def remove(arg0: AdjustmentListener, arg1: AdjustmentListener) -> AdjustmentListener: ...

  @staticmethod
  @overload
  def remove(arg0: ComponentListener, arg1: ComponentListener) -> ComponentListener: ...

  @staticmethod
  @overload
  def remove(arg0: ContainerListener, arg1: ContainerListener) -> ContainerListener: ...

  @staticmethod
  @overload
  def remove(arg0: FocusListener, arg1: FocusListener) -> FocusListener: ...

  @staticmethod
  @overload
  def remove(arg0: HierarchyBoundsListener, arg1: HierarchyBoundsListener) -> HierarchyBoundsListener: ...

  @staticmethod
  @overload
  def remove(arg0: HierarchyListener, arg1: HierarchyListener) -> HierarchyListener: ...

  @staticmethod
  @overload
  def remove(arg0: InputMethodListener, arg1: InputMethodListener) -> InputMethodListener: ...

  @staticmethod
  @overload
  def remove(arg0: ItemListener, arg1: ItemListener) -> ItemListener: ...

  @staticmethod
  @overload
  def remove(arg0: KeyListener, arg1: KeyListener) -> KeyListener: ...

  @staticmethod
  @overload
  def remove(arg0: MouseListener, arg1: MouseListener) -> MouseListener: ...

  @staticmethod
  @overload
  def remove(arg0: MouseMotionListener, arg1: MouseMotionListener) -> MouseMotionListener: ...

  @staticmethod
  @overload
  def remove(arg0: MouseWheelListener, arg1: MouseWheelListener) -> MouseWheelListener: ...

  @staticmethod
  @overload
  def remove(arg0: TextListener, arg1: TextListener) -> TextListener: ...

  @staticmethod
  @overload
  def remove(arg0: WindowFocusListener, arg1: WindowFocusListener) -> WindowFocusListener: ...

  @staticmethod
  @overload
  def remove(arg0: WindowListener, arg1: WindowListener) -> WindowListener: ...

  @staticmethod
  @overload
  def remove(arg0: WindowStateListener, arg1: WindowStateListener) -> WindowStateListener: ...


class AWTException(Exception):

  def __init__(self, arg0: str): ...


class AWTKeyStroke:

  def equals(self, arg0: object) -> bool: ...

  def getKeyChar(self) -> str: ...

  def getKeyCode(self) -> int: ...

  def getKeyEventType(self) -> int: ...

  def getModifiers(self) -> int: ...

  def hashCode(self) -> int: ...

  def isOnKeyRelease(self) -> bool: ...

  def toString(self) -> str: ...

  @staticmethod
  @overload
  def getAWTKeyStroke(arg0: str) -> AWTKeyStroke: ...

  @staticmethod
  @overload
  def getAWTKeyStroke(arg0: str) -> AWTKeyStroke: ...

  @staticmethod
  @overload
  def getAWTKeyStroke(arg0: int, arg1: int) -> AWTKeyStroke: ...

  @staticmethod
  @overload
  def getAWTKeyStroke(arg0: str, arg1: int) -> AWTKeyStroke: ...

  @staticmethod
  @overload
  def getAWTKeyStroke(arg0: int, arg1: int, arg2: bool) -> AWTKeyStroke: ...

  @staticmethod
  def getAWTKeyStrokeForEvent(arg0: KeyEvent) -> AWTKeyStroke: ...


class ActiveEvent:

  def dispatch(self) -> None: ...


class Adjustable:

  HORIZONTAL: int

  NO_ORIENTATION: int

  VERTICAL: int

  def addAdjustmentListener(self, arg0: AdjustmentListener) -> None: ...

  def getBlockIncrement(self) -> int: ...

  def getMaximum(self) -> int: ...

  def getMinimum(self) -> int: ...

  def getOrientation(self) -> int: ...

  def getUnitIncrement(self) -> int: ...

  def getValue(self) -> int: ...

  def getVisibleAmount(self) -> int: ...

  def removeAdjustmentListener(self, arg0: AdjustmentListener) -> None: ...

  def setBlockIncrement(self, arg0: int) -> None: ...

  def setMaximum(self, arg0: int) -> None: ...

  def setMinimum(self, arg0: int) -> None: ...

  def setUnitIncrement(self, arg0: int) -> None: ...

  def setValue(self, arg0: int) -> None: ...

  def setVisibleAmount(self, arg0: int) -> None: ...


class AlphaComposite:

  CLEAR: int

  DST: int

  DST_ATOP: int

  DST_IN: int

  DST_OUT: int

  DST_OVER: int

  DstAtop: AlphaComposite

  DstIn: AlphaComposite

  DstOut: AlphaComposite

  DstOver: AlphaComposite

  SRC: int

  SRC_ATOP: int

  SRC_IN: int

  SRC_OUT: int

  SRC_OVER: int

  SrcAtop: AlphaComposite

  SrcIn: AlphaComposite

  SrcOut: AlphaComposite

  SrcOver: AlphaComposite

  XOR: int

  @overload
  def createContext(self, arg0: ColorModel, arg1: ColorModel, arg2: RenderingHints) -> CompositeContext: ...

  @overload
  def createContext(self, arg0: ColorModel, arg1: ColorModel, arg2: RenderingHints) -> CompositeContext: ...

  @overload
  def derive(self, arg0: float) -> AlphaComposite: ...

  @overload
  def derive(self, arg0: int) -> AlphaComposite: ...

  def equals(self, arg0: object) -> bool: ...

  def getAlpha(self) -> float: ...

  def getRule(self) -> int: ...

  def hashCode(self) -> int: ...

  @staticmethod
  @overload
  def getInstance(arg0: int) -> AlphaComposite: ...

  @staticmethod
  @overload
  def getInstance(arg0: int, arg1: float) -> AlphaComposite: ...


class AttributeValue:

  def hashCode(self) -> int: ...

  def toString(self) -> str: ...


class BasicStroke:

  CAP_BUTT: int

  CAP_ROUND: int

  CAP_SQUARE: int

  JOIN_BEVEL: int

  JOIN_MITER: int

  JOIN_ROUND: int

  @overload
  def createStrokedShape(self, arg0: Shape) -> Shape: ...

  @overload
  def createStrokedShape(self, arg0: Shape) -> Shape: ...

  def equals(self, arg0: object) -> bool: ...

  def getDashArray(self) -> list[float]: ...

  def getDashPhase(self) -> float: ...

  def getEndCap(self) -> int: ...

  def getLineJoin(self) -> int: ...

  def getLineWidth(self) -> float: ...

  def getMiterLimit(self) -> float: ...

  def hashCode(self) -> int: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: float): ...
  @overload
  def __init__(self, arg0: float, arg1: int, arg2: int): ...
  @overload
  def __init__(self, arg0: float, arg1: int, arg2: int, arg3: float): ...
  @overload
  def __init__(self, arg0: float, arg1: int, arg2: int, arg3: float, arg4: list[float], arg5: float): ...


class BufferCapabilities:

  def clone(self) -> object: ...

  def getBackBufferCapabilities(self) -> ImageCapabilities: ...

  def getFlipContents(self) -> BufferCapabilities.FlipContents: ...

  def getFrontBufferCapabilities(self) -> ImageCapabilities: ...

  def isFullScreenRequired(self) -> bool: ...

  def isMultiBufferAvailable(self) -> bool: ...

  def isPageFlipping(self) -> bool: ...

  def __init__(self, arg0: ImageCapabilities, arg1: ImageCapabilities, arg2: BufferCapabilities.FlipContents): ...

  class FlipContents(AttributeValue):

    BACKGROUND: BufferCapabilities.FlipContents

    COPIED: BufferCapabilities.FlipContents

    PRIOR: BufferCapabilities.FlipContents

    UNDEFINED: BufferCapabilities.FlipContents

    def hashCode(self) -> int: ...

    def toString(self) -> str: ...


class Button(Component):

  def addActionListener(self, arg0: ActionListener) -> None: ...

  def addNotify(self) -> None: ...

  @overload
  def getAccessibleContext(self) -> AccessibleContext: ...

  @overload
  def getAccessibleContext(self) -> AccessibleContext: ...

  def getActionCommand(self) -> str: ...

  def getActionListeners(self) -> list[ActionListener]: ...

  def getLabel(self) -> str: ...

  def getListeners(self, arg0: Class[T]) -> list[EventListener]: ...

  def removeActionListener(self, arg0: ActionListener) -> None: ...

  def setActionCommand(self, arg0: str) -> None: ...

  def setLabel(self, arg0: str) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: str): ...

  class AccessibleAWTButton(Component.AccessibleAWTComponent):

    CLICK: str

    DECREMENT: str

    INCREMENT: str

    TOGGLE_EXPAND: str

    TOGGLE_POPUP: str

    @overload
    def doAccessibleAction(self, arg0: int) -> bool: ...

    @overload
    def doAccessibleAction(self, arg0: int) -> bool: ...

    def getAccessibleAction(self) -> AccessibleAction: ...

    @overload
    def getAccessibleActionCount(self) -> int: ...

    @overload
    def getAccessibleActionCount(self) -> int: ...

    @overload
    def getAccessibleActionDescription(self, arg0: int) -> str: ...

    @overload
    def getAccessibleActionDescription(self, arg0: int) -> str: ...

    def getAccessibleName(self) -> str: ...

    def getAccessibleRole(self) -> AccessibleRole: ...

    def getAccessibleValue(self) -> AccessibleValue: ...

    @overload
    def getCurrentAccessibleValue(self) -> Number: ...

    @overload
    def getCurrentAccessibleValue(self) -> Number: ...

    @overload
    def getMaximumAccessibleValue(self) -> Number: ...

    @overload
    def getMaximumAccessibleValue(self) -> Number: ...

    @overload
    def getMinimumAccessibleValue(self) -> Number: ...

    @overload
    def getMinimumAccessibleValue(self) -> Number: ...

    @overload
    def setCurrentAccessibleValue(self, arg0: Number) -> bool: ...

    @overload
    def setCurrentAccessibleValue(self, arg0: Number) -> bool: ...


class Canvas(Component):

  def addNotify(self) -> None: ...

  @overload
  def createBufferStrategy(self, arg0: int) -> None: ...

  @overload
  def createBufferStrategy(self, arg0: int, arg1: BufferCapabilities) -> None: ...

  @overload
  def getAccessibleContext(self) -> AccessibleContext: ...

  @overload
  def getAccessibleContext(self) -> AccessibleContext: ...

  def getBufferStrategy(self) -> BufferStrategy: ...

  def paint(self, arg0: Graphics) -> None: ...

  def update(self, arg0: Graphics) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: GraphicsConfiguration): ...

  class AccessibleAWTCanvas(Component.AccessibleAWTComponent):

    def getAccessibleRole(self) -> AccessibleRole: ...


class Checkbox(Component):

  @overload
  def addItemListener(self, arg0: ItemListener) -> None: ...

  @overload
  def addItemListener(self, arg0: ItemListener) -> None: ...

  def addNotify(self) -> None: ...

  @overload
  def getAccessibleContext(self) -> AccessibleContext: ...

  @overload
  def getAccessibleContext(self) -> AccessibleContext: ...

  def getCheckboxGroup(self) -> CheckboxGroup: ...

  def getItemListeners(self) -> list[ItemListener]: ...

  def getLabel(self) -> str: ...

  def getListeners(self, arg0: Class[T]) -> list[EventListener]: ...

  @overload
  def getSelectedObjects(self) -> list[object]: ...

  @overload
  def getSelectedObjects(self) -> list[object]: ...

  def getState(self) -> bool: ...

  @overload
  def removeItemListener(self, arg0: ItemListener) -> None: ...

  @overload
  def removeItemListener(self, arg0: ItemListener) -> None: ...

  def setCheckboxGroup(self, arg0: CheckboxGroup) -> None: ...

  def setLabel(self, arg0: str) -> None: ...

  def setState(self, arg0: bool) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: str): ...
  @overload
  def __init__(self, arg0: str, arg1: bool): ...
  @overload
  def __init__(self, arg0: str, arg1: bool, arg2: CheckboxGroup): ...
  @overload
  def __init__(self, arg0: str, arg1: CheckboxGroup, arg2: bool): ...

  class AccessibleAWTCheckbox(Component.AccessibleAWTComponent):

    CLICK: str

    DECREMENT: str

    INCREMENT: str

    TOGGLE_EXPAND: str

    TOGGLE_POPUP: str

    @overload
    def doAccessibleAction(self, arg0: int) -> bool: ...

    @overload
    def doAccessibleAction(self, arg0: int) -> bool: ...

    def getAccessibleAction(self) -> AccessibleAction: ...

    @overload
    def getAccessibleActionCount(self) -> int: ...

    @overload
    def getAccessibleActionCount(self) -> int: ...

    @overload
    def getAccessibleActionDescription(self, arg0: int) -> str: ...

    @overload
    def getAccessibleActionDescription(self, arg0: int) -> str: ...

    def getAccessibleRole(self) -> AccessibleRole: ...

    def getAccessibleStateSet(self) -> AccessibleStateSet: ...

    def getAccessibleValue(self) -> AccessibleValue: ...

    @overload
    def getCurrentAccessibleValue(self) -> Number: ...

    @overload
    def getCurrentAccessibleValue(self) -> Number: ...

    @overload
    def getMaximumAccessibleValue(self) -> Number: ...

    @overload
    def getMaximumAccessibleValue(self) -> Number: ...

    @overload
    def getMinimumAccessibleValue(self) -> Number: ...

    @overload
    def getMinimumAccessibleValue(self) -> Number: ...

    @overload
    def itemStateChanged(self, arg0: ItemEvent) -> None: ...

    @overload
    def itemStateChanged(self, arg0: ItemEvent) -> None: ...

    @overload
    def setCurrentAccessibleValue(self, arg0: Number) -> bool: ...

    @overload
    def setCurrentAccessibleValue(self, arg0: Number) -> bool: ...

    def __init__(self, arg0: Checkbox): ...


class CheckboxGroup:

  def getCurrent(self) -> Checkbox: ...

  def getSelectedCheckbox(self) -> Checkbox: ...

  def setCurrent(self, arg0: Checkbox) -> None: ...

  def setSelectedCheckbox(self, arg0: Checkbox) -> None: ...

  def toString(self) -> str: ...

  def __init__(self): ...


class CheckboxMenuItem(MenuItem):

  @overload
  def addItemListener(self, arg0: ItemListener) -> None: ...

  @overload
  def addItemListener(self, arg0: ItemListener) -> None: ...

  def addNotify(self) -> None: ...

  @overload
  def getAccessibleContext(self) -> AccessibleContext: ...

  @overload
  def getAccessibleContext(self) -> AccessibleContext: ...

  def getItemListeners(self) -> list[ItemListener]: ...

  def getListeners(self, arg0: Class[T]) -> list[EventListener]: ...

  @overload
  def getSelectedObjects(self) -> list[object]: ...

  @overload
  def getSelectedObjects(self) -> list[object]: ...

  def getState(self) -> bool: ...

  def paramString(self) -> str: ...

  @overload
  def removeItemListener(self, arg0: ItemListener) -> None: ...

  @overload
  def removeItemListener(self, arg0: ItemListener) -> None: ...

  def setState(self, arg0: bool) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: str): ...
  @overload
  def __init__(self, arg0: str, arg1: bool): ...

  class AccessibleAWTCheckboxMenuItem(MenuItem.AccessibleAWTMenuItem):

    CLICK: str

    DECREMENT: str

    INCREMENT: str

    TOGGLE_EXPAND: str

    TOGGLE_POPUP: str

    @overload
    def doAccessibleAction(self, arg0: int) -> bool: ...

    @overload
    def doAccessibleAction(self, arg0: int) -> bool: ...

    def getAccessibleAction(self) -> AccessibleAction: ...

    @overload
    def getAccessibleActionCount(self) -> int: ...

    @overload
    def getAccessibleActionCount(self) -> int: ...

    @overload
    def getAccessibleActionDescription(self, arg0: int) -> str: ...

    @overload
    def getAccessibleActionDescription(self, arg0: int) -> str: ...

    def getAccessibleRole(self) -> AccessibleRole: ...

    def getAccessibleValue(self) -> AccessibleValue: ...

    @overload
    def getCurrentAccessibleValue(self) -> Number: ...

    @overload
    def getCurrentAccessibleValue(self) -> Number: ...

    @overload
    def getMaximumAccessibleValue(self) -> Number: ...

    @overload
    def getMaximumAccessibleValue(self) -> Number: ...

    @overload
    def getMinimumAccessibleValue(self) -> Number: ...

    @overload
    def getMinimumAccessibleValue(self) -> Number: ...

    @overload
    def setCurrentAccessibleValue(self, arg0: Number) -> bool: ...

    @overload
    def setCurrentAccessibleValue(self, arg0: Number) -> bool: ...


class Choice(Component):

  def add(self, arg0: str) -> None: ...

  def addItem(self, arg0: str) -> None: ...

  @overload
  def addItemListener(self, arg0: ItemListener) -> None: ...

  @overload
  def addItemListener(self, arg0: ItemListener) -> None: ...

  def addNotify(self) -> None: ...

  def countItems(self) -> int: ...

  @overload
  def getAccessibleContext(self) -> AccessibleContext: ...

  @overload
  def getAccessibleContext(self) -> AccessibleContext: ...

  def getItem(self, arg0: int) -> str: ...

  def getItemCount(self) -> int: ...

  def getItemListeners(self) -> list[ItemListener]: ...

  def getListeners(self, arg0: Class[T]) -> list[EventListener]: ...

  def getSelectedIndex(self) -> int: ...

  def getSelectedItem(self) -> str: ...

  @overload
  def getSelectedObjects(self) -> list[object]: ...

  @overload
  def getSelectedObjects(self) -> list[object]: ...

  def insert(self, arg0: str, arg1: int) -> None: ...

  @overload
  def remove(self, arg0: int) -> None: ...

  @overload
  def remove(self, arg0: str) -> None: ...

  def removeAll(self) -> None: ...

  @overload
  def removeItemListener(self, arg0: ItemListener) -> None: ...

  @overload
  def removeItemListener(self, arg0: ItemListener) -> None: ...

  @overload
  def select(self, arg0: int) -> None: ...

  @overload
  def select(self, arg0: str) -> None: ...

  def __init__(self): ...

  class AccessibleAWTChoice(Component.AccessibleAWTComponent):

    CLICK: str

    DECREMENT: str

    INCREMENT: str

    TOGGLE_EXPAND: str

    TOGGLE_POPUP: str

    @overload
    def doAccessibleAction(self, arg0: int) -> bool: ...

    @overload
    def doAccessibleAction(self, arg0: int) -> bool: ...

    def getAccessibleAction(self) -> AccessibleAction: ...

    @overload
    def getAccessibleActionCount(self) -> int: ...

    @overload
    def getAccessibleActionCount(self) -> int: ...

    @overload
    def getAccessibleActionDescription(self, arg0: int) -> str: ...

    @overload
    def getAccessibleActionDescription(self, arg0: int) -> str: ...

    def getAccessibleRole(self) -> AccessibleRole: ...

    def __init__(self, arg0: Choice): ...


class Color:

  black: Color

  blue: Color

  cyan: Color

  DARK_GRAY: Color

  darkGray: Color

  gray: Color

  green: Color

  LIGHT_GRAY: Color

  lightGray: Color

  magenta: Color

  orange: Color

  pink: Color

  red: Color

  white: Color

  yellow: Color

  def brighter(self) -> Color: ...

  @overload
  def createContext(self, arg0: ColorModel, arg1: Rectangle, arg2: Rectangle2D, arg3: AffineTransform, arg4: RenderingHints) -> PaintContext: ...

  @overload
  def createContext(self, arg0: ColorModel, arg1: Rectangle, arg2: Rectangle2D, arg3: AffineTransform, arg4: RenderingHints) -> PaintContext: ...

  def darker(self) -> Color: ...

  def equals(self, arg0: object) -> bool: ...

  def getAlpha(self) -> int: ...

  def getBlue(self) -> int: ...

  @overload
  def getColorComponents(self, arg0: list[float]) -> list[float]: ...

  @overload
  def getColorComponents(self, arg0: ColorSpace, arg1: list[float]) -> list[float]: ...

  def getColorSpace(self) -> ColorSpace: ...

  @overload
  def getComponents(self, arg0: list[float]) -> list[float]: ...

  @overload
  def getComponents(self, arg0: ColorSpace, arg1: list[float]) -> list[float]: ...

  def getGreen(self) -> int: ...

  def getRGB(self) -> int: ...

  def getRGBColorComponents(self, arg0: list[float]) -> list[float]: ...

  def getRGBComponents(self, arg0: list[float]) -> list[float]: ...

  def getRed(self) -> int: ...

  def getTransparency(self) -> int: ...

  def hashCode(self) -> int: ...

  def toString(self) -> str: ...

  @staticmethod
  def HSBtoRGB(arg0: float, arg1: float, arg2: float) -> int: ...

  @staticmethod
  def RGBtoHSB(arg0: int, arg1: int, arg2: int, arg3: list[float]) -> list[float]: ...

  @staticmethod
  def decode(arg0: str) -> Color: ...

  @staticmethod
  @overload
  def getColor(arg0: str) -> Color: ...

  @staticmethod
  @overload
  def getColor(arg0: str, arg1: int) -> Color: ...

  @staticmethod
  @overload
  def getColor(arg0: str, arg1: Color) -> Color: ...

  @staticmethod
  def getHSBColor(arg0: float, arg1: float, arg2: float) -> Color: ...

  @overload
  def __init__(self, arg0: int): ...
  @overload
  def __init__(self, arg0: int, arg1: bool): ...
  @overload
  def __init__(self, arg0: float, arg1: float, arg2: float): ...
  @overload
  def __init__(self, arg0: int, arg1: int, arg2: int): ...
  @overload
  def __init__(self, arg0: ColorSpace, arg1: list[float], arg2: float): ...
  @overload
  def __init__(self, arg0: float, arg1: float, arg2: float, arg3: float): ...
  @overload
  def __init__(self, arg0: int, arg1: int, arg2: int, arg3: int): ...


class Component:

  ABORT: int

  ALLBITS: int

  BOTTOM_ALIGNMENT: float

  CENTER_ALIGNMENT: float

  ERROR: int

  FRAMEBITS: int

  HEIGHT: int

  LEFT_ALIGNMENT: float

  PROPERTIES: int

  RIGHT_ALIGNMENT: float

  SOMEBITS: int

  TOP_ALIGNMENT: float

  WIDTH: int

  def action(self, arg0: Event, arg1: object) -> bool: ...

  def add(self, arg0: PopupMenu) -> None: ...

  def addComponentListener(self, arg0: ComponentListener) -> None: ...

  def addFocusListener(self, arg0: FocusListener) -> None: ...

  def addHierarchyBoundsListener(self, arg0: HierarchyBoundsListener) -> None: ...

  def addHierarchyListener(self, arg0: HierarchyListener) -> None: ...

  def addInputMethodListener(self, arg0: InputMethodListener) -> None: ...

  def addKeyListener(self, arg0: KeyListener) -> None: ...

  def addMouseListener(self, arg0: MouseListener) -> None: ...

  def addMouseMotionListener(self, arg0: MouseMotionListener) -> None: ...

  def addMouseWheelListener(self, arg0: MouseWheelListener) -> None: ...

  def addNotify(self) -> None: ...

  @overload
  def addPropertyChangeListener(self, arg0: PropertyChangeListener) -> None: ...

  @overload
  def addPropertyChangeListener(self, arg0: str, arg1: PropertyChangeListener) -> None: ...

  def applyComponentOrientation(self, arg0: ComponentOrientation) -> None: ...

  def areFocusTraversalKeysSet(self, arg0: int) -> bool: ...

  def bounds(self) -> Rectangle: ...

  @overload
  def checkImage(self, arg0: Image, arg1: ImageObserver) -> int: ...

  @overload
  def checkImage(self, arg0: Image, arg1: int, arg2: int, arg3: ImageObserver) -> int: ...

  @overload
  def contains(self, arg0: Point) -> bool: ...

  @overload
  def contains(self, arg0: int, arg1: int) -> bool: ...

  @overload
  def createImage(self, arg0: ImageProducer) -> Image: ...

  @overload
  def createImage(self, arg0: int, arg1: int) -> Image: ...

  @overload
  def createVolatileImage(self, arg0: int, arg1: int) -> VolatileImage: ...

  @overload
  def createVolatileImage(self, arg0: int, arg1: int, arg2: ImageCapabilities) -> VolatileImage: ...

  def deliverEvent(self, arg0: Event) -> None: ...

  def disable(self) -> None: ...

  def dispatchEvent(self, arg0: AWTEvent) -> None: ...

  def doLayout(self) -> None: ...

  @overload
  def enable(self) -> None: ...

  @overload
  def enable(self, arg0: bool) -> None: ...

  def enableInputMethods(self, arg0: bool) -> None: ...

  @overload
  def firePropertyChange(self, arg0: str, arg1: int, arg2: int) -> None: ...

  @overload
  def firePropertyChange(self, arg0: str, arg1: str, arg2: str) -> None: ...

  @overload
  def firePropertyChange(self, arg0: str, arg1: float, arg2: float) -> None: ...

  @overload
  def firePropertyChange(self, arg0: str, arg1: float, arg2: float) -> None: ...

  @overload
  def firePropertyChange(self, arg0: str, arg1: int, arg2: int) -> None: ...

  @overload
  def firePropertyChange(self, arg0: str, arg1: int, arg2: int) -> None: ...

  def getAccessibleContext(self) -> AccessibleContext: ...

  def getAlignmentX(self) -> float: ...

  def getAlignmentY(self) -> float: ...

  def getBackground(self) -> Color: ...

  def getBaseline(self, arg0: int, arg1: int) -> int: ...

  def getBaselineResizeBehavior(self) -> Component.BaselineResizeBehavior: ...

  @overload
  def getBounds(self) -> Rectangle: ...

  @overload
  def getBounds(self, arg0: Rectangle) -> Rectangle: ...

  def getColorModel(self) -> ColorModel: ...

  @overload
  def getComponentAt(self, arg0: Point) -> Component: ...

  @overload
  def getComponentAt(self, arg0: int, arg1: int) -> Component: ...

  def getComponentListeners(self) -> list[ComponentListener]: ...

  def getComponentOrientation(self) -> ComponentOrientation: ...

  def getCursor(self) -> Cursor: ...

  def getDropTarget(self) -> DropTarget: ...

  def getFocusCycleRootAncestor(self) -> Container: ...

  def getFocusListeners(self) -> list[FocusListener]: ...

  def getFocusTraversalKeys(self, arg0: int) -> Set[AWTKeyStroke]: ...

  def getFocusTraversalKeysEnabled(self) -> bool: ...

  @overload
  def getFont(self) -> Font: ...

  @overload
  def getFont(self) -> Font: ...

  def getFontMetrics(self, arg0: Font) -> FontMetrics: ...

  def getForeground(self) -> Color: ...

  def getGraphics(self) -> Graphics: ...

  def getGraphicsConfiguration(self) -> GraphicsConfiguration: ...

  def getHeight(self) -> int: ...

  def getHierarchyBoundsListeners(self) -> list[HierarchyBoundsListener]: ...

  def getHierarchyListeners(self) -> list[HierarchyListener]: ...

  def getIgnoreRepaint(self) -> bool: ...

  def getInputContext(self) -> InputContext: ...

  def getInputMethodListeners(self) -> list[InputMethodListener]: ...

  def getInputMethodRequests(self) -> InputMethodRequests: ...

  def getKeyListeners(self) -> list[KeyListener]: ...

  def getListeners(self, arg0: Class[T]) -> list[EventListener]: ...

  def getLocale(self) -> Locale: ...

  @overload
  def getLocation(self) -> Point: ...

  @overload
  def getLocation(self, arg0: Point) -> Point: ...

  def getLocationOnScreen(self) -> Point: ...

  def getMaximumSize(self) -> Dimension: ...

  def getMinimumSize(self) -> Dimension: ...

  def getMouseListeners(self) -> list[MouseListener]: ...

  def getMouseMotionListeners(self) -> list[MouseMotionListener]: ...

  def getMousePosition(self) -> Point: ...

  def getMouseWheelListeners(self) -> list[MouseWheelListener]: ...

  def getName(self) -> str: ...

  def getParent(self) -> Container: ...

  def getPreferredSize(self) -> Dimension: ...

  @overload
  def getPropertyChangeListeners(self) -> list[PropertyChangeListener]: ...

  @overload
  def getPropertyChangeListeners(self, arg0: str) -> list[PropertyChangeListener]: ...

  @overload
  def getSize(self) -> Dimension: ...

  @overload
  def getSize(self, arg0: Dimension) -> Dimension: ...

  def getToolkit(self) -> Toolkit: ...

  def getTreeLock(self) -> object: ...

  def getWidth(self) -> int: ...

  def getX(self) -> int: ...

  def getY(self) -> int: ...

  def gotFocus(self, arg0: Event, arg1: object) -> bool: ...

  def handleEvent(self, arg0: Event) -> bool: ...

  def hasFocus(self) -> bool: ...

  def hide(self) -> None: ...

  @overload
  def imageUpdate(self, arg0: Image, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int) -> bool: ...

  @overload
  def imageUpdate(self, arg0: Image, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int) -> bool: ...

  def inside(self, arg0: int, arg1: int) -> bool: ...

  def invalidate(self) -> None: ...

  def isBackgroundSet(self) -> bool: ...

  def isCursorSet(self) -> bool: ...

  def isDisplayable(self) -> bool: ...

  def isDoubleBuffered(self) -> bool: ...

  def isEnabled(self) -> bool: ...

  def isFocusCycleRoot(self, arg0: Container) -> bool: ...

  def isFocusOwner(self) -> bool: ...

  def isFocusTraversable(self) -> bool: ...

  def isFocusable(self) -> bool: ...

  def isFontSet(self) -> bool: ...

  def isForegroundSet(self) -> bool: ...

  def isLightweight(self) -> bool: ...

  def isMaximumSizeSet(self) -> bool: ...

  def isMinimumSizeSet(self) -> bool: ...

  def isOpaque(self) -> bool: ...

  def isPreferredSizeSet(self) -> bool: ...

  def isShowing(self) -> bool: ...

  def isValid(self) -> bool: ...

  def isVisible(self) -> bool: ...

  def keyDown(self, arg0: Event, arg1: int) -> bool: ...

  def keyUp(self, arg0: Event, arg1: int) -> bool: ...

  def layout(self) -> None: ...

  @overload
  def list(self) -> None: ...

  @overload
  def list(self, arg0: PrintStream) -> None: ...

  @overload
  def list(self, arg0: PrintWriter) -> None: ...

  @overload
  def list(self, arg0: PrintStream, arg1: int) -> None: ...

  @overload
  def list(self, arg0: PrintWriter, arg1: int) -> None: ...

  def locate(self, arg0: int, arg1: int) -> Component: ...

  def location(self) -> Point: ...

  def lostFocus(self, arg0: Event, arg1: object) -> bool: ...

  def minimumSize(self) -> Dimension: ...

  def mouseDown(self, arg0: Event, arg1: int, arg2: int) -> bool: ...

  def mouseDrag(self, arg0: Event, arg1: int, arg2: int) -> bool: ...

  def mouseEnter(self, arg0: Event, arg1: int, arg2: int) -> bool: ...

  def mouseExit(self, arg0: Event, arg1: int, arg2: int) -> bool: ...

  def mouseMove(self, arg0: Event, arg1: int, arg2: int) -> bool: ...

  def mouseUp(self, arg0: Event, arg1: int, arg2: int) -> bool: ...

  def move(self, arg0: int, arg1: int) -> None: ...

  def nextFocus(self) -> None: ...

  def paint(self, arg0: Graphics) -> None: ...

  def paintAll(self, arg0: Graphics) -> None: ...

  @overload
  def postEvent(self, arg0: Event) -> bool: ...

  @overload
  def postEvent(self, arg0: Event) -> bool: ...

  def preferredSize(self) -> Dimension: ...

  @overload
  def prepareImage(self, arg0: Image, arg1: ImageObserver) -> bool: ...

  @overload
  def prepareImage(self, arg0: Image, arg1: int, arg2: int, arg3: ImageObserver) -> bool: ...

  def print(self, arg0: Graphics) -> None: ...

  def printAll(self, arg0: Graphics) -> None: ...

  @overload
  def remove(self, arg0: MenuComponent) -> None: ...

  @overload
  def remove(self, arg0: MenuComponent) -> None: ...

  def removeComponentListener(self, arg0: ComponentListener) -> None: ...

  def removeFocusListener(self, arg0: FocusListener) -> None: ...

  def removeHierarchyBoundsListener(self, arg0: HierarchyBoundsListener) -> None: ...

  def removeHierarchyListener(self, arg0: HierarchyListener) -> None: ...

  def removeInputMethodListener(self, arg0: InputMethodListener) -> None: ...

  def removeKeyListener(self, arg0: KeyListener) -> None: ...

  def removeMouseListener(self, arg0: MouseListener) -> None: ...

  def removeMouseMotionListener(self, arg0: MouseMotionListener) -> None: ...

  def removeMouseWheelListener(self, arg0: MouseWheelListener) -> None: ...

  def removeNotify(self) -> None: ...

  @overload
  def removePropertyChangeListener(self, arg0: PropertyChangeListener) -> None: ...

  @overload
  def removePropertyChangeListener(self, arg0: str, arg1: PropertyChangeListener) -> None: ...

  @overload
  def repaint(self) -> None: ...

  @overload
  def repaint(self, arg0: int) -> None: ...

  @overload
  def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...

  @overload
  def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int) -> None: ...

  @overload
  def requestFocus(self) -> None: ...

  @overload
  def requestFocus(self, arg0: FocusEvent.Cause) -> None: ...

  @overload
  def requestFocusInWindow(self) -> bool: ...

  @overload
  def requestFocusInWindow(self, arg0: FocusEvent.Cause) -> bool: ...

  def reshape(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...

  @overload
  def resize(self, arg0: Dimension) -> None: ...

  @overload
  def resize(self, arg0: int, arg1: int) -> None: ...

  def revalidate(self) -> None: ...

  def setBackground(self, arg0: Color) -> None: ...

  @overload
  def setBounds(self, arg0: Rectangle) -> None: ...

  @overload
  def setBounds(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...

  def setComponentOrientation(self, arg0: ComponentOrientation) -> None: ...

  def setCursor(self, arg0: Cursor) -> None: ...

  def setDropTarget(self, arg0: DropTarget) -> None: ...

  def setEnabled(self, arg0: bool) -> None: ...

  def setFocusTraversalKeys(self, arg0: int, arg1: Set[AWTKeyStroke]) -> None: ...

  def setFocusTraversalKeysEnabled(self, arg0: bool) -> None: ...

  def setFocusable(self, arg0: bool) -> None: ...

  def setFont(self, arg0: Font) -> None: ...

  def setForeground(self, arg0: Color) -> None: ...

  def setIgnoreRepaint(self, arg0: bool) -> None: ...

  def setLocale(self, arg0: Locale) -> None: ...

  @overload
  def setLocation(self, arg0: Point) -> None: ...

  @overload
  def setLocation(self, arg0: int, arg1: int) -> None: ...

  def setMaximumSize(self, arg0: Dimension) -> None: ...

  def setMinimumSize(self, arg0: Dimension) -> None: ...

  def setMixingCutoutShape(self, arg0: Shape) -> None: ...

  def setName(self, arg0: str) -> None: ...

  def setPreferredSize(self, arg0: Dimension) -> None: ...

  @overload
  def setSize(self, arg0: Dimension) -> None: ...

  @overload
  def setSize(self, arg0: int, arg1: int) -> None: ...

  def setVisible(self, arg0: bool) -> None: ...

  @overload
  def show(self) -> None: ...

  @overload
  def show(self, arg0: bool) -> None: ...

  def size(self) -> Dimension: ...

  def toString(self) -> str: ...

  def transferFocus(self) -> None: ...

  def transferFocusBackward(self) -> None: ...

  def transferFocusUpCycle(self) -> None: ...

  def update(self, arg0: Graphics) -> None: ...

  def validate(self) -> None: ...

  class BaselineResizeBehavior(Enum):

    CENTER_OFFSET: Component.BaselineResizeBehavior

    CONSTANT_ASCENT: Component.BaselineResizeBehavior

    CONSTANT_DESCENT: Component.BaselineResizeBehavior

    OTHER: Component.BaselineResizeBehavior

    @staticmethod
    def valueOf(arg0: str) -> Component.BaselineResizeBehavior: ...

    @staticmethod
    def values() -> list[Component.BaselineResizeBehavior]: ...

  class SingleBufferStrategy(BufferStrategy):

    def contentsLost(self) -> bool: ...

    def contentsRestored(self) -> bool: ...

    def getCapabilities(self) -> BufferCapabilities: ...

    def getDrawGraphics(self) -> Graphics: ...

    def show(self) -> None: ...

    def __init__(self, arg0: Component, arg1: BufferCapabilities): ...

  class ProxyCapabilities(ExtendedBufferCapabilities): ...

  class FlipSubRegionBufferStrategy(Component.FlipBufferStrategy):

    @overload
    def show(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...

    @overload
    def show(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...

    @overload
    def showIfNotLost(self, arg0: int, arg1: int, arg2: int, arg3: int) -> bool: ...

    @overload
    def showIfNotLost(self, arg0: int, arg1: int, arg2: int, arg3: int) -> bool: ...

  class BltSubRegionBufferStrategy(Component.BltBufferStrategy):

    @overload
    def show(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...

    @overload
    def show(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...

    @overload
    def showIfNotLost(self, arg0: int, arg1: int, arg2: int, arg3: int) -> bool: ...

    @overload
    def showIfNotLost(self, arg0: int, arg1: int, arg2: int, arg3: int) -> bool: ...

  class BltBufferStrategy(BufferStrategy):

    def contentsLost(self) -> bool: ...

    def contentsRestored(self) -> bool: ...

    def dispose(self) -> None: ...

    def getCapabilities(self) -> BufferCapabilities: ...

    def getDrawGraphics(self) -> Graphics: ...

    def show(self) -> None: ...

  class FlipBufferStrategy(BufferStrategy):

    def contentsLost(self) -> bool: ...

    def contentsRestored(self) -> bool: ...

    def dispose(self) -> None: ...

    def getCapabilities(self) -> BufferCapabilities: ...

    def getDrawGraphics(self) -> Graphics: ...

    def show(self) -> None: ...

  class DummyRequestFocusController:

    @overload
    def acceptRequestFocus(self, arg0: Component, arg1: Component, arg2: bool, arg3: bool, arg4: FocusEvent.Cause) -> bool: ...

    @overload
    def acceptRequestFocus(self, arg0: Component, arg1: Component, arg2: bool, arg3: bool, arg4: FocusEvent.Cause) -> bool: ...

  class AWTTreeLock: ...

  class AccessibleAWTComponent(AccessibleContext):

    @overload
    def addFocusListener(self, arg0: FocusListener) -> None: ...

    @overload
    def addFocusListener(self, arg0: FocusListener) -> None: ...

    def addPropertyChangeListener(self, arg0: PropertyChangeListener) -> None: ...

    @overload
    def contains(self, arg0: Point) -> bool: ...

    @overload
    def contains(self, arg0: Point) -> bool: ...

    @overload
    def getAccessibleAt(self, arg0: Point) -> Accessible: ...

    @overload
    def getAccessibleAt(self, arg0: Point) -> Accessible: ...

    def getAccessibleChild(self, arg0: int) -> Accessible: ...

    def getAccessibleChildrenCount(self) -> int: ...

    def getAccessibleComponent(self) -> AccessibleComponent: ...

    def getAccessibleDescription(self) -> str: ...

    def getAccessibleIndexInParent(self) -> int: ...

    def getAccessibleName(self) -> str: ...

    def getAccessibleParent(self) -> Accessible: ...

    def getAccessibleRole(self) -> AccessibleRole: ...

    def getAccessibleStateSet(self) -> AccessibleStateSet: ...

    @overload
    def getBackground(self) -> Color: ...

    @overload
    def getBackground(self) -> Color: ...

    @overload
    def getBounds(self) -> Rectangle: ...

    @overload
    def getBounds(self) -> Rectangle: ...

    @overload
    def getCursor(self) -> Cursor: ...

    @overload
    def getCursor(self) -> Cursor: ...

    @overload
    def getFont(self) -> Font: ...

    @overload
    def getFont(self) -> Font: ...

    @overload
    def getFontMetrics(self, arg0: Font) -> FontMetrics: ...

    @overload
    def getFontMetrics(self, arg0: Font) -> FontMetrics: ...

    @overload
    def getForeground(self) -> Color: ...

    @overload
    def getForeground(self) -> Color: ...

    def getLocale(self) -> Locale: ...

    @overload
    def getLocation(self) -> Point: ...

    @overload
    def getLocation(self) -> Point: ...

    @overload
    def getLocationOnScreen(self) -> Point: ...

    @overload
    def getLocationOnScreen(self) -> Point: ...

    @overload
    def getSize(self) -> Dimension: ...

    @overload
    def getSize(self) -> Dimension: ...

    @overload
    def isEnabled(self) -> bool: ...

    @overload
    def isEnabled(self) -> bool: ...

    @overload
    def isFocusTraversable(self) -> bool: ...

    @overload
    def isFocusTraversable(self) -> bool: ...

    @overload
    def isShowing(self) -> bool: ...

    @overload
    def isShowing(self) -> bool: ...

    @overload
    def isVisible(self) -> bool: ...

    @overload
    def isVisible(self) -> bool: ...

    @overload
    def removeFocusListener(self, arg0: FocusListener) -> None: ...

    @overload
    def removeFocusListener(self, arg0: FocusListener) -> None: ...

    def removePropertyChangeListener(self, arg0: PropertyChangeListener) -> None: ...

    @overload
    def requestFocus(self) -> None: ...

    @overload
    def requestFocus(self) -> None: ...

    @overload
    def setBackground(self, arg0: Color) -> None: ...

    @overload
    def setBackground(self, arg0: Color) -> None: ...

    @overload
    def setBounds(self, arg0: Rectangle) -> None: ...

    @overload
    def setBounds(self, arg0: Rectangle) -> None: ...

    @overload
    def setCursor(self, arg0: Cursor) -> None: ...

    @overload
    def setCursor(self, arg0: Cursor) -> None: ...

    @overload
    def setEnabled(self, arg0: bool) -> None: ...

    @overload
    def setEnabled(self, arg0: bool) -> None: ...

    @overload
    def setFont(self, arg0: Font) -> None: ...

    @overload
    def setFont(self, arg0: Font) -> None: ...

    @overload
    def setForeground(self, arg0: Color) -> None: ...

    @overload
    def setForeground(self, arg0: Color) -> None: ...

    @overload
    def setLocation(self, arg0: Point) -> None: ...

    @overload
    def setLocation(self, arg0: Point) -> None: ...

    @overload
    def setSize(self, arg0: Dimension) -> None: ...

    @overload
    def setSize(self, arg0: Dimension) -> None: ...

    @overload
    def setVisible(self, arg0: bool) -> None: ...

    @overload
    def setVisible(self, arg0: bool) -> None: ...

    class AccessibleAWTComponentHandler:

      @overload
      def componentHidden(self, arg0: ComponentEvent) -> None: ...

      @overload
      def componentHidden(self, arg0: ComponentEvent) -> None: ...

      @overload
      def componentMoved(self, arg0: ComponentEvent) -> None: ...

      @overload
      def componentMoved(self, arg0: ComponentEvent) -> None: ...

      @overload
      def componentResized(self, arg0: ComponentEvent) -> None: ...

      @overload
      def componentResized(self, arg0: ComponentEvent) -> None: ...

      @overload
      def componentShown(self, arg0: ComponentEvent) -> None: ...

      @overload
      def componentShown(self, arg0: ComponentEvent) -> None: ...

    class AccessibleAWTFocusHandler:

      @overload
      def focusGained(self, arg0: FocusEvent) -> None: ...

      @overload
      def focusGained(self, arg0: FocusEvent) -> None: ...

      @overload
      def focusLost(self, arg0: FocusEvent) -> None: ...

      @overload
      def focusLost(self, arg0: FocusEvent) -> None: ...


class ComponentOrientation:

  LEFT_TO_RIGHT: ComponentOrientation

  RIGHT_TO_LEFT: ComponentOrientation

  UNKNOWN: ComponentOrientation

  def isHorizontal(self) -> bool: ...

  def isLeftToRight(self) -> bool: ...

  @staticmethod
  @overload
  def getOrientation(arg0: Locale) -> ComponentOrientation: ...

  @staticmethod
  @overload
  def getOrientation(arg0: ResourceBundle) -> ComponentOrientation: ...


class Composite:

  def createContext(self, arg0: ColorModel, arg1: ColorModel, arg2: RenderingHints) -> CompositeContext: ...


class CompositeContext:

  def compose(self, arg0: Raster, arg1: Raster, arg2: WritableRaster) -> None: ...

  def dispose(self) -> None: ...


class Conditional:

  def evaluate(self) -> bool: ...


class Container(Component):

  @overload
  def add(self, arg0: Component) -> Component: ...

  @overload
  def add(self, arg0: Component, arg1: int) -> Component: ...

  @overload
  def add(self, arg0: Component, arg1: object) -> None: ...

  @overload
  def add(self, arg0: str, arg1: Component) -> Component: ...

  @overload
  def add(self, arg0: Component, arg1: object, arg2: int) -> None: ...

  def addContainerListener(self, arg0: ContainerListener) -> None: ...

  def addNotify(self) -> None: ...

  @overload
  def addPropertyChangeListener(self, arg0: PropertyChangeListener) -> None: ...

  @overload
  def addPropertyChangeListener(self, arg0: str, arg1: PropertyChangeListener) -> None: ...

  def applyComponentOrientation(self, arg0: ComponentOrientation) -> None: ...

  def areFocusTraversalKeysSet(self, arg0: int) -> bool: ...

  def countComponents(self) -> int: ...

  def deliverEvent(self, arg0: Event) -> None: ...

  def doLayout(self) -> None: ...

  @overload
  def findComponentAt(self, arg0: Point) -> Component: ...

  @overload
  def findComponentAt(self, arg0: int, arg1: int) -> Component: ...

  def getAlignmentX(self) -> float: ...

  def getAlignmentY(self) -> float: ...

  def getComponent(self, arg0: int) -> Component: ...

  @overload
  def getComponentAt(self, arg0: Point) -> Component: ...

  @overload
  def getComponentAt(self, arg0: int, arg1: int) -> Component: ...

  def getComponentCount(self) -> int: ...

  def getComponentZOrder(self, arg0: Component) -> int: ...

  def getComponents(self) -> list[Component]: ...

  def getContainerListeners(self) -> list[ContainerListener]: ...

  def getFocusTraversalKeys(self, arg0: int) -> Set[AWTKeyStroke]: ...

  def getFocusTraversalPolicy(self) -> FocusTraversalPolicy: ...

  def getInsets(self) -> Insets: ...

  def getLayout(self) -> LayoutManager: ...

  def getListeners(self, arg0: Class[T]) -> list[EventListener]: ...

  def getMaximumSize(self) -> Dimension: ...

  def getMinimumSize(self) -> Dimension: ...

  def getMousePosition(self, arg0: bool) -> Point: ...

  def getPreferredSize(self) -> Dimension: ...

  def insets(self) -> Insets: ...

  def invalidate(self) -> None: ...

  def isAncestorOf(self, arg0: Component) -> bool: ...

  @overload
  def isFocusCycleRoot(self) -> bool: ...

  @overload
  def isFocusCycleRoot(self, arg0: Container) -> bool: ...

  def isFocusTraversalPolicyProvider(self) -> bool: ...

  def isFocusTraversalPolicySet(self) -> bool: ...

  def isValidateRoot(self) -> bool: ...

  def layout(self) -> None: ...

  @overload
  def list(self, arg0: PrintStream, arg1: int) -> None: ...

  @overload
  def list(self, arg0: PrintWriter, arg1: int) -> None: ...

  def locate(self, arg0: int, arg1: int) -> Component: ...

  def minimumSize(self) -> Dimension: ...

  def paint(self, arg0: Graphics) -> None: ...

  def paintComponents(self, arg0: Graphics) -> None: ...

  def preferredSize(self) -> Dimension: ...

  def print(self, arg0: Graphics) -> None: ...

  def printComponents(self, arg0: Graphics) -> None: ...

  @overload
  def remove(self, arg0: int) -> None: ...

  @overload
  def remove(self, arg0: Component) -> None: ...

  def removeAll(self) -> None: ...

  def removeContainerListener(self, arg0: ContainerListener) -> None: ...

  def removeNotify(self) -> None: ...

  def setComponentZOrder(self, arg0: Component, arg1: int) -> None: ...

  def setFocusCycleRoot(self, arg0: bool) -> None: ...

  def setFocusTraversalKeys(self, arg0: int, arg1: Set[AWTKeyStroke]) -> None: ...

  def setFocusTraversalPolicy(self, arg0: FocusTraversalPolicy) -> None: ...

  def setFocusTraversalPolicyProvider(self, arg0: bool) -> None: ...

  def setFont(self, arg0: Font) -> None: ...

  def setLayout(self, arg0: LayoutManager) -> None: ...

  def transferFocusDownCycle(self) -> None: ...

  def update(self, arg0: Graphics) -> None: ...

  def validate(self) -> None: ...

  def __init__(self): ...

  class MouseEventTargetFilter:

    @overload
    def accept(self, arg0: Component) -> bool: ...

    @overload
    def accept(self, arg0: Component) -> bool: ...

  class EventTargetFilter:

    def accept(self, arg0: Component) -> bool: ...

  class DropTargetEventTargetFilter:

    @overload
    def accept(self, arg0: Component) -> bool: ...

    @overload
    def accept(self, arg0: Component) -> bool: ...

  class WakingRunnable:

    @overload
    def run(self) -> None: ...

    @overload
    def run(self) -> None: ...

  class AccessibleAWTContainer(Component.AccessibleAWTComponent):

    def addPropertyChangeListener(self, arg0: PropertyChangeListener) -> None: ...

    def getAccessibleAt(self, arg0: Point) -> Accessible: ...

    def getAccessibleChild(self, arg0: int) -> Accessible: ...

    def getAccessibleChildrenCount(self) -> int: ...

    def removePropertyChangeListener(self, arg0: PropertyChangeListener) -> None: ...

    class AccessibleContainerHandler:

      @overload
      def componentAdded(self, arg0: ContainerEvent) -> None: ...

      @overload
      def componentAdded(self, arg0: ContainerEvent) -> None: ...

      @overload
      def componentRemoved(self, arg0: ContainerEvent) -> None: ...

      @overload
      def componentRemoved(self, arg0: ContainerEvent) -> None: ...


class Cursor:

  CROSSHAIR_CURSOR: int

  CUSTOM_CURSOR: int

  DEFAULT_CURSOR: int

  E_RESIZE_CURSOR: int

  HAND_CURSOR: int

  MOVE_CURSOR: int

  N_RESIZE_CURSOR: int

  NE_RESIZE_CURSOR: int

  NW_RESIZE_CURSOR: int

  S_RESIZE_CURSOR: int

  SE_RESIZE_CURSOR: int

  SW_RESIZE_CURSOR: int

  TEXT_CURSOR: int

  W_RESIZE_CURSOR: int

  WAIT_CURSOR: int

  def getName(self) -> str: ...

  def getType(self) -> int: ...

  def toString(self) -> str: ...

  @staticmethod
  def getDefaultCursor() -> Cursor: ...

  @staticmethod
  def getPredefinedCursor(arg0: int) -> Cursor: ...

  @staticmethod
  def getSystemCustomCursor(arg0: str) -> Cursor: ...

  def __init__(self, arg0: int): ...

  class CursorDisposer:

    @overload
    def dispose(self) -> None: ...

    @overload
    def dispose(self) -> None: ...

    def __init__(self, arg0: int): ...


class Desktop:

  def addAppEventListener(self, arg0: SystemEventListener) -> None: ...

  def browse(self, arg0: URI) -> None: ...

  def browseFileDirectory(self, arg0: File) -> None: ...

  def disableSuddenTermination(self) -> None: ...

  def edit(self, arg0: File) -> None: ...

  def enableSuddenTermination(self) -> None: ...

  def isSupported(self, arg0: Desktop.Action) -> bool: ...

  @overload
  def mail(self) -> None: ...

  @overload
  def mail(self, arg0: URI) -> None: ...

  def moveToTrash(self, arg0: File) -> bool: ...

  def open(self, arg0: File) -> None: ...

  def openHelpViewer(self) -> None: ...

  def print(self, arg0: File) -> None: ...

  def removeAppEventListener(self, arg0: SystemEventListener) -> None: ...

  def requestForeground(self, arg0: bool) -> None: ...

  def setAboutHandler(self, arg0: AboutHandler) -> None: ...

  def setDefaultMenuBar(self, arg0: JMenuBar) -> None: ...

  def setOpenFileHandler(self, arg0: OpenFilesHandler) -> None: ...

  def setOpenURIHandler(self, arg0: OpenURIHandler) -> None: ...

  def setPreferencesHandler(self, arg0: PreferencesHandler) -> None: ...

  def setPrintFileHandler(self, arg0: PrintFilesHandler) -> None: ...

  def setQuitHandler(self, arg0: QuitHandler) -> None: ...

  def setQuitStrategy(self, arg0: QuitStrategy) -> None: ...

  @staticmethod
  def getDesktop() -> Desktop: ...

  @staticmethod
  def isDesktopSupported() -> bool: ...

  class Action(Enum):

    APP_ABOUT: Desktop.Action

    APP_EVENT_FOREGROUND: Desktop.Action

    APP_EVENT_HIDDEN: Desktop.Action

    APP_EVENT_REOPENED: Desktop.Action

    APP_EVENT_SCREEN_SLEEP: Desktop.Action

    APP_EVENT_SYSTEM_SLEEP: Desktop.Action

    APP_EVENT_USER_SESSION: Desktop.Action

    APP_HELP_VIEWER: Desktop.Action

    APP_MENU_BAR: Desktop.Action

    APP_OPEN_FILE: Desktop.Action

    APP_OPEN_URI: Desktop.Action

    APP_PREFERENCES: Desktop.Action

    APP_PRINT_FILE: Desktop.Action

    APP_QUIT_HANDLER: Desktop.Action

    APP_QUIT_STRATEGY: Desktop.Action

    APP_REQUEST_FOREGROUND: Desktop.Action

    APP_SUDDEN_TERMINATION: Desktop.Action

    BROWSE: Desktop.Action

    BROWSE_FILE_DIR: Desktop.Action

    EDIT: Desktop.Action

    MAIL: Desktop.Action

    MOVE_TO_TRASH: Desktop.Action

    OPEN: Desktop.Action

    PRINT: Desktop.Action

    @staticmethod
    def valueOf(arg0: str) -> Desktop.Action: ...

    @staticmethod
    def values() -> list[Desktop.Action]: ...


class Dialog(Window):

  DEFAULT_MODALITY_TYPE: Dialog.ModalityType

  def addNotify(self) -> None: ...

  def getAccessibleContext(self) -> AccessibleContext: ...

  def getModalityType(self) -> Dialog.ModalityType: ...

  def getTitle(self) -> str: ...

  def hide(self) -> None: ...

  def isModal(self) -> bool: ...

  def isResizable(self) -> bool: ...

  def isUndecorated(self) -> bool: ...

  def setBackground(self, arg0: Color) -> None: ...

  def setModal(self, arg0: bool) -> None: ...

  def setModalityType(self, arg0: Dialog.ModalityType) -> None: ...

  def setOpacity(self, arg0: float) -> None: ...

  def setResizable(self, arg0: bool) -> None: ...

  def setShape(self, arg0: Shape) -> None: ...

  def setTitle(self, arg0: str) -> None: ...

  def setUndecorated(self, arg0: bool) -> None: ...

  def setVisible(self, arg0: bool) -> None: ...

  def show(self) -> None: ...

  def toBack(self) -> None: ...

  @overload
  def __init__(self, arg0: Dialog): ...
  @overload
  def __init__(self, arg0: Frame): ...
  @overload
  def __init__(self, arg0: Window): ...
  @overload
  def __init__(self, arg0: Dialog, arg1: str): ...
  @overload
  def __init__(self, arg0: Frame, arg1: bool): ...
  @overload
  def __init__(self, arg0: Frame, arg1: str): ...
  @overload
  def __init__(self, arg0: Window, arg1: Dialog.ModalityType): ...
  @overload
  def __init__(self, arg0: Window, arg1: str): ...
  @overload
  def __init__(self, arg0: Dialog, arg1: str, arg2: bool): ...
  @overload
  def __init__(self, arg0: Frame, arg1: str, arg2: bool): ...
  @overload
  def __init__(self, arg0: Window, arg1: str, arg2: Dialog.ModalityType): ...
  @overload
  def __init__(self, arg0: Dialog, arg1: str, arg2: bool, arg3: GraphicsConfiguration): ...
  @overload
  def __init__(self, arg0: Frame, arg1: str, arg2: bool, arg3: GraphicsConfiguration): ...
  @overload
  def __init__(self, arg0: Window, arg1: str, arg2: Dialog.ModalityType, arg3: GraphicsConfiguration): ...

  class ModalityType(Enum):

    APPLICATION_MODAL: Dialog.ModalityType

    DOCUMENT_MODAL: Dialog.ModalityType

    MODELESS: Dialog.ModalityType

    TOOLKIT_MODAL: Dialog.ModalityType

    @staticmethod
    def valueOf(arg0: str) -> Dialog.ModalityType: ...

    @staticmethod
    def values() -> list[Dialog.ModalityType]: ...

  class ModalExclusionType(Enum):

    APPLICATION_EXCLUDE: Dialog.ModalExclusionType

    NO_EXCLUDE: Dialog.ModalExclusionType

    TOOLKIT_EXCLUDE: Dialog.ModalExclusionType

    @staticmethod
    def valueOf(arg0: str) -> Dialog.ModalExclusionType: ...

    @staticmethod
    def values() -> list[Dialog.ModalExclusionType]: ...

  class AccessibleAWTDialog(Window.AccessibleAWTWindow):

    def getAccessibleRole(self) -> AccessibleRole: ...

    def getAccessibleStateSet(self) -> AccessibleStateSet: ...


class Dimension(Dimension2D):

  def equals(self, arg0: object) -> bool: ...

  def getHeight(self) -> float: ...

  def getSize(self) -> Dimension: ...

  def getWidth(self) -> float: ...

  def hashCode(self) -> int: ...

  @overload
  def setSize(self, arg0: Dimension) -> None: ...

  @overload
  def setSize(self, arg0: float, arg1: float) -> None: ...

  @overload
  def setSize(self, arg0: int, arg1: int) -> None: ...

  def toString(self) -> str: ...

  @overload
  def __init__(self):
    self.height: int

    self.width: int

  @overload
  def __init__(self, arg0: Dimension): ...
  @overload
  def __init__(self, arg0: int, arg1: int): ...


class DisplayMode:

  BIT_DEPTH_MULTI: int

  REFRESH_RATE_UNKNOWN: int

  @overload
  def equals(self, arg0: DisplayMode) -> bool: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  def getBitDepth(self) -> int: ...

  def getHeight(self) -> int: ...

  def getRefreshRate(self) -> int: ...

  def getWidth(self) -> int: ...

  def hashCode(self) -> int: ...

  def toString(self) -> str: ...

  def __init__(self, arg0: int, arg1: int, arg2: int, arg3: int): ...


class Event:

  ACTION_EVENT: int

  ALT_MASK: int

  BACK_SPACE: int

  CAPS_LOCK: int

  CTRL_MASK: int

  DELETE: int

  DOWN: int

  END: int

  ENTER: int

  ESCAPE: int

  F1: int

  F10: int

  F11: int

  F12: int

  F2: int

  F3: int

  F4: int

  F5: int

  F6: int

  F7: int

  F8: int

  F9: int

  GOT_FOCUS: int

  HOME: int

  INSERT: int

  KEY_ACTION: int

  KEY_ACTION_RELEASE: int

  KEY_PRESS: int

  KEY_RELEASE: int

  LEFT: int

  LIST_DESELECT: int

  LIST_SELECT: int

  LOAD_FILE: int

  LOST_FOCUS: int

  META_MASK: int

  MOUSE_DOWN: int

  MOUSE_DRAG: int

  MOUSE_ENTER: int

  MOUSE_EXIT: int

  MOUSE_MOVE: int

  MOUSE_UP: int

  NUM_LOCK: int

  PAUSE: int

  PGDN: int

  PGUP: int

  PRINT_SCREEN: int

  RIGHT: int

  SAVE_FILE: int

  SCROLL_ABSOLUTE: int

  SCROLL_BEGIN: int

  SCROLL_END: int

  SCROLL_LINE_DOWN: int

  SCROLL_LINE_UP: int

  SCROLL_LOCK: int

  SCROLL_PAGE_DOWN: int

  SCROLL_PAGE_UP: int

  SHIFT_MASK: int

  TAB: int

  UP: int

  WINDOW_DEICONIFY: int

  WINDOW_DESTROY: int

  WINDOW_EXPOSE: int

  WINDOW_ICONIFY: int

  WINDOW_MOVED: int

  def controlDown(self) -> bool: ...

  def metaDown(self) -> bool: ...

  def shiftDown(self) -> bool: ...

  def toString(self) -> str: ...

  def translate(self, arg0: int, arg1: int) -> None: ...

  @overload
  def __init__(self, arg0: object, arg1: int, arg2: object):
    self.arg: object

    self.clickcount: int

    self.evt: Event

    self.id: int

    self.key: int

    self.modifiers: int

    self.target: object

    self.when: int

    self.x: int

    self.y: int

  @overload
  def __init__(self, arg0: object, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): ...
  @overload
  def __init__(self, arg0: object, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: object): ...


class EventDispatchThread(Thread):

  def getEventQueue(self) -> EventQueue: ...

  def run(self) -> None: ...

  def setEventQueue(self, arg0: EventQueue) -> None: ...

  def stopDispatching(self) -> None: ...

  class HierarchyEventFilter:

    @overload
    def acceptEvent(self, arg0: AWTEvent) -> EventFilter.FilterAction: ...

    @overload
    def acceptEvent(self, arg0: AWTEvent) -> EventFilter.FilterAction: ...

    def __init__(self, arg0: Component): ...


class EventFilter:

  def acceptEvent(self, arg0: AWTEvent) -> EventFilter.FilterAction: ...

  class FilterAction(Enum):

    ACCEPT: EventFilter.FilterAction

    ACCEPT_IMMEDIATELY: EventFilter.FilterAction

    REJECT: EventFilter.FilterAction

    @staticmethod
    def valueOf(arg0: str) -> EventFilter.FilterAction: ...

    @staticmethod
    def values() -> list[EventFilter.FilterAction]: ...


class EventQueue:

  def createSecondaryLoop(self) -> SecondaryLoop: ...

  def getNextEvent(self) -> AWTEvent: ...

  @overload
  def peekEvent(self) -> AWTEvent: ...

  @overload
  def peekEvent(self, arg0: int) -> AWTEvent: ...

  def postEvent(self, arg0: AWTEvent) -> None: ...

  def push(self, arg0: EventQueue) -> None: ...

  @staticmethod
  def getCurrentEvent() -> AWTEvent: ...

  @staticmethod
  def getMostRecentEventTime() -> int: ...

  @staticmethod
  def invokeAndWait(arg0: Runnable) -> None: ...

  @staticmethod
  def invokeLater(arg0: Runnable) -> None: ...

  @staticmethod
  def isDispatchThread() -> bool: ...

  def __init__(self): ...

  class FwSecondaryLoopWrapper:

    @overload
    def enter(self) -> bool: ...

    @overload
    def enter(self) -> bool: ...

    @overload
    def exit(self) -> bool: ...

    @overload
    def exit(self) -> bool: ...

    def __init__(self, arg0: EventQueue, arg1: SecondaryLoop, arg2: EventFilter): ...


class FileDialog(Dialog):

  LOAD: int

  SAVE: int

  def addNotify(self) -> None: ...

  def getDirectory(self) -> str: ...

  def getFile(self) -> str: ...

  def getFilenameFilter(self) -> FilenameFilter: ...

  def getFiles(self) -> list[File]: ...

  def getMode(self) -> int: ...

  def isMultipleMode(self) -> bool: ...

  def setDirectory(self, arg0: str) -> None: ...

  def setFile(self, arg0: str) -> None: ...

  def setFilenameFilter(self, arg0: FilenameFilter) -> None: ...

  def setMode(self, arg0: int) -> None: ...

  def setMultipleMode(self, arg0: bool) -> None: ...

  def setTitle(self, arg0: str) -> None: ...

  @overload
  def __init__(self, arg0: Dialog): ...
  @overload
  def __init__(self, arg0: Frame): ...
  @overload
  def __init__(self, arg0: Dialog, arg1: str): ...
  @overload
  def __init__(self, arg0: Frame, arg1: str): ...
  @overload
  def __init__(self, arg0: Dialog, arg1: str, arg2: int): ...
  @overload
  def __init__(self, arg0: Frame, arg1: str, arg2: int): ...


class FocusManager: ...


class FocusTraversalPolicy:

  def getComponentAfter(self, arg0: Container, arg1: Component) -> Component: ...

  def getComponentBefore(self, arg0: Container, arg1: Component) -> Component: ...

  def getDefaultComponent(self, arg0: Container) -> Component: ...

  def getFirstComponent(self, arg0: Container) -> Component: ...

  def getInitialComponent(self, arg0: Window) -> Component: ...

  def getLastComponent(self, arg0: Container) -> Component: ...


class Font:

  BOLD: int

  CENTER_BASELINE: int

  DIALOG: str

  DIALOG_INPUT: str

  HANGING_BASELINE: int

  ITALIC: int

  LAYOUT_LEFT_TO_RIGHT: int

  LAYOUT_NO_LIMIT_CONTEXT: int

  LAYOUT_NO_START_CONTEXT: int

  LAYOUT_RIGHT_TO_LEFT: int

  MONOSPACED: str

  PLAIN: int

  ROMAN_BASELINE: int

  SANS_SERIF: str

  SERIF: str

  TRUETYPE_FONT: int

  TYPE1_FONT: int

  @overload
  def canDisplay(self, arg0: str) -> bool: ...

  @overload
  def canDisplay(self, arg0: int) -> bool: ...

  @overload
  def canDisplayUpTo(self, arg0: str) -> int: ...

  @overload
  def canDisplayUpTo(self, arg0: list[str], arg1: int, arg2: int) -> int: ...

  @overload
  def canDisplayUpTo(self, arg0: CharacterIterator, arg1: int, arg2: int) -> int: ...

  @overload
  def createGlyphVector(self, arg0: FontRenderContext, arg1: list[str]) -> GlyphVector: ...

  @overload
  def createGlyphVector(self, arg0: FontRenderContext, arg1: list[int]) -> GlyphVector: ...

  @overload
  def createGlyphVector(self, arg0: FontRenderContext, arg1: str) -> GlyphVector: ...

  @overload
  def createGlyphVector(self, arg0: FontRenderContext, arg1: CharacterIterator) -> GlyphVector: ...

  @overload
  def deriveFont(self, arg0: float) -> Font: ...

  @overload
  def deriveFont(self, arg0: int) -> Font: ...

  @overload
  def deriveFont(self, arg0: AffineTransform) -> Font: ...

  @overload
  def deriveFont(self, arg0: Map[AttributedCharacterIterator.Attribute, Any]) -> Font: ...

  @overload
  def deriveFont(self, arg0: int, arg1: float) -> Font: ...

  @overload
  def deriveFont(self, arg0: int, arg1: AffineTransform) -> Font: ...

  def equals(self, arg0: object) -> bool: ...

  def getAttributes(self) -> Map[TextAttribute, Any]: ...

  def getAvailableAttributes(self) -> list[AttributedCharacterIterator.Attribute]: ...

  def getBaselineFor(self, arg0: str) -> int: ...

  @overload
  def getFamily(self) -> str: ...

  @overload
  def getFamily(self, arg0: Locale) -> str: ...

  @overload
  def getFontName(self) -> str: ...

  @overload
  def getFontName(self, arg0: Locale) -> str: ...

  def getItalicAngle(self) -> float: ...

  @overload
  def getLineMetrics(self, arg0: str, arg1: FontRenderContext) -> LineMetrics: ...

  @overload
  def getLineMetrics(self, arg0: list[str], arg1: int, arg2: int, arg3: FontRenderContext) -> LineMetrics: ...

  @overload
  def getLineMetrics(self, arg0: str, arg1: int, arg2: int, arg3: FontRenderContext) -> LineMetrics: ...

  @overload
  def getLineMetrics(self, arg0: CharacterIterator, arg1: int, arg2: int, arg3: FontRenderContext) -> LineMetrics: ...

  def getMaxCharBounds(self, arg0: FontRenderContext) -> Rectangle2D: ...

  def getMissingGlyphCode(self) -> int: ...

  def getName(self) -> str: ...

  def getNumGlyphs(self) -> int: ...

  def getPSName(self) -> str: ...

  def getSize(self) -> int: ...

  def getSize2D(self) -> float: ...

  @overload
  def getStringBounds(self, arg0: str, arg1: FontRenderContext) -> Rectangle2D: ...

  @overload
  def getStringBounds(self, arg0: list[str], arg1: int, arg2: int, arg3: FontRenderContext) -> Rectangle2D: ...

  @overload
  def getStringBounds(self, arg0: str, arg1: int, arg2: int, arg3: FontRenderContext) -> Rectangle2D: ...

  @overload
  def getStringBounds(self, arg0: CharacterIterator, arg1: int, arg2: int, arg3: FontRenderContext) -> Rectangle2D: ...

  def getStyle(self) -> int: ...

  def getTransform(self) -> AffineTransform: ...

  def hasLayoutAttributes(self) -> bool: ...

  def hasUniformLineMetrics(self) -> bool: ...

  def hashCode(self) -> int: ...

  def isBold(self) -> bool: ...

  def isItalic(self) -> bool: ...

  def isPlain(self) -> bool: ...

  def isTransformed(self) -> bool: ...

  def layoutGlyphVector(self, arg0: FontRenderContext, arg1: list[str], arg2: int, arg3: int, arg4: int) -> GlyphVector: ...

  def toString(self) -> str: ...

  @staticmethod
  @overload
  def createFont(arg0: int, arg1: File) -> Font: ...

  @staticmethod
  @overload
  def createFont(arg0: int, arg1: InputStream) -> Font: ...

  @staticmethod
  @overload
  def createFonts(arg0: File) -> list[Font]: ...

  @staticmethod
  @overload
  def createFonts(arg0: InputStream) -> list[Font]: ...

  @staticmethod
  def decode(arg0: str) -> Font: ...

  @staticmethod
  @overload
  def getFont(arg0: str) -> Font: ...

  @staticmethod
  @overload
  def getFont(arg0: Map[AttributedCharacterIterator.Attribute, Any]) -> Font: ...

  @staticmethod
  @overload
  def getFont(arg0: str, arg1: Font) -> Font: ...

  @staticmethod
  def textRequiresLayout(arg0: list[str], arg1: int, arg2: int) -> bool: ...

  @overload
  def __init__(self, arg0: Map[AttributedCharacterIterator.Attribute, Any]): ...
  @overload
  def __init__(self, arg0: str, arg1: int, arg2: int): ...

  class FontAccessImpl(FontAccess):

    def getFont2D(self, arg0: Font) -> Font2D: ...

    def getFontPeer(self, arg0: Font) -> FontPeer: ...

    def isCreatedFont(self, arg0: Font) -> bool: ...

    def setCreatedFont(self, arg0: Font) -> None: ...

    def setFont2D(self, arg0: Font, arg1: Font2DHandle) -> None: ...


class FontFormatException(Exception):

  def __init__(self, arg0: str): ...


class FontMetrics:

  def bytesWidth(self, arg0: list[int], arg1: int, arg2: int) -> int: ...

  @overload
  def charWidth(self, arg0: str) -> int: ...

  @overload
  def charWidth(self, arg0: int) -> int: ...

  def charsWidth(self, arg0: list[str], arg1: int, arg2: int) -> int: ...

  def getAscent(self) -> int: ...

  def getDescent(self) -> int: ...

  def getFont(self) -> Font: ...

  def getFontRenderContext(self) -> FontRenderContext: ...

  def getHeight(self) -> int: ...

  def getLeading(self) -> int: ...

  @overload
  def getLineMetrics(self, arg0: str, arg1: Graphics) -> LineMetrics: ...

  @overload
  def getLineMetrics(self, arg0: list[str], arg1: int, arg2: int, arg3: Graphics) -> LineMetrics: ...

  @overload
  def getLineMetrics(self, arg0: str, arg1: int, arg2: int, arg3: Graphics) -> LineMetrics: ...

  @overload
  def getLineMetrics(self, arg0: CharacterIterator, arg1: int, arg2: int, arg3: Graphics) -> LineMetrics: ...

  def getMaxAdvance(self) -> int: ...

  def getMaxAscent(self) -> int: ...

  def getMaxCharBounds(self, arg0: Graphics) -> Rectangle2D: ...

  def getMaxDecent(self) -> int: ...

  def getMaxDescent(self) -> int: ...

  @overload
  def getStringBounds(self, arg0: str, arg1: Graphics) -> Rectangle2D: ...

  @overload
  def getStringBounds(self, arg0: list[str], arg1: int, arg2: int, arg3: Graphics) -> Rectangle2D: ...

  @overload
  def getStringBounds(self, arg0: str, arg1: int, arg2: int, arg3: Graphics) -> Rectangle2D: ...

  @overload
  def getStringBounds(self, arg0: CharacterIterator, arg1: int, arg2: int, arg3: Graphics) -> Rectangle2D: ...

  def getWidths(self) -> list[int]: ...

  def hasUniformLineMetrics(self) -> bool: ...

  def stringWidth(self, arg0: str) -> int: ...

  def toString(self) -> str: ...


class Frame(Window):

  CROSSHAIR_CURSOR: int

  DEFAULT_CURSOR: int

  E_RESIZE_CURSOR: int

  HAND_CURSOR: int

  ICONIFIED: int

  MAXIMIZED_BOTH: int

  MAXIMIZED_HORIZ: int

  MAXIMIZED_VERT: int

  MOVE_CURSOR: int

  N_RESIZE_CURSOR: int

  NE_RESIZE_CURSOR: int

  NORMAL: int

  NW_RESIZE_CURSOR: int

  S_RESIZE_CURSOR: int

  SE_RESIZE_CURSOR: int

  SW_RESIZE_CURSOR: int

  TEXT_CURSOR: int

  W_RESIZE_CURSOR: int

  WAIT_CURSOR: int

  def addNotify(self) -> None: ...

  def getAccessibleContext(self) -> AccessibleContext: ...

  def getCursorType(self) -> int: ...

  def getExtendedState(self) -> int: ...

  def getFont(self) -> Font: ...

  def getIconImage(self) -> Image: ...

  def getMaximizedBounds(self) -> Rectangle: ...

  def getMenuBar(self) -> MenuBar: ...

  def getState(self) -> int: ...

  def getTitle(self) -> str: ...

  def isResizable(self) -> bool: ...

  def isUndecorated(self) -> bool: ...

  def postEvent(self, arg0: Event) -> bool: ...

  @overload
  def remove(self, arg0: MenuComponent) -> None: ...

  @overload
  def remove(self, arg0: MenuComponent) -> None: ...

  def removeNotify(self) -> None: ...

  def setBackground(self, arg0: Color) -> None: ...

  def setCursor(self, arg0: int) -> None: ...

  def setExtendedState(self, arg0: int) -> None: ...

  def setIconImage(self, arg0: Image) -> None: ...

  def setMaximizedBounds(self, arg0: Rectangle) -> None: ...

  def setMenuBar(self, arg0: MenuBar) -> None: ...

  def setOpacity(self, arg0: float) -> None: ...

  def setResizable(self, arg0: bool) -> None: ...

  def setShape(self, arg0: Shape) -> None: ...

  def setState(self, arg0: int) -> None: ...

  def setTitle(self, arg0: str) -> None: ...

  def setUndecorated(self, arg0: bool) -> None: ...

  @staticmethod
  def getFrames() -> list[Frame]: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: GraphicsConfiguration): ...
  @overload
  def __init__(self, arg0: str): ...
  @overload
  def __init__(self, arg0: str, arg1: GraphicsConfiguration): ...

  class AccessibleAWTFrame(Window.AccessibleAWTWindow):

    def getAccessibleRole(self) -> AccessibleRole: ...

    def getAccessibleStateSet(self) -> AccessibleStateSet: ...


class Graphics:

  def clearRect(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...

  def clipRect(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...

  def copyArea(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int) -> None: ...

  @overload
  def create(self) -> Graphics: ...

  @overload
  def create(self, arg0: int, arg1: int, arg2: int, arg3: int) -> Graphics: ...

  def dispose(self) -> None: ...

  def draw3DRect(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: bool) -> None: ...

  def drawArc(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int) -> None: ...

  def drawBytes(self, arg0: list[int], arg1: int, arg2: int, arg3: int, arg4: int) -> None: ...

  def drawChars(self, arg0: list[str], arg1: int, arg2: int, arg3: int, arg4: int) -> None: ...

  @overload
  def drawImage(self, arg0: Image, arg1: int, arg2: int, arg3: ImageObserver) -> bool: ...

  @overload
  def drawImage(self, arg0: Image, arg1: int, arg2: int, arg3: Color, arg4: ImageObserver) -> bool: ...

  @overload
  def drawImage(self, arg0: Image, arg1: int, arg2: int, arg3: int, arg4: int, arg5: ImageObserver) -> bool: ...

  @overload
  def drawImage(self, arg0: Image, arg1: int, arg2: int, arg3: int, arg4: int, arg5: Color, arg6: ImageObserver) -> bool: ...

  @overload
  def drawImage(self, arg0: Image, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: ImageObserver) -> bool: ...

  @overload
  def drawImage(self, arg0: Image, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: Color, arg10: ImageObserver) -> bool: ...

  def drawLine(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...

  def drawOval(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...

  @overload
  def drawPolygon(self, arg0: Polygon) -> None: ...

  @overload
  def drawPolygon(self, arg0: list[int], arg1: list[int], arg2: int) -> None: ...

  def drawPolyline(self, arg0: list[int], arg1: list[int], arg2: int) -> None: ...

  def drawRect(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...

  def drawRoundRect(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int) -> None: ...

  @overload
  def drawString(self, arg0: str, arg1: int, arg2: int) -> None: ...

  @overload
  def drawString(self, arg0: AttributedCharacterIterator, arg1: int, arg2: int) -> None: ...

  def fill3DRect(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: bool) -> None: ...

  def fillArc(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int) -> None: ...

  def fillOval(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...

  @overload
  def fillPolygon(self, arg0: Polygon) -> None: ...

  @overload
  def fillPolygon(self, arg0: list[int], arg1: list[int], arg2: int) -> None: ...

  def fillRect(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...

  def fillRoundRect(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int) -> None: ...

  def finalize(self) -> None: ...

  def getClip(self) -> Shape: ...

  @overload
  def getClipBounds(self) -> Rectangle: ...

  @overload
  def getClipBounds(self, arg0: Rectangle) -> Rectangle: ...

  def getClipRect(self) -> Rectangle: ...

  def getColor(self) -> Color: ...

  def getFont(self) -> Font: ...

  @overload
  def getFontMetrics(self) -> FontMetrics: ...

  @overload
  def getFontMetrics(self, arg0: Font) -> FontMetrics: ...

  def hitClip(self, arg0: int, arg1: int, arg2: int, arg3: int) -> bool: ...

  @overload
  def setClip(self, arg0: Shape) -> None: ...

  @overload
  def setClip(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...

  def setColor(self, arg0: Color) -> None: ...

  def setFont(self, arg0: Font) -> None: ...

  def setPaintMode(self) -> None: ...

  def setXORMode(self, arg0: Color) -> None: ...

  def toString(self) -> str: ...

  def translate(self, arg0: int, arg1: int) -> None: ...


class Graphics2D(Graphics):

  def addRenderingHints(self, arg0: Map[Any, Any]) -> None: ...

  def clip(self, arg0: Shape) -> None: ...

  def draw(self, arg0: Shape) -> None: ...

  def draw3DRect(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: bool) -> None: ...

  def drawGlyphVector(self, arg0: GlyphVector, arg1: float, arg2: float) -> None: ...

  @overload
  def drawImage(self, arg0: Image, arg1: AffineTransform, arg2: ImageObserver) -> bool: ...

  @overload
  def drawImage(self, arg0: BufferedImage, arg1: BufferedImageOp, arg2: int, arg3: int) -> None: ...

  def drawRenderableImage(self, arg0: RenderableImage, arg1: AffineTransform) -> None: ...

  def drawRenderedImage(self, arg0: RenderedImage, arg1: AffineTransform) -> None: ...

  @overload
  def drawString(self, arg0: str, arg1: float, arg2: float) -> None: ...

  @overload
  def drawString(self, arg0: str, arg1: int, arg2: int) -> None: ...

  @overload
  def drawString(self, arg0: AttributedCharacterIterator, arg1: float, arg2: float) -> None: ...

  @overload
  def drawString(self, arg0: AttributedCharacterIterator, arg1: int, arg2: int) -> None: ...

  def fill(self, arg0: Shape) -> None: ...

  def fill3DRect(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: bool) -> None: ...

  def getBackground(self) -> Color: ...

  def getComposite(self) -> Composite: ...

  def getDeviceConfiguration(self) -> GraphicsConfiguration: ...

  def getFontRenderContext(self) -> FontRenderContext: ...

  def getPaint(self) -> Paint: ...

  def getRenderingHint(self, arg0: RenderingHints.Key) -> object: ...

  def getRenderingHints(self) -> RenderingHints: ...

  def getStroke(self) -> Stroke: ...

  def getTransform(self) -> AffineTransform: ...

  def hit(self, arg0: Rectangle, arg1: Shape, arg2: bool) -> bool: ...

  @overload
  def rotate(self, arg0: float) -> None: ...

  @overload
  def rotate(self, arg0: float, arg1: float, arg2: float) -> None: ...

  def scale(self, arg0: float, arg1: float) -> None: ...

  def setBackground(self, arg0: Color) -> None: ...

  def setComposite(self, arg0: Composite) -> None: ...

  def setPaint(self, arg0: Paint) -> None: ...

  def setRenderingHint(self, arg0: RenderingHints.Key, arg1: object) -> None: ...

  def setRenderingHints(self, arg0: Map[Any, Any]) -> None: ...

  def setStroke(self, arg0: Stroke) -> None: ...

  def setTransform(self, arg0: AffineTransform) -> None: ...

  def shear(self, arg0: float, arg1: float) -> None: ...

  def transform(self, arg0: AffineTransform) -> None: ...

  @overload
  def translate(self, arg0: float, arg1: float) -> None: ...

  @overload
  def translate(self, arg0: int, arg1: int) -> None: ...


class GraphicsConfigTemplate:

  PREFERRED: int

  REQUIRED: int

  UNNECESSARY: int

  def getBestConfiguration(self, arg0: list[GraphicsConfiguration]) -> GraphicsConfiguration: ...

  def isGraphicsConfigSupported(self, arg0: GraphicsConfiguration) -> bool: ...

  def __init__(self): ...


class GraphicsConfiguration:

  @overload
  def createCompatibleImage(self, arg0: int, arg1: int) -> BufferedImage: ...

  @overload
  def createCompatibleImage(self, arg0: int, arg1: int, arg2: int) -> BufferedImage: ...

  @overload
  def createCompatibleVolatileImage(self, arg0: int, arg1: int) -> VolatileImage: ...

  @overload
  def createCompatibleVolatileImage(self, arg0: int, arg1: int, arg2: int) -> VolatileImage: ...

  @overload
  def createCompatibleVolatileImage(self, arg0: int, arg1: int, arg2: ImageCapabilities) -> VolatileImage: ...

  @overload
  def createCompatibleVolatileImage(self, arg0: int, arg1: int, arg2: ImageCapabilities, arg3: int) -> VolatileImage: ...

  def getBounds(self) -> Rectangle: ...

  def getBufferCapabilities(self) -> BufferCapabilities: ...

  @overload
  def getColorModel(self) -> ColorModel: ...

  @overload
  def getColorModel(self, arg0: int) -> ColorModel: ...

  def getDefaultTransform(self) -> AffineTransform: ...

  def getDevice(self) -> GraphicsDevice: ...

  def getImageCapabilities(self) -> ImageCapabilities: ...

  def getNormalizingTransform(self) -> AffineTransform: ...

  def isTranslucencyCapable(self) -> bool: ...

  class DefaultBufferCapabilities(BufferCapabilities):

    def __init__(self, arg0: ImageCapabilities): ...


class GraphicsDevice:

  TYPE_IMAGE_BUFFER: int

  TYPE_PRINTER: int

  TYPE_RASTER_SCREEN: int

  def getAvailableAcceleratedMemory(self) -> int: ...

  def getBestConfiguration(self, arg0: GraphicsConfigTemplate) -> GraphicsConfiguration: ...

  def getConfigurations(self) -> list[GraphicsConfiguration]: ...

  def getDefaultConfiguration(self) -> GraphicsConfiguration: ...

  def getDisplayMode(self) -> DisplayMode: ...

  def getDisplayModes(self) -> list[DisplayMode]: ...

  def getFullScreenWindow(self) -> Window: ...

  def getIDstring(self) -> str: ...

  def getType(self) -> int: ...

  def isDisplayChangeSupported(self) -> bool: ...

  def isFullScreenSupported(self) -> bool: ...

  def isWindowTranslucencySupported(self, arg0: GraphicsDevice.WindowTranslucency) -> bool: ...

  def setDisplayMode(self, arg0: DisplayMode) -> None: ...

  def setFullScreenWindow(self, arg0: Window) -> None: ...

  class WindowTranslucency(Enum):

    PERPIXEL_TRANSLUCENT: GraphicsDevice.WindowTranslucency

    PERPIXEL_TRANSPARENT: GraphicsDevice.WindowTranslucency

    TRANSLUCENT: GraphicsDevice.WindowTranslucency

    @staticmethod
    def valueOf(arg0: str) -> GraphicsDevice.WindowTranslucency: ...

    @staticmethod
    def values() -> list[GraphicsDevice.WindowTranslucency]: ...


class HeadlessException(UnsupportedOperationException):

  def getMessage(self) -> str: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: str): ...


class IllegalComponentStateException(IllegalStateException):

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: str): ...


class Image:

  SCALE_AREA_AVERAGING: int

  SCALE_DEFAULT: int

  SCALE_FAST: int

  SCALE_REPLICATE: int

  SCALE_SMOOTH: int

  UndefinedProperty: object

  def flush(self) -> None: ...

  def getAccelerationPriority(self) -> float: ...

  def getCapabilities(self, arg0: GraphicsConfiguration) -> ImageCapabilities: ...

  def getGraphics(self) -> Graphics: ...

  def getHeight(self, arg0: ImageObserver) -> int: ...

  def getProperty(self, arg0: str, arg1: ImageObserver) -> object: ...

  def getScaledInstance(self, arg0: int, arg1: int, arg2: int) -> Image: ...

  def getSource(self) -> ImageProducer: ...

  def getWidth(self, arg0: ImageObserver) -> int: ...

  def setAccelerationPriority(self, arg0: float) -> None: ...


class ImageCapabilities:

  def clone(self) -> object: ...

  def isAccelerated(self) -> bool: ...

  def isTrueVolatile(self) -> bool: ...

  def __init__(self, arg0: bool): ...


class Insets:

  def clone(self) -> object: ...

  def equals(self, arg0: object) -> bool: ...

  def hashCode(self) -> int: ...

  def set(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...

  def toString(self) -> str: ...

  def __init__(self, arg0: int, arg1: int, arg2: int, arg3: int):
    self.bottom: int
    self.left: int
    self.right: int
    self.top: int


class ItemSelectable:

  def addItemListener(self, arg0: ItemListener) -> None: ...

  def getSelectedObjects(self) -> list[object]: ...

  def removeItemListener(self, arg0: ItemListener) -> None: ...


class JobAttributes:

  def clone(self) -> object: ...

  def equals(self, arg0: object) -> bool: ...

  def getCopies(self) -> int: ...

  def getDefaultSelection(self) -> JobAttributes.DefaultSelectionType: ...

  def getDestination(self) -> JobAttributes.DestinationType: ...

  def getDialog(self) -> JobAttributes.DialogType: ...

  def getFileName(self) -> str: ...

  def getFromPage(self) -> int: ...

  def getMaxPage(self) -> int: ...

  def getMinPage(self) -> int: ...

  def getMultipleDocumentHandling(self) -> JobAttributes.MultipleDocumentHandlingType: ...

  def getPageRanges(self) -> list[list[int]]: ...

  def getPrinter(self) -> str: ...

  def getSides(self) -> JobAttributes.SidesType: ...

  def getToPage(self) -> int: ...

  def hashCode(self) -> int: ...

  def set(self, arg0: JobAttributes) -> None: ...

  def setCopies(self, arg0: int) -> None: ...

  def setCopiesToDefault(self) -> None: ...

  def setDefaultSelection(self, arg0: JobAttributes.DefaultSelectionType) -> None: ...

  def setDestination(self, arg0: JobAttributes.DestinationType) -> None: ...

  def setDialog(self, arg0: JobAttributes.DialogType) -> None: ...

  def setFileName(self, arg0: str) -> None: ...

  def setFromPage(self, arg0: int) -> None: ...

  def setMaxPage(self, arg0: int) -> None: ...

  def setMinPage(self, arg0: int) -> None: ...

  def setMultipleDocumentHandling(self, arg0: JobAttributes.MultipleDocumentHandlingType) -> None: ...

  def setMultipleDocumentHandlingToDefault(self) -> None: ...

  def setPageRanges(self, arg0: list[list[int]]) -> None: ...

  def setPrinter(self, arg0: str) -> None: ...

  def setSides(self, arg0: JobAttributes.SidesType) -> None: ...

  def setSidesToDefault(self) -> None: ...

  def setToPage(self, arg0: int) -> None: ...

  def toString(self) -> str: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: JobAttributes): ...
  @overload
  def __init__(self, arg0: int, arg1: JobAttributes.DefaultSelectionType, arg2: JobAttributes.DestinationType, arg3: JobAttributes.DialogType, arg4: str, arg5: int, arg6: int, arg7: JobAttributes.MultipleDocumentHandlingType, arg8: list[list[int]], arg9: str, arg10: JobAttributes.SidesType): ...

  class DefaultSelectionType(AttributeValue):

    ALL: JobAttributes.DefaultSelectionType

    RANGE: JobAttributes.DefaultSelectionType

    SELECTION: JobAttributes.DefaultSelectionType

    def hashCode(self) -> int: ...

    def toString(self) -> str: ...

  class DestinationType(AttributeValue):

    FILE: JobAttributes.DestinationType

    PRINTER: JobAttributes.DestinationType

    def hashCode(self) -> int: ...

    def toString(self) -> str: ...

  class DialogType(AttributeValue):

    COMMON: JobAttributes.DialogType

    NATIVE: JobAttributes.DialogType

    NONE: JobAttributes.DialogType

    def hashCode(self) -> int: ...

    def toString(self) -> str: ...

  class MultipleDocumentHandlingType(AttributeValue):

    SEPARATE_DOCUMENTS_COLLATED_COPIES: JobAttributes.MultipleDocumentHandlingType

    SEPARATE_DOCUMENTS_UNCOLLATED_COPIES: JobAttributes.MultipleDocumentHandlingType

    def hashCode(self) -> int: ...

    def toString(self) -> str: ...

  class SidesType(AttributeValue):

    ONE_SIDED: JobAttributes.SidesType

    TWO_SIDED_LONG_EDGE: JobAttributes.SidesType

    TWO_SIDED_SHORT_EDGE: JobAttributes.SidesType

    def hashCode(self) -> int: ...

    def toString(self) -> str: ...


class Label(Component):

  CENTER: int

  LEFT: int

  RIGHT: int

  def addNotify(self) -> None: ...

  @overload
  def getAccessibleContext(self) -> AccessibleContext: ...

  @overload
  def getAccessibleContext(self) -> AccessibleContext: ...

  def getAlignment(self) -> int: ...

  def getText(self) -> str: ...

  def setAlignment(self, arg0: int) -> None: ...

  def setText(self, arg0: str) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: str): ...
  @overload
  def __init__(self, arg0: str, arg1: int): ...

  class AccessibleAWTLabel(Component.AccessibleAWTComponent):

    def getAccessibleName(self) -> str: ...

    def getAccessibleRole(self) -> AccessibleRole: ...

    def __init__(self, arg0: Label): ...


class LayoutManager:

  def addLayoutComponent(self, arg0: str, arg1: Component) -> None: ...

  def layoutContainer(self, arg0: Container) -> None: ...

  def minimumLayoutSize(self, arg0: Container) -> Dimension: ...

  def preferredLayoutSize(self, arg0: Container) -> Dimension: ...

  def removeLayoutComponent(self, arg0: Component) -> None: ...


class LightweightDispatcher:

  @overload
  def eventDispatched(self, arg0: AWTEvent) -> None: ...

  @overload
  def eventDispatched(self, arg0: AWTEvent) -> None: ...


class List(Component):

  @overload
  def add(self, arg0: str) -> None: ...

  @overload
  def add(self, arg0: str, arg1: int) -> None: ...

  def addActionListener(self, arg0: ActionListener) -> None: ...

  @overload
  def addItem(self, arg0: str) -> None: ...

  @overload
  def addItem(self, arg0: str, arg1: int) -> None: ...

  @overload
  def addItemListener(self, arg0: ItemListener) -> None: ...

  @overload
  def addItemListener(self, arg0: ItemListener) -> None: ...

  def addNotify(self) -> None: ...

  def allowsMultipleSelections(self) -> bool: ...

  def clear(self) -> None: ...

  def countItems(self) -> int: ...

  def delItem(self, arg0: int) -> None: ...

  def delItems(self, arg0: int, arg1: int) -> None: ...

  def deselect(self, arg0: int) -> None: ...

  @overload
  def getAccessibleContext(self) -> AccessibleContext: ...

  @overload
  def getAccessibleContext(self) -> AccessibleContext: ...

  def getActionListeners(self) -> list[ActionListener]: ...

  def getItem(self, arg0: int) -> str: ...

  def getItemCount(self) -> int: ...

  def getItemListeners(self) -> list[ItemListener]: ...

  def getItems(self) -> list[str]: ...

  def getListeners(self, arg0: Class[T]) -> list[EventListener]: ...

  @overload
  def getMinimumSize(self) -> Dimension: ...

  @overload
  def getMinimumSize(self, arg0: int) -> Dimension: ...

  @overload
  def getPreferredSize(self) -> Dimension: ...

  @overload
  def getPreferredSize(self, arg0: int) -> Dimension: ...

  def getRows(self) -> int: ...

  def getSelectedIndex(self) -> int: ...

  def getSelectedIndexes(self) -> list[int]: ...

  def getSelectedItem(self) -> str: ...

  def getSelectedItems(self) -> list[str]: ...

  @overload
  def getSelectedObjects(self) -> list[object]: ...

  @overload
  def getSelectedObjects(self) -> list[object]: ...

  def getVisibleIndex(self) -> int: ...

  def isIndexSelected(self, arg0: int) -> bool: ...

  def isMultipleMode(self) -> bool: ...

  def isSelected(self, arg0: int) -> bool: ...

  def makeVisible(self, arg0: int) -> None: ...

  @overload
  def minimumSize(self) -> Dimension: ...

  @overload
  def minimumSize(self, arg0: int) -> Dimension: ...

  @overload
  def preferredSize(self) -> Dimension: ...

  @overload
  def preferredSize(self, arg0: int) -> Dimension: ...

  @overload
  def remove(self, arg0: int) -> None: ...

  @overload
  def remove(self, arg0: str) -> None: ...

  def removeActionListener(self, arg0: ActionListener) -> None: ...

  def removeAll(self) -> None: ...

  @overload
  def removeItemListener(self, arg0: ItemListener) -> None: ...

  @overload
  def removeItemListener(self, arg0: ItemListener) -> None: ...

  def removeNotify(self) -> None: ...

  def replaceItem(self, arg0: str, arg1: int) -> None: ...

  def select(self, arg0: int) -> None: ...

  def setMultipleMode(self, arg0: bool) -> None: ...

  def setMultipleSelections(self, arg0: bool) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: int): ...
  @overload
  def __init__(self, arg0: int, arg1: bool): ...

  class AccessibleAWTList(Component.AccessibleAWTComponent):

    @overload
    def actionPerformed(self, arg0: ActionEvent) -> None: ...

    @overload
    def actionPerformed(self, arg0: ActionEvent) -> None: ...

    @overload
    def addAccessibleSelection(self, arg0: int) -> None: ...

    @overload
    def addAccessibleSelection(self, arg0: int) -> None: ...

    @overload
    def clearAccessibleSelection(self) -> None: ...

    @overload
    def clearAccessibleSelection(self) -> None: ...

    def getAccessibleAt(self, arg0: Point) -> Accessible: ...

    def getAccessibleChild(self, arg0: int) -> Accessible: ...

    def getAccessibleChildrenCount(self) -> int: ...

    def getAccessibleRole(self) -> AccessibleRole: ...

    @overload
    def getAccessibleSelection(self) -> AccessibleSelection: ...

    @overload
    def getAccessibleSelection(self, arg0: int) -> Accessible: ...

    @overload
    def getAccessibleSelection(self, arg0: int) -> Accessible: ...

    @overload
    def getAccessibleSelectionCount(self) -> int: ...

    @overload
    def getAccessibleSelectionCount(self) -> int: ...

    def getAccessibleStateSet(self) -> AccessibleStateSet: ...

    @overload
    def isAccessibleChildSelected(self, arg0: int) -> bool: ...

    @overload
    def isAccessibleChildSelected(self, arg0: int) -> bool: ...

    @overload
    def itemStateChanged(self, arg0: ItemEvent) -> None: ...

    @overload
    def itemStateChanged(self, arg0: ItemEvent) -> None: ...

    @overload
    def removeAccessibleSelection(self, arg0: int) -> None: ...

    @overload
    def removeAccessibleSelection(self, arg0: int) -> None: ...

    @overload
    def selectAllAccessibleSelection(self) -> None: ...

    @overload
    def selectAllAccessibleSelection(self) -> None: ...

    def __init__(self, arg0: List): ...

    class AccessibleAWTListChild(Component.AccessibleAWTComponent):

      def addFocusListener(self, arg0: FocusListener) -> None: ...

      def contains(self, arg0: Point) -> bool: ...

      def getAccessibleAt(self, arg0: Point) -> Accessible: ...

      def getAccessibleChild(self, arg0: int) -> Accessible: ...

      def getAccessibleChildrenCount(self) -> int: ...

      @overload
      def getAccessibleContext(self) -> AccessibleContext: ...

      @overload
      def getAccessibleContext(self) -> AccessibleContext: ...

      def getAccessibleIndexInParent(self) -> int: ...

      def getAccessibleRole(self) -> AccessibleRole: ...

      def getAccessibleStateSet(self) -> AccessibleStateSet: ...

      def getBackground(self) -> Color: ...

      def getBounds(self) -> Rectangle: ...

      def getCursor(self) -> Cursor: ...

      def getFont(self) -> Font: ...

      def getFontMetrics(self, arg0: Font) -> FontMetrics: ...

      def getForeground(self) -> Color: ...

      def getLocale(self) -> Locale: ...

      def getLocation(self) -> Point: ...

      def getLocationOnScreen(self) -> Point: ...

      def getSize(self) -> Dimension: ...

      def isEnabled(self) -> bool: ...

      def isFocusTraversable(self) -> bool: ...

      def isShowing(self) -> bool: ...

      def isVisible(self) -> bool: ...

      def removeFocusListener(self, arg0: FocusListener) -> None: ...

      def requestFocus(self) -> None: ...

      def setBackground(self, arg0: Color) -> None: ...

      def setBounds(self, arg0: Rectangle) -> None: ...

      def setCursor(self, arg0: Cursor) -> None: ...

      def setEnabled(self, arg0: bool) -> None: ...

      def setFont(self, arg0: Font) -> None: ...

      def setForeground(self, arg0: Color) -> None: ...

      def setLocation(self, arg0: Point) -> None: ...

      def setSize(self, arg0: Dimension) -> None: ...

      def setVisible(self, arg0: bool) -> None: ...

      def __init__(self, arg0: List.AccessibleAWTList, arg1: List, arg2: int): ...


class Menu(MenuItem):

  @overload
  def add(self, arg0: MenuItem) -> MenuItem: ...

  @overload
  def add(self, arg0: str) -> None: ...

  def addNotify(self) -> None: ...

  def addSeparator(self) -> None: ...

  def countItems(self) -> int: ...

  @overload
  def getAccessibleContext(self) -> AccessibleContext: ...

  @overload
  def getAccessibleContext(self) -> AccessibleContext: ...

  def getFont(self) -> Font: ...

  def getItem(self, arg0: int) -> MenuItem: ...

  def getItemCount(self) -> int: ...

  @overload
  def insert(self, arg0: MenuItem, arg1: int) -> None: ...

  @overload
  def insert(self, arg0: str, arg1: int) -> None: ...

  def insertSeparator(self, arg0: int) -> None: ...

  def isTearOff(self) -> bool: ...

  def paramString(self) -> str: ...

  def postEvent(self, arg0: Event) -> bool: ...

  @overload
  def remove(self, arg0: int) -> None: ...

  @overload
  def remove(self, arg0: MenuComponent) -> None: ...

  @overload
  def remove(self, arg0: MenuComponent) -> None: ...

  def removeAll(self) -> None: ...

  def removeNotify(self) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: str): ...
  @overload
  def __init__(self, arg0: str, arg1: bool): ...

  class AccessibleAWTMenu(MenuItem.AccessibleAWTMenuItem):

    def getAccessibleRole(self) -> AccessibleRole: ...


class MenuBar(MenuComponent):

  def add(self, arg0: Menu) -> Menu: ...

  def addNotify(self) -> None: ...

  def countMenus(self) -> int: ...

  def deleteShortcut(self, arg0: MenuShortcut) -> None: ...

  @overload
  def getAccessibleContext(self) -> AccessibleContext: ...

  @overload
  def getAccessibleContext(self) -> AccessibleContext: ...

  def getFont(self) -> Font: ...

  def getHelpMenu(self) -> Menu: ...

  def getMenu(self, arg0: int) -> Menu: ...

  def getMenuCount(self) -> int: ...

  def getShortcutMenuItem(self, arg0: MenuShortcut) -> MenuItem: ...

  def postEvent(self, arg0: Event) -> bool: ...

  @overload
  def remove(self, arg0: int) -> None: ...

  @overload
  def remove(self, arg0: MenuComponent) -> None: ...

  @overload
  def remove(self, arg0: MenuComponent) -> None: ...

  def removeNotify(self) -> None: ...

  def setHelpMenu(self, arg0: Menu) -> None: ...

  def shortcuts(self) -> Enumeration[MenuShortcut]: ...

  def __init__(self): ...

  class AccessibleAWTMenuBar(MenuComponent.AccessibleAWTMenuComponent):

    def getAccessibleRole(self) -> AccessibleRole: ...


class MenuComponent:

  def dispatchEvent(self, arg0: AWTEvent) -> None: ...

  def getAccessibleContext(self) -> AccessibleContext: ...

  def getFont(self) -> Font: ...

  def getName(self) -> str: ...

  def getParent(self) -> MenuContainer: ...

  def postEvent(self, arg0: Event) -> bool: ...

  def removeNotify(self) -> None: ...

  def setFont(self, arg0: Font) -> None: ...

  def setName(self, arg0: str) -> None: ...

  def toString(self) -> str: ...

  def __init__(self): ...

  class AccessibleAWTMenuComponent(AccessibleContext):

    @overload
    def addAccessibleSelection(self, arg0: int) -> None: ...

    @overload
    def addAccessibleSelection(self, arg0: int) -> None: ...

    @overload
    def addFocusListener(self, arg0: FocusListener) -> None: ...

    @overload
    def addFocusListener(self, arg0: FocusListener) -> None: ...

    @overload
    def clearAccessibleSelection(self) -> None: ...

    @overload
    def clearAccessibleSelection(self) -> None: ...

    @overload
    def contains(self, arg0: Point) -> bool: ...

    @overload
    def contains(self, arg0: Point) -> bool: ...

    @overload
    def getAccessibleAt(self, arg0: Point) -> Accessible: ...

    @overload
    def getAccessibleAt(self, arg0: Point) -> Accessible: ...

    def getAccessibleChild(self, arg0: int) -> Accessible: ...

    def getAccessibleChildrenCount(self) -> int: ...

    def getAccessibleComponent(self) -> AccessibleComponent: ...

    def getAccessibleDescription(self) -> str: ...

    def getAccessibleIndexInParent(self) -> int: ...

    def getAccessibleName(self) -> str: ...

    def getAccessibleParent(self) -> Accessible: ...

    def getAccessibleRole(self) -> AccessibleRole: ...

    @overload
    def getAccessibleSelection(self) -> AccessibleSelection: ...

    @overload
    def getAccessibleSelection(self, arg0: int) -> Accessible: ...

    @overload
    def getAccessibleSelection(self, arg0: int) -> Accessible: ...

    @overload
    def getAccessibleSelectionCount(self) -> int: ...

    @overload
    def getAccessibleSelectionCount(self) -> int: ...

    def getAccessibleStateSet(self) -> AccessibleStateSet: ...

    @overload
    def getBackground(self) -> Color: ...

    @overload
    def getBackground(self) -> Color: ...

    @overload
    def getBounds(self) -> Rectangle: ...

    @overload
    def getBounds(self) -> Rectangle: ...

    @overload
    def getCursor(self) -> Cursor: ...

    @overload
    def getCursor(self) -> Cursor: ...

    @overload
    def getFont(self) -> Font: ...

    @overload
    def getFont(self) -> Font: ...

    @overload
    def getFontMetrics(self, arg0: Font) -> FontMetrics: ...

    @overload
    def getFontMetrics(self, arg0: Font) -> FontMetrics: ...

    @overload
    def getForeground(self) -> Color: ...

    @overload
    def getForeground(self) -> Color: ...

    def getLocale(self) -> Locale: ...

    @overload
    def getLocation(self) -> Point: ...

    @overload
    def getLocation(self) -> Point: ...

    @overload
    def getLocationOnScreen(self) -> Point: ...

    @overload
    def getLocationOnScreen(self) -> Point: ...

    @overload
    def getSize(self) -> Dimension: ...

    @overload
    def getSize(self) -> Dimension: ...

    @overload
    def isAccessibleChildSelected(self, arg0: int) -> bool: ...

    @overload
    def isAccessibleChildSelected(self, arg0: int) -> bool: ...

    @overload
    def isEnabled(self) -> bool: ...

    @overload
    def isEnabled(self) -> bool: ...

    @overload
    def isFocusTraversable(self) -> bool: ...

    @overload
    def isFocusTraversable(self) -> bool: ...

    @overload
    def isShowing(self) -> bool: ...

    @overload
    def isShowing(self) -> bool: ...

    @overload
    def isVisible(self) -> bool: ...

    @overload
    def isVisible(self) -> bool: ...

    @overload
    def removeAccessibleSelection(self, arg0: int) -> None: ...

    @overload
    def removeAccessibleSelection(self, arg0: int) -> None: ...

    @overload
    def removeFocusListener(self, arg0: FocusListener) -> None: ...

    @overload
    def removeFocusListener(self, arg0: FocusListener) -> None: ...

    @overload
    def requestFocus(self) -> None: ...

    @overload
    def requestFocus(self) -> None: ...

    @overload
    def selectAllAccessibleSelection(self) -> None: ...

    @overload
    def selectAllAccessibleSelection(self) -> None: ...

    @overload
    def setBackground(self, arg0: Color) -> None: ...

    @overload
    def setBackground(self, arg0: Color) -> None: ...

    @overload
    def setBounds(self, arg0: Rectangle) -> None: ...

    @overload
    def setBounds(self, arg0: Rectangle) -> None: ...

    @overload
    def setCursor(self, arg0: Cursor) -> None: ...

    @overload
    def setCursor(self, arg0: Cursor) -> None: ...

    @overload
    def setEnabled(self, arg0: bool) -> None: ...

    @overload
    def setEnabled(self, arg0: bool) -> None: ...

    @overload
    def setFont(self, arg0: Font) -> None: ...

    @overload
    def setFont(self, arg0: Font) -> None: ...

    @overload
    def setForeground(self, arg0: Color) -> None: ...

    @overload
    def setForeground(self, arg0: Color) -> None: ...

    @overload
    def setLocation(self, arg0: Point) -> None: ...

    @overload
    def setLocation(self, arg0: Point) -> None: ...

    @overload
    def setSize(self, arg0: Dimension) -> None: ...

    @overload
    def setSize(self, arg0: Dimension) -> None: ...

    @overload
    def setVisible(self, arg0: bool) -> None: ...

    @overload
    def setVisible(self, arg0: bool) -> None: ...


class MenuContainer:

  def getFont(self) -> Font: ...

  def postEvent(self, arg0: Event) -> bool: ...

  def remove(self, arg0: MenuComponent) -> None: ...


class MenuItem(MenuComponent):

  def addActionListener(self, arg0: ActionListener) -> None: ...

  def addNotify(self) -> None: ...

  def deleteShortcut(self) -> None: ...

  def disable(self) -> None: ...

  @overload
  def enable(self) -> None: ...

  @overload
  def enable(self, arg0: bool) -> None: ...

  @overload
  def getAccessibleContext(self) -> AccessibleContext: ...

  @overload
  def getAccessibleContext(self) -> AccessibleContext: ...

  def getActionCommand(self) -> str: ...

  def getActionListeners(self) -> list[ActionListener]: ...

  def getLabel(self) -> str: ...

  def getListeners(self, arg0: Class[T]) -> list[EventListener]: ...

  def getShortcut(self) -> MenuShortcut: ...

  def isEnabled(self) -> bool: ...

  def paramString(self) -> str: ...

  def removeActionListener(self, arg0: ActionListener) -> None: ...

  def setActionCommand(self, arg0: str) -> None: ...

  def setEnabled(self, arg0: bool) -> None: ...

  def setLabel(self, arg0: str) -> None: ...

  def setShortcut(self, arg0: MenuShortcut) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: str): ...
  @overload
  def __init__(self, arg0: str, arg1: MenuShortcut): ...

  class AccessibleAWTMenuItem(MenuComponent.AccessibleAWTMenuComponent):

    CLICK: str

    DECREMENT: str

    INCREMENT: str

    TOGGLE_EXPAND: str

    TOGGLE_POPUP: str

    @overload
    def doAccessibleAction(self, arg0: int) -> bool: ...

    @overload
    def doAccessibleAction(self, arg0: int) -> bool: ...

    def getAccessibleAction(self) -> AccessibleAction: ...

    @overload
    def getAccessibleActionCount(self) -> int: ...

    @overload
    def getAccessibleActionCount(self) -> int: ...

    @overload
    def getAccessibleActionDescription(self, arg0: int) -> str: ...

    @overload
    def getAccessibleActionDescription(self, arg0: int) -> str: ...

    def getAccessibleName(self) -> str: ...

    def getAccessibleRole(self) -> AccessibleRole: ...

    def getAccessibleValue(self) -> AccessibleValue: ...

    @overload
    def getCurrentAccessibleValue(self) -> Number: ...

    @overload
    def getCurrentAccessibleValue(self) -> Number: ...

    @overload
    def getMaximumAccessibleValue(self) -> Number: ...

    @overload
    def getMaximumAccessibleValue(self) -> Number: ...

    @overload
    def getMinimumAccessibleValue(self) -> Number: ...

    @overload
    def getMinimumAccessibleValue(self) -> Number: ...

    @overload
    def setCurrentAccessibleValue(self, arg0: Number) -> bool: ...

    @overload
    def setCurrentAccessibleValue(self, arg0: Number) -> bool: ...


class MenuShortcut:

  @overload
  def equals(self, arg0: MenuShortcut) -> bool: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  def getKey(self) -> int: ...

  def hashCode(self) -> int: ...

  def toString(self) -> str: ...

  def usesShiftModifier(self) -> bool: ...

  @overload
  def __init__(self, arg0: int): ...
  @overload
  def __init__(self, arg0: int, arg1: bool): ...


class ModalEventFilter:

  @overload
  def acceptEvent(self, arg0: AWTEvent) -> EventFilter.FilterAction: ...

  @overload
  def acceptEvent(self, arg0: AWTEvent) -> EventFilter.FilterAction: ...

  class DocumentModalEventFilter(ModalEventFilter): ...

  class ApplicationModalEventFilter(ModalEventFilter): ...

  class ToolkitModalEventFilter(ModalEventFilter): ...


class PageAttributes:

  def clone(self) -> object: ...

  def equals(self, arg0: object) -> bool: ...

  def getColor(self) -> PageAttributes.ColorType: ...

  def getMedia(self) -> PageAttributes.MediaType: ...

  def getOrientationRequested(self) -> PageAttributes.OrientationRequestedType: ...

  def getOrigin(self) -> PageAttributes.OriginType: ...

  def getPrintQuality(self) -> PageAttributes.PrintQualityType: ...

  def getPrinterResolution(self) -> list[int]: ...

  def hashCode(self) -> int: ...

  def set(self, arg0: PageAttributes) -> None: ...

  def setColor(self, arg0: PageAttributes.ColorType) -> None: ...

  def setMedia(self, arg0: PageAttributes.MediaType) -> None: ...

  def setMediaToDefault(self) -> None: ...

  @overload
  def setOrientationRequested(self, arg0: int) -> None: ...

  @overload
  def setOrientationRequested(self, arg0: PageAttributes.OrientationRequestedType) -> None: ...

  def setOrientationRequestedToDefault(self) -> None: ...

  def setOrigin(self, arg0: PageAttributes.OriginType) -> None: ...

  @overload
  def setPrintQuality(self, arg0: int) -> None: ...

  @overload
  def setPrintQuality(self, arg0: PageAttributes.PrintQualityType) -> None: ...

  def setPrintQualityToDefault(self) -> None: ...

  @overload
  def setPrinterResolution(self, arg0: list[int]) -> None: ...

  @overload
  def setPrinterResolution(self, arg0: int) -> None: ...

  def setPrinterResolutionToDefault(self) -> None: ...

  def toString(self) -> str: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: PageAttributes): ...
  @overload
  def __init__(self, arg0: PageAttributes.ColorType, arg1: PageAttributes.MediaType, arg2: PageAttributes.OrientationRequestedType, arg3: PageAttributes.OriginType, arg4: PageAttributes.PrintQualityType, arg5: list[int]): ...

  class ColorType(AttributeValue):

    COLOR: PageAttributes.ColorType

    MONOCHROME: PageAttributes.ColorType

    def hashCode(self) -> int: ...

    def toString(self) -> str: ...

  class OriginType(AttributeValue):

    PHYSICAL: PageAttributes.OriginType

    PRINTABLE: PageAttributes.OriginType

    def hashCode(self) -> int: ...

    def toString(self) -> str: ...

  class MediaType(AttributeValue):

    A: PageAttributes.MediaType

    A0: PageAttributes.MediaType

    A1: PageAttributes.MediaType

    A10: PageAttributes.MediaType

    A2: PageAttributes.MediaType

    A3: PageAttributes.MediaType

    A4: PageAttributes.MediaType

    A5: PageAttributes.MediaType

    A6: PageAttributes.MediaType

    A7: PageAttributes.MediaType

    A8: PageAttributes.MediaType

    A9: PageAttributes.MediaType

    B: PageAttributes.MediaType

    B0: PageAttributes.MediaType

    B1: PageAttributes.MediaType

    B10: PageAttributes.MediaType

    B2: PageAttributes.MediaType

    B3: PageAttributes.MediaType

    B4: PageAttributes.MediaType

    B5: PageAttributes.MediaType

    B6: PageAttributes.MediaType

    B7: PageAttributes.MediaType

    B8: PageAttributes.MediaType

    B9: PageAttributes.MediaType

    C: PageAttributes.MediaType

    C0: PageAttributes.MediaType

    C1: PageAttributes.MediaType

    C10: PageAttributes.MediaType

    C2: PageAttributes.MediaType

    C3: PageAttributes.MediaType

    C4: PageAttributes.MediaType

    C5: PageAttributes.MediaType

    C6: PageAttributes.MediaType

    C7: PageAttributes.MediaType

    C8: PageAttributes.MediaType

    C9: PageAttributes.MediaType

    D: PageAttributes.MediaType

    E: PageAttributes.MediaType

    ENV_10: PageAttributes.MediaType

    ENV_10X13: PageAttributes.MediaType

    ENV_10X14: PageAttributes.MediaType

    ENV_10X15: PageAttributes.MediaType

    ENV_11: PageAttributes.MediaType

    ENV_12: PageAttributes.MediaType

    ENV_14: PageAttributes.MediaType

    ENV_6X9: PageAttributes.MediaType

    ENV_7X9: PageAttributes.MediaType

    ENV_9: PageAttributes.MediaType

    ENV_9X11: PageAttributes.MediaType

    ENV_9X12: PageAttributes.MediaType

    ENV_INVITE: PageAttributes.MediaType

    ENV_ITALY: PageAttributes.MediaType

    ENV_MONARCH: PageAttributes.MediaType

    ENV_PERSONAL: PageAttributes.MediaType

    EXECUTIVE: PageAttributes.MediaType

    FOLIO: PageAttributes.MediaType

    INVITE: PageAttributes.MediaType

    INVITE_ENVELOPE: PageAttributes.MediaType

    INVOICE: PageAttributes.MediaType

    ISO_2A0: PageAttributes.MediaType

    ISO_4A0: PageAttributes.MediaType

    ISO_A0: PageAttributes.MediaType

    ISO_A1: PageAttributes.MediaType

    ISO_A10: PageAttributes.MediaType

    ISO_A2: PageAttributes.MediaType

    ISO_A3: PageAttributes.MediaType

    ISO_A4: PageAttributes.MediaType

    ISO_A5: PageAttributes.MediaType

    ISO_A6: PageAttributes.MediaType

    ISO_A7: PageAttributes.MediaType

    ISO_A8: PageAttributes.MediaType

    ISO_A9: PageAttributes.MediaType

    ISO_B0: PageAttributes.MediaType

    ISO_B1: PageAttributes.MediaType

    ISO_B10: PageAttributes.MediaType

    ISO_B2: PageAttributes.MediaType

    ISO_B3: PageAttributes.MediaType

    ISO_B4: PageAttributes.MediaType

    ISO_B4_ENVELOPE: PageAttributes.MediaType

    ISO_B5: PageAttributes.MediaType

    ISO_B5_ENVELOPE: PageAttributes.MediaType

    ISO_B6: PageAttributes.MediaType

    ISO_B7: PageAttributes.MediaType

    ISO_B8: PageAttributes.MediaType

    ISO_B9: PageAttributes.MediaType

    ISO_C0: PageAttributes.MediaType

    ISO_C0_ENVELOPE: PageAttributes.MediaType

    ISO_C1: PageAttributes.MediaType

    ISO_C10: PageAttributes.MediaType

    ISO_C10_ENVELOPE: PageAttributes.MediaType

    ISO_C1_ENVELOPE: PageAttributes.MediaType

    ISO_C2: PageAttributes.MediaType

    ISO_C2_ENVELOPE: PageAttributes.MediaType

    ISO_C3: PageAttributes.MediaType

    ISO_C3_ENVELOPE: PageAttributes.MediaType

    ISO_C4: PageAttributes.MediaType

    ISO_C4_ENVELOPE: PageAttributes.MediaType

    ISO_C5: PageAttributes.MediaType

    ISO_C5_ENVELOPE: PageAttributes.MediaType

    ISO_C6: PageAttributes.MediaType

    ISO_C6_ENVELOPE: PageAttributes.MediaType

    ISO_C7: PageAttributes.MediaType

    ISO_C7_ENVELOPE: PageAttributes.MediaType

    ISO_C8: PageAttributes.MediaType

    ISO_C8_ENVELOPE: PageAttributes.MediaType

    ISO_C9: PageAttributes.MediaType

    ISO_C9_ENVELOPE: PageAttributes.MediaType

    ISO_DESIGNATED_LONG: PageAttributes.MediaType

    ISO_DESIGNATED_LONG_ENVELOPE: PageAttributes.MediaType

    ITALY: PageAttributes.MediaType

    ITALY_ENVELOPE: PageAttributes.MediaType

    JIS_B0: PageAttributes.MediaType

    JIS_B1: PageAttributes.MediaType

    JIS_B10: PageAttributes.MediaType

    JIS_B2: PageAttributes.MediaType

    JIS_B3: PageAttributes.MediaType

    JIS_B4: PageAttributes.MediaType

    JIS_B5: PageAttributes.MediaType

    JIS_B6: PageAttributes.MediaType

    JIS_B7: PageAttributes.MediaType

    JIS_B8: PageAttributes.MediaType

    JIS_B9: PageAttributes.MediaType

    LEDGER: PageAttributes.MediaType

    LEGAL: PageAttributes.MediaType

    LETTER: PageAttributes.MediaType

    MONARCH: PageAttributes.MediaType

    MONARCH_ENVELOPE: PageAttributes.MediaType

    NA_10X13_ENVELOPE: PageAttributes.MediaType

    NA_10X14_ENVELOPE: PageAttributes.MediaType

    NA_10X15_ENVELOPE: PageAttributes.MediaType

    NA_6X9_ENVELOPE: PageAttributes.MediaType

    NA_7X9_ENVELOPE: PageAttributes.MediaType

    NA_9X11_ENVELOPE: PageAttributes.MediaType

    NA_9X12_ENVELOPE: PageAttributes.MediaType

    NA_LEGAL: PageAttributes.MediaType

    NA_LETTER: PageAttributes.MediaType

    NA_NUMBER_10_ENVELOPE: PageAttributes.MediaType

    NA_NUMBER_11_ENVELOPE: PageAttributes.MediaType

    NA_NUMBER_12_ENVELOPE: PageAttributes.MediaType

    NA_NUMBER_14_ENVELOPE: PageAttributes.MediaType

    NA_NUMBER_9_ENVELOPE: PageAttributes.MediaType

    NOTE: PageAttributes.MediaType

    PERSONAL: PageAttributes.MediaType

    PERSONAL_ENVELOPE: PageAttributes.MediaType

    QUARTO: PageAttributes.MediaType

    STATEMENT: PageAttributes.MediaType

    TABLOID: PageAttributes.MediaType

    def hashCode(self) -> int: ...

    def toString(self) -> str: ...

  class OrientationRequestedType(AttributeValue):

    LANDSCAPE: PageAttributes.OrientationRequestedType

    PORTRAIT: PageAttributes.OrientationRequestedType

    def hashCode(self) -> int: ...

    def toString(self) -> str: ...

  class PrintQualityType(AttributeValue):

    DRAFT: PageAttributes.PrintQualityType

    HIGH: PageAttributes.PrintQualityType

    NORMAL: PageAttributes.PrintQualityType

    def hashCode(self) -> int: ...

    def toString(self) -> str: ...


class Paint:

  BITMASK: int

  OPAQUE: int

  TRANSLUCENT: int

  def createContext(self, arg0: ColorModel, arg1: Rectangle, arg2: Rectangle2D, arg3: AffineTransform, arg4: RenderingHints) -> PaintContext: ...

  def getTransparency(self) -> int: ...


class PaintContext:

  def dispose(self) -> None: ...

  def getColorModel(self) -> ColorModel: ...

  def getRaster(self, arg0: int, arg1: int, arg2: int, arg3: int) -> Raster: ...


class Panel(Container):

  def addNotify(self) -> None: ...

  @overload
  def getAccessibleContext(self) -> AccessibleContext: ...

  @overload
  def getAccessibleContext(self) -> AccessibleContext: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: LayoutManager): ...

  class AccessibleAWTPanel(Container.AccessibleAWTContainer):

    def getAccessibleRole(self) -> AccessibleRole: ...


class Point(Point2D):

  def equals(self, arg0: object) -> bool: ...

  def getLocation(self) -> Point: ...

  def getX(self) -> float: ...

  def getY(self) -> float: ...

  def move(self, arg0: int, arg1: int) -> None: ...

  @overload
  def setLocation(self, arg0: Point) -> None: ...

  @overload
  def setLocation(self, arg0: float, arg1: float) -> None: ...

  @overload
  def setLocation(self, arg0: int, arg1: int) -> None: ...

  def toString(self) -> str: ...

  def translate(self, arg0: int, arg1: int) -> None: ...

  @overload
  def __init__(self):
    self.x: int

    self.y: int

  @overload
  def __init__(self, arg0: Point): ...
  @overload
  def __init__(self, arg0: int, arg1: int): ...


class PointerInfo:

  def getDevice(self) -> GraphicsDevice: ...

  def getLocation(self) -> Point: ...


class Polygon:

  def addPoint(self, arg0: int, arg1: int) -> None: ...

  @overload
  def contains(self, arg0: Point) -> bool: ...

  @overload
  def contains(self, arg0: Point2D) -> bool: ...

  @overload
  def contains(self, arg0: Point2D) -> bool: ...

  @overload
  def contains(self, arg0: Rectangle2D) -> bool: ...

  @overload
  def contains(self, arg0: Rectangle2D) -> bool: ...

  @overload
  def contains(self, arg0: float, arg1: float) -> bool: ...

  @overload
  def contains(self, arg0: float, arg1: float) -> bool: ...

  @overload
  def contains(self, arg0: int, arg1: int) -> bool: ...

  @overload
  def contains(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool: ...

  @overload
  def contains(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool: ...

  def getBoundingBox(self) -> Rectangle: ...

  @overload
  def getBounds(self) -> Rectangle: ...

  @overload
  def getBounds(self) -> Rectangle: ...

  @overload
  def getBounds2D(self) -> Rectangle2D: ...

  @overload
  def getBounds2D(self) -> Rectangle2D: ...

  @overload
  def getPathIterator(self, arg0: AffineTransform) -> PathIterator: ...

  @overload
  def getPathIterator(self, arg0: AffineTransform) -> PathIterator: ...

  @overload
  def getPathIterator(self, arg0: AffineTransform, arg1: float) -> PathIterator: ...

  @overload
  def getPathIterator(self, arg0: AffineTransform, arg1: float) -> PathIterator: ...

  def inside(self, arg0: int, arg1: int) -> bool: ...

  @overload
  def intersects(self, arg0: Rectangle2D) -> bool: ...

  @overload
  def intersects(self, arg0: Rectangle2D) -> bool: ...

  @overload
  def intersects(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool: ...

  @overload
  def intersects(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool: ...

  def invalidate(self) -> None: ...

  def reset(self) -> None: ...

  def translate(self, arg0: int, arg1: int) -> None: ...

  @overload
  def __init__(self):
    self.npoints: int

    self.xpoints: list[int]

    self.ypoints: list[int]

  @overload
  def __init__(self, arg0: list[int], arg1: list[int], arg2: int): ...

  class PolygonPathIterator:

    SEG_CLOSE: int

    SEG_CUBICTO: int

    SEG_LINETO: int

    SEG_MOVETO: int

    SEG_QUADTO: int

    WIND_EVEN_ODD: int

    WIND_NON_ZERO: int

    @overload
    def currentSegment(self, arg0: list[float]) -> int: ...

    @overload
    def currentSegment(self, arg0: list[float]) -> int: ...

    @overload
    def currentSegment(self, arg0: list[float]) -> int: ...

    @overload
    def currentSegment(self, arg0: list[float]) -> int: ...

    @overload
    def getWindingRule(self) -> int: ...

    @overload
    def getWindingRule(self) -> int: ...

    @overload
    def isDone(self) -> bool: ...

    @overload
    def isDone(self) -> bool: ...

    @overload
    def next(self) -> None: ...

    @overload
    def next(self) -> None: ...

    def __init__(self, arg0: Polygon, arg1: AffineTransform): ...


class PopupMenu(Menu):

  def addNotify(self) -> None: ...

  def getAccessibleContext(self) -> AccessibleContext: ...

  def getParent(self) -> MenuContainer: ...

  def show(self, arg0: Component, arg1: int, arg2: int) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: str): ...

  class AccessibleAWTPopupMenu(Menu.AccessibleAWTMenu):

    def getAccessibleRole(self) -> AccessibleRole: ...


class PrintJob:

  def end(self) -> None: ...

  def finalize(self) -> None: ...

  def getGraphics(self) -> Graphics: ...

  def getPageDimension(self) -> Dimension: ...

  def getPageResolution(self) -> int: ...

  def lastPageFirst(self) -> bool: ...


class Queue: ...


class Rectangle(Rectangle2D):

  @overload
  def add(self, arg0: Point) -> None: ...

  @overload
  def add(self, arg0: Rectangle) -> None: ...

  @overload
  def add(self, arg0: int, arg1: int) -> None: ...

  @overload
  def contains(self, arg0: Point) -> bool: ...

  @overload
  def contains(self, arg0: Rectangle) -> bool: ...

  @overload
  def contains(self, arg0: Point2D) -> bool: ...

  @overload
  def contains(self, arg0: Rectangle2D) -> bool: ...

  @overload
  def contains(self, arg0: float, arg1: float) -> bool: ...

  @overload
  def contains(self, arg0: int, arg1: int) -> bool: ...

  @overload
  def contains(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool: ...

  @overload
  def contains(self, arg0: int, arg1: int, arg2: int, arg3: int) -> bool: ...

  def createIntersection(self, arg0: Rectangle2D) -> Rectangle2D: ...

  def createUnion(self, arg0: Rectangle2D) -> Rectangle2D: ...

  def equals(self, arg0: object) -> bool: ...

  @overload
  def getBounds(self) -> Rectangle: ...

  @overload
  def getBounds(self) -> Rectangle: ...

  @overload
  def getBounds2D(self) -> Rectangle2D: ...

  @overload
  def getBounds2D(self) -> Rectangle2D: ...

  def getHeight(self) -> float: ...

  def getLocation(self) -> Point: ...

  @overload
  def getPathIterator(self, arg0: AffineTransform) -> PathIterator: ...

  @overload
  def getPathIterator(self, arg0: AffineTransform, arg1: float) -> PathIterator: ...

  def getSize(self) -> Dimension: ...

  def getWidth(self) -> float: ...

  def getX(self) -> float: ...

  def getY(self) -> float: ...

  def grow(self, arg0: int, arg1: int) -> None: ...

  def inside(self, arg0: int, arg1: int) -> bool: ...

  def intersection(self, arg0: Rectangle) -> Rectangle: ...

  @overload
  def intersects(self, arg0: Rectangle) -> bool: ...

  @overload
  def intersects(self, arg0: Rectangle2D) -> bool: ...

  @overload
  def intersects(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool: ...

  def isEmpty(self) -> bool: ...

  def move(self, arg0: int, arg1: int) -> None: ...

  def outcode(self, arg0: float, arg1: float) -> int: ...

  def reshape(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...

  def resize(self, arg0: int, arg1: int) -> None: ...

  @overload
  def setBounds(self, arg0: Rectangle) -> None: ...

  @overload
  def setBounds(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...

  @overload
  def setLocation(self, arg0: Point) -> None: ...

  @overload
  def setLocation(self, arg0: int, arg1: int) -> None: ...

  def setRect(self, arg0: float, arg1: float, arg2: float, arg3: float) -> None: ...

  @overload
  def setSize(self, arg0: Dimension) -> None: ...

  @overload
  def setSize(self, arg0: int, arg1: int) -> None: ...

  def toString(self) -> str: ...

  def translate(self, arg0: int, arg1: int) -> None: ...

  def union(self, arg0: Rectangle) -> Rectangle: ...

  @overload
  def __init__(self):
    self.height: int

    self.width: int

    self.x: int

    self.y: int

  @overload
  def __init__(self, arg0: Dimension): ...
  @overload
  def __init__(self, arg0: Point): ...
  @overload
  def __init__(self, arg0: Rectangle): ...
  @overload
  def __init__(self, arg0: int, arg1: int): ...
  @overload
  def __init__(self, arg0: Point, arg1: Dimension): ...
  @overload
  def __init__(self, arg0: int, arg1: int, arg2: int, arg3: int): ...


class RenderingHints:

  KEY_ALPHA_INTERPOLATION: RenderingHints.Key

  KEY_ANTIALIASING: RenderingHints.Key

  KEY_COLOR_RENDERING: RenderingHints.Key

  KEY_DITHERING: RenderingHints.Key

  KEY_FRACTIONALMETRICS: RenderingHints.Key

  KEY_INTERPOLATION: RenderingHints.Key

  KEY_RENDERING: RenderingHints.Key

  KEY_RESOLUTION_VARIANT: RenderingHints.Key

  KEY_STROKE_CONTROL: RenderingHints.Key

  KEY_TEXT_ANTIALIASING: RenderingHints.Key

  KEY_TEXT_LCD_CONTRAST: RenderingHints.Key

  VALUE_ALPHA_INTERPOLATION_DEFAULT: object

  VALUE_ALPHA_INTERPOLATION_QUALITY: object

  VALUE_ALPHA_INTERPOLATION_SPEED: object

  VALUE_ANTIALIAS_DEFAULT: object

  VALUE_ANTIALIAS_OFF: object

  VALUE_ANTIALIAS_ON: object

  VALUE_COLOR_RENDER_DEFAULT: object

  VALUE_COLOR_RENDER_QUALITY: object

  VALUE_COLOR_RENDER_SPEED: object

  VALUE_DITHER_DEFAULT: object

  VALUE_DITHER_DISABLE: object

  VALUE_DITHER_ENABLE: object

  VALUE_FRACTIONALMETRICS_DEFAULT: object

  VALUE_FRACTIONALMETRICS_OFF: object

  VALUE_FRACTIONALMETRICS_ON: object

  VALUE_INTERPOLATION_BICUBIC: object

  VALUE_INTERPOLATION_BILINEAR: object

  VALUE_INTERPOLATION_NEAREST_NEIGHBOR: object

  VALUE_RENDER_DEFAULT: object

  VALUE_RENDER_QUALITY: object

  VALUE_RENDER_SPEED: object

  VALUE_RESOLUTION_VARIANT_BASE: object

  VALUE_RESOLUTION_VARIANT_DEFAULT: object

  VALUE_RESOLUTION_VARIANT_DPI_FIT: object

  VALUE_RESOLUTION_VARIANT_SIZE_FIT: object

  VALUE_STROKE_DEFAULT: object

  VALUE_STROKE_NORMALIZE: object

  VALUE_STROKE_PURE: object

  VALUE_TEXT_ANTIALIAS_DEFAULT: object

  VALUE_TEXT_ANTIALIAS_GASP: object

  VALUE_TEXT_ANTIALIAS_LCD_HBGR: object

  VALUE_TEXT_ANTIALIAS_LCD_HRGB: object

  VALUE_TEXT_ANTIALIAS_LCD_VBGR: object

  VALUE_TEXT_ANTIALIAS_LCD_VRGB: object

  VALUE_TEXT_ANTIALIAS_OFF: object

  VALUE_TEXT_ANTIALIAS_ON: object

  def add(self, arg0: RenderingHints) -> None: ...

  @overload
  def clear(self) -> None: ...

  @overload
  def clear(self) -> None: ...

  def clone(self) -> object: ...

  def compute(self, arg0: object, arg1: BiFunction[K, V, V]) -> object: ...

  def computeIfAbsent(self, arg0: object, arg1: Function[K, V]) -> object: ...

  def computeIfPresent(self, arg0: object, arg1: BiFunction[K, V, V]) -> object: ...

  @overload
  def containsKey(self, arg0: object) -> bool: ...

  @overload
  def containsKey(self, arg0: object) -> bool: ...

  @overload
  def containsValue(self, arg0: object) -> bool: ...

  @overload
  def containsValue(self, arg0: object) -> bool: ...

  @overload
  def entrySet(self) -> Set[Map.Entry[object, object]]: ...

  @overload
  def entrySet(self) -> Set[Map.Entry[K, V]]: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  def forEach(self, arg0: BiConsumer[K, V]) -> None: ...

  @overload
  def get(self, arg0: object) -> object: ...

  @overload
  def get(self, arg0: object) -> object: ...

  def getOrDefault(self, arg0: object, arg1: object) -> object: ...

  @overload
  def hashCode(self) -> int: ...

  @overload
  def hashCode(self) -> int: ...

  @overload
  def isEmpty(self) -> bool: ...

  @overload
  def isEmpty(self) -> bool: ...

  @overload
  def keySet(self) -> Set[object]: ...

  @overload
  def keySet(self) -> Set[K]: ...

  def merge(self, arg0: object, arg1: object, arg2: BiFunction[V, V, V]) -> object: ...

  @overload
  def put(self, arg0: object, arg1: object) -> object: ...

  @overload
  def put(self, arg0: object, arg1: object) -> object: ...

  @overload
  def putAll(self, arg0: Map[Any, Any]) -> None: ...

  @overload
  def putAll(self, arg0: Map[K, V]) -> None: ...

  def putIfAbsent(self, arg0: object, arg1: object) -> object: ...

  @overload
  def remove(self, arg0: object) -> object: ...

  @overload
  def remove(self, arg0: object) -> object: ...

  @overload
  def remove(self, arg0: object, arg1: object) -> bool: ...

  @overload
  def replace(self, arg0: object, arg1: object) -> object: ...

  @overload
  def replace(self, arg0: object, arg1: object, arg2: object) -> bool: ...

  def replaceAll(self, arg0: BiFunction[K, V, V]) -> None: ...

  @overload
  def size(self) -> int: ...

  @overload
  def size(self) -> int: ...

  def toString(self) -> str: ...

  @overload
  def values(self) -> Collection[object]: ...

  @overload
  def values(self) -> Collection[V]: ...

  @staticmethod
  def copyOf(arg0: Map[K, V]) -> Map[K, V]: ...

  @staticmethod
  def entry(arg0: object, arg1: object) -> Map.Entry: ...

  @staticmethod
  @overload
  def of() -> Map[K, V]: ...

  @staticmethod
  @overload
  def of(arg0: object, arg1: object) -> Map[K, V]: ...

  @staticmethod
  @overload
  def of(arg0: object, arg1: object, arg2: object, arg3: object) -> Map[K, V]: ...

  @staticmethod
  @overload
  def of(arg0: object, arg1: object, arg2: object, arg3: object, arg4: object, arg5: object) -> Map[K, V]: ...

  @staticmethod
  @overload
  def of(arg0: object, arg1: object, arg2: object, arg3: object, arg4: object, arg5: object, arg6: object, arg7: object) -> Map[K, V]: ...

  @staticmethod
  @overload
  def of(arg0: object, arg1: object, arg2: object, arg3: object, arg4: object, arg5: object, arg6: object, arg7: object, arg8: object, arg9: object) -> Map[K, V]: ...

  @staticmethod
  @overload
  def of(arg0: object, arg1: object, arg2: object, arg3: object, arg4: object, arg5: object, arg6: object, arg7: object, arg8: object, arg9: object, arg10: object, arg11: object) -> Map[K, V]: ...

  @staticmethod
  @overload
  def of(arg0: object, arg1: object, arg2: object, arg3: object, arg4: object, arg5: object, arg6: object, arg7: object, arg8: object, arg9: object, arg10: object, arg11: object, arg12: object, arg13: object) -> Map[K, V]: ...

  @staticmethod
  @overload
  def of(arg0: object, arg1: object, arg2: object, arg3: object, arg4: object, arg5: object, arg6: object, arg7: object, arg8: object, arg9: object, arg10: object, arg11: object, arg12: object, arg13: object, arg14: object, arg15: object) -> Map[K, V]: ...

  @staticmethod
  @overload
  def of(arg0: object, arg1: object, arg2: object, arg3: object, arg4: object, arg5: object, arg6: object, arg7: object, arg8: object, arg9: object, arg10: object, arg11: object, arg12: object, arg13: object, arg14: object, arg15: object, arg16: object, arg17: object) -> Map[K, V]: ...

  @staticmethod
  @overload
  def of(arg0: object, arg1: object, arg2: object, arg3: object, arg4: object, arg5: object, arg6: object, arg7: object, arg8: object, arg9: object, arg10: object, arg11: object, arg12: object, arg13: object, arg14: object, arg15: object, arg16: object, arg17: object, arg18: object, arg19: object) -> Map[K, V]: ...

  @staticmethod
  def ofEntries(arg0: list[Map.Entry]) -> Map[K, V]: ...

  @overload
  def __init__(self, arg0: Map[RenderingHints.Key, Any]): ...
  @overload
  def __init__(self, arg0: RenderingHints.Key, arg1: object): ...

  class Key:

    def equals(self, arg0: object) -> bool: ...

    def hashCode(self) -> int: ...

    def isCompatibleValue(self, arg0: object) -> bool: ...


class ScrollPane(Container):

  SCROLLBARS_ALWAYS: int

  SCROLLBARS_AS_NEEDED: int

  SCROLLBARS_NEVER: int

  def addNotify(self) -> None: ...

  def doLayout(self) -> None: ...

  @overload
  def getAccessibleContext(self) -> AccessibleContext: ...

  @overload
  def getAccessibleContext(self) -> AccessibleContext: ...

  def getHAdjustable(self) -> Adjustable: ...

  def getHScrollbarHeight(self) -> int: ...

  def getScrollPosition(self) -> Point: ...

  def getScrollbarDisplayPolicy(self) -> int: ...

  def getVAdjustable(self) -> Adjustable: ...

  def getVScrollbarWidth(self) -> int: ...

  def getViewportSize(self) -> Dimension: ...

  def isWheelScrollingEnabled(self) -> bool: ...

  def layout(self) -> None: ...

  def paramString(self) -> str: ...

  def printComponents(self, arg0: Graphics) -> None: ...

  def setLayout(self, arg0: LayoutManager) -> None: ...

  @overload
  def setScrollPosition(self, arg0: Point) -> None: ...

  @overload
  def setScrollPosition(self, arg0: int, arg1: int) -> None: ...

  def setWheelScrollingEnabled(self, arg0: bool) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: int): ...

  class PeerFixer:

    @overload
    def adjustmentValueChanged(self, arg0: AdjustmentEvent) -> None: ...

    @overload
    def adjustmentValueChanged(self, arg0: AdjustmentEvent) -> None: ...

  class AccessibleAWTScrollPane(Container.AccessibleAWTContainer):

    def getAccessibleRole(self) -> AccessibleRole: ...


class ScrollPaneAdjustable:

  HORIZONTAL: int

  NO_ORIENTATION: int

  VERTICAL: int

  @overload
  def addAdjustmentListener(self, arg0: AdjustmentListener) -> None: ...

  @overload
  def addAdjustmentListener(self, arg0: AdjustmentListener) -> None: ...

  def getAdjustmentListeners(self) -> list[AdjustmentListener]: ...

  @overload
  def getBlockIncrement(self) -> int: ...

  @overload
  def getBlockIncrement(self) -> int: ...

  @overload
  def getMaximum(self) -> int: ...

  @overload
  def getMaximum(self) -> int: ...

  @overload
  def getMinimum(self) -> int: ...

  @overload
  def getMinimum(self) -> int: ...

  @overload
  def getOrientation(self) -> int: ...

  @overload
  def getOrientation(self) -> int: ...

  @overload
  def getUnitIncrement(self) -> int: ...

  @overload
  def getUnitIncrement(self) -> int: ...

  @overload
  def getValue(self) -> int: ...

  @overload
  def getValue(self) -> int: ...

  def getValueIsAdjusting(self) -> bool: ...

  @overload
  def getVisibleAmount(self) -> int: ...

  @overload
  def getVisibleAmount(self) -> int: ...

  def paramString(self) -> str: ...

  @overload
  def removeAdjustmentListener(self, arg0: AdjustmentListener) -> None: ...

  @overload
  def removeAdjustmentListener(self, arg0: AdjustmentListener) -> None: ...

  @overload
  def setBlockIncrement(self, arg0: int) -> None: ...

  @overload
  def setBlockIncrement(self, arg0: int) -> None: ...

  @overload
  def setMaximum(self, arg0: int) -> None: ...

  @overload
  def setMaximum(self, arg0: int) -> None: ...

  @overload
  def setMinimum(self, arg0: int) -> None: ...

  @overload
  def setMinimum(self, arg0: int) -> None: ...

  @overload
  def setUnitIncrement(self, arg0: int) -> None: ...

  @overload
  def setUnitIncrement(self, arg0: int) -> None: ...

  @overload
  def setValue(self, arg0: int) -> None: ...

  @overload
  def setValue(self, arg0: int) -> None: ...

  def setValueIsAdjusting(self, arg0: bool) -> None: ...

  @overload
  def setVisibleAmount(self, arg0: int) -> None: ...

  @overload
  def setVisibleAmount(self, arg0: int) -> None: ...

  def toString(self) -> str: ...


class Scrollbar(Component):

  HORIZONTAL: int

  NO_ORIENTATION: int

  VERTICAL: int

  @overload
  def addAdjustmentListener(self, arg0: AdjustmentListener) -> None: ...

  @overload
  def addAdjustmentListener(self, arg0: AdjustmentListener) -> None: ...

  def addNotify(self) -> None: ...

  @overload
  def getAccessibleContext(self) -> AccessibleContext: ...

  @overload
  def getAccessibleContext(self) -> AccessibleContext: ...

  def getAdjustmentListeners(self) -> list[AdjustmentListener]: ...

  @overload
  def getBlockIncrement(self) -> int: ...

  @overload
  def getBlockIncrement(self) -> int: ...

  def getLineIncrement(self) -> int: ...

  def getListeners(self, arg0: Class[T]) -> list[EventListener]: ...

  @overload
  def getMaximum(self) -> int: ...

  @overload
  def getMaximum(self) -> int: ...

  @overload
  def getMinimum(self) -> int: ...

  @overload
  def getMinimum(self) -> int: ...

  @overload
  def getOrientation(self) -> int: ...

  @overload
  def getOrientation(self) -> int: ...

  def getPageIncrement(self) -> int: ...

  @overload
  def getUnitIncrement(self) -> int: ...

  @overload
  def getUnitIncrement(self) -> int: ...

  @overload
  def getValue(self) -> int: ...

  @overload
  def getValue(self) -> int: ...

  def getValueIsAdjusting(self) -> bool: ...

  def getVisible(self) -> int: ...

  @overload
  def getVisibleAmount(self) -> int: ...

  @overload
  def getVisibleAmount(self) -> int: ...

  @overload
  def removeAdjustmentListener(self, arg0: AdjustmentListener) -> None: ...

  @overload
  def removeAdjustmentListener(self, arg0: AdjustmentListener) -> None: ...

  @overload
  def setBlockIncrement(self, arg0: int) -> None: ...

  @overload
  def setBlockIncrement(self, arg0: int) -> None: ...

  def setLineIncrement(self, arg0: int) -> None: ...

  @overload
  def setMaximum(self, arg0: int) -> None: ...

  @overload
  def setMaximum(self, arg0: int) -> None: ...

  @overload
  def setMinimum(self, arg0: int) -> None: ...

  @overload
  def setMinimum(self, arg0: int) -> None: ...

  def setOrientation(self, arg0: int) -> None: ...

  def setPageIncrement(self, arg0: int) -> None: ...

  @overload
  def setUnitIncrement(self, arg0: int) -> None: ...

  @overload
  def setUnitIncrement(self, arg0: int) -> None: ...

  @overload
  def setValue(self, arg0: int) -> None: ...

  @overload
  def setValue(self, arg0: int) -> None: ...

  def setValueIsAdjusting(self, arg0: bool) -> None: ...

  def setValues(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...

  @overload
  def setVisibleAmount(self, arg0: int) -> None: ...

  @overload
  def setVisibleAmount(self, arg0: int) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: int): ...
  @overload
  def __init__(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int): ...

  class AccessibleAWTScrollBar(Component.AccessibleAWTComponent):

    def getAccessibleRole(self) -> AccessibleRole: ...

    def getAccessibleStateSet(self) -> AccessibleStateSet: ...

    def getAccessibleValue(self) -> AccessibleValue: ...

    @overload
    def getCurrentAccessibleValue(self) -> Number: ...

    @overload
    def getCurrentAccessibleValue(self) -> Number: ...

    @overload
    def getMaximumAccessibleValue(self) -> Number: ...

    @overload
    def getMaximumAccessibleValue(self) -> Number: ...

    @overload
    def getMinimumAccessibleValue(self) -> Number: ...

    @overload
    def getMinimumAccessibleValue(self) -> Number: ...

    @overload
    def setCurrentAccessibleValue(self, arg0: Number) -> bool: ...

    @overload
    def setCurrentAccessibleValue(self, arg0: Number) -> bool: ...


class SecondaryLoop:

  def enter(self) -> bool: ...

  def exit(self) -> bool: ...


class Shape:

  @overload
  def contains(self, arg0: Point2D) -> bool: ...

  @overload
  def contains(self, arg0: Rectangle2D) -> bool: ...

  @overload
  def contains(self, arg0: float, arg1: float) -> bool: ...

  @overload
  def contains(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool: ...

  def getBounds(self) -> Rectangle: ...

  def getBounds2D(self) -> Rectangle2D: ...

  @overload
  def getPathIterator(self, arg0: AffineTransform) -> PathIterator: ...

  @overload
  def getPathIterator(self, arg0: AffineTransform, arg1: float) -> PathIterator: ...

  @overload
  def intersects(self, arg0: Rectangle2D) -> bool: ...

  @overload
  def intersects(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool: ...


class Stroke:

  def createStrokedShape(self, arg0: Shape) -> Shape: ...


class Taskbar:

  def getIconImage(self) -> Image: ...

  def getMenu(self) -> PopupMenu: ...

  def isSupported(self, arg0: Taskbar.Feature) -> bool: ...

  def requestUserAttention(self, arg0: bool, arg1: bool) -> None: ...

  def requestWindowUserAttention(self, arg0: Window) -> None: ...

  def setIconBadge(self, arg0: str) -> None: ...

  def setIconImage(self, arg0: Image) -> None: ...

  def setMenu(self, arg0: PopupMenu) -> None: ...

  def setProgressValue(self, arg0: int) -> None: ...

  def setWindowIconBadge(self, arg0: Window, arg1: Image) -> None: ...

  def setWindowProgressState(self, arg0: Window, arg1: Taskbar.State) -> None: ...

  def setWindowProgressValue(self, arg0: Window, arg1: int) -> None: ...

  @staticmethod
  def getTaskbar() -> Taskbar: ...

  @staticmethod
  def isTaskbarSupported() -> bool: ...

  class Feature(Enum):

    ICON_BADGE_IMAGE_WINDOW: Taskbar.Feature

    ICON_BADGE_NUMBER: Taskbar.Feature

    ICON_BADGE_TEXT: Taskbar.Feature

    ICON_IMAGE: Taskbar.Feature

    MENU: Taskbar.Feature

    PROGRESS_STATE_WINDOW: Taskbar.Feature

    PROGRESS_VALUE: Taskbar.Feature

    PROGRESS_VALUE_WINDOW: Taskbar.Feature

    USER_ATTENTION: Taskbar.Feature

    USER_ATTENTION_WINDOW: Taskbar.Feature

    @staticmethod
    def valueOf(arg0: str) -> Taskbar.Feature: ...

    @staticmethod
    def values() -> list[Taskbar.Feature]: ...

  class State(Enum):

    ERROR: Taskbar.State

    INDETERMINATE: Taskbar.State

    NORMAL: Taskbar.State

    OFF: Taskbar.State

    PAUSED: Taskbar.State

    @staticmethod
    def valueOf(arg0: str) -> Taskbar.State: ...

    @staticmethod
    def values() -> list[Taskbar.State]: ...


class TextArea(TextComponent):

  SCROLLBARS_BOTH: int

  SCROLLBARS_HORIZONTAL_ONLY: int

  SCROLLBARS_NONE: int

  SCROLLBARS_VERTICAL_ONLY: int

  def addNotify(self) -> None: ...

  def append(self, arg0: str) -> None: ...

  def appendText(self, arg0: str) -> None: ...

  def getAccessibleContext(self) -> AccessibleContext: ...

  def getColumns(self) -> int: ...

  @overload
  def getMinimumSize(self) -> Dimension: ...

  @overload
  def getMinimumSize(self, arg0: int, arg1: int) -> Dimension: ...

  @overload
  def getPreferredSize(self) -> Dimension: ...

  @overload
  def getPreferredSize(self, arg0: int, arg1: int) -> Dimension: ...

  def getRows(self) -> int: ...

  def getScrollbarVisibility(self) -> int: ...

  def insert(self, arg0: str, arg1: int) -> None: ...

  def insertText(self, arg0: str, arg1: int) -> None: ...

  @overload
  def minimumSize(self) -> Dimension: ...

  @overload
  def minimumSize(self, arg0: int, arg1: int) -> Dimension: ...

  @overload
  def preferredSize(self) -> Dimension: ...

  @overload
  def preferredSize(self, arg0: int, arg1: int) -> Dimension: ...

  def replaceRange(self, arg0: str, arg1: int, arg2: int) -> None: ...

  def replaceText(self, arg0: str, arg1: int, arg2: int) -> None: ...

  def setColumns(self, arg0: int) -> None: ...

  def setRows(self, arg0: int) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: str): ...
  @overload
  def __init__(self, arg0: int, arg1: int): ...
  @overload
  def __init__(self, arg0: str, arg1: int, arg2: int): ...
  @overload
  def __init__(self, arg0: str, arg1: int, arg2: int, arg3: int): ...

  class AccessibleAWTTextArea(TextComponent.AccessibleAWTTextComponent):

    def getAccessibleStateSet(self) -> AccessibleStateSet: ...


class TextComponent(Component):

  def addNotify(self) -> None: ...

  def addTextListener(self, arg0: TextListener) -> None: ...

  def enableInputMethods(self, arg0: bool) -> None: ...

  @overload
  def getAccessibleContext(self) -> AccessibleContext: ...

  @overload
  def getAccessibleContext(self) -> AccessibleContext: ...

  def getBackground(self) -> Color: ...

  def getCaretPosition(self) -> int: ...

  def getInputMethodRequests(self) -> InputMethodRequests: ...

  def getListeners(self, arg0: Class[T]) -> list[EventListener]: ...

  def getSelectedText(self) -> str: ...

  def getSelectionEnd(self) -> int: ...

  def getSelectionStart(self) -> int: ...

  def getText(self) -> str: ...

  def getTextListeners(self) -> list[TextListener]: ...

  def isEditable(self) -> bool: ...

  def removeNotify(self) -> None: ...

  def removeTextListener(self, arg0: TextListener) -> None: ...

  def select(self, arg0: int, arg1: int) -> None: ...

  def selectAll(self) -> None: ...

  def setBackground(self, arg0: Color) -> None: ...

  def setCaretPosition(self, arg0: int) -> None: ...

  def setEditable(self, arg0: bool) -> None: ...

  def setSelectionEnd(self, arg0: int) -> None: ...

  def setSelectionStart(self, arg0: int) -> None: ...

  def setText(self, arg0: str) -> None: ...

  class AccessibleAWTTextComponent(Component.AccessibleAWTComponent):

    CHARACTER: int

    SENTENCE: int

    WORD: int

    def getAccessibleRole(self) -> AccessibleRole: ...

    def getAccessibleStateSet(self) -> AccessibleStateSet: ...

    def getAccessibleText(self) -> AccessibleText: ...

    @overload
    def getAfterIndex(self, arg0: int, arg1: int) -> str: ...

    @overload
    def getAfterIndex(self, arg0: int, arg1: int) -> str: ...

    @overload
    def getAtIndex(self, arg0: int, arg1: int) -> str: ...

    @overload
    def getAtIndex(self, arg0: int, arg1: int) -> str: ...

    @overload
    def getBeforeIndex(self, arg0: int, arg1: int) -> str: ...

    @overload
    def getBeforeIndex(self, arg0: int, arg1: int) -> str: ...

    @overload
    def getCaretPosition(self) -> int: ...

    @overload
    def getCaretPosition(self) -> int: ...

    @overload
    def getCharCount(self) -> int: ...

    @overload
    def getCharCount(self) -> int: ...

    @overload
    def getCharacterAttribute(self, arg0: int) -> AttributeSet: ...

    @overload
    def getCharacterAttribute(self, arg0: int) -> AttributeSet: ...

    @overload
    def getCharacterBounds(self, arg0: int) -> Rectangle: ...

    @overload
    def getCharacterBounds(self, arg0: int) -> Rectangle: ...

    @overload
    def getIndexAtPoint(self, arg0: Point) -> int: ...

    @overload
    def getIndexAtPoint(self, arg0: Point) -> int: ...

    @overload
    def getSelectedText(self) -> str: ...

    @overload
    def getSelectedText(self) -> str: ...

    @overload
    def getSelectionEnd(self) -> int: ...

    @overload
    def getSelectionEnd(self) -> int: ...

    @overload
    def getSelectionStart(self) -> int: ...

    @overload
    def getSelectionStart(self) -> int: ...

    @overload
    def textValueChanged(self, arg0: TextEvent) -> None: ...

    @overload
    def textValueChanged(self, arg0: TextEvent) -> None: ...

    def __init__(self, arg0: TextComponent): ...


class TextField(TextComponent):

  def addActionListener(self, arg0: ActionListener) -> None: ...

  def addNotify(self) -> None: ...

  def echoCharIsSet(self) -> bool: ...

  def getAccessibleContext(self) -> AccessibleContext: ...

  def getActionListeners(self) -> list[ActionListener]: ...

  def getColumns(self) -> int: ...

  def getEchoChar(self) -> str: ...

  def getListeners(self, arg0: Class[T]) -> list[EventListener]: ...

  @overload
  def getMinimumSize(self) -> Dimension: ...

  @overload
  def getMinimumSize(self, arg0: int) -> Dimension: ...

  @overload
  def getPreferredSize(self) -> Dimension: ...

  @overload
  def getPreferredSize(self, arg0: int) -> Dimension: ...

  @overload
  def minimumSize(self) -> Dimension: ...

  @overload
  def minimumSize(self, arg0: int) -> Dimension: ...

  @overload
  def preferredSize(self) -> Dimension: ...

  @overload
  def preferredSize(self, arg0: int) -> Dimension: ...

  def removeActionListener(self, arg0: ActionListener) -> None: ...

  def setColumns(self, arg0: int) -> None: ...

  def setEchoChar(self, arg0: str) -> None: ...

  def setEchoCharacter(self, arg0: str) -> None: ...

  def setText(self, arg0: str) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: int): ...
  @overload
  def __init__(self, arg0: str): ...
  @overload
  def __init__(self, arg0: str, arg1: int): ...

  class AccessibleAWTTextField(TextComponent.AccessibleAWTTextComponent):

    def getAccessibleStateSet(self) -> AccessibleStateSet: ...


class Toolkit:

  def addAWTEventListener(self, arg0: AWTEventListener, arg1: int) -> None: ...

  def addPropertyChangeListener(self, arg0: str, arg1: PropertyChangeListener) -> None: ...

  def areExtraMouseButtonsEnabled(self) -> bool: ...

  def beep(self) -> None: ...

  def checkImage(self, arg0: Image, arg1: int, arg2: int, arg3: ImageObserver) -> int: ...

  def createCustomCursor(self, arg0: Image, arg1: Point, arg2: str) -> Cursor: ...

  def createDragGestureRecognizer(self, arg0: Class[T], arg1: DragSource, arg2: Component, arg3: int, arg4: DragGestureListener) -> T: ...

  @overload
  def createImage(self, arg0: list[int]) -> Image: ...

  @overload
  def createImage(self, arg0: ImageProducer) -> Image: ...

  @overload
  def createImage(self, arg0: str) -> Image: ...

  @overload
  def createImage(self, arg0: URL) -> Image: ...

  @overload
  def createImage(self, arg0: list[int], arg1: int, arg2: int) -> Image: ...

  @overload
  def getAWTEventListeners(self) -> list[AWTEventListener]: ...

  @overload
  def getAWTEventListeners(self, arg0: int) -> list[AWTEventListener]: ...

  def getBestCursorSize(self, arg0: int, arg1: int) -> Dimension: ...

  def getColorModel(self) -> ColorModel: ...

  def getDesktopProperty(self, arg0: str) -> object: ...

  def getFontList(self) -> list[str]: ...

  def getFontMetrics(self, arg0: Font) -> FontMetrics: ...

  @overload
  def getImage(self, arg0: str) -> Image: ...

  @overload
  def getImage(self, arg0: URL) -> Image: ...

  def getLockingKeyState(self, arg0: int) -> bool: ...

  def getMaximumCursorColors(self) -> int: ...

  def getMenuShortcutKeyMask(self) -> int: ...

  def getMenuShortcutKeyMaskEx(self) -> int: ...

  @overload
  def getPrintJob(self, arg0: Frame, arg1: str, arg2: Properties) -> PrintJob: ...

  @overload
  def getPrintJob(self, arg0: Frame, arg1: str, arg2: JobAttributes, arg3: PageAttributes) -> PrintJob: ...

  @overload
  def getPropertyChangeListeners(self) -> list[PropertyChangeListener]: ...

  @overload
  def getPropertyChangeListeners(self, arg0: str) -> list[PropertyChangeListener]: ...

  def getScreenInsets(self, arg0: GraphicsConfiguration) -> Insets: ...

  def getScreenResolution(self) -> int: ...

  def getScreenSize(self) -> Dimension: ...

  def getSystemClipboard(self) -> Clipboard: ...

  def getSystemEventQueue(self) -> EventQueue: ...

  def getSystemSelection(self) -> Clipboard: ...

  def isAlwaysOnTopSupported(self) -> bool: ...

  def isDynamicLayoutActive(self) -> bool: ...

  def isFrameStateSupported(self, arg0: int) -> bool: ...

  def isModalExclusionTypeSupported(self, arg0: Dialog.ModalExclusionType) -> bool: ...

  def isModalityTypeSupported(self, arg0: Dialog.ModalityType) -> bool: ...

  def mapInputMethodHighlight(self, arg0: InputMethodHighlight) -> Map[TextAttribute, Any]: ...

  def prepareImage(self, arg0: Image, arg1: int, arg2: int, arg3: ImageObserver) -> bool: ...

  def removeAWTEventListener(self, arg0: AWTEventListener) -> None: ...

  def removePropertyChangeListener(self, arg0: str, arg1: PropertyChangeListener) -> None: ...

  def setDynamicLayout(self, arg0: bool) -> None: ...

  def setLockingKeyState(self, arg0: int, arg1: bool) -> None: ...

  def sync(self) -> None: ...

  @staticmethod
  def getDefaultToolkit() -> Toolkit: ...

  @staticmethod
  def getProperty(arg0: str, arg1: str) -> str: ...

  class SelectiveAWTEventListener:

    @overload
    def eventDispatched(self, arg0: AWTEvent) -> None: ...

    @overload
    def eventDispatched(self, arg0: AWTEvent) -> None: ...

    def getCalls(self) -> list[int]: ...

    def getEventMask(self) -> int: ...

    def getListener(self) -> AWTEventListener: ...

    def orEventMasks(self, arg0: int) -> None: ...

  class ToolkitEventMulticaster(AWTEventMulticaster):

    @overload
    def eventDispatched(self, arg0: AWTEvent) -> None: ...

    @overload
    def eventDispatched(self, arg0: AWTEvent) -> None: ...

  class DesktopPropertyChangeSupport(PropertyChangeSupport):

    @overload
    def addPropertyChangeListener(self, arg0: PropertyChangeListener) -> None: ...

    @overload
    def addPropertyChangeListener(self, arg0: str, arg1: PropertyChangeListener) -> None: ...

    def firePropertyChange(self, arg0: PropertyChangeEvent) -> None: ...

    @overload
    def getPropertyChangeListeners(self) -> list[PropertyChangeListener]: ...

    @overload
    def getPropertyChangeListeners(self, arg0: str) -> list[PropertyChangeListener]: ...

    @overload
    def removePropertyChangeListener(self, arg0: PropertyChangeListener) -> None: ...

    @overload
    def removePropertyChangeListener(self, arg0: str, arg1: PropertyChangeListener) -> None: ...

    def __init__(self, arg0: object): ...


class Transparency:

  BITMASK: int

  OPAQUE: int

  TRANSLUCENT: int

  def getTransparency(self) -> int: ...


class VKCollection:

  def findCode(self, arg0: str) -> Integer: ...

  def findName(self, arg0: Integer) -> str: ...

  def put(self, arg0: str, arg1: Integer) -> None: ...

  def __init__(self): ...


class Window(Container):

  def addNotify(self) -> None: ...

  @overload
  def addPropertyChangeListener(self, arg0: PropertyChangeListener) -> None: ...

  @overload
  def addPropertyChangeListener(self, arg0: str, arg1: PropertyChangeListener) -> None: ...

  def addWindowFocusListener(self, arg0: WindowFocusListener) -> None: ...

  def addWindowListener(self, arg0: WindowListener) -> None: ...

  def addWindowStateListener(self, arg0: WindowStateListener) -> None: ...

  @overload
  def applyResourceBundle(self, arg0: str) -> None: ...

  @overload
  def applyResourceBundle(self, arg0: ResourceBundle) -> None: ...

  @overload
  def createBufferStrategy(self, arg0: int) -> None: ...

  @overload
  def createBufferStrategy(self, arg0: int, arg1: BufferCapabilities) -> None: ...

  def dispose(self) -> None: ...

  @overload
  def getAccessibleContext(self) -> AccessibleContext: ...

  @overload
  def getAccessibleContext(self) -> AccessibleContext: ...

  def getBackground(self) -> Color: ...

  def getBufferStrategy(self) -> BufferStrategy: ...

  def getFocusCycleRootAncestor(self) -> Container: ...

  def getFocusOwner(self) -> Component: ...

  def getFocusTraversalKeys(self, arg0: int) -> Set[AWTKeyStroke]: ...

  def getFocusableWindowState(self) -> bool: ...

  def getIconImages(self) -> List[Image]: ...

  def getInputContext(self) -> InputContext: ...

  def getListeners(self, arg0: Class[T]) -> list[EventListener]: ...

  def getLocale(self) -> Locale: ...

  def getModalExclusionType(self) -> Dialog.ModalExclusionType: ...

  def getMostRecentFocusOwner(self) -> Component: ...

  def getOpacity(self) -> float: ...

  def getOwnedWindows(self) -> list[Window]: ...

  def getOwner(self) -> Window: ...

  def getShape(self) -> Shape: ...

  def getToolkit(self) -> Toolkit: ...

  def getType(self) -> Window.Type: ...

  def getWarningString(self) -> str: ...

  def getWindowFocusListeners(self) -> list[WindowFocusListener]: ...

  def getWindowListeners(self) -> list[WindowListener]: ...

  def getWindowStateListeners(self) -> list[WindowStateListener]: ...

  def hide(self) -> None: ...

  def isActive(self) -> bool: ...

  def isAlwaysOnTop(self) -> bool: ...

  def isAlwaysOnTopSupported(self) -> bool: ...

  def isAutoRequestFocus(self) -> bool: ...

  def isFocusCycleRoot(self) -> bool: ...

  def isFocusableWindow(self) -> bool: ...

  def isFocused(self) -> bool: ...

  def isLocationByPlatform(self) -> bool: ...

  def isOpaque(self) -> bool: ...

  def isShowing(self) -> bool: ...

  def isValidateRoot(self) -> bool: ...

  def pack(self) -> None: ...

  def paint(self, arg0: Graphics) -> None: ...

  def postEvent(self, arg0: Event) -> bool: ...

  def removeNotify(self) -> None: ...

  def removeWindowFocusListener(self, arg0: WindowFocusListener) -> None: ...

  def removeWindowListener(self, arg0: WindowListener) -> None: ...

  def removeWindowStateListener(self, arg0: WindowStateListener) -> None: ...

  def reshape(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...

  def setAlwaysOnTop(self, arg0: bool) -> None: ...

  def setAutoRequestFocus(self, arg0: bool) -> None: ...

  def setBackground(self, arg0: Color) -> None: ...

  @overload
  def setBounds(self, arg0: Rectangle) -> None: ...

  @overload
  def setBounds(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...

  def setCursor(self, arg0: Cursor) -> None: ...

  def setFocusCycleRoot(self, arg0: bool) -> None: ...

  def setFocusableWindowState(self, arg0: bool) -> None: ...

  def setIconImage(self, arg0: Image) -> None: ...

  def setIconImages(self, arg0: List[Image]) -> None: ...

  @overload
  def setLocation(self, arg0: Point) -> None: ...

  @overload
  def setLocation(self, arg0: int, arg1: int) -> None: ...

  def setLocationByPlatform(self, arg0: bool) -> None: ...

  def setLocationRelativeTo(self, arg0: Component) -> None: ...

  def setMinimumSize(self, arg0: Dimension) -> None: ...

  def setModalExclusionType(self, arg0: Dialog.ModalExclusionType) -> None: ...

  def setOpacity(self, arg0: float) -> None: ...

  def setShape(self, arg0: Shape) -> None: ...

  @overload
  def setSize(self, arg0: Dimension) -> None: ...

  @overload
  def setSize(self, arg0: int, arg1: int) -> None: ...

  def setType(self, arg0: Window.Type) -> None: ...

  def setVisible(self, arg0: bool) -> None: ...

  def show(self) -> None: ...

  def toBack(self) -> None: ...

  def toFront(self) -> None: ...

  @staticmethod
  def getOwnerlessWindows() -> list[Window]: ...

  @staticmethod
  def getWindows() -> list[Window]: ...

  @overload
  def __init__(self, arg0: Frame): ...
  @overload
  def __init__(self, arg0: Window): ...
  @overload
  def __init__(self, arg0: Window, arg1: GraphicsConfiguration): ...

  class WindowDisposerRecord:

    @overload
    def dispose(self) -> None: ...

    @overload
    def dispose(self) -> None: ...

    def updateOwner(self) -> None: ...

  class Type(Enum):

    NORMAL: Window.Type

    POPUP: Window.Type

    UTILITY: Window.Type

    @staticmethod
    def valueOf(arg0: str) -> Window.Type: ...

    @staticmethod
    def values() -> list[Window.Type]: ...

  class AccessibleAWTWindow(Container.AccessibleAWTContainer):

    def getAccessibleRole(self) -> AccessibleRole: ...

    def getAccessibleStateSet(self) -> AccessibleStateSet: ...

