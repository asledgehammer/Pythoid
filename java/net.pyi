from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.io import IOException, InputStream, OutputStream
from java.lang import Class, Enum, Exception, ClassLoader
from java.net.spi import InetAddressResolver
from java.nio.channels import DatagramChannel, ServerSocketChannel, SocketChannel
from java.security import Permission, PermissionCollection, SecureClassLoader
from java.util import Set, List, Enumeration, Map
from java.util.stream import Stream

T = TypeVar('T', default=Any)

class ConnectException(SocketException):

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: str): ...


class ContentHandler:

  @overload
  def getContent(self, arg0: URLConnection) -> object: ...

  @overload
  def getContent(self, arg0: URLConnection, arg1: list[Class]) -> object: ...

  def __init__(self): ...


class ContentHandlerFactory:

  def createContentHandler(self, arg0: str) -> ContentHandler: ...


class DatagramPacket:

  def getAddress(self) -> InetAddress: ...

  def getData(self) -> list[int]: ...

  def getLength(self) -> int: ...

  def getOffset(self) -> int: ...

  def getPort(self) -> int: ...

  def getSocketAddress(self) -> SocketAddress: ...

  def setAddress(self, arg0: InetAddress) -> None: ...

  @overload
  def setData(self, arg0: list[int]) -> None: ...

  @overload
  def setData(self, arg0: list[int], arg1: int, arg2: int) -> None: ...

  def setLength(self, arg0: int) -> None: ...

  def setPort(self, arg0: int) -> None: ...

  def setSocketAddress(self, arg0: SocketAddress) -> None: ...

  @overload
  def __init__(self, arg0: list[int], arg1: int): ...
  @overload
  def __init__(self, arg0: list[int], arg1: int, arg2: int): ...
  @overload
  def __init__(self, arg0: list[int], arg1: int, arg2: SocketAddress): ...
  @overload
  def __init__(self, arg0: list[int], arg1: int, arg2: int, arg3: SocketAddress): ...
  @overload
  def __init__(self, arg0: list[int], arg1: int, arg2: InetAddress, arg3: int): ...
  @overload
  def __init__(self, arg0: list[int], arg1: int, arg2: int, arg3: InetAddress, arg4: int): ...


class DatagramSocket:

  def bind(self, arg0: SocketAddress) -> None: ...

  @overload
  def close(self) -> None: ...

  @overload
  def close(self) -> None: ...

  @overload
  def connect(self, arg0: SocketAddress) -> None: ...

  @overload
  def connect(self, arg0: InetAddress, arg1: int) -> None: ...

  def disconnect(self) -> None: ...

  def getBroadcast(self) -> bool: ...

  def getChannel(self) -> DatagramChannel: ...

  def getInetAddress(self) -> InetAddress: ...

  def getLocalAddress(self) -> InetAddress: ...

  def getLocalPort(self) -> int: ...

  def getLocalSocketAddress(self) -> SocketAddress: ...

  def getOption(self, arg0: SocketOption[T]) -> object: ...

  def getPort(self) -> int: ...

  def getReceiveBufferSize(self) -> int: ...

  def getRemoteSocketAddress(self) -> SocketAddress: ...

  def getReuseAddress(self) -> bool: ...

  def getSendBufferSize(self) -> int: ...

  def getSoTimeout(self) -> int: ...

  def getTrafficClass(self) -> int: ...

  def isBound(self) -> bool: ...

  def isClosed(self) -> bool: ...

  def isConnected(self) -> bool: ...

  def joinGroup(self, arg0: SocketAddress, arg1: NetworkInterface) -> None: ...

  def leaveGroup(self, arg0: SocketAddress, arg1: NetworkInterface) -> None: ...

  def receive(self, arg0: DatagramPacket) -> None: ...

  def send(self, arg0: DatagramPacket) -> None: ...

  def setBroadcast(self, arg0: bool) -> None: ...

  def setOption(self, arg0: SocketOption[T], arg1: object) -> DatagramSocket: ...

  def setReceiveBufferSize(self, arg0: int) -> None: ...

  def setReuseAddress(self, arg0: bool) -> None: ...

  def setSendBufferSize(self, arg0: int) -> None: ...

  def setSoTimeout(self, arg0: int) -> None: ...

  def setTrafficClass(self, arg0: int) -> None: ...

  def supportedOptions(self) -> Set[SocketOption[Any]]: ...

  @staticmethod
  def setDatagramSocketImplFactory(arg0: DatagramSocketImplFactory) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: int): ...
  @overload
  def __init__(self, arg0: SocketAddress): ...
  @overload
  def __init__(self, arg0: int, arg1: InetAddress): ...


class DatagramSocketImpl:

  IP_MULTICAST_IF: int

  IP_MULTICAST_IF2: int

  IP_MULTICAST_LOOP: int

  IP_TOS: int

  SO_BINDADDR: int

  SO_BROADCAST: int

  SO_KEEPALIVE: int

  SO_LINGER: int

  SO_OOBINLINE: int

  SO_RCVBUF: int

  SO_REUSEADDR: int

  SO_REUSEPORT: int

  SO_SNDBUF: int

  SO_TIMEOUT: int

  TCP_NODELAY: int

  def getOption(self, arg0: int) -> object: ...

  def setOption(self, arg0: int, arg1: object) -> None: ...

  def __init__(self): ...


class DatagramSocketImplFactory:

  def createDatagramSocketImpl(self) -> DatagramSocketImpl: ...


class FileNameMap:

  def getContentTypeFor(self, arg0: str) -> str: ...


class HttpCookie:

  def clone(self) -> object: ...

  def equals(self, arg0: object) -> bool: ...

  def getComment(self) -> str: ...

  def getCommentURL(self) -> str: ...

  def getDiscard(self) -> bool: ...

  def getDomain(self) -> str: ...

  def getMaxAge(self) -> int: ...

  def getName(self) -> str: ...

  def getPath(self) -> str: ...

  def getPortlist(self) -> str: ...

  def getSecure(self) -> bool: ...

  def getValue(self) -> str: ...

  def getVersion(self) -> int: ...

  def hasExpired(self) -> bool: ...

  def hashCode(self) -> int: ...

  def isHttpOnly(self) -> bool: ...

  def setComment(self, arg0: str) -> None: ...

  def setCommentURL(self, arg0: str) -> None: ...

  def setDiscard(self, arg0: bool) -> None: ...

  def setDomain(self, arg0: str) -> None: ...

  def setHttpOnly(self, arg0: bool) -> None: ...

  def setMaxAge(self, arg0: int) -> None: ...

  def setPath(self, arg0: str) -> None: ...

  def setPortlist(self, arg0: str) -> None: ...

  def setSecure(self, arg0: bool) -> None: ...

  def setValue(self, arg0: str) -> None: ...

  def setVersion(self, arg0: int) -> None: ...

  def toString(self) -> str: ...

  @staticmethod
  def domainMatches(arg0: str, arg1: str) -> bool: ...

  @staticmethod
  def parse(arg0: str) -> List[HttpCookie]: ...

  def __init__(self, arg0: str, arg1: str): ...

  class CookieAttributeAssignor:

    def assign(self, arg0: HttpCookie, arg1: str, arg2: str) -> None: ...


class Inet4Address(InetAddress):

  def equals(self, arg0: object) -> bool: ...

  def getAddress(self) -> list[int]: ...

  def getHostAddress(self) -> str: ...

  def hashCode(self) -> int: ...

  def isAnyLocalAddress(self) -> bool: ...

  def isLinkLocalAddress(self) -> bool: ...

  def isLoopbackAddress(self) -> bool: ...

  def isMCGlobal(self) -> bool: ...

  def isMCLinkLocal(self) -> bool: ...

  def isMCNodeLocal(self) -> bool: ...

  def isMCOrgLocal(self) -> bool: ...

  def isMCSiteLocal(self) -> bool: ...

  def isMulticastAddress(self) -> bool: ...

  def isSiteLocalAddress(self) -> bool: ...


class Inet6Address(InetAddress):

  def equals(self, arg0: object) -> bool: ...

  def getAddress(self) -> list[int]: ...

  def getHostAddress(self) -> str: ...

  def getScopeId(self) -> int: ...

  def getScopedInterface(self) -> NetworkInterface: ...

  def hashCode(self) -> int: ...

  def isAnyLocalAddress(self) -> bool: ...

  def isIPv4CompatibleAddress(self) -> bool: ...

  def isLinkLocalAddress(self) -> bool: ...

  def isLoopbackAddress(self) -> bool: ...

  def isMCGlobal(self) -> bool: ...

  def isMCLinkLocal(self) -> bool: ...

  def isMCNodeLocal(self) -> bool: ...

  def isMCOrgLocal(self) -> bool: ...

  def isMCSiteLocal(self) -> bool: ...

  def isMulticastAddress(self) -> bool: ...

  def isSiteLocalAddress(self) -> bool: ...

  @staticmethod
  @overload
  def getByAddress(arg0: str, arg1: list[int], arg2: int) -> Inet6Address: ...

  @staticmethod
  @overload
  def getByAddress(arg0: str, arg1: list[int], arg2: NetworkInterface) -> Inet6Address: ...

  class Inet6AddressHolder:

    def equals(self, arg0: object) -> bool: ...

    def hashCode(self) -> int: ...


class InetAddress:

  def equals(self, arg0: object) -> bool: ...

  def getAddress(self) -> list[int]: ...

  def getCanonicalHostName(self) -> str: ...

  def getHostAddress(self) -> str: ...

  def getHostName(self) -> str: ...

  def hashCode(self) -> int: ...

  def isAnyLocalAddress(self) -> bool: ...

  def isLinkLocalAddress(self) -> bool: ...

  def isLoopbackAddress(self) -> bool: ...

  def isMCGlobal(self) -> bool: ...

  def isMCLinkLocal(self) -> bool: ...

  def isMCNodeLocal(self) -> bool: ...

  def isMCOrgLocal(self) -> bool: ...

  def isMCSiteLocal(self) -> bool: ...

  def isMulticastAddress(self) -> bool: ...

  @overload
  def isReachable(self, arg0: int) -> bool: ...

  @overload
  def isReachable(self, arg0: NetworkInterface, arg1: int, arg2: int) -> bool: ...

  def isSiteLocalAddress(self) -> bool: ...

  def toString(self) -> str: ...

  @staticmethod
  def getAllByName(arg0: str) -> list[InetAddress]: ...

  @staticmethod
  @overload
  def getByAddress(arg0: list[int]) -> InetAddress: ...

  @staticmethod
  @overload
  def getByAddress(arg0: str, arg1: list[int]) -> InetAddress: ...

  @staticmethod
  def getByName(arg0: str) -> InetAddress: ...

  @staticmethod
  def getLocalHost() -> InetAddress: ...

  @staticmethod
  def getLoopbackAddress() -> InetAddress: ...

  class InetAddressHolder: ...

  class HostsFileResolver:

    @overload
    def lookupByAddress(self, arg0: list[int]) -> str: ...

    @overload
    def lookupByAddress(self, arg0: list[int]) -> str: ...

    @overload
    def lookupByName(self, arg0: str, arg1: InetAddressResolver.LookupPolicy) -> Stream[InetAddress]: ...

    @overload
    def lookupByName(self, arg0: str, arg1: InetAddressResolver.LookupPolicy) -> Stream[InetAddress]: ...

    def __init__(self, arg0: str): ...

  class PlatformResolver:

    @overload
    def lookupByAddress(self, arg0: list[int]) -> str: ...

    @overload
    def lookupByAddress(self, arg0: list[int]) -> str: ...

    @overload
    def lookupByName(self, arg0: str, arg1: InetAddressResolver.LookupPolicy) -> Stream[InetAddress]: ...

    @overload
    def lookupByName(self, arg0: str, arg1: InetAddressResolver.LookupPolicy) -> Stream[InetAddress]: ...

  class CachedAddresses:

    @overload
    def compareTo(self, arg0: object) -> int: ...

    @overload
    def compareTo(self, arg0: object) -> int: ...

    @overload
    def compareTo(self, arg0: InetAddress.CachedAddresses) -> int: ...

    @overload
    def get(self) -> list[InetAddress]: ...

    @overload
    def get(self) -> list[InetAddress]: ...

  class Addresses:

    def get(self) -> list[InetAddress]: ...

  class NameServiceAddresses:

    @overload
    def get(self) -> list[InetAddress]: ...

    @overload
    def get(self) -> list[InetAddress]: ...

  class CachedLocalHost: ...


class InetAddressImpl:

  def anyLocalAddress(self) -> InetAddress: ...

  def getHostByAddr(self, arg0: list[int]) -> str: ...

  def getLocalHostName(self) -> str: ...

  def isReachable(self, arg0: InetAddress, arg1: int, arg2: NetworkInterface, arg3: int) -> bool: ...

  def lookupAllHostAddr(self, arg0: str, arg1: InetAddressResolver.LookupPolicy) -> list[InetAddress]: ...

  def loopbackAddress(self) -> InetAddress: ...


class InetSocketAddress(SocketAddress):

  def equals(self, arg0: object) -> bool: ...

  def getAddress(self) -> InetAddress: ...

  def getHostName(self) -> str: ...

  def getHostString(self) -> str: ...

  def getPort(self) -> int: ...

  def hashCode(self) -> int: ...

  def isUnresolved(self) -> bool: ...

  def toString(self) -> str: ...

  @staticmethod
  def createUnresolved(arg0: str, arg1: int) -> InetSocketAddress: ...

  @overload
  def __init__(self, arg0: int): ...
  @overload
  def __init__(self, arg0: str, arg1: int): ...
  @overload
  def __init__(self, arg0: InetAddress, arg1: int): ...

  class InetSocketAddressHolder:

    def equals(self, arg0: object) -> bool: ...

    def hashCode(self) -> int: ...

    def toString(self) -> str: ...


class InterfaceAddress:

  def equals(self, arg0: object) -> bool: ...

  def getAddress(self) -> InetAddress: ...

  def getBroadcast(self) -> InetAddress: ...

  def getNetworkPrefixLength(self) -> int: ...

  def hashCode(self) -> int: ...

  def toString(self) -> str: ...


class MalformedURLException(IOException):

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: str): ...


class NetworkInterface:

  def equals(self, arg0: object) -> bool: ...

  def getDisplayName(self) -> str: ...

  def getHardwareAddress(self) -> list[int]: ...

  def getIndex(self) -> int: ...

  def getInetAddresses(self) -> Enumeration[InetAddress]: ...

  def getInterfaceAddresses(self) -> List[InterfaceAddress]: ...

  def getMTU(self) -> int: ...

  def getName(self) -> str: ...

  def getParent(self) -> NetworkInterface: ...

  def getSubInterfaces(self) -> Enumeration[NetworkInterface]: ...

  def hashCode(self) -> int: ...

  def inetAddresses(self) -> Stream[InetAddress]: ...

  def isLoopback(self) -> bool: ...

  def isPointToPoint(self) -> bool: ...

  def isUp(self) -> bool: ...

  def isVirtual(self) -> bool: ...

  def subInterfaces(self) -> Stream[NetworkInterface]: ...

  def supportsMulticast(self) -> bool: ...

  def toString(self) -> str: ...

  @staticmethod
  def getByIndex(arg0: int) -> NetworkInterface: ...

  @staticmethod
  def getByInetAddress(arg0: InetAddress) -> NetworkInterface: ...

  @staticmethod
  def getByName(arg0: str) -> NetworkInterface: ...

  @staticmethod
  def getNetworkInterfaces() -> Enumeration[NetworkInterface]: ...

  @staticmethod
  def networkInterfaces() -> Stream[NetworkInterface]: ...


class ProtocolFamily:

  def name(self) -> str: ...


class Proxy:

  NO_PROXY: Proxy

  def address(self) -> SocketAddress: ...

  def equals(self, arg0: object) -> bool: ...

  def hashCode(self) -> int: ...

  def toString(self) -> str: ...

  def type(self) -> Proxy.Type: ...

  def __init__(self, arg0: Proxy.Type, arg1: SocketAddress): ...

  class Type(Enum):

    DIRECT: Proxy.Type

    HTTP: Proxy.Type

    SOCKS: Proxy.Type

    @staticmethod
    def valueOf(arg0: str) -> Proxy.Type: ...

    @staticmethod
    def values() -> list[Proxy.Type]: ...


class ServerSocket:

  def accept(self) -> Socket: ...

  @overload
  def bind(self, arg0: SocketAddress) -> None: ...

  @overload
  def bind(self, arg0: SocketAddress, arg1: int) -> None: ...

  @overload
  def close(self) -> None: ...

  @overload
  def close(self) -> None: ...

  def getChannel(self) -> ServerSocketChannel: ...

  def getInetAddress(self) -> InetAddress: ...

  def getLocalPort(self) -> int: ...

  def getLocalSocketAddress(self) -> SocketAddress: ...

  def getOption(self, arg0: SocketOption[T]) -> object: ...

  def getReceiveBufferSize(self) -> int: ...

  def getReuseAddress(self) -> bool: ...

  def getSoTimeout(self) -> int: ...

  def isBound(self) -> bool: ...

  def isClosed(self) -> bool: ...

  def setOption(self, arg0: SocketOption[T], arg1: object) -> ServerSocket: ...

  def setPerformancePreferences(self, arg0: int, arg1: int, arg2: int) -> None: ...

  def setReceiveBufferSize(self, arg0: int) -> None: ...

  def setReuseAddress(self, arg0: bool) -> None: ...

  def setSoTimeout(self, arg0: int) -> None: ...

  def supportedOptions(self) -> Set[SocketOption[Any]]: ...

  def toString(self) -> str: ...

  @staticmethod
  def setSocketFactory(arg0: SocketImplFactory) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: int): ...
  @overload
  def __init__(self, arg0: int, arg1: int): ...
  @overload
  def __init__(self, arg0: int, arg1: int, arg2: InetAddress): ...


class Socket:

  def bind(self, arg0: SocketAddress) -> None: ...

  @overload
  def close(self) -> None: ...

  @overload
  def close(self) -> None: ...

  @overload
  def connect(self, arg0: SocketAddress) -> None: ...

  @overload
  def connect(self, arg0: SocketAddress, arg1: int) -> None: ...

  def getChannel(self) -> SocketChannel: ...

  def getInetAddress(self) -> InetAddress: ...

  def getInputStream(self) -> InputStream: ...

  def getKeepAlive(self) -> bool: ...

  def getLocalAddress(self) -> InetAddress: ...

  def getLocalPort(self) -> int: ...

  def getLocalSocketAddress(self) -> SocketAddress: ...

  def getOOBInline(self) -> bool: ...

  def getOption(self, arg0: SocketOption[T]) -> object: ...

  def getOutputStream(self) -> OutputStream: ...

  def getPort(self) -> int: ...

  def getReceiveBufferSize(self) -> int: ...

  def getRemoteSocketAddress(self) -> SocketAddress: ...

  def getReuseAddress(self) -> bool: ...

  def getSendBufferSize(self) -> int: ...

  def getSoLinger(self) -> int: ...

  def getSoTimeout(self) -> int: ...

  def getTcpNoDelay(self) -> bool: ...

  def getTrafficClass(self) -> int: ...

  def isBound(self) -> bool: ...

  def isClosed(self) -> bool: ...

  def isConnected(self) -> bool: ...

  def isInputShutdown(self) -> bool: ...

  def isOutputShutdown(self) -> bool: ...

  def sendUrgentData(self, arg0: int) -> None: ...

  def setKeepAlive(self, arg0: bool) -> None: ...

  def setOOBInline(self, arg0: bool) -> None: ...

  def setOption(self, arg0: SocketOption[T], arg1: object) -> Socket: ...

  def setPerformancePreferences(self, arg0: int, arg1: int, arg2: int) -> None: ...

  def setReceiveBufferSize(self, arg0: int) -> None: ...

  def setReuseAddress(self, arg0: bool) -> None: ...

  def setSendBufferSize(self, arg0: int) -> None: ...

  def setSoLinger(self, arg0: bool, arg1: int) -> None: ...

  def setSoTimeout(self, arg0: int) -> None: ...

  def setTcpNoDelay(self, arg0: bool) -> None: ...

  def setTrafficClass(self, arg0: int) -> None: ...

  def shutdownInput(self) -> None: ...

  def shutdownOutput(self) -> None: ...

  def supportedOptions(self) -> Set[SocketOption[Any]]: ...

  def toString(self) -> str: ...

  @staticmethod
  def setSocketImplFactory(arg0: SocketImplFactory) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: Proxy): ...
  @overload
  def __init__(self, arg0: str, arg1: int): ...
  @overload
  def __init__(self, arg0: InetAddress, arg1: int): ...
  @overload
  def __init__(self, arg0: str, arg1: int, arg2: bool): ...
  @overload
  def __init__(self, arg0: InetAddress, arg1: int, arg2: bool): ...
  @overload
  def __init__(self, arg0: str, arg1: int, arg2: InetAddress, arg3: int): ...
  @overload
  def __init__(self, arg0: InetAddress, arg1: int, arg2: InetAddress, arg3: int): ...

  class SocketInputStream(InputStream):

    def available(self) -> int: ...

    def close(self) -> None: ...

    @overload
    def read(self) -> int: ...

    @overload
    def read(self, arg0: list[int], arg1: int, arg2: int) -> int: ...

  class SocketOutputStream(OutputStream):

    def close(self) -> None: ...

    @overload
    def write(self, arg0: int) -> None: ...

    @overload
    def write(self, arg0: list[int], arg1: int, arg2: int) -> None: ...


class SocketAddress:

  def __init__(self): ...


class SocketException(IOException):

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: str): ...


class SocketImpl:

  IP_MULTICAST_IF: int

  IP_MULTICAST_IF2: int

  IP_MULTICAST_LOOP: int

  IP_TOS: int

  SO_BINDADDR: int

  SO_BROADCAST: int

  SO_KEEPALIVE: int

  SO_LINGER: int

  SO_OOBINLINE: int

  SO_RCVBUF: int

  SO_REUSEADDR: int

  SO_REUSEPORT: int

  SO_SNDBUF: int

  SO_TIMEOUT: int

  TCP_NODELAY: int

  def getOption(self, arg0: int) -> object: ...

  def setOption(self, arg0: int, arg1: object) -> None: ...

  def toString(self) -> str: ...

  def __init__(self): ...


class SocketImplFactory:

  def createSocketImpl(self) -> SocketImpl: ...


class SocketOption[T]:

  def name(self) -> str: ...

  def type(self) -> Class[T]: ...


class SocketPermission(Permission):

  def equals(self, arg0: object) -> bool: ...

  def getActions(self) -> str: ...

  def hashCode(self) -> int: ...

  def implies(self, arg0: Permission) -> bool: ...

  def newPermissionCollection(self) -> PermissionCollection: ...

  def __init__(self, arg0: str, arg1: str): ...

  class EphemeralRange: ...


class URI:

  @overload
  def compareTo(self, arg0: object) -> int: ...

  @overload
  def compareTo(self, arg0: object) -> int: ...

  @overload
  def compareTo(self, arg0: URI) -> int: ...

  def equals(self, arg0: object) -> bool: ...

  def getAuthority(self) -> str: ...

  def getFragment(self) -> str: ...

  def getHost(self) -> str: ...

  def getPath(self) -> str: ...

  def getPort(self) -> int: ...

  def getQuery(self) -> str: ...

  def getRawAuthority(self) -> str: ...

  def getRawFragment(self) -> str: ...

  def getRawPath(self) -> str: ...

  def getRawQuery(self) -> str: ...

  def getRawSchemeSpecificPart(self) -> str: ...

  def getRawUserInfo(self) -> str: ...

  def getScheme(self) -> str: ...

  def getSchemeSpecificPart(self) -> str: ...

  def getUserInfo(self) -> str: ...

  def hashCode(self) -> int: ...

  def isAbsolute(self) -> bool: ...

  def isOpaque(self) -> bool: ...

  def normalize(self) -> URI: ...

  def parseServerAuthority(self) -> URI: ...

  def relativize(self, arg0: URI) -> URI: ...

  @overload
  def resolve(self, arg0: str) -> URI: ...

  @overload
  def resolve(self, arg0: URI) -> URI: ...

  def toASCIIString(self) -> str: ...

  def toString(self) -> str: ...

  def toURL(self) -> URL: ...

  @staticmethod
  def create(arg0: str) -> URI: ...

  @overload
  def __init__(self, arg0: str): ...
  @overload
  def __init__(self, arg0: str, arg1: str, arg2: str): ...
  @overload
  def __init__(self, arg0: str, arg1: str, arg2: str, arg3: str): ...
  @overload
  def __init__(self, arg0: str, arg1: str, arg2: str, arg3: str, arg4: str): ...
  @overload
  def __init__(self, arg0: str, arg1: str, arg2: str, arg3: int, arg4: str, arg5: str, arg6: str): ...

  class Parser: ...


class URISyntaxException(Exception):

  def getIndex(self) -> int: ...

  def getInput(self) -> str: ...

  def getMessage(self) -> str: ...

  def getReason(self) -> str: ...

  @overload
  def __init__(self, arg0: str, arg1: str): ...
  @overload
  def __init__(self, arg0: str, arg1: str, arg2: int): ...


class URL:

  def equals(self, arg0: object) -> bool: ...

  def getAuthority(self) -> str: ...

  @overload
  def getContent(self) -> object: ...

  @overload
  def getContent(self, arg0: list[Class]) -> object: ...

  def getDefaultPort(self) -> int: ...

  def getFile(self) -> str: ...

  def getHost(self) -> str: ...

  def getPath(self) -> str: ...

  def getPort(self) -> int: ...

  def getProtocol(self) -> str: ...

  def getQuery(self) -> str: ...

  def getRef(self) -> str: ...

  def getUserInfo(self) -> str: ...

  def hashCode(self) -> int: ...

  @overload
  def openConnection(self) -> URLConnection: ...

  @overload
  def openConnection(self, arg0: Proxy) -> URLConnection: ...

  def openStream(self) -> InputStream: ...

  def sameFile(self, arg0: URL) -> bool: ...

  def toExternalForm(self) -> str: ...

  def toString(self) -> str: ...

  def toURI(self) -> URI: ...

  @staticmethod
  def setURLStreamHandlerFactory(arg0: URLStreamHandlerFactory) -> None: ...

  @overload
  def __init__(self, arg0: str): ...
  @overload
  def __init__(self, arg0: URL, arg1: str): ...
  @overload
  def __init__(self, arg0: str, arg1: str, arg2: str): ...
  @overload
  def __init__(self, arg0: URL, arg1: str, arg2: URLStreamHandler): ...
  @overload
  def __init__(self, arg0: str, arg1: str, arg2: int, arg3: str): ...
  @overload
  def __init__(self, arg0: str, arg1: str, arg2: int, arg3: str, arg4: URLStreamHandler): ...

  class DefaultFactory:

    @overload
    def createURLStreamHandler(self, arg0: str) -> URLStreamHandler: ...

    @overload
    def createURLStreamHandler(self, arg0: str) -> URLStreamHandler: ...


class URLClassLoader(SecureClassLoader):

  @overload
  def close(self) -> None: ...

  @overload
  def close(self) -> None: ...

  def findResource(self, arg0: str) -> URL: ...

  def findResources(self, arg0: str) -> Enumeration[URL]: ...

  def getResourceAsStream(self, arg0: str) -> InputStream: ...

  def getURLs(self) -> list[URL]: ...

  @staticmethod
  @overload
  def newInstance(arg0: list[URL]) -> URLClassLoader: ...

  @staticmethod
  @overload
  def newInstance(arg0: list[URL], arg1: ClassLoader) -> URLClassLoader: ...

  @overload
  def __init__(self, arg0: list[URL]): ...
  @overload
  def __init__(self, arg0: list[URL], arg1: ClassLoader): ...
  @overload
  def __init__(self, arg0: list[URL], arg1: ClassLoader, arg2: URLStreamHandlerFactory): ...
  @overload
  def __init__(self, arg0: str, arg1: list[URL], arg2: ClassLoader): ...
  @overload
  def __init__(self, arg0: str, arg1: list[URL], arg2: ClassLoader, arg3: URLStreamHandlerFactory): ...


class URLConnection:

  def addRequestProperty(self, arg0: str, arg1: str) -> None: ...

  def connect(self) -> None: ...

  def getAllowUserInteraction(self) -> bool: ...

  def getConnectTimeout(self) -> int: ...

  @overload
  def getContent(self) -> object: ...

  @overload
  def getContent(self, arg0: list[Class]) -> object: ...

  def getContentEncoding(self) -> str: ...

  def getContentLength(self) -> int: ...

  def getContentLengthLong(self) -> int: ...

  def getContentType(self) -> str: ...

  def getDate(self) -> int: ...

  def getDefaultUseCaches(self) -> bool: ...

  def getDoInput(self) -> bool: ...

  def getDoOutput(self) -> bool: ...

  def getExpiration(self) -> int: ...

  @overload
  def getHeaderField(self, arg0: int) -> str: ...

  @overload
  def getHeaderField(self, arg0: str) -> str: ...

  def getHeaderFieldDate(self, arg0: str, arg1: int) -> int: ...

  def getHeaderFieldInt(self, arg0: str, arg1: int) -> int: ...

  def getHeaderFieldKey(self, arg0: int) -> str: ...

  def getHeaderFieldLong(self, arg0: str, arg1: int) -> int: ...

  def getHeaderFields(self) -> Map[str, List[str]]: ...

  def getIfModifiedSince(self) -> int: ...

  def getInputStream(self) -> InputStream: ...

  def getLastModified(self) -> int: ...

  def getOutputStream(self) -> OutputStream: ...

  def getPermission(self) -> Permission: ...

  def getReadTimeout(self) -> int: ...

  def getRequestProperties(self) -> Map[str, List[str]]: ...

  def getRequestProperty(self, arg0: str) -> str: ...

  def getURL(self) -> URL: ...

  def getUseCaches(self) -> bool: ...

  def setAllowUserInteraction(self, arg0: bool) -> None: ...

  def setConnectTimeout(self, arg0: int) -> None: ...

  def setDefaultUseCaches(self, arg0: bool) -> None: ...

  def setDoInput(self, arg0: bool) -> None: ...

  def setDoOutput(self, arg0: bool) -> None: ...

  def setIfModifiedSince(self, arg0: int) -> None: ...

  def setReadTimeout(self, arg0: int) -> None: ...

  def setRequestProperty(self, arg0: str, arg1: str) -> None: ...

  def setUseCaches(self, arg0: bool) -> None: ...

  def toString(self) -> str: ...

  @staticmethod
  def getDefaultAllowUserInteraction() -> bool: ...

  @staticmethod
  def getDefaultRequestProperty(arg0: str) -> str: ...

  @staticmethod
  def getFileNameMap() -> FileNameMap: ...

  @staticmethod
  def guessContentTypeFromName(arg0: str) -> str: ...

  @staticmethod
  def guessContentTypeFromStream(arg0: InputStream) -> str: ...

  @staticmethod
  def setContentHandlerFactory(arg0: ContentHandlerFactory) -> None: ...

  @staticmethod
  def setDefaultAllowUserInteraction(arg0: bool) -> None: ...

  @staticmethod
  def setDefaultRequestProperty(arg0: str, arg1: str) -> None: ...

  @staticmethod
  def setFileNameMap(arg0: FileNameMap) -> None: ...


class URLStreamHandler:

  def __init__(self): ...


class URLStreamHandlerFactory:

  def createURLStreamHandler(self, arg0: str) -> URLStreamHandler: ...


class UnknownHostException(IOException):

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: str): ...


class UnknownServiceException(IOException):

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: str): ...


class UrlDeserializedState:

  def __init__(self, arg0: str, arg1: str, arg2: int, arg3: str, arg4: str, arg5: str, arg6: int): ...

