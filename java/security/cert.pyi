from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.io import InputStream
from java.lang import Throwable
from java.math import BigInteger
from java.security import GeneralSecurityException, PublicKey, Provider, Principal
from java.util import List, Iterator, Collection, Date, Set
from javax.security.auth.x500 import X500Principal

class CRL:

  def getType(self) -> str: ...

  def isRevoked(self, arg0: Certificate) -> bool: ...

  def toString(self) -> str: ...


class CRLException(GeneralSecurityException):

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: str): ...
  @overload
  def __init__(self, arg0: Throwable): ...
  @overload
  def __init__(self, arg0: str, arg1: Throwable): ...


class CertPath:

  def equals(self, arg0: object) -> bool: ...

  def getCertificates(self) -> List[Certificate]: ...

  @overload
  def getEncoded(self) -> list[int]: ...

  @overload
  def getEncoded(self, arg0: str) -> list[int]: ...

  def getEncodings(self) -> Iterator[str]: ...

  def getType(self) -> str: ...

  def hashCode(self) -> int: ...

  def toString(self) -> str: ...

  class CertPathRep: ...


class Certificate:

  def equals(self, arg0: object) -> bool: ...

  def getEncoded(self) -> list[int]: ...

  def getPublicKey(self) -> PublicKey: ...

  def getType(self) -> str: ...

  def hashCode(self) -> int: ...

  def toString(self) -> str: ...

  @overload
  def verify(self, arg0: PublicKey) -> None: ...

  @overload
  def verify(self, arg0: PublicKey, arg1: str) -> None: ...

  @overload
  def verify(self, arg0: PublicKey, arg1: Provider) -> None: ...

  class CertificateRep: ...


class CertificateEncodingException(CertificateException):

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: str): ...
  @overload
  def __init__(self, arg0: Throwable): ...
  @overload
  def __init__(self, arg0: str, arg1: Throwable): ...


class CertificateException(GeneralSecurityException):

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: str): ...
  @overload
  def __init__(self, arg0: Throwable): ...
  @overload
  def __init__(self, arg0: str, arg1: Throwable): ...


class CertificateFactory:

  def generateCRL(self, arg0: InputStream) -> CRL: ...

  def generateCRLs(self, arg0: InputStream) -> Collection[CRL]: ...

  @overload
  def generateCertPath(self, arg0: InputStream) -> CertPath: ...

  @overload
  def generateCertPath(self, arg0: List[Certificate]) -> CertPath: ...

  @overload
  def generateCertPath(self, arg0: InputStream, arg1: str) -> CertPath: ...

  def generateCertificate(self, arg0: InputStream) -> Certificate: ...

  def generateCertificates(self, arg0: InputStream) -> Collection[Certificate]: ...

  def getCertPathEncodings(self) -> Iterator[str]: ...

  def getProvider(self) -> Provider: ...

  def getType(self) -> str: ...

  @staticmethod
  @overload
  def getInstance(arg0: str) -> CertificateFactory: ...

  @staticmethod
  @overload
  def getInstance(arg0: str, arg1: str) -> CertificateFactory: ...

  @staticmethod
  @overload
  def getInstance(arg0: str, arg1: Provider) -> CertificateFactory: ...


class CertificateFactorySpi:

  def engineGenerateCRL(self, arg0: InputStream) -> CRL: ...

  def engineGenerateCRLs(self, arg0: InputStream) -> Collection[CRL]: ...

  @overload
  def engineGenerateCertPath(self, arg0: InputStream) -> CertPath: ...

  @overload
  def engineGenerateCertPath(self, arg0: List[Certificate]) -> CertPath: ...

  @overload
  def engineGenerateCertPath(self, arg0: InputStream, arg1: str) -> CertPath: ...

  def engineGenerateCertificate(self, arg0: InputStream) -> Certificate: ...

  def engineGenerateCertificates(self, arg0: InputStream) -> Collection[Certificate]: ...

  def engineGetCertPathEncodings(self) -> Iterator[str]: ...

  def __init__(self): ...


class X509Certificate(Certificate):

  @overload
  def checkValidity(self) -> None: ...

  @overload
  def checkValidity(self, arg0: Date) -> None: ...

  def getBasicConstraints(self) -> int: ...

  def getCriticalExtensionOIDs(self) -> Set[str]: ...

  def getExtendedKeyUsage(self) -> List[str]: ...

  def getExtensionValue(self, arg0: str) -> list[int]: ...

  def getIssuerAlternativeNames(self) -> Collection[List[Any]]: ...

  def getIssuerDN(self) -> Principal: ...

  def getIssuerUniqueID(self) -> list[bool]: ...

  def getIssuerX500Principal(self) -> X500Principal: ...

  def getKeyUsage(self) -> list[bool]: ...

  def getNonCriticalExtensionOIDs(self) -> Set[str]: ...

  def getNotAfter(self) -> Date: ...

  def getNotBefore(self) -> Date: ...

  def getSerialNumber(self) -> BigInteger: ...

  def getSigAlgName(self) -> str: ...

  def getSigAlgOID(self) -> str: ...

  def getSigAlgParams(self) -> list[int]: ...

  def getSignature(self) -> list[int]: ...

  def getSubjectAlternativeNames(self) -> Collection[List[Any]]: ...

  def getSubjectDN(self) -> Principal: ...

  def getSubjectUniqueID(self) -> list[bool]: ...

  def getSubjectX500Principal(self) -> X500Principal: ...

  def getTBSCertificate(self) -> list[int]: ...

  def getVersion(self) -> int: ...

  def hasUnsupportedCriticalExtension(self) -> bool: ...

  def verify(self, arg0: PublicKey, arg1: Provider) -> None: ...

