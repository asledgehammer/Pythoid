from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.io import InputStream, OutputStream
from java.lang import Class
from java.net import URI
from java.nio.channels import AsynchronousFileChannel, SeekableByteChannel, FileChannel
from java.nio.file import Path, AccessMode, CopyOption, LinkOption, FileStore, FileSystem, DirectoryStream, OpenOption
from java.nio.file.attribute import FileAttribute
from java.util import Set, Map, List
from java.util.concurrent import ExecutorService

V = TypeVar('V', default=Any)
A = TypeVar('A', default=Any)

class FileSystemProvider:

  def checkAccess(self, arg0: Path, arg1: list[AccessMode]) -> None: ...

  def copy(self, arg0: Path, arg1: Path, arg2: list[CopyOption]) -> None: ...

  def createDirectory(self, arg0: Path, arg1: list[FileAttribute]) -> None: ...

  def createLink(self, arg0: Path, arg1: Path) -> None: ...

  def createSymbolicLink(self, arg0: Path, arg1: Path, arg2: list[FileAttribute]) -> None: ...

  def delete(self, arg0: Path) -> None: ...

  def deleteIfExists(self, arg0: Path) -> bool: ...

  def getFileAttributeView(self, arg0: Path, arg1: Class[V], arg2: list[LinkOption]) -> V: ...

  def getFileStore(self, arg0: Path) -> FileStore: ...

  def getFileSystem(self, arg0: URI) -> FileSystem: ...

  def getPath(self, arg0: URI) -> Path: ...

  def getScheme(self) -> str: ...

  def isHidden(self, arg0: Path) -> bool: ...

  def isSameFile(self, arg0: Path, arg1: Path) -> bool: ...

  def move(self, arg0: Path, arg1: Path, arg2: list[CopyOption]) -> None: ...

  def newAsynchronousFileChannel(self, arg0: Path, arg1: Set[OpenOption], arg2: ExecutorService, arg3: list[FileAttribute]) -> AsynchronousFileChannel: ...

  def newByteChannel(self, arg0: Path, arg1: Set[OpenOption], arg2: list[FileAttribute]) -> SeekableByteChannel: ...

  def newDirectoryStream(self, arg0: Path, arg1: DirectoryStream.Filter) -> DirectoryStream[Path]: ...

  def newFileChannel(self, arg0: Path, arg1: Set[OpenOption], arg2: list[FileAttribute]) -> FileChannel: ...

  @overload
  def newFileSystem(self, arg0: URI, arg1: Map[str, Any]) -> FileSystem: ...

  @overload
  def newFileSystem(self, arg0: Path, arg1: Map[str, Any]) -> FileSystem: ...

  def newInputStream(self, arg0: Path, arg1: list[OpenOption]) -> InputStream: ...

  def newOutputStream(self, arg0: Path, arg1: list[OpenOption]) -> OutputStream: ...

  @overload
  def readAttributes(self, arg0: Path, arg1: Class[A], arg2: list[LinkOption]) -> A: ...

  @overload
  def readAttributes(self, arg0: Path, arg1: str, arg2: list[LinkOption]) -> Map[str, object]: ...

  def readSymbolicLink(self, arg0: Path) -> Path: ...

  def setAttribute(self, arg0: Path, arg1: str, arg2: object, arg3: list[LinkOption]) -> None: ...

  @staticmethod
  def installedProviders() -> List[FileSystemProvider]: ...


class FileTypeDetector:

  def probeContentType(self, arg0: Path) -> str: ...

