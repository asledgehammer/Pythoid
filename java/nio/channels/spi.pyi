from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.net import ProtocolFamily
from java.nio.channels import SelectableChannel, Selector, SelectionKey, Channel, DatagramChannel, Pipe, ServerSocketChannel, SocketChannel

class AbstractInterruptibleChannel:

  @overload
  def close(self) -> None: ...

  @overload
  def close(self) -> None: ...

  @overload
  def close(self) -> None: ...

  @overload
  def isOpen(self) -> bool: ...

  @overload
  def isOpen(self) -> bool: ...


class AbstractSelectableChannel(SelectableChannel):

  def blockingLock(self) -> object: ...

  def configureBlocking(self, arg0: bool) -> SelectableChannel: ...

  def isBlocking(self) -> bool: ...

  def isRegistered(self) -> bool: ...

  def keyFor(self, arg0: Selector) -> SelectionKey: ...

  def provider(self) -> SelectorProvider: ...

  def register(self, arg0: Selector, arg1: int, arg2: object) -> SelectionKey: ...


class AbstractSelector(Selector):

  def close(self) -> None: ...

  def isOpen(self) -> bool: ...

  def provider(self) -> SelectorProvider: ...


class SelectorProvider:

  def inheritedChannel(self) -> Channel: ...

  @overload
  def openDatagramChannel(self) -> DatagramChannel: ...

  @overload
  def openDatagramChannel(self, arg0: ProtocolFamily) -> DatagramChannel: ...

  def openPipe(self) -> Pipe: ...

  def openSelector(self) -> AbstractSelector: ...

  @overload
  def openServerSocketChannel(self) -> ServerSocketChannel: ...

  @overload
  def openServerSocketChannel(self, arg0: ProtocolFamily) -> ServerSocketChannel: ...

  @overload
  def openSocketChannel(self) -> SocketChannel: ...

  @overload
  def openSocketChannel(self, arg0: ProtocolFamily) -> SocketChannel: ...

  @staticmethod
  def provider() -> SelectorProvider: ...

  class Holder: ...

