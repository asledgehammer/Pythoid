from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.lang import Number, Enum
from java.util import Random

class BigDecimal(Number):

  ONE: BigDecimal

  ROUND_CEILING: int

  ROUND_DOWN: int

  ROUND_FLOOR: int

  ROUND_HALF_DOWN: int

  ROUND_HALF_EVEN: int

  ROUND_HALF_UP: int

  ROUND_UNNECESSARY: int

  ROUND_UP: int

  TEN: BigDecimal

  ZERO: BigDecimal

  @overload
  def abs(self) -> BigDecimal: ...

  @overload
  def abs(self, arg0: MathContext) -> BigDecimal: ...

  @overload
  def add(self, arg0: BigDecimal) -> BigDecimal: ...

  @overload
  def add(self, arg0: BigDecimal, arg1: MathContext) -> BigDecimal: ...

  def byteValueExact(self) -> int: ...

  @overload
  def compareTo(self, arg0: object) -> int: ...

  @overload
  def compareTo(self, arg0: object) -> int: ...

  @overload
  def compareTo(self, arg0: BigDecimal) -> int: ...

  @overload
  def divide(self, arg0: BigDecimal) -> BigDecimal: ...

  @overload
  def divide(self, arg0: BigDecimal, arg1: int) -> BigDecimal: ...

  @overload
  def divide(self, arg0: BigDecimal, arg1: MathContext) -> BigDecimal: ...

  @overload
  def divide(self, arg0: BigDecimal, arg1: RoundingMode) -> BigDecimal: ...

  @overload
  def divide(self, arg0: BigDecimal, arg1: int, arg2: int) -> BigDecimal: ...

  @overload
  def divide(self, arg0: BigDecimal, arg1: int, arg2: RoundingMode) -> BigDecimal: ...

  @overload
  def divideAndRemainder(self, arg0: BigDecimal) -> list[BigDecimal]: ...

  @overload
  def divideAndRemainder(self, arg0: BigDecimal, arg1: MathContext) -> list[BigDecimal]: ...

  @overload
  def divideToIntegralValue(self, arg0: BigDecimal) -> BigDecimal: ...

  @overload
  def divideToIntegralValue(self, arg0: BigDecimal, arg1: MathContext) -> BigDecimal: ...

  def doubleValue(self) -> float: ...

  def equals(self, arg0: object) -> bool: ...

  def floatValue(self) -> float: ...

  def hashCode(self) -> int: ...

  def intValue(self) -> int: ...

  def intValueExact(self) -> int: ...

  def longValue(self) -> int: ...

  def longValueExact(self) -> int: ...

  def max(self, arg0: BigDecimal) -> BigDecimal: ...

  def min(self, arg0: BigDecimal) -> BigDecimal: ...

  def movePointLeft(self, arg0: int) -> BigDecimal: ...

  def movePointRight(self, arg0: int) -> BigDecimal: ...

  @overload
  def multiply(self, arg0: BigDecimal) -> BigDecimal: ...

  @overload
  def multiply(self, arg0: BigDecimal, arg1: MathContext) -> BigDecimal: ...

  @overload
  def negate(self) -> BigDecimal: ...

  @overload
  def negate(self, arg0: MathContext) -> BigDecimal: ...

  @overload
  def plus(self) -> BigDecimal: ...

  @overload
  def plus(self, arg0: MathContext) -> BigDecimal: ...

  @overload
  def pow(self, arg0: int) -> BigDecimal: ...

  @overload
  def pow(self, arg0: int, arg1: MathContext) -> BigDecimal: ...

  def precision(self) -> int: ...

  @overload
  def remainder(self, arg0: BigDecimal) -> BigDecimal: ...

  @overload
  def remainder(self, arg0: BigDecimal, arg1: MathContext) -> BigDecimal: ...

  def round(self, arg0: MathContext) -> BigDecimal: ...

  def scale(self) -> int: ...

  def scaleByPowerOfTen(self, arg0: int) -> BigDecimal: ...

  @overload
  def setScale(self, arg0: int) -> BigDecimal: ...

  @overload
  def setScale(self, arg0: int, arg1: int) -> BigDecimal: ...

  @overload
  def setScale(self, arg0: int, arg1: RoundingMode) -> BigDecimal: ...

  def shortValueExact(self) -> int: ...

  def signum(self) -> int: ...

  def sqrt(self, arg0: MathContext) -> BigDecimal: ...

  def stripTrailingZeros(self) -> BigDecimal: ...

  @overload
  def subtract(self, arg0: BigDecimal) -> BigDecimal: ...

  @overload
  def subtract(self, arg0: BigDecimal, arg1: MathContext) -> BigDecimal: ...

  def toBigInteger(self) -> BigInteger: ...

  def toBigIntegerExact(self) -> BigInteger: ...

  def toEngineeringString(self) -> str: ...

  def toPlainString(self) -> str: ...

  def toString(self) -> str: ...

  def ulp(self) -> BigDecimal: ...

  def unscaledValue(self) -> BigInteger: ...

  @staticmethod
  @overload
  def valueOf(arg0: float) -> BigDecimal: ...

  @staticmethod
  @overload
  def valueOf(arg0: int) -> BigDecimal: ...

  @staticmethod
  @overload
  def valueOf(arg0: int, arg1: int) -> BigDecimal: ...

  @overload
  def __init__(self, arg0: list[str]): ...
  @overload
  def __init__(self, arg0: float): ...
  @overload
  def __init__(self, arg0: int): ...
  @overload
  def __init__(self, arg0: str): ...
  @overload
  def __init__(self, arg0: BigInteger): ...
  @overload
  def __init__(self, arg0: int): ...
  @overload
  def __init__(self, arg0: list[str], arg1: MathContext): ...
  @overload
  def __init__(self, arg0: float, arg1: MathContext): ...
  @overload
  def __init__(self, arg0: int, arg1: MathContext): ...
  @overload
  def __init__(self, arg0: str, arg1: MathContext): ...
  @overload
  def __init__(self, arg0: BigInteger, arg1: int): ...
  @overload
  def __init__(self, arg0: BigInteger, arg1: MathContext): ...
  @overload
  def __init__(self, arg0: int, arg1: MathContext): ...
  @overload
  def __init__(self, arg0: list[str], arg1: int, arg2: int): ...
  @overload
  def __init__(self, arg0: BigInteger, arg1: int, arg2: MathContext): ...
  @overload
  def __init__(self, arg0: list[str], arg1: int, arg2: int, arg3: MathContext): ...

  class LongOverflow:

    @staticmethod
    def check(arg0: BigDecimal) -> None: ...

  class StringBuilderHelper: ...

  class UnsafeHolder: ...


class BigInteger(Number):

  ONE: BigInteger

  TEN: BigInteger

  TWO: BigInteger

  ZERO: BigInteger

  def abs(self) -> BigInteger: ...

  def add(self, arg0: BigInteger) -> BigInteger: ...

  def andNot(self, arg0: BigInteger) -> BigInteger: ...

  def bitCount(self) -> int: ...

  def bitLength(self) -> int: ...

  def byteValueExact(self) -> int: ...

  def clearBit(self, arg0: int) -> BigInteger: ...

  @overload
  def compareTo(self, arg0: object) -> int: ...

  @overload
  def compareTo(self, arg0: object) -> int: ...

  @overload
  def compareTo(self, arg0: BigInteger) -> int: ...

  def divide(self, arg0: BigInteger) -> BigInteger: ...

  def divideAndRemainder(self, arg0: BigInteger) -> list[BigInteger]: ...

  def doubleValue(self) -> float: ...

  def equals(self, arg0: object) -> bool: ...

  def flipBit(self, arg0: int) -> BigInteger: ...

  def floatValue(self) -> float: ...

  def gcd(self, arg0: BigInteger) -> BigInteger: ...

  def getLowestSetBit(self) -> int: ...

  def hashCode(self) -> int: ...

  def intValue(self) -> int: ...

  def intValueExact(self) -> int: ...

  def isProbablePrime(self, arg0: int) -> bool: ...

  def longValue(self) -> int: ...

  def longValueExact(self) -> int: ...

  def max(self, arg0: BigInteger) -> BigInteger: ...

  def min(self, arg0: BigInteger) -> BigInteger: ...

  def mod(self, arg0: BigInteger) -> BigInteger: ...

  def modInverse(self, arg0: BigInteger) -> BigInteger: ...

  def modPow(self, arg0: BigInteger, arg1: BigInteger) -> BigInteger: ...

  def multiply(self, arg0: BigInteger) -> BigInteger: ...

  def negate(self) -> BigInteger: ...

  def nextProbablePrime(self) -> BigInteger: ...

  def pow(self, arg0: int) -> BigInteger: ...

  def remainder(self, arg0: BigInteger) -> BigInteger: ...

  def setBit(self, arg0: int) -> BigInteger: ...

  def shiftLeft(self, arg0: int) -> BigInteger: ...

  def shiftRight(self, arg0: int) -> BigInteger: ...

  def shortValueExact(self) -> int: ...

  def signum(self) -> int: ...

  def sqrt(self) -> BigInteger: ...

  def sqrtAndRemainder(self) -> list[BigInteger]: ...

  def subtract(self, arg0: BigInteger) -> BigInteger: ...

  def testBit(self, arg0: int) -> bool: ...

  def toByteArray(self) -> list[int]: ...

  @overload
  def toString(self) -> str: ...

  @overload
  def toString(self, arg0: int) -> str: ...

  def xor(self, arg0: BigInteger) -> BigInteger: ...

  @staticmethod
  def probablePrime(arg0: int, arg1: Random) -> BigInteger: ...

  @staticmethod
  def valueOf(arg0: int) -> BigInteger: ...

  @overload
  def __init__(self, arg0: list[int]): ...
  @overload
  def __init__(self, arg0: str): ...
  @overload
  def __init__(self, arg0: int, arg1: list[int]): ...
  @overload
  def __init__(self, arg0: int, arg1: Random): ...
  @overload
  def __init__(self, arg0: str, arg1: int): ...
  @overload
  def __init__(self, arg0: list[int], arg1: int, arg2: int): ...
  @overload
  def __init__(self, arg0: int, arg1: int, arg2: Random): ...
  @overload
  def __init__(self, arg0: int, arg1: list[int], arg2: int, arg3: int): ...

  class UnsafeHolder: ...


class MathContext:

  DECIMAL128: MathContext

  DECIMAL32: MathContext

  DECIMAL64: MathContext

  UNLIMITED: MathContext

  def equals(self, arg0: object) -> bool: ...

  def getPrecision(self) -> int: ...

  def getRoundingMode(self) -> RoundingMode: ...

  def hashCode(self) -> int: ...

  def toString(self) -> str: ...

  @overload
  def __init__(self, arg0: int): ...
  @overload
  def __init__(self, arg0: str): ...
  @overload
  def __init__(self, arg0: int, arg1: RoundingMode): ...


class MutableBigInteger:

  def toString(self) -> str: ...


class RoundingMode(Enum):

  CEILING: RoundingMode

  DOWN: RoundingMode

  FLOOR: RoundingMode

  HALF_DOWN: RoundingMode

  HALF_EVEN: RoundingMode

  HALF_UP: RoundingMode

  UNNECESSARY: RoundingMode

  UP: RoundingMode

  @staticmethod
  @overload
  def valueOf(arg0: int) -> RoundingMode: ...

  @staticmethod
  @overload
  def valueOf(arg0: str) -> RoundingMode: ...

  @staticmethod
  def values() -> list[RoundingMode]: ...

