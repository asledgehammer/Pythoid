from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.lang import RuntimeException, Appendable, CharSequence, IllegalStateException
from java.util.stream import IntStream
from jdk.internal.ref import Cleaner

class Bits: ...


class Buffer:

  def array(self) -> object: ...

  def arrayOffset(self) -> int: ...

  def capacity(self) -> int: ...

  def clear(self) -> Buffer: ...

  def duplicate(self) -> Buffer: ...

  def flip(self) -> Buffer: ...

  def hasArray(self) -> bool: ...

  def hasRemaining(self) -> bool: ...

  def isDirect(self) -> bool: ...

  def isReadOnly(self) -> bool: ...

  @overload
  def limit(self) -> int: ...

  @overload
  def limit(self, arg0: int) -> Buffer: ...

  def mark(self) -> Buffer: ...

  @overload
  def position(self) -> int: ...

  @overload
  def position(self, arg0: int) -> Buffer: ...

  def remaining(self) -> int: ...

  def reset(self) -> Buffer: ...

  def rewind(self) -> Buffer: ...

  @overload
  def slice(self) -> Buffer: ...

  @overload
  def slice(self, arg0: int, arg1: int) -> Buffer: ...


class BufferOverflowException(RuntimeException):

  def __init__(self): ...


class BufferUnderflowException(RuntimeException):

  def __init__(self): ...


class ByteBuffer(Buffer):

  def alignedSlice(self, arg0: int) -> ByteBuffer: ...

  def alignmentOffset(self, arg0: int, arg1: int) -> int: ...

  @overload
  def array(self) -> object: ...

  @overload
  def array(self) -> list[int]: ...

  def arrayOffset(self) -> int: ...

  def asCharBuffer(self) -> CharBuffer: ...

  def asDoubleBuffer(self) -> DoubleBuffer: ...

  def asFloatBuffer(self) -> FloatBuffer: ...

  def asIntBuffer(self) -> IntBuffer: ...

  def asLongBuffer(self) -> LongBuffer: ...

  def asReadOnlyBuffer(self) -> ByteBuffer: ...

  def asShortBuffer(self) -> ShortBuffer: ...

  @overload
  def clear(self) -> Buffer: ...

  @overload
  def clear(self) -> ByteBuffer: ...

  def compact(self) -> ByteBuffer: ...

  @overload
  def compareTo(self, arg0: object) -> int: ...

  @overload
  def compareTo(self, arg0: object) -> int: ...

  @overload
  def compareTo(self, arg0: ByteBuffer) -> int: ...

  @overload
  def duplicate(self) -> ByteBuffer: ...

  @overload
  def duplicate(self) -> Buffer: ...

  def equals(self, arg0: object) -> bool: ...

  @overload
  def flip(self) -> Buffer: ...

  @overload
  def flip(self) -> ByteBuffer: ...

  @overload
  def get(self) -> int: ...

  @overload
  def get(self, arg0: list[int]) -> ByteBuffer: ...

  @overload
  def get(self, arg0: int) -> int: ...

  @overload
  def get(self, arg0: int, arg1: list[int]) -> ByteBuffer: ...

  @overload
  def get(self, arg0: list[int], arg1: int, arg2: int) -> ByteBuffer: ...

  @overload
  def get(self, arg0: int, arg1: list[int], arg2: int, arg3: int) -> ByteBuffer: ...

  @overload
  def getChar(self) -> str: ...

  @overload
  def getChar(self, arg0: int) -> str: ...

  @overload
  def getDouble(self) -> float: ...

  @overload
  def getDouble(self, arg0: int) -> float: ...

  @overload
  def getFloat(self) -> float: ...

  @overload
  def getFloat(self, arg0: int) -> float: ...

  @overload
  def getInt(self) -> int: ...

  @overload
  def getInt(self, arg0: int) -> int: ...

  @overload
  def getLong(self) -> int: ...

  @overload
  def getLong(self, arg0: int) -> int: ...

  @overload
  def getShort(self) -> int: ...

  @overload
  def getShort(self, arg0: int) -> int: ...

  def hasArray(self) -> bool: ...

  def hashCode(self) -> int: ...

  def isDirect(self) -> bool: ...

  @overload
  def limit(self, arg0: int) -> Buffer: ...

  @overload
  def limit(self, arg0: int) -> ByteBuffer: ...

  @overload
  def mark(self) -> Buffer: ...

  @overload
  def mark(self) -> ByteBuffer: ...

  def mismatch(self, arg0: ByteBuffer) -> int: ...

  @overload
  def order(self) -> ByteOrder: ...

  @overload
  def order(self, arg0: ByteOrder) -> ByteBuffer: ...

  @overload
  def position(self, arg0: int) -> Buffer: ...

  @overload
  def position(self, arg0: int) -> ByteBuffer: ...

  @overload
  def put(self, arg0: list[int]) -> ByteBuffer: ...

  @overload
  def put(self, arg0: int) -> ByteBuffer: ...

  @overload
  def put(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def put(self, arg0: int, arg1: list[int]) -> ByteBuffer: ...

  @overload
  def put(self, arg0: int, arg1: int) -> ByteBuffer: ...

  @overload
  def put(self, arg0: list[int], arg1: int, arg2: int) -> ByteBuffer: ...

  @overload
  def put(self, arg0: int, arg1: list[int], arg2: int, arg3: int) -> ByteBuffer: ...

  @overload
  def put(self, arg0: int, arg1: ByteBuffer, arg2: int, arg3: int) -> ByteBuffer: ...

  @overload
  def putChar(self, arg0: str) -> ByteBuffer: ...

  @overload
  def putChar(self, arg0: int, arg1: str) -> ByteBuffer: ...

  @overload
  def putDouble(self, arg0: float) -> ByteBuffer: ...

  @overload
  def putDouble(self, arg0: int, arg1: float) -> ByteBuffer: ...

  @overload
  def putFloat(self, arg0: float) -> ByteBuffer: ...

  @overload
  def putFloat(self, arg0: int, arg1: float) -> ByteBuffer: ...

  @overload
  def putInt(self, arg0: int) -> ByteBuffer: ...

  @overload
  def putInt(self, arg0: int, arg1: int) -> ByteBuffer: ...

  @overload
  def putLong(self, arg0: int) -> ByteBuffer: ...

  @overload
  def putLong(self, arg0: int, arg1: int) -> ByteBuffer: ...

  @overload
  def putShort(self, arg0: int) -> ByteBuffer: ...

  @overload
  def putShort(self, arg0: int, arg1: int) -> ByteBuffer: ...

  @overload
  def reset(self) -> Buffer: ...

  @overload
  def reset(self) -> ByteBuffer: ...

  @overload
  def rewind(self) -> Buffer: ...

  @overload
  def rewind(self) -> ByteBuffer: ...

  @overload
  def slice(self) -> Buffer: ...

  @overload
  def slice(self) -> ByteBuffer: ...

  @overload
  def slice(self, arg0: int, arg1: int) -> ByteBuffer: ...

  @overload
  def slice(self, arg0: int, arg1: int) -> Buffer: ...

  def toString(self) -> str: ...

  @staticmethod
  def allocate(arg0: int) -> ByteBuffer: ...

  @staticmethod
  def allocateDirect(arg0: int) -> ByteBuffer: ...

  @staticmethod
  @overload
  def wrap(arg0: list[int]) -> ByteBuffer: ...

  @staticmethod
  @overload
  def wrap(arg0: list[int], arg1: int, arg2: int) -> ByteBuffer: ...


class ByteOrder:

  BIG_ENDIAN: ByteOrder

  LITTLE_ENDIAN: ByteOrder

  def toString(self) -> str: ...

  @staticmethod
  def nativeOrder() -> ByteOrder: ...


class CharBuffer(Buffer):

  @overload
  def append(self, arg0: str) -> CharBuffer: ...

  @overload
  def append(self, arg0: str) -> Appendable: ...

  @overload
  def append(self, arg0: str) -> Appendable: ...

  @overload
  def append(self, arg0: CharSequence) -> Appendable: ...

  @overload
  def append(self, arg0: CharSequence) -> CharBuffer: ...

  @overload
  def append(self, arg0: CharSequence) -> Appendable: ...

  @overload
  def append(self, arg0: CharSequence, arg1: int, arg2: int) -> CharBuffer: ...

  @overload
  def append(self, arg0: CharSequence, arg1: int, arg2: int) -> Appendable: ...

  @overload
  def append(self, arg0: CharSequence, arg1: int, arg2: int) -> Appendable: ...

  @overload
  def array(self) -> list[str]: ...

  @overload
  def array(self) -> object: ...

  def arrayOffset(self) -> int: ...

  def asReadOnlyBuffer(self) -> CharBuffer: ...

  @overload
  def charAt(self, arg0: int) -> str: ...

  @overload
  def charAt(self, arg0: int) -> str: ...

  @overload
  def chars(self) -> IntStream: ...

  @overload
  def chars(self) -> IntStream: ...

  @overload
  def clear(self) -> CharBuffer: ...

  @overload
  def clear(self) -> Buffer: ...

  def codePoints(self) -> IntStream: ...

  def compact(self) -> CharBuffer: ...

  @overload
  def compareTo(self, arg0: object) -> int: ...

  @overload
  def compareTo(self, arg0: object) -> int: ...

  @overload
  def compareTo(self, arg0: CharBuffer) -> int: ...

  @overload
  def duplicate(self) -> CharBuffer: ...

  @overload
  def duplicate(self) -> Buffer: ...

  def equals(self, arg0: object) -> bool: ...

  @overload
  def flip(self) -> CharBuffer: ...

  @overload
  def flip(self) -> Buffer: ...

  @overload
  def get(self) -> str: ...

  @overload
  def get(self, arg0: list[str]) -> CharBuffer: ...

  @overload
  def get(self, arg0: int) -> str: ...

  @overload
  def get(self, arg0: int, arg1: list[str]) -> CharBuffer: ...

  @overload
  def get(self, arg0: list[str], arg1: int, arg2: int) -> CharBuffer: ...

  @overload
  def get(self, arg0: int, arg1: list[str], arg2: int, arg3: int) -> CharBuffer: ...

  def hasArray(self) -> bool: ...

  def hashCode(self) -> int: ...

  def isDirect(self) -> bool: ...

  @overload
  def isEmpty(self) -> bool: ...

  @overload
  def isEmpty(self) -> bool: ...

  @overload
  def length(self) -> int: ...

  @overload
  def length(self) -> int: ...

  @overload
  def limit(self, arg0: int) -> CharBuffer: ...

  @overload
  def limit(self, arg0: int) -> Buffer: ...

  @overload
  def mark(self) -> Buffer: ...

  @overload
  def mark(self) -> CharBuffer: ...

  def mismatch(self, arg0: CharBuffer) -> int: ...

  def order(self) -> ByteOrder: ...

  @overload
  def position(self, arg0: int) -> Buffer: ...

  @overload
  def position(self, arg0: int) -> CharBuffer: ...

  @overload
  def put(self, arg0: list[str]) -> CharBuffer: ...

  @overload
  def put(self, arg0: str) -> CharBuffer: ...

  @overload
  def put(self, arg0: str) -> CharBuffer: ...

  @overload
  def put(self, arg0: CharBuffer) -> CharBuffer: ...

  @overload
  def put(self, arg0: int, arg1: list[str]) -> CharBuffer: ...

  @overload
  def put(self, arg0: int, arg1: str) -> CharBuffer: ...

  @overload
  def put(self, arg0: list[str], arg1: int, arg2: int) -> CharBuffer: ...

  @overload
  def put(self, arg0: str, arg1: int, arg2: int) -> CharBuffer: ...

  @overload
  def put(self, arg0: int, arg1: list[str], arg2: int, arg3: int) -> CharBuffer: ...

  @overload
  def put(self, arg0: int, arg1: CharBuffer, arg2: int, arg3: int) -> CharBuffer: ...

  @overload
  def read(self, arg0: CharBuffer) -> int: ...

  @overload
  def read(self, arg0: CharBuffer) -> int: ...

  @overload
  def reset(self) -> CharBuffer: ...

  @overload
  def reset(self) -> Buffer: ...

  @overload
  def rewind(self) -> Buffer: ...

  @overload
  def rewind(self) -> CharBuffer: ...

  @overload
  def slice(self) -> CharBuffer: ...

  @overload
  def slice(self) -> Buffer: ...

  @overload
  def slice(self, arg0: int, arg1: int) -> CharBuffer: ...

  @overload
  def slice(self, arg0: int, arg1: int) -> Buffer: ...

  @overload
  def subSequence(self, arg0: int, arg1: int) -> CharSequence: ...

  @overload
  def subSequence(self, arg0: int, arg1: int) -> CharBuffer: ...

  @overload
  def subSequence(self, arg0: int, arg1: int) -> CharSequence: ...

  @overload
  def toString(self) -> str: ...

  @overload
  def toString(self) -> str: ...

  @staticmethod
  def allocate(arg0: int) -> CharBuffer: ...

  @staticmethod
  def compare(arg0: CharSequence, arg1: CharSequence) -> int: ...

  @staticmethod
  @overload
  def wrap(arg0: list[str]) -> CharBuffer: ...

  @staticmethod
  @overload
  def wrap(arg0: CharSequence) -> CharBuffer: ...

  @staticmethod
  @overload
  def wrap(arg0: list[str], arg1: int, arg2: int) -> CharBuffer: ...

  @staticmethod
  @overload
  def wrap(arg0: CharSequence, arg1: int, arg2: int) -> CharBuffer: ...


class DirectByteBuffer(MappedByteBuffer):

  @overload
  def address(self) -> int: ...

  @overload
  def address(self) -> int: ...

  def asCharBuffer(self) -> CharBuffer: ...

  def asDoubleBuffer(self) -> DoubleBuffer: ...

  def asFloatBuffer(self) -> FloatBuffer: ...

  def asIntBuffer(self) -> IntBuffer: ...

  def asLongBuffer(self) -> LongBuffer: ...

  def asReadOnlyBuffer(self) -> ByteBuffer: ...

  def asShortBuffer(self) -> ShortBuffer: ...

  @overload
  def attachment(self) -> object: ...

  @overload
  def attachment(self) -> object: ...

  @overload
  def cleaner(self) -> Cleaner: ...

  @overload
  def cleaner(self) -> Cleaner: ...

  @overload
  def compact(self) -> MappedByteBuffer: ...

  @overload
  def compact(self) -> ByteBuffer: ...

  @overload
  def duplicate(self) -> ByteBuffer: ...

  @overload
  def duplicate(self) -> MappedByteBuffer: ...

  @overload
  def duplicate(self) -> Buffer: ...

  @overload
  def get(self) -> int: ...

  @overload
  def get(self, arg0: int) -> int: ...

  @overload
  def getChar(self) -> str: ...

  @overload
  def getChar(self, arg0: int) -> str: ...

  @overload
  def getDouble(self) -> float: ...

  @overload
  def getDouble(self, arg0: int) -> float: ...

  @overload
  def getFloat(self) -> float: ...

  @overload
  def getFloat(self, arg0: int) -> float: ...

  @overload
  def getInt(self) -> int: ...

  @overload
  def getInt(self, arg0: int) -> int: ...

  @overload
  def getLong(self) -> int: ...

  @overload
  def getLong(self, arg0: int) -> int: ...

  @overload
  def getShort(self) -> int: ...

  @overload
  def getShort(self, arg0: int) -> int: ...

  def isDirect(self) -> bool: ...

  def isReadOnly(self) -> bool: ...

  @overload
  def put(self, arg0: int) -> ByteBuffer: ...

  @overload
  def put(self, arg0: int, arg1: int) -> ByteBuffer: ...

  @overload
  def putChar(self, arg0: str) -> ByteBuffer: ...

  @overload
  def putChar(self, arg0: int, arg1: str) -> ByteBuffer: ...

  @overload
  def putDouble(self, arg0: float) -> ByteBuffer: ...

  @overload
  def putDouble(self, arg0: int, arg1: float) -> ByteBuffer: ...

  @overload
  def putFloat(self, arg0: float) -> ByteBuffer: ...

  @overload
  def putFloat(self, arg0: int, arg1: float) -> ByteBuffer: ...

  @overload
  def putInt(self, arg0: int) -> ByteBuffer: ...

  @overload
  def putInt(self, arg0: int, arg1: int) -> ByteBuffer: ...

  @overload
  def putLong(self, arg0: int) -> ByteBuffer: ...

  @overload
  def putLong(self, arg0: int, arg1: int) -> ByteBuffer: ...

  @overload
  def putShort(self, arg0: int) -> ByteBuffer: ...

  @overload
  def putShort(self, arg0: int, arg1: int) -> ByteBuffer: ...

  @overload
  def slice(self) -> ByteBuffer: ...

  @overload
  def slice(self) -> Buffer: ...

  @overload
  def slice(self) -> MappedByteBuffer: ...

  @overload
  def slice(self, arg0: int, arg1: int) -> Buffer: ...

  @overload
  def slice(self, arg0: int, arg1: int) -> ByteBuffer: ...

  @overload
  def slice(self, arg0: int, arg1: int) -> MappedByteBuffer: ...

  class Deallocator:

    @overload
    def run(self) -> None: ...

    @overload
    def run(self) -> None: ...


class DirectByteBufferR(DirectByteBuffer):

  def address(self) -> int: ...

  def asCharBuffer(self) -> CharBuffer: ...

  def asDoubleBuffer(self) -> DoubleBuffer: ...

  def asFloatBuffer(self) -> FloatBuffer: ...

  def asIntBuffer(self) -> IntBuffer: ...

  def asLongBuffer(self) -> LongBuffer: ...

  def asReadOnlyBuffer(self) -> ByteBuffer: ...

  def asShortBuffer(self) -> ShortBuffer: ...

  def attachment(self) -> object: ...

  def cleaner(self) -> Cleaner: ...

  @overload
  def compact(self) -> MappedByteBuffer: ...

  @overload
  def compact(self) -> ByteBuffer: ...

  @overload
  def duplicate(self) -> ByteBuffer: ...

  @overload
  def duplicate(self) -> Buffer: ...

  @overload
  def duplicate(self) -> MappedByteBuffer: ...

  def isDirect(self) -> bool: ...

  def isReadOnly(self) -> bool: ...

  @overload
  def put(self, arg0: int) -> ByteBuffer: ...

  @overload
  def put(self, arg0: int, arg1: int) -> ByteBuffer: ...

  @overload
  def putChar(self, arg0: str) -> ByteBuffer: ...

  @overload
  def putChar(self, arg0: int, arg1: str) -> ByteBuffer: ...

  @overload
  def putDouble(self, arg0: float) -> ByteBuffer: ...

  @overload
  def putDouble(self, arg0: int, arg1: float) -> ByteBuffer: ...

  @overload
  def putFloat(self, arg0: float) -> ByteBuffer: ...

  @overload
  def putFloat(self, arg0: int, arg1: float) -> ByteBuffer: ...

  @overload
  def putInt(self, arg0: int) -> ByteBuffer: ...

  @overload
  def putInt(self, arg0: int, arg1: int) -> ByteBuffer: ...

  @overload
  def putLong(self, arg0: int) -> ByteBuffer: ...

  @overload
  def putLong(self, arg0: int, arg1: int) -> ByteBuffer: ...

  @overload
  def putShort(self, arg0: int) -> ByteBuffer: ...

  @overload
  def putShort(self, arg0: int, arg1: int) -> ByteBuffer: ...

  @overload
  def slice(self) -> ByteBuffer: ...

  @overload
  def slice(self) -> MappedByteBuffer: ...

  @overload
  def slice(self) -> Buffer: ...

  @overload
  def slice(self, arg0: int, arg1: int) -> ByteBuffer: ...

  @overload
  def slice(self, arg0: int, arg1: int) -> MappedByteBuffer: ...

  @overload
  def slice(self, arg0: int, arg1: int) -> Buffer: ...


class DirectIntBufferRU(DirectIntBufferU):

  def address(self) -> int: ...

  def asReadOnlyBuffer(self) -> IntBuffer: ...

  def attachment(self) -> object: ...

  def cleaner(self) -> Cleaner: ...

  def compact(self) -> IntBuffer: ...

  @overload
  def duplicate(self) -> Buffer: ...

  @overload
  def duplicate(self) -> IntBuffer: ...

  def isDirect(self) -> bool: ...

  def isReadOnly(self) -> bool: ...

  def order(self) -> ByteOrder: ...

  @overload
  def put(self, arg0: int) -> IntBuffer: ...

  @overload
  def put(self, arg0: int, arg1: int) -> IntBuffer: ...

  @overload
  def slice(self) -> Buffer: ...

  @overload
  def slice(self) -> IntBuffer: ...

  @overload
  def slice(self, arg0: int, arg1: int) -> IntBuffer: ...

  @overload
  def slice(self, arg0: int, arg1: int) -> Buffer: ...


class DirectIntBufferU(IntBuffer):

  @overload
  def address(self) -> int: ...

  @overload
  def address(self) -> int: ...

  def asReadOnlyBuffer(self) -> IntBuffer: ...

  @overload
  def attachment(self) -> object: ...

  @overload
  def attachment(self) -> object: ...

  @overload
  def cleaner(self) -> Cleaner: ...

  @overload
  def cleaner(self) -> Cleaner: ...

  def compact(self) -> IntBuffer: ...

  @overload
  def duplicate(self) -> Buffer: ...

  @overload
  def duplicate(self) -> IntBuffer: ...

  @overload
  def get(self) -> int: ...

  @overload
  def get(self, arg0: int) -> int: ...

  def isDirect(self) -> bool: ...

  def isReadOnly(self) -> bool: ...

  def order(self) -> ByteOrder: ...

  @overload
  def put(self, arg0: int) -> IntBuffer: ...

  @overload
  def put(self, arg0: int, arg1: int) -> IntBuffer: ...

  @overload
  def slice(self) -> IntBuffer: ...

  @overload
  def slice(self) -> Buffer: ...

  @overload
  def slice(self, arg0: int, arg1: int) -> Buffer: ...

  @overload
  def slice(self, arg0: int, arg1: int) -> IntBuffer: ...


class DirectLongBufferU(LongBuffer):

  @overload
  def address(self) -> int: ...

  @overload
  def address(self) -> int: ...

  def asReadOnlyBuffer(self) -> LongBuffer: ...

  @overload
  def attachment(self) -> object: ...

  @overload
  def attachment(self) -> object: ...

  @overload
  def cleaner(self) -> Cleaner: ...

  @overload
  def cleaner(self) -> Cleaner: ...

  def compact(self) -> LongBuffer: ...

  @overload
  def duplicate(self) -> Buffer: ...

  @overload
  def duplicate(self) -> LongBuffer: ...

  @overload
  def get(self) -> int: ...

  @overload
  def get(self, arg0: int) -> int: ...

  def isDirect(self) -> bool: ...

  def isReadOnly(self) -> bool: ...

  def order(self) -> ByteOrder: ...

  @overload
  def put(self, arg0: int) -> LongBuffer: ...

  @overload
  def put(self, arg0: int, arg1: int) -> LongBuffer: ...

  @overload
  def slice(self) -> LongBuffer: ...

  @overload
  def slice(self) -> Buffer: ...

  @overload
  def slice(self, arg0: int, arg1: int) -> Buffer: ...

  @overload
  def slice(self, arg0: int, arg1: int) -> LongBuffer: ...


class DoubleBuffer(Buffer):

  @overload
  def array(self) -> list[float]: ...

  @overload
  def array(self) -> object: ...

  def arrayOffset(self) -> int: ...

  def asReadOnlyBuffer(self) -> DoubleBuffer: ...

  @overload
  def clear(self) -> Buffer: ...

  @overload
  def clear(self) -> DoubleBuffer: ...

  def compact(self) -> DoubleBuffer: ...

  @overload
  def compareTo(self, arg0: object) -> int: ...

  @overload
  def compareTo(self, arg0: object) -> int: ...

  @overload
  def compareTo(self, arg0: DoubleBuffer) -> int: ...

  @overload
  def duplicate(self) -> DoubleBuffer: ...

  @overload
  def duplicate(self) -> Buffer: ...

  def equals(self, arg0: object) -> bool: ...

  @overload
  def flip(self) -> Buffer: ...

  @overload
  def flip(self) -> DoubleBuffer: ...

  @overload
  def get(self) -> float: ...

  @overload
  def get(self, arg0: list[float]) -> DoubleBuffer: ...

  @overload
  def get(self, arg0: int) -> float: ...

  @overload
  def get(self, arg0: int, arg1: list[float]) -> DoubleBuffer: ...

  @overload
  def get(self, arg0: list[float], arg1: int, arg2: int) -> DoubleBuffer: ...

  @overload
  def get(self, arg0: int, arg1: list[float], arg2: int, arg3: int) -> DoubleBuffer: ...

  def hasArray(self) -> bool: ...

  def hashCode(self) -> int: ...

  def isDirect(self) -> bool: ...

  @overload
  def limit(self, arg0: int) -> DoubleBuffer: ...

  @overload
  def limit(self, arg0: int) -> Buffer: ...

  @overload
  def mark(self) -> Buffer: ...

  @overload
  def mark(self) -> DoubleBuffer: ...

  def mismatch(self, arg0: DoubleBuffer) -> int: ...

  def order(self) -> ByteOrder: ...

  @overload
  def position(self, arg0: int) -> DoubleBuffer: ...

  @overload
  def position(self, arg0: int) -> Buffer: ...

  @overload
  def put(self, arg0: list[float]) -> DoubleBuffer: ...

  @overload
  def put(self, arg0: float) -> DoubleBuffer: ...

  @overload
  def put(self, arg0: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def put(self, arg0: int, arg1: list[float]) -> DoubleBuffer: ...

  @overload
  def put(self, arg0: int, arg1: float) -> DoubleBuffer: ...

  @overload
  def put(self, arg0: list[float], arg1: int, arg2: int) -> DoubleBuffer: ...

  @overload
  def put(self, arg0: int, arg1: list[float], arg2: int, arg3: int) -> DoubleBuffer: ...

  @overload
  def put(self, arg0: int, arg1: DoubleBuffer, arg2: int, arg3: int) -> DoubleBuffer: ...

  @overload
  def reset(self) -> Buffer: ...

  @overload
  def reset(self) -> DoubleBuffer: ...

  @overload
  def rewind(self) -> Buffer: ...

  @overload
  def rewind(self) -> DoubleBuffer: ...

  @overload
  def slice(self) -> DoubleBuffer: ...

  @overload
  def slice(self) -> Buffer: ...

  @overload
  def slice(self, arg0: int, arg1: int) -> Buffer: ...

  @overload
  def slice(self, arg0: int, arg1: int) -> DoubleBuffer: ...

  def toString(self) -> str: ...

  @staticmethod
  def allocate(arg0: int) -> DoubleBuffer: ...

  @staticmethod
  @overload
  def wrap(arg0: list[float]) -> DoubleBuffer: ...

  @staticmethod
  @overload
  def wrap(arg0: list[float], arg1: int, arg2: int) -> DoubleBuffer: ...


class FloatBuffer(Buffer):

  @overload
  def array(self) -> list[float]: ...

  @overload
  def array(self) -> object: ...

  def arrayOffset(self) -> int: ...

  def asReadOnlyBuffer(self) -> FloatBuffer: ...

  @overload
  def clear(self) -> Buffer: ...

  @overload
  def clear(self) -> FloatBuffer: ...

  def compact(self) -> FloatBuffer: ...

  @overload
  def compareTo(self, arg0: object) -> int: ...

  @overload
  def compareTo(self, arg0: object) -> int: ...

  @overload
  def compareTo(self, arg0: FloatBuffer) -> int: ...

  @overload
  def duplicate(self) -> FloatBuffer: ...

  @overload
  def duplicate(self) -> Buffer: ...

  def equals(self, arg0: object) -> bool: ...

  @overload
  def flip(self) -> Buffer: ...

  @overload
  def flip(self) -> FloatBuffer: ...

  @overload
  def get(self) -> float: ...

  @overload
  def get(self, arg0: list[float]) -> FloatBuffer: ...

  @overload
  def get(self, arg0: int) -> float: ...

  @overload
  def get(self, arg0: int, arg1: list[float]) -> FloatBuffer: ...

  @overload
  def get(self, arg0: list[float], arg1: int, arg2: int) -> FloatBuffer: ...

  @overload
  def get(self, arg0: int, arg1: list[float], arg2: int, arg3: int) -> FloatBuffer: ...

  def hasArray(self) -> bool: ...

  def hashCode(self) -> int: ...

  def isDirect(self) -> bool: ...

  @overload
  def limit(self, arg0: int) -> FloatBuffer: ...

  @overload
  def limit(self, arg0: int) -> Buffer: ...

  @overload
  def mark(self) -> Buffer: ...

  @overload
  def mark(self) -> FloatBuffer: ...

  def mismatch(self, arg0: FloatBuffer) -> int: ...

  def order(self) -> ByteOrder: ...

  @overload
  def position(self, arg0: int) -> FloatBuffer: ...

  @overload
  def position(self, arg0: int) -> Buffer: ...

  @overload
  def put(self, arg0: list[float]) -> FloatBuffer: ...

  @overload
  def put(self, arg0: float) -> FloatBuffer: ...

  @overload
  def put(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def put(self, arg0: int, arg1: list[float]) -> FloatBuffer: ...

  @overload
  def put(self, arg0: int, arg1: float) -> FloatBuffer: ...

  @overload
  def put(self, arg0: list[float], arg1: int, arg2: int) -> FloatBuffer: ...

  @overload
  def put(self, arg0: int, arg1: list[float], arg2: int, arg3: int) -> FloatBuffer: ...

  @overload
  def put(self, arg0: int, arg1: FloatBuffer, arg2: int, arg3: int) -> FloatBuffer: ...

  @overload
  def reset(self) -> Buffer: ...

  @overload
  def reset(self) -> FloatBuffer: ...

  @overload
  def rewind(self) -> Buffer: ...

  @overload
  def rewind(self) -> FloatBuffer: ...

  @overload
  def slice(self) -> FloatBuffer: ...

  @overload
  def slice(self) -> Buffer: ...

  @overload
  def slice(self, arg0: int, arg1: int) -> Buffer: ...

  @overload
  def slice(self, arg0: int, arg1: int) -> FloatBuffer: ...

  def toString(self) -> str: ...

  @staticmethod
  def allocate(arg0: int) -> FloatBuffer: ...

  @staticmethod
  @overload
  def wrap(arg0: list[float]) -> FloatBuffer: ...

  @staticmethod
  @overload
  def wrap(arg0: list[float], arg1: int, arg2: int) -> FloatBuffer: ...


class HeapByteBuffer(ByteBuffer):

  def asCharBuffer(self) -> CharBuffer: ...

  def asDoubleBuffer(self) -> DoubleBuffer: ...

  def asFloatBuffer(self) -> FloatBuffer: ...

  def asIntBuffer(self) -> IntBuffer: ...

  def asLongBuffer(self) -> LongBuffer: ...

  def asReadOnlyBuffer(self) -> ByteBuffer: ...

  def asShortBuffer(self) -> ShortBuffer: ...

  def compact(self) -> ByteBuffer: ...

  @overload
  def duplicate(self) -> ByteBuffer: ...

  @overload
  def duplicate(self) -> Buffer: ...

  @overload
  def get(self) -> int: ...

  @overload
  def get(self, arg0: int) -> int: ...

  @overload
  def get(self, arg0: list[int], arg1: int, arg2: int) -> ByteBuffer: ...

  @overload
  def get(self, arg0: int, arg1: list[int], arg2: int, arg3: int) -> ByteBuffer: ...

  @overload
  def getChar(self) -> str: ...

  @overload
  def getChar(self, arg0: int) -> str: ...

  @overload
  def getDouble(self) -> float: ...

  @overload
  def getDouble(self, arg0: int) -> float: ...

  @overload
  def getFloat(self) -> float: ...

  @overload
  def getFloat(self, arg0: int) -> float: ...

  @overload
  def getInt(self) -> int: ...

  @overload
  def getInt(self, arg0: int) -> int: ...

  @overload
  def getLong(self) -> int: ...

  @overload
  def getLong(self, arg0: int) -> int: ...

  @overload
  def getShort(self) -> int: ...

  @overload
  def getShort(self, arg0: int) -> int: ...

  def isDirect(self) -> bool: ...

  def isReadOnly(self) -> bool: ...

  @overload
  def put(self, arg0: int) -> ByteBuffer: ...

  @overload
  def put(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def put(self, arg0: int, arg1: int) -> ByteBuffer: ...

  @overload
  def put(self, arg0: list[int], arg1: int, arg2: int) -> ByteBuffer: ...

  @overload
  def put(self, arg0: int, arg1: list[int], arg2: int, arg3: int) -> ByteBuffer: ...

  @overload
  def put(self, arg0: int, arg1: ByteBuffer, arg2: int, arg3: int) -> ByteBuffer: ...

  @overload
  def putChar(self, arg0: str) -> ByteBuffer: ...

  @overload
  def putChar(self, arg0: int, arg1: str) -> ByteBuffer: ...

  @overload
  def putDouble(self, arg0: float) -> ByteBuffer: ...

  @overload
  def putDouble(self, arg0: int, arg1: float) -> ByteBuffer: ...

  @overload
  def putFloat(self, arg0: float) -> ByteBuffer: ...

  @overload
  def putFloat(self, arg0: int, arg1: float) -> ByteBuffer: ...

  @overload
  def putInt(self, arg0: int) -> ByteBuffer: ...

  @overload
  def putInt(self, arg0: int, arg1: int) -> ByteBuffer: ...

  @overload
  def putLong(self, arg0: int) -> ByteBuffer: ...

  @overload
  def putLong(self, arg0: int, arg1: int) -> ByteBuffer: ...

  @overload
  def putShort(self, arg0: int) -> ByteBuffer: ...

  @overload
  def putShort(self, arg0: int, arg1: int) -> ByteBuffer: ...

  @overload
  def slice(self) -> Buffer: ...

  @overload
  def slice(self) -> ByteBuffer: ...

  @overload
  def slice(self, arg0: int, arg1: int) -> Buffer: ...

  @overload
  def slice(self, arg0: int, arg1: int) -> ByteBuffer: ...


class HeapCharBuffer(CharBuffer):

  def asReadOnlyBuffer(self) -> CharBuffer: ...

  def compact(self) -> CharBuffer: ...

  @overload
  def duplicate(self) -> CharBuffer: ...

  @overload
  def duplicate(self) -> Buffer: ...

  @overload
  def get(self) -> str: ...

  @overload
  def get(self, arg0: int) -> str: ...

  @overload
  def get(self, arg0: list[str], arg1: int, arg2: int) -> CharBuffer: ...

  @overload
  def get(self, arg0: int, arg1: list[str], arg2: int, arg3: int) -> CharBuffer: ...

  def isDirect(self) -> bool: ...

  def isReadOnly(self) -> bool: ...

  def order(self) -> ByteOrder: ...

  @overload
  def put(self, arg0: str) -> CharBuffer: ...

  @overload
  def put(self, arg0: CharBuffer) -> CharBuffer: ...

  @overload
  def put(self, arg0: int, arg1: str) -> CharBuffer: ...

  @overload
  def put(self, arg0: list[str], arg1: int, arg2: int) -> CharBuffer: ...

  @overload
  def put(self, arg0: str, arg1: int, arg2: int) -> CharBuffer: ...

  @overload
  def put(self, arg0: int, arg1: list[str], arg2: int, arg3: int) -> CharBuffer: ...

  @overload
  def put(self, arg0: int, arg1: CharBuffer, arg2: int, arg3: int) -> CharBuffer: ...

  @overload
  def slice(self) -> CharBuffer: ...

  @overload
  def slice(self) -> Buffer: ...

  @overload
  def slice(self, arg0: int, arg1: int) -> Buffer: ...

  @overload
  def slice(self, arg0: int, arg1: int) -> CharBuffer: ...

  @overload
  def subSequence(self, arg0: int, arg1: int) -> CharBuffer: ...

  @overload
  def subSequence(self, arg0: int, arg1: int) -> CharSequence: ...


class IntBuffer(Buffer):

  @overload
  def array(self) -> list[int]: ...

  @overload
  def array(self) -> object: ...

  def arrayOffset(self) -> int: ...

  def asReadOnlyBuffer(self) -> IntBuffer: ...

  @overload
  def clear(self) -> Buffer: ...

  @overload
  def clear(self) -> IntBuffer: ...

  def compact(self) -> IntBuffer: ...

  @overload
  def compareTo(self, arg0: object) -> int: ...

  @overload
  def compareTo(self, arg0: object) -> int: ...

  @overload
  def compareTo(self, arg0: IntBuffer) -> int: ...

  @overload
  def duplicate(self) -> IntBuffer: ...

  @overload
  def duplicate(self) -> Buffer: ...

  def equals(self, arg0: object) -> bool: ...

  @overload
  def flip(self) -> Buffer: ...

  @overload
  def flip(self) -> IntBuffer: ...

  @overload
  def get(self) -> int: ...

  @overload
  def get(self, arg0: list[int]) -> IntBuffer: ...

  @overload
  def get(self, arg0: int) -> int: ...

  @overload
  def get(self, arg0: int, arg1: list[int]) -> IntBuffer: ...

  @overload
  def get(self, arg0: list[int], arg1: int, arg2: int) -> IntBuffer: ...

  @overload
  def get(self, arg0: int, arg1: list[int], arg2: int, arg3: int) -> IntBuffer: ...

  def hasArray(self) -> bool: ...

  def hashCode(self) -> int: ...

  def isDirect(self) -> bool: ...

  @overload
  def limit(self, arg0: int) -> IntBuffer: ...

  @overload
  def limit(self, arg0: int) -> Buffer: ...

  @overload
  def mark(self) -> Buffer: ...

  @overload
  def mark(self) -> IntBuffer: ...

  def mismatch(self, arg0: IntBuffer) -> int: ...

  def order(self) -> ByteOrder: ...

  @overload
  def position(self, arg0: int) -> IntBuffer: ...

  @overload
  def position(self, arg0: int) -> Buffer: ...

  @overload
  def put(self, arg0: list[int]) -> IntBuffer: ...

  @overload
  def put(self, arg0: int) -> IntBuffer: ...

  @overload
  def put(self, arg0: IntBuffer) -> IntBuffer: ...

  @overload
  def put(self, arg0: int, arg1: list[int]) -> IntBuffer: ...

  @overload
  def put(self, arg0: int, arg1: int) -> IntBuffer: ...

  @overload
  def put(self, arg0: list[int], arg1: int, arg2: int) -> IntBuffer: ...

  @overload
  def put(self, arg0: int, arg1: list[int], arg2: int, arg3: int) -> IntBuffer: ...

  @overload
  def put(self, arg0: int, arg1: IntBuffer, arg2: int, arg3: int) -> IntBuffer: ...

  @overload
  def reset(self) -> Buffer: ...

  @overload
  def reset(self) -> IntBuffer: ...

  @overload
  def rewind(self) -> Buffer: ...

  @overload
  def rewind(self) -> IntBuffer: ...

  @overload
  def slice(self) -> IntBuffer: ...

  @overload
  def slice(self) -> Buffer: ...

  @overload
  def slice(self, arg0: int, arg1: int) -> Buffer: ...

  @overload
  def slice(self, arg0: int, arg1: int) -> IntBuffer: ...

  def toString(self) -> str: ...

  @staticmethod
  def allocate(arg0: int) -> IntBuffer: ...

  @staticmethod
  @overload
  def wrap(arg0: list[int]) -> IntBuffer: ...

  @staticmethod
  @overload
  def wrap(arg0: list[int], arg1: int, arg2: int) -> IntBuffer: ...


class InvalidMarkException(IllegalStateException):

  def __init__(self): ...


class LongBuffer(Buffer):

  @overload
  def array(self) -> list[int]: ...

  @overload
  def array(self) -> object: ...

  def arrayOffset(self) -> int: ...

  def asReadOnlyBuffer(self) -> LongBuffer: ...

  @overload
  def clear(self) -> Buffer: ...

  @overload
  def clear(self) -> LongBuffer: ...

  def compact(self) -> LongBuffer: ...

  @overload
  def compareTo(self, arg0: object) -> int: ...

  @overload
  def compareTo(self, arg0: object) -> int: ...

  @overload
  def compareTo(self, arg0: LongBuffer) -> int: ...

  @overload
  def duplicate(self) -> LongBuffer: ...

  @overload
  def duplicate(self) -> Buffer: ...

  def equals(self, arg0: object) -> bool: ...

  @overload
  def flip(self) -> Buffer: ...

  @overload
  def flip(self) -> LongBuffer: ...

  @overload
  def get(self) -> int: ...

  @overload
  def get(self, arg0: list[int]) -> LongBuffer: ...

  @overload
  def get(self, arg0: int) -> int: ...

  @overload
  def get(self, arg0: int, arg1: list[int]) -> LongBuffer: ...

  @overload
  def get(self, arg0: list[int], arg1: int, arg2: int) -> LongBuffer: ...

  @overload
  def get(self, arg0: int, arg1: list[int], arg2: int, arg3: int) -> LongBuffer: ...

  def hasArray(self) -> bool: ...

  def hashCode(self) -> int: ...

  def isDirect(self) -> bool: ...

  @overload
  def limit(self, arg0: int) -> LongBuffer: ...

  @overload
  def limit(self, arg0: int) -> Buffer: ...

  @overload
  def mark(self) -> Buffer: ...

  @overload
  def mark(self) -> LongBuffer: ...

  def mismatch(self, arg0: LongBuffer) -> int: ...

  def order(self) -> ByteOrder: ...

  @overload
  def position(self, arg0: int) -> LongBuffer: ...

  @overload
  def position(self, arg0: int) -> Buffer: ...

  @overload
  def put(self, arg0: list[int]) -> LongBuffer: ...

  @overload
  def put(self, arg0: LongBuffer) -> LongBuffer: ...

  @overload
  def put(self, arg0: int) -> LongBuffer: ...

  @overload
  def put(self, arg0: int, arg1: list[int]) -> LongBuffer: ...

  @overload
  def put(self, arg0: int, arg1: int) -> LongBuffer: ...

  @overload
  def put(self, arg0: list[int], arg1: int, arg2: int) -> LongBuffer: ...

  @overload
  def put(self, arg0: int, arg1: list[int], arg2: int, arg3: int) -> LongBuffer: ...

  @overload
  def put(self, arg0: int, arg1: LongBuffer, arg2: int, arg3: int) -> LongBuffer: ...

  @overload
  def reset(self) -> Buffer: ...

  @overload
  def reset(self) -> LongBuffer: ...

  @overload
  def rewind(self) -> Buffer: ...

  @overload
  def rewind(self) -> LongBuffer: ...

  @overload
  def slice(self) -> LongBuffer: ...

  @overload
  def slice(self) -> Buffer: ...

  @overload
  def slice(self, arg0: int, arg1: int) -> Buffer: ...

  @overload
  def slice(self, arg0: int, arg1: int) -> LongBuffer: ...

  def toString(self) -> str: ...

  @staticmethod
  def allocate(arg0: int) -> LongBuffer: ...

  @staticmethod
  @overload
  def wrap(arg0: list[int]) -> LongBuffer: ...

  @staticmethod
  @overload
  def wrap(arg0: list[int], arg1: int, arg2: int) -> LongBuffer: ...


class MappedByteBuffer(ByteBuffer):

  @overload
  def clear(self) -> Buffer: ...

  @overload
  def clear(self) -> MappedByteBuffer: ...

  @overload
  def clear(self) -> ByteBuffer: ...

  @overload
  def compact(self) -> MappedByteBuffer: ...

  @overload
  def compact(self) -> ByteBuffer: ...

  @overload
  def duplicate(self) -> MappedByteBuffer: ...

  @overload
  def duplicate(self) -> Buffer: ...

  @overload
  def duplicate(self) -> ByteBuffer: ...

  @overload
  def flip(self) -> Buffer: ...

  @overload
  def flip(self) -> ByteBuffer: ...

  @overload
  def flip(self) -> MappedByteBuffer: ...

  @overload
  def force(self) -> MappedByteBuffer: ...

  @overload
  def force(self, arg0: int, arg1: int) -> MappedByteBuffer: ...

  def isLoaded(self) -> bool: ...

  @overload
  def limit(self, arg0: int) -> Buffer: ...

  @overload
  def limit(self, arg0: int) -> ByteBuffer: ...

  @overload
  def limit(self, arg0: int) -> MappedByteBuffer: ...

  def load(self) -> MappedByteBuffer: ...

  @overload
  def mark(self) -> MappedByteBuffer: ...

  @overload
  def mark(self) -> ByteBuffer: ...

  @overload
  def mark(self) -> Buffer: ...

  @overload
  def position(self, arg0: int) -> ByteBuffer: ...

  @overload
  def position(self, arg0: int) -> MappedByteBuffer: ...

  @overload
  def position(self, arg0: int) -> Buffer: ...

  @overload
  def reset(self) -> Buffer: ...

  @overload
  def reset(self) -> MappedByteBuffer: ...

  @overload
  def reset(self) -> ByteBuffer: ...

  @overload
  def rewind(self) -> MappedByteBuffer: ...

  @overload
  def rewind(self) -> Buffer: ...

  @overload
  def rewind(self) -> ByteBuffer: ...

  @overload
  def slice(self) -> ByteBuffer: ...

  @overload
  def slice(self) -> MappedByteBuffer: ...

  @overload
  def slice(self) -> Buffer: ...

  @overload
  def slice(self, arg0: int, arg1: int) -> ByteBuffer: ...

  @overload
  def slice(self, arg0: int, arg1: int) -> Buffer: ...

  @overload
  def slice(self, arg0: int, arg1: int) -> MappedByteBuffer: ...


class ShortBuffer(Buffer):

  @overload
  def array(self) -> list[int]: ...

  @overload
  def array(self) -> object: ...

  def arrayOffset(self) -> int: ...

  def asReadOnlyBuffer(self) -> ShortBuffer: ...

  @overload
  def clear(self) -> Buffer: ...

  @overload
  def clear(self) -> ShortBuffer: ...

  def compact(self) -> ShortBuffer: ...

  @overload
  def compareTo(self, arg0: object) -> int: ...

  @overload
  def compareTo(self, arg0: object) -> int: ...

  @overload
  def compareTo(self, arg0: ShortBuffer) -> int: ...

  @overload
  def duplicate(self) -> ShortBuffer: ...

  @overload
  def duplicate(self) -> Buffer: ...

  def equals(self, arg0: object) -> bool: ...

  @overload
  def flip(self) -> Buffer: ...

  @overload
  def flip(self) -> ShortBuffer: ...

  @overload
  def get(self) -> int: ...

  @overload
  def get(self, arg0: list[int]) -> ShortBuffer: ...

  @overload
  def get(self, arg0: int) -> int: ...

  @overload
  def get(self, arg0: int, arg1: list[int]) -> ShortBuffer: ...

  @overload
  def get(self, arg0: list[int], arg1: int, arg2: int) -> ShortBuffer: ...

  @overload
  def get(self, arg0: int, arg1: list[int], arg2: int, arg3: int) -> ShortBuffer: ...

  def hasArray(self) -> bool: ...

  def hashCode(self) -> int: ...

  def isDirect(self) -> bool: ...

  @overload
  def limit(self, arg0: int) -> ShortBuffer: ...

  @overload
  def limit(self, arg0: int) -> Buffer: ...

  @overload
  def mark(self) -> Buffer: ...

  @overload
  def mark(self) -> ShortBuffer: ...

  def mismatch(self, arg0: ShortBuffer) -> int: ...

  def order(self) -> ByteOrder: ...

  @overload
  def position(self, arg0: int) -> ShortBuffer: ...

  @overload
  def position(self, arg0: int) -> Buffer: ...

  @overload
  def put(self, arg0: list[int]) -> ShortBuffer: ...

  @overload
  def put(self, arg0: ShortBuffer) -> ShortBuffer: ...

  @overload
  def put(self, arg0: int) -> ShortBuffer: ...

  @overload
  def put(self, arg0: int, arg1: list[int]) -> ShortBuffer: ...

  @overload
  def put(self, arg0: int, arg1: int) -> ShortBuffer: ...

  @overload
  def put(self, arg0: list[int], arg1: int, arg2: int) -> ShortBuffer: ...

  @overload
  def put(self, arg0: int, arg1: list[int], arg2: int, arg3: int) -> ShortBuffer: ...

  @overload
  def put(self, arg0: int, arg1: ShortBuffer, arg2: int, arg3: int) -> ShortBuffer: ...

  @overload
  def reset(self) -> Buffer: ...

  @overload
  def reset(self) -> ShortBuffer: ...

  @overload
  def rewind(self) -> Buffer: ...

  @overload
  def rewind(self) -> ShortBuffer: ...

  @overload
  def slice(self) -> ShortBuffer: ...

  @overload
  def slice(self) -> Buffer: ...

  @overload
  def slice(self, arg0: int, arg1: int) -> Buffer: ...

  @overload
  def slice(self, arg0: int, arg1: int) -> ShortBuffer: ...

  def toString(self) -> str: ...

  @staticmethod
  def allocate(arg0: int) -> ShortBuffer: ...

  @staticmethod
  @overload
  def wrap(arg0: list[int]) -> ShortBuffer: ...

  @staticmethod
  @overload
  def wrap(arg0: list[int], arg1: int, arg2: int) -> ShortBuffer: ...

