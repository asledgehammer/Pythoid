from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.awt import Point, Insets, Component, Cursor, Image
from java.awt.datatransfer import Transferable, FlavorMap, DataFlavor
from java.awt.event import InputEvent, ActionEvent
from java.lang import Class, IllegalStateException
from java.util import EventObject, Iterator, List, EventListener

T = TypeVar('T', default=Any)

class Autoscroll:

  def autoscroll(self, arg0: Point) -> None: ...

  def getAutoscrollInsets(self) -> Insets: ...


class DragGestureEvent(EventObject):

  def getComponent(self) -> Component: ...

  def getDragAction(self) -> int: ...

  def getDragOrigin(self) -> Point: ...

  def getDragSource(self) -> DragSource: ...

  def getSourceAsDragGestureRecognizer(self) -> DragGestureRecognizer: ...

  def getTriggerEvent(self) -> InputEvent: ...

  def iterator(self) -> Iterator[InputEvent]: ...

  @overload
  def startDrag(self, arg0: Cursor, arg1: Transferable) -> None: ...

  @overload
  def startDrag(self, arg0: Cursor, arg1: Transferable, arg2: DragSourceListener) -> None: ...

  @overload
  def startDrag(self, arg0: Cursor, arg1: Image, arg2: Point, arg3: Transferable, arg4: DragSourceListener) -> None: ...

  @overload
  def toArray(self) -> list[object]: ...

  @overload
  def toArray(self, arg0: list[object]) -> list[object]: ...

  def __init__(self, arg0: DragGestureRecognizer, arg1: int, arg2: Point, arg3: List[InputEvent]): ...


class DragGestureListener:

  def dragGestureRecognized(self, arg0: DragGestureEvent) -> None: ...


class DragGestureRecognizer:

  def addDragGestureListener(self, arg0: DragGestureListener) -> None: ...

  def getComponent(self) -> Component: ...

  def getDragSource(self) -> DragSource: ...

  def getSourceActions(self) -> int: ...

  def getTriggerEvent(self) -> InputEvent: ...

  def removeDragGestureListener(self, arg0: DragGestureListener) -> None: ...

  def resetRecognizer(self) -> None: ...

  def setComponent(self, arg0: Component) -> None: ...

  def setSourceActions(self, arg0: int) -> None: ...


class DragSource:

  DefaultCopyDrop: Cursor

  DefaultCopyNoDrop: Cursor

  DefaultLinkDrop: Cursor

  DefaultLinkNoDrop: Cursor

  DefaultMoveDrop: Cursor

  DefaultMoveNoDrop: Cursor

  def addDragSourceListener(self, arg0: DragSourceListener) -> None: ...

  def addDragSourceMotionListener(self, arg0: DragSourceMotionListener) -> None: ...

  def createDefaultDragGestureRecognizer(self, arg0: Component, arg1: int, arg2: DragGestureListener) -> DragGestureRecognizer: ...

  def createDragGestureRecognizer(self, arg0: Class[T], arg1: Component, arg2: int, arg3: DragGestureListener) -> T: ...

  def getDragSourceListeners(self) -> list[DragSourceListener]: ...

  def getDragSourceMotionListeners(self) -> list[DragSourceMotionListener]: ...

  def getFlavorMap(self) -> FlavorMap: ...

  def getListeners(self, arg0: Class[T]) -> list[EventListener]: ...

  def removeDragSourceListener(self, arg0: DragSourceListener) -> None: ...

  def removeDragSourceMotionListener(self, arg0: DragSourceMotionListener) -> None: ...

  @overload
  def startDrag(self, arg0: DragGestureEvent, arg1: Cursor, arg2: Transferable, arg3: DragSourceListener) -> None: ...

  @overload
  def startDrag(self, arg0: DragGestureEvent, arg1: Cursor, arg2: Transferable, arg3: DragSourceListener, arg4: FlavorMap) -> None: ...

  @overload
  def startDrag(self, arg0: DragGestureEvent, arg1: Cursor, arg2: Image, arg3: Point, arg4: Transferable, arg5: DragSourceListener) -> None: ...

  @overload
  def startDrag(self, arg0: DragGestureEvent, arg1: Cursor, arg2: Image, arg3: Point, arg4: Transferable, arg5: DragSourceListener, arg6: FlavorMap) -> None: ...

  @staticmethod
  def getDefaultDragSource() -> DragSource: ...

  @staticmethod
  def getDragThreshold() -> int: ...

  @staticmethod
  def isDragImageSupported() -> bool: ...

  def __init__(self): ...


class DragSourceContext:

  def addDragSourceListener(self, arg0: DragSourceListener) -> None: ...

  @overload
  def dragDropEnd(self, arg0: DragSourceDropEvent) -> None: ...

  @overload
  def dragDropEnd(self, arg0: DragSourceDropEvent) -> None: ...

  @overload
  def dragEnter(self, arg0: DragSourceDragEvent) -> None: ...

  @overload
  def dragEnter(self, arg0: DragSourceDragEvent) -> None: ...

  @overload
  def dragExit(self, arg0: DragSourceEvent) -> None: ...

  @overload
  def dragExit(self, arg0: DragSourceEvent) -> None: ...

  @overload
  def dragMouseMoved(self, arg0: DragSourceDragEvent) -> None: ...

  @overload
  def dragMouseMoved(self, arg0: DragSourceDragEvent) -> None: ...

  @overload
  def dragOver(self, arg0: DragSourceDragEvent) -> None: ...

  @overload
  def dragOver(self, arg0: DragSourceDragEvent) -> None: ...

  @overload
  def dropActionChanged(self, arg0: DragSourceDragEvent) -> None: ...

  @overload
  def dropActionChanged(self, arg0: DragSourceDragEvent) -> None: ...

  def getComponent(self) -> Component: ...

  def getCursor(self) -> Cursor: ...

  def getDragSource(self) -> DragSource: ...

  def getSourceActions(self) -> int: ...

  def getTransferable(self) -> Transferable: ...

  def getTrigger(self) -> DragGestureEvent: ...

  def removeDragSourceListener(self, arg0: DragSourceListener) -> None: ...

  def setCursor(self, arg0: Cursor) -> None: ...

  def transferablesFlavorsChanged(self) -> None: ...

  def __init__(self, arg0: DragGestureEvent, arg1: Cursor, arg2: Image, arg3: Point, arg4: Transferable, arg5: DragSourceListener): ...


class DragSourceDragEvent(DragSourceEvent):

  def getDropAction(self) -> int: ...

  def getGestureModifiers(self) -> int: ...

  def getGestureModifiersEx(self) -> int: ...

  def getTargetActions(self) -> int: ...

  def getUserAction(self) -> int: ...

  @overload
  def __init__(self, arg0: DragSourceContext, arg1: int, arg2: int, arg3: int): ...
  @overload
  def __init__(self, arg0: DragSourceContext, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int): ...


class DragSourceDropEvent(DragSourceEvent):

  def getDropAction(self) -> int: ...

  def getDropSuccess(self) -> bool: ...

  @overload
  def __init__(self, arg0: DragSourceContext): ...
  @overload
  def __init__(self, arg0: DragSourceContext, arg1: int, arg2: bool): ...
  @overload
  def __init__(self, arg0: DragSourceContext, arg1: int, arg2: bool, arg3: int, arg4: int): ...


class DragSourceEvent(EventObject):

  def getDragSourceContext(self) -> DragSourceContext: ...

  def getLocation(self) -> Point: ...

  def getX(self) -> int: ...

  def getY(self) -> int: ...

  @overload
  def __init__(self, arg0: DragSourceContext): ...
  @overload
  def __init__(self, arg0: DragSourceContext, arg1: int, arg2: int): ...


class DragSourceListener:

  def dragDropEnd(self, arg0: DragSourceDropEvent) -> None: ...

  def dragEnter(self, arg0: DragSourceDragEvent) -> None: ...

  def dragExit(self, arg0: DragSourceEvent) -> None: ...

  def dragOver(self, arg0: DragSourceDragEvent) -> None: ...

  def dropActionChanged(self, arg0: DragSourceDragEvent) -> None: ...


class DragSourceMotionListener:

  def dragMouseMoved(self, arg0: DragSourceDragEvent) -> None: ...


class DropTarget:

  def addDropTargetListener(self, arg0: DropTargetListener) -> None: ...

  def addNotify(self) -> None: ...

  @overload
  def dragEnter(self, arg0: DropTargetDragEvent) -> None: ...

  @overload
  def dragEnter(self, arg0: DropTargetDragEvent) -> None: ...

  @overload
  def dragExit(self, arg0: DropTargetEvent) -> None: ...

  @overload
  def dragExit(self, arg0: DropTargetEvent) -> None: ...

  @overload
  def dragOver(self, arg0: DropTargetDragEvent) -> None: ...

  @overload
  def dragOver(self, arg0: DropTargetDragEvent) -> None: ...

  @overload
  def drop(self, arg0: DropTargetDropEvent) -> None: ...

  @overload
  def drop(self, arg0: DropTargetDropEvent) -> None: ...

  @overload
  def dropActionChanged(self, arg0: DropTargetDragEvent) -> None: ...

  @overload
  def dropActionChanged(self, arg0: DropTargetDragEvent) -> None: ...

  def getComponent(self) -> Component: ...

  def getDefaultActions(self) -> int: ...

  def getDropTargetContext(self) -> DropTargetContext: ...

  def getFlavorMap(self) -> FlavorMap: ...

  def isActive(self) -> bool: ...

  def removeDropTargetListener(self, arg0: DropTargetListener) -> None: ...

  def removeNotify(self) -> None: ...

  def setActive(self, arg0: bool) -> None: ...

  def setComponent(self, arg0: Component) -> None: ...

  def setDefaultActions(self, arg0: int) -> None: ...

  def setFlavorMap(self, arg0: FlavorMap) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: Component, arg1: DropTargetListener): ...
  @overload
  def __init__(self, arg0: Component, arg1: int, arg2: DropTargetListener): ...
  @overload
  def __init__(self, arg0: Component, arg1: int, arg2: DropTargetListener, arg3: bool): ...
  @overload
  def __init__(self, arg0: Component, arg1: int, arg2: DropTargetListener, arg3: bool, arg4: FlavorMap): ...

  class DropTargetAutoScroller:

    @overload
    def actionPerformed(self, arg0: ActionEvent) -> None: ...

    @overload
    def actionPerformed(self, arg0: ActionEvent) -> None: ...


class DropTargetContext:

  def dropComplete(self, arg0: bool) -> None: ...

  def getComponent(self) -> Component: ...

  def getDropTarget(self) -> DropTarget: ...

  class TransferableProxy:

    @overload
    def getTransferData(self, arg0: DataFlavor) -> object: ...

    @overload
    def getTransferData(self, arg0: DataFlavor) -> object: ...

    @overload
    def getTransferDataFlavors(self) -> list[DataFlavor]: ...

    @overload
    def getTransferDataFlavors(self) -> list[DataFlavor]: ...

    @overload
    def isDataFlavorSupported(self, arg0: DataFlavor) -> bool: ...

    @overload
    def isDataFlavorSupported(self, arg0: DataFlavor) -> bool: ...


class DropTargetDragEvent(DropTargetEvent):

  def acceptDrag(self, arg0: int) -> None: ...

  def getCurrentDataFlavors(self) -> list[DataFlavor]: ...

  def getCurrentDataFlavorsAsList(self) -> List[DataFlavor]: ...

  def getDropAction(self) -> int: ...

  def getLocation(self) -> Point: ...

  def getSourceActions(self) -> int: ...

  def getTransferable(self) -> Transferable: ...

  def isDataFlavorSupported(self, arg0: DataFlavor) -> bool: ...

  def rejectDrag(self) -> None: ...

  def __init__(self, arg0: DropTargetContext, arg1: Point, arg2: int, arg3: int): ...


class DropTargetDropEvent(DropTargetEvent):

  def acceptDrop(self, arg0: int) -> None: ...

  def dropComplete(self, arg0: bool) -> None: ...

  def getCurrentDataFlavors(self) -> list[DataFlavor]: ...

  def getCurrentDataFlavorsAsList(self) -> List[DataFlavor]: ...

  def getDropAction(self) -> int: ...

  def getLocation(self) -> Point: ...

  def getSourceActions(self) -> int: ...

  def getTransferable(self) -> Transferable: ...

  def isDataFlavorSupported(self, arg0: DataFlavor) -> bool: ...

  def isLocalTransfer(self) -> bool: ...

  def rejectDrop(self) -> None: ...

  @overload
  def __init__(self, arg0: DropTargetContext, arg1: Point, arg2: int, arg3: int): ...
  @overload
  def __init__(self, arg0: DropTargetContext, arg1: Point, arg2: int, arg3: int, arg4: bool): ...


class DropTargetEvent(EventObject):

  def getDropTargetContext(self) -> DropTargetContext: ...

  def __init__(self, arg0: DropTargetContext): ...


class DropTargetListener:

  def dragEnter(self, arg0: DropTargetDragEvent) -> None: ...

  def dragExit(self, arg0: DropTargetEvent) -> None: ...

  def dragOver(self, arg0: DropTargetDragEvent) -> None: ...

  def drop(self, arg0: DropTargetDropEvent) -> None: ...

  def dropActionChanged(self, arg0: DropTargetDragEvent) -> None: ...


class InvalidDnDOperationException(IllegalStateException):

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: str): ...

