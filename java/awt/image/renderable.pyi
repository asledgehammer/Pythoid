from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.awt import Shape, RenderingHints
from java.awt.geom import AffineTransform
from java.awt.image import RenderedImage
from java.util import Vector

class RenderContext:

  def clone(self) -> object: ...

  def concatenateTransform(self, arg0: AffineTransform) -> None: ...

  def concetenateTransform(self, arg0: AffineTransform) -> None: ...

  def getAreaOfInterest(self) -> Shape: ...

  def getRenderingHints(self) -> RenderingHints: ...

  def getTransform(self) -> AffineTransform: ...

  def preConcatenateTransform(self, arg0: AffineTransform) -> None: ...

  def preConcetenateTransform(self, arg0: AffineTransform) -> None: ...

  def setAreaOfInterest(self, arg0: Shape) -> None: ...

  def setRenderingHints(self, arg0: RenderingHints) -> None: ...

  def setTransform(self, arg0: AffineTransform) -> None: ...

  @overload
  def __init__(self, arg0: AffineTransform): ...
  @overload
  def __init__(self, arg0: AffineTransform, arg1: RenderingHints): ...
  @overload
  def __init__(self, arg0: AffineTransform, arg1: Shape): ...
  @overload
  def __init__(self, arg0: AffineTransform, arg1: Shape, arg2: RenderingHints): ...


class RenderableImage:

  HINTS_OBSERVED: str

  def createDefaultRendering(self) -> RenderedImage: ...

  def createRendering(self, arg0: RenderContext) -> RenderedImage: ...

  def createScaledRendering(self, arg0: int, arg1: int, arg2: RenderingHints) -> RenderedImage: ...

  def getHeight(self) -> float: ...

  def getMinX(self) -> float: ...

  def getMinY(self) -> float: ...

  def getProperty(self, arg0: str) -> object: ...

  def getPropertyNames(self) -> list[str]: ...

  def getSources(self) -> Vector[RenderableImage]: ...

  def getWidth(self) -> float: ...

  def isDynamic(self) -> bool: ...

