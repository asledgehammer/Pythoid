from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.io import Reader, ObjectInput, ObjectOutput
from java.lang import Class, ClassLoader, Exception
from java.util import EventObject, Map, List, Enumeration

class Clipboard:

  def addFlavorListener(self, arg0: FlavorListener) -> None: ...

  def getAvailableDataFlavors(self) -> list[DataFlavor]: ...

  def getContents(self, arg0: object) -> Transferable: ...

  def getData(self, arg0: DataFlavor) -> object: ...

  def getFlavorListeners(self) -> list[FlavorListener]: ...

  def getName(self) -> str: ...

  def isDataFlavorAvailable(self, arg0: DataFlavor) -> bool: ...

  def removeFlavorListener(self, arg0: FlavorListener) -> None: ...

  def setContents(self, arg0: Transferable, arg1: ClipboardOwner) -> None: ...

  def __init__(self, arg0: str): ...


class ClipboardOwner:

  def lostOwnership(self, arg0: Clipboard, arg1: Transferable) -> None: ...


class DataFlavor:

  allHtmlFlavor: DataFlavor

  fragmentHtmlFlavor: DataFlavor

  imageFlavor: DataFlavor

  javaFileListFlavor: DataFlavor

  javaJVMLocalObjectMimeType: str

  javaRemoteObjectMimeType: str

  javaSerializedObjectMimeType: str

  plainTextFlavor: DataFlavor

  selectionHtmlFlavor: DataFlavor

  stringFlavor: DataFlavor

  def clone(self) -> object: ...

  @overload
  def equals(self, arg0: DataFlavor) -> bool: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def equals(self, arg0: str) -> bool: ...

  def getDefaultRepresentationClass(self) -> Class[Any]: ...

  def getDefaultRepresentationClassAsString(self) -> str: ...

  def getHumanPresentableName(self) -> str: ...

  def getMimeType(self) -> str: ...

  def getParameter(self, arg0: str) -> str: ...

  def getPrimaryType(self) -> str: ...

  def getReaderForText(self, arg0: Transferable) -> Reader: ...

  def getRepresentationClass(self) -> Class[Any]: ...

  def getSubType(self) -> str: ...

  def hashCode(self) -> int: ...

  def isFlavorJavaFileListType(self) -> bool: ...

  def isFlavorRemoteObjectType(self) -> bool: ...

  def isFlavorSerializedObjectType(self) -> bool: ...

  def isFlavorTextType(self) -> bool: ...

  @overload
  def isMimeTypeEqual(self, arg0: DataFlavor) -> bool: ...

  @overload
  def isMimeTypeEqual(self, arg0: str) -> bool: ...

  def isMimeTypeSerializedObject(self) -> bool: ...

  def isRepresentationClassByteBuffer(self) -> bool: ...

  def isRepresentationClassCharBuffer(self) -> bool: ...

  def isRepresentationClassInputStream(self) -> bool: ...

  def isRepresentationClassReader(self) -> bool: ...

  def isRepresentationClassRemote(self) -> bool: ...

  def isRepresentationClassSerializable(self) -> bool: ...

  def match(self, arg0: DataFlavor) -> bool: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  def setHumanPresentableName(self, arg0: str) -> None: ...

  def toString(self) -> str: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @staticmethod
  def getTextPlainUnicodeFlavor() -> DataFlavor: ...

  @staticmethod
  def selectBestTextFlavor(arg0: list[DataFlavor]) -> DataFlavor: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: str): ...
  @overload
  def __init__(self, arg0: Class[Any], arg1: str): ...
  @overload
  def __init__(self, arg0: str, arg1: str): ...
  @overload
  def __init__(self, arg0: str, arg1: str, arg2: ClassLoader): ...


class FlavorEvent(EventObject):

  def __init__(self, arg0: Clipboard): ...


class FlavorListener:

  def flavorsChanged(self, arg0: FlavorEvent) -> None: ...


class FlavorMap:

  def getFlavorsForNatives(self, arg0: list[str]) -> Map[str, DataFlavor]: ...

  def getNativesForFlavors(self, arg0: list[DataFlavor]) -> Map[DataFlavor, str]: ...


class FlavorTable:

  def getFlavorsForNative(self, arg0: str) -> List[DataFlavor]: ...

  def getFlavorsForNatives(self, arg0: list[str]) -> Map[str, DataFlavor]: ...

  def getNativesForFlavor(self, arg0: DataFlavor) -> List[str]: ...

  def getNativesForFlavors(self, arg0: list[DataFlavor]) -> Map[DataFlavor, str]: ...


class MimeType:

  def clone(self) -> object: ...

  def equals(self, arg0: object) -> bool: ...

  def getBaseType(self) -> str: ...

  def getParameter(self, arg0: str) -> str: ...

  def getParameters(self) -> MimeTypeParameterList: ...

  def getPrimaryType(self) -> str: ...

  def getSubType(self) -> str: ...

  def hashCode(self) -> int: ...

  @overload
  def match(self, arg0: MimeType) -> bool: ...

  @overload
  def match(self, arg0: str) -> bool: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  def removeParameter(self, arg0: str) -> None: ...

  def setParameter(self, arg0: str, arg1: str) -> None: ...

  def toString(self) -> str: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: str): ...
  @overload
  def __init__(self, arg0: str, arg1: str): ...
  @overload
  def __init__(self, arg0: str, arg1: str, arg2: MimeTypeParameterList): ...


class MimeTypeParameterList:

  def clone(self) -> object: ...

  def equals(self, arg0: object) -> bool: ...

  def get(self, arg0: str) -> str: ...

  def getNames(self) -> Enumeration[str]: ...

  def hashCode(self) -> int: ...

  def isEmpty(self) -> bool: ...

  def remove(self, arg0: str) -> None: ...

  def set(self, arg0: str, arg1: str) -> None: ...

  def size(self) -> int: ...

  def toString(self) -> str: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: str): ...


class MimeTypeParseException(Exception):

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: str): ...


class Transferable:

  def getTransferData(self, arg0: DataFlavor) -> object: ...

  def getTransferDataFlavors(self) -> list[DataFlavor]: ...

  def isDataFlavorSupported(self, arg0: DataFlavor) -> bool: ...


class UnsupportedFlavorException(Exception):

  def __init__(self, arg0: DataFlavor): ...

