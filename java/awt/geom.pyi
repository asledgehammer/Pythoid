from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.awt import Shape, Rectangle
from java.lang import Exception

class AffineTransform:

  TYPE_FLIP: int

  TYPE_GENERAL_ROTATION: int

  TYPE_GENERAL_SCALE: int

  TYPE_GENERAL_TRANSFORM: int

  TYPE_IDENTITY: int

  TYPE_MASK_ROTATION: int

  TYPE_MASK_SCALE: int

  TYPE_QUADRANT_ROTATION: int

  TYPE_TRANSLATION: int

  TYPE_UNIFORM_SCALE: int

  def clone(self) -> object: ...

  def concatenate(self, arg0: AffineTransform) -> None: ...

  def createInverse(self) -> AffineTransform: ...

  def createTransformedShape(self, arg0: Shape) -> Shape: ...

  @overload
  def deltaTransform(self, arg0: Point2D, arg1: Point2D) -> Point2D: ...

  @overload
  def deltaTransform(self, arg0: list[float], arg1: int, arg2: list[float], arg3: int, arg4: int) -> None: ...

  def equals(self, arg0: object) -> bool: ...

  def getDeterminant(self) -> float: ...

  def getMatrix(self, arg0: list[float]) -> None: ...

  def getScaleX(self) -> float: ...

  def getScaleY(self) -> float: ...

  def getShearX(self) -> float: ...

  def getShearY(self) -> float: ...

  def getTranslateX(self) -> float: ...

  def getTranslateY(self) -> float: ...

  def getType(self) -> int: ...

  def hashCode(self) -> int: ...

  @overload
  def inverseTransform(self, arg0: Point2D, arg1: Point2D) -> Point2D: ...

  @overload
  def inverseTransform(self, arg0: list[float], arg1: int, arg2: list[float], arg3: int, arg4: int) -> None: ...

  def invert(self) -> None: ...

  def isIdentity(self) -> bool: ...

  def preConcatenate(self, arg0: AffineTransform) -> None: ...

  @overload
  def quadrantRotate(self, arg0: int) -> None: ...

  @overload
  def quadrantRotate(self, arg0: int, arg1: float, arg2: float) -> None: ...

  @overload
  def rotate(self, arg0: float) -> None: ...

  @overload
  def rotate(self, arg0: float, arg1: float) -> None: ...

  @overload
  def rotate(self, arg0: float, arg1: float, arg2: float) -> None: ...

  @overload
  def rotate(self, arg0: float, arg1: float, arg2: float, arg3: float) -> None: ...

  def scale(self, arg0: float, arg1: float) -> None: ...

  def setToIdentity(self) -> None: ...

  @overload
  def setToQuadrantRotation(self, arg0: int) -> None: ...

  @overload
  def setToQuadrantRotation(self, arg0: int, arg1: float, arg2: float) -> None: ...

  @overload
  def setToRotation(self, arg0: float) -> None: ...

  @overload
  def setToRotation(self, arg0: float, arg1: float) -> None: ...

  @overload
  def setToRotation(self, arg0: float, arg1: float, arg2: float) -> None: ...

  @overload
  def setToRotation(self, arg0: float, arg1: float, arg2: float, arg3: float) -> None: ...

  def setToScale(self, arg0: float, arg1: float) -> None: ...

  def setToShear(self, arg0: float, arg1: float) -> None: ...

  def setToTranslation(self, arg0: float, arg1: float) -> None: ...

  @overload
  def setTransform(self, arg0: AffineTransform) -> None: ...

  @overload
  def setTransform(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> None: ...

  def shear(self, arg0: float, arg1: float) -> None: ...

  def toString(self) -> str: ...

  @overload
  def transform(self, arg0: Point2D, arg1: Point2D) -> Point2D: ...

  @overload
  def transform(self, arg0: list[float], arg1: int, arg2: list[float], arg3: int, arg4: int) -> None: ...

  @overload
  def transform(self, arg0: list[float], arg1: int, arg2: list[float], arg3: int, arg4: int) -> None: ...

  @overload
  def transform(self, arg0: list[float], arg1: int, arg2: list[float], arg3: int, arg4: int) -> None: ...

  @overload
  def transform(self, arg0: list[float], arg1: int, arg2: list[float], arg3: int, arg4: int) -> None: ...

  @overload
  def transform(self, arg0: list[Point2D], arg1: int, arg2: list[Point2D], arg3: int, arg4: int) -> None: ...

  def translate(self, arg0: float, arg1: float) -> None: ...

  @staticmethod
  @overload
  def getQuadrantRotateInstance(arg0: int) -> AffineTransform: ...

  @staticmethod
  @overload
  def getQuadrantRotateInstance(arg0: int, arg1: float, arg2: float) -> AffineTransform: ...

  @staticmethod
  @overload
  def getRotateInstance(arg0: float) -> AffineTransform: ...

  @staticmethod
  @overload
  def getRotateInstance(arg0: float, arg1: float) -> AffineTransform: ...

  @staticmethod
  @overload
  def getRotateInstance(arg0: float, arg1: float, arg2: float) -> AffineTransform: ...

  @staticmethod
  @overload
  def getRotateInstance(arg0: float, arg1: float, arg2: float, arg3: float) -> AffineTransform: ...

  @staticmethod
  def getScaleInstance(arg0: float, arg1: float) -> AffineTransform: ...

  @staticmethod
  def getShearInstance(arg0: float, arg1: float) -> AffineTransform: ...

  @staticmethod
  def getTranslateInstance(arg0: float, arg1: float) -> AffineTransform: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: list[float]): ...
  @overload
  def __init__(self, arg0: list[float]): ...
  @overload
  def __init__(self, arg0: AffineTransform): ...
  @overload
  def __init__(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float): ...
  @overload
  def __init__(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float): ...


class Dimension2D:

  def clone(self) -> object: ...

  def getHeight(self) -> float: ...

  def getWidth(self) -> float: ...

  @overload
  def setSize(self, arg0: Dimension2D) -> None: ...

  @overload
  def setSize(self, arg0: float, arg1: float) -> None: ...


class GeneralPath(Path2D.Float):

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: int): ...
  @overload
  def __init__(self, arg0: Shape): ...
  @overload
  def __init__(self, arg0: int, arg1: int): ...


class Line2D:

  def clone(self) -> object: ...

  @overload
  def contains(self, arg0: Point2D) -> bool: ...

  @overload
  def contains(self, arg0: Point2D) -> bool: ...

  @overload
  def contains(self, arg0: Rectangle2D) -> bool: ...

  @overload
  def contains(self, arg0: Rectangle2D) -> bool: ...

  @overload
  def contains(self, arg0: float, arg1: float) -> bool: ...

  @overload
  def contains(self, arg0: float, arg1: float) -> bool: ...

  @overload
  def contains(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool: ...

  @overload
  def contains(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool: ...

  @overload
  def getBounds(self) -> Rectangle: ...

  @overload
  def getBounds(self) -> Rectangle: ...

  def getBounds2D(self) -> Rectangle2D: ...

  def getP1(self) -> Point2D: ...

  def getP2(self) -> Point2D: ...

  @overload
  def getPathIterator(self, arg0: AffineTransform) -> PathIterator: ...

  @overload
  def getPathIterator(self, arg0: AffineTransform) -> PathIterator: ...

  @overload
  def getPathIterator(self, arg0: AffineTransform, arg1: float) -> PathIterator: ...

  @overload
  def getPathIterator(self, arg0: AffineTransform, arg1: float) -> PathIterator: ...

  def getX1(self) -> float: ...

  def getX2(self) -> float: ...

  def getY1(self) -> float: ...

  def getY2(self) -> float: ...

  @overload
  def intersects(self, arg0: Rectangle2D) -> bool: ...

  @overload
  def intersects(self, arg0: Rectangle2D) -> bool: ...

  @overload
  def intersects(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool: ...

  @overload
  def intersects(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool: ...

  @overload
  def intersectsLine(self, arg0: Line2D) -> bool: ...

  @overload
  def intersectsLine(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool: ...

  @overload
  def ptLineDist(self, arg0: Point2D) -> float: ...

  @overload
  def ptLineDist(self, arg0: float, arg1: float) -> float: ...

  @overload
  def ptLineDistSq(self, arg0: Point2D) -> float: ...

  @overload
  def ptLineDistSq(self, arg0: float, arg1: float) -> float: ...

  @overload
  def ptSegDist(self, arg0: Point2D) -> float: ...

  @overload
  def ptSegDist(self, arg0: float, arg1: float) -> float: ...

  @overload
  def ptSegDistSq(self, arg0: Point2D) -> float: ...

  @overload
  def ptSegDistSq(self, arg0: float, arg1: float) -> float: ...

  @overload
  def relativeCCW(self, arg0: Point2D) -> int: ...

  @overload
  def relativeCCW(self, arg0: float, arg1: float) -> int: ...

  @overload
  def setLine(self, arg0: Line2D) -> None: ...

  @overload
  def setLine(self, arg0: Point2D, arg1: Point2D) -> None: ...

  @overload
  def setLine(self, arg0: float, arg1: float, arg2: float, arg3: float) -> None: ...

  @staticmethod
  def linesIntersect(arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float) -> bool: ...

  class Double(Line2D):

    def getBounds2D(self) -> Rectangle2D: ...

    def getP1(self) -> Point2D: ...

    def getP2(self) -> Point2D: ...

    def getX1(self) -> float: ...

    def getX2(self) -> float: ...

    def getY1(self) -> float: ...

    def getY2(self) -> float: ...

    def setLine(self, arg0: float, arg1: float, arg2: float, arg3: float) -> None: ...

    @overload
    def __init__(self):
      self.x1: float

      self.x2: float

      self.y1: float

      self.y2: float

    @overload
    def __init__(self, arg0: Point2D, arg1: Point2D): ...
    @overload
    def __init__(self, arg0: float, arg1: float, arg2: float, arg3: float): ...

  class Float(Line2D):

    def getBounds2D(self) -> Rectangle2D: ...

    def getP1(self) -> Point2D: ...

    def getP2(self) -> Point2D: ...

    def getX1(self) -> float: ...

    def getX2(self) -> float: ...

    def getY1(self) -> float: ...

    def getY2(self) -> float: ...

    @overload
    def setLine(self, arg0: float, arg1: float, arg2: float, arg3: float) -> None: ...

    @overload
    def setLine(self, arg0: float, arg1: float, arg2: float, arg3: float) -> None: ...

    @overload
    def __init__(self):
      self.x1: float

      self.x2: float

      self.y1: float

      self.y2: float

    @overload
    def __init__(self, arg0: Point2D, arg1: Point2D): ...
    @overload
    def __init__(self, arg0: float, arg1: float, arg2: float, arg3: float): ...


class NoninvertibleTransformException(Exception):

  def __init__(self, arg0: str): ...


class Path2D:

  WIND_EVEN_ODD: int

  WIND_NON_ZERO: int

  @overload
  def append(self, arg0: Shape, arg1: bool) -> None: ...

  @overload
  def append(self, arg0: PathIterator, arg1: bool) -> None: ...

  def clone(self) -> object: ...

  def closePath(self) -> None: ...

  @overload
  def contains(self, arg0: Point2D) -> bool: ...

  @overload
  def contains(self, arg0: Point2D) -> bool: ...

  @overload
  def contains(self, arg0: Rectangle2D) -> bool: ...

  @overload
  def contains(self, arg0: Rectangle2D) -> bool: ...

  @overload
  def contains(self, arg0: float, arg1: float) -> bool: ...

  @overload
  def contains(self, arg0: float, arg1: float) -> bool: ...

  @overload
  def contains(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool: ...

  @overload
  def contains(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool: ...

  def createTransformedShape(self, arg0: AffineTransform) -> Shape: ...

  def curveTo(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> None: ...

  @overload
  def getBounds(self) -> Rectangle: ...

  @overload
  def getBounds(self) -> Rectangle: ...

  def getBounds2D(self) -> Rectangle2D: ...

  def getCurrentPoint(self) -> Point2D: ...

  @overload
  def getPathIterator(self, arg0: AffineTransform) -> PathIterator: ...

  @overload
  def getPathIterator(self, arg0: AffineTransform, arg1: float) -> PathIterator: ...

  @overload
  def getPathIterator(self, arg0: AffineTransform, arg1: float) -> PathIterator: ...

  def getWindingRule(self) -> int: ...

  @overload
  def intersects(self, arg0: Rectangle2D) -> bool: ...

  @overload
  def intersects(self, arg0: Rectangle2D) -> bool: ...

  @overload
  def intersects(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool: ...

  @overload
  def intersects(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool: ...

  def lineTo(self, arg0: float, arg1: float) -> None: ...

  def moveTo(self, arg0: float, arg1: float) -> None: ...

  def quadTo(self, arg0: float, arg1: float, arg2: float, arg3: float) -> None: ...

  def reset(self) -> None: ...

  def setWindingRule(self, arg0: int) -> None: ...

  def transform(self, arg0: AffineTransform) -> None: ...

  def trimToSize(self) -> None: ...

  class Double(Path2D):

    def append(self, arg0: PathIterator, arg1: bool) -> None: ...

    def clone(self) -> object: ...

    def curveTo(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> None: ...

    def getBounds2D(self) -> Rectangle2D: ...

    def getPathIterator(self, arg0: AffineTransform) -> PathIterator: ...

    def lineTo(self, arg0: float, arg1: float) -> None: ...

    def moveTo(self, arg0: float, arg1: float) -> None: ...

    def quadTo(self, arg0: float, arg1: float, arg2: float, arg3: float) -> None: ...

    def transform(self, arg0: AffineTransform) -> None: ...

    def trimToSize(self) -> None: ...

    @overload
    def __init__(self): ...
    @overload
    def __init__(self, arg0: int): ...
    @overload
    def __init__(self, arg0: Shape): ...
    @overload
    def __init__(self, arg0: int, arg1: int): ...
    @overload
    def __init__(self, arg0: Shape, arg1: AffineTransform): ...

    class CopyIterator(Path2D.Iterator):

      @overload
      def currentSegment(self, arg0: list[float]) -> int: ...

      @overload
      def currentSegment(self, arg0: list[float]) -> int: ...

    class TxIterator(Path2D.Iterator):

      @overload
      def currentSegment(self, arg0: list[float]) -> int: ...

      @overload
      def currentSegment(self, arg0: list[float]) -> int: ...

  class Float(Path2D):

    def append(self, arg0: PathIterator, arg1: bool) -> None: ...

    def clone(self) -> object: ...

    @overload
    def curveTo(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> None: ...

    @overload
    def curveTo(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> None: ...

    def getBounds2D(self) -> Rectangle2D: ...

    def getPathIterator(self, arg0: AffineTransform) -> PathIterator: ...

    @overload
    def lineTo(self, arg0: float, arg1: float) -> None: ...

    @overload
    def lineTo(self, arg0: float, arg1: float) -> None: ...

    @overload
    def moveTo(self, arg0: float, arg1: float) -> None: ...

    @overload
    def moveTo(self, arg0: float, arg1: float) -> None: ...

    @overload
    def quadTo(self, arg0: float, arg1: float, arg2: float, arg3: float) -> None: ...

    @overload
    def quadTo(self, arg0: float, arg1: float, arg2: float, arg3: float) -> None: ...

    def transform(self, arg0: AffineTransform) -> None: ...

    def trimToSize(self) -> None: ...

    @overload
    def __init__(self): ...
    @overload
    def __init__(self, arg0: int): ...
    @overload
    def __init__(self, arg0: Shape): ...
    @overload
    def __init__(self, arg0: int, arg1: int): ...
    @overload
    def __init__(self, arg0: Shape, arg1: AffineTransform): ...

    class CopyIterator(Path2D.Iterator):

      @overload
      def currentSegment(self, arg0: list[float]) -> int: ...

      @overload
      def currentSegment(self, arg0: list[float]) -> int: ...

    class TxIterator(Path2D.Iterator):

      @overload
      def currentSegment(self, arg0: list[float]) -> int: ...

      @overload
      def currentSegment(self, arg0: list[float]) -> int: ...

  class Iterator:

    SEG_CLOSE: int

    SEG_CUBICTO: int

    SEG_LINETO: int

    SEG_MOVETO: int

    SEG_QUADTO: int

    WIND_EVEN_ODD: int

    WIND_NON_ZERO: int

    @overload
    def currentSegment(self, arg0: list[float]) -> int: ...

    @overload
    def currentSegment(self, arg0: list[float]) -> int: ...

    @overload
    def getWindingRule(self) -> int: ...

    @overload
    def getWindingRule(self) -> int: ...

    @overload
    def isDone(self) -> bool: ...

    @overload
    def isDone(self) -> bool: ...

    @overload
    def next(self) -> None: ...

    @overload
    def next(self) -> None: ...


class PathIterator:

  SEG_CLOSE: int

  SEG_CUBICTO: int

  SEG_LINETO: int

  SEG_MOVETO: int

  SEG_QUADTO: int

  WIND_EVEN_ODD: int

  WIND_NON_ZERO: int

  @overload
  def currentSegment(self, arg0: list[float]) -> int: ...

  @overload
  def currentSegment(self, arg0: list[float]) -> int: ...

  def getWindingRule(self) -> int: ...

  def isDone(self) -> bool: ...

  def next(self) -> None: ...


class Point2D:

  def clone(self) -> object: ...

  @overload
  def distance(self, arg0: Point2D) -> float: ...

  @overload
  def distance(self, arg0: float, arg1: float) -> float: ...

  @overload
  def distanceSq(self, arg0: Point2D) -> float: ...

  @overload
  def distanceSq(self, arg0: float, arg1: float) -> float: ...

  def equals(self, arg0: object) -> bool: ...

  def getX(self) -> float: ...

  def getY(self) -> float: ...

  def hashCode(self) -> int: ...

  @overload
  def setLocation(self, arg0: Point2D) -> None: ...

  @overload
  def setLocation(self, arg0: float, arg1: float) -> None: ...

  class Double(Point2D):

    def getX(self) -> float: ...

    def getY(self) -> float: ...

    def setLocation(self, arg0: float, arg1: float) -> None: ...

    def toString(self) -> str: ...

    @overload
    def __init__(self):
      self.x: float

      self.y: float

    @overload
    def __init__(self, arg0: float, arg1: float): ...

  class Float(Point2D):

    def getX(self) -> float: ...

    def getY(self) -> float: ...

    @overload
    def setLocation(self, arg0: float, arg1: float) -> None: ...

    @overload
    def setLocation(self, arg0: float, arg1: float) -> None: ...

    def toString(self) -> str: ...

    @overload
    def __init__(self):
      self.x: float

      self.y: float

    @overload
    def __init__(self, arg0: float, arg1: float): ...


class Rectangle2D(RectangularShape):

  OUT_BOTTOM: int

  OUT_LEFT: int

  OUT_RIGHT: int

  OUT_TOP: int

  @overload
  def add(self, arg0: Point2D) -> None: ...

  @overload
  def add(self, arg0: Rectangle2D) -> None: ...

  @overload
  def add(self, arg0: float, arg1: float) -> None: ...

  @overload
  def contains(self, arg0: float, arg1: float) -> bool: ...

  @overload
  def contains(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool: ...

  def createIntersection(self, arg0: Rectangle2D) -> Rectangle2D: ...

  def createUnion(self, arg0: Rectangle2D) -> Rectangle2D: ...

  def equals(self, arg0: object) -> bool: ...

  def getBounds2D(self) -> Rectangle2D: ...

  @overload
  def getPathIterator(self, arg0: AffineTransform) -> PathIterator: ...

  @overload
  def getPathIterator(self, arg0: AffineTransform, arg1: float) -> PathIterator: ...

  def hashCode(self) -> int: ...

  def intersects(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool: ...

  @overload
  def intersectsLine(self, arg0: Line2D) -> bool: ...

  @overload
  def intersectsLine(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool: ...

  @overload
  def outcode(self, arg0: Point2D) -> int: ...

  @overload
  def outcode(self, arg0: float, arg1: float) -> int: ...

  def setFrame(self, arg0: float, arg1: float, arg2: float, arg3: float) -> None: ...

  @overload
  def setRect(self, arg0: Rectangle2D) -> None: ...

  @overload
  def setRect(self, arg0: float, arg1: float, arg2: float, arg3: float) -> None: ...

  @staticmethod
  def intersect(arg0: Rectangle2D, arg1: Rectangle2D, arg2: Rectangle2D) -> None: ...

  @staticmethod
  def union(arg0: Rectangle2D, arg1: Rectangle2D, arg2: Rectangle2D) -> None: ...

  class Double(Rectangle2D):

    def createIntersection(self, arg0: Rectangle2D) -> Rectangle2D: ...

    def createUnion(self, arg0: Rectangle2D) -> Rectangle2D: ...

    def getBounds2D(self) -> Rectangle2D: ...

    def getHeight(self) -> float: ...

    def getWidth(self) -> float: ...

    def getX(self) -> float: ...

    def getY(self) -> float: ...

    def isEmpty(self) -> bool: ...

    def outcode(self, arg0: float, arg1: float) -> int: ...

    @overload
    def setRect(self, arg0: Rectangle2D) -> None: ...

    @overload
    def setRect(self, arg0: float, arg1: float, arg2: float, arg3: float) -> None: ...

    def toString(self) -> str: ...

    @overload
    def __init__(self):
      self.height: float

      self.width: float

      self.x: float

      self.y: float

    @overload
    def __init__(self, arg0: float, arg1: float, arg2: float, arg3: float): ...

  class Float(Rectangle2D):

    def createIntersection(self, arg0: Rectangle2D) -> Rectangle2D: ...

    def createUnion(self, arg0: Rectangle2D) -> Rectangle2D: ...

    def getBounds2D(self) -> Rectangle2D: ...

    def getHeight(self) -> float: ...

    def getWidth(self) -> float: ...

    def getX(self) -> float: ...

    def getY(self) -> float: ...

    def isEmpty(self) -> bool: ...

    def outcode(self, arg0: float, arg1: float) -> int: ...

    @overload
    def setRect(self, arg0: Rectangle2D) -> None: ...

    @overload
    def setRect(self, arg0: float, arg1: float, arg2: float, arg3: float) -> None: ...

    @overload
    def setRect(self, arg0: float, arg1: float, arg2: float, arg3: float) -> None: ...

    def toString(self) -> str: ...

    @overload
    def __init__(self):
      self.height: float

      self.width: float

      self.x: float

      self.y: float

    @overload
    def __init__(self, arg0: float, arg1: float, arg2: float, arg3: float): ...


class RectangularShape:

  def clone(self) -> object: ...

  @overload
  def contains(self, arg0: Point2D) -> bool: ...

  @overload
  def contains(self, arg0: Point2D) -> bool: ...

  @overload
  def contains(self, arg0: Rectangle2D) -> bool: ...

  @overload
  def contains(self, arg0: Rectangle2D) -> bool: ...

  @overload
  def contains(self, arg0: float, arg1: float) -> bool: ...

  @overload
  def contains(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool: ...

  @overload
  def getBounds(self) -> Rectangle: ...

  @overload
  def getBounds(self) -> Rectangle: ...

  def getBounds2D(self) -> Rectangle2D: ...

  def getCenterX(self) -> float: ...

  def getCenterY(self) -> float: ...

  def getFrame(self) -> Rectangle2D: ...

  def getHeight(self) -> float: ...

  def getMaxX(self) -> float: ...

  def getMaxY(self) -> float: ...

  def getMinX(self) -> float: ...

  def getMinY(self) -> float: ...

  @overload
  def getPathIterator(self, arg0: AffineTransform) -> PathIterator: ...

  @overload
  def getPathIterator(self, arg0: AffineTransform, arg1: float) -> PathIterator: ...

  @overload
  def getPathIterator(self, arg0: AffineTransform, arg1: float) -> PathIterator: ...

  def getWidth(self) -> float: ...

  def getX(self) -> float: ...

  def getY(self) -> float: ...

  @overload
  def intersects(self, arg0: Rectangle2D) -> bool: ...

  @overload
  def intersects(self, arg0: Rectangle2D) -> bool: ...

  @overload
  def intersects(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool: ...

  def isEmpty(self) -> bool: ...

  @overload
  def setFrame(self, arg0: Rectangle2D) -> None: ...

  @overload
  def setFrame(self, arg0: Point2D, arg1: Dimension2D) -> None: ...

  @overload
  def setFrame(self, arg0: float, arg1: float, arg2: float, arg3: float) -> None: ...

  @overload
  def setFrameFromCenter(self, arg0: Point2D, arg1: Point2D) -> None: ...

  @overload
  def setFrameFromCenter(self, arg0: float, arg1: float, arg2: float, arg3: float) -> None: ...

  @overload
  def setFrameFromDiagonal(self, arg0: Point2D, arg1: Point2D) -> None: ...

  @overload
  def setFrameFromDiagonal(self, arg0: float, arg1: float, arg2: float, arg3: float) -> None: ...

