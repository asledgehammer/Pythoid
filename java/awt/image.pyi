from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.awt import BufferCapabilities, Graphics, Image, Graphics2D, Rectangle, Point, RenderingHints, ImageCapabilities, GraphicsConfiguration
from java.awt.color import ColorSpace
from java.awt.geom import Rectangle2D, Point2D
from java.math import BigInteger
from java.util import Vector, Hashtable, List

class BufferStrategy:

  def contentsLost(self) -> bool: ...

  def contentsRestored(self) -> bool: ...

  def dispose(self) -> None: ...

  def getCapabilities(self) -> BufferCapabilities: ...

  def getDrawGraphics(self) -> Graphics: ...

  def show(self) -> None: ...


class BufferedImage(Image):

  BITMASK: int

  OPAQUE: int

  TRANSLUCENT: int

  TYPE_3BYTE_BGR: int

  TYPE_4BYTE_ABGR: int

  TYPE_4BYTE_ABGR_PRE: int

  TYPE_BYTE_BINARY: int

  TYPE_BYTE_GRAY: int

  TYPE_BYTE_INDEXED: int

  TYPE_CUSTOM: int

  TYPE_INT_ARGB: int

  TYPE_INT_ARGB_PRE: int

  TYPE_INT_BGR: int

  TYPE_INT_RGB: int

  TYPE_USHORT_555_RGB: int

  TYPE_USHORT_565_RGB: int

  TYPE_USHORT_GRAY: int

  @overload
  def addTileObserver(self, arg0: TileObserver) -> None: ...

  @overload
  def addTileObserver(self, arg0: TileObserver) -> None: ...

  def coerceData(self, arg0: bool) -> None: ...

  def copyData(self, arg0: WritableRaster) -> WritableRaster: ...

  def createGraphics(self) -> Graphics2D: ...

  def getAlphaRaster(self) -> WritableRaster: ...

  def getColorModel(self) -> ColorModel: ...

  @overload
  def getData(self) -> Raster: ...

  @overload
  def getData(self, arg0: Rectangle) -> Raster: ...

  def getGraphics(self) -> Graphics: ...

  @overload
  def getHeight(self) -> int: ...

  @overload
  def getHeight(self, arg0: ImageObserver) -> int: ...

  def getMinTileX(self) -> int: ...

  def getMinTileY(self) -> int: ...

  def getMinX(self) -> int: ...

  def getMinY(self) -> int: ...

  def getNumXTiles(self) -> int: ...

  def getNumYTiles(self) -> int: ...

  @overload
  def getProperty(self, arg0: str) -> object: ...

  @overload
  def getProperty(self, arg0: str, arg1: ImageObserver) -> object: ...

  def getPropertyNames(self) -> list[str]: ...

  @overload
  def getRGB(self, arg0: int, arg1: int) -> int: ...

  @overload
  def getRGB(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: list[int], arg5: int, arg6: int) -> list[int]: ...

  def getRaster(self) -> WritableRaster: ...

  def getSampleModel(self) -> SampleModel: ...

  def getSource(self) -> ImageProducer: ...

  def getSources(self) -> Vector[RenderedImage]: ...

  def getSubimage(self, arg0: int, arg1: int, arg2: int, arg3: int) -> BufferedImage: ...

  def getTile(self, arg0: int, arg1: int) -> Raster: ...

  def getTileGridXOffset(self) -> int: ...

  def getTileGridYOffset(self) -> int: ...

  def getTileHeight(self) -> int: ...

  def getTileWidth(self) -> int: ...

  @overload
  def getTransparency(self) -> int: ...

  @overload
  def getTransparency(self) -> int: ...

  def getType(self) -> int: ...

  @overload
  def getWidth(self) -> int: ...

  @overload
  def getWidth(self, arg0: ImageObserver) -> int: ...

  @overload
  def getWritableTile(self, arg0: int, arg1: int) -> WritableRaster: ...

  @overload
  def getWritableTile(self, arg0: int, arg1: int) -> WritableRaster: ...

  @overload
  def getWritableTileIndices(self) -> list[Point]: ...

  @overload
  def getWritableTileIndices(self) -> list[Point]: ...

  @overload
  def hasTileWriters(self) -> bool: ...

  @overload
  def hasTileWriters(self) -> bool: ...

  def isAlphaPremultiplied(self) -> bool: ...

  @overload
  def isTileWritable(self, arg0: int, arg1: int) -> bool: ...

  @overload
  def isTileWritable(self, arg0: int, arg1: int) -> bool: ...

  @overload
  def releaseWritableTile(self, arg0: int, arg1: int) -> None: ...

  @overload
  def releaseWritableTile(self, arg0: int, arg1: int) -> None: ...

  @overload
  def removeTileObserver(self, arg0: TileObserver) -> None: ...

  @overload
  def removeTileObserver(self, arg0: TileObserver) -> None: ...

  @overload
  def setData(self, arg0: Raster) -> None: ...

  @overload
  def setData(self, arg0: Raster) -> None: ...

  @overload
  def setRGB(self, arg0: int, arg1: int, arg2: int) -> None: ...

  @overload
  def setRGB(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: list[int], arg5: int, arg6: int) -> None: ...

  def toString(self) -> str: ...

  @overload
  def __init__(self, arg0: int, arg1: int, arg2: int): ...
  @overload
  def __init__(self, arg0: int, arg1: int, arg2: int, arg3: IndexColorModel): ...
  @overload
  def __init__(self, arg0: ColorModel, arg1: WritableRaster, arg2: bool, arg3: Hashtable[Any, Any]): ...


class BufferedImageOp:

  def createCompatibleDestImage(self, arg0: BufferedImage, arg1: ColorModel) -> BufferedImage: ...

  def filter(self, arg0: BufferedImage, arg1: BufferedImage) -> BufferedImage: ...

  def getBounds2D(self, arg0: BufferedImage) -> Rectangle2D: ...

  def getPoint2D(self, arg0: Point2D, arg1: Point2D) -> Point2D: ...

  def getRenderingHints(self) -> RenderingHints: ...


class ColorModel:

  BITMASK: int

  OPAQUE: int

  TRANSLUCENT: int

  def coerceData(self, arg0: WritableRaster, arg1: bool) -> ColorModel: ...

  def createCompatibleSampleModel(self, arg0: int, arg1: int) -> SampleModel: ...

  def createCompatibleWritableRaster(self, arg0: int, arg1: int) -> WritableRaster: ...

  def equals(self, arg0: object) -> bool: ...

  @overload
  def getAlpha(self, arg0: int) -> int: ...

  @overload
  def getAlpha(self, arg0: object) -> int: ...

  def getAlphaRaster(self, arg0: WritableRaster) -> WritableRaster: ...

  @overload
  def getBlue(self, arg0: int) -> int: ...

  @overload
  def getBlue(self, arg0: object) -> int: ...

  def getColorSpace(self) -> ColorSpace: ...

  @overload
  def getComponentSize(self) -> list[int]: ...

  @overload
  def getComponentSize(self, arg0: int) -> int: ...

  @overload
  def getComponents(self, arg0: int, arg1: list[int], arg2: int) -> list[int]: ...

  @overload
  def getComponents(self, arg0: object, arg1: list[int], arg2: int) -> list[int]: ...

  @overload
  def getDataElement(self, arg0: list[float], arg1: int) -> int: ...

  @overload
  def getDataElement(self, arg0: list[int], arg1: int) -> int: ...

  @overload
  def getDataElements(self, arg0: int, arg1: object) -> object: ...

  @overload
  def getDataElements(self, arg0: list[float], arg1: int, arg2: object) -> object: ...

  @overload
  def getDataElements(self, arg0: list[int], arg1: int, arg2: object) -> object: ...

  @overload
  def getGreen(self, arg0: int) -> int: ...

  @overload
  def getGreen(self, arg0: object) -> int: ...

  @overload
  def getNormalizedComponents(self, arg0: object, arg1: list[float], arg2: int) -> list[float]: ...

  @overload
  def getNormalizedComponents(self, arg0: list[int], arg1: int, arg2: list[float], arg3: int) -> list[float]: ...

  def getNumColorComponents(self) -> int: ...

  def getNumComponents(self) -> int: ...

  def getPixelSize(self) -> int: ...

  @overload
  def getRGB(self, arg0: int) -> int: ...

  @overload
  def getRGB(self, arg0: object) -> int: ...

  @overload
  def getRed(self, arg0: int) -> int: ...

  @overload
  def getRed(self, arg0: object) -> int: ...

  def getTransferType(self) -> int: ...

  @overload
  def getTransparency(self) -> int: ...

  @overload
  def getTransparency(self) -> int: ...

  def getUnnormalizedComponents(self, arg0: list[float], arg1: int, arg2: list[int], arg3: int) -> list[int]: ...

  def hasAlpha(self) -> bool: ...

  def hashCode(self) -> int: ...

  def isAlphaPremultiplied(self) -> bool: ...

  def isCompatibleRaster(self, arg0: Raster) -> bool: ...

  def isCompatibleSampleModel(self, arg0: SampleModel) -> bool: ...

  def toString(self) -> str: ...

  @staticmethod
  def getRGBdefault() -> ColorModel: ...

  def __init__(self, arg0: int): ...


class DataBuffer:

  TYPE_BYTE: int

  TYPE_DOUBLE: int

  TYPE_FLOAT: int

  TYPE_INT: int

  TYPE_SHORT: int

  TYPE_UNDEFINED: int

  TYPE_USHORT: int

  def getDataType(self) -> int: ...

  @overload
  def getElem(self, arg0: int) -> int: ...

  @overload
  def getElem(self, arg0: int, arg1: int) -> int: ...

  @overload
  def getElemDouble(self, arg0: int) -> float: ...

  @overload
  def getElemDouble(self, arg0: int, arg1: int) -> float: ...

  @overload
  def getElemFloat(self, arg0: int) -> float: ...

  @overload
  def getElemFloat(self, arg0: int, arg1: int) -> float: ...

  def getNumBanks(self) -> int: ...

  def getOffset(self) -> int: ...

  def getOffsets(self) -> list[int]: ...

  def getSize(self) -> int: ...

  @overload
  def setElem(self, arg0: int, arg1: int) -> None: ...

  @overload
  def setElem(self, arg0: int, arg1: int, arg2: int) -> None: ...

  @overload
  def setElemDouble(self, arg0: int, arg1: float) -> None: ...

  @overload
  def setElemDouble(self, arg0: int, arg1: int, arg2: float) -> None: ...

  @overload
  def setElemFloat(self, arg0: int, arg1: float) -> None: ...

  @overload
  def setElemFloat(self, arg0: int, arg1: int, arg2: float) -> None: ...

  @staticmethod
  def getDataTypeSize(arg0: int) -> int: ...


class ImageConsumer:

  COMPLETESCANLINES: int

  IMAGEABORTED: int

  IMAGEERROR: int

  RANDOMPIXELORDER: int

  SINGLEFRAME: int

  SINGLEFRAMEDONE: int

  SINGLEPASS: int

  STATICIMAGEDONE: int

  TOPDOWNLEFTRIGHT: int

  def imageComplete(self, arg0: int) -> None: ...

  def setColorModel(self, arg0: ColorModel) -> None: ...

  def setDimensions(self, arg0: int, arg1: int) -> None: ...

  def setHints(self, arg0: int) -> None: ...

  @overload
  def setPixels(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: ColorModel, arg5: list[int], arg6: int, arg7: int) -> None: ...

  @overload
  def setPixels(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: ColorModel, arg5: list[int], arg6: int, arg7: int) -> None: ...

  def setProperties(self, arg0: Hashtable[Any, Any]) -> None: ...


class ImageObserver:

  ABORT: int

  ALLBITS: int

  ERROR: int

  FRAMEBITS: int

  HEIGHT: int

  PROPERTIES: int

  SOMEBITS: int

  WIDTH: int

  def imageUpdate(self, arg0: Image, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int) -> bool: ...


class ImageProducer:

  def addConsumer(self, arg0: ImageConsumer) -> None: ...

  def isConsumer(self, arg0: ImageConsumer) -> bool: ...

  def removeConsumer(self, arg0: ImageConsumer) -> None: ...

  def requestTopDownLeftRightResend(self, arg0: ImageConsumer) -> None: ...

  def startProduction(self, arg0: ImageConsumer) -> None: ...


class IndexColorModel(ColorModel):

  def convertToIntDiscrete(self, arg0: Raster, arg1: bool) -> BufferedImage: ...

  def createCompatibleSampleModel(self, arg0: int, arg1: int) -> SampleModel: ...

  def createCompatibleWritableRaster(self, arg0: int, arg1: int) -> WritableRaster: ...

  def equals(self, arg0: object) -> bool: ...

  def getAlpha(self, arg0: int) -> int: ...

  def getAlphas(self, arg0: list[int]) -> None: ...

  def getBlue(self, arg0: int) -> int: ...

  def getBlues(self, arg0: list[int]) -> None: ...

  def getComponentSize(self) -> list[int]: ...

  @overload
  def getComponents(self, arg0: int, arg1: list[int], arg2: int) -> list[int]: ...

  @overload
  def getComponents(self, arg0: object, arg1: list[int], arg2: int) -> list[int]: ...

  def getDataElement(self, arg0: list[int], arg1: int) -> int: ...

  @overload
  def getDataElements(self, arg0: int, arg1: object) -> object: ...

  @overload
  def getDataElements(self, arg0: list[int], arg1: int, arg2: object) -> object: ...

  def getGreen(self, arg0: int) -> int: ...

  def getGreens(self, arg0: list[int]) -> None: ...

  def getMapSize(self) -> int: ...

  def getRGB(self, arg0: int) -> int: ...

  def getRGBs(self, arg0: list[int]) -> None: ...

  def getRed(self, arg0: int) -> int: ...

  def getReds(self, arg0: list[int]) -> None: ...

  def getTransparency(self) -> int: ...

  def getTransparentPixel(self) -> int: ...

  def getValidPixels(self) -> BigInteger: ...

  def hashCode(self) -> int: ...

  def isCompatibleRaster(self, arg0: Raster) -> bool: ...

  def isCompatibleSampleModel(self, arg0: SampleModel) -> bool: ...

  @overload
  def isValid(self) -> bool: ...

  @overload
  def isValid(self, arg0: int) -> bool: ...

  def toString(self) -> str: ...

  @overload
  def __init__(self, arg0: int, arg1: int, arg2: list[int], arg3: list[int], arg4: list[int]): ...
  @overload
  def __init__(self, arg0: int, arg1: int, arg2: list[int], arg3: int, arg4: bool): ...
  @overload
  def __init__(self, arg0: int, arg1: int, arg2: list[int], arg3: list[int], arg4: list[int], arg5: list[int]): ...
  @overload
  def __init__(self, arg0: int, arg1: int, arg2: list[int], arg3: list[int], arg4: list[int], arg5: int): ...
  @overload
  def __init__(self, arg0: int, arg1: int, arg2: list[int], arg3: int, arg4: bool, arg5: int): ...
  @overload
  def __init__(self, arg0: int, arg1: int, arg2: list[int], arg3: int, arg4: int, arg5: BigInteger): ...
  @overload
  def __init__(self, arg0: int, arg1: int, arg2: list[int], arg3: int, arg4: bool, arg5: int, arg6: int): ...


class MultiResolutionImage:

  def getResolutionVariant(self, arg0: float, arg1: float) -> Image: ...

  def getResolutionVariants(self) -> List[Image]: ...


class Raster:

  def createChild(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: list[int]) -> Raster: ...

  @overload
  def createCompatibleWritableRaster(self) -> WritableRaster: ...

  @overload
  def createCompatibleWritableRaster(self, arg0: Rectangle) -> WritableRaster: ...

  @overload
  def createCompatibleWritableRaster(self, arg0: int, arg1: int) -> WritableRaster: ...

  @overload
  def createCompatibleWritableRaster(self, arg0: int, arg1: int, arg2: int, arg3: int) -> WritableRaster: ...

  def createTranslatedChild(self, arg0: int, arg1: int) -> Raster: ...

  def getBounds(self) -> Rectangle: ...

  def getDataBuffer(self) -> DataBuffer: ...

  @overload
  def getDataElements(self, arg0: int, arg1: int, arg2: object) -> object: ...

  @overload
  def getDataElements(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: object) -> object: ...

  def getHeight(self) -> int: ...

  def getMinX(self) -> int: ...

  def getMinY(self) -> int: ...

  def getNumBands(self) -> int: ...

  def getNumDataElements(self) -> int: ...

  def getParent(self) -> Raster: ...

  @overload
  def getPixel(self, arg0: int, arg1: int, arg2: list[float]) -> list[float]: ...

  @overload
  def getPixel(self, arg0: int, arg1: int, arg2: list[float]) -> list[float]: ...

  @overload
  def getPixel(self, arg0: int, arg1: int, arg2: list[int]) -> list[int]: ...

  @overload
  def getPixels(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: list[float]) -> list[float]: ...

  @overload
  def getPixels(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: list[float]) -> list[float]: ...

  @overload
  def getPixels(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: list[int]) -> list[int]: ...

  def getSample(self, arg0: int, arg1: int, arg2: int) -> int: ...

  def getSampleDouble(self, arg0: int, arg1: int, arg2: int) -> float: ...

  def getSampleFloat(self, arg0: int, arg1: int, arg2: int) -> float: ...

  def getSampleModel(self) -> SampleModel: ...

  def getSampleModelTranslateX(self) -> int: ...

  def getSampleModelTranslateY(self) -> int: ...

  @overload
  def getSamples(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: list[float]) -> list[float]: ...

  @overload
  def getSamples(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: list[float]) -> list[float]: ...

  @overload
  def getSamples(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: list[int]) -> list[int]: ...

  def getTransferType(self) -> int: ...

  def getWidth(self) -> int: ...

  @staticmethod
  @overload
  def createBandedRaster(arg0: int, arg1: int, arg2: int, arg3: int, arg4: Point) -> WritableRaster: ...

  @staticmethod
  @overload
  def createBandedRaster(arg0: int, arg1: int, arg2: int, arg3: int, arg4: list[int], arg5: list[int], arg6: Point) -> WritableRaster: ...

  @staticmethod
  @overload
  def createBandedRaster(arg0: DataBuffer, arg1: int, arg2: int, arg3: int, arg4: list[int], arg5: list[int], arg6: Point) -> WritableRaster: ...

  @staticmethod
  @overload
  def createInterleavedRaster(arg0: int, arg1: int, arg2: int, arg3: int, arg4: Point) -> WritableRaster: ...

  @staticmethod
  @overload
  def createInterleavedRaster(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: list[int], arg6: Point) -> WritableRaster: ...

  @staticmethod
  @overload
  def createInterleavedRaster(arg0: DataBuffer, arg1: int, arg2: int, arg3: int, arg4: int, arg5: list[int], arg6: Point) -> WritableRaster: ...

  @staticmethod
  @overload
  def createPackedRaster(arg0: int, arg1: int, arg2: int, arg3: list[int], arg4: Point) -> WritableRaster: ...

  @staticmethod
  @overload
  def createPackedRaster(arg0: DataBuffer, arg1: int, arg2: int, arg3: int, arg4: Point) -> WritableRaster: ...

  @staticmethod
  @overload
  def createPackedRaster(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: Point) -> WritableRaster: ...

  @staticmethod
  @overload
  def createPackedRaster(arg0: DataBuffer, arg1: int, arg2: int, arg3: int, arg4: list[int], arg5: Point) -> WritableRaster: ...

  @staticmethod
  def createRaster(arg0: SampleModel, arg1: DataBuffer, arg2: Point) -> Raster: ...

  @staticmethod
  @overload
  def createWritableRaster(arg0: SampleModel, arg1: Point) -> WritableRaster: ...

  @staticmethod
  @overload
  def createWritableRaster(arg0: SampleModel, arg1: DataBuffer, arg2: Point) -> WritableRaster: ...


class RenderedImage:

  def copyData(self, arg0: WritableRaster) -> WritableRaster: ...

  def getColorModel(self) -> ColorModel: ...

  @overload
  def getData(self) -> Raster: ...

  @overload
  def getData(self, arg0: Rectangle) -> Raster: ...

  def getHeight(self) -> int: ...

  def getMinTileX(self) -> int: ...

  def getMinTileY(self) -> int: ...

  def getMinX(self) -> int: ...

  def getMinY(self) -> int: ...

  def getNumXTiles(self) -> int: ...

  def getNumYTiles(self) -> int: ...

  def getProperty(self, arg0: str) -> object: ...

  def getPropertyNames(self) -> list[str]: ...

  def getSampleModel(self) -> SampleModel: ...

  def getSources(self) -> Vector[RenderedImage]: ...

  def getTile(self, arg0: int, arg1: int) -> Raster: ...

  def getTileGridXOffset(self) -> int: ...

  def getTileGridYOffset(self) -> int: ...

  def getTileHeight(self) -> int: ...

  def getTileWidth(self) -> int: ...

  def getWidth(self) -> int: ...


class SampleModel:

  def createCompatibleSampleModel(self, arg0: int, arg1: int) -> SampleModel: ...

  def createDataBuffer(self) -> DataBuffer: ...

  def createSubsetSampleModel(self, arg0: list[int]) -> SampleModel: ...

  @overload
  def getDataElements(self, arg0: int, arg1: int, arg2: object, arg3: DataBuffer) -> object: ...

  @overload
  def getDataElements(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: object, arg5: DataBuffer) -> object: ...

  def getDataType(self) -> int: ...

  def getHeight(self) -> int: ...

  def getNumBands(self) -> int: ...

  def getNumDataElements(self) -> int: ...

  @overload
  def getPixel(self, arg0: int, arg1: int, arg2: list[float], arg3: DataBuffer) -> list[float]: ...

  @overload
  def getPixel(self, arg0: int, arg1: int, arg2: list[float], arg3: DataBuffer) -> list[float]: ...

  @overload
  def getPixel(self, arg0: int, arg1: int, arg2: list[int], arg3: DataBuffer) -> list[int]: ...

  @overload
  def getPixels(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: list[float], arg5: DataBuffer) -> list[float]: ...

  @overload
  def getPixels(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: list[float], arg5: DataBuffer) -> list[float]: ...

  @overload
  def getPixels(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: list[int], arg5: DataBuffer) -> list[int]: ...

  def getSample(self, arg0: int, arg1: int, arg2: int, arg3: DataBuffer) -> int: ...

  def getSampleDouble(self, arg0: int, arg1: int, arg2: int, arg3: DataBuffer) -> float: ...

  def getSampleFloat(self, arg0: int, arg1: int, arg2: int, arg3: DataBuffer) -> float: ...

  @overload
  def getSampleSize(self) -> list[int]: ...

  @overload
  def getSampleSize(self, arg0: int) -> int: ...

  @overload
  def getSamples(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: list[float], arg6: DataBuffer) -> list[float]: ...

  @overload
  def getSamples(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: list[float], arg6: DataBuffer) -> list[float]: ...

  @overload
  def getSamples(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: list[int], arg6: DataBuffer) -> list[int]: ...

  def getTransferType(self) -> int: ...

  def getWidth(self) -> int: ...

  @overload
  def setDataElements(self, arg0: int, arg1: int, arg2: object, arg3: DataBuffer) -> None: ...

  @overload
  def setDataElements(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: object, arg5: DataBuffer) -> None: ...

  @overload
  def setPixel(self, arg0: int, arg1: int, arg2: list[float], arg3: DataBuffer) -> None: ...

  @overload
  def setPixel(self, arg0: int, arg1: int, arg2: list[float], arg3: DataBuffer) -> None: ...

  @overload
  def setPixel(self, arg0: int, arg1: int, arg2: list[int], arg3: DataBuffer) -> None: ...

  @overload
  def setPixels(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: list[float], arg5: DataBuffer) -> None: ...

  @overload
  def setPixels(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: list[float], arg5: DataBuffer) -> None: ...

  @overload
  def setPixels(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: list[int], arg5: DataBuffer) -> None: ...

  @overload
  def setSample(self, arg0: int, arg1: int, arg2: int, arg3: float, arg4: DataBuffer) -> None: ...

  @overload
  def setSample(self, arg0: int, arg1: int, arg2: int, arg3: float, arg4: DataBuffer) -> None: ...

  @overload
  def setSample(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: DataBuffer) -> None: ...

  @overload
  def setSamples(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: list[float], arg6: DataBuffer) -> None: ...

  @overload
  def setSamples(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: list[float], arg6: DataBuffer) -> None: ...

  @overload
  def setSamples(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: list[int], arg6: DataBuffer) -> None: ...

  def __init__(self, arg0: int, arg1: int, arg2: int, arg3: int): ...


class TileObserver:

  def tileUpdate(self, arg0: WritableRenderedImage, arg1: int, arg2: int, arg3: bool) -> None: ...


class VolatileImage(Image):

  BITMASK: int

  IMAGE_INCOMPATIBLE: int

  IMAGE_OK: int

  IMAGE_RESTORED: int

  OPAQUE: int

  TRANSLUCENT: int

  def contentsLost(self) -> bool: ...

  def createGraphics(self) -> Graphics2D: ...

  def getCapabilities(self) -> ImageCapabilities: ...

  def getGraphics(self) -> Graphics: ...

  def getHeight(self) -> int: ...

  def getSnapshot(self) -> BufferedImage: ...

  def getSource(self) -> ImageProducer: ...

  @overload
  def getTransparency(self) -> int: ...

  @overload
  def getTransparency(self) -> int: ...

  def getWidth(self) -> int: ...

  def validate(self, arg0: GraphicsConfiguration) -> int: ...


class WritableRaster(Raster):

  def createWritableChild(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: list[int]) -> WritableRaster: ...

  def createWritableTranslatedChild(self, arg0: int, arg1: int) -> WritableRaster: ...

  def getWritableParent(self) -> WritableRaster: ...

  @overload
  def setDataElements(self, arg0: int, arg1: int, arg2: Raster) -> None: ...

  @overload
  def setDataElements(self, arg0: int, arg1: int, arg2: object) -> None: ...

  @overload
  def setDataElements(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: object) -> None: ...

  @overload
  def setPixel(self, arg0: int, arg1: int, arg2: list[float]) -> None: ...

  @overload
  def setPixel(self, arg0: int, arg1: int, arg2: list[float]) -> None: ...

  @overload
  def setPixel(self, arg0: int, arg1: int, arg2: list[int]) -> None: ...

  @overload
  def setPixels(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: list[float]) -> None: ...

  @overload
  def setPixels(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: list[float]) -> None: ...

  @overload
  def setPixels(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: list[int]) -> None: ...

  @overload
  def setRect(self, arg0: Raster) -> None: ...

  @overload
  def setRect(self, arg0: int, arg1: int, arg2: Raster) -> None: ...

  @overload
  def setSample(self, arg0: int, arg1: int, arg2: int, arg3: float) -> None: ...

  @overload
  def setSample(self, arg0: int, arg1: int, arg2: int, arg3: float) -> None: ...

  @overload
  def setSample(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...

  @overload
  def setSamples(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: list[float]) -> None: ...

  @overload
  def setSamples(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: list[float]) -> None: ...

  @overload
  def setSamples(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: list[int]) -> None: ...


class WritableRenderedImage:

  def addTileObserver(self, arg0: TileObserver) -> None: ...

  def copyData(self, arg0: WritableRaster) -> WritableRaster: ...

  def getColorModel(self) -> ColorModel: ...

  @overload
  def getData(self) -> Raster: ...

  @overload
  def getData(self, arg0: Rectangle) -> Raster: ...

  def getHeight(self) -> int: ...

  def getMinTileX(self) -> int: ...

  def getMinTileY(self) -> int: ...

  def getMinX(self) -> int: ...

  def getMinY(self) -> int: ...

  def getNumXTiles(self) -> int: ...

  def getNumYTiles(self) -> int: ...

  def getProperty(self, arg0: str) -> object: ...

  def getPropertyNames(self) -> list[str]: ...

  def getSampleModel(self) -> SampleModel: ...

  def getSources(self) -> Vector[RenderedImage]: ...

  def getTile(self, arg0: int, arg1: int) -> Raster: ...

  def getTileGridXOffset(self) -> int: ...

  def getTileGridYOffset(self) -> int: ...

  def getTileHeight(self) -> int: ...

  def getTileWidth(self) -> int: ...

  def getWidth(self) -> int: ...

  def getWritableTile(self, arg0: int, arg1: int) -> WritableRaster: ...

  def getWritableTileIndices(self) -> list[Point]: ...

  def hasTileWriters(self) -> bool: ...

  def isTileWritable(self, arg0: int, arg1: int) -> bool: ...

  def releaseWritableTile(self, arg0: int, arg1: int) -> None: ...

  def removeTileObserver(self, arg0: TileObserver) -> None: ...

  def setData(self, arg0: Raster) -> None: ...

