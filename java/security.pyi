from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.io import InputStream
from java.lang import SecurityException, Class, Throwable, Exception, IllegalArgumentException, ClassLoader, Enum
from java.net import URL
from java.nio import ByteBuffer
from java.security.cert import CertPath, Certificate
from java.security.spec import AlgorithmParameterSpec
from java.util import Enumeration, Properties, Set, Map, Collection, List, Random, Date
from java.util.function import BiFunction, Function, BiConsumer
from java.util.stream import Stream
from javax.crypto import SecretKey
from javax.security.auth import Subject
from jdk.internal.access import JavaSecurityAccess

T = TypeVar('T', default=Any)

class AccessControlContext:

  def checkPermission(self, arg0: Permission) -> None: ...

  def equals(self, arg0: object) -> bool: ...

  def getDomainCombiner(self) -> DomainCombiner: ...

  def hashCode(self) -> int: ...

  @overload
  def __init__(self, arg0: list[ProtectionDomain]): ...
  @overload
  def __init__(self, arg0: AccessControlContext, arg1: DomainCombiner): ...


class AccessControlException(SecurityException):

  def getPermission(self) -> Permission: ...

  @overload
  def __init__(self, arg0: str): ...
  @overload
  def __init__(self, arg0: str, arg1: Permission): ...


class AccessController:

  @staticmethod
  def checkPermission(arg0: Permission) -> None: ...

  @staticmethod
  @overload
  def doPrivileged(arg0: PrivilegedAction[T]) -> object: ...

  @staticmethod
  @overload
  def doPrivileged(arg0: PrivilegedExceptionAction[T]) -> object: ...

  @staticmethod
  @overload
  def doPrivileged(arg0: PrivilegedAction[T], arg1: AccessControlContext) -> object: ...

  @staticmethod
  @overload
  def doPrivileged(arg0: PrivilegedExceptionAction[T], arg1: AccessControlContext) -> object: ...

  @staticmethod
  @overload
  def doPrivileged(arg0: PrivilegedAction[T], arg1: AccessControlContext, arg2: list[Permission]) -> object: ...

  @staticmethod
  @overload
  def doPrivileged(arg0: PrivilegedExceptionAction[T], arg1: AccessControlContext, arg2: list[Permission]) -> object: ...

  @staticmethod
  @overload
  def doPrivilegedWithCombiner(arg0: PrivilegedAction[T]) -> object: ...

  @staticmethod
  @overload
  def doPrivilegedWithCombiner(arg0: PrivilegedExceptionAction[T]) -> object: ...

  @staticmethod
  @overload
  def doPrivilegedWithCombiner(arg0: PrivilegedAction[T], arg1: AccessControlContext, arg2: list[Permission]) -> object: ...

  @staticmethod
  @overload
  def doPrivilegedWithCombiner(arg0: PrivilegedExceptionAction[T], arg1: AccessControlContext, arg2: list[Permission]) -> object: ...

  @staticmethod
  def getContext() -> AccessControlContext: ...

  class AccHolder: ...


class AlgorithmParameters:

  def getAlgorithm(self) -> str: ...

  @overload
  def getEncoded(self) -> list[int]: ...

  @overload
  def getEncoded(self, arg0: str) -> list[int]: ...

  def getParameterSpec(self, arg0: Class[T]) -> T: ...

  def getProvider(self) -> Provider: ...

  @overload
  def init(self, arg0: list[int]) -> None: ...

  @overload
  def init(self, arg0: AlgorithmParameterSpec) -> None: ...

  @overload
  def init(self, arg0: list[int], arg1: str) -> None: ...

  def toString(self) -> str: ...

  @staticmethod
  @overload
  def getInstance(arg0: str) -> AlgorithmParameters: ...

  @staticmethod
  @overload
  def getInstance(arg0: str, arg1: str) -> AlgorithmParameters: ...

  @staticmethod
  @overload
  def getInstance(arg0: str, arg1: Provider) -> AlgorithmParameters: ...


class AlgorithmParametersSpi:

  def __init__(self): ...


class AllPermission(Permission):

  def equals(self, arg0: object) -> bool: ...

  def getActions(self) -> str: ...

  def hashCode(self) -> int: ...

  def implies(self, arg0: Permission) -> bool: ...

  def newPermissionCollection(self) -> PermissionCollection: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: str, arg1: str): ...


class BasicPermission(Permission):

  def equals(self, arg0: object) -> bool: ...

  def getActions(self) -> str: ...

  def hashCode(self) -> int: ...

  def implies(self, arg0: Permission) -> bool: ...

  def newPermissionCollection(self) -> PermissionCollection: ...

  @overload
  def __init__(self, arg0: str): ...
  @overload
  def __init__(self, arg0: str, arg1: str): ...


class BasicPermissionCollection(PermissionCollection):

  def add(self, arg0: Permission) -> None: ...

  def elements(self) -> Enumeration[Permission]: ...

  def implies(self, arg0: Permission) -> bool: ...

  def __init__(self, arg0: Class[Any]): ...


class CodeSigner:

  def equals(self, arg0: object) -> bool: ...

  def getSignerCertPath(self) -> CertPath: ...

  def getTimestamp(self) -> Timestamp: ...

  def hashCode(self) -> int: ...

  def toString(self) -> str: ...

  def __init__(self, arg0: CertPath, arg1: Timestamp): ...


class CodeSource:

  def equals(self, arg0: object) -> bool: ...

  def getCertificates(self) -> list[Certificate]: ...

  def getCodeSigners(self) -> list[CodeSigner]: ...

  def getLocation(self) -> URL: ...

  def hashCode(self) -> int: ...

  def implies(self, arg0: CodeSource) -> bool: ...

  def toString(self) -> str: ...

  @overload
  def __init__(self, arg0: URL, arg1: list[CodeSigner]): ...
  @overload
  def __init__(self, arg0: URL, arg1: list[Certificate]): ...


class DigestException(GeneralSecurityException):

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: str): ...
  @overload
  def __init__(self, arg0: Throwable): ...
  @overload
  def __init__(self, arg0: str, arg1: Throwable): ...


class DomainCombiner:

  def combine(self, arg0: list[ProtectionDomain], arg1: list[ProtectionDomain]) -> list[ProtectionDomain]: ...


class GeneralSecurityException(Exception):

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: str): ...
  @overload
  def __init__(self, arg0: Throwable): ...
  @overload
  def __init__(self, arg0: str, arg1: Throwable): ...


class Guard:

  def checkGuard(self, arg0: object) -> None: ...


class InvalidAlgorithmParameterException(GeneralSecurityException):

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: str): ...
  @overload
  def __init__(self, arg0: Throwable): ...
  @overload
  def __init__(self, arg0: str, arg1: Throwable): ...


class InvalidKeyException(KeyException):

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: str): ...
  @overload
  def __init__(self, arg0: Throwable): ...
  @overload
  def __init__(self, arg0: str, arg1: Throwable): ...


class InvalidParameterException(IllegalArgumentException):

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: str): ...


class Key:

  serialVersionUID: int

  def getAlgorithm(self) -> str: ...

  def getEncoded(self) -> list[int]: ...

  def getFormat(self) -> str: ...


class KeyException(GeneralSecurityException):

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: str): ...
  @overload
  def __init__(self, arg0: Throwable): ...
  @overload
  def __init__(self, arg0: str, arg1: Throwable): ...


class MessageDigest(MessageDigestSpi):

  def clone(self) -> object: ...

  @overload
  def digest(self) -> list[int]: ...

  @overload
  def digest(self, arg0: list[int]) -> list[int]: ...

  @overload
  def digest(self, arg0: list[int], arg1: int, arg2: int) -> int: ...

  def getAlgorithm(self) -> str: ...

  def getDigestLength(self) -> int: ...

  def getProvider(self) -> Provider: ...

  def reset(self) -> None: ...

  def toString(self) -> str: ...

  @overload
  def update(self, arg0: list[int]) -> None: ...

  @overload
  def update(self, arg0: int) -> None: ...

  @overload
  def update(self, arg0: ByteBuffer) -> None: ...

  @overload
  def update(self, arg0: list[int], arg1: int, arg2: int) -> None: ...

  @staticmethod
  @overload
  def getInstance(arg0: str) -> MessageDigest: ...

  @staticmethod
  @overload
  def getInstance(arg0: str, arg1: str) -> MessageDigest: ...

  @staticmethod
  @overload
  def getInstance(arg0: str, arg1: Provider) -> MessageDigest: ...

  @staticmethod
  def isEqual(arg0: list[int], arg1: list[int]) -> bool: ...

  class Delegate(MessageDigest):

    def clone(self) -> object: ...

    @overload
    def engineUpdate(self, arg0: SecretKey) -> None: ...

    @overload
    def engineUpdate(self, arg0: SecretKey) -> None: ...

    class CloneableDelegate(MessageDigest.Delegate): ...


class MessageDigestSpi:

  def clone(self) -> object: ...

  def __init__(self): ...


class NoSuchAlgorithmException(GeneralSecurityException):

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: str): ...
  @overload
  def __init__(self, arg0: Throwable): ...
  @overload
  def __init__(self, arg0: str, arg1: Throwable): ...


class NoSuchProviderException(GeneralSecurityException):

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: str): ...


class Permission:

  @overload
  def checkGuard(self, arg0: object) -> None: ...

  @overload
  def checkGuard(self, arg0: object) -> None: ...

  def equals(self, arg0: object) -> bool: ...

  def getActions(self) -> str: ...

  def getName(self) -> str: ...

  def hashCode(self) -> int: ...

  def implies(self, arg0: Permission) -> bool: ...

  def newPermissionCollection(self) -> PermissionCollection: ...

  def toString(self) -> str: ...

  def __init__(self, arg0: str): ...


class PermissionCollection:

  def add(self, arg0: Permission) -> None: ...

  def elements(self) -> Enumeration[Permission]: ...

  def elementsAsStream(self) -> Stream[Permission]: ...

  def implies(self, arg0: Permission) -> bool: ...

  def isReadOnly(self) -> bool: ...

  def setReadOnly(self) -> None: ...

  def toString(self) -> str: ...

  def __init__(self): ...


class Permissions(PermissionCollection):

  def add(self, arg0: Permission) -> None: ...

  def elements(self) -> Enumeration[Permission]: ...

  def implies(self, arg0: Permission) -> bool: ...

  def __init__(self): ...


class Principal:

  def equals(self, arg0: object) -> bool: ...

  def getName(self) -> str: ...

  def hashCode(self) -> int: ...

  def implies(self, arg0: Subject) -> bool: ...

  def toString(self) -> str: ...


class PrivateKey:

  serialVersionUID: int

  def destroy(self) -> None: ...

  def getAlgorithm(self) -> str: ...

  def getEncoded(self) -> list[int]: ...

  def getFormat(self) -> str: ...

  def isDestroyed(self) -> bool: ...


class PrivilegedAction[T]:

  def run(self) -> object: ...


class PrivilegedActionException(Exception):

  def getException(self) -> Exception: ...

  def toString(self) -> str: ...

  def __init__(self, arg0: Exception): ...


class PrivilegedExceptionAction[T]:

  def run(self) -> object: ...


class ProtectionDomain:

  def getClassLoader(self) -> ClassLoader: ...

  def getCodeSource(self) -> CodeSource: ...

  def getPermissions(self) -> PermissionCollection: ...

  def getPrincipals(self) -> list[Principal]: ...

  def implies(self, arg0: Permission) -> bool: ...

  def staticPermissionsOnly(self) -> bool: ...

  def toString(self) -> str: ...

  @overload
  def __init__(self, arg0: CodeSource, arg1: PermissionCollection): ...
  @overload
  def __init__(self, arg0: CodeSource, arg1: PermissionCollection, arg2: ClassLoader, arg3: list[Principal]): ...

  class Key: ...

  class DebugHolder: ...

  class JavaSecurityAccessImpl:

    @overload
    def doIntersectionPrivilege(self, arg0: PrivilegedAction[T], arg1: AccessControlContext) -> object: ...

    @overload
    def doIntersectionPrivilege(self, arg0: PrivilegedAction[T], arg1: AccessControlContext) -> object: ...

    @overload
    def doIntersectionPrivilege(self, arg0: PrivilegedAction[T], arg1: AccessControlContext, arg2: AccessControlContext) -> object: ...

    @overload
    def doIntersectionPrivilege(self, arg0: PrivilegedAction[T], arg1: AccessControlContext, arg2: AccessControlContext) -> object: ...

    @overload
    def getProtectDomains(self, arg0: AccessControlContext) -> list[ProtectionDomain]: ...

    @overload
    def getProtectDomains(self, arg0: AccessControlContext) -> list[ProtectionDomain]: ...

    @overload
    def getProtectionDomainCache(self) -> JavaSecurityAccess.ProtectionDomainCache: ...

    @overload
    def getProtectionDomainCache(self) -> JavaSecurityAccess.ProtectionDomainCache: ...


class Provider(Properties):

  def clear(self) -> None: ...

  def compute(self, arg0: object, arg1: BiFunction[object, object, Any]) -> object: ...

  def computeIfAbsent(self, arg0: object, arg1: Function[object, Any]) -> object: ...

  def computeIfPresent(self, arg0: object, arg1: BiFunction[object, object, Any]) -> object: ...

  def configure(self, arg0: str) -> Provider: ...

  def elements(self) -> Enumeration[object]: ...

  def entrySet(self) -> Set[Map.Entry[object, object]]: ...

  def forEach(self, arg0: BiConsumer[object, object]) -> None: ...

  def get(self, arg0: object) -> object: ...

  def getInfo(self) -> str: ...

  def getName(self) -> str: ...

  def getOrDefault(self, arg0: object, arg1: object) -> object: ...

  def getProperty(self, arg0: str) -> str: ...

  def getService(self, arg0: str, arg1: str) -> Provider.Service: ...

  def getServices(self) -> Set[Provider.Service]: ...

  def getVersion(self) -> float: ...

  def getVersionStr(self) -> str: ...

  def isConfigured(self) -> bool: ...

  def keySet(self) -> Set[object]: ...

  def keys(self) -> Enumeration[object]: ...

  def load(self, arg0: InputStream) -> None: ...

  def merge(self, arg0: object, arg1: object, arg2: BiFunction[object, object, Any]) -> object: ...

  def put(self, arg0: object, arg1: object) -> object: ...

  def putAll(self, arg0: Map[Any, Any]) -> None: ...

  def putIfAbsent(self, arg0: object, arg1: object) -> object: ...

  @overload
  def remove(self, arg0: object) -> object: ...

  @overload
  def remove(self, arg0: object, arg1: object) -> bool: ...

  @overload
  def replace(self, arg0: object, arg1: object) -> object: ...

  @overload
  def replace(self, arg0: object, arg1: object, arg2: object) -> bool: ...

  def replaceAll(self, arg0: BiFunction[object, object, Any]) -> None: ...

  def toString(self) -> str: ...

  def values(self) -> Collection[object]: ...

  class OPType(Enum):

    ADD: Provider.OPType

    REMOVE: Provider.OPType

    @staticmethod
    def valueOf(arg0: str) -> Provider.OPType: ...

    @staticmethod
    def values() -> list[Provider.OPType]: ...

  class Service:

    def getAlgorithm(self) -> str: ...

    def getAttribute(self, arg0: str) -> str: ...

    def getClassName(self) -> str: ...

    def getProvider(self) -> Provider: ...

    def getType(self) -> str: ...

    def newInstance(self, arg0: object) -> object: ...

    def supportsParameter(self, arg0: object) -> bool: ...

    def toString(self) -> str: ...

    def __init__(self, arg0: Provider, arg1: str, arg2: str, arg3: str, arg4: List[str], arg5: Map[str, str]): ...

  class ServiceKey:

    def equals(self, arg0: object) -> bool: ...

    def hashCode(self) -> int: ...

    def toString(self) -> str: ...

  class EngineDescription: ...

  class UString:

    def equals(self, arg0: object) -> bool: ...

    def hashCode(self) -> int: ...

    def toString(self) -> str: ...


class PublicKey:

  serialVersionUID: int

  def getAlgorithm(self) -> str: ...

  def getEncoded(self) -> list[int]: ...

  def getFormat(self) -> str: ...


class SecureClassLoader(ClassLoader):

  class CodeSourceKey:

    def equals(self, arg0: object) -> bool: ...

    def hashCode(self) -> int: ...

  class DebugHolder: ...


class SecureRandom(Random):

  def generateSeed(self, arg0: int) -> list[int]: ...

  def getAlgorithm(self) -> str: ...

  def getParameters(self) -> SecureRandomParameters: ...

  def getProvider(self) -> Provider: ...

  @overload
  def nextBytes(self, arg0: list[int]) -> None: ...

  @overload
  def nextBytes(self, arg0: list[int], arg1: SecureRandomParameters) -> None: ...

  @overload
  def reseed(self) -> None: ...

  @overload
  def reseed(self, arg0: SecureRandomParameters) -> None: ...

  @overload
  def setSeed(self, arg0: list[int]) -> None: ...

  @overload
  def setSeed(self, arg0: int) -> None: ...

  def toString(self) -> str: ...

  @staticmethod
  @overload
  def getInstance(arg0: str) -> SecureRandom: ...

  @staticmethod
  @overload
  def getInstance(arg0: str, arg1: str) -> SecureRandom: ...

  @staticmethod
  @overload
  def getInstance(arg0: str, arg1: Provider) -> SecureRandom: ...

  @staticmethod
  @overload
  def getInstance(arg0: str, arg1: SecureRandomParameters) -> SecureRandom: ...

  @staticmethod
  @overload
  def getInstance(arg0: str, arg1: SecureRandomParameters, arg2: str) -> SecureRandom: ...

  @staticmethod
  @overload
  def getInstance(arg0: str, arg1: SecureRandomParameters, arg2: Provider) -> SecureRandom: ...

  @staticmethod
  def getInstanceStrong() -> SecureRandom: ...

  @staticmethod
  def getSeed(arg0: int) -> list[int]: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: list[int]): ...

  class StrongPatternHolder: ...


class SecureRandomParameters: ...


class SecureRandomSpi:

  def toString(self) -> str: ...

  def __init__(self): ...


class Signature(SignatureSpi):

  def clone(self) -> object: ...

  def getAlgorithm(self) -> str: ...

  def getParameter(self, arg0: str) -> object: ...

  def getParameters(self) -> AlgorithmParameters: ...

  def getProvider(self) -> Provider: ...

  @overload
  def initSign(self, arg0: PrivateKey) -> None: ...

  @overload
  def initSign(self, arg0: PrivateKey, arg1: SecureRandom) -> None: ...

  @overload
  def initVerify(self, arg0: PublicKey) -> None: ...

  @overload
  def initVerify(self, arg0: Certificate) -> None: ...

  @overload
  def setParameter(self, arg0: AlgorithmParameterSpec) -> None: ...

  @overload
  def setParameter(self, arg0: str, arg1: object) -> None: ...

  @overload
  def sign(self) -> list[int]: ...

  @overload
  def sign(self, arg0: list[int], arg1: int, arg2: int) -> int: ...

  def toString(self) -> str: ...

  @overload
  def update(self, arg0: list[int]) -> None: ...

  @overload
  def update(self, arg0: int) -> None: ...

  @overload
  def update(self, arg0: ByteBuffer) -> None: ...

  @overload
  def update(self, arg0: list[int], arg1: int, arg2: int) -> None: ...

  @overload
  def verify(self, arg0: list[int]) -> bool: ...

  @overload
  def verify(self, arg0: list[int], arg1: int, arg2: int) -> bool: ...

  @staticmethod
  @overload
  def getInstance(arg0: str) -> Signature: ...

  @staticmethod
  @overload
  def getInstance(arg0: str, arg1: str) -> Signature: ...

  @staticmethod
  @overload
  def getInstance(arg0: str, arg1: Provider) -> Signature: ...

  class Delegate(Signature):

    def clone(self) -> object: ...

    class CloneableDelegate(Signature.Delegate): ...

  class CipherAdapter(SignatureSpi): ...


class SignatureException(GeneralSecurityException):

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: str): ...
  @overload
  def __init__(self, arg0: Throwable): ...
  @overload
  def __init__(self, arg0: str, arg1: Throwable): ...


class SignatureSpi:

  def clone(self) -> object: ...

  def __init__(self): ...


class Timestamp:

  def equals(self, arg0: object) -> bool: ...

  def getSignerCertPath(self) -> CertPath: ...

  def getTimestamp(self) -> Date: ...

  def hashCode(self) -> int: ...

  def toString(self) -> str: ...

  def __init__(self, arg0: Date, arg1: CertPath): ...


class UnresolvedPermission(Permission):

  def equals(self, arg0: object) -> bool: ...

  def getActions(self) -> str: ...

  def getUnresolvedActions(self) -> str: ...

  def getUnresolvedCerts(self) -> list[Certificate]: ...

  def getUnresolvedName(self) -> str: ...

  def getUnresolvedType(self) -> str: ...

  def hashCode(self) -> int: ...

  def implies(self, arg0: Permission) -> bool: ...

  def newPermissionCollection(self) -> PermissionCollection: ...

  def toString(self) -> str: ...

  def __init__(self, arg0: str, arg1: str, arg2: str, arg3: list[Certificate]): ...

