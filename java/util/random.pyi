from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.util.stream import DoubleStream, IntStream, LongStream, Stream

class RandomGenerator:

  @overload
  def doubles(self) -> DoubleStream: ...

  @overload
  def doubles(self, arg0: int) -> DoubleStream: ...

  @overload
  def doubles(self, arg0: float, arg1: float) -> DoubleStream: ...

  @overload
  def doubles(self, arg0: int, arg1: float, arg2: float) -> DoubleStream: ...

  @overload
  def ints(self) -> IntStream: ...

  @overload
  def ints(self, arg0: int) -> IntStream: ...

  @overload
  def ints(self, arg0: int, arg1: int) -> IntStream: ...

  @overload
  def ints(self, arg0: int, arg1: int, arg2: int) -> IntStream: ...

  def isDeprecated(self) -> bool: ...

  @overload
  def longs(self) -> LongStream: ...

  @overload
  def longs(self, arg0: int) -> LongStream: ...

  @overload
  def longs(self, arg0: int, arg1: int) -> LongStream: ...

  @overload
  def longs(self, arg0: int, arg1: int, arg2: int) -> LongStream: ...

  def nextBoolean(self) -> bool: ...

  def nextBytes(self, arg0: list[int]) -> None: ...

  @overload
  def nextDouble(self) -> float: ...

  @overload
  def nextDouble(self, arg0: float) -> float: ...

  @overload
  def nextDouble(self, arg0: float, arg1: float) -> float: ...

  def nextExponential(self) -> float: ...

  @overload
  def nextFloat(self) -> float: ...

  @overload
  def nextFloat(self, arg0: float) -> float: ...

  @overload
  def nextFloat(self, arg0: float, arg1: float) -> float: ...

  @overload
  def nextGaussian(self) -> float: ...

  @overload
  def nextGaussian(self, arg0: float, arg1: float) -> float: ...

  @overload
  def nextInt(self) -> int: ...

  @overload
  def nextInt(self, arg0: int) -> int: ...

  @overload
  def nextInt(self, arg0: int, arg1: int) -> int: ...

  @overload
  def nextLong(self) -> int: ...

  @overload
  def nextLong(self, arg0: int) -> int: ...

  @overload
  def nextLong(self, arg0: int, arg1: int) -> int: ...

  @staticmethod
  def getDefault() -> RandomGenerator: ...

  @staticmethod
  def of(arg0: str) -> RandomGenerator: ...

  class ArbitrarilyJumpableGenerator:

    @overload
    def copy(self) -> RandomGenerator.LeapableGenerator: ...

    @overload
    def copy(self) -> RandomGenerator.JumpableGenerator: ...

    @overload
    def copy(self) -> RandomGenerator.ArbitrarilyJumpableGenerator: ...

    @overload
    def copy(self) -> RandomGenerator.JumpableGenerator: ...

    @overload
    def copy(self) -> RandomGenerator.LeapableGenerator: ...

    def copyAndJump(self, arg0: float) -> RandomGenerator.ArbitrarilyJumpableGenerator: ...

    def copyAndLeap(self) -> RandomGenerator.JumpableGenerator: ...

    @overload
    def jump(self) -> None: ...

    @overload
    def jump(self, arg0: float) -> None: ...

    def jumpPowerOfTwo(self, arg0: int) -> None: ...

    @overload
    def jumps(self, arg0: float) -> Stream[RandomGenerator.ArbitrarilyJumpableGenerator]: ...

    @overload
    def jumps(self, arg0: int, arg1: float) -> Stream[RandomGenerator.ArbitrarilyJumpableGenerator]: ...

    @overload
    def leap(self) -> None: ...

    @overload
    def leap(self) -> None: ...

    def leapDistance(self) -> float: ...

    @overload
    def leaps(self) -> Stream[RandomGenerator.JumpableGenerator]: ...

    @overload
    def leaps(self, arg0: int) -> Stream[RandomGenerator.JumpableGenerator]: ...

    @staticmethod
    @overload
    def of(arg0: str) -> RandomGenerator.ArbitrarilyJumpableGenerator: ...

    @staticmethod
    @overload
    def of(arg0: str) -> RandomGenerator.LeapableGenerator: ...

  class LeapableGenerator:

    @overload
    def copy(self) -> RandomGenerator.JumpableGenerator: ...

    @overload
    def copy(self) -> RandomGenerator.LeapableGenerator: ...

    @overload
    def copy(self) -> RandomGenerator.JumpableGenerator: ...

    def copyAndJump(self) -> RandomGenerator: ...

    def copyAndLeap(self) -> RandomGenerator.JumpableGenerator: ...

    def jump(self) -> None: ...

    def jumpDistance(self) -> float: ...

    @overload
    def jumps(self) -> Stream[RandomGenerator]: ...

    @overload
    def jumps(self, arg0: int) -> Stream[RandomGenerator]: ...

    def leap(self) -> None: ...

    def leapDistance(self) -> float: ...

    @overload
    def leaps(self) -> Stream[RandomGenerator.JumpableGenerator]: ...

    @overload
    def leaps(self, arg0: int) -> Stream[RandomGenerator.JumpableGenerator]: ...

    @overload
    def rngs(self) -> Stream[RandomGenerator]: ...

    @overload
    def rngs(self, arg0: int) -> Stream[RandomGenerator]: ...

    @staticmethod
    @overload
    def of(arg0: str) -> RandomGenerator.LeapableGenerator: ...

    @staticmethod
    @overload
    def of(arg0: str) -> RandomGenerator.JumpableGenerator: ...

  class JumpableGenerator:

    def copy(self) -> RandomGenerator.JumpableGenerator: ...

    def copyAndJump(self) -> RandomGenerator: ...

    def jump(self) -> None: ...

    def jumpDistance(self) -> float: ...

    @overload
    def jumps(self) -> Stream[RandomGenerator]: ...

    @overload
    def jumps(self, arg0: int) -> Stream[RandomGenerator]: ...

    @overload
    def rngs(self) -> Stream[RandomGenerator]: ...

    @overload
    def rngs(self) -> Stream[RandomGenerator]: ...

    @overload
    def rngs(self, arg0: int) -> Stream[RandomGenerator]: ...

    @overload
    def rngs(self, arg0: int) -> Stream[RandomGenerator]: ...

    @staticmethod
    @overload
    def of(arg0: str) -> RandomGenerator.JumpableGenerator: ...

    @staticmethod
    @overload
    def of(arg0: str) -> RandomGenerator.StreamableGenerator: ...

  class SplittableGenerator:

    @overload
    def rngs(self) -> Stream[RandomGenerator]: ...

    @overload
    def rngs(self) -> Stream[RandomGenerator]: ...

    @overload
    def rngs(self, arg0: int) -> Stream[RandomGenerator]: ...

    @overload
    def rngs(self, arg0: int) -> Stream[RandomGenerator]: ...

    @overload
    def split(self) -> RandomGenerator.SplittableGenerator: ...

    @overload
    def split(self, arg0: RandomGenerator.SplittableGenerator) -> RandomGenerator.SplittableGenerator: ...

    @overload
    def splits(self) -> Stream[RandomGenerator.SplittableGenerator]: ...

    @overload
    def splits(self, arg0: RandomGenerator.SplittableGenerator) -> Stream[RandomGenerator.SplittableGenerator]: ...

    @overload
    def splits(self, arg0: int) -> Stream[RandomGenerator.SplittableGenerator]: ...

    @overload
    def splits(self, arg0: int, arg1: RandomGenerator.SplittableGenerator) -> Stream[RandomGenerator.SplittableGenerator]: ...

    @staticmethod
    @overload
    def of(arg0: str) -> RandomGenerator.SplittableGenerator: ...

    @staticmethod
    @overload
    def of(arg0: str) -> RandomGenerator.StreamableGenerator: ...

  class StreamableGenerator:

    @overload
    def doubles(self) -> DoubleStream: ...

    @overload
    def doubles(self, arg0: int) -> DoubleStream: ...

    @overload
    def doubles(self, arg0: float, arg1: float) -> DoubleStream: ...

    @overload
    def doubles(self, arg0: int, arg1: float, arg2: float) -> DoubleStream: ...

    @overload
    def ints(self) -> IntStream: ...

    @overload
    def ints(self, arg0: int) -> IntStream: ...

    @overload
    def ints(self, arg0: int, arg1: int) -> IntStream: ...

    @overload
    def ints(self, arg0: int, arg1: int, arg2: int) -> IntStream: ...

    def isDeprecated(self) -> bool: ...

    @overload
    def longs(self) -> LongStream: ...

    @overload
    def longs(self, arg0: int) -> LongStream: ...

    @overload
    def longs(self, arg0: int, arg1: int) -> LongStream: ...

    @overload
    def longs(self, arg0: int, arg1: int, arg2: int) -> LongStream: ...

    def nextBoolean(self) -> bool: ...

    def nextBytes(self, arg0: list[int]) -> None: ...

    @overload
    def nextDouble(self) -> float: ...

    @overload
    def nextDouble(self, arg0: float) -> float: ...

    @overload
    def nextDouble(self, arg0: float, arg1: float) -> float: ...

    def nextExponential(self) -> float: ...

    @overload
    def nextFloat(self) -> float: ...

    @overload
    def nextFloat(self, arg0: float) -> float: ...

    @overload
    def nextFloat(self, arg0: float, arg1: float) -> float: ...

    @overload
    def nextGaussian(self) -> float: ...

    @overload
    def nextGaussian(self, arg0: float, arg1: float) -> float: ...

    @overload
    def nextInt(self) -> int: ...

    @overload
    def nextInt(self, arg0: int) -> int: ...

    @overload
    def nextInt(self, arg0: int, arg1: int) -> int: ...

    @overload
    def nextLong(self) -> int: ...

    @overload
    def nextLong(self, arg0: int) -> int: ...

    @overload
    def nextLong(self, arg0: int, arg1: int) -> int: ...

    @overload
    def rngs(self) -> Stream[RandomGenerator]: ...

    @overload
    def rngs(self, arg0: int) -> Stream[RandomGenerator]: ...

    @staticmethod
    def getDefault() -> RandomGenerator: ...

    @staticmethod
    @overload
    def of(arg0: str) -> RandomGenerator.StreamableGenerator: ...

    @staticmethod
    @overload
    def of(arg0: str) -> RandomGenerator: ...

