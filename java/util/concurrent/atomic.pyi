from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.lang import Number, Class
from java.util.function import IntBinaryOperator, IntUnaryOperator, LongBinaryOperator, LongUnaryOperator, BinaryOperator, UnaryOperator

T = TypeVar('T', default=Any)
U = TypeVar('U', default=Any)
CASUpdater_T = TypeVar('CASUpdater_T', default=Any)
LockedUpdater_T = TypeVar('LockedUpdater_T', default=Any)
V = TypeVar('V', default=Any)
W = TypeVar('W', default=Any)
AtomicReferenceFieldUpdaterImpl_T = TypeVar('AtomicReferenceFieldUpdaterImpl_T', default=Any)
AtomicReferenceFieldUpdaterImpl_V = TypeVar('AtomicReferenceFieldUpdaterImpl_V', default=Any)

class AtomicBoolean:

  def compareAndExchange(self, arg0: bool, arg1: bool) -> bool: ...

  def compareAndExchangeAcquire(self, arg0: bool, arg1: bool) -> bool: ...

  def compareAndExchangeRelease(self, arg0: bool, arg1: bool) -> bool: ...

  def compareAndSet(self, arg0: bool, arg1: bool) -> bool: ...

  def get(self) -> bool: ...

  def getAcquire(self) -> bool: ...

  def getAndSet(self, arg0: bool) -> bool: ...

  def getOpaque(self) -> bool: ...

  def getPlain(self) -> bool: ...

  def lazySet(self, arg0: bool) -> None: ...

  def set(self, arg0: bool) -> None: ...

  def setOpaque(self, arg0: bool) -> None: ...

  def setPlain(self, arg0: bool) -> None: ...

  def setRelease(self, arg0: bool) -> None: ...

  def toString(self) -> str: ...

  def weakCompareAndSet(self, arg0: bool, arg1: bool) -> bool: ...

  def weakCompareAndSetAcquire(self, arg0: bool, arg1: bool) -> bool: ...

  def weakCompareAndSetPlain(self, arg0: bool, arg1: bool) -> bool: ...

  def weakCompareAndSetRelease(self, arg0: bool, arg1: bool) -> bool: ...

  def weakCompareAndSetVolatile(self, arg0: bool, arg1: bool) -> bool: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: bool): ...


class AtomicInteger(Number):

  def accumulateAndGet(self, arg0: int, arg1: IntBinaryOperator) -> int: ...

  def addAndGet(self, arg0: int) -> int: ...

  def compareAndExchange(self, arg0: int, arg1: int) -> int: ...

  def compareAndExchangeAcquire(self, arg0: int, arg1: int) -> int: ...

  def compareAndExchangeRelease(self, arg0: int, arg1: int) -> int: ...

  def compareAndSet(self, arg0: int, arg1: int) -> bool: ...

  def decrementAndGet(self) -> int: ...

  def doubleValue(self) -> float: ...

  def floatValue(self) -> float: ...

  def get(self) -> int: ...

  def getAcquire(self) -> int: ...

  def getAndAccumulate(self, arg0: int, arg1: IntBinaryOperator) -> int: ...

  def getAndAdd(self, arg0: int) -> int: ...

  def getAndDecrement(self) -> int: ...

  def getAndIncrement(self) -> int: ...

  def getAndSet(self, arg0: int) -> int: ...

  def getAndUpdate(self, arg0: IntUnaryOperator) -> int: ...

  def getOpaque(self) -> int: ...

  def getPlain(self) -> int: ...

  def incrementAndGet(self) -> int: ...

  def intValue(self) -> int: ...

  def lazySet(self, arg0: int) -> None: ...

  def longValue(self) -> int: ...

  def set(self, arg0: int) -> None: ...

  def setOpaque(self, arg0: int) -> None: ...

  def setPlain(self, arg0: int) -> None: ...

  def setRelease(self, arg0: int) -> None: ...

  def toString(self) -> str: ...

  def updateAndGet(self, arg0: IntUnaryOperator) -> int: ...

  def weakCompareAndSet(self, arg0: int, arg1: int) -> bool: ...

  def weakCompareAndSetAcquire(self, arg0: int, arg1: int) -> bool: ...

  def weakCompareAndSetPlain(self, arg0: int, arg1: int) -> bool: ...

  def weakCompareAndSetRelease(self, arg0: int, arg1: int) -> bool: ...

  def weakCompareAndSetVolatile(self, arg0: int, arg1: int) -> bool: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: int): ...


class AtomicIntegerArray:

  def accumulateAndGet(self, arg0: int, arg1: int, arg2: IntBinaryOperator) -> int: ...

  def addAndGet(self, arg0: int, arg1: int) -> int: ...

  def compareAndExchange(self, arg0: int, arg1: int, arg2: int) -> int: ...

  def compareAndExchangeAcquire(self, arg0: int, arg1: int, arg2: int) -> int: ...

  def compareAndExchangeRelease(self, arg0: int, arg1: int, arg2: int) -> int: ...

  def compareAndSet(self, arg0: int, arg1: int, arg2: int) -> bool: ...

  def decrementAndGet(self, arg0: int) -> int: ...

  def get(self, arg0: int) -> int: ...

  def getAcquire(self, arg0: int) -> int: ...

  def getAndAccumulate(self, arg0: int, arg1: int, arg2: IntBinaryOperator) -> int: ...

  def getAndAdd(self, arg0: int, arg1: int) -> int: ...

  def getAndDecrement(self, arg0: int) -> int: ...

  def getAndIncrement(self, arg0: int) -> int: ...

  def getAndSet(self, arg0: int, arg1: int) -> int: ...

  def getAndUpdate(self, arg0: int, arg1: IntUnaryOperator) -> int: ...

  def getOpaque(self, arg0: int) -> int: ...

  def getPlain(self, arg0: int) -> int: ...

  def incrementAndGet(self, arg0: int) -> int: ...

  def lazySet(self, arg0: int, arg1: int) -> None: ...

  def length(self) -> int: ...

  def set(self, arg0: int, arg1: int) -> None: ...

  def setOpaque(self, arg0: int, arg1: int) -> None: ...

  def setPlain(self, arg0: int, arg1: int) -> None: ...

  def setRelease(self, arg0: int, arg1: int) -> None: ...

  def toString(self) -> str: ...

  def updateAndGet(self, arg0: int, arg1: IntUnaryOperator) -> int: ...

  def weakCompareAndSet(self, arg0: int, arg1: int, arg2: int) -> bool: ...

  def weakCompareAndSetAcquire(self, arg0: int, arg1: int, arg2: int) -> bool: ...

  def weakCompareAndSetPlain(self, arg0: int, arg1: int, arg2: int) -> bool: ...

  def weakCompareAndSetRelease(self, arg0: int, arg1: int, arg2: int) -> bool: ...

  def weakCompareAndSetVolatile(self, arg0: int, arg1: int, arg2: int) -> bool: ...

  @overload
  def __init__(self, arg0: list[int]): ...
  @overload
  def __init__(self, arg0: int): ...


class AtomicLong(Number):

  def accumulateAndGet(self, arg0: int, arg1: LongBinaryOperator) -> int: ...

  def addAndGet(self, arg0: int) -> int: ...

  def compareAndExchange(self, arg0: int, arg1: int) -> int: ...

  def compareAndExchangeAcquire(self, arg0: int, arg1: int) -> int: ...

  def compareAndExchangeRelease(self, arg0: int, arg1: int) -> int: ...

  def compareAndSet(self, arg0: int, arg1: int) -> bool: ...

  def decrementAndGet(self) -> int: ...

  def doubleValue(self) -> float: ...

  def floatValue(self) -> float: ...

  def get(self) -> int: ...

  def getAcquire(self) -> int: ...

  def getAndAccumulate(self, arg0: int, arg1: LongBinaryOperator) -> int: ...

  def getAndAdd(self, arg0: int) -> int: ...

  def getAndDecrement(self) -> int: ...

  def getAndIncrement(self) -> int: ...

  def getAndSet(self, arg0: int) -> int: ...

  def getAndUpdate(self, arg0: LongUnaryOperator) -> int: ...

  def getOpaque(self) -> int: ...

  def getPlain(self) -> int: ...

  def incrementAndGet(self) -> int: ...

  def intValue(self) -> int: ...

  def lazySet(self, arg0: int) -> None: ...

  def longValue(self) -> int: ...

  def set(self, arg0: int) -> None: ...

  def setOpaque(self, arg0: int) -> None: ...

  def setPlain(self, arg0: int) -> None: ...

  def setRelease(self, arg0: int) -> None: ...

  def toString(self) -> str: ...

  def updateAndGet(self, arg0: LongUnaryOperator) -> int: ...

  def weakCompareAndSet(self, arg0: int, arg1: int) -> bool: ...

  def weakCompareAndSetAcquire(self, arg0: int, arg1: int) -> bool: ...

  def weakCompareAndSetPlain(self, arg0: int, arg1: int) -> bool: ...

  def weakCompareAndSetRelease(self, arg0: int, arg1: int) -> bool: ...

  def weakCompareAndSetVolatile(self, arg0: int, arg1: int) -> bool: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: int): ...


class AtomicLongArray:

  def accumulateAndGet(self, arg0: int, arg1: int, arg2: LongBinaryOperator) -> int: ...

  def addAndGet(self, arg0: int, arg1: int) -> int: ...

  def compareAndExchange(self, arg0: int, arg1: int, arg2: int) -> int: ...

  def compareAndExchangeAcquire(self, arg0: int, arg1: int, arg2: int) -> int: ...

  def compareAndExchangeRelease(self, arg0: int, arg1: int, arg2: int) -> int: ...

  def compareAndSet(self, arg0: int, arg1: int, arg2: int) -> bool: ...

  def decrementAndGet(self, arg0: int) -> int: ...

  def get(self, arg0: int) -> int: ...

  def getAcquire(self, arg0: int) -> int: ...

  def getAndAccumulate(self, arg0: int, arg1: int, arg2: LongBinaryOperator) -> int: ...

  def getAndAdd(self, arg0: int, arg1: int) -> int: ...

  def getAndDecrement(self, arg0: int) -> int: ...

  def getAndIncrement(self, arg0: int) -> int: ...

  def getAndSet(self, arg0: int, arg1: int) -> int: ...

  def getAndUpdate(self, arg0: int, arg1: LongUnaryOperator) -> int: ...

  def getOpaque(self, arg0: int) -> int: ...

  def getPlain(self, arg0: int) -> int: ...

  def incrementAndGet(self, arg0: int) -> int: ...

  def lazySet(self, arg0: int, arg1: int) -> None: ...

  def length(self) -> int: ...

  def set(self, arg0: int, arg1: int) -> None: ...

  def setOpaque(self, arg0: int, arg1: int) -> None: ...

  def setPlain(self, arg0: int, arg1: int) -> None: ...

  def setRelease(self, arg0: int, arg1: int) -> None: ...

  def toString(self) -> str: ...

  def updateAndGet(self, arg0: int, arg1: LongUnaryOperator) -> int: ...

  def weakCompareAndSet(self, arg0: int, arg1: int, arg2: int) -> bool: ...

  def weakCompareAndSetAcquire(self, arg0: int, arg1: int, arg2: int) -> bool: ...

  def weakCompareAndSetPlain(self, arg0: int, arg1: int, arg2: int) -> bool: ...

  def weakCompareAndSetRelease(self, arg0: int, arg1: int, arg2: int) -> bool: ...

  def weakCompareAndSetVolatile(self, arg0: int, arg1: int, arg2: int) -> bool: ...

  @overload
  def __init__(self, arg0: list[int]): ...
  @overload
  def __init__(self, arg0: int): ...


class AtomicLongFieldUpdater[T]:

  def accumulateAndGet(self, arg0: object, arg1: int, arg2: LongBinaryOperator) -> int: ...

  def addAndGet(self, arg0: object, arg1: int) -> int: ...

  def compareAndSet(self, arg0: object, arg1: int, arg2: int) -> bool: ...

  def decrementAndGet(self, arg0: object) -> int: ...

  def get(self, arg0: object) -> int: ...

  def getAndAccumulate(self, arg0: object, arg1: int, arg2: LongBinaryOperator) -> int: ...

  def getAndAdd(self, arg0: object, arg1: int) -> int: ...

  def getAndDecrement(self, arg0: object) -> int: ...

  def getAndIncrement(self, arg0: object) -> int: ...

  def getAndSet(self, arg0: object, arg1: int) -> int: ...

  def getAndUpdate(self, arg0: object, arg1: LongUnaryOperator) -> int: ...

  def incrementAndGet(self, arg0: object) -> int: ...

  def lazySet(self, arg0: object, arg1: int) -> None: ...

  def set(self, arg0: object, arg1: int) -> None: ...

  def updateAndGet(self, arg0: object, arg1: LongUnaryOperator) -> int: ...

  def weakCompareAndSet(self, arg0: object, arg1: int, arg2: int) -> bool: ...

  @staticmethod
  def newUpdater(arg0: Class[U], arg1: str) -> AtomicLongFieldUpdater[U]: ...

  class CASUpdater[CASUpdater_T](AtomicLongFieldUpdater):

    def addAndGet(self, arg0: object, arg1: int) -> int: ...

    def compareAndSet(self, arg0: object, arg1: int, arg2: int) -> bool: ...

    def decrementAndGet(self, arg0: object) -> int: ...

    def get(self, arg0: object) -> int: ...

    def getAndAdd(self, arg0: object, arg1: int) -> int: ...

    def getAndDecrement(self, arg0: object) -> int: ...

    def getAndIncrement(self, arg0: object) -> int: ...

    def getAndSet(self, arg0: object, arg1: int) -> int: ...

    def incrementAndGet(self, arg0: object) -> int: ...

    def lazySet(self, arg0: object, arg1: int) -> None: ...

    def set(self, arg0: object, arg1: int) -> None: ...

    def weakCompareAndSet(self, arg0: object, arg1: int, arg2: int) -> bool: ...

  class LockedUpdater[LockedUpdater_T](AtomicLongFieldUpdater):

    def compareAndSet(self, arg0: object, arg1: int, arg2: int) -> bool: ...

    def get(self, arg0: object) -> int: ...

    def lazySet(self, arg0: object, arg1: int) -> None: ...

    def set(self, arg0: object, arg1: int) -> None: ...

    def weakCompareAndSet(self, arg0: object, arg1: int, arg2: int) -> bool: ...


class AtomicMarkableReference[V]:

  def attemptMark(self, arg0: object, arg1: bool) -> bool: ...

  def compareAndSet(self, arg0: object, arg1: object, arg2: bool, arg3: bool) -> bool: ...

  def get(self, arg0: list[bool]) -> object: ...

  def getReference(self) -> object: ...

  def isMarked(self) -> bool: ...

  def set(self, arg0: object, arg1: bool) -> None: ...

  def weakCompareAndSet(self, arg0: object, arg1: object, arg2: bool, arg3: bool) -> bool: ...

  def __init__(self, arg0: object, arg1: bool): ...

  class Pair[T]: ...


class AtomicReference[V]:

  def accumulateAndGet(self, arg0: object, arg1: BinaryOperator[V]) -> object: ...

  def compareAndExchange(self, arg0: object, arg1: object) -> object: ...

  def compareAndExchangeAcquire(self, arg0: object, arg1: object) -> object: ...

  def compareAndExchangeRelease(self, arg0: object, arg1: object) -> object: ...

  def compareAndSet(self, arg0: object, arg1: object) -> bool: ...

  def get(self) -> object: ...

  def getAcquire(self) -> object: ...

  def getAndAccumulate(self, arg0: object, arg1: BinaryOperator[V]) -> object: ...

  def getAndSet(self, arg0: object) -> object: ...

  def getAndUpdate(self, arg0: UnaryOperator[V]) -> object: ...

  def getOpaque(self) -> object: ...

  def getPlain(self) -> object: ...

  def lazySet(self, arg0: object) -> None: ...

  def set(self, arg0: object) -> None: ...

  def setOpaque(self, arg0: object) -> None: ...

  def setPlain(self, arg0: object) -> None: ...

  def setRelease(self, arg0: object) -> None: ...

  def toString(self) -> str: ...

  def updateAndGet(self, arg0: UnaryOperator[V]) -> object: ...

  def weakCompareAndSet(self, arg0: object, arg1: object) -> bool: ...

  def weakCompareAndSetAcquire(self, arg0: object, arg1: object) -> bool: ...

  def weakCompareAndSetPlain(self, arg0: object, arg1: object) -> bool: ...

  def weakCompareAndSetRelease(self, arg0: object, arg1: object) -> bool: ...

  def weakCompareAndSetVolatile(self, arg0: object, arg1: object) -> bool: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: object): ...


class AtomicReferenceFieldUpdater[T, V]:

  def accumulateAndGet(self, arg0: object, arg1: object, arg2: BinaryOperator[V]) -> object: ...

  def compareAndSet(self, arg0: object, arg1: object, arg2: object) -> bool: ...

  def get(self, arg0: object) -> object: ...

  def getAndAccumulate(self, arg0: object, arg1: object, arg2: BinaryOperator[V]) -> object: ...

  def getAndSet(self, arg0: object, arg1: object) -> object: ...

  def getAndUpdate(self, arg0: object, arg1: UnaryOperator[V]) -> object: ...

  def lazySet(self, arg0: object, arg1: object) -> None: ...

  def set(self, arg0: object, arg1: object) -> None: ...

  def updateAndGet(self, arg0: object, arg1: UnaryOperator[V]) -> object: ...

  def weakCompareAndSet(self, arg0: object, arg1: object, arg2: object) -> bool: ...

  @staticmethod
  def newUpdater(arg0: Class[U], arg1: Class[W], arg2: str) -> AtomicReferenceFieldUpdater[U, W]: ...

  class AtomicReferenceFieldUpdaterImpl[AtomicReferenceFieldUpdaterImpl_T, AtomicReferenceFieldUpdaterImpl_V](AtomicReferenceFieldUpdater):

    def compareAndSet(self, arg0: object, arg1: object, arg2: object) -> bool: ...

    def get(self, arg0: object) -> object: ...

    def getAndSet(self, arg0: object, arg1: object) -> object: ...

    def lazySet(self, arg0: object, arg1: object) -> None: ...

    def set(self, arg0: object, arg1: object) -> None: ...

    def weakCompareAndSet(self, arg0: object, arg1: object, arg2: object) -> bool: ...

