from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.lang import Enum
from java.time import LocalDateTime, Duration, Instant, ZoneOffset, DayOfWeek, LocalTime, Month
from java.util import List

class ZoneOffsetTransition:

  @overload
  def compareTo(self, arg0: object) -> int: ...

  @overload
  def compareTo(self, arg0: object) -> int: ...

  @overload
  def compareTo(self, arg0: ZoneOffsetTransition) -> int: ...

  def equals(self, arg0: object) -> bool: ...

  def getDateTimeAfter(self) -> LocalDateTime: ...

  def getDateTimeBefore(self) -> LocalDateTime: ...

  def getDuration(self) -> Duration: ...

  def getInstant(self) -> Instant: ...

  def getOffsetAfter(self) -> ZoneOffset: ...

  def getOffsetBefore(self) -> ZoneOffset: ...

  def hashCode(self) -> int: ...

  def isGap(self) -> bool: ...

  def isOverlap(self) -> bool: ...

  def isValidOffset(self, arg0: ZoneOffset) -> bool: ...

  def toEpochSecond(self) -> int: ...

  def toString(self) -> str: ...

  @staticmethod
  def of(arg0: LocalDateTime, arg1: ZoneOffset, arg2: ZoneOffset) -> ZoneOffsetTransition: ...


class ZoneOffsetTransitionRule:

  def createTransition(self, arg0: int) -> ZoneOffsetTransition: ...

  def equals(self, arg0: object) -> bool: ...

  def getDayOfMonthIndicator(self) -> int: ...

  def getDayOfWeek(self) -> DayOfWeek: ...

  def getLocalTime(self) -> LocalTime: ...

  def getMonth(self) -> Month: ...

  def getOffsetAfter(self) -> ZoneOffset: ...

  def getOffsetBefore(self) -> ZoneOffset: ...

  def getStandardOffset(self) -> ZoneOffset: ...

  def getTimeDefinition(self) -> ZoneOffsetTransitionRule.TimeDefinition: ...

  def hashCode(self) -> int: ...

  def isMidnightEndOfDay(self) -> bool: ...

  def toString(self) -> str: ...

  @staticmethod
  def of(arg0: Month, arg1: int, arg2: DayOfWeek, arg3: LocalTime, arg4: bool, arg5: ZoneOffsetTransitionRule.TimeDefinition, arg6: ZoneOffset, arg7: ZoneOffset, arg8: ZoneOffset) -> ZoneOffsetTransitionRule: ...

  class TimeDefinition(Enum):

    STANDARD: ZoneOffsetTransitionRule.TimeDefinition

    UTC: ZoneOffsetTransitionRule.TimeDefinition

    WALL: ZoneOffsetTransitionRule.TimeDefinition

    def createDateTime(self, arg0: LocalDateTime, arg1: ZoneOffset, arg2: ZoneOffset) -> LocalDateTime: ...

    @staticmethod
    def valueOf(arg0: str) -> ZoneOffsetTransitionRule.TimeDefinition: ...

    @staticmethod
    def values() -> list[ZoneOffsetTransitionRule.TimeDefinition]: ...


class ZoneRules:

  def equals(self, arg0: object) -> bool: ...

  def getDaylightSavings(self, arg0: Instant) -> Duration: ...

  @overload
  def getOffset(self, arg0: Instant) -> ZoneOffset: ...

  @overload
  def getOffset(self, arg0: LocalDateTime) -> ZoneOffset: ...

  def getStandardOffset(self, arg0: Instant) -> ZoneOffset: ...

  def getTransition(self, arg0: LocalDateTime) -> ZoneOffsetTransition: ...

  def getTransitionRules(self) -> List[ZoneOffsetTransitionRule]: ...

  def getTransitions(self) -> List[ZoneOffsetTransition]: ...

  def getValidOffsets(self, arg0: LocalDateTime) -> List[ZoneOffset]: ...

  def hashCode(self) -> int: ...

  def isDaylightSavings(self, arg0: Instant) -> bool: ...

  def isFixedOffset(self) -> bool: ...

  def isValidOffset(self, arg0: LocalDateTime, arg1: ZoneOffset) -> bool: ...

  def nextTransition(self, arg0: Instant) -> ZoneOffsetTransition: ...

  def previousTransition(self, arg0: Instant) -> ZoneOffsetTransition: ...

  def toString(self) -> str: ...

  @staticmethod
  @overload
  def of(arg0: ZoneOffset) -> ZoneRules: ...

  @staticmethod
  @overload
  def of(arg0: ZoneOffset, arg1: ZoneOffset, arg2: List[ZoneOffsetTransition], arg3: List[ZoneOffsetTransition], arg4: List[ZoneOffsetTransitionRule]) -> ZoneRules: ...

