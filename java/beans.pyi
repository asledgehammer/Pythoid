from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.awt import Component, Graphics, Rectangle
from java.lang import Class
from java.lang.reflect import Method
from java.util import EventListener, Set, Map, Enumeration, EventObject

L = TypeVar('L', default=Any)

class BeanProperty:

  def annotationType(self) -> Class[Annotation]: ...

  def bound(self) -> bool: ...

  def description(self) -> str: ...

  def enumerationValues(self) -> list[str]: ...

  def equals(self, arg0: object) -> bool: ...

  def expert(self) -> bool: ...

  def hashCode(self) -> int: ...

  def hidden(self) -> bool: ...

  def preferred(self) -> bool: ...

  def required(self) -> bool: ...

  def toString(self) -> str: ...

  def visualUpdate(self) -> bool: ...


class ChangeListenerMap[L]:

  def add(self, arg0: str, arg1: L) -> None: ...

  def extract(self, arg0: L) -> L: ...

  def get(self, arg0: str) -> list[EventListener]: ...

  def getEntries(self) -> Set[Map.Entry[str, L]]: ...

  @overload
  def getListeners(self) -> list[EventListener]: ...

  @overload
  def getListeners(self, arg0: str) -> list[EventListener]: ...

  def hasListeners(self, arg0: str) -> bool: ...

  def remove(self, arg0: str, arg1: L) -> None: ...

  def set(self, arg0: str, arg1: list[EventListener]) -> None: ...


class FeatureDescriptor:

  def attributeNames(self) -> Enumeration[str]: ...

  def getDisplayName(self) -> str: ...

  def getName(self) -> str: ...

  def getShortDescription(self) -> str: ...

  def getValue(self, arg0: str) -> object: ...

  def isExpert(self) -> bool: ...

  def isHidden(self) -> bool: ...

  def isPreferred(self) -> bool: ...

  def setDisplayName(self, arg0: str) -> None: ...

  def setExpert(self, arg0: bool) -> None: ...

  def setHidden(self, arg0: bool) -> None: ...

  def setName(self, arg0: str) -> None: ...

  def setPreferred(self, arg0: bool) -> None: ...

  def setShortDescription(self, arg0: str) -> None: ...

  def setValue(self, arg0: str, arg1: object) -> None: ...

  def toString(self) -> str: ...

  def __init__(self): ...


class MethodRef: ...


class PropertyChangeEvent(EventObject):

  def getNewValue(self) -> object: ...

  def getOldValue(self) -> object: ...

  def getPropagationId(self) -> object: ...

  def getPropertyName(self) -> str: ...

  def setPropagationId(self, arg0: object) -> None: ...

  def toString(self) -> str: ...

  def __init__(self, arg0: object, arg1: str, arg2: object, arg3: object): ...


class PropertyChangeListener:

  def propertyChange(self, arg0: PropertyChangeEvent) -> None: ...


class PropertyChangeSupport:

  @overload
  def addPropertyChangeListener(self, arg0: PropertyChangeListener) -> None: ...

  @overload
  def addPropertyChangeListener(self, arg0: str, arg1: PropertyChangeListener) -> None: ...

  @overload
  def fireIndexedPropertyChange(self, arg0: str, arg1: int, arg2: bool, arg3: bool) -> None: ...

  @overload
  def fireIndexedPropertyChange(self, arg0: str, arg1: int, arg2: int, arg3: int) -> None: ...

  @overload
  def fireIndexedPropertyChange(self, arg0: str, arg1: int, arg2: object, arg3: object) -> None: ...

  @overload
  def firePropertyChange(self, arg0: PropertyChangeEvent) -> None: ...

  @overload
  def firePropertyChange(self, arg0: str, arg1: bool, arg2: bool) -> None: ...

  @overload
  def firePropertyChange(self, arg0: str, arg1: int, arg2: int) -> None: ...

  @overload
  def firePropertyChange(self, arg0: str, arg1: object, arg2: object) -> None: ...

  @overload
  def getPropertyChangeListeners(self) -> list[PropertyChangeListener]: ...

  @overload
  def getPropertyChangeListeners(self, arg0: str) -> list[PropertyChangeListener]: ...

  def hasListeners(self, arg0: str) -> bool: ...

  @overload
  def removePropertyChangeListener(self, arg0: PropertyChangeListener) -> None: ...

  @overload
  def removePropertyChangeListener(self, arg0: str, arg1: PropertyChangeListener) -> None: ...

  def __init__(self, arg0: object): ...

  class PropertyChangeListenerMap(ChangeListenerMap):

    @overload
    def extract(self, arg0: PropertyChangeListener) -> PropertyChangeListener: ...

    @overload
    def extract(self, arg0: EventListener) -> EventListener: ...


class PropertyDescriptor(FeatureDescriptor):

  def createPropertyEditor(self, arg0: object) -> PropertyEditor: ...

  def equals(self, arg0: object) -> bool: ...

  def getPropertyEditorClass(self) -> Class[Any]: ...

  def getPropertyType(self) -> Class[Any]: ...

  def getReadMethod(self) -> Method: ...

  def getWriteMethod(self) -> Method: ...

  def hashCode(self) -> int: ...

  def isBound(self) -> bool: ...

  def isConstrained(self) -> bool: ...

  def setBound(self, arg0: bool) -> None: ...

  def setConstrained(self, arg0: bool) -> None: ...

  def setPropertyEditorClass(self, arg0: Class[Any]) -> None: ...

  def setReadMethod(self, arg0: Method) -> None: ...

  def setWriteMethod(self, arg0: Method) -> None: ...

  @overload
  def __init__(self, arg0: str, arg1: Class[Any]): ...
  @overload
  def __init__(self, arg0: str, arg1: Method, arg2: Method): ...
  @overload
  def __init__(self, arg0: str, arg1: Class[Any], arg2: str, arg3: str): ...


class PropertyEditor:

  def addPropertyChangeListener(self, arg0: PropertyChangeListener) -> None: ...

  def getAsText(self) -> str: ...

  def getCustomEditor(self) -> Component: ...

  def getJavaInitializationString(self) -> str: ...

  def getTags(self) -> list[str]: ...

  def getValue(self) -> object: ...

  def isPaintable(self) -> bool: ...

  def paintValue(self, arg0: Graphics, arg1: Rectangle) -> None: ...

  def removePropertyChangeListener(self, arg0: PropertyChangeListener) -> None: ...

  def setAsText(self, arg0: str) -> None: ...

  def setValue(self, arg0: object) -> None: ...

  def supportsCustomEditor(self) -> bool: ...


class Transient:

  def annotationType(self) -> Class[Annotation]: ...

  def equals(self, arg0: object) -> bool: ...

  def hashCode(self) -> int: ...

  def toString(self) -> str: ...

  def value(self) -> bool: ...


class VetoableChangeListener:

  def vetoableChange(self, arg0: PropertyChangeEvent) -> None: ...


class VetoableChangeSupport:

  @overload
  def addVetoableChangeListener(self, arg0: VetoableChangeListener) -> None: ...

  @overload
  def addVetoableChangeListener(self, arg0: str, arg1: VetoableChangeListener) -> None: ...

  @overload
  def fireVetoableChange(self, arg0: PropertyChangeEvent) -> None: ...

  @overload
  def fireVetoableChange(self, arg0: str, arg1: bool, arg2: bool) -> None: ...

  @overload
  def fireVetoableChange(self, arg0: str, arg1: int, arg2: int) -> None: ...

  @overload
  def fireVetoableChange(self, arg0: str, arg1: object, arg2: object) -> None: ...

  @overload
  def getVetoableChangeListeners(self) -> list[VetoableChangeListener]: ...

  @overload
  def getVetoableChangeListeners(self, arg0: str) -> list[VetoableChangeListener]: ...

  def hasListeners(self, arg0: str) -> bool: ...

  @overload
  def removeVetoableChangeListener(self, arg0: VetoableChangeListener) -> None: ...

  @overload
  def removeVetoableChangeListener(self, arg0: str, arg1: VetoableChangeListener) -> None: ...

  def __init__(self, arg0: object): ...

  class VetoableChangeListenerMap(ChangeListenerMap):

    @overload
    def extract(self, arg0: VetoableChangeListener) -> VetoableChangeListener: ...

    @overload
    def extract(self, arg0: EventListener) -> EventListener: ...

