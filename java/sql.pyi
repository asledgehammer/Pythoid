from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.io import InputStream, OutputStream, Reader, Writer
from java.lang import Class, Enum, Exception, Throwable, Integer
from java.math import BigDecimal
from java.net import URL
from java.time import Instant, LocalDate, LocalTime, LocalDateTime
from java.util import Map, Calendar, Properties, Date, Iterator, Spliterator
from java.util.concurrent import Executor
from java.util.function import Consumer

T = TypeVar('T', default=Any)

class Array:

  def free(self) -> None: ...

  @overload
  def getArray(self) -> object: ...

  @overload
  def getArray(self, arg0: Map[str, Class[Any]]) -> object: ...

  @overload
  def getArray(self, arg0: int, arg1: int) -> object: ...

  @overload
  def getArray(self, arg0: int, arg1: int, arg2: Map[str, Class[Any]]) -> object: ...

  def getBaseType(self) -> int: ...

  def getBaseTypeName(self) -> str: ...

  @overload
  def getResultSet(self) -> ResultSet: ...

  @overload
  def getResultSet(self, arg0: Map[str, Class[Any]]) -> ResultSet: ...

  @overload
  def getResultSet(self, arg0: int, arg1: int) -> ResultSet: ...

  @overload
  def getResultSet(self, arg0: int, arg1: int, arg2: Map[str, Class[Any]]) -> ResultSet: ...


class Blob:

  def free(self) -> None: ...

  @overload
  def getBinaryStream(self) -> InputStream: ...

  @overload
  def getBinaryStream(self, arg0: int, arg1: int) -> InputStream: ...

  def getBytes(self, arg0: int, arg1: int) -> list[int]: ...

  def length(self) -> int: ...

  @overload
  def position(self, arg0: list[int], arg1: int) -> int: ...

  @overload
  def position(self, arg0: Blob, arg1: int) -> int: ...

  def setBinaryStream(self, arg0: int) -> OutputStream: ...

  @overload
  def setBytes(self, arg0: int, arg1: list[int]) -> int: ...

  @overload
  def setBytes(self, arg0: int, arg1: list[int], arg2: int, arg3: int) -> int: ...

  def truncate(self, arg0: int) -> None: ...


class CallableStatement:

  def addBatch(self) -> None: ...

  def clearParameters(self) -> None: ...

  def execute(self) -> bool: ...

  def executeLargeUpdate(self) -> int: ...

  def executeQuery(self) -> ResultSet: ...

  def executeUpdate(self) -> int: ...

  @overload
  def getArray(self, arg0: int) -> Array: ...

  @overload
  def getArray(self, arg0: str) -> Array: ...

  @overload
  def getBigDecimal(self, arg0: int) -> BigDecimal: ...

  @overload
  def getBigDecimal(self, arg0: str) -> BigDecimal: ...

  @overload
  def getBigDecimal(self, arg0: int, arg1: int) -> BigDecimal: ...

  @overload
  def getBlob(self, arg0: int) -> Blob: ...

  @overload
  def getBlob(self, arg0: str) -> Blob: ...

  @overload
  def getBoolean(self, arg0: int) -> bool: ...

  @overload
  def getBoolean(self, arg0: str) -> bool: ...

  @overload
  def getByte(self, arg0: int) -> int: ...

  @overload
  def getByte(self, arg0: str) -> int: ...

  @overload
  def getBytes(self, arg0: int) -> list[int]: ...

  @overload
  def getBytes(self, arg0: str) -> list[int]: ...

  @overload
  def getCharacterStream(self, arg0: int) -> Reader: ...

  @overload
  def getCharacterStream(self, arg0: str) -> Reader: ...

  @overload
  def getClob(self, arg0: int) -> Clob: ...

  @overload
  def getClob(self, arg0: str) -> Clob: ...

  @overload
  def getDate(self, arg0: int) -> Date: ...

  @overload
  def getDate(self, arg0: str) -> Date: ...

  @overload
  def getDate(self, arg0: int, arg1: Calendar) -> Date: ...

  @overload
  def getDate(self, arg0: str, arg1: Calendar) -> Date: ...

  @overload
  def getDouble(self, arg0: int) -> float: ...

  @overload
  def getDouble(self, arg0: str) -> float: ...

  @overload
  def getFloat(self, arg0: int) -> float: ...

  @overload
  def getFloat(self, arg0: str) -> float: ...

  @overload
  def getInt(self, arg0: int) -> int: ...

  @overload
  def getInt(self, arg0: str) -> int: ...

  @overload
  def getLong(self, arg0: int) -> int: ...

  @overload
  def getLong(self, arg0: str) -> int: ...

  def getMetaData(self) -> ResultSetMetaData: ...

  @overload
  def getNCharacterStream(self, arg0: int) -> Reader: ...

  @overload
  def getNCharacterStream(self, arg0: str) -> Reader: ...

  @overload
  def getNClob(self, arg0: int) -> NClob: ...

  @overload
  def getNClob(self, arg0: str) -> NClob: ...

  @overload
  def getNString(self, arg0: int) -> str: ...

  @overload
  def getNString(self, arg0: str) -> str: ...

  @overload
  def getObject(self, arg0: int) -> object: ...

  @overload
  def getObject(self, arg0: str) -> object: ...

  @overload
  def getObject(self, arg0: int, arg1: Class[T]) -> object: ...

  @overload
  def getObject(self, arg0: int, arg1: Map[str, Class[Any]]) -> object: ...

  @overload
  def getObject(self, arg0: str, arg1: Class[T]) -> object: ...

  @overload
  def getObject(self, arg0: str, arg1: Map[str, Class[Any]]) -> object: ...

  def getParameterMetaData(self) -> ParameterMetaData: ...

  @overload
  def getRef(self, arg0: int) -> Ref: ...

  @overload
  def getRef(self, arg0: str) -> Ref: ...

  @overload
  def getRowId(self, arg0: int) -> RowId: ...

  @overload
  def getRowId(self, arg0: str) -> RowId: ...

  @overload
  def getSQLXML(self, arg0: int) -> SQLXML: ...

  @overload
  def getSQLXML(self, arg0: str) -> SQLXML: ...

  @overload
  def getShort(self, arg0: int) -> int: ...

  @overload
  def getShort(self, arg0: str) -> int: ...

  @overload
  def getString(self, arg0: int) -> str: ...

  @overload
  def getString(self, arg0: str) -> str: ...

  @overload
  def getTime(self, arg0: int) -> Time: ...

  @overload
  def getTime(self, arg0: str) -> Time: ...

  @overload
  def getTime(self, arg0: int, arg1: Calendar) -> Time: ...

  @overload
  def getTime(self, arg0: str, arg1: Calendar) -> Time: ...

  @overload
  def getTimestamp(self, arg0: int) -> Timestamp: ...

  @overload
  def getTimestamp(self, arg0: str) -> Timestamp: ...

  @overload
  def getTimestamp(self, arg0: int, arg1: Calendar) -> Timestamp: ...

  @overload
  def getTimestamp(self, arg0: str, arg1: Calendar) -> Timestamp: ...

  @overload
  def getURL(self, arg0: int) -> URL: ...

  @overload
  def getURL(self, arg0: str) -> URL: ...

  @overload
  def registerOutParameter(self, arg0: int, arg1: int) -> None: ...

  @overload
  def registerOutParameter(self, arg0: int, arg1: SQLType) -> None: ...

  @overload
  def registerOutParameter(self, arg0: str, arg1: int) -> None: ...

  @overload
  def registerOutParameter(self, arg0: str, arg1: SQLType) -> None: ...

  @overload
  def registerOutParameter(self, arg0: int, arg1: int, arg2: int) -> None: ...

  @overload
  def registerOutParameter(self, arg0: int, arg1: int, arg2: str) -> None: ...

  @overload
  def registerOutParameter(self, arg0: int, arg1: SQLType, arg2: int) -> None: ...

  @overload
  def registerOutParameter(self, arg0: int, arg1: SQLType, arg2: str) -> None: ...

  @overload
  def registerOutParameter(self, arg0: str, arg1: int, arg2: int) -> None: ...

  @overload
  def registerOutParameter(self, arg0: str, arg1: int, arg2: str) -> None: ...

  @overload
  def registerOutParameter(self, arg0: str, arg1: SQLType, arg2: int) -> None: ...

  @overload
  def registerOutParameter(self, arg0: str, arg1: SQLType, arg2: str) -> None: ...

  def setArray(self, arg0: int, arg1: Array) -> None: ...

  @overload
  def setAsciiStream(self, arg0: int, arg1: InputStream) -> None: ...

  @overload
  def setAsciiStream(self, arg0: str, arg1: InputStream) -> None: ...

  @overload
  def setAsciiStream(self, arg0: int, arg1: InputStream, arg2: int) -> None: ...

  @overload
  def setAsciiStream(self, arg0: int, arg1: InputStream, arg2: int) -> None: ...

  @overload
  def setAsciiStream(self, arg0: str, arg1: InputStream, arg2: int) -> None: ...

  @overload
  def setAsciiStream(self, arg0: str, arg1: InputStream, arg2: int) -> None: ...

  @overload
  def setBigDecimal(self, arg0: int, arg1: BigDecimal) -> None: ...

  @overload
  def setBigDecimal(self, arg0: str, arg1: BigDecimal) -> None: ...

  @overload
  def setBinaryStream(self, arg0: int, arg1: InputStream) -> None: ...

  @overload
  def setBinaryStream(self, arg0: str, arg1: InputStream) -> None: ...

  @overload
  def setBinaryStream(self, arg0: int, arg1: InputStream, arg2: int) -> None: ...

  @overload
  def setBinaryStream(self, arg0: int, arg1: InputStream, arg2: int) -> None: ...

  @overload
  def setBinaryStream(self, arg0: str, arg1: InputStream, arg2: int) -> None: ...

  @overload
  def setBinaryStream(self, arg0: str, arg1: InputStream, arg2: int) -> None: ...

  @overload
  def setBlob(self, arg0: int, arg1: InputStream) -> None: ...

  @overload
  def setBlob(self, arg0: int, arg1: Blob) -> None: ...

  @overload
  def setBlob(self, arg0: str, arg1: InputStream) -> None: ...

  @overload
  def setBlob(self, arg0: str, arg1: Blob) -> None: ...

  @overload
  def setBlob(self, arg0: int, arg1: InputStream, arg2: int) -> None: ...

  @overload
  def setBlob(self, arg0: str, arg1: InputStream, arg2: int) -> None: ...

  @overload
  def setBoolean(self, arg0: int, arg1: bool) -> None: ...

  @overload
  def setBoolean(self, arg0: str, arg1: bool) -> None: ...

  @overload
  def setByte(self, arg0: int, arg1: int) -> None: ...

  @overload
  def setByte(self, arg0: str, arg1: int) -> None: ...

  @overload
  def setBytes(self, arg0: int, arg1: list[int]) -> None: ...

  @overload
  def setBytes(self, arg0: str, arg1: list[int]) -> None: ...

  @overload
  def setCharacterStream(self, arg0: int, arg1: Reader) -> None: ...

  @overload
  def setCharacterStream(self, arg0: str, arg1: Reader) -> None: ...

  @overload
  def setCharacterStream(self, arg0: int, arg1: Reader, arg2: int) -> None: ...

  @overload
  def setCharacterStream(self, arg0: int, arg1: Reader, arg2: int) -> None: ...

  @overload
  def setCharacterStream(self, arg0: str, arg1: Reader, arg2: int) -> None: ...

  @overload
  def setCharacterStream(self, arg0: str, arg1: Reader, arg2: int) -> None: ...

  @overload
  def setClob(self, arg0: int, arg1: Reader) -> None: ...

  @overload
  def setClob(self, arg0: int, arg1: Clob) -> None: ...

  @overload
  def setClob(self, arg0: str, arg1: Reader) -> None: ...

  @overload
  def setClob(self, arg0: str, arg1: Clob) -> None: ...

  @overload
  def setClob(self, arg0: int, arg1: Reader, arg2: int) -> None: ...

  @overload
  def setClob(self, arg0: str, arg1: Reader, arg2: int) -> None: ...

  @overload
  def setDate(self, arg0: int, arg1: Date) -> None: ...

  @overload
  def setDate(self, arg0: str, arg1: Date) -> None: ...

  @overload
  def setDate(self, arg0: int, arg1: Date, arg2: Calendar) -> None: ...

  @overload
  def setDate(self, arg0: str, arg1: Date, arg2: Calendar) -> None: ...

  @overload
  def setDouble(self, arg0: int, arg1: float) -> None: ...

  @overload
  def setDouble(self, arg0: str, arg1: float) -> None: ...

  @overload
  def setFloat(self, arg0: int, arg1: float) -> None: ...

  @overload
  def setFloat(self, arg0: str, arg1: float) -> None: ...

  @overload
  def setInt(self, arg0: int, arg1: int) -> None: ...

  @overload
  def setInt(self, arg0: str, arg1: int) -> None: ...

  @overload
  def setLong(self, arg0: int, arg1: int) -> None: ...

  @overload
  def setLong(self, arg0: str, arg1: int) -> None: ...

  @overload
  def setNCharacterStream(self, arg0: int, arg1: Reader) -> None: ...

  @overload
  def setNCharacterStream(self, arg0: str, arg1: Reader) -> None: ...

  @overload
  def setNCharacterStream(self, arg0: int, arg1: Reader, arg2: int) -> None: ...

  @overload
  def setNCharacterStream(self, arg0: str, arg1: Reader, arg2: int) -> None: ...

  @overload
  def setNClob(self, arg0: int, arg1: Reader) -> None: ...

  @overload
  def setNClob(self, arg0: int, arg1: NClob) -> None: ...

  @overload
  def setNClob(self, arg0: str, arg1: Reader) -> None: ...

  @overload
  def setNClob(self, arg0: str, arg1: NClob) -> None: ...

  @overload
  def setNClob(self, arg0: int, arg1: Reader, arg2: int) -> None: ...

  @overload
  def setNClob(self, arg0: str, arg1: Reader, arg2: int) -> None: ...

  @overload
  def setNString(self, arg0: int, arg1: str) -> None: ...

  @overload
  def setNString(self, arg0: str, arg1: str) -> None: ...

  @overload
  def setNull(self, arg0: int, arg1: int) -> None: ...

  @overload
  def setNull(self, arg0: str, arg1: int) -> None: ...

  @overload
  def setNull(self, arg0: int, arg1: int, arg2: str) -> None: ...

  @overload
  def setNull(self, arg0: str, arg1: int, arg2: str) -> None: ...

  @overload
  def setObject(self, arg0: int, arg1: object) -> None: ...

  @overload
  def setObject(self, arg0: str, arg1: object) -> None: ...

  @overload
  def setObject(self, arg0: int, arg1: object, arg2: int) -> None: ...

  @overload
  def setObject(self, arg0: int, arg1: object, arg2: SQLType) -> None: ...

  @overload
  def setObject(self, arg0: str, arg1: object, arg2: int) -> None: ...

  @overload
  def setObject(self, arg0: str, arg1: object, arg2: SQLType) -> None: ...

  @overload
  def setObject(self, arg0: int, arg1: object, arg2: int, arg3: int) -> None: ...

  @overload
  def setObject(self, arg0: int, arg1: object, arg2: SQLType, arg3: int) -> None: ...

  @overload
  def setObject(self, arg0: str, arg1: object, arg2: int, arg3: int) -> None: ...

  @overload
  def setObject(self, arg0: str, arg1: object, arg2: SQLType, arg3: int) -> None: ...

  def setRef(self, arg0: int, arg1: Ref) -> None: ...

  @overload
  def setRowId(self, arg0: int, arg1: RowId) -> None: ...

  @overload
  def setRowId(self, arg0: str, arg1: RowId) -> None: ...

  @overload
  def setSQLXML(self, arg0: int, arg1: SQLXML) -> None: ...

  @overload
  def setSQLXML(self, arg0: str, arg1: SQLXML) -> None: ...

  @overload
  def setShort(self, arg0: int, arg1: int) -> None: ...

  @overload
  def setShort(self, arg0: str, arg1: int) -> None: ...

  @overload
  def setString(self, arg0: int, arg1: str) -> None: ...

  @overload
  def setString(self, arg0: str, arg1: str) -> None: ...

  @overload
  def setTime(self, arg0: int, arg1: Time) -> None: ...

  @overload
  def setTime(self, arg0: str, arg1: Time) -> None: ...

  @overload
  def setTime(self, arg0: int, arg1: Time, arg2: Calendar) -> None: ...

  @overload
  def setTime(self, arg0: str, arg1: Time, arg2: Calendar) -> None: ...

  @overload
  def setTimestamp(self, arg0: int, arg1: Timestamp) -> None: ...

  @overload
  def setTimestamp(self, arg0: str, arg1: Timestamp) -> None: ...

  @overload
  def setTimestamp(self, arg0: int, arg1: Timestamp, arg2: Calendar) -> None: ...

  @overload
  def setTimestamp(self, arg0: str, arg1: Timestamp, arg2: Calendar) -> None: ...

  @overload
  def setURL(self, arg0: int, arg1: URL) -> None: ...

  @overload
  def setURL(self, arg0: str, arg1: URL) -> None: ...

  def setUnicodeStream(self, arg0: int, arg1: InputStream, arg2: int) -> None: ...

  def wasNull(self) -> bool: ...


class Clob:

  def free(self) -> None: ...

  def getAsciiStream(self) -> InputStream: ...

  @overload
  def getCharacterStream(self) -> Reader: ...

  @overload
  def getCharacterStream(self, arg0: int, arg1: int) -> Reader: ...

  def getSubString(self, arg0: int, arg1: int) -> str: ...

  def length(self) -> int: ...

  @overload
  def position(self, arg0: str, arg1: int) -> int: ...

  @overload
  def position(self, arg0: Clob, arg1: int) -> int: ...

  def setAsciiStream(self, arg0: int) -> OutputStream: ...

  def setCharacterStream(self, arg0: int) -> Writer: ...

  @overload
  def setString(self, arg0: int, arg1: str) -> int: ...

  @overload
  def setString(self, arg0: int, arg1: str, arg2: int, arg3: int) -> int: ...

  def truncate(self, arg0: int) -> None: ...


class Connection:

  TRANSACTION_NONE: int

  TRANSACTION_READ_COMMITTED: int

  TRANSACTION_READ_UNCOMMITTED: int

  TRANSACTION_REPEATABLE_READ: int

  TRANSACTION_SERIALIZABLE: int

  def abort(self, arg0: Executor) -> None: ...

  def beginRequest(self) -> None: ...

  def clearWarnings(self) -> None: ...

  @overload
  def close(self) -> None: ...

  @overload
  def close(self) -> None: ...

  def commit(self) -> None: ...

  def createArrayOf(self, arg0: str, arg1: list[object]) -> Array: ...

  def createBlob(self) -> Blob: ...

  def createClob(self) -> Clob: ...

  def createNClob(self) -> NClob: ...

  def createSQLXML(self) -> SQLXML: ...

  @overload
  def createStatement(self) -> Statement: ...

  @overload
  def createStatement(self, arg0: int, arg1: int) -> Statement: ...

  @overload
  def createStatement(self, arg0: int, arg1: int, arg2: int) -> Statement: ...

  def createStruct(self, arg0: str, arg1: list[object]) -> Struct: ...

  def endRequest(self) -> None: ...

  def getAutoCommit(self) -> bool: ...

  def getCatalog(self) -> str: ...

  @overload
  def getClientInfo(self) -> Properties: ...

  @overload
  def getClientInfo(self, arg0: str) -> str: ...

  def getHoldability(self) -> int: ...

  def getMetaData(self) -> DatabaseMetaData: ...

  def getNetworkTimeout(self) -> int: ...

  def getSchema(self) -> str: ...

  def getTransactionIsolation(self) -> int: ...

  def getTypeMap(self) -> Map[str, Class[Any]]: ...

  def getWarnings(self) -> SQLWarning: ...

  def isClosed(self) -> bool: ...

  def isReadOnly(self) -> bool: ...

  def isValid(self, arg0: int) -> bool: ...

  def isWrapperFor(self, arg0: Class[Any]) -> bool: ...

  def nativeSQL(self, arg0: str) -> str: ...

  @overload
  def prepareCall(self, arg0: str) -> CallableStatement: ...

  @overload
  def prepareCall(self, arg0: str, arg1: int, arg2: int) -> CallableStatement: ...

  @overload
  def prepareCall(self, arg0: str, arg1: int, arg2: int, arg3: int) -> CallableStatement: ...

  @overload
  def prepareStatement(self, arg0: str) -> PreparedStatement: ...

  @overload
  def prepareStatement(self, arg0: str, arg1: list[int]) -> PreparedStatement: ...

  @overload
  def prepareStatement(self, arg0: str, arg1: list[str]) -> PreparedStatement: ...

  @overload
  def prepareStatement(self, arg0: str, arg1: int) -> PreparedStatement: ...

  @overload
  def prepareStatement(self, arg0: str, arg1: int, arg2: int) -> PreparedStatement: ...

  @overload
  def prepareStatement(self, arg0: str, arg1: int, arg2: int, arg3: int) -> PreparedStatement: ...

  def releaseSavepoint(self, arg0: Savepoint) -> None: ...

  @overload
  def rollback(self) -> None: ...

  @overload
  def rollback(self, arg0: Savepoint) -> None: ...

  def setAutoCommit(self, arg0: bool) -> None: ...

  def setCatalog(self, arg0: str) -> None: ...

  @overload
  def setClientInfo(self, arg0: Properties) -> None: ...

  @overload
  def setClientInfo(self, arg0: str, arg1: str) -> None: ...

  def setHoldability(self, arg0: int) -> None: ...

  def setNetworkTimeout(self, arg0: Executor, arg1: int) -> None: ...

  def setReadOnly(self, arg0: bool) -> None: ...

  @overload
  def setSavepoint(self) -> Savepoint: ...

  @overload
  def setSavepoint(self, arg0: str) -> Savepoint: ...

  def setSchema(self, arg0: str) -> None: ...

  @overload
  def setShardingKey(self, arg0: ShardingKey) -> None: ...

  @overload
  def setShardingKey(self, arg0: ShardingKey, arg1: ShardingKey) -> None: ...

  @overload
  def setShardingKeyIfValid(self, arg0: ShardingKey, arg1: int) -> bool: ...

  @overload
  def setShardingKeyIfValid(self, arg0: ShardingKey, arg1: ShardingKey, arg2: int) -> bool: ...

  def setTransactionIsolation(self, arg0: int) -> None: ...

  def setTypeMap(self, arg0: Map[str, Class[Any]]) -> None: ...

  def unwrap(self, arg0: Class[T]) -> object: ...


class DatabaseMetaData:

  attributeNoNulls: int

  attributeNullable: int

  attributeNullableUnknown: int

  bestRowNotPseudo: int

  bestRowPseudo: int

  bestRowSession: int

  bestRowTemporary: int

  bestRowTransaction: int

  bestRowUnknown: int

  columnNoNulls: int

  columnNullable: int

  columnNullableUnknown: int

  functionColumnIn: int

  functionColumnInOut: int

  functionColumnOut: int

  functionColumnResult: int

  functionColumnUnknown: int

  functionNoNulls: int

  functionNoTable: int

  functionNullable: int

  functionNullableUnknown: int

  functionResultUnknown: int

  functionReturn: int

  functionReturnsTable: int

  importedKeyCascade: int

  importedKeyInitiallyDeferred: int

  importedKeyInitiallyImmediate: int

  importedKeyNoAction: int

  importedKeyNotDeferrable: int

  importedKeyRestrict: int

  importedKeySetDefault: int

  importedKeySetNull: int

  procedureColumnIn: int

  procedureColumnInOut: int

  procedureColumnOut: int

  procedureColumnResult: int

  procedureColumnReturn: int

  procedureColumnUnknown: int

  procedureNoNulls: int

  procedureNoResult: int

  procedureNullable: int

  procedureNullableUnknown: int

  procedureResultUnknown: int

  procedureReturnsResult: int

  sqlStateSQL: int

  sqlStateSQL99: int

  sqlStateXOpen: int

  tableIndexClustered: int

  tableIndexHashed: int

  tableIndexOther: int

  tableIndexStatistic: int

  typeNoNulls: int

  typeNullable: int

  typeNullableUnknown: int

  typePredBasic: int

  typePredChar: int

  typePredNone: int

  typeSearchable: int

  versionColumnNotPseudo: int

  versionColumnPseudo: int

  versionColumnUnknown: int

  def allProceduresAreCallable(self) -> bool: ...

  def allTablesAreSelectable(self) -> bool: ...

  def autoCommitFailureClosesAllResultSets(self) -> bool: ...

  def dataDefinitionCausesTransactionCommit(self) -> bool: ...

  def dataDefinitionIgnoredInTransactions(self) -> bool: ...

  def deletesAreDetected(self, arg0: int) -> bool: ...

  def doesMaxRowSizeIncludeBlobs(self) -> bool: ...

  def generatedKeyAlwaysReturned(self) -> bool: ...

  def getAttributes(self, arg0: str, arg1: str, arg2: str, arg3: str) -> ResultSet: ...

  def getBestRowIdentifier(self, arg0: str, arg1: str, arg2: str, arg3: int, arg4: bool) -> ResultSet: ...

  def getCatalogSeparator(self) -> str: ...

  def getCatalogTerm(self) -> str: ...

  def getCatalogs(self) -> ResultSet: ...

  def getClientInfoProperties(self) -> ResultSet: ...

  def getColumnPrivileges(self, arg0: str, arg1: str, arg2: str, arg3: str) -> ResultSet: ...

  def getColumns(self, arg0: str, arg1: str, arg2: str, arg3: str) -> ResultSet: ...

  def getConnection(self) -> Connection: ...

  def getCrossReference(self, arg0: str, arg1: str, arg2: str, arg3: str, arg4: str, arg5: str) -> ResultSet: ...

  def getDatabaseMajorVersion(self) -> int: ...

  def getDatabaseMinorVersion(self) -> int: ...

  def getDatabaseProductName(self) -> str: ...

  def getDatabaseProductVersion(self) -> str: ...

  def getDefaultTransactionIsolation(self) -> int: ...

  def getDriverMajorVersion(self) -> int: ...

  def getDriverMinorVersion(self) -> int: ...

  def getDriverName(self) -> str: ...

  def getDriverVersion(self) -> str: ...

  def getExportedKeys(self, arg0: str, arg1: str, arg2: str) -> ResultSet: ...

  def getExtraNameCharacters(self) -> str: ...

  def getFunctionColumns(self, arg0: str, arg1: str, arg2: str, arg3: str) -> ResultSet: ...

  def getFunctions(self, arg0: str, arg1: str, arg2: str) -> ResultSet: ...

  def getIdentifierQuoteString(self) -> str: ...

  def getImportedKeys(self, arg0: str, arg1: str, arg2: str) -> ResultSet: ...

  def getIndexInfo(self, arg0: str, arg1: str, arg2: str, arg3: bool, arg4: bool) -> ResultSet: ...

  def getJDBCMajorVersion(self) -> int: ...

  def getJDBCMinorVersion(self) -> int: ...

  def getMaxBinaryLiteralLength(self) -> int: ...

  def getMaxCatalogNameLength(self) -> int: ...

  def getMaxCharLiteralLength(self) -> int: ...

  def getMaxColumnNameLength(self) -> int: ...

  def getMaxColumnsInGroupBy(self) -> int: ...

  def getMaxColumnsInIndex(self) -> int: ...

  def getMaxColumnsInOrderBy(self) -> int: ...

  def getMaxColumnsInSelect(self) -> int: ...

  def getMaxColumnsInTable(self) -> int: ...

  def getMaxConnections(self) -> int: ...

  def getMaxCursorNameLength(self) -> int: ...

  def getMaxIndexLength(self) -> int: ...

  def getMaxLogicalLobSize(self) -> int: ...

  def getMaxProcedureNameLength(self) -> int: ...

  def getMaxRowSize(self) -> int: ...

  def getMaxSchemaNameLength(self) -> int: ...

  def getMaxStatementLength(self) -> int: ...

  def getMaxStatements(self) -> int: ...

  def getMaxTableNameLength(self) -> int: ...

  def getMaxTablesInSelect(self) -> int: ...

  def getMaxUserNameLength(self) -> int: ...

  def getNumericFunctions(self) -> str: ...

  def getPrimaryKeys(self, arg0: str, arg1: str, arg2: str) -> ResultSet: ...

  def getProcedureColumns(self, arg0: str, arg1: str, arg2: str, arg3: str) -> ResultSet: ...

  def getProcedureTerm(self) -> str: ...

  def getProcedures(self, arg0: str, arg1: str, arg2: str) -> ResultSet: ...

  def getPseudoColumns(self, arg0: str, arg1: str, arg2: str, arg3: str) -> ResultSet: ...

  def getResultSetHoldability(self) -> int: ...

  def getRowIdLifetime(self) -> RowIdLifetime: ...

  def getSQLKeywords(self) -> str: ...

  def getSQLStateType(self) -> int: ...

  def getSchemaTerm(self) -> str: ...

  @overload
  def getSchemas(self) -> ResultSet: ...

  @overload
  def getSchemas(self, arg0: str, arg1: str) -> ResultSet: ...

  def getSearchStringEscape(self) -> str: ...

  def getStringFunctions(self) -> str: ...

  def getSuperTables(self, arg0: str, arg1: str, arg2: str) -> ResultSet: ...

  def getSuperTypes(self, arg0: str, arg1: str, arg2: str) -> ResultSet: ...

  def getSystemFunctions(self) -> str: ...

  def getTablePrivileges(self, arg0: str, arg1: str, arg2: str) -> ResultSet: ...

  def getTableTypes(self) -> ResultSet: ...

  def getTables(self, arg0: str, arg1: str, arg2: str, arg3: list[str]) -> ResultSet: ...

  def getTimeDateFunctions(self) -> str: ...

  def getTypeInfo(self) -> ResultSet: ...

  def getUDTs(self, arg0: str, arg1: str, arg2: str, arg3: list[int]) -> ResultSet: ...

  def getURL(self) -> str: ...

  def getUserName(self) -> str: ...

  def getVersionColumns(self, arg0: str, arg1: str, arg2: str) -> ResultSet: ...

  def insertsAreDetected(self, arg0: int) -> bool: ...

  def isCatalogAtStart(self) -> bool: ...

  def isReadOnly(self) -> bool: ...

  def isWrapperFor(self, arg0: Class[Any]) -> bool: ...

  def locatorsUpdateCopy(self) -> bool: ...

  def nullPlusNonNullIsNull(self) -> bool: ...

  def nullsAreSortedAtEnd(self) -> bool: ...

  def nullsAreSortedAtStart(self) -> bool: ...

  def nullsAreSortedHigh(self) -> bool: ...

  def nullsAreSortedLow(self) -> bool: ...

  def othersDeletesAreVisible(self, arg0: int) -> bool: ...

  def othersInsertsAreVisible(self, arg0: int) -> bool: ...

  def othersUpdatesAreVisible(self, arg0: int) -> bool: ...

  def ownDeletesAreVisible(self, arg0: int) -> bool: ...

  def ownInsertsAreVisible(self, arg0: int) -> bool: ...

  def ownUpdatesAreVisible(self, arg0: int) -> bool: ...

  def storesLowerCaseIdentifiers(self) -> bool: ...

  def storesLowerCaseQuotedIdentifiers(self) -> bool: ...

  def storesMixedCaseIdentifiers(self) -> bool: ...

  def storesMixedCaseQuotedIdentifiers(self) -> bool: ...

  def storesUpperCaseIdentifiers(self) -> bool: ...

  def storesUpperCaseQuotedIdentifiers(self) -> bool: ...

  def supportsANSI92EntryLevelSQL(self) -> bool: ...

  def supportsANSI92FullSQL(self) -> bool: ...

  def supportsANSI92IntermediateSQL(self) -> bool: ...

  def supportsAlterTableWithAddColumn(self) -> bool: ...

  def supportsAlterTableWithDropColumn(self) -> bool: ...

  def supportsBatchUpdates(self) -> bool: ...

  def supportsCatalogsInDataManipulation(self) -> bool: ...

  def supportsCatalogsInIndexDefinitions(self) -> bool: ...

  def supportsCatalogsInPrivilegeDefinitions(self) -> bool: ...

  def supportsCatalogsInProcedureCalls(self) -> bool: ...

  def supportsCatalogsInTableDefinitions(self) -> bool: ...

  def supportsColumnAliasing(self) -> bool: ...

  @overload
  def supportsConvert(self) -> bool: ...

  @overload
  def supportsConvert(self, arg0: int, arg1: int) -> bool: ...

  def supportsCoreSQLGrammar(self) -> bool: ...

  def supportsCorrelatedSubqueries(self) -> bool: ...

  def supportsDataDefinitionAndDataManipulationTransactions(self) -> bool: ...

  def supportsDataManipulationTransactionsOnly(self) -> bool: ...

  def supportsDifferentTableCorrelationNames(self) -> bool: ...

  def supportsExpressionsInOrderBy(self) -> bool: ...

  def supportsExtendedSQLGrammar(self) -> bool: ...

  def supportsFullOuterJoins(self) -> bool: ...

  def supportsGetGeneratedKeys(self) -> bool: ...

  def supportsGroupBy(self) -> bool: ...

  def supportsGroupByBeyondSelect(self) -> bool: ...

  def supportsGroupByUnrelated(self) -> bool: ...

  def supportsIntegrityEnhancementFacility(self) -> bool: ...

  def supportsLikeEscapeClause(self) -> bool: ...

  def supportsLimitedOuterJoins(self) -> bool: ...

  def supportsMinimumSQLGrammar(self) -> bool: ...

  def supportsMixedCaseIdentifiers(self) -> bool: ...

  def supportsMixedCaseQuotedIdentifiers(self) -> bool: ...

  def supportsMultipleOpenResults(self) -> bool: ...

  def supportsMultipleResultSets(self) -> bool: ...

  def supportsMultipleTransactions(self) -> bool: ...

  def supportsNamedParameters(self) -> bool: ...

  def supportsNonNullableColumns(self) -> bool: ...

  def supportsOpenCursorsAcrossCommit(self) -> bool: ...

  def supportsOpenCursorsAcrossRollback(self) -> bool: ...

  def supportsOpenStatementsAcrossCommit(self) -> bool: ...

  def supportsOpenStatementsAcrossRollback(self) -> bool: ...

  def supportsOrderByUnrelated(self) -> bool: ...

  def supportsOuterJoins(self) -> bool: ...

  def supportsPositionedDelete(self) -> bool: ...

  def supportsPositionedUpdate(self) -> bool: ...

  def supportsRefCursors(self) -> bool: ...

  def supportsResultSetConcurrency(self, arg0: int, arg1: int) -> bool: ...

  def supportsResultSetHoldability(self, arg0: int) -> bool: ...

  def supportsResultSetType(self, arg0: int) -> bool: ...

  def supportsSavepoints(self) -> bool: ...

  def supportsSchemasInDataManipulation(self) -> bool: ...

  def supportsSchemasInIndexDefinitions(self) -> bool: ...

  def supportsSchemasInPrivilegeDefinitions(self) -> bool: ...

  def supportsSchemasInProcedureCalls(self) -> bool: ...

  def supportsSchemasInTableDefinitions(self) -> bool: ...

  def supportsSelectForUpdate(self) -> bool: ...

  def supportsSharding(self) -> bool: ...

  def supportsStatementPooling(self) -> bool: ...

  def supportsStoredFunctionsUsingCallSyntax(self) -> bool: ...

  def supportsStoredProcedures(self) -> bool: ...

  def supportsSubqueriesInComparisons(self) -> bool: ...

  def supportsSubqueriesInExists(self) -> bool: ...

  def supportsSubqueriesInIns(self) -> bool: ...

  def supportsSubqueriesInQuantifieds(self) -> bool: ...

  def supportsTableCorrelationNames(self) -> bool: ...

  def supportsTransactionIsolationLevel(self, arg0: int) -> bool: ...

  def supportsTransactions(self) -> bool: ...

  def supportsUnion(self) -> bool: ...

  def supportsUnionAll(self) -> bool: ...

  def unwrap(self, arg0: Class[T]) -> object: ...

  def updatesAreDetected(self, arg0: int) -> bool: ...

  def usesLocalFilePerTable(self) -> bool: ...

  def usesLocalFiles(self) -> bool: ...


class Date(Date):

  def getHours(self) -> int: ...

  def getMinutes(self) -> int: ...

  def getSeconds(self) -> int: ...

  def setHours(self, arg0: int) -> None: ...

  def setMinutes(self, arg0: int) -> None: ...

  def setSeconds(self, arg0: int) -> None: ...

  def setTime(self, arg0: int) -> None: ...

  def toInstant(self) -> Instant: ...

  def toLocalDate(self) -> LocalDate: ...

  def toString(self) -> str: ...

  @staticmethod
  @overload
  def valueOf(arg0: str) -> Date: ...

  @staticmethod
  @overload
  def valueOf(arg0: LocalDate) -> Date: ...

  @overload
  def __init__(self, arg0: int): ...
  @overload
  def __init__(self, arg0: int, arg1: int, arg2: int): ...


class NClob:

  def free(self) -> None: ...

  def getAsciiStream(self) -> InputStream: ...

  @overload
  def getCharacterStream(self) -> Reader: ...

  @overload
  def getCharacterStream(self, arg0: int, arg1: int) -> Reader: ...

  def getSubString(self, arg0: int, arg1: int) -> str: ...

  def length(self) -> int: ...

  @overload
  def position(self, arg0: str, arg1: int) -> int: ...

  @overload
  def position(self, arg0: Clob, arg1: int) -> int: ...

  def setAsciiStream(self, arg0: int) -> OutputStream: ...

  def setCharacterStream(self, arg0: int) -> Writer: ...

  @overload
  def setString(self, arg0: int, arg1: str) -> int: ...

  @overload
  def setString(self, arg0: int, arg1: str, arg2: int, arg3: int) -> int: ...

  def truncate(self, arg0: int) -> None: ...


class ParameterMetaData:

  parameterModeIn: int

  parameterModeInOut: int

  parameterModeOut: int

  parameterModeUnknown: int

  parameterNoNulls: int

  parameterNullable: int

  parameterNullableUnknown: int

  def getParameterClassName(self, arg0: int) -> str: ...

  def getParameterCount(self) -> int: ...

  def getParameterMode(self, arg0: int) -> int: ...

  def getParameterType(self, arg0: int) -> int: ...

  def getParameterTypeName(self, arg0: int) -> str: ...

  def getPrecision(self, arg0: int) -> int: ...

  def getScale(self, arg0: int) -> int: ...

  def isNullable(self, arg0: int) -> int: ...

  def isSigned(self, arg0: int) -> bool: ...

  def isWrapperFor(self, arg0: Class[Any]) -> bool: ...

  def unwrap(self, arg0: Class[T]) -> object: ...


class PreparedStatement:

  CLOSE_ALL_RESULTS: int

  CLOSE_CURRENT_RESULT: int

  EXECUTE_FAILED: int

  KEEP_CURRENT_RESULT: int

  NO_GENERATED_KEYS: int

  RETURN_GENERATED_KEYS: int

  SUCCESS_NO_INFO: int

  @overload
  def addBatch(self) -> None: ...

  @overload
  def addBatch(self, arg0: str) -> None: ...

  def cancel(self) -> None: ...

  def clearBatch(self) -> None: ...

  def clearParameters(self) -> None: ...

  def clearWarnings(self) -> None: ...

  def close(self) -> None: ...

  def closeOnCompletion(self) -> None: ...

  def enquoteIdentifier(self, arg0: str, arg1: bool) -> str: ...

  def enquoteLiteral(self, arg0: str) -> str: ...

  def enquoteNCharLiteral(self, arg0: str) -> str: ...

  @overload
  def execute(self) -> bool: ...

  @overload
  def execute(self, arg0: str) -> bool: ...

  @overload
  def execute(self, arg0: str, arg1: list[int]) -> bool: ...

  @overload
  def execute(self, arg0: str, arg1: list[str]) -> bool: ...

  @overload
  def execute(self, arg0: str, arg1: int) -> bool: ...

  def executeBatch(self) -> list[int]: ...

  def executeLargeBatch(self) -> list[int]: ...

  @overload
  def executeLargeUpdate(self) -> int: ...

  @overload
  def executeLargeUpdate(self, arg0: str) -> int: ...

  @overload
  def executeLargeUpdate(self, arg0: str, arg1: list[int]) -> int: ...

  @overload
  def executeLargeUpdate(self, arg0: str, arg1: list[str]) -> int: ...

  @overload
  def executeLargeUpdate(self, arg0: str, arg1: int) -> int: ...

  @overload
  def executeQuery(self) -> ResultSet: ...

  @overload
  def executeQuery(self, arg0: str) -> ResultSet: ...

  @overload
  def executeUpdate(self) -> int: ...

  @overload
  def executeUpdate(self, arg0: str) -> int: ...

  @overload
  def executeUpdate(self, arg0: str, arg1: list[int]) -> int: ...

  @overload
  def executeUpdate(self, arg0: str, arg1: list[str]) -> int: ...

  @overload
  def executeUpdate(self, arg0: str, arg1: int) -> int: ...

  def getConnection(self) -> Connection: ...

  def getFetchDirection(self) -> int: ...

  def getFetchSize(self) -> int: ...

  def getGeneratedKeys(self) -> ResultSet: ...

  def getLargeMaxRows(self) -> int: ...

  def getLargeUpdateCount(self) -> int: ...

  def getMaxFieldSize(self) -> int: ...

  def getMaxRows(self) -> int: ...

  def getMetaData(self) -> ResultSetMetaData: ...

  @overload
  def getMoreResults(self) -> bool: ...

  @overload
  def getMoreResults(self, arg0: int) -> bool: ...

  def getParameterMetaData(self) -> ParameterMetaData: ...

  def getQueryTimeout(self) -> int: ...

  def getResultSet(self) -> ResultSet: ...

  def getResultSetConcurrency(self) -> int: ...

  def getResultSetHoldability(self) -> int: ...

  def getResultSetType(self) -> int: ...

  def getUpdateCount(self) -> int: ...

  def getWarnings(self) -> SQLWarning: ...

  def isCloseOnCompletion(self) -> bool: ...

  def isClosed(self) -> bool: ...

  def isPoolable(self) -> bool: ...

  def isSimpleIdentifier(self, arg0: str) -> bool: ...

  def setArray(self, arg0: int, arg1: Array) -> None: ...

  @overload
  def setAsciiStream(self, arg0: int, arg1: InputStream) -> None: ...

  @overload
  def setAsciiStream(self, arg0: int, arg1: InputStream, arg2: int) -> None: ...

  @overload
  def setAsciiStream(self, arg0: int, arg1: InputStream, arg2: int) -> None: ...

  def setBigDecimal(self, arg0: int, arg1: BigDecimal) -> None: ...

  @overload
  def setBinaryStream(self, arg0: int, arg1: InputStream) -> None: ...

  @overload
  def setBinaryStream(self, arg0: int, arg1: InputStream, arg2: int) -> None: ...

  @overload
  def setBinaryStream(self, arg0: int, arg1: InputStream, arg2: int) -> None: ...

  @overload
  def setBlob(self, arg0: int, arg1: InputStream) -> None: ...

  @overload
  def setBlob(self, arg0: int, arg1: Blob) -> None: ...

  @overload
  def setBlob(self, arg0: int, arg1: InputStream, arg2: int) -> None: ...

  def setBoolean(self, arg0: int, arg1: bool) -> None: ...

  def setByte(self, arg0: int, arg1: int) -> None: ...

  def setBytes(self, arg0: int, arg1: list[int]) -> None: ...

  @overload
  def setCharacterStream(self, arg0: int, arg1: Reader) -> None: ...

  @overload
  def setCharacterStream(self, arg0: int, arg1: Reader, arg2: int) -> None: ...

  @overload
  def setCharacterStream(self, arg0: int, arg1: Reader, arg2: int) -> None: ...

  @overload
  def setClob(self, arg0: int, arg1: Reader) -> None: ...

  @overload
  def setClob(self, arg0: int, arg1: Clob) -> None: ...

  @overload
  def setClob(self, arg0: int, arg1: Reader, arg2: int) -> None: ...

  def setCursorName(self, arg0: str) -> None: ...

  @overload
  def setDate(self, arg0: int, arg1: Date) -> None: ...

  @overload
  def setDate(self, arg0: int, arg1: Date, arg2: Calendar) -> None: ...

  def setDouble(self, arg0: int, arg1: float) -> None: ...

  def setEscapeProcessing(self, arg0: bool) -> None: ...

  def setFetchDirection(self, arg0: int) -> None: ...

  def setFetchSize(self, arg0: int) -> None: ...

  def setFloat(self, arg0: int, arg1: float) -> None: ...

  def setInt(self, arg0: int, arg1: int) -> None: ...

  def setLargeMaxRows(self, arg0: int) -> None: ...

  def setLong(self, arg0: int, arg1: int) -> None: ...

  def setMaxFieldSize(self, arg0: int) -> None: ...

  def setMaxRows(self, arg0: int) -> None: ...

  @overload
  def setNCharacterStream(self, arg0: int, arg1: Reader) -> None: ...

  @overload
  def setNCharacterStream(self, arg0: int, arg1: Reader, arg2: int) -> None: ...

  @overload
  def setNClob(self, arg0: int, arg1: Reader) -> None: ...

  @overload
  def setNClob(self, arg0: int, arg1: NClob) -> None: ...

  @overload
  def setNClob(self, arg0: int, arg1: Reader, arg2: int) -> None: ...

  def setNString(self, arg0: int, arg1: str) -> None: ...

  @overload
  def setNull(self, arg0: int, arg1: int) -> None: ...

  @overload
  def setNull(self, arg0: int, arg1: int, arg2: str) -> None: ...

  @overload
  def setObject(self, arg0: int, arg1: object) -> None: ...

  @overload
  def setObject(self, arg0: int, arg1: object, arg2: int) -> None: ...

  @overload
  def setObject(self, arg0: int, arg1: object, arg2: SQLType) -> None: ...

  @overload
  def setObject(self, arg0: int, arg1: object, arg2: int, arg3: int) -> None: ...

  @overload
  def setObject(self, arg0: int, arg1: object, arg2: SQLType, arg3: int) -> None: ...

  def setPoolable(self, arg0: bool) -> None: ...

  def setQueryTimeout(self, arg0: int) -> None: ...

  def setRef(self, arg0: int, arg1: Ref) -> None: ...

  def setRowId(self, arg0: int, arg1: RowId) -> None: ...

  def setSQLXML(self, arg0: int, arg1: SQLXML) -> None: ...

  def setShort(self, arg0: int, arg1: int) -> None: ...

  def setString(self, arg0: int, arg1: str) -> None: ...

  @overload
  def setTime(self, arg0: int, arg1: Time) -> None: ...

  @overload
  def setTime(self, arg0: int, arg1: Time, arg2: Calendar) -> None: ...

  @overload
  def setTimestamp(self, arg0: int, arg1: Timestamp) -> None: ...

  @overload
  def setTimestamp(self, arg0: int, arg1: Timestamp, arg2: Calendar) -> None: ...

  def setURL(self, arg0: int, arg1: URL) -> None: ...

  def setUnicodeStream(self, arg0: int, arg1: InputStream, arg2: int) -> None: ...


class Ref:

  def getBaseTypeName(self) -> str: ...

  @overload
  def getObject(self) -> object: ...

  @overload
  def getObject(self, arg0: Map[str, Class[Any]]) -> object: ...

  def setObject(self, arg0: object) -> None: ...


class ResultSet:

  CLOSE_CURSORS_AT_COMMIT: int

  CONCUR_READ_ONLY: int

  CONCUR_UPDATABLE: int

  FETCH_FORWARD: int

  FETCH_REVERSE: int

  FETCH_UNKNOWN: int

  HOLD_CURSORS_OVER_COMMIT: int

  TYPE_FORWARD_ONLY: int

  TYPE_SCROLL_INSENSITIVE: int

  TYPE_SCROLL_SENSITIVE: int

  def absolute(self, arg0: int) -> bool: ...

  def afterLast(self) -> None: ...

  def beforeFirst(self) -> None: ...

  def cancelRowUpdates(self) -> None: ...

  def clearWarnings(self) -> None: ...

  @overload
  def close(self) -> None: ...

  @overload
  def close(self) -> None: ...

  def deleteRow(self) -> None: ...

  def findColumn(self, arg0: str) -> int: ...

  def first(self) -> bool: ...

  @overload
  def getArray(self, arg0: int) -> Array: ...

  @overload
  def getArray(self, arg0: str) -> Array: ...

  @overload
  def getAsciiStream(self, arg0: int) -> InputStream: ...

  @overload
  def getAsciiStream(self, arg0: str) -> InputStream: ...

  @overload
  def getBigDecimal(self, arg0: int) -> BigDecimal: ...

  @overload
  def getBigDecimal(self, arg0: str) -> BigDecimal: ...

  @overload
  def getBigDecimal(self, arg0: int, arg1: int) -> BigDecimal: ...

  @overload
  def getBigDecimal(self, arg0: str, arg1: int) -> BigDecimal: ...

  @overload
  def getBinaryStream(self, arg0: int) -> InputStream: ...

  @overload
  def getBinaryStream(self, arg0: str) -> InputStream: ...

  @overload
  def getBlob(self, arg0: int) -> Blob: ...

  @overload
  def getBlob(self, arg0: str) -> Blob: ...

  @overload
  def getBoolean(self, arg0: int) -> bool: ...

  @overload
  def getBoolean(self, arg0: str) -> bool: ...

  @overload
  def getByte(self, arg0: int) -> int: ...

  @overload
  def getByte(self, arg0: str) -> int: ...

  @overload
  def getBytes(self, arg0: int) -> list[int]: ...

  @overload
  def getBytes(self, arg0: str) -> list[int]: ...

  @overload
  def getCharacterStream(self, arg0: int) -> Reader: ...

  @overload
  def getCharacterStream(self, arg0: str) -> Reader: ...

  @overload
  def getClob(self, arg0: int) -> Clob: ...

  @overload
  def getClob(self, arg0: str) -> Clob: ...

  def getConcurrency(self) -> int: ...

  def getCursorName(self) -> str: ...

  @overload
  def getDate(self, arg0: int) -> Date: ...

  @overload
  def getDate(self, arg0: str) -> Date: ...

  @overload
  def getDate(self, arg0: int, arg1: Calendar) -> Date: ...

  @overload
  def getDate(self, arg0: str, arg1: Calendar) -> Date: ...

  @overload
  def getDouble(self, arg0: int) -> float: ...

  @overload
  def getDouble(self, arg0: str) -> float: ...

  def getFetchDirection(self) -> int: ...

  def getFetchSize(self) -> int: ...

  @overload
  def getFloat(self, arg0: int) -> float: ...

  @overload
  def getFloat(self, arg0: str) -> float: ...

  def getHoldability(self) -> int: ...

  @overload
  def getInt(self, arg0: int) -> int: ...

  @overload
  def getInt(self, arg0: str) -> int: ...

  @overload
  def getLong(self, arg0: int) -> int: ...

  @overload
  def getLong(self, arg0: str) -> int: ...

  def getMetaData(self) -> ResultSetMetaData: ...

  @overload
  def getNCharacterStream(self, arg0: int) -> Reader: ...

  @overload
  def getNCharacterStream(self, arg0: str) -> Reader: ...

  @overload
  def getNClob(self, arg0: int) -> NClob: ...

  @overload
  def getNClob(self, arg0: str) -> NClob: ...

  @overload
  def getNString(self, arg0: int) -> str: ...

  @overload
  def getNString(self, arg0: str) -> str: ...

  @overload
  def getObject(self, arg0: int) -> object: ...

  @overload
  def getObject(self, arg0: str) -> object: ...

  @overload
  def getObject(self, arg0: int, arg1: Class[T]) -> object: ...

  @overload
  def getObject(self, arg0: int, arg1: Map[str, Class[Any]]) -> object: ...

  @overload
  def getObject(self, arg0: str, arg1: Class[T]) -> object: ...

  @overload
  def getObject(self, arg0: str, arg1: Map[str, Class[Any]]) -> object: ...

  @overload
  def getRef(self, arg0: int) -> Ref: ...

  @overload
  def getRef(self, arg0: str) -> Ref: ...

  def getRow(self) -> int: ...

  @overload
  def getRowId(self, arg0: int) -> RowId: ...

  @overload
  def getRowId(self, arg0: str) -> RowId: ...

  @overload
  def getSQLXML(self, arg0: int) -> SQLXML: ...

  @overload
  def getSQLXML(self, arg0: str) -> SQLXML: ...

  @overload
  def getShort(self, arg0: int) -> int: ...

  @overload
  def getShort(self, arg0: str) -> int: ...

  def getStatement(self) -> Statement: ...

  @overload
  def getString(self, arg0: int) -> str: ...

  @overload
  def getString(self, arg0: str) -> str: ...

  @overload
  def getTime(self, arg0: int) -> Time: ...

  @overload
  def getTime(self, arg0: str) -> Time: ...

  @overload
  def getTime(self, arg0: int, arg1: Calendar) -> Time: ...

  @overload
  def getTime(self, arg0: str, arg1: Calendar) -> Time: ...

  @overload
  def getTimestamp(self, arg0: int) -> Timestamp: ...

  @overload
  def getTimestamp(self, arg0: str) -> Timestamp: ...

  @overload
  def getTimestamp(self, arg0: int, arg1: Calendar) -> Timestamp: ...

  @overload
  def getTimestamp(self, arg0: str, arg1: Calendar) -> Timestamp: ...

  def getType(self) -> int: ...

  @overload
  def getURL(self, arg0: int) -> URL: ...

  @overload
  def getURL(self, arg0: str) -> URL: ...

  @overload
  def getUnicodeStream(self, arg0: int) -> InputStream: ...

  @overload
  def getUnicodeStream(self, arg0: str) -> InputStream: ...

  def getWarnings(self) -> SQLWarning: ...

  def insertRow(self) -> None: ...

  def isAfterLast(self) -> bool: ...

  def isBeforeFirst(self) -> bool: ...

  def isClosed(self) -> bool: ...

  def isFirst(self) -> bool: ...

  def isLast(self) -> bool: ...

  def isWrapperFor(self, arg0: Class[Any]) -> bool: ...

  def last(self) -> bool: ...

  def moveToCurrentRow(self) -> None: ...

  def moveToInsertRow(self) -> None: ...

  def next(self) -> bool: ...

  def previous(self) -> bool: ...

  def refreshRow(self) -> None: ...

  def relative(self, arg0: int) -> bool: ...

  def rowDeleted(self) -> bool: ...

  def rowInserted(self) -> bool: ...

  def rowUpdated(self) -> bool: ...

  def setFetchDirection(self, arg0: int) -> None: ...

  def setFetchSize(self, arg0: int) -> None: ...

  def unwrap(self, arg0: Class[T]) -> object: ...

  @overload
  def updateArray(self, arg0: int, arg1: Array) -> None: ...

  @overload
  def updateArray(self, arg0: str, arg1: Array) -> None: ...

  @overload
  def updateAsciiStream(self, arg0: int, arg1: InputStream) -> None: ...

  @overload
  def updateAsciiStream(self, arg0: str, arg1: InputStream) -> None: ...

  @overload
  def updateAsciiStream(self, arg0: int, arg1: InputStream, arg2: int) -> None: ...

  @overload
  def updateAsciiStream(self, arg0: int, arg1: InputStream, arg2: int) -> None: ...

  @overload
  def updateAsciiStream(self, arg0: str, arg1: InputStream, arg2: int) -> None: ...

  @overload
  def updateAsciiStream(self, arg0: str, arg1: InputStream, arg2: int) -> None: ...

  @overload
  def updateBigDecimal(self, arg0: int, arg1: BigDecimal) -> None: ...

  @overload
  def updateBigDecimal(self, arg0: str, arg1: BigDecimal) -> None: ...

  @overload
  def updateBinaryStream(self, arg0: int, arg1: InputStream) -> None: ...

  @overload
  def updateBinaryStream(self, arg0: str, arg1: InputStream) -> None: ...

  @overload
  def updateBinaryStream(self, arg0: int, arg1: InputStream, arg2: int) -> None: ...

  @overload
  def updateBinaryStream(self, arg0: int, arg1: InputStream, arg2: int) -> None: ...

  @overload
  def updateBinaryStream(self, arg0: str, arg1: InputStream, arg2: int) -> None: ...

  @overload
  def updateBinaryStream(self, arg0: str, arg1: InputStream, arg2: int) -> None: ...

  @overload
  def updateBlob(self, arg0: int, arg1: InputStream) -> None: ...

  @overload
  def updateBlob(self, arg0: int, arg1: Blob) -> None: ...

  @overload
  def updateBlob(self, arg0: str, arg1: InputStream) -> None: ...

  @overload
  def updateBlob(self, arg0: str, arg1: Blob) -> None: ...

  @overload
  def updateBlob(self, arg0: int, arg1: InputStream, arg2: int) -> None: ...

  @overload
  def updateBlob(self, arg0: str, arg1: InputStream, arg2: int) -> None: ...

  @overload
  def updateBoolean(self, arg0: int, arg1: bool) -> None: ...

  @overload
  def updateBoolean(self, arg0: str, arg1: bool) -> None: ...

  @overload
  def updateByte(self, arg0: int, arg1: int) -> None: ...

  @overload
  def updateByte(self, arg0: str, arg1: int) -> None: ...

  @overload
  def updateBytes(self, arg0: int, arg1: list[int]) -> None: ...

  @overload
  def updateBytes(self, arg0: str, arg1: list[int]) -> None: ...

  @overload
  def updateCharacterStream(self, arg0: int, arg1: Reader) -> None: ...

  @overload
  def updateCharacterStream(self, arg0: str, arg1: Reader) -> None: ...

  @overload
  def updateCharacterStream(self, arg0: int, arg1: Reader, arg2: int) -> None: ...

  @overload
  def updateCharacterStream(self, arg0: int, arg1: Reader, arg2: int) -> None: ...

  @overload
  def updateCharacterStream(self, arg0: str, arg1: Reader, arg2: int) -> None: ...

  @overload
  def updateCharacterStream(self, arg0: str, arg1: Reader, arg2: int) -> None: ...

  @overload
  def updateClob(self, arg0: int, arg1: Reader) -> None: ...

  @overload
  def updateClob(self, arg0: int, arg1: Clob) -> None: ...

  @overload
  def updateClob(self, arg0: str, arg1: Reader) -> None: ...

  @overload
  def updateClob(self, arg0: str, arg1: Clob) -> None: ...

  @overload
  def updateClob(self, arg0: int, arg1: Reader, arg2: int) -> None: ...

  @overload
  def updateClob(self, arg0: str, arg1: Reader, arg2: int) -> None: ...

  @overload
  def updateDate(self, arg0: int, arg1: Date) -> None: ...

  @overload
  def updateDate(self, arg0: str, arg1: Date) -> None: ...

  @overload
  def updateDouble(self, arg0: int, arg1: float) -> None: ...

  @overload
  def updateDouble(self, arg0: str, arg1: float) -> None: ...

  @overload
  def updateFloat(self, arg0: int, arg1: float) -> None: ...

  @overload
  def updateFloat(self, arg0: str, arg1: float) -> None: ...

  @overload
  def updateInt(self, arg0: int, arg1: int) -> None: ...

  @overload
  def updateInt(self, arg0: str, arg1: int) -> None: ...

  @overload
  def updateLong(self, arg0: int, arg1: int) -> None: ...

  @overload
  def updateLong(self, arg0: str, arg1: int) -> None: ...

  @overload
  def updateNCharacterStream(self, arg0: int, arg1: Reader) -> None: ...

  @overload
  def updateNCharacterStream(self, arg0: str, arg1: Reader) -> None: ...

  @overload
  def updateNCharacterStream(self, arg0: int, arg1: Reader, arg2: int) -> None: ...

  @overload
  def updateNCharacterStream(self, arg0: str, arg1: Reader, arg2: int) -> None: ...

  @overload
  def updateNClob(self, arg0: int, arg1: Reader) -> None: ...

  @overload
  def updateNClob(self, arg0: int, arg1: NClob) -> None: ...

  @overload
  def updateNClob(self, arg0: str, arg1: Reader) -> None: ...

  @overload
  def updateNClob(self, arg0: str, arg1: NClob) -> None: ...

  @overload
  def updateNClob(self, arg0: int, arg1: Reader, arg2: int) -> None: ...

  @overload
  def updateNClob(self, arg0: str, arg1: Reader, arg2: int) -> None: ...

  @overload
  def updateNString(self, arg0: int, arg1: str) -> None: ...

  @overload
  def updateNString(self, arg0: str, arg1: str) -> None: ...

  @overload
  def updateNull(self, arg0: int) -> None: ...

  @overload
  def updateNull(self, arg0: str) -> None: ...

  @overload
  def updateObject(self, arg0: int, arg1: object) -> None: ...

  @overload
  def updateObject(self, arg0: str, arg1: object) -> None: ...

  @overload
  def updateObject(self, arg0: int, arg1: object, arg2: int) -> None: ...

  @overload
  def updateObject(self, arg0: int, arg1: object, arg2: SQLType) -> None: ...

  @overload
  def updateObject(self, arg0: str, arg1: object, arg2: int) -> None: ...

  @overload
  def updateObject(self, arg0: str, arg1: object, arg2: SQLType) -> None: ...

  @overload
  def updateObject(self, arg0: int, arg1: object, arg2: SQLType, arg3: int) -> None: ...

  @overload
  def updateObject(self, arg0: str, arg1: object, arg2: SQLType, arg3: int) -> None: ...

  @overload
  def updateRef(self, arg0: int, arg1: Ref) -> None: ...

  @overload
  def updateRef(self, arg0: str, arg1: Ref) -> None: ...

  def updateRow(self) -> None: ...

  @overload
  def updateRowId(self, arg0: int, arg1: RowId) -> None: ...

  @overload
  def updateRowId(self, arg0: str, arg1: RowId) -> None: ...

  @overload
  def updateSQLXML(self, arg0: int, arg1: SQLXML) -> None: ...

  @overload
  def updateSQLXML(self, arg0: str, arg1: SQLXML) -> None: ...

  @overload
  def updateShort(self, arg0: int, arg1: int) -> None: ...

  @overload
  def updateShort(self, arg0: str, arg1: int) -> None: ...

  @overload
  def updateString(self, arg0: int, arg1: str) -> None: ...

  @overload
  def updateString(self, arg0: str, arg1: str) -> None: ...

  @overload
  def updateTime(self, arg0: int, arg1: Time) -> None: ...

  @overload
  def updateTime(self, arg0: str, arg1: Time) -> None: ...

  @overload
  def updateTimestamp(self, arg0: int, arg1: Timestamp) -> None: ...

  @overload
  def updateTimestamp(self, arg0: str, arg1: Timestamp) -> None: ...

  def wasNull(self) -> bool: ...


class ResultSetMetaData:

  columnNoNulls: int

  columnNullable: int

  columnNullableUnknown: int

  def getCatalogName(self, arg0: int) -> str: ...

  def getColumnClassName(self, arg0: int) -> str: ...

  def getColumnCount(self) -> int: ...

  def getColumnDisplaySize(self, arg0: int) -> int: ...

  def getColumnLabel(self, arg0: int) -> str: ...

  def getColumnName(self, arg0: int) -> str: ...

  def getColumnType(self, arg0: int) -> int: ...

  def getColumnTypeName(self, arg0: int) -> str: ...

  def getPrecision(self, arg0: int) -> int: ...

  def getScale(self, arg0: int) -> int: ...

  def getSchemaName(self, arg0: int) -> str: ...

  def getTableName(self, arg0: int) -> str: ...

  def isAutoIncrement(self, arg0: int) -> bool: ...

  def isCaseSensitive(self, arg0: int) -> bool: ...

  def isCurrency(self, arg0: int) -> bool: ...

  def isDefinitelyWritable(self, arg0: int) -> bool: ...

  def isNullable(self, arg0: int) -> int: ...

  def isReadOnly(self, arg0: int) -> bool: ...

  def isSearchable(self, arg0: int) -> bool: ...

  def isSigned(self, arg0: int) -> bool: ...

  def isWrapperFor(self, arg0: Class[Any]) -> bool: ...

  def isWritable(self, arg0: int) -> bool: ...

  def unwrap(self, arg0: Class[T]) -> object: ...


class RowId:

  def equals(self, arg0: object) -> bool: ...

  def getBytes(self) -> list[int]: ...

  def hashCode(self) -> int: ...

  def toString(self) -> str: ...


class RowIdLifetime(Enum):

  ROWID_UNSUPPORTED: RowIdLifetime

  ROWID_VALID_FOREVER: RowIdLifetime

  ROWID_VALID_OTHER: RowIdLifetime

  ROWID_VALID_SESSION: RowIdLifetime

  ROWID_VALID_TRANSACTION: RowIdLifetime

  @staticmethod
  def valueOf(arg0: str) -> RowIdLifetime: ...

  @staticmethod
  def values() -> list[RowIdLifetime]: ...


class SQLException(Exception):

  def forEach(self, arg0: Consumer[T]) -> None: ...

  def getErrorCode(self) -> int: ...

  def getNextException(self) -> SQLException: ...

  def getSQLState(self) -> str: ...

  @overload
  def iterator(self) -> Iterator[Throwable]: ...

  @overload
  def iterator(self) -> Iterator[T]: ...

  def setNextException(self, arg0: SQLException) -> None: ...

  def spliterator(self) -> Spliterator[T]: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: str): ...
  @overload
  def __init__(self, arg0: Throwable): ...
  @overload
  def __init__(self, arg0: str, arg1: str): ...
  @overload
  def __init__(self, arg0: str, arg1: Throwable): ...
  @overload
  def __init__(self, arg0: str, arg1: str, arg2: int): ...
  @overload
  def __init__(self, arg0: str, arg1: str, arg2: Throwable): ...
  @overload
  def __init__(self, arg0: str, arg1: str, arg2: int, arg3: Throwable): ...


class SQLType:

  def getName(self) -> str: ...

  def getVendor(self) -> str: ...

  def getVendorTypeNumber(self) -> Integer: ...


class SQLWarning(SQLException):

  def getNextWarning(self) -> SQLWarning: ...

  def setNextWarning(self, arg0: SQLWarning) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: str): ...
  @overload
  def __init__(self, arg0: Throwable): ...
  @overload
  def __init__(self, arg0: str, arg1: str): ...
  @overload
  def __init__(self, arg0: str, arg1: Throwable): ...
  @overload
  def __init__(self, arg0: str, arg1: str, arg2: int): ...
  @overload
  def __init__(self, arg0: str, arg1: str, arg2: Throwable): ...
  @overload
  def __init__(self, arg0: str, arg1: str, arg2: int, arg3: Throwable): ...


class SQLXML:

  def free(self) -> None: ...

  def getBinaryStream(self) -> InputStream: ...

  def getCharacterStream(self) -> Reader: ...

  def getSource(self, arg0: Class[T]) -> T: ...

  def getString(self) -> str: ...

  def setBinaryStream(self) -> OutputStream: ...

  def setCharacterStream(self) -> Writer: ...

  def setResult(self, arg0: Class[T]) -> T: ...

  def setString(self, arg0: str) -> None: ...


class Savepoint:

  def getSavepointId(self) -> int: ...

  def getSavepointName(self) -> str: ...


class ShardingKey: ...


class Statement:

  CLOSE_ALL_RESULTS: int

  CLOSE_CURRENT_RESULT: int

  EXECUTE_FAILED: int

  KEEP_CURRENT_RESULT: int

  NO_GENERATED_KEYS: int

  RETURN_GENERATED_KEYS: int

  SUCCESS_NO_INFO: int

  def addBatch(self, arg0: str) -> None: ...

  def cancel(self) -> None: ...

  def clearBatch(self) -> None: ...

  def clearWarnings(self) -> None: ...

  @overload
  def close(self) -> None: ...

  @overload
  def close(self) -> None: ...

  def closeOnCompletion(self) -> None: ...

  def enquoteIdentifier(self, arg0: str, arg1: bool) -> str: ...

  def enquoteLiteral(self, arg0: str) -> str: ...

  def enquoteNCharLiteral(self, arg0: str) -> str: ...

  @overload
  def execute(self, arg0: str) -> bool: ...

  @overload
  def execute(self, arg0: str, arg1: list[int]) -> bool: ...

  @overload
  def execute(self, arg0: str, arg1: list[str]) -> bool: ...

  @overload
  def execute(self, arg0: str, arg1: int) -> bool: ...

  def executeBatch(self) -> list[int]: ...

  def executeLargeBatch(self) -> list[int]: ...

  @overload
  def executeLargeUpdate(self, arg0: str) -> int: ...

  @overload
  def executeLargeUpdate(self, arg0: str, arg1: list[int]) -> int: ...

  @overload
  def executeLargeUpdate(self, arg0: str, arg1: list[str]) -> int: ...

  @overload
  def executeLargeUpdate(self, arg0: str, arg1: int) -> int: ...

  def executeQuery(self, arg0: str) -> ResultSet: ...

  @overload
  def executeUpdate(self, arg0: str) -> int: ...

  @overload
  def executeUpdate(self, arg0: str, arg1: list[int]) -> int: ...

  @overload
  def executeUpdate(self, arg0: str, arg1: list[str]) -> int: ...

  @overload
  def executeUpdate(self, arg0: str, arg1: int) -> int: ...

  def getConnection(self) -> Connection: ...

  def getFetchDirection(self) -> int: ...

  def getFetchSize(self) -> int: ...

  def getGeneratedKeys(self) -> ResultSet: ...

  def getLargeMaxRows(self) -> int: ...

  def getLargeUpdateCount(self) -> int: ...

  def getMaxFieldSize(self) -> int: ...

  def getMaxRows(self) -> int: ...

  @overload
  def getMoreResults(self) -> bool: ...

  @overload
  def getMoreResults(self, arg0: int) -> bool: ...

  def getQueryTimeout(self) -> int: ...

  def getResultSet(self) -> ResultSet: ...

  def getResultSetConcurrency(self) -> int: ...

  def getResultSetHoldability(self) -> int: ...

  def getResultSetType(self) -> int: ...

  def getUpdateCount(self) -> int: ...

  def getWarnings(self) -> SQLWarning: ...

  def isCloseOnCompletion(self) -> bool: ...

  def isClosed(self) -> bool: ...

  def isPoolable(self) -> bool: ...

  def isSimpleIdentifier(self, arg0: str) -> bool: ...

  def isWrapperFor(self, arg0: Class[Any]) -> bool: ...

  def setCursorName(self, arg0: str) -> None: ...

  def setEscapeProcessing(self, arg0: bool) -> None: ...

  def setFetchDirection(self, arg0: int) -> None: ...

  def setFetchSize(self, arg0: int) -> None: ...

  def setLargeMaxRows(self, arg0: int) -> None: ...

  def setMaxFieldSize(self, arg0: int) -> None: ...

  def setMaxRows(self, arg0: int) -> None: ...

  def setPoolable(self, arg0: bool) -> None: ...

  def setQueryTimeout(self, arg0: int) -> None: ...

  def unwrap(self, arg0: Class[T]) -> object: ...


class Struct:

  @overload
  def getAttributes(self) -> list[object]: ...

  @overload
  def getAttributes(self, arg0: Map[str, Class[Any]]) -> list[object]: ...

  def getSQLTypeName(self) -> str: ...


class Time(Date):

  def getDate(self) -> int: ...

  def getDay(self) -> int: ...

  def getMonth(self) -> int: ...

  def getYear(self) -> int: ...

  def setDate(self, arg0: int) -> None: ...

  def setMonth(self, arg0: int) -> None: ...

  def setTime(self, arg0: int) -> None: ...

  def setYear(self, arg0: int) -> None: ...

  def toInstant(self) -> Instant: ...

  def toLocalTime(self) -> LocalTime: ...

  def toString(self) -> str: ...

  @staticmethod
  @overload
  def valueOf(arg0: str) -> Time: ...

  @staticmethod
  @overload
  def valueOf(arg0: LocalTime) -> Time: ...

  @overload
  def __init__(self, arg0: int): ...
  @overload
  def __init__(self, arg0: int, arg1: int, arg2: int): ...


class Timestamp(Date):

  def after(self, arg0: Timestamp) -> bool: ...

  def before(self, arg0: Timestamp) -> bool: ...

  @overload
  def compareTo(self, arg0: object) -> int: ...

  @overload
  def compareTo(self, arg0: Timestamp) -> int: ...

  @overload
  def compareTo(self, arg0: Date) -> int: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def equals(self, arg0: Timestamp) -> bool: ...

  def getNanos(self) -> int: ...

  def getTime(self) -> int: ...

  def hashCode(self) -> int: ...

  def setNanos(self, arg0: int) -> None: ...

  def setTime(self, arg0: int) -> None: ...

  def toInstant(self) -> Instant: ...

  def toLocalDateTime(self) -> LocalDateTime: ...

  def toString(self) -> str: ...

  @staticmethod
  @overload
  def valueOf(arg0: str) -> Timestamp: ...

  @staticmethod
  @overload
  def valueOf(arg0: LocalDateTime) -> Timestamp: ...

  @overload
  def __init__(self, arg0: int): ...
  @overload
  def __init__(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): ...

