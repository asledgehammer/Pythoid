from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.lang import RuntimeException, Throwable, Enum, CharSequence
from java.time.chrono import ChronoLocalDateTime, ChronoLocalDate, Chronology, IsoChronology, Era, IsoEra, ChronoPeriod, ChronoZonedDateTime
from java.time.format import TextStyle, DateTimeFormatter
from java.time.temporal import Temporal, TemporalField, TemporalQuery, ValueRange, TemporalUnit, TemporalAmount
from java.time.zone import ZoneRules
from java.util import Locale, List, Comparator, Map, Set
from java.util.stream import Stream

R = TypeVar('R', default=Any)

class Clock:

  def equals(self, arg0: object) -> bool: ...

  def getZone(self) -> ZoneId: ...

  def hashCode(self) -> int: ...

  @overload
  def instant(self) -> Instant: ...

  @overload
  def instant(self) -> Instant: ...

  @overload
  def millis(self) -> int: ...

  @overload
  def millis(self) -> int: ...

  @overload
  def withZone(self, arg0: ZoneId) -> Clock: ...

  @overload
  def withZone(self, arg0: ZoneId) -> Clock: ...

  @staticmethod
  @overload
  def fixed(arg0: Instant) -> InstantSource: ...

  @staticmethod
  @overload
  def fixed(arg0: Instant, arg1: ZoneId) -> Clock: ...

  @staticmethod
  @overload
  def offset(arg0: Clock, arg1: Duration) -> Clock: ...

  @staticmethod
  @overload
  def offset(arg0: InstantSource, arg1: Duration) -> InstantSource: ...

  @staticmethod
  @overload
  def system() -> InstantSource: ...

  @staticmethod
  @overload
  def system(arg0: ZoneId) -> Clock: ...

  @staticmethod
  def systemDefaultZone() -> Clock: ...

  @staticmethod
  def systemUTC() -> Clock: ...

  @staticmethod
  @overload
  def tick(arg0: Clock, arg1: Duration) -> Clock: ...

  @staticmethod
  @overload
  def tick(arg0: InstantSource, arg1: Duration) -> InstantSource: ...

  @staticmethod
  def tickMillis(arg0: ZoneId) -> Clock: ...

  @staticmethod
  def tickMinutes(arg0: ZoneId) -> Clock: ...

  @staticmethod
  def tickSeconds(arg0: ZoneId) -> Clock: ...

  class SystemClock(Clock):

    def equals(self, arg0: object) -> bool: ...

    def getZone(self) -> ZoneId: ...

    def hashCode(self) -> int: ...

    def instant(self) -> Instant: ...

    def millis(self) -> int: ...

    def toString(self) -> str: ...

    def withZone(self, arg0: ZoneId) -> Clock: ...

  class TickClock(Clock):

    def equals(self, arg0: object) -> bool: ...

    def getZone(self) -> ZoneId: ...

    def hashCode(self) -> int: ...

    def instant(self) -> Instant: ...

    def millis(self) -> int: ...

    def toString(self) -> str: ...

    def withZone(self, arg0: ZoneId) -> Clock: ...

  class FixedClock(Clock):

    def equals(self, arg0: object) -> bool: ...

    def getZone(self) -> ZoneId: ...

    def hashCode(self) -> int: ...

    def instant(self) -> Instant: ...

    def millis(self) -> int: ...

    def toString(self) -> str: ...

    def withZone(self, arg0: ZoneId) -> Clock: ...

  class OffsetClock(Clock):

    def equals(self, arg0: object) -> bool: ...

    def getZone(self) -> ZoneId: ...

    def hashCode(self) -> int: ...

    def instant(self) -> Instant: ...

    def millis(self) -> int: ...

    def toString(self) -> str: ...

    def withZone(self, arg0: ZoneId) -> Clock: ...

  class SourceClock(Clock):

    def equals(self, arg0: object) -> bool: ...

    def getZone(self) -> ZoneId: ...

    def hashCode(self) -> int: ...

    def instant(self) -> Instant: ...

    def millis(self) -> int: ...

    def toString(self) -> str: ...

    def withZone(self, arg0: ZoneId) -> Clock: ...

  class SystemInstantSource:

    def equals(self, arg0: object) -> bool: ...

    def hashCode(self) -> int: ...

    @overload
    def instant(self) -> Instant: ...

    @overload
    def instant(self) -> Instant: ...

    @overload
    def millis(self) -> int: ...

    @overload
    def millis(self) -> int: ...

    def toString(self) -> str: ...

    @overload
    def withZone(self, arg0: ZoneId) -> Clock: ...

    @overload
    def withZone(self, arg0: ZoneId) -> Clock: ...

    @staticmethod
    def fixed(arg0: Instant) -> InstantSource: ...

    @staticmethod
    def offset(arg0: InstantSource, arg1: Duration) -> InstantSource: ...

    @staticmethod
    def system() -> InstantSource: ...

    @staticmethod
    def tick(arg0: InstantSource, arg1: Duration) -> InstantSource: ...


class DateTimeException(RuntimeException):

  @overload
  def __init__(self, arg0: str): ...
  @overload
  def __init__(self, arg0: str, arg1: Throwable): ...


class DayOfWeek(Enum):

  FRIDAY: DayOfWeek

  MONDAY: DayOfWeek

  SATURDAY: DayOfWeek

  SUNDAY: DayOfWeek

  THURSDAY: DayOfWeek

  TUESDAY: DayOfWeek

  WEDNESDAY: DayOfWeek

  @overload
  def adjustInto(self, arg0: Temporal) -> Temporal: ...

  @overload
  def adjustInto(self, arg0: Temporal) -> Temporal: ...

  @overload
  def get(self, arg0: TemporalField) -> int: ...

  @overload
  def get(self, arg0: TemporalField) -> int: ...

  def getDisplayName(self, arg0: TextStyle, arg1: Locale) -> str: ...

  @overload
  def getLong(self, arg0: TemporalField) -> int: ...

  @overload
  def getLong(self, arg0: TemporalField) -> int: ...

  def getValue(self) -> int: ...

  @overload
  def isSupported(self, arg0: TemporalField) -> bool: ...

  @overload
  def isSupported(self, arg0: TemporalField) -> bool: ...

  def minus(self, arg0: int) -> DayOfWeek: ...

  def plus(self, arg0: int) -> DayOfWeek: ...

  @overload
  def query(self, arg0: TemporalQuery[R]) -> object: ...

  @overload
  def query(self, arg0: TemporalQuery[R]) -> object: ...

  @overload
  def range(self, arg0: TemporalField) -> ValueRange: ...

  @overload
  def range(self, arg0: TemporalField) -> ValueRange: ...

  @staticmethod
  def of(arg0: int) -> DayOfWeek: ...

  @staticmethod
  def valueOf(arg0: str) -> DayOfWeek: ...

  @staticmethod
  def values() -> list[DayOfWeek]: ...


class Duration:

  ZERO: Duration

  def abs(self) -> Duration: ...

  @overload
  def addTo(self, arg0: Temporal) -> Temporal: ...

  @overload
  def addTo(self, arg0: Temporal) -> Temporal: ...

  @overload
  def compareTo(self, arg0: object) -> int: ...

  @overload
  def compareTo(self, arg0: object) -> int: ...

  @overload
  def compareTo(self, arg0: Duration) -> int: ...

  @overload
  def dividedBy(self, arg0: Duration) -> int: ...

  @overload
  def dividedBy(self, arg0: int) -> Duration: ...

  def equals(self, arg0: object) -> bool: ...

  @overload
  def get(self, arg0: TemporalUnit) -> int: ...

  @overload
  def get(self, arg0: TemporalUnit) -> int: ...

  def getNano(self) -> int: ...

  def getSeconds(self) -> int: ...

  @overload
  def getUnits(self) -> List[TemporalUnit]: ...

  @overload
  def getUnits(self) -> List[TemporalUnit]: ...

  def hashCode(self) -> int: ...

  def isNegative(self) -> bool: ...

  def isPositive(self) -> bool: ...

  def isZero(self) -> bool: ...

  @overload
  def minus(self, arg0: Duration) -> Duration: ...

  @overload
  def minus(self, arg0: int, arg1: TemporalUnit) -> Duration: ...

  def minusDays(self, arg0: int) -> Duration: ...

  def minusHours(self, arg0: int) -> Duration: ...

  def minusMillis(self, arg0: int) -> Duration: ...

  def minusMinutes(self, arg0: int) -> Duration: ...

  def minusNanos(self, arg0: int) -> Duration: ...

  def minusSeconds(self, arg0: int) -> Duration: ...

  def multipliedBy(self, arg0: int) -> Duration: ...

  def negated(self) -> Duration: ...

  @overload
  def plus(self, arg0: Duration) -> Duration: ...

  @overload
  def plus(self, arg0: int, arg1: TemporalUnit) -> Duration: ...

  def plusDays(self, arg0: int) -> Duration: ...

  def plusHours(self, arg0: int) -> Duration: ...

  def plusMillis(self, arg0: int) -> Duration: ...

  def plusMinutes(self, arg0: int) -> Duration: ...

  def plusNanos(self, arg0: int) -> Duration: ...

  def plusSeconds(self, arg0: int) -> Duration: ...

  @overload
  def subtractFrom(self, arg0: Temporal) -> Temporal: ...

  @overload
  def subtractFrom(self, arg0: Temporal) -> Temporal: ...

  def toDays(self) -> int: ...

  def toDaysPart(self) -> int: ...

  def toHours(self) -> int: ...

  def toHoursPart(self) -> int: ...

  def toMillis(self) -> int: ...

  def toMillisPart(self) -> int: ...

  def toMinutes(self) -> int: ...

  def toMinutesPart(self) -> int: ...

  def toNanos(self) -> int: ...

  def toNanosPart(self) -> int: ...

  def toSeconds(self) -> int: ...

  def toSecondsPart(self) -> int: ...

  def toString(self) -> str: ...

  def truncatedTo(self, arg0: TemporalUnit) -> Duration: ...

  def withNanos(self, arg0: int) -> Duration: ...

  def withSeconds(self, arg0: int) -> Duration: ...

  @staticmethod
  def between(arg0: Temporal, arg1: Temporal) -> Duration: ...

  @staticmethod
  def of(arg0: int, arg1: TemporalUnit) -> Duration: ...

  @staticmethod
  def ofDays(arg0: int) -> Duration: ...

  @staticmethod
  def ofHours(arg0: int) -> Duration: ...

  @staticmethod
  def ofMillis(arg0: int) -> Duration: ...

  @staticmethod
  def ofMinutes(arg0: int) -> Duration: ...

  @staticmethod
  def ofNanos(arg0: int) -> Duration: ...

  @staticmethod
  @overload
  def ofSeconds(arg0: int) -> Duration: ...

  @staticmethod
  @overload
  def ofSeconds(arg0: int, arg1: int) -> Duration: ...

  @staticmethod
  def parse(arg0: CharSequence) -> Duration: ...

  class Lazy: ...

  class DurationUnits: ...


class Instant:

  EPOCH: Instant

  MAX: Instant

  MIN: Instant

  @overload
  def adjustInto(self, arg0: Temporal) -> Temporal: ...

  @overload
  def adjustInto(self, arg0: Temporal) -> Temporal: ...

  def atOffset(self, arg0: ZoneOffset) -> OffsetDateTime: ...

  def atZone(self, arg0: ZoneId) -> ZonedDateTime: ...

  @overload
  def compareTo(self, arg0: object) -> int: ...

  @overload
  def compareTo(self, arg0: object) -> int: ...

  @overload
  def compareTo(self, arg0: Instant) -> int: ...

  def equals(self, arg0: object) -> bool: ...

  def get(self, arg0: TemporalField) -> int: ...

  def getEpochSecond(self) -> int: ...

  def getLong(self, arg0: TemporalField) -> int: ...

  def getNano(self) -> int: ...

  def hashCode(self) -> int: ...

  def isAfter(self, arg0: Instant) -> bool: ...

  def isBefore(self, arg0: Instant) -> bool: ...

  @overload
  def isSupported(self, arg0: TemporalField) -> bool: ...

  @overload
  def isSupported(self, arg0: TemporalUnit) -> bool: ...

  @overload
  def isSupported(self, arg0: TemporalUnit) -> bool: ...

  @overload
  def minus(self, arg0: TemporalAmount) -> Temporal: ...

  @overload
  def minus(self, arg0: TemporalAmount) -> Instant: ...

  @overload
  def minus(self, arg0: TemporalAmount) -> Temporal: ...

  @overload
  def minus(self, arg0: int, arg1: TemporalUnit) -> Instant: ...

  @overload
  def minus(self, arg0: int, arg1: TemporalUnit) -> Temporal: ...

  @overload
  def minus(self, arg0: int, arg1: TemporalUnit) -> Temporal: ...

  def minusMillis(self, arg0: int) -> Instant: ...

  def minusNanos(self, arg0: int) -> Instant: ...

  def minusSeconds(self, arg0: int) -> Instant: ...

  @overload
  def plus(self, arg0: TemporalAmount) -> Instant: ...

  @overload
  def plus(self, arg0: TemporalAmount) -> Temporal: ...

  @overload
  def plus(self, arg0: TemporalAmount) -> Temporal: ...

  @overload
  def plus(self, arg0: int, arg1: TemporalUnit) -> Instant: ...

  @overload
  def plus(self, arg0: int, arg1: TemporalUnit) -> Temporal: ...

  @overload
  def plus(self, arg0: int, arg1: TemporalUnit) -> Temporal: ...

  def plusMillis(self, arg0: int) -> Instant: ...

  def plusNanos(self, arg0: int) -> Instant: ...

  def plusSeconds(self, arg0: int) -> Instant: ...

  def query(self, arg0: TemporalQuery[R]) -> object: ...

  def range(self, arg0: TemporalField) -> ValueRange: ...

  def toEpochMilli(self) -> int: ...

  def toString(self) -> str: ...

  def truncatedTo(self, arg0: TemporalUnit) -> Instant: ...

  @overload
  def until(self, arg0: Temporal, arg1: TemporalUnit) -> int: ...

  @overload
  def until(self, arg0: Temporal, arg1: TemporalUnit) -> int: ...

  @staticmethod
  @overload
  def now() -> Instant: ...

  @staticmethod
  @overload
  def now(arg0: Clock) -> Instant: ...

  @staticmethod
  def ofEpochMilli(arg0: int) -> Instant: ...

  @staticmethod
  @overload
  def ofEpochSecond(arg0: int) -> Instant: ...

  @staticmethod
  @overload
  def ofEpochSecond(arg0: int, arg1: int) -> Instant: ...

  @staticmethod
  def parse(arg0: CharSequence) -> Instant: ...


class InstantSource:

  def instant(self) -> Instant: ...

  def millis(self) -> int: ...

  def withZone(self, arg0: ZoneId) -> Clock: ...

  @staticmethod
  def fixed(arg0: Instant) -> InstantSource: ...

  @staticmethod
  def offset(arg0: InstantSource, arg1: Duration) -> InstantSource: ...

  @staticmethod
  def system() -> InstantSource: ...

  @staticmethod
  def tick(arg0: InstantSource, arg1: Duration) -> InstantSource: ...


class LocalDate:

  EPOCH: LocalDate

  MAX: LocalDate

  MIN: LocalDate

  @overload
  def adjustInto(self, arg0: Temporal) -> Temporal: ...

  @overload
  def adjustInto(self, arg0: Temporal) -> Temporal: ...

  @overload
  def adjustInto(self, arg0: Temporal) -> Temporal: ...

  @overload
  def atStartOfDay(self) -> LocalDateTime: ...

  @overload
  def atStartOfDay(self, arg0: ZoneId) -> ZonedDateTime: ...

  @overload
  def atTime(self, arg0: LocalTime) -> ChronoLocalDateTime: ...

  @overload
  def atTime(self, arg0: LocalTime) -> LocalDateTime: ...

  @overload
  def atTime(self, arg0: LocalTime) -> ChronoLocalDateTime[Any]: ...

  @overload
  def atTime(self, arg0: OffsetTime) -> OffsetDateTime: ...

  @overload
  def atTime(self, arg0: int, arg1: int) -> LocalDateTime: ...

  @overload
  def atTime(self, arg0: int, arg1: int, arg2: int) -> LocalDateTime: ...

  @overload
  def atTime(self, arg0: int, arg1: int, arg2: int, arg3: int) -> LocalDateTime: ...

  @overload
  def compareTo(self, arg0: object) -> int: ...

  @overload
  def compareTo(self, arg0: object) -> int: ...

  @overload
  def compareTo(self, arg0: ChronoLocalDate) -> int: ...

  @overload
  def compareTo(self, arg0: ChronoLocalDate) -> int: ...

  @overload
  def datesUntil(self, arg0: LocalDate) -> Stream[LocalDate]: ...

  @overload
  def datesUntil(self, arg0: LocalDate, arg1: Period) -> Stream[LocalDate]: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def format(self, arg0: DateTimeFormatter) -> str: ...

  @overload
  def format(self, arg0: DateTimeFormatter) -> str: ...

  def get(self, arg0: TemporalField) -> int: ...

  @overload
  def getChronology(self) -> Chronology: ...

  @overload
  def getChronology(self) -> IsoChronology: ...

  @overload
  def getChronology(self) -> Chronology: ...

  def getDayOfMonth(self) -> int: ...

  def getDayOfWeek(self) -> DayOfWeek: ...

  def getDayOfYear(self) -> int: ...

  @overload
  def getEra(self) -> Era: ...

  @overload
  def getEra(self) -> IsoEra: ...

  @overload
  def getEra(self) -> Era: ...

  def getLong(self, arg0: TemporalField) -> int: ...

  def getMonth(self) -> Month: ...

  def getMonthValue(self) -> int: ...

  def getYear(self) -> int: ...

  @overload
  def hashCode(self) -> int: ...

  @overload
  def hashCode(self) -> int: ...

  @overload
  def isAfter(self, arg0: ChronoLocalDate) -> bool: ...

  @overload
  def isAfter(self, arg0: ChronoLocalDate) -> bool: ...

  @overload
  def isBefore(self, arg0: ChronoLocalDate) -> bool: ...

  @overload
  def isBefore(self, arg0: ChronoLocalDate) -> bool: ...

  @overload
  def isEqual(self, arg0: ChronoLocalDate) -> bool: ...

  @overload
  def isEqual(self, arg0: ChronoLocalDate) -> bool: ...

  @overload
  def isLeapYear(self) -> bool: ...

  @overload
  def isLeapYear(self) -> bool: ...

  @overload
  def isSupported(self, arg0: TemporalField) -> bool: ...

  @overload
  def isSupported(self, arg0: TemporalField) -> bool: ...

  @overload
  def isSupported(self, arg0: TemporalUnit) -> bool: ...

  @overload
  def isSupported(self, arg0: TemporalUnit) -> bool: ...

  @overload
  def isSupported(self, arg0: TemporalUnit) -> bool: ...

  @overload
  def lengthOfMonth(self) -> int: ...

  @overload
  def lengthOfMonth(self) -> int: ...

  @overload
  def lengthOfYear(self) -> int: ...

  @overload
  def lengthOfYear(self) -> int: ...

  @overload
  def minus(self, arg0: TemporalAmount) -> ChronoLocalDate: ...

  @overload
  def minus(self, arg0: TemporalAmount) -> LocalDate: ...

  @overload
  def minus(self, arg0: TemporalAmount) -> Temporal: ...

  @overload
  def minus(self, arg0: TemporalAmount) -> Temporal: ...

  @overload
  def minus(self, arg0: TemporalAmount) -> ChronoLocalDate: ...

  @overload
  def minus(self, arg0: TemporalAmount) -> Temporal: ...

  @overload
  def minus(self, arg0: int, arg1: TemporalUnit) -> ChronoLocalDate: ...

  @overload
  def minus(self, arg0: int, arg1: TemporalUnit) -> LocalDate: ...

  @overload
  def minus(self, arg0: int, arg1: TemporalUnit) -> Temporal: ...

  @overload
  def minus(self, arg0: int, arg1: TemporalUnit) -> Temporal: ...

  @overload
  def minus(self, arg0: int, arg1: TemporalUnit) -> ChronoLocalDate: ...

  @overload
  def minus(self, arg0: int, arg1: TemporalUnit) -> Temporal: ...

  def minusDays(self, arg0: int) -> LocalDate: ...

  def minusMonths(self, arg0: int) -> LocalDate: ...

  def minusWeeks(self, arg0: int) -> LocalDate: ...

  def minusYears(self, arg0: int) -> LocalDate: ...

  @overload
  def plus(self, arg0: TemporalAmount) -> ChronoLocalDate: ...

  @overload
  def plus(self, arg0: TemporalAmount) -> LocalDate: ...

  @overload
  def plus(self, arg0: TemporalAmount) -> Temporal: ...

  @overload
  def plus(self, arg0: TemporalAmount) -> Temporal: ...

  @overload
  def plus(self, arg0: TemporalAmount) -> Temporal: ...

  @overload
  def plus(self, arg0: TemporalAmount) -> ChronoLocalDate: ...

  @overload
  def plus(self, arg0: int, arg1: TemporalUnit) -> ChronoLocalDate: ...

  @overload
  def plus(self, arg0: int, arg1: TemporalUnit) -> Temporal: ...

  @overload
  def plus(self, arg0: int, arg1: TemporalUnit) -> LocalDate: ...

  @overload
  def plus(self, arg0: int, arg1: TemporalUnit) -> Temporal: ...

  @overload
  def plus(self, arg0: int, arg1: TemporalUnit) -> ChronoLocalDate: ...

  @overload
  def plus(self, arg0: int, arg1: TemporalUnit) -> Temporal: ...

  def plusDays(self, arg0: int) -> LocalDate: ...

  def plusMonths(self, arg0: int) -> LocalDate: ...

  def plusWeeks(self, arg0: int) -> LocalDate: ...

  def plusYears(self, arg0: int) -> LocalDate: ...

  @overload
  def query(self, arg0: TemporalQuery[R]) -> object: ...

  @overload
  def query(self, arg0: TemporalQuery[R]) -> object: ...

  def range(self, arg0: TemporalField) -> ValueRange: ...

  @overload
  def toEpochDay(self) -> int: ...

  @overload
  def toEpochDay(self) -> int: ...

  def toEpochSecond(self, arg0: LocalTime, arg1: ZoneOffset) -> int: ...

  @overload
  def toString(self) -> str: ...

  @overload
  def toString(self) -> str: ...

  @overload
  def until(self, arg0: ChronoLocalDate) -> ChronoPeriod: ...

  @overload
  def until(self, arg0: ChronoLocalDate) -> Period: ...

  @overload
  def until(self, arg0: ChronoLocalDate) -> ChronoPeriod: ...

  @overload
  def until(self, arg0: Temporal, arg1: TemporalUnit) -> int: ...

  @overload
  def until(self, arg0: Temporal, arg1: TemporalUnit) -> int: ...

  @overload
  def until(self, arg0: Temporal, arg1: TemporalUnit) -> int: ...

  def withDayOfMonth(self, arg0: int) -> LocalDate: ...

  def withDayOfYear(self, arg0: int) -> LocalDate: ...

  def withMonth(self, arg0: int) -> LocalDate: ...

  def withYear(self, arg0: int) -> LocalDate: ...

  @staticmethod
  @overload
  def now() -> LocalDate: ...

  @staticmethod
  @overload
  def now(arg0: Clock) -> LocalDate: ...

  @staticmethod
  @overload
  def now(arg0: ZoneId) -> LocalDate: ...

  @staticmethod
  @overload
  def of(arg0: int, arg1: int, arg2: int) -> LocalDate: ...

  @staticmethod
  @overload
  def of(arg0: int, arg1: Month, arg2: int) -> LocalDate: ...

  @staticmethod
  def ofEpochDay(arg0: int) -> LocalDate: ...

  @staticmethod
  def ofInstant(arg0: Instant, arg1: ZoneId) -> LocalDate: ...

  @staticmethod
  def ofYearDay(arg0: int, arg1: int) -> LocalDate: ...

  @staticmethod
  @overload
  def parse(arg0: CharSequence) -> LocalDate: ...

  @staticmethod
  @overload
  def parse(arg0: CharSequence, arg1: DateTimeFormatter) -> LocalDate: ...

  @staticmethod
  def timeLineOrder() -> Comparator[ChronoLocalDate]: ...


class LocalDateTime:

  MAX: LocalDateTime

  MIN: LocalDateTime

  @overload
  def adjustInto(self, arg0: Temporal) -> Temporal: ...

  @overload
  def adjustInto(self, arg0: Temporal) -> Temporal: ...

  @overload
  def adjustInto(self, arg0: Temporal) -> Temporal: ...

  def atOffset(self, arg0: ZoneOffset) -> OffsetDateTime: ...

  @overload
  def atZone(self, arg0: ZoneId) -> ChronoZonedDateTime: ...

  @overload
  def atZone(self, arg0: ZoneId) -> ZonedDateTime: ...

  @overload
  def atZone(self, arg0: ZoneId) -> ChronoZonedDateTime[D]: ...

  @overload
  def compareTo(self, arg0: object) -> int: ...

  @overload
  def compareTo(self, arg0: object) -> int: ...

  @overload
  def compareTo(self, arg0: ChronoLocalDateTime[Any]) -> int: ...

  @overload
  def compareTo(self, arg0: ChronoLocalDateTime[Any]) -> int: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def format(self, arg0: DateTimeFormatter) -> str: ...

  @overload
  def format(self, arg0: DateTimeFormatter) -> str: ...

  def get(self, arg0: TemporalField) -> int: ...

  def getChronology(self) -> Chronology: ...

  def getDayOfMonth(self) -> int: ...

  def getDayOfWeek(self) -> DayOfWeek: ...

  def getDayOfYear(self) -> int: ...

  def getHour(self) -> int: ...

  def getLong(self, arg0: TemporalField) -> int: ...

  def getMinute(self) -> int: ...

  def getMonth(self) -> Month: ...

  def getMonthValue(self) -> int: ...

  def getNano(self) -> int: ...

  def getSecond(self) -> int: ...

  def getYear(self) -> int: ...

  @overload
  def hashCode(self) -> int: ...

  @overload
  def hashCode(self) -> int: ...

  @overload
  def isAfter(self, arg0: ChronoLocalDateTime[Any]) -> bool: ...

  @overload
  def isAfter(self, arg0: ChronoLocalDateTime[Any]) -> bool: ...

  @overload
  def isBefore(self, arg0: ChronoLocalDateTime[Any]) -> bool: ...

  @overload
  def isBefore(self, arg0: ChronoLocalDateTime[Any]) -> bool: ...

  @overload
  def isEqual(self, arg0: ChronoLocalDateTime[Any]) -> bool: ...

  @overload
  def isEqual(self, arg0: ChronoLocalDateTime[Any]) -> bool: ...

  @overload
  def isSupported(self, arg0: TemporalField) -> bool: ...

  @overload
  def isSupported(self, arg0: TemporalField) -> bool: ...

  @overload
  def isSupported(self, arg0: TemporalUnit) -> bool: ...

  @overload
  def isSupported(self, arg0: TemporalUnit) -> bool: ...

  @overload
  def isSupported(self, arg0: TemporalUnit) -> bool: ...

  @overload
  def minus(self, arg0: TemporalAmount) -> LocalDateTime: ...

  @overload
  def minus(self, arg0: TemporalAmount) -> ChronoLocalDateTime: ...

  @overload
  def minus(self, arg0: TemporalAmount) -> Temporal: ...

  @overload
  def minus(self, arg0: TemporalAmount) -> Temporal: ...

  @overload
  def minus(self, arg0: TemporalAmount) -> ChronoLocalDateTime[D]: ...

  @overload
  def minus(self, arg0: TemporalAmount) -> Temporal: ...

  @overload
  def minus(self, arg0: int, arg1: TemporalUnit) -> Temporal: ...

  @overload
  def minus(self, arg0: int, arg1: TemporalUnit) -> LocalDateTime: ...

  @overload
  def minus(self, arg0: int, arg1: TemporalUnit) -> ChronoLocalDateTime: ...

  @overload
  def minus(self, arg0: int, arg1: TemporalUnit) -> Temporal: ...

  @overload
  def minus(self, arg0: int, arg1: TemporalUnit) -> Temporal: ...

  @overload
  def minus(self, arg0: int, arg1: TemporalUnit) -> ChronoLocalDateTime[D]: ...

  def minusDays(self, arg0: int) -> LocalDateTime: ...

  def minusHours(self, arg0: int) -> LocalDateTime: ...

  def minusMinutes(self, arg0: int) -> LocalDateTime: ...

  def minusMonths(self, arg0: int) -> LocalDateTime: ...

  def minusNanos(self, arg0: int) -> LocalDateTime: ...

  def minusSeconds(self, arg0: int) -> LocalDateTime: ...

  def minusWeeks(self, arg0: int) -> LocalDateTime: ...

  def minusYears(self, arg0: int) -> LocalDateTime: ...

  @overload
  def plus(self, arg0: TemporalAmount) -> ChronoLocalDateTime: ...

  @overload
  def plus(self, arg0: TemporalAmount) -> Temporal: ...

  @overload
  def plus(self, arg0: TemporalAmount) -> LocalDateTime: ...

  @overload
  def plus(self, arg0: TemporalAmount) -> Temporal: ...

  @overload
  def plus(self, arg0: TemporalAmount) -> Temporal: ...

  @overload
  def plus(self, arg0: TemporalAmount) -> ChronoLocalDateTime[D]: ...

  @overload
  def plus(self, arg0: int, arg1: TemporalUnit) -> LocalDateTime: ...

  @overload
  def plus(self, arg0: int, arg1: TemporalUnit) -> ChronoLocalDateTime: ...

  @overload
  def plus(self, arg0: int, arg1: TemporalUnit) -> Temporal: ...

  @overload
  def plus(self, arg0: int, arg1: TemporalUnit) -> Temporal: ...

  @overload
  def plus(self, arg0: int, arg1: TemporalUnit) -> Temporal: ...

  @overload
  def plus(self, arg0: int, arg1: TemporalUnit) -> ChronoLocalDateTime[D]: ...

  def plusDays(self, arg0: int) -> LocalDateTime: ...

  def plusHours(self, arg0: int) -> LocalDateTime: ...

  def plusMinutes(self, arg0: int) -> LocalDateTime: ...

  def plusMonths(self, arg0: int) -> LocalDateTime: ...

  def plusNanos(self, arg0: int) -> LocalDateTime: ...

  def plusSeconds(self, arg0: int) -> LocalDateTime: ...

  def plusWeeks(self, arg0: int) -> LocalDateTime: ...

  def plusYears(self, arg0: int) -> LocalDateTime: ...

  @overload
  def query(self, arg0: TemporalQuery[R]) -> object: ...

  @overload
  def query(self, arg0: TemporalQuery[R]) -> object: ...

  def range(self, arg0: TemporalField) -> ValueRange: ...

  def toEpochSecond(self, arg0: ZoneOffset) -> int: ...

  def toInstant(self, arg0: ZoneOffset) -> Instant: ...

  @overload
  def toLocalDate(self) -> ChronoLocalDate: ...

  @overload
  def toLocalDate(self) -> LocalDate: ...

  @overload
  def toLocalDate(self) -> D: ...

  @overload
  def toLocalTime(self) -> LocalTime: ...

  @overload
  def toLocalTime(self) -> LocalTime: ...

  @overload
  def toString(self) -> str: ...

  @overload
  def toString(self) -> str: ...

  def truncatedTo(self, arg0: TemporalUnit) -> LocalDateTime: ...

  @overload
  def until(self, arg0: Temporal, arg1: TemporalUnit) -> int: ...

  @overload
  def until(self, arg0: Temporal, arg1: TemporalUnit) -> int: ...

  def withDayOfMonth(self, arg0: int) -> LocalDateTime: ...

  def withDayOfYear(self, arg0: int) -> LocalDateTime: ...

  def withHour(self, arg0: int) -> LocalDateTime: ...

  def withMinute(self, arg0: int) -> LocalDateTime: ...

  def withMonth(self, arg0: int) -> LocalDateTime: ...

  def withNano(self, arg0: int) -> LocalDateTime: ...

  def withSecond(self, arg0: int) -> LocalDateTime: ...

  def withYear(self, arg0: int) -> LocalDateTime: ...

  @staticmethod
  @overload
  def now() -> LocalDateTime: ...

  @staticmethod
  @overload
  def now(arg0: Clock) -> LocalDateTime: ...

  @staticmethod
  @overload
  def now(arg0: ZoneId) -> LocalDateTime: ...

  @staticmethod
  @overload
  def of(arg0: LocalDate, arg1: LocalTime) -> LocalDateTime: ...

  @staticmethod
  @overload
  def of(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int) -> LocalDateTime: ...

  @staticmethod
  @overload
  def of(arg0: int, arg1: Month, arg2: int, arg3: int, arg4: int) -> LocalDateTime: ...

  @staticmethod
  @overload
  def of(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int) -> LocalDateTime: ...

  @staticmethod
  @overload
  def of(arg0: int, arg1: Month, arg2: int, arg3: int, arg4: int, arg5: int) -> LocalDateTime: ...

  @staticmethod
  @overload
  def of(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int) -> LocalDateTime: ...

  @staticmethod
  @overload
  def of(arg0: int, arg1: Month, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int) -> LocalDateTime: ...

  @staticmethod
  def ofEpochSecond(arg0: int, arg1: int, arg2: ZoneOffset) -> LocalDateTime: ...

  @staticmethod
  def ofInstant(arg0: Instant, arg1: ZoneId) -> LocalDateTime: ...

  @staticmethod
  @overload
  def parse(arg0: CharSequence) -> LocalDateTime: ...

  @staticmethod
  @overload
  def parse(arg0: CharSequence, arg1: DateTimeFormatter) -> LocalDateTime: ...

  @staticmethod
  def timeLineOrder() -> Comparator[ChronoLocalDateTime[Any]]: ...


class LocalTime:

  MAX: LocalTime

  MIDNIGHT: LocalTime

  MIN: LocalTime

  NOON: LocalTime

  @overload
  def adjustInto(self, arg0: Temporal) -> Temporal: ...

  @overload
  def adjustInto(self, arg0: Temporal) -> Temporal: ...

  def atDate(self, arg0: LocalDate) -> LocalDateTime: ...

  def atOffset(self, arg0: ZoneOffset) -> OffsetTime: ...

  @overload
  def compareTo(self, arg0: object) -> int: ...

  @overload
  def compareTo(self, arg0: object) -> int: ...

  @overload
  def compareTo(self, arg0: LocalTime) -> int: ...

  def equals(self, arg0: object) -> bool: ...

  def format(self, arg0: DateTimeFormatter) -> str: ...

  def get(self, arg0: TemporalField) -> int: ...

  def getHour(self) -> int: ...

  def getLong(self, arg0: TemporalField) -> int: ...

  def getMinute(self) -> int: ...

  def getNano(self) -> int: ...

  def getSecond(self) -> int: ...

  def hashCode(self) -> int: ...

  def isAfter(self, arg0: LocalTime) -> bool: ...

  def isBefore(self, arg0: LocalTime) -> bool: ...

  @overload
  def isSupported(self, arg0: TemporalField) -> bool: ...

  @overload
  def isSupported(self, arg0: TemporalUnit) -> bool: ...

  @overload
  def isSupported(self, arg0: TemporalUnit) -> bool: ...

  @overload
  def minus(self, arg0: TemporalAmount) -> Temporal: ...

  @overload
  def minus(self, arg0: TemporalAmount) -> LocalTime: ...

  @overload
  def minus(self, arg0: TemporalAmount) -> Temporal: ...

  @overload
  def minus(self, arg0: int, arg1: TemporalUnit) -> LocalTime: ...

  @overload
  def minus(self, arg0: int, arg1: TemporalUnit) -> Temporal: ...

  @overload
  def minus(self, arg0: int, arg1: TemporalUnit) -> Temporal: ...

  def minusHours(self, arg0: int) -> LocalTime: ...

  def minusMinutes(self, arg0: int) -> LocalTime: ...

  def minusNanos(self, arg0: int) -> LocalTime: ...

  def minusSeconds(self, arg0: int) -> LocalTime: ...

  @overload
  def plus(self, arg0: TemporalAmount) -> Temporal: ...

  @overload
  def plus(self, arg0: TemporalAmount) -> LocalTime: ...

  @overload
  def plus(self, arg0: TemporalAmount) -> Temporal: ...

  @overload
  def plus(self, arg0: int, arg1: TemporalUnit) -> Temporal: ...

  @overload
  def plus(self, arg0: int, arg1: TemporalUnit) -> LocalTime: ...

  @overload
  def plus(self, arg0: int, arg1: TemporalUnit) -> Temporal: ...

  def plusHours(self, arg0: int) -> LocalTime: ...

  def plusMinutes(self, arg0: int) -> LocalTime: ...

  def plusNanos(self, arg0: int) -> LocalTime: ...

  def plusSeconds(self, arg0: int) -> LocalTime: ...

  def query(self, arg0: TemporalQuery[R]) -> object: ...

  def range(self, arg0: TemporalField) -> ValueRange: ...

  def toEpochSecond(self, arg0: LocalDate, arg1: ZoneOffset) -> int: ...

  def toNanoOfDay(self) -> int: ...

  def toSecondOfDay(self) -> int: ...

  def toString(self) -> str: ...

  def truncatedTo(self, arg0: TemporalUnit) -> LocalTime: ...

  @overload
  def until(self, arg0: Temporal, arg1: TemporalUnit) -> int: ...

  @overload
  def until(self, arg0: Temporal, arg1: TemporalUnit) -> int: ...

  def withHour(self, arg0: int) -> LocalTime: ...

  def withMinute(self, arg0: int) -> LocalTime: ...

  def withNano(self, arg0: int) -> LocalTime: ...

  def withSecond(self, arg0: int) -> LocalTime: ...

  @staticmethod
  @overload
  def now() -> LocalTime: ...

  @staticmethod
  @overload
  def now(arg0: Clock) -> LocalTime: ...

  @staticmethod
  @overload
  def now(arg0: ZoneId) -> LocalTime: ...

  @staticmethod
  @overload
  def of(arg0: int, arg1: int) -> LocalTime: ...

  @staticmethod
  @overload
  def of(arg0: int, arg1: int, arg2: int) -> LocalTime: ...

  @staticmethod
  @overload
  def of(arg0: int, arg1: int, arg2: int, arg3: int) -> LocalTime: ...

  @staticmethod
  def ofInstant(arg0: Instant, arg1: ZoneId) -> LocalTime: ...

  @staticmethod
  def ofNanoOfDay(arg0: int) -> LocalTime: ...

  @staticmethod
  def ofSecondOfDay(arg0: int) -> LocalTime: ...

  @staticmethod
  @overload
  def parse(arg0: CharSequence) -> LocalTime: ...

  @staticmethod
  @overload
  def parse(arg0: CharSequence, arg1: DateTimeFormatter) -> LocalTime: ...


class Month(Enum):

  APRIL: Month

  AUGUST: Month

  DECEMBER: Month

  FEBRUARY: Month

  JANUARY: Month

  JULY: Month

  JUNE: Month

  MARCH: Month

  MAY: Month

  NOVEMBER: Month

  OCTOBER: Month

  SEPTEMBER: Month

  @overload
  def adjustInto(self, arg0: Temporal) -> Temporal: ...

  @overload
  def adjustInto(self, arg0: Temporal) -> Temporal: ...

  def firstDayOfYear(self, arg0: bool) -> int: ...

  def firstMonthOfQuarter(self) -> Month: ...

  @overload
  def get(self, arg0: TemporalField) -> int: ...

  @overload
  def get(self, arg0: TemporalField) -> int: ...

  def getDisplayName(self, arg0: TextStyle, arg1: Locale) -> str: ...

  @overload
  def getLong(self, arg0: TemporalField) -> int: ...

  @overload
  def getLong(self, arg0: TemporalField) -> int: ...

  def getValue(self) -> int: ...

  @overload
  def isSupported(self, arg0: TemporalField) -> bool: ...

  @overload
  def isSupported(self, arg0: TemporalField) -> bool: ...

  def length(self, arg0: bool) -> int: ...

  def maxLength(self) -> int: ...

  def minLength(self) -> int: ...

  def minus(self, arg0: int) -> Month: ...

  def plus(self, arg0: int) -> Month: ...

  @overload
  def query(self, arg0: TemporalQuery[R]) -> object: ...

  @overload
  def query(self, arg0: TemporalQuery[R]) -> object: ...

  @overload
  def range(self, arg0: TemporalField) -> ValueRange: ...

  @overload
  def range(self, arg0: TemporalField) -> ValueRange: ...

  @staticmethod
  def of(arg0: int) -> Month: ...

  @staticmethod
  def valueOf(arg0: str) -> Month: ...

  @staticmethod
  def values() -> list[Month]: ...


class OffsetDateTime:

  MAX: OffsetDateTime

  MIN: OffsetDateTime

  @overload
  def adjustInto(self, arg0: Temporal) -> Temporal: ...

  @overload
  def adjustInto(self, arg0: Temporal) -> Temporal: ...

  def atZoneSameInstant(self, arg0: ZoneId) -> ZonedDateTime: ...

  def atZoneSimilarLocal(self, arg0: ZoneId) -> ZonedDateTime: ...

  @overload
  def compareTo(self, arg0: object) -> int: ...

  @overload
  def compareTo(self, arg0: object) -> int: ...

  @overload
  def compareTo(self, arg0: OffsetDateTime) -> int: ...

  def equals(self, arg0: object) -> bool: ...

  def format(self, arg0: DateTimeFormatter) -> str: ...

  def get(self, arg0: TemporalField) -> int: ...

  def getDayOfMonth(self) -> int: ...

  def getDayOfWeek(self) -> DayOfWeek: ...

  def getDayOfYear(self) -> int: ...

  def getHour(self) -> int: ...

  def getLong(self, arg0: TemporalField) -> int: ...

  def getMinute(self) -> int: ...

  def getMonth(self) -> Month: ...

  def getMonthValue(self) -> int: ...

  def getNano(self) -> int: ...

  def getOffset(self) -> ZoneOffset: ...

  def getSecond(self) -> int: ...

  def getYear(self) -> int: ...

  def hashCode(self) -> int: ...

  def isAfter(self, arg0: OffsetDateTime) -> bool: ...

  def isBefore(self, arg0: OffsetDateTime) -> bool: ...

  def isEqual(self, arg0: OffsetDateTime) -> bool: ...

  @overload
  def isSupported(self, arg0: TemporalField) -> bool: ...

  @overload
  def isSupported(self, arg0: TemporalUnit) -> bool: ...

  @overload
  def isSupported(self, arg0: TemporalUnit) -> bool: ...

  @overload
  def minus(self, arg0: TemporalAmount) -> OffsetDateTime: ...

  @overload
  def minus(self, arg0: TemporalAmount) -> Temporal: ...

  @overload
  def minus(self, arg0: TemporalAmount) -> Temporal: ...

  @overload
  def minus(self, arg0: int, arg1: TemporalUnit) -> OffsetDateTime: ...

  @overload
  def minus(self, arg0: int, arg1: TemporalUnit) -> Temporal: ...

  @overload
  def minus(self, arg0: int, arg1: TemporalUnit) -> Temporal: ...

  def minusDays(self, arg0: int) -> OffsetDateTime: ...

  def minusHours(self, arg0: int) -> OffsetDateTime: ...

  def minusMinutes(self, arg0: int) -> OffsetDateTime: ...

  def minusMonths(self, arg0: int) -> OffsetDateTime: ...

  def minusNanos(self, arg0: int) -> OffsetDateTime: ...

  def minusSeconds(self, arg0: int) -> OffsetDateTime: ...

  def minusWeeks(self, arg0: int) -> OffsetDateTime: ...

  def minusYears(self, arg0: int) -> OffsetDateTime: ...

  @overload
  def plus(self, arg0: TemporalAmount) -> OffsetDateTime: ...

  @overload
  def plus(self, arg0: TemporalAmount) -> Temporal: ...

  @overload
  def plus(self, arg0: TemporalAmount) -> Temporal: ...

  @overload
  def plus(self, arg0: int, arg1: TemporalUnit) -> OffsetDateTime: ...

  @overload
  def plus(self, arg0: int, arg1: TemporalUnit) -> Temporal: ...

  @overload
  def plus(self, arg0: int, arg1: TemporalUnit) -> Temporal: ...

  def plusDays(self, arg0: int) -> OffsetDateTime: ...

  def plusHours(self, arg0: int) -> OffsetDateTime: ...

  def plusMinutes(self, arg0: int) -> OffsetDateTime: ...

  def plusMonths(self, arg0: int) -> OffsetDateTime: ...

  def plusNanos(self, arg0: int) -> OffsetDateTime: ...

  def plusSeconds(self, arg0: int) -> OffsetDateTime: ...

  def plusWeeks(self, arg0: int) -> OffsetDateTime: ...

  def plusYears(self, arg0: int) -> OffsetDateTime: ...

  def query(self, arg0: TemporalQuery[R]) -> object: ...

  def range(self, arg0: TemporalField) -> ValueRange: ...

  def toEpochSecond(self) -> int: ...

  def toInstant(self) -> Instant: ...

  def toLocalDate(self) -> LocalDate: ...

  def toLocalDateTime(self) -> LocalDateTime: ...

  def toLocalTime(self) -> LocalTime: ...

  def toOffsetTime(self) -> OffsetTime: ...

  def toString(self) -> str: ...

  def toZonedDateTime(self) -> ZonedDateTime: ...

  def truncatedTo(self, arg0: TemporalUnit) -> OffsetDateTime: ...

  @overload
  def until(self, arg0: Temporal, arg1: TemporalUnit) -> int: ...

  @overload
  def until(self, arg0: Temporal, arg1: TemporalUnit) -> int: ...

  def withDayOfMonth(self, arg0: int) -> OffsetDateTime: ...

  def withDayOfYear(self, arg0: int) -> OffsetDateTime: ...

  def withHour(self, arg0: int) -> OffsetDateTime: ...

  def withMinute(self, arg0: int) -> OffsetDateTime: ...

  def withMonth(self, arg0: int) -> OffsetDateTime: ...

  def withNano(self, arg0: int) -> OffsetDateTime: ...

  def withOffsetSameInstant(self, arg0: ZoneOffset) -> OffsetDateTime: ...

  def withOffsetSameLocal(self, arg0: ZoneOffset) -> OffsetDateTime: ...

  def withSecond(self, arg0: int) -> OffsetDateTime: ...

  def withYear(self, arg0: int) -> OffsetDateTime: ...

  @staticmethod
  @overload
  def now() -> OffsetDateTime: ...

  @staticmethod
  @overload
  def now(arg0: Clock) -> OffsetDateTime: ...

  @staticmethod
  @overload
  def now(arg0: ZoneId) -> OffsetDateTime: ...

  @staticmethod
  @overload
  def of(arg0: LocalDateTime, arg1: ZoneOffset) -> OffsetDateTime: ...

  @staticmethod
  @overload
  def of(arg0: LocalDate, arg1: LocalTime, arg2: ZoneOffset) -> OffsetDateTime: ...

  @staticmethod
  @overload
  def of(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: ZoneOffset) -> OffsetDateTime: ...

  @staticmethod
  def ofInstant(arg0: Instant, arg1: ZoneId) -> OffsetDateTime: ...

  @staticmethod
  @overload
  def parse(arg0: CharSequence) -> OffsetDateTime: ...

  @staticmethod
  @overload
  def parse(arg0: CharSequence, arg1: DateTimeFormatter) -> OffsetDateTime: ...

  @staticmethod
  def timeLineOrder() -> Comparator[OffsetDateTime]: ...


class OffsetTime:

  MAX: OffsetTime

  MIN: OffsetTime

  @overload
  def adjustInto(self, arg0: Temporal) -> Temporal: ...

  @overload
  def adjustInto(self, arg0: Temporal) -> Temporal: ...

  def atDate(self, arg0: LocalDate) -> OffsetDateTime: ...

  @overload
  def compareTo(self, arg0: object) -> int: ...

  @overload
  def compareTo(self, arg0: object) -> int: ...

  @overload
  def compareTo(self, arg0: OffsetTime) -> int: ...

  def equals(self, arg0: object) -> bool: ...

  def format(self, arg0: DateTimeFormatter) -> str: ...

  def get(self, arg0: TemporalField) -> int: ...

  def getHour(self) -> int: ...

  def getLong(self, arg0: TemporalField) -> int: ...

  def getMinute(self) -> int: ...

  def getNano(self) -> int: ...

  def getOffset(self) -> ZoneOffset: ...

  def getSecond(self) -> int: ...

  def hashCode(self) -> int: ...

  def isAfter(self, arg0: OffsetTime) -> bool: ...

  def isBefore(self, arg0: OffsetTime) -> bool: ...

  def isEqual(self, arg0: OffsetTime) -> bool: ...

  @overload
  def isSupported(self, arg0: TemporalField) -> bool: ...

  @overload
  def isSupported(self, arg0: TemporalUnit) -> bool: ...

  @overload
  def isSupported(self, arg0: TemporalUnit) -> bool: ...

  @overload
  def minus(self, arg0: TemporalAmount) -> Temporal: ...

  @overload
  def minus(self, arg0: TemporalAmount) -> OffsetTime: ...

  @overload
  def minus(self, arg0: TemporalAmount) -> Temporal: ...

  @overload
  def minus(self, arg0: int, arg1: TemporalUnit) -> OffsetTime: ...

  @overload
  def minus(self, arg0: int, arg1: TemporalUnit) -> Temporal: ...

  @overload
  def minus(self, arg0: int, arg1: TemporalUnit) -> Temporal: ...

  def minusHours(self, arg0: int) -> OffsetTime: ...

  def minusMinutes(self, arg0: int) -> OffsetTime: ...

  def minusNanos(self, arg0: int) -> OffsetTime: ...

  def minusSeconds(self, arg0: int) -> OffsetTime: ...

  @overload
  def plus(self, arg0: TemporalAmount) -> Temporal: ...

  @overload
  def plus(self, arg0: TemporalAmount) -> OffsetTime: ...

  @overload
  def plus(self, arg0: TemporalAmount) -> Temporal: ...

  @overload
  def plus(self, arg0: int, arg1: TemporalUnit) -> Temporal: ...

  @overload
  def plus(self, arg0: int, arg1: TemporalUnit) -> OffsetTime: ...

  @overload
  def plus(self, arg0: int, arg1: TemporalUnit) -> Temporal: ...

  def plusHours(self, arg0: int) -> OffsetTime: ...

  def plusMinutes(self, arg0: int) -> OffsetTime: ...

  def plusNanos(self, arg0: int) -> OffsetTime: ...

  def plusSeconds(self, arg0: int) -> OffsetTime: ...

  def query(self, arg0: TemporalQuery[R]) -> object: ...

  def range(self, arg0: TemporalField) -> ValueRange: ...

  def toEpochSecond(self, arg0: LocalDate) -> int: ...

  def toLocalTime(self) -> LocalTime: ...

  def toString(self) -> str: ...

  def truncatedTo(self, arg0: TemporalUnit) -> OffsetTime: ...

  @overload
  def until(self, arg0: Temporal, arg1: TemporalUnit) -> int: ...

  @overload
  def until(self, arg0: Temporal, arg1: TemporalUnit) -> int: ...

  def withHour(self, arg0: int) -> OffsetTime: ...

  def withMinute(self, arg0: int) -> OffsetTime: ...

  def withNano(self, arg0: int) -> OffsetTime: ...

  def withOffsetSameInstant(self, arg0: ZoneOffset) -> OffsetTime: ...

  def withOffsetSameLocal(self, arg0: ZoneOffset) -> OffsetTime: ...

  def withSecond(self, arg0: int) -> OffsetTime: ...

  @staticmethod
  @overload
  def now() -> OffsetTime: ...

  @staticmethod
  @overload
  def now(arg0: Clock) -> OffsetTime: ...

  @staticmethod
  @overload
  def now(arg0: ZoneId) -> OffsetTime: ...

  @staticmethod
  @overload
  def of(arg0: LocalTime, arg1: ZoneOffset) -> OffsetTime: ...

  @staticmethod
  @overload
  def of(arg0: int, arg1: int, arg2: int, arg3: int, arg4: ZoneOffset) -> OffsetTime: ...

  @staticmethod
  def ofInstant(arg0: Instant, arg1: ZoneId) -> OffsetTime: ...

  @staticmethod
  @overload
  def parse(arg0: CharSequence) -> OffsetTime: ...

  @staticmethod
  @overload
  def parse(arg0: CharSequence, arg1: DateTimeFormatter) -> OffsetTime: ...


class Period:

  ZERO: Period

  @overload
  def addTo(self, arg0: Temporal) -> Temporal: ...

  @overload
  def addTo(self, arg0: Temporal) -> Temporal: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def get(self, arg0: TemporalUnit) -> int: ...

  @overload
  def get(self, arg0: TemporalUnit) -> int: ...

  @overload
  def getChronology(self) -> Chronology: ...

  @overload
  def getChronology(self) -> IsoChronology: ...

  @overload
  def getChronology(self) -> Chronology: ...

  def getDays(self) -> int: ...

  def getMonths(self) -> int: ...

  @overload
  def getUnits(self) -> List[TemporalUnit]: ...

  @overload
  def getUnits(self) -> List[TemporalUnit]: ...

  def getYears(self) -> int: ...

  @overload
  def hashCode(self) -> int: ...

  @overload
  def hashCode(self) -> int: ...

  @overload
  def isNegative(self) -> bool: ...

  @overload
  def isNegative(self) -> bool: ...

  @overload
  def isZero(self) -> bool: ...

  @overload
  def isZero(self) -> bool: ...

  @overload
  def minus(self, arg0: TemporalAmount) -> Period: ...

  @overload
  def minus(self, arg0: TemporalAmount) -> ChronoPeriod: ...

  @overload
  def minus(self, arg0: TemporalAmount) -> ChronoPeriod: ...

  def minusDays(self, arg0: int) -> Period: ...

  def minusMonths(self, arg0: int) -> Period: ...

  def minusYears(self, arg0: int) -> Period: ...

  @overload
  def multipliedBy(self, arg0: int) -> ChronoPeriod: ...

  @overload
  def multipliedBy(self, arg0: int) -> Period: ...

  @overload
  def multipliedBy(self, arg0: int) -> ChronoPeriod: ...

  @overload
  def negated(self) -> Period: ...

  @overload
  def negated(self) -> ChronoPeriod: ...

  @overload
  def negated(self) -> ChronoPeriod: ...

  @overload
  def normalized(self) -> Period: ...

  @overload
  def normalized(self) -> ChronoPeriod: ...

  @overload
  def normalized(self) -> ChronoPeriod: ...

  @overload
  def plus(self, arg0: TemporalAmount) -> ChronoPeriod: ...

  @overload
  def plus(self, arg0: TemporalAmount) -> Period: ...

  @overload
  def plus(self, arg0: TemporalAmount) -> ChronoPeriod: ...

  def plusDays(self, arg0: int) -> Period: ...

  def plusMonths(self, arg0: int) -> Period: ...

  def plusYears(self, arg0: int) -> Period: ...

  @overload
  def subtractFrom(self, arg0: Temporal) -> Temporal: ...

  @overload
  def subtractFrom(self, arg0: Temporal) -> Temporal: ...

  @overload
  def toString(self) -> str: ...

  @overload
  def toString(self) -> str: ...

  def toTotalMonths(self) -> int: ...

  def withDays(self, arg0: int) -> Period: ...

  def withMonths(self, arg0: int) -> Period: ...

  def withYears(self, arg0: int) -> Period: ...

  @staticmethod
  @overload
  def between(arg0: LocalDate, arg1: LocalDate) -> Period: ...

  @staticmethod
  @overload
  def between(arg0: ChronoLocalDate, arg1: ChronoLocalDate) -> ChronoPeriod: ...

  @staticmethod
  def of(arg0: int, arg1: int, arg2: int) -> Period: ...

  @staticmethod
  def ofDays(arg0: int) -> Period: ...

  @staticmethod
  def ofMonths(arg0: int) -> Period: ...

  @staticmethod
  def ofWeeks(arg0: int) -> Period: ...

  @staticmethod
  def ofYears(arg0: int) -> Period: ...

  @staticmethod
  def parse(arg0: CharSequence) -> Period: ...


class ZoneId:

  SHORT_IDS: Map[str, str]

  def equals(self, arg0: object) -> bool: ...

  def getDisplayName(self, arg0: TextStyle, arg1: Locale) -> str: ...

  def getId(self) -> str: ...

  def getRules(self) -> ZoneRules: ...

  def hashCode(self) -> int: ...

  def normalized(self) -> ZoneId: ...

  def toString(self) -> str: ...

  @staticmethod
  def getAvailableZoneIds() -> Set[str]: ...

  @staticmethod
  @overload
  def of(arg0: str) -> ZoneId: ...

  @staticmethod
  @overload
  def of(arg0: str, arg1: Map[str, str]) -> ZoneId: ...

  @staticmethod
  def ofOffset(arg0: str, arg1: ZoneOffset) -> ZoneId: ...

  @staticmethod
  def systemDefault() -> ZoneId: ...


class ZoneOffset(ZoneId):

  MAX: ZoneOffset

  MIN: ZoneOffset

  UTC: ZoneOffset

  @overload
  def adjustInto(self, arg0: Temporal) -> Temporal: ...

  @overload
  def adjustInto(self, arg0: Temporal) -> Temporal: ...

  @overload
  def compareTo(self, arg0: object) -> int: ...

  @overload
  def compareTo(self, arg0: object) -> int: ...

  @overload
  def compareTo(self, arg0: ZoneOffset) -> int: ...

  def equals(self, arg0: object) -> bool: ...

  @overload
  def get(self, arg0: TemporalField) -> int: ...

  @overload
  def get(self, arg0: TemporalField) -> int: ...

  def getId(self) -> str: ...

  @overload
  def getLong(self, arg0: TemporalField) -> int: ...

  @overload
  def getLong(self, arg0: TemporalField) -> int: ...

  def getRules(self) -> ZoneRules: ...

  def getTotalSeconds(self) -> int: ...

  def hashCode(self) -> int: ...

  @overload
  def isSupported(self, arg0: TemporalField) -> bool: ...

  @overload
  def isSupported(self, arg0: TemporalField) -> bool: ...

  @overload
  def query(self, arg0: TemporalQuery[R]) -> object: ...

  @overload
  def query(self, arg0: TemporalQuery[R]) -> object: ...

  @overload
  def range(self, arg0: TemporalField) -> ValueRange: ...

  @overload
  def range(self, arg0: TemporalField) -> ValueRange: ...

  def toString(self) -> str: ...

  @staticmethod
  def of(arg0: str) -> ZoneOffset: ...

  @staticmethod
  def ofHours(arg0: int) -> ZoneOffset: ...

  @staticmethod
  def ofHoursMinutes(arg0: int, arg1: int) -> ZoneOffset: ...

  @staticmethod
  def ofHoursMinutesSeconds(arg0: int, arg1: int, arg2: int) -> ZoneOffset: ...

  @staticmethod
  def ofTotalSeconds(arg0: int) -> ZoneOffset: ...


class ZonedDateTime:

  @overload
  def compareTo(self, arg0: object) -> int: ...

  @overload
  def compareTo(self, arg0: ChronoZonedDateTime[Any]) -> int: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def format(self, arg0: DateTimeFormatter) -> str: ...

  @overload
  def format(self, arg0: DateTimeFormatter) -> str: ...

  @overload
  def get(self, arg0: TemporalField) -> int: ...

  @overload
  def get(self, arg0: TemporalField) -> int: ...

  def getChronology(self) -> Chronology: ...

  def getDayOfMonth(self) -> int: ...

  def getDayOfWeek(self) -> DayOfWeek: ...

  def getDayOfYear(self) -> int: ...

  def getHour(self) -> int: ...

  @overload
  def getLong(self, arg0: TemporalField) -> int: ...

  @overload
  def getLong(self, arg0: TemporalField) -> int: ...

  def getMinute(self) -> int: ...

  def getMonth(self) -> Month: ...

  def getMonthValue(self) -> int: ...

  def getNano(self) -> int: ...

  @overload
  def getOffset(self) -> ZoneOffset: ...

  @overload
  def getOffset(self) -> ZoneOffset: ...

  def getSecond(self) -> int: ...

  def getYear(self) -> int: ...

  @overload
  def getZone(self) -> ZoneId: ...

  @overload
  def getZone(self) -> ZoneId: ...

  @overload
  def hashCode(self) -> int: ...

  @overload
  def hashCode(self) -> int: ...

  def isAfter(self, arg0: ChronoZonedDateTime[Any]) -> bool: ...

  def isBefore(self, arg0: ChronoZonedDateTime[Any]) -> bool: ...

  def isEqual(self, arg0: ChronoZonedDateTime[Any]) -> bool: ...

  @overload
  def isSupported(self, arg0: TemporalField) -> bool: ...

  @overload
  def isSupported(self, arg0: TemporalField) -> bool: ...

  @overload
  def isSupported(self, arg0: TemporalUnit) -> bool: ...

  @overload
  def isSupported(self, arg0: TemporalUnit) -> bool: ...

  @overload
  def isSupported(self, arg0: TemporalUnit) -> bool: ...

  @overload
  def minus(self, arg0: TemporalAmount) -> ZonedDateTime: ...

  @overload
  def minus(self, arg0: TemporalAmount) -> ChronoZonedDateTime: ...

  @overload
  def minus(self, arg0: TemporalAmount) -> Temporal: ...

  @overload
  def minus(self, arg0: TemporalAmount) -> Temporal: ...

  @overload
  def minus(self, arg0: TemporalAmount) -> Temporal: ...

  @overload
  def minus(self, arg0: TemporalAmount) -> ChronoZonedDateTime[D]: ...

  @overload
  def minus(self, arg0: int, arg1: TemporalUnit) -> Temporal: ...

  @overload
  def minus(self, arg0: int, arg1: TemporalUnit) -> ZonedDateTime: ...

  @overload
  def minus(self, arg0: int, arg1: TemporalUnit) -> ChronoZonedDateTime: ...

  @overload
  def minus(self, arg0: int, arg1: TemporalUnit) -> Temporal: ...

  @overload
  def minus(self, arg0: int, arg1: TemporalUnit) -> ChronoZonedDateTime[D]: ...

  @overload
  def minus(self, arg0: int, arg1: TemporalUnit) -> Temporal: ...

  def minusDays(self, arg0: int) -> ZonedDateTime: ...

  def minusHours(self, arg0: int) -> ZonedDateTime: ...

  def minusMinutes(self, arg0: int) -> ZonedDateTime: ...

  def minusMonths(self, arg0: int) -> ZonedDateTime: ...

  def minusNanos(self, arg0: int) -> ZonedDateTime: ...

  def minusSeconds(self, arg0: int) -> ZonedDateTime: ...

  def minusWeeks(self, arg0: int) -> ZonedDateTime: ...

  def minusYears(self, arg0: int) -> ZonedDateTime: ...

  @overload
  def plus(self, arg0: TemporalAmount) -> ZonedDateTime: ...

  @overload
  def plus(self, arg0: TemporalAmount) -> Temporal: ...

  @overload
  def plus(self, arg0: TemporalAmount) -> ChronoZonedDateTime: ...

  @overload
  def plus(self, arg0: TemporalAmount) -> Temporal: ...

  @overload
  def plus(self, arg0: TemporalAmount) -> Temporal: ...

  @overload
  def plus(self, arg0: TemporalAmount) -> ChronoZonedDateTime[D]: ...

  @overload
  def plus(self, arg0: int, arg1: TemporalUnit) -> Temporal: ...

  @overload
  def plus(self, arg0: int, arg1: TemporalUnit) -> ZonedDateTime: ...

  @overload
  def plus(self, arg0: int, arg1: TemporalUnit) -> ChronoZonedDateTime: ...

  @overload
  def plus(self, arg0: int, arg1: TemporalUnit) -> Temporal: ...

  @overload
  def plus(self, arg0: int, arg1: TemporalUnit) -> Temporal: ...

  @overload
  def plus(self, arg0: int, arg1: TemporalUnit) -> ChronoZonedDateTime[D]: ...

  def plusDays(self, arg0: int) -> ZonedDateTime: ...

  def plusHours(self, arg0: int) -> ZonedDateTime: ...

  def plusMinutes(self, arg0: int) -> ZonedDateTime: ...

  def plusMonths(self, arg0: int) -> ZonedDateTime: ...

  def plusNanos(self, arg0: int) -> ZonedDateTime: ...

  def plusSeconds(self, arg0: int) -> ZonedDateTime: ...

  def plusWeeks(self, arg0: int) -> ZonedDateTime: ...

  def plusYears(self, arg0: int) -> ZonedDateTime: ...

  @overload
  def query(self, arg0: TemporalQuery[R]) -> object: ...

  @overload
  def query(self, arg0: TemporalQuery[R]) -> object: ...

  @overload
  def range(self, arg0: TemporalField) -> ValueRange: ...

  @overload
  def range(self, arg0: TemporalField) -> ValueRange: ...

  def toEpochSecond(self) -> int: ...

  def toInstant(self) -> Instant: ...

  @overload
  def toLocalDate(self) -> LocalDate: ...

  @overload
  def toLocalDate(self) -> ChronoLocalDate: ...

  @overload
  def toLocalDate(self) -> D: ...

  @overload
  def toLocalDateTime(self) -> LocalDateTime: ...

  @overload
  def toLocalDateTime(self) -> ChronoLocalDateTime: ...

  @overload
  def toLocalDateTime(self) -> ChronoLocalDateTime[D]: ...

  @overload
  def toLocalTime(self) -> LocalTime: ...

  @overload
  def toLocalTime(self) -> LocalTime: ...

  def toOffsetDateTime(self) -> OffsetDateTime: ...

  @overload
  def toString(self) -> str: ...

  @overload
  def toString(self) -> str: ...

  def truncatedTo(self, arg0: TemporalUnit) -> ZonedDateTime: ...

  @overload
  def until(self, arg0: Temporal, arg1: TemporalUnit) -> int: ...

  @overload
  def until(self, arg0: Temporal, arg1: TemporalUnit) -> int: ...

  def withDayOfMonth(self, arg0: int) -> ZonedDateTime: ...

  def withDayOfYear(self, arg0: int) -> ZonedDateTime: ...

  @overload
  def withEarlierOffsetAtOverlap(self) -> ChronoZonedDateTime: ...

  @overload
  def withEarlierOffsetAtOverlap(self) -> ZonedDateTime: ...

  @overload
  def withEarlierOffsetAtOverlap(self) -> ChronoZonedDateTime[D]: ...

  def withFixedOffsetZone(self) -> ZonedDateTime: ...

  def withHour(self, arg0: int) -> ZonedDateTime: ...

  @overload
  def withLaterOffsetAtOverlap(self) -> ChronoZonedDateTime: ...

  @overload
  def withLaterOffsetAtOverlap(self) -> ZonedDateTime: ...

  @overload
  def withLaterOffsetAtOverlap(self) -> ChronoZonedDateTime[D]: ...

  def withMinute(self, arg0: int) -> ZonedDateTime: ...

  def withMonth(self, arg0: int) -> ZonedDateTime: ...

  def withNano(self, arg0: int) -> ZonedDateTime: ...

  def withSecond(self, arg0: int) -> ZonedDateTime: ...

  def withYear(self, arg0: int) -> ZonedDateTime: ...

  @overload
  def withZoneSameInstant(self, arg0: ZoneId) -> ChronoZonedDateTime: ...

  @overload
  def withZoneSameInstant(self, arg0: ZoneId) -> ZonedDateTime: ...

  @overload
  def withZoneSameInstant(self, arg0: ZoneId) -> ChronoZonedDateTime[D]: ...

  @overload
  def withZoneSameLocal(self, arg0: ZoneId) -> ChronoZonedDateTime: ...

  @overload
  def withZoneSameLocal(self, arg0: ZoneId) -> ZonedDateTime: ...

  @overload
  def withZoneSameLocal(self, arg0: ZoneId) -> ChronoZonedDateTime[D]: ...

  @staticmethod
  @overload
  def now() -> ZonedDateTime: ...

  @staticmethod
  @overload
  def now(arg0: Clock) -> ZonedDateTime: ...

  @staticmethod
  @overload
  def now(arg0: ZoneId) -> ZonedDateTime: ...

  @staticmethod
  @overload
  def of(arg0: LocalDateTime, arg1: ZoneId) -> ZonedDateTime: ...

  @staticmethod
  @overload
  def of(arg0: LocalDate, arg1: LocalTime, arg2: ZoneId) -> ZonedDateTime: ...

  @staticmethod
  @overload
  def of(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: ZoneId) -> ZonedDateTime: ...

  @staticmethod
  @overload
  def ofInstant(arg0: Instant, arg1: ZoneId) -> ZonedDateTime: ...

  @staticmethod
  @overload
  def ofInstant(arg0: LocalDateTime, arg1: ZoneOffset, arg2: ZoneId) -> ZonedDateTime: ...

  @staticmethod
  def ofLocal(arg0: LocalDateTime, arg1: ZoneId, arg2: ZoneOffset) -> ZonedDateTime: ...

  @staticmethod
  def ofStrict(arg0: LocalDateTime, arg1: ZoneOffset, arg2: ZoneId) -> ZonedDateTime: ...

  @staticmethod
  @overload
  def parse(arg0: CharSequence) -> ZonedDateTime: ...

  @staticmethod
  @overload
  def parse(arg0: CharSequence, arg1: DateTimeFormatter) -> ZonedDateTime: ...

  @staticmethod
  def timeLineOrder() -> Comparator[ChronoZonedDateTime[Any]]: ...

