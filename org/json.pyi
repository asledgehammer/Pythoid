from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.io import Writer, InputStream, Reader
from java.lang import RuntimeException, Throwable, Number
from java.util import Collection, Map, Set, Iterator, Locale

class JSONArray:

  def get(self, arg0: int) -> object: ...

  def getBoolean(self, arg0: int) -> bool: ...

  def getDouble(self, arg0: int) -> float: ...

  def getInt(self, arg0: int) -> int: ...

  def getJSONArray(self, arg0: int) -> JSONArray: ...

  def getJSONObject(self, arg0: int) -> JSONObject: ...

  def getLong(self, arg0: int) -> int: ...

  def getString(self, arg0: int) -> str: ...

  def isNull(self, arg0: int) -> bool: ...

  def join(self, arg0: str) -> str: ...

  def length(self) -> int: ...

  def opt(self, arg0: int) -> object: ...

  @overload
  def optBoolean(self, arg0: int) -> bool: ...

  @overload
  def optBoolean(self, arg0: int, arg1: bool) -> bool: ...

  @overload
  def optDouble(self, arg0: int) -> float: ...

  @overload
  def optDouble(self, arg0: int, arg1: float) -> float: ...

  @overload
  def optInt(self, arg0: int) -> int: ...

  @overload
  def optInt(self, arg0: int, arg1: int) -> int: ...

  def optJSONArray(self, arg0: int) -> JSONArray: ...

  def optJSONObject(self, arg0: int) -> JSONObject: ...

  @overload
  def optLong(self, arg0: int) -> int: ...

  @overload
  def optLong(self, arg0: int, arg1: int) -> int: ...

  @overload
  def optString(self, arg0: int) -> str: ...

  @overload
  def optString(self, arg0: int, arg1: str) -> str: ...

  @overload
  def put(self, arg0: bool) -> JSONArray: ...

  @overload
  def put(self, arg0: float) -> JSONArray: ...

  @overload
  def put(self, arg0: int) -> JSONArray: ...

  @overload
  def put(self, arg0: object) -> JSONArray: ...

  @overload
  def put(self, arg0: Collection) -> JSONArray: ...

  @overload
  def put(self, arg0: Map) -> JSONArray: ...

  @overload
  def put(self, arg0: int) -> JSONArray: ...

  @overload
  def put(self, arg0: int, arg1: bool) -> JSONArray: ...

  @overload
  def put(self, arg0: int, arg1: float) -> JSONArray: ...

  @overload
  def put(self, arg0: int, arg1: int) -> JSONArray: ...

  @overload
  def put(self, arg0: int, arg1: object) -> JSONArray: ...

  @overload
  def put(self, arg0: int, arg1: Collection) -> JSONArray: ...

  @overload
  def put(self, arg0: int, arg1: Map) -> JSONArray: ...

  @overload
  def put(self, arg0: int, arg1: int) -> JSONArray: ...

  def remove(self, arg0: int) -> object: ...

  def toJSONObject(self, arg0: JSONArray) -> JSONObject: ...

  @overload
  def toString(self) -> str: ...

  @overload
  def toString(self, arg0: int) -> str: ...

  def write(self, arg0: Writer) -> Writer: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: object): ...
  @overload
  def __init__(self, arg0: str): ...
  @overload
  def __init__(self, arg0: Collection): ...
  @overload
  def __init__(self, arg0: JSONTokener): ...


class JSONException(RuntimeException):

  def getCause(self) -> Throwable: ...

  @overload
  def __init__(self, arg0: str): ...
  @overload
  def __init__(self, arg0: Throwable): ...


class JSONObject:

  NULL: object

  def accumulate(self, arg0: str, arg1: object) -> JSONObject: ...

  def append(self, arg0: str, arg1: object) -> JSONObject: ...

  def get(self, arg0: str) -> object: ...

  def getBoolean(self, arg0: str) -> bool: ...

  def getDouble(self, arg0: str) -> float: ...

  def getInt(self, arg0: str) -> int: ...

  def getJSONArray(self, arg0: str) -> JSONArray: ...

  def getJSONObject(self, arg0: str) -> JSONObject: ...

  def getLong(self, arg0: str) -> int: ...

  def getString(self, arg0: str) -> str: ...

  def has(self, arg0: str) -> bool: ...

  def increment(self, arg0: str) -> JSONObject: ...

  def isNull(self, arg0: str) -> bool: ...

  def keySet(self) -> Set: ...

  def keys(self) -> Iterator: ...

  def length(self) -> int: ...

  def names(self) -> JSONArray: ...

  def opt(self, arg0: str) -> object: ...

  @overload
  def optBoolean(self, arg0: str) -> bool: ...

  @overload
  def optBoolean(self, arg0: str, arg1: bool) -> bool: ...

  @overload
  def optDouble(self, arg0: str) -> float: ...

  @overload
  def optDouble(self, arg0: str, arg1: float) -> float: ...

  @overload
  def optInt(self, arg0: str) -> int: ...

  @overload
  def optInt(self, arg0: str, arg1: int) -> int: ...

  def optJSONArray(self, arg0: str) -> JSONArray: ...

  def optJSONObject(self, arg0: str) -> JSONObject: ...

  @overload
  def optLong(self, arg0: str) -> int: ...

  @overload
  def optLong(self, arg0: str, arg1: int) -> int: ...

  @overload
  def optString(self, arg0: str) -> str: ...

  @overload
  def optString(self, arg0: str, arg1: str) -> str: ...

  @overload
  def put(self, arg0: str, arg1: bool) -> JSONObject: ...

  @overload
  def put(self, arg0: str, arg1: float) -> JSONObject: ...

  @overload
  def put(self, arg0: str, arg1: int) -> JSONObject: ...

  @overload
  def put(self, arg0: str, arg1: object) -> JSONObject: ...

  @overload
  def put(self, arg0: str, arg1: Collection) -> JSONObject: ...

  @overload
  def put(self, arg0: str, arg1: Map) -> JSONObject: ...

  @overload
  def put(self, arg0: str, arg1: int) -> JSONObject: ...

  def putOnce(self, arg0: str, arg1: object) -> JSONObject: ...

  def putOpt(self, arg0: str, arg1: object) -> JSONObject: ...

  def remove(self, arg0: str) -> object: ...

  def toJSONArray(self, arg0: JSONArray) -> JSONArray: ...

  @overload
  def toString(self) -> str: ...

  @overload
  def toString(self, arg0: int) -> str: ...

  def write(self, arg0: Writer) -> Writer: ...

  @staticmethod
  def doubleToString(arg0: float) -> str: ...

  @staticmethod
  @overload
  def getNames(arg0: object) -> list[str]: ...

  @staticmethod
  @overload
  def getNames(arg0: JSONObject) -> list[str]: ...

  @staticmethod
  def numberToString(arg0: Number) -> str: ...

  @staticmethod
  @overload
  def quote(arg0: str) -> str: ...

  @staticmethod
  @overload
  def quote(arg0: str, arg1: Writer) -> Writer: ...

  @staticmethod
  def stringToValue(arg0: str) -> object: ...

  @staticmethod
  def testValidity(arg0: object) -> None: ...

  @staticmethod
  def valueToString(arg0: object) -> str: ...

  @staticmethod
  def wrap(arg0: object) -> object: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: object): ...
  @overload
  def __init__(self, arg0: str): ...
  @overload
  def __init__(self, arg0: Map): ...
  @overload
  def __init__(self, arg0: JSONTokener): ...
  @overload
  def __init__(self, arg0: object, arg1: list[str]): ...
  @overload
  def __init__(self, arg0: str, arg1: Locale): ...
  @overload
  def __init__(self, arg0: JSONObject, arg1: list[str]): ...

  class Null:

    def equals(self, arg0: object) -> bool: ...

    def toString(self) -> str: ...


class JSONTokener:

  def back(self) -> None: ...

  def end(self) -> bool: ...

  def more(self) -> bool: ...

  @overload
  def next(self) -> str: ...

  @overload
  def next(self, arg0: str) -> str: ...

  @overload
  def next(self, arg0: int) -> str: ...

  def nextClean(self) -> str: ...

  def nextString(self, arg0: str) -> str: ...

  @overload
  def nextTo(self, arg0: str) -> str: ...

  @overload
  def nextTo(self, arg0: str) -> str: ...

  def nextValue(self) -> object: ...

  def skipTo(self, arg0: str) -> str: ...

  def syntaxError(self, arg0: str) -> JSONException: ...

  def toString(self) -> str: ...

  @staticmethod
  def dehexchar(arg0: str) -> int: ...

  @overload
  def __init__(self, arg0: InputStream): ...
  @overload
  def __init__(self, arg0: Reader): ...
  @overload
  def __init__(self, arg0: str): ...

