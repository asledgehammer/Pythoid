from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.lang import Throwable
from java.util import Iterator

class Logger:

  ROOT_LOGGER_NAME: str

  @overload
  def debug(self, arg0: str) -> None: ...

  @overload
  def debug(self, arg0: str, arg1: list[object]) -> None: ...

  @overload
  def debug(self, arg0: str, arg1: object) -> None: ...

  @overload
  def debug(self, arg0: str, arg1: Throwable) -> None: ...

  @overload
  def debug(self, arg0: Marker, arg1: str) -> None: ...

  @overload
  def debug(self, arg0: str, arg1: object, arg2: object) -> None: ...

  @overload
  def debug(self, arg0: Marker, arg1: str, arg2: list[object]) -> None: ...

  @overload
  def debug(self, arg0: Marker, arg1: str, arg2: object) -> None: ...

  @overload
  def debug(self, arg0: Marker, arg1: str, arg2: Throwable) -> None: ...

  @overload
  def debug(self, arg0: Marker, arg1: str, arg2: object, arg3: object) -> None: ...

  @overload
  def error(self, arg0: str) -> None: ...

  @overload
  def error(self, arg0: str, arg1: list[object]) -> None: ...

  @overload
  def error(self, arg0: str, arg1: object) -> None: ...

  @overload
  def error(self, arg0: str, arg1: Throwable) -> None: ...

  @overload
  def error(self, arg0: Marker, arg1: str) -> None: ...

  @overload
  def error(self, arg0: str, arg1: object, arg2: object) -> None: ...

  @overload
  def error(self, arg0: Marker, arg1: str, arg2: list[object]) -> None: ...

  @overload
  def error(self, arg0: Marker, arg1: str, arg2: object) -> None: ...

  @overload
  def error(self, arg0: Marker, arg1: str, arg2: Throwable) -> None: ...

  @overload
  def error(self, arg0: Marker, arg1: str, arg2: object, arg3: object) -> None: ...

  def getName(self) -> str: ...

  @overload
  def info(self, arg0: str) -> None: ...

  @overload
  def info(self, arg0: str, arg1: list[object]) -> None: ...

  @overload
  def info(self, arg0: str, arg1: object) -> None: ...

  @overload
  def info(self, arg0: str, arg1: Throwable) -> None: ...

  @overload
  def info(self, arg0: Marker, arg1: str) -> None: ...

  @overload
  def info(self, arg0: str, arg1: object, arg2: object) -> None: ...

  @overload
  def info(self, arg0: Marker, arg1: str, arg2: list[object]) -> None: ...

  @overload
  def info(self, arg0: Marker, arg1: str, arg2: object) -> None: ...

  @overload
  def info(self, arg0: Marker, arg1: str, arg2: Throwable) -> None: ...

  @overload
  def info(self, arg0: Marker, arg1: str, arg2: object, arg3: object) -> None: ...

  @overload
  def isDebugEnabled(self) -> bool: ...

  @overload
  def isDebugEnabled(self, arg0: Marker) -> bool: ...

  @overload
  def isErrorEnabled(self) -> bool: ...

  @overload
  def isErrorEnabled(self, arg0: Marker) -> bool: ...

  @overload
  def isInfoEnabled(self) -> bool: ...

  @overload
  def isInfoEnabled(self, arg0: Marker) -> bool: ...

  @overload
  def isTraceEnabled(self) -> bool: ...

  @overload
  def isTraceEnabled(self, arg0: Marker) -> bool: ...

  @overload
  def isWarnEnabled(self) -> bool: ...

  @overload
  def isWarnEnabled(self, arg0: Marker) -> bool: ...

  @overload
  def trace(self, arg0: str) -> None: ...

  @overload
  def trace(self, arg0: str, arg1: list[object]) -> None: ...

  @overload
  def trace(self, arg0: str, arg1: object) -> None: ...

  @overload
  def trace(self, arg0: str, arg1: Throwable) -> None: ...

  @overload
  def trace(self, arg0: Marker, arg1: str) -> None: ...

  @overload
  def trace(self, arg0: str, arg1: object, arg2: object) -> None: ...

  @overload
  def trace(self, arg0: Marker, arg1: str, arg2: list[object]) -> None: ...

  @overload
  def trace(self, arg0: Marker, arg1: str, arg2: object) -> None: ...

  @overload
  def trace(self, arg0: Marker, arg1: str, arg2: Throwable) -> None: ...

  @overload
  def trace(self, arg0: Marker, arg1: str, arg2: object, arg3: object) -> None: ...

  @overload
  def warn(self, arg0: str) -> None: ...

  @overload
  def warn(self, arg0: str, arg1: list[object]) -> None: ...

  @overload
  def warn(self, arg0: str, arg1: object) -> None: ...

  @overload
  def warn(self, arg0: str, arg1: Throwable) -> None: ...

  @overload
  def warn(self, arg0: Marker, arg1: str) -> None: ...

  @overload
  def warn(self, arg0: str, arg1: object, arg2: object) -> None: ...

  @overload
  def warn(self, arg0: Marker, arg1: str, arg2: list[object]) -> None: ...

  @overload
  def warn(self, arg0: Marker, arg1: str, arg2: object) -> None: ...

  @overload
  def warn(self, arg0: Marker, arg1: str, arg2: Throwable) -> None: ...

  @overload
  def warn(self, arg0: Marker, arg1: str, arg2: object, arg3: object) -> None: ...


class Marker:

  ANY_MARKER: str

  ANY_NON_NULL_MARKER: str

  def add(self, arg0: Marker) -> None: ...

  @overload
  def contains(self, arg0: str) -> bool: ...

  @overload
  def contains(self, arg0: Marker) -> bool: ...

  def equals(self, arg0: object) -> bool: ...

  def getName(self) -> str: ...

  def hasChildren(self) -> bool: ...

  def hasReferences(self) -> bool: ...

  def hashCode(self) -> int: ...

  def iterator(self) -> Iterator[Marker]: ...

  def remove(self, arg0: Marker) -> bool: ...

