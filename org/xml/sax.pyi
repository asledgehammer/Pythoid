from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.io import InputStream, Reader
from java.lang import Exception, Throwable

class Attributes:

  @overload
  def getIndex(self, arg0: str) -> int: ...

  @overload
  def getIndex(self, arg0: str, arg1: str) -> int: ...

  def getLength(self) -> int: ...

  def getLocalName(self, arg0: int) -> str: ...

  def getQName(self, arg0: int) -> str: ...

  @overload
  def getType(self, arg0: int) -> str: ...

  @overload
  def getType(self, arg0: str) -> str: ...

  @overload
  def getType(self, arg0: str, arg1: str) -> str: ...

  def getURI(self, arg0: int) -> str: ...

  @overload
  def getValue(self, arg0: int) -> str: ...

  @overload
  def getValue(self, arg0: str) -> str: ...

  @overload
  def getValue(self, arg0: str, arg1: str) -> str: ...


class ContentHandler:

  def characters(self, arg0: list[str], arg1: int, arg2: int) -> None: ...

  def declaration(self, arg0: str, arg1: str, arg2: str) -> None: ...

  def endDocument(self) -> None: ...

  def endElement(self, arg0: str, arg1: str, arg2: str) -> None: ...

  def endPrefixMapping(self, arg0: str) -> None: ...

  def ignorableWhitespace(self, arg0: list[str], arg1: int, arg2: int) -> None: ...

  def processingInstruction(self, arg0: str, arg1: str) -> None: ...

  def setDocumentLocator(self, arg0: Locator) -> None: ...

  def skippedEntity(self, arg0: str) -> None: ...

  def startDocument(self) -> None: ...

  def startElement(self, arg0: str, arg1: str, arg2: str, arg3: Attributes) -> None: ...

  def startPrefixMapping(self, arg0: str, arg1: str) -> None: ...


class ErrorHandler:

  def error(self, arg0: SAXParseException) -> None: ...

  def fatalError(self, arg0: SAXParseException) -> None: ...

  def warning(self, arg0: SAXParseException) -> None: ...


class InputSource:

  def getByteStream(self) -> InputStream: ...

  def getCharacterStream(self) -> Reader: ...

  def getEncoding(self) -> str: ...

  def getPublicId(self) -> str: ...

  def getSystemId(self) -> str: ...

  def isEmpty(self) -> bool: ...

  def setByteStream(self, arg0: InputStream) -> None: ...

  def setCharacterStream(self, arg0: Reader) -> None: ...

  def setEncoding(self, arg0: str) -> None: ...

  def setPublicId(self, arg0: str) -> None: ...

  def setSystemId(self, arg0: str) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: InputStream): ...
  @overload
  def __init__(self, arg0: Reader): ...
  @overload
  def __init__(self, arg0: str): ...


class Locator:

  def getColumnNumber(self) -> int: ...

  def getLineNumber(self) -> int: ...

  def getPublicId(self) -> str: ...

  def getSystemId(self) -> str: ...


class SAXException(Exception):

  def getCause(self) -> Throwable: ...

  def getException(self) -> Exception: ...

  def getMessage(self) -> str: ...

  def toString(self) -> str: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: Exception): ...
  @overload
  def __init__(self, arg0: str): ...
  @overload
  def __init__(self, arg0: str, arg1: Exception): ...


class SAXParseException(SAXException):

  def getColumnNumber(self) -> int: ...

  def getLineNumber(self) -> int: ...

  def getPublicId(self) -> str: ...

  def getSystemId(self) -> str: ...

  def toString(self) -> str: ...

  @overload
  def __init__(self, arg0: str, arg1: Locator): ...
  @overload
  def __init__(self, arg0: str, arg1: Locator, arg2: Exception): ...
  @overload
  def __init__(self, arg0: str, arg1: str, arg2: str, arg3: int, arg4: int): ...
  @overload
  def __init__(self, arg0: str, arg1: str, arg2: str, arg3: int, arg4: int, arg5: Exception): ...

