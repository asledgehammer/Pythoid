from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.io import ObjectInput, ObjectOutput
from java.lang import RuntimeException, Throwable
from java.nio import ByteBuffer, DoubleBuffer, FloatBuffer, IntBuffer
from java.text import NumberFormat
from java.util import BitSet, Comparator
from java.util.function import Function, ToDoubleFunction, ToIntFunction, ToLongFunction

U = TypeVar('U', default=Any)
T = TypeVar('T', default=Any)

class AxisAngle4d:

  def equals(self, arg0: object) -> bool: ...

  @overload
  def get(self, arg0: AxisAngle4d) -> AxisAngle4d: ...

  @overload
  def get(self, arg0: AxisAngle4f) -> AxisAngle4f: ...

  @overload
  def get(self, arg0: Matrix3d) -> Matrix3d: ...

  @overload
  def get(self, arg0: Matrix3f) -> Matrix3f: ...

  @overload
  def get(self, arg0: Matrix4d) -> Matrix4d: ...

  @overload
  def get(self, arg0: Matrix4f) -> Matrix4f: ...

  @overload
  def get(self, arg0: Quaterniond) -> Quaterniond: ...

  @overload
  def get(self, arg0: Quaternionf) -> Quaternionf: ...

  def hashCode(self) -> int: ...

  def normalize(self) -> AxisAngle4d: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  def rotate(self, arg0: float) -> AxisAngle4d: ...

  @overload
  def set(self, arg0: AxisAngle4d) -> AxisAngle4d: ...

  @overload
  def set(self, arg0: AxisAngle4f) -> AxisAngle4d: ...

  @overload
  def set(self, arg0: Matrix3dc) -> AxisAngle4d: ...

  @overload
  def set(self, arg0: Matrix3fc) -> AxisAngle4d: ...

  @overload
  def set(self, arg0: Matrix4dc) -> AxisAngle4d: ...

  @overload
  def set(self, arg0: Matrix4fc) -> AxisAngle4d: ...

  @overload
  def set(self, arg0: Matrix4x3fc) -> AxisAngle4d: ...

  @overload
  def set(self, arg0: Quaterniondc) -> AxisAngle4d: ...

  @overload
  def set(self, arg0: Quaternionfc) -> AxisAngle4d: ...

  @overload
  def set(self, arg0: float, arg1: Vector3dc) -> AxisAngle4d: ...

  @overload
  def set(self, arg0: float, arg1: Vector3f) -> AxisAngle4d: ...

  @overload
  def set(self, arg0: float, arg1: float, arg2: float, arg3: float) -> AxisAngle4d: ...

  @overload
  def toString(self) -> str: ...

  @overload
  def toString(self, arg0: NumberFormat) -> str: ...

  @overload
  def transform(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transform(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transform(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transform(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def transform(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def transform(self, arg0: Vector4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def __init__(self):
    self.angle: float

    self.x: float

    self.y: float

    self.z: float

  @overload
  def __init__(self, arg0: AxisAngle4d): ...
  @overload
  def __init__(self, arg0: AxisAngle4f): ...
  @overload
  def __init__(self, arg0: Quaterniondc): ...
  @overload
  def __init__(self, arg0: Quaternionfc): ...
  @overload
  def __init__(self, arg0: float, arg1: Vector3dc): ...
  @overload
  def __init__(self, arg0: float, arg1: Vector3f): ...
  @overload
  def __init__(self, arg0: float, arg1: float, arg2: float, arg3: float): ...


class AxisAngle4f:

  def equals(self, arg0: object) -> bool: ...

  @overload
  def get(self, arg0: AxisAngle4d) -> AxisAngle4d: ...

  @overload
  def get(self, arg0: AxisAngle4f) -> AxisAngle4f: ...

  @overload
  def get(self, arg0: Matrix3d) -> Matrix3d: ...

  @overload
  def get(self, arg0: Matrix3f) -> Matrix3f: ...

  @overload
  def get(self, arg0: Matrix4d) -> Matrix4d: ...

  @overload
  def get(self, arg0: Matrix4f) -> Matrix4f: ...

  @overload
  def get(self, arg0: Quaterniond) -> Quaterniond: ...

  @overload
  def get(self, arg0: Quaternionf) -> Quaternionf: ...

  def hashCode(self) -> int: ...

  def normalize(self) -> AxisAngle4f: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  def rotate(self, arg0: float) -> AxisAngle4f: ...

  @overload
  def set(self, arg0: AxisAngle4d) -> AxisAngle4f: ...

  @overload
  def set(self, arg0: AxisAngle4f) -> AxisAngle4f: ...

  @overload
  def set(self, arg0: Matrix3dc) -> AxisAngle4f: ...

  @overload
  def set(self, arg0: Matrix3fc) -> AxisAngle4f: ...

  @overload
  def set(self, arg0: Matrix4dc) -> AxisAngle4f: ...

  @overload
  def set(self, arg0: Matrix4fc) -> AxisAngle4f: ...

  @overload
  def set(self, arg0: Matrix4x3fc) -> AxisAngle4f: ...

  @overload
  def set(self, arg0: Quaterniondc) -> AxisAngle4f: ...

  @overload
  def set(self, arg0: Quaternionfc) -> AxisAngle4f: ...

  @overload
  def set(self, arg0: float, arg1: Vector3fc) -> AxisAngle4f: ...

  @overload
  def set(self, arg0: float, arg1: float, arg2: float, arg3: float) -> AxisAngle4f: ...

  @overload
  def toString(self) -> str: ...

  @overload
  def toString(self, arg0: NumberFormat) -> str: ...

  @overload
  def transform(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transform(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transform(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def transform(self, arg0: Vector4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def __init__(self):
    self.angle: float

    self.x: float

    self.y: float

    self.z: float

  @overload
  def __init__(self, arg0: AxisAngle4f): ...
  @overload
  def __init__(self, arg0: Quaternionfc): ...
  @overload
  def __init__(self, arg0: float, arg1: Vector3fc): ...
  @overload
  def __init__(self, arg0: float, arg1: float, arg2: float, arg3: float): ...


class ConfigurationException(RuntimeException):

  def __init__(self, arg0: str, arg1: Throwable): ...


class FrustumIntersection:

  INSIDE: int

  INTERSECT: int

  OUTSIDE: int

  PLANE_MASK_NX: int

  PLANE_MASK_NY: int

  PLANE_MASK_NZ: int

  PLANE_MASK_PX: int

  PLANE_MASK_PY: int

  PLANE_MASK_PZ: int

  PLANE_NX: int

  PLANE_NY: int

  PLANE_NZ: int

  PLANE_PX: int

  PLANE_PY: int

  PLANE_PZ: int

  def distanceToPlane(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: int) -> float: ...

  @overload
  def intersectAab(self, arg0: Vector3fc, arg1: Vector3fc) -> int: ...

  @overload
  def intersectAab(self, arg0: Vector3fc, arg1: Vector3fc, arg2: int) -> int: ...

  @overload
  def intersectAab(self, arg0: Vector3fc, arg1: Vector3fc, arg2: int, arg3: int) -> int: ...

  @overload
  def intersectAab(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> int: ...

  @overload
  def intersectAab(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: int) -> int: ...

  @overload
  def intersectAab(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: int, arg7: int) -> int: ...

  @overload
  def intersectSphere(self, arg0: Vector3fc, arg1: float) -> int: ...

  @overload
  def intersectSphere(self, arg0: float, arg1: float, arg2: float, arg3: float) -> int: ...

  @overload
  def set(self, arg0: Matrix4fc) -> FrustumIntersection: ...

  @overload
  def set(self, arg0: Matrix4fc, arg1: bool) -> FrustumIntersection: ...

  @overload
  def testAab(self, arg0: Vector3fc, arg1: Vector3fc) -> bool: ...

  @overload
  def testAab(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> bool: ...

  @overload
  def testPlaneXY(self, arg0: Vector2fc, arg1: Vector2fc) -> bool: ...

  @overload
  def testPlaneXY(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool: ...

  def testPlaneXZ(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool: ...

  @overload
  def testPoint(self, arg0: Vector3fc) -> bool: ...

  @overload
  def testPoint(self, arg0: float, arg1: float, arg2: float) -> bool: ...

  @overload
  def testSphere(self, arg0: Vector3fc, arg1: float) -> bool: ...

  @overload
  def testSphere(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: Matrix4fc): ...
  @overload
  def __init__(self, arg0: Matrix4fc, arg1: bool): ...


class FrustumRayBuilder:

  def dir(self, arg0: float, arg1: float, arg2: Vector3f) -> Vector3fc: ...

  def origin(self, arg0: Vector3f) -> Vector3fc: ...

  def set(self, arg0: Matrix4fc) -> FrustumRayBuilder: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: Matrix4fc): ...


class GeometryUtils:

  @staticmethod
  def bitangent(arg0: Vector3fc, arg1: Vector2fc, arg2: Vector3fc, arg3: Vector2fc, arg4: Vector3fc, arg5: Vector2fc, arg6: Vector3f) -> None: ...

  @staticmethod
  @overload
  def normal(arg0: Vector3fc, arg1: Vector3fc, arg2: Vector3fc, arg3: Vector3f) -> None: ...

  @staticmethod
  @overload
  def normal(arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: Vector3f) -> None: ...

  @staticmethod
  @overload
  def perpendicular(arg0: Vector3fc, arg1: Vector3f, arg2: Vector3f) -> None: ...

  @staticmethod
  @overload
  def perpendicular(arg0: float, arg1: float, arg2: float, arg3: Vector3f, arg4: Vector3f) -> None: ...

  @staticmethod
  def tangent(arg0: Vector3fc, arg1: Vector2fc, arg2: Vector3fc, arg3: Vector2fc, arg4: Vector3fc, arg5: Vector2fc, arg6: Vector3f) -> None: ...

  @staticmethod
  def tangentBitangent(arg0: Vector3fc, arg1: Vector2fc, arg2: Vector3fc, arg3: Vector2fc, arg4: Vector3fc, arg5: Vector2fc, arg6: Vector3f, arg7: Vector3f) -> None: ...

  def __init__(self): ...


class Interpolationd:

  @staticmethod
  def dFdxLinear(arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float, arg10: float, arg11: float, arg12: Vector2d) -> Vector2d: ...

  @staticmethod
  def dFdyLinear(arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float, arg10: float, arg11: float, arg12: Vector2d) -> Vector2d: ...

  @staticmethod
  @overload
  def interpolateTriangle(arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float, arg10: float) -> float: ...

  @staticmethod
  @overload
  def interpolateTriangle(arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float, arg10: float, arg11: float, arg12: float, arg13: float, arg14: Vector2d) -> Vector2d: ...

  @staticmethod
  @overload
  def interpolateTriangle(arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float, arg10: float, arg11: float, arg12: float, arg13: float, arg14: float, arg15: float, arg16: float, arg17: Vector3d) -> Vector3d: ...

  @staticmethod
  def interpolationFactorsTriangle(arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: Vector3d) -> Vector3d: ...

  def __init__(self): ...


class Interpolationf:

  @staticmethod
  def dFdxLinear(arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float, arg10: float, arg11: float, arg12: Vector2f) -> Vector2f: ...

  @staticmethod
  def dFdyLinear(arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float, arg10: float, arg11: float, arg12: Vector2f) -> Vector2f: ...

  @staticmethod
  @overload
  def interpolateTriangle(arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float, arg10: float) -> float: ...

  @staticmethod
  @overload
  def interpolateTriangle(arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float, arg10: float, arg11: float, arg12: float, arg13: float, arg14: Vector2f) -> Vector2f: ...

  @staticmethod
  @overload
  def interpolateTriangle(arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float, arg10: float, arg11: float, arg12: float, arg13: float, arg14: float, arg15: float, arg16: float, arg17: Vector3f) -> Vector3f: ...

  @staticmethod
  def interpolationFactorsTriangle(arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: Vector3f) -> Vector3f: ...

  def __init__(self): ...


class Math:

  PI: float

  @staticmethod
  @overload
  def abs(arg0: float) -> float: ...

  @staticmethod
  @overload
  def abs(arg0: float) -> float: ...

  @staticmethod
  @overload
  def abs(arg0: int) -> int: ...

  @staticmethod
  @overload
  def acos(arg0: float) -> float: ...

  @staticmethod
  @overload
  def acos(arg0: float) -> float: ...

  @staticmethod
  @overload
  def asin(arg0: float) -> float: ...

  @staticmethod
  @overload
  def asin(arg0: float) -> float: ...

  @staticmethod
  @overload
  def atan2(arg0: float, arg1: float) -> float: ...

  @staticmethod
  @overload
  def atan2(arg0: float, arg1: float) -> float: ...

  @staticmethod
  @overload
  def biLerp(arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> float: ...

  @staticmethod
  @overload
  def biLerp(arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> float: ...

  @staticmethod
  @overload
  def ceil(arg0: float) -> float: ...

  @staticmethod
  @overload
  def ceil(arg0: float) -> float: ...

  @staticmethod
  @overload
  def clamp(arg0: float, arg1: float, arg2: float) -> float: ...

  @staticmethod
  @overload
  def clamp(arg0: float, arg1: float, arg2: float) -> float: ...

  @staticmethod
  @overload
  def clamp(arg0: int, arg1: int, arg2: int) -> int: ...

  @staticmethod
  @overload
  def cos(arg0: float) -> float: ...

  @staticmethod
  @overload
  def cos(arg0: float) -> float: ...

  @staticmethod
  @overload
  def cosFromSin(arg0: float, arg1: float) -> float: ...

  @staticmethod
  @overload
  def cosFromSin(arg0: float, arg1: float) -> float: ...

  @staticmethod
  def exp(arg0: float) -> float: ...

  @staticmethod
  @overload
  def floor(arg0: float) -> float: ...

  @staticmethod
  @overload
  def floor(arg0: float) -> float: ...

  @staticmethod
  @overload
  def fma(arg0: float, arg1: float, arg2: float) -> float: ...

  @staticmethod
  @overload
  def fma(arg0: float, arg1: float, arg2: float) -> float: ...

  @staticmethod
  @overload
  def invsqrt(arg0: float) -> float: ...

  @staticmethod
  @overload
  def invsqrt(arg0: float) -> float: ...

  @staticmethod
  @overload
  def isFinite(arg0: float) -> bool: ...

  @staticmethod
  @overload
  def isFinite(arg0: float) -> bool: ...

  @staticmethod
  @overload
  def lerp(arg0: float, arg1: float, arg2: float) -> float: ...

  @staticmethod
  @overload
  def lerp(arg0: float, arg1: float, arg2: float) -> float: ...

  @staticmethod
  @overload
  def max(arg0: float, arg1: float) -> float: ...

  @staticmethod
  @overload
  def max(arg0: float, arg1: float) -> float: ...

  @staticmethod
  @overload
  def max(arg0: int, arg1: int) -> int: ...

  @staticmethod
  @overload
  def min(arg0: float, arg1: float) -> float: ...

  @staticmethod
  @overload
  def min(arg0: float, arg1: float) -> float: ...

  @staticmethod
  @overload
  def min(arg0: int, arg1: int) -> int: ...

  @staticmethod
  def random() -> float: ...

  @staticmethod
  @overload
  def round(arg0: float) -> int: ...

  @staticmethod
  @overload
  def round(arg0: float) -> int: ...

  @staticmethod
  @overload
  def roundHalfDown(arg0: float) -> int: ...

  @staticmethod
  @overload
  def roundHalfDown(arg0: float) -> int: ...

  @staticmethod
  @overload
  def roundHalfEven(arg0: float) -> int: ...

  @staticmethod
  @overload
  def roundHalfEven(arg0: float) -> int: ...

  @staticmethod
  @overload
  def roundHalfUp(arg0: float) -> int: ...

  @staticmethod
  @overload
  def roundHalfUp(arg0: float) -> int: ...

  @staticmethod
  @overload
  def roundUsing(arg0: float, arg1: int) -> int: ...

  @staticmethod
  @overload
  def roundUsing(arg0: float, arg1: int) -> int: ...

  @staticmethod
  @overload
  def safeAcos(arg0: float) -> float: ...

  @staticmethod
  @overload
  def safeAcos(arg0: float) -> float: ...

  @staticmethod
  @overload
  def safeAsin(arg0: float) -> float: ...

  @staticmethod
  @overload
  def safeAsin(arg0: float) -> float: ...

  @staticmethod
  @overload
  def signum(arg0: float) -> float: ...

  @staticmethod
  @overload
  def signum(arg0: float) -> float: ...

  @staticmethod
  @overload
  def signum(arg0: int) -> int: ...

  @staticmethod
  @overload
  def signum(arg0: int) -> int: ...

  @staticmethod
  @overload
  def sin(arg0: float) -> float: ...

  @staticmethod
  @overload
  def sin(arg0: float) -> float: ...

  @staticmethod
  @overload
  def sqrt(arg0: float) -> float: ...

  @staticmethod
  @overload
  def sqrt(arg0: float) -> float: ...

  @staticmethod
  @overload
  def tan(arg0: float) -> float: ...

  @staticmethod
  @overload
  def tan(arg0: float) -> float: ...

  @staticmethod
  def toDegrees(arg0: float) -> float: ...

  @staticmethod
  @overload
  def toRadians(arg0: float) -> float: ...

  @staticmethod
  @overload
  def toRadians(arg0: float) -> float: ...

  @staticmethod
  @overload
  def triLerp(arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float, arg10: float) -> float: ...

  @staticmethod
  @overload
  def triLerp(arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float, arg10: float) -> float: ...

  def __init__(self): ...


class Matrix2d:

  @overload
  def add(self, arg0: Matrix2dc) -> Matrix2d: ...

  @overload
  def add(self, arg0: Matrix2dc, arg1: Matrix2d) -> Matrix2d: ...

  @overload
  def add(self, arg0: Matrix2dc, arg1: Matrix2d) -> Matrix2d: ...

  @overload
  def determinant(self) -> float: ...

  @overload
  def determinant(self) -> float: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def equals(self, arg0: Matrix2dc, arg1: float) -> bool: ...

  @overload
  def equals(self, arg0: Matrix2dc, arg1: float) -> bool: ...

  @overload
  def get(self, arg0: list[float]) -> list[float]: ...

  @overload
  def get(self, arg0: list[float]) -> list[float]: ...

  @overload
  def get(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def get(self, arg0: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def get(self, arg0: Matrix2d) -> Matrix2d: ...

  @overload
  def get(self, arg0: Matrix2d) -> Matrix2d: ...

  @overload
  def get(self, arg0: Matrix3d) -> Matrix3d: ...

  @overload
  def get(self, arg0: Matrix3d) -> Matrix3d: ...

  @overload
  def get(self, arg0: Matrix3x2d) -> Matrix3x2d: ...

  @overload
  def get(self, arg0: Matrix3x2d) -> Matrix3x2d: ...

  @overload
  def get(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def get(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def get(self, arg0: int, arg1: int) -> float: ...

  @overload
  def get(self, arg0: int, arg1: int) -> float: ...

  @overload
  def get(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: int, arg1: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def get(self, arg0: int, arg1: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def getColumn(self, arg0: int, arg1: Vector2d) -> Vector2d: ...

  @overload
  def getColumn(self, arg0: int, arg1: Vector2d) -> Vector2d: ...

  @overload
  def getRotation(self) -> float: ...

  @overload
  def getRotation(self) -> float: ...

  @overload
  def getRow(self, arg0: int, arg1: Vector2d) -> Vector2d: ...

  @overload
  def getRow(self, arg0: int, arg1: Vector2d) -> Vector2d: ...

  @overload
  def getScale(self, arg0: Vector2d) -> Vector2d: ...

  @overload
  def getScale(self, arg0: Vector2d) -> Vector2d: ...

  @overload
  def getToAddress(self, arg0: int) -> Matrix2dc: ...

  @overload
  def getToAddress(self, arg0: int) -> Matrix2dc: ...

  @overload
  def getTransposed(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getTransposed(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getTransposed(self, arg0: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def getTransposed(self, arg0: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def getTransposed(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getTransposed(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getTransposed(self, arg0: int, arg1: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def getTransposed(self, arg0: int, arg1: DoubleBuffer) -> DoubleBuffer: ...

  def hashCode(self) -> int: ...

  def identity(self) -> Matrix2d: ...

  @overload
  def invert(self) -> Matrix2d: ...

  @overload
  def invert(self, arg0: Matrix2d) -> Matrix2d: ...

  @overload
  def invert(self, arg0: Matrix2d) -> Matrix2d: ...

  @overload
  def isFinite(self) -> bool: ...

  @overload
  def isFinite(self) -> bool: ...

  @overload
  def lerp(self, arg0: Matrix2dc, arg1: float) -> Matrix2d: ...

  @overload
  def lerp(self, arg0: Matrix2dc, arg1: float, arg2: Matrix2d) -> Matrix2d: ...

  @overload
  def lerp(self, arg0: Matrix2dc, arg1: float, arg2: Matrix2d) -> Matrix2d: ...

  @overload
  def m00(self) -> float: ...

  @overload
  def m00(self) -> float: ...

  @overload
  def m00(self, arg0: float) -> Matrix2d: ...

  @overload
  def m01(self) -> float: ...

  @overload
  def m01(self) -> float: ...

  @overload
  def m01(self, arg0: float) -> Matrix2d: ...

  @overload
  def m10(self) -> float: ...

  @overload
  def m10(self) -> float: ...

  @overload
  def m10(self, arg0: float) -> Matrix2d: ...

  @overload
  def m11(self) -> float: ...

  @overload
  def m11(self) -> float: ...

  @overload
  def m11(self, arg0: float) -> Matrix2d: ...

  @overload
  def mul(self, arg0: Matrix2dc) -> Matrix2d: ...

  @overload
  def mul(self, arg0: Matrix2fc) -> Matrix2d: ...

  @overload
  def mul(self, arg0: Matrix2dc, arg1: Matrix2d) -> Matrix2d: ...

  @overload
  def mul(self, arg0: Matrix2dc, arg1: Matrix2d) -> Matrix2d: ...

  @overload
  def mul(self, arg0: Matrix2fc, arg1: Matrix2d) -> Matrix2d: ...

  @overload
  def mul(self, arg0: Matrix2fc, arg1: Matrix2d) -> Matrix2d: ...

  @overload
  def mulComponentWise(self, arg0: Matrix2dc) -> Matrix2d: ...

  @overload
  def mulComponentWise(self, arg0: Matrix2dc, arg1: Matrix2d) -> Matrix2d: ...

  @overload
  def mulComponentWise(self, arg0: Matrix2dc, arg1: Matrix2d) -> Matrix2d: ...

  @overload
  def mulLocal(self, arg0: Matrix2dc) -> Matrix2d: ...

  @overload
  def mulLocal(self, arg0: Matrix2dc, arg1: Matrix2d) -> Matrix2d: ...

  @overload
  def mulLocal(self, arg0: Matrix2dc, arg1: Matrix2d) -> Matrix2d: ...

  @overload
  def normal(self) -> Matrix2d: ...

  @overload
  def normal(self, arg0: Matrix2d) -> Matrix2d: ...

  @overload
  def normal(self, arg0: Matrix2d) -> Matrix2d: ...

  @overload
  def normalizedPositiveX(self, arg0: Vector2d) -> Vector2d: ...

  @overload
  def normalizedPositiveX(self, arg0: Vector2d) -> Vector2d: ...

  @overload
  def normalizedPositiveY(self, arg0: Vector2d) -> Vector2d: ...

  @overload
  def normalizedPositiveY(self, arg0: Vector2d) -> Vector2d: ...

  @overload
  def positiveX(self, arg0: Vector2d) -> Vector2d: ...

  @overload
  def positiveX(self, arg0: Vector2d) -> Vector2d: ...

  @overload
  def positiveY(self, arg0: Vector2d) -> Vector2d: ...

  @overload
  def positiveY(self, arg0: Vector2d) -> Vector2d: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def rotate(self, arg0: float) -> Matrix2d: ...

  @overload
  def rotate(self, arg0: float, arg1: Matrix2d) -> Matrix2d: ...

  @overload
  def rotate(self, arg0: float, arg1: Matrix2d) -> Matrix2d: ...

  @overload
  def rotateLocal(self, arg0: float) -> Matrix2d: ...

  @overload
  def rotateLocal(self, arg0: float, arg1: Matrix2d) -> Matrix2d: ...

  @overload
  def rotateLocal(self, arg0: float, arg1: Matrix2d) -> Matrix2d: ...

  def rotation(self, arg0: float) -> Matrix2d: ...

  @overload
  def scale(self, arg0: float) -> Matrix2d: ...

  @overload
  def scale(self, arg0: Vector2dc) -> Matrix2d: ...

  @overload
  def scale(self, arg0: float, arg1: float) -> Matrix2d: ...

  @overload
  def scale(self, arg0: float, arg1: Matrix2d) -> Matrix2d: ...

  @overload
  def scale(self, arg0: float, arg1: Matrix2d) -> Matrix2d: ...

  @overload
  def scale(self, arg0: Vector2dc, arg1: Matrix2d) -> Matrix2d: ...

  @overload
  def scale(self, arg0: Vector2dc, arg1: Matrix2d) -> Matrix2d: ...

  @overload
  def scale(self, arg0: float, arg1: float, arg2: Matrix2d) -> Matrix2d: ...

  @overload
  def scale(self, arg0: float, arg1: float, arg2: Matrix2d) -> Matrix2d: ...

  @overload
  def scaleLocal(self, arg0: float, arg1: float) -> Matrix2d: ...

  @overload
  def scaleLocal(self, arg0: float, arg1: float, arg2: Matrix2d) -> Matrix2d: ...

  @overload
  def scaleLocal(self, arg0: float, arg1: float, arg2: Matrix2d) -> Matrix2d: ...

  @overload
  def scaling(self, arg0: float) -> Matrix2d: ...

  @overload
  def scaling(self, arg0: Vector2dc) -> Matrix2d: ...

  @overload
  def scaling(self, arg0: float, arg1: float) -> Matrix2d: ...

  @overload
  def set(self, arg0: list[float]) -> Matrix2d: ...

  @overload
  def set(self, arg0: ByteBuffer) -> Matrix2d: ...

  @overload
  def set(self, arg0: DoubleBuffer) -> Matrix2d: ...

  @overload
  def set(self, arg0: Matrix2dc) -> Matrix2d: ...

  @overload
  def set(self, arg0: Matrix2fc) -> Matrix2d: ...

  @overload
  def set(self, arg0: Matrix3dc) -> Matrix2d: ...

  @overload
  def set(self, arg0: Matrix3fc) -> Matrix2d: ...

  @overload
  def set(self, arg0: Matrix3x2dc) -> Matrix2d: ...

  @overload
  def set(self, arg0: Matrix3x2fc) -> Matrix2d: ...

  @overload
  def set(self, arg0: Vector2dc, arg1: Vector2dc) -> Matrix2d: ...

  @overload
  def set(self, arg0: int, arg1: int, arg2: float) -> Matrix2d: ...

  @overload
  def set(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix2d: ...

  @overload
  def setColumn(self, arg0: int, arg1: Vector2dc) -> Matrix2d: ...

  @overload
  def setColumn(self, arg0: int, arg1: float, arg2: float) -> Matrix2d: ...

  def setFromAddress(self, arg0: int) -> Matrix2d: ...

  @overload
  def setRow(self, arg0: int, arg1: Vector2dc) -> Matrix2d: ...

  @overload
  def setRow(self, arg0: int, arg1: float, arg2: float) -> Matrix2d: ...

  @overload
  def sub(self, arg0: Matrix2dc) -> Matrix2d: ...

  @overload
  def sub(self, arg0: Matrix2dc, arg1: Matrix2d) -> Matrix2d: ...

  @overload
  def sub(self, arg0: Matrix2dc, arg1: Matrix2d) -> Matrix2d: ...

  def swap(self, arg0: Matrix2d) -> Matrix2d: ...

  @overload
  def toString(self) -> str: ...

  @overload
  def toString(self, arg0: NumberFormat) -> str: ...

  @overload
  def transform(self, arg0: Vector2d) -> Vector2d: ...

  @overload
  def transform(self, arg0: Vector2d) -> Vector2d: ...

  @overload
  def transform(self, arg0: Vector2dc, arg1: Vector2d) -> Vector2d: ...

  @overload
  def transform(self, arg0: Vector2dc, arg1: Vector2d) -> Vector2d: ...

  @overload
  def transform(self, arg0: float, arg1: float, arg2: Vector2d) -> Vector2d: ...

  @overload
  def transform(self, arg0: float, arg1: float, arg2: Vector2d) -> Vector2d: ...

  @overload
  def transformTranspose(self, arg0: Vector2d) -> Vector2d: ...

  @overload
  def transformTranspose(self, arg0: Vector2d) -> Vector2d: ...

  @overload
  def transformTranspose(self, arg0: Vector2dc, arg1: Vector2d) -> Vector2d: ...

  @overload
  def transformTranspose(self, arg0: Vector2dc, arg1: Vector2d) -> Vector2d: ...

  @overload
  def transformTranspose(self, arg0: float, arg1: float, arg2: Vector2d) -> Vector2d: ...

  @overload
  def transformTranspose(self, arg0: float, arg1: float, arg2: Vector2d) -> Vector2d: ...

  @overload
  def transpose(self) -> Matrix2d: ...

  @overload
  def transpose(self, arg0: Matrix2d) -> Matrix2d: ...

  @overload
  def transpose(self, arg0: Matrix2d) -> Matrix2d: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  def zero(self) -> Matrix2d: ...

  @overload
  def __init__(self):
    self.m00: float

    self.m01: float

    self.m10: float

    self.m11: float

  @overload
  def __init__(self, arg0: DoubleBuffer): ...
  @overload
  def __init__(self, arg0: Matrix2dc): ...
  @overload
  def __init__(self, arg0: Matrix2fc): ...
  @overload
  def __init__(self, arg0: Matrix3dc): ...
  @overload
  def __init__(self, arg0: Matrix3fc): ...
  @overload
  def __init__(self, arg0: Vector2dc, arg1: Vector2dc): ...
  @overload
  def __init__(self, arg0: float, arg1: float, arg2: float, arg3: float): ...


class Matrix2dc:

  def add(self, arg0: Matrix2dc, arg1: Matrix2d) -> Matrix2d: ...

  def determinant(self) -> float: ...

  def equals(self, arg0: Matrix2dc, arg1: float) -> bool: ...

  @overload
  def get(self, arg0: list[float]) -> list[float]: ...

  @overload
  def get(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def get(self, arg0: Matrix2d) -> Matrix2d: ...

  @overload
  def get(self, arg0: Matrix3d) -> Matrix3d: ...

  @overload
  def get(self, arg0: Matrix3x2d) -> Matrix3x2d: ...

  @overload
  def get(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def get(self, arg0: int, arg1: int) -> float: ...

  @overload
  def get(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: int, arg1: DoubleBuffer) -> DoubleBuffer: ...

  def getColumn(self, arg0: int, arg1: Vector2d) -> Vector2d: ...

  def getRotation(self) -> float: ...

  def getRow(self, arg0: int, arg1: Vector2d) -> Vector2d: ...

  def getScale(self, arg0: Vector2d) -> Vector2d: ...

  def getToAddress(self, arg0: int) -> Matrix2dc: ...

  @overload
  def getTransposed(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getTransposed(self, arg0: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def getTransposed(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getTransposed(self, arg0: int, arg1: DoubleBuffer) -> DoubleBuffer: ...

  def invert(self, arg0: Matrix2d) -> Matrix2d: ...

  def isFinite(self) -> bool: ...

  def lerp(self, arg0: Matrix2dc, arg1: float, arg2: Matrix2d) -> Matrix2d: ...

  def m00(self) -> float: ...

  def m01(self) -> float: ...

  def m10(self) -> float: ...

  def m11(self) -> float: ...

  @overload
  def mul(self, arg0: Matrix2dc, arg1: Matrix2d) -> Matrix2d: ...

  @overload
  def mul(self, arg0: Matrix2fc, arg1: Matrix2d) -> Matrix2d: ...

  def mulComponentWise(self, arg0: Matrix2dc, arg1: Matrix2d) -> Matrix2d: ...

  def mulLocal(self, arg0: Matrix2dc, arg1: Matrix2d) -> Matrix2d: ...

  def normal(self, arg0: Matrix2d) -> Matrix2d: ...

  def normalizedPositiveX(self, arg0: Vector2d) -> Vector2d: ...

  def normalizedPositiveY(self, arg0: Vector2d) -> Vector2d: ...

  def positiveX(self, arg0: Vector2d) -> Vector2d: ...

  def positiveY(self, arg0: Vector2d) -> Vector2d: ...

  def rotate(self, arg0: float, arg1: Matrix2d) -> Matrix2d: ...

  def rotateLocal(self, arg0: float, arg1: Matrix2d) -> Matrix2d: ...

  @overload
  def scale(self, arg0: float, arg1: Matrix2d) -> Matrix2d: ...

  @overload
  def scale(self, arg0: Vector2dc, arg1: Matrix2d) -> Matrix2d: ...

  @overload
  def scale(self, arg0: float, arg1: float, arg2: Matrix2d) -> Matrix2d: ...

  def scaleLocal(self, arg0: float, arg1: float, arg2: Matrix2d) -> Matrix2d: ...

  def sub(self, arg0: Matrix2dc, arg1: Matrix2d) -> Matrix2d: ...

  @overload
  def transform(self, arg0: Vector2d) -> Vector2d: ...

  @overload
  def transform(self, arg0: Vector2dc, arg1: Vector2d) -> Vector2d: ...

  @overload
  def transform(self, arg0: float, arg1: float, arg2: Vector2d) -> Vector2d: ...

  @overload
  def transformTranspose(self, arg0: Vector2d) -> Vector2d: ...

  @overload
  def transformTranspose(self, arg0: Vector2dc, arg1: Vector2d) -> Vector2d: ...

  @overload
  def transformTranspose(self, arg0: float, arg1: float, arg2: Vector2d) -> Vector2d: ...

  def transpose(self, arg0: Matrix2d) -> Matrix2d: ...


class Matrix2f:

  @overload
  def add(self, arg0: Matrix2fc) -> Matrix2f: ...

  @overload
  def add(self, arg0: Matrix2fc, arg1: Matrix2f) -> Matrix2f: ...

  @overload
  def add(self, arg0: Matrix2fc, arg1: Matrix2f) -> Matrix2f: ...

  @overload
  def determinant(self) -> float: ...

  @overload
  def determinant(self) -> float: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def equals(self, arg0: Matrix2fc, arg1: float) -> bool: ...

  @overload
  def equals(self, arg0: Matrix2fc, arg1: float) -> bool: ...

  @overload
  def get(self, arg0: list[float]) -> list[float]: ...

  @overload
  def get(self, arg0: list[float]) -> list[float]: ...

  @overload
  def get(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get(self, arg0: Matrix2f) -> Matrix2f: ...

  @overload
  def get(self, arg0: Matrix2f) -> Matrix2f: ...

  @overload
  def get(self, arg0: Matrix3f) -> Matrix3f: ...

  @overload
  def get(self, arg0: Matrix3f) -> Matrix3f: ...

  @overload
  def get(self, arg0: Matrix3x2f) -> Matrix3x2f: ...

  @overload
  def get(self, arg0: Matrix3x2f) -> Matrix3x2f: ...

  @overload
  def get(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def get(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def get(self, arg0: int, arg1: int) -> float: ...

  @overload
  def get(self, arg0: int, arg1: int) -> float: ...

  @overload
  def get(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def getColumn(self, arg0: int, arg1: Vector2f) -> Vector2f: ...

  @overload
  def getColumn(self, arg0: int, arg1: Vector2f) -> Vector2f: ...

  @overload
  def getRotation(self) -> float: ...

  @overload
  def getRotation(self) -> float: ...

  @overload
  def getRow(self, arg0: int, arg1: Vector2f) -> Vector2f: ...

  @overload
  def getRow(self, arg0: int, arg1: Vector2f) -> Vector2f: ...

  @overload
  def getScale(self, arg0: Vector2f) -> Vector2f: ...

  @overload
  def getScale(self, arg0: Vector2f) -> Vector2f: ...

  @overload
  def getToAddress(self, arg0: int) -> Matrix2fc: ...

  @overload
  def getToAddress(self, arg0: int) -> Matrix2fc: ...

  @overload
  def getTransposed(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getTransposed(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getTransposed(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def getTransposed(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def getTransposed(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getTransposed(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getTransposed(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def getTransposed(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  def hashCode(self) -> int: ...

  def identity(self) -> Matrix2f: ...

  @overload
  def invert(self) -> Matrix2f: ...

  @overload
  def invert(self, arg0: Matrix2f) -> Matrix2f: ...

  @overload
  def invert(self, arg0: Matrix2f) -> Matrix2f: ...

  @overload
  def isFinite(self) -> bool: ...

  @overload
  def isFinite(self) -> bool: ...

  @overload
  def lerp(self, arg0: Matrix2fc, arg1: float) -> Matrix2f: ...

  @overload
  def lerp(self, arg0: Matrix2fc, arg1: float, arg2: Matrix2f) -> Matrix2f: ...

  @overload
  def lerp(self, arg0: Matrix2fc, arg1: float, arg2: Matrix2f) -> Matrix2f: ...

  @overload
  def m00(self) -> float: ...

  @overload
  def m00(self) -> float: ...

  @overload
  def m00(self, arg0: float) -> Matrix2f: ...

  @overload
  def m01(self) -> float: ...

  @overload
  def m01(self) -> float: ...

  @overload
  def m01(self, arg0: float) -> Matrix2f: ...

  @overload
  def m10(self) -> float: ...

  @overload
  def m10(self) -> float: ...

  @overload
  def m10(self, arg0: float) -> Matrix2f: ...

  @overload
  def m11(self) -> float: ...

  @overload
  def m11(self) -> float: ...

  @overload
  def m11(self, arg0: float) -> Matrix2f: ...

  @overload
  def mul(self, arg0: Matrix2fc) -> Matrix2f: ...

  @overload
  def mul(self, arg0: Matrix2fc, arg1: Matrix2f) -> Matrix2f: ...

  @overload
  def mul(self, arg0: Matrix2fc, arg1: Matrix2f) -> Matrix2f: ...

  @overload
  def mulComponentWise(self, arg0: Matrix2fc) -> Matrix2f: ...

  @overload
  def mulComponentWise(self, arg0: Matrix2fc, arg1: Matrix2f) -> Matrix2f: ...

  @overload
  def mulComponentWise(self, arg0: Matrix2fc, arg1: Matrix2f) -> Matrix2f: ...

  @overload
  def mulLocal(self, arg0: Matrix2fc) -> Matrix2f: ...

  @overload
  def mulLocal(self, arg0: Matrix2fc, arg1: Matrix2f) -> Matrix2f: ...

  @overload
  def mulLocal(self, arg0: Matrix2fc, arg1: Matrix2f) -> Matrix2f: ...

  @overload
  def normal(self) -> Matrix2f: ...

  @overload
  def normal(self, arg0: Matrix2f) -> Matrix2f: ...

  @overload
  def normal(self, arg0: Matrix2f) -> Matrix2f: ...

  @overload
  def normalizedPositiveX(self, arg0: Vector2f) -> Vector2f: ...

  @overload
  def normalizedPositiveX(self, arg0: Vector2f) -> Vector2f: ...

  @overload
  def normalizedPositiveY(self, arg0: Vector2f) -> Vector2f: ...

  @overload
  def normalizedPositiveY(self, arg0: Vector2f) -> Vector2f: ...

  @overload
  def positiveX(self, arg0: Vector2f) -> Vector2f: ...

  @overload
  def positiveX(self, arg0: Vector2f) -> Vector2f: ...

  @overload
  def positiveY(self, arg0: Vector2f) -> Vector2f: ...

  @overload
  def positiveY(self, arg0: Vector2f) -> Vector2f: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def rotate(self, arg0: float) -> Matrix2f: ...

  @overload
  def rotate(self, arg0: float, arg1: Matrix2f) -> Matrix2f: ...

  @overload
  def rotate(self, arg0: float, arg1: Matrix2f) -> Matrix2f: ...

  @overload
  def rotateLocal(self, arg0: float) -> Matrix2f: ...

  @overload
  def rotateLocal(self, arg0: float, arg1: Matrix2f) -> Matrix2f: ...

  @overload
  def rotateLocal(self, arg0: float, arg1: Matrix2f) -> Matrix2f: ...

  def rotation(self, arg0: float) -> Matrix2f: ...

  @overload
  def scale(self, arg0: float) -> Matrix2f: ...

  @overload
  def scale(self, arg0: Vector2fc) -> Matrix2f: ...

  @overload
  def scale(self, arg0: float, arg1: float) -> Matrix2f: ...

  @overload
  def scale(self, arg0: float, arg1: Matrix2f) -> Matrix2f: ...

  @overload
  def scale(self, arg0: float, arg1: Matrix2f) -> Matrix2f: ...

  @overload
  def scale(self, arg0: Vector2fc, arg1: Matrix2f) -> Matrix2f: ...

  @overload
  def scale(self, arg0: Vector2fc, arg1: Matrix2f) -> Matrix2f: ...

  @overload
  def scale(self, arg0: float, arg1: float, arg2: Matrix2f) -> Matrix2f: ...

  @overload
  def scale(self, arg0: float, arg1: float, arg2: Matrix2f) -> Matrix2f: ...

  @overload
  def scaleLocal(self, arg0: float, arg1: float) -> Matrix2f: ...

  @overload
  def scaleLocal(self, arg0: float, arg1: float, arg2: Matrix2f) -> Matrix2f: ...

  @overload
  def scaleLocal(self, arg0: float, arg1: float, arg2: Matrix2f) -> Matrix2f: ...

  @overload
  def scaling(self, arg0: float) -> Matrix2f: ...

  @overload
  def scaling(self, arg0: Vector2fc) -> Matrix2f: ...

  @overload
  def scaling(self, arg0: float, arg1: float) -> Matrix2f: ...

  @overload
  def set(self, arg0: list[float]) -> Matrix2f: ...

  @overload
  def set(self, arg0: ByteBuffer) -> Matrix2f: ...

  @overload
  def set(self, arg0: FloatBuffer) -> Matrix2f: ...

  @overload
  def set(self, arg0: Matrix2fc) -> Matrix2f: ...

  @overload
  def set(self, arg0: Matrix3fc) -> Matrix2f: ...

  @overload
  def set(self, arg0: Matrix3x2fc) -> Matrix2f: ...

  @overload
  def set(self, arg0: Vector2fc, arg1: Vector2fc) -> Matrix2f: ...

  @overload
  def set(self, arg0: int, arg1: int, arg2: float) -> Matrix2f: ...

  @overload
  def set(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix2f: ...

  @overload
  def setColumn(self, arg0: int, arg1: Vector2fc) -> Matrix2f: ...

  @overload
  def setColumn(self, arg0: int, arg1: float, arg2: float) -> Matrix2f: ...

  def setFromAddress(self, arg0: int) -> Matrix2f: ...

  @overload
  def setRow(self, arg0: int, arg1: Vector2fc) -> Matrix2f: ...

  @overload
  def setRow(self, arg0: int, arg1: float, arg2: float) -> Matrix2f: ...

  @overload
  def sub(self, arg0: Matrix2fc) -> Matrix2f: ...

  @overload
  def sub(self, arg0: Matrix2fc, arg1: Matrix2f) -> Matrix2f: ...

  @overload
  def sub(self, arg0: Matrix2fc, arg1: Matrix2f) -> Matrix2f: ...

  def swap(self, arg0: Matrix2f) -> Matrix2f: ...

  @overload
  def toString(self) -> str: ...

  @overload
  def toString(self, arg0: NumberFormat) -> str: ...

  @overload
  def transform(self, arg0: Vector2f) -> Vector2f: ...

  @overload
  def transform(self, arg0: Vector2f) -> Vector2f: ...

  @overload
  def transform(self, arg0: Vector2fc, arg1: Vector2f) -> Vector2f: ...

  @overload
  def transform(self, arg0: Vector2fc, arg1: Vector2f) -> Vector2f: ...

  @overload
  def transform(self, arg0: float, arg1: float, arg2: Vector2f) -> Vector2f: ...

  @overload
  def transform(self, arg0: float, arg1: float, arg2: Vector2f) -> Vector2f: ...

  @overload
  def transformTranspose(self, arg0: Vector2f) -> Vector2f: ...

  @overload
  def transformTranspose(self, arg0: Vector2f) -> Vector2f: ...

  @overload
  def transformTranspose(self, arg0: Vector2fc, arg1: Vector2f) -> Vector2f: ...

  @overload
  def transformTranspose(self, arg0: Vector2fc, arg1: Vector2f) -> Vector2f: ...

  @overload
  def transformTranspose(self, arg0: float, arg1: float, arg2: Vector2f) -> Vector2f: ...

  @overload
  def transformTranspose(self, arg0: float, arg1: float, arg2: Vector2f) -> Vector2f: ...

  @overload
  def transpose(self) -> Matrix2f: ...

  @overload
  def transpose(self, arg0: Matrix2f) -> Matrix2f: ...

  @overload
  def transpose(self, arg0: Matrix2f) -> Matrix2f: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  def zero(self) -> Matrix2f: ...

  @overload
  def __init__(self):
    self.m00: float

    self.m01: float

    self.m10: float

    self.m11: float

  @overload
  def __init__(self, arg0: FloatBuffer): ...
  @overload
  def __init__(self, arg0: Matrix2fc): ...
  @overload
  def __init__(self, arg0: Matrix3fc): ...
  @overload
  def __init__(self, arg0: Vector2fc, arg1: Vector2fc): ...
  @overload
  def __init__(self, arg0: float, arg1: float, arg2: float, arg3: float): ...


class Matrix2fc:

  def add(self, arg0: Matrix2fc, arg1: Matrix2f) -> Matrix2f: ...

  def determinant(self) -> float: ...

  def equals(self, arg0: Matrix2fc, arg1: float) -> bool: ...

  @overload
  def get(self, arg0: list[float]) -> list[float]: ...

  @overload
  def get(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get(self, arg0: Matrix2f) -> Matrix2f: ...

  @overload
  def get(self, arg0: Matrix3f) -> Matrix3f: ...

  @overload
  def get(self, arg0: Matrix3x2f) -> Matrix3x2f: ...

  @overload
  def get(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def get(self, arg0: int, arg1: int) -> float: ...

  @overload
  def get(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  def getColumn(self, arg0: int, arg1: Vector2f) -> Vector2f: ...

  def getRotation(self) -> float: ...

  def getRow(self, arg0: int, arg1: Vector2f) -> Vector2f: ...

  def getScale(self, arg0: Vector2f) -> Vector2f: ...

  def getToAddress(self, arg0: int) -> Matrix2fc: ...

  @overload
  def getTransposed(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getTransposed(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def getTransposed(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getTransposed(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  def invert(self, arg0: Matrix2f) -> Matrix2f: ...

  def isFinite(self) -> bool: ...

  def lerp(self, arg0: Matrix2fc, arg1: float, arg2: Matrix2f) -> Matrix2f: ...

  def m00(self) -> float: ...

  def m01(self) -> float: ...

  def m10(self) -> float: ...

  def m11(self) -> float: ...

  def mul(self, arg0: Matrix2fc, arg1: Matrix2f) -> Matrix2f: ...

  def mulComponentWise(self, arg0: Matrix2fc, arg1: Matrix2f) -> Matrix2f: ...

  def mulLocal(self, arg0: Matrix2fc, arg1: Matrix2f) -> Matrix2f: ...

  def normal(self, arg0: Matrix2f) -> Matrix2f: ...

  def normalizedPositiveX(self, arg0: Vector2f) -> Vector2f: ...

  def normalizedPositiveY(self, arg0: Vector2f) -> Vector2f: ...

  def positiveX(self, arg0: Vector2f) -> Vector2f: ...

  def positiveY(self, arg0: Vector2f) -> Vector2f: ...

  def rotate(self, arg0: float, arg1: Matrix2f) -> Matrix2f: ...

  def rotateLocal(self, arg0: float, arg1: Matrix2f) -> Matrix2f: ...

  @overload
  def scale(self, arg0: float, arg1: Matrix2f) -> Matrix2f: ...

  @overload
  def scale(self, arg0: Vector2fc, arg1: Matrix2f) -> Matrix2f: ...

  @overload
  def scale(self, arg0: float, arg1: float, arg2: Matrix2f) -> Matrix2f: ...

  def scaleLocal(self, arg0: float, arg1: float, arg2: Matrix2f) -> Matrix2f: ...

  def sub(self, arg0: Matrix2fc, arg1: Matrix2f) -> Matrix2f: ...

  @overload
  def transform(self, arg0: Vector2f) -> Vector2f: ...

  @overload
  def transform(self, arg0: Vector2fc, arg1: Vector2f) -> Vector2f: ...

  @overload
  def transform(self, arg0: float, arg1: float, arg2: Vector2f) -> Vector2f: ...

  @overload
  def transformTranspose(self, arg0: Vector2f) -> Vector2f: ...

  @overload
  def transformTranspose(self, arg0: Vector2fc, arg1: Vector2f) -> Vector2f: ...

  @overload
  def transformTranspose(self, arg0: float, arg1: float, arg2: Vector2f) -> Vector2f: ...

  def transpose(self, arg0: Matrix2f) -> Matrix2f: ...


class Matrix3d:

  @overload
  def add(self, arg0: Matrix3dc) -> Matrix3d: ...

  @overload
  def add(self, arg0: Matrix3dc, arg1: Matrix3d) -> Matrix3d: ...

  @overload
  def add(self, arg0: Matrix3dc, arg1: Matrix3d) -> Matrix3d: ...

  @overload
  def cofactor(self) -> Matrix3d: ...

  @overload
  def cofactor(self, arg0: Matrix3d) -> Matrix3d: ...

  @overload
  def cofactor(self, arg0: Matrix3d) -> Matrix3d: ...

  @overload
  def determinant(self) -> float: ...

  @overload
  def determinant(self) -> float: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def equals(self, arg0: Matrix3dc, arg1: float) -> bool: ...

  @overload
  def equals(self, arg0: Matrix3dc, arg1: float) -> bool: ...

  @overload
  def get(self, arg0: list[float]) -> list[float]: ...

  @overload
  def get(self, arg0: list[float]) -> list[float]: ...

  @overload
  def get(self, arg0: list[float]) -> list[float]: ...

  @overload
  def get(self, arg0: list[float]) -> list[float]: ...

  @overload
  def get(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def get(self, arg0: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def get(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get(self, arg0: Matrix3d) -> Matrix3d: ...

  @overload
  def get(self, arg0: Matrix3d) -> Matrix3d: ...

  @overload
  def get(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def get(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def get(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def get(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def get(self, arg0: int, arg1: int) -> float: ...

  @overload
  def get(self, arg0: int, arg1: int) -> float: ...

  @overload
  def get(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: int, arg1: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def get(self, arg0: int, arg1: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def get(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def getColumn(self, arg0: int, arg1: Vector3d) -> Vector3d: ...

  @overload
  def getColumn(self, arg0: int, arg1: Vector3d) -> Vector3d: ...

  @overload
  def getEulerAnglesZYX(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def getEulerAnglesZYX(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def getFloats(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getFloats(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getFloats(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getFloats(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getNormalizedRotation(self, arg0: Quaterniond) -> Quaterniond: ...

  @overload
  def getNormalizedRotation(self, arg0: Quaterniond) -> Quaterniond: ...

  @overload
  def getNormalizedRotation(self, arg0: Quaternionf) -> Quaternionf: ...

  @overload
  def getNormalizedRotation(self, arg0: Quaternionf) -> Quaternionf: ...

  @overload
  def getRotation(self, arg0: AxisAngle4f) -> AxisAngle4f: ...

  @overload
  def getRotation(self, arg0: AxisAngle4f) -> AxisAngle4f: ...

  @overload
  def getRow(self, arg0: int, arg1: Vector3d) -> Vector3d: ...

  @overload
  def getRow(self, arg0: int, arg1: Vector3d) -> Vector3d: ...

  @overload
  def getRowColumn(self, arg0: int, arg1: int) -> float: ...

  @overload
  def getRowColumn(self, arg0: int, arg1: int) -> float: ...

  @overload
  def getScale(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def getScale(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def getToAddress(self, arg0: int) -> Matrix3dc: ...

  @overload
  def getToAddress(self, arg0: int) -> Matrix3dc: ...

  @overload
  def getUnnormalizedRotation(self, arg0: Quaterniond) -> Quaterniond: ...

  @overload
  def getUnnormalizedRotation(self, arg0: Quaterniond) -> Quaterniond: ...

  @overload
  def getUnnormalizedRotation(self, arg0: Quaternionf) -> Quaternionf: ...

  @overload
  def getUnnormalizedRotation(self, arg0: Quaternionf) -> Quaternionf: ...

  def hashCode(self) -> int: ...

  def identity(self) -> Matrix3d: ...

  @overload
  def invert(self) -> Matrix3d: ...

  @overload
  def invert(self, arg0: Matrix3d) -> Matrix3d: ...

  @overload
  def invert(self, arg0: Matrix3d) -> Matrix3d: ...

  @overload
  def isFinite(self) -> bool: ...

  @overload
  def isFinite(self) -> bool: ...

  @overload
  def lerp(self, arg0: Matrix3dc, arg1: float) -> Matrix3d: ...

  @overload
  def lerp(self, arg0: Matrix3dc, arg1: float, arg2: Matrix3d) -> Matrix3d: ...

  @overload
  def lerp(self, arg0: Matrix3dc, arg1: float, arg2: Matrix3d) -> Matrix3d: ...

  @overload
  def lookAlong(self, arg0: Vector3dc, arg1: Vector3dc) -> Matrix3d: ...

  @overload
  def lookAlong(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Matrix3d) -> Matrix3d: ...

  @overload
  def lookAlong(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Matrix3d) -> Matrix3d: ...

  @overload
  def lookAlong(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix3d: ...

  @overload
  def lookAlong(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix3d) -> Matrix3d: ...

  @overload
  def lookAlong(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix3d) -> Matrix3d: ...

  @overload
  def m00(self) -> float: ...

  @overload
  def m00(self) -> float: ...

  @overload
  def m00(self, arg0: float) -> Matrix3d: ...

  @overload
  def m01(self) -> float: ...

  @overload
  def m01(self) -> float: ...

  @overload
  def m01(self, arg0: float) -> Matrix3d: ...

  @overload
  def m02(self) -> float: ...

  @overload
  def m02(self) -> float: ...

  @overload
  def m02(self, arg0: float) -> Matrix3d: ...

  @overload
  def m10(self) -> float: ...

  @overload
  def m10(self) -> float: ...

  @overload
  def m10(self, arg0: float) -> Matrix3d: ...

  @overload
  def m11(self) -> float: ...

  @overload
  def m11(self) -> float: ...

  @overload
  def m11(self, arg0: float) -> Matrix3d: ...

  @overload
  def m12(self) -> float: ...

  @overload
  def m12(self) -> float: ...

  @overload
  def m12(self, arg0: float) -> Matrix3d: ...

  @overload
  def m20(self) -> float: ...

  @overload
  def m20(self) -> float: ...

  @overload
  def m20(self, arg0: float) -> Matrix3d: ...

  @overload
  def m21(self) -> float: ...

  @overload
  def m21(self) -> float: ...

  @overload
  def m21(self, arg0: float) -> Matrix3d: ...

  @overload
  def m22(self) -> float: ...

  @overload
  def m22(self) -> float: ...

  @overload
  def m22(self, arg0: float) -> Matrix3d: ...

  @overload
  def mul(self, arg0: Matrix3dc) -> Matrix3d: ...

  @overload
  def mul(self, arg0: Matrix3fc) -> Matrix3d: ...

  @overload
  def mul(self, arg0: Matrix3dc, arg1: Matrix3d) -> Matrix3d: ...

  @overload
  def mul(self, arg0: Matrix3dc, arg1: Matrix3d) -> Matrix3d: ...

  @overload
  def mul(self, arg0: Matrix3fc, arg1: Matrix3d) -> Matrix3d: ...

  @overload
  def mul(self, arg0: Matrix3fc, arg1: Matrix3d) -> Matrix3d: ...

  @overload
  def mulComponentWise(self, arg0: Matrix3dc) -> Matrix3d: ...

  @overload
  def mulComponentWise(self, arg0: Matrix3dc, arg1: Matrix3d) -> Matrix3d: ...

  @overload
  def mulComponentWise(self, arg0: Matrix3dc, arg1: Matrix3d) -> Matrix3d: ...

  @overload
  def mulLocal(self, arg0: Matrix3dc) -> Matrix3d: ...

  @overload
  def mulLocal(self, arg0: Matrix3dc, arg1: Matrix3d) -> Matrix3d: ...

  @overload
  def mulLocal(self, arg0: Matrix3dc, arg1: Matrix3d) -> Matrix3d: ...

  @overload
  def normal(self) -> Matrix3d: ...

  @overload
  def normal(self, arg0: Matrix3d) -> Matrix3d: ...

  @overload
  def normal(self, arg0: Matrix3d) -> Matrix3d: ...

  @overload
  def normalizedPositiveX(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def normalizedPositiveX(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def normalizedPositiveY(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def normalizedPositiveY(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def normalizedPositiveZ(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def normalizedPositiveZ(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def obliqueZ(self, arg0: float, arg1: float) -> Matrix3d: ...

  @overload
  def obliqueZ(self, arg0: float, arg1: float, arg2: Matrix3d) -> Matrix3d: ...

  @overload
  def obliqueZ(self, arg0: float, arg1: float, arg2: Matrix3d) -> Matrix3d: ...

  @overload
  def positiveX(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def positiveX(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def positiveY(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def positiveY(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def positiveZ(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def positiveZ(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def quadraticFormProduct(self, arg0: Vector3dc) -> float: ...

  @overload
  def quadraticFormProduct(self, arg0: Vector3dc) -> float: ...

  @overload
  def quadraticFormProduct(self, arg0: Vector3fc) -> float: ...

  @overload
  def quadraticFormProduct(self, arg0: Vector3fc) -> float: ...

  @overload
  def quadraticFormProduct(self, arg0: float, arg1: float, arg2: float) -> float: ...

  @overload
  def quadraticFormProduct(self, arg0: float, arg1: float, arg2: float) -> float: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def reflect(self, arg0: Quaterniondc) -> Matrix3d: ...

  @overload
  def reflect(self, arg0: Vector3dc) -> Matrix3d: ...

  @overload
  def reflect(self, arg0: Quaterniondc, arg1: Matrix3d) -> Matrix3d: ...

  @overload
  def reflect(self, arg0: Quaterniondc, arg1: Matrix3d) -> Matrix3d: ...

  @overload
  def reflect(self, arg0: Vector3dc, arg1: Matrix3d) -> Matrix3d: ...

  @overload
  def reflect(self, arg0: Vector3dc, arg1: Matrix3d) -> Matrix3d: ...

  @overload
  def reflect(self, arg0: float, arg1: float, arg2: float) -> Matrix3d: ...

  @overload
  def reflect(self, arg0: float, arg1: float, arg2: float, arg3: Matrix3d) -> Matrix3d: ...

  @overload
  def reflect(self, arg0: float, arg1: float, arg2: float, arg3: Matrix3d) -> Matrix3d: ...

  @overload
  def reflection(self, arg0: Quaterniondc) -> Matrix3d: ...

  @overload
  def reflection(self, arg0: Vector3dc) -> Matrix3d: ...

  @overload
  def reflection(self, arg0: float, arg1: float, arg2: float) -> Matrix3d: ...

  @overload
  def rotate(self, arg0: AxisAngle4d) -> Matrix3d: ...

  @overload
  def rotate(self, arg0: AxisAngle4f) -> Matrix3d: ...

  @overload
  def rotate(self, arg0: Quaterniondc) -> Matrix3d: ...

  @overload
  def rotate(self, arg0: Quaternionfc) -> Matrix3d: ...

  @overload
  def rotate(self, arg0: float, arg1: Vector3dc) -> Matrix3d: ...

  @overload
  def rotate(self, arg0: float, arg1: Vector3fc) -> Matrix3d: ...

  @overload
  def rotate(self, arg0: AxisAngle4d, arg1: Matrix3d) -> Matrix3d: ...

  @overload
  def rotate(self, arg0: AxisAngle4d, arg1: Matrix3d) -> Matrix3d: ...

  @overload
  def rotate(self, arg0: AxisAngle4f, arg1: Matrix3d) -> Matrix3d: ...

  @overload
  def rotate(self, arg0: AxisAngle4f, arg1: Matrix3d) -> Matrix3d: ...

  @overload
  def rotate(self, arg0: Quaterniondc, arg1: Matrix3d) -> Matrix3d: ...

  @overload
  def rotate(self, arg0: Quaterniondc, arg1: Matrix3d) -> Matrix3d: ...

  @overload
  def rotate(self, arg0: Quaternionfc, arg1: Matrix3d) -> Matrix3d: ...

  @overload
  def rotate(self, arg0: Quaternionfc, arg1: Matrix3d) -> Matrix3d: ...

  @overload
  def rotate(self, arg0: float, arg1: Vector3dc, arg2: Matrix3d) -> Matrix3d: ...

  @overload
  def rotate(self, arg0: float, arg1: Vector3dc, arg2: Matrix3d) -> Matrix3d: ...

  @overload
  def rotate(self, arg0: float, arg1: Vector3fc, arg2: Matrix3d) -> Matrix3d: ...

  @overload
  def rotate(self, arg0: float, arg1: Vector3fc, arg2: Matrix3d) -> Matrix3d: ...

  @overload
  def rotate(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix3d: ...

  @overload
  def rotate(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix3d) -> Matrix3d: ...

  @overload
  def rotate(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix3d) -> Matrix3d: ...

  @overload
  def rotateLocal(self, arg0: Quaterniondc) -> Matrix3d: ...

  @overload
  def rotateLocal(self, arg0: Quaternionfc) -> Matrix3d: ...

  @overload
  def rotateLocal(self, arg0: Quaterniondc, arg1: Matrix3d) -> Matrix3d: ...

  @overload
  def rotateLocal(self, arg0: Quaterniondc, arg1: Matrix3d) -> Matrix3d: ...

  @overload
  def rotateLocal(self, arg0: Quaternionfc, arg1: Matrix3d) -> Matrix3d: ...

  @overload
  def rotateLocal(self, arg0: Quaternionfc, arg1: Matrix3d) -> Matrix3d: ...

  @overload
  def rotateLocal(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix3d: ...

  @overload
  def rotateLocal(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix3d) -> Matrix3d: ...

  @overload
  def rotateLocal(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix3d) -> Matrix3d: ...

  @overload
  def rotateLocalX(self, arg0: float) -> Matrix3d: ...

  @overload
  def rotateLocalX(self, arg0: float, arg1: Matrix3d) -> Matrix3d: ...

  @overload
  def rotateLocalX(self, arg0: float, arg1: Matrix3d) -> Matrix3d: ...

  @overload
  def rotateLocalY(self, arg0: float) -> Matrix3d: ...

  @overload
  def rotateLocalY(self, arg0: float, arg1: Matrix3d) -> Matrix3d: ...

  @overload
  def rotateLocalY(self, arg0: float, arg1: Matrix3d) -> Matrix3d: ...

  @overload
  def rotateLocalZ(self, arg0: float) -> Matrix3d: ...

  @overload
  def rotateLocalZ(self, arg0: float, arg1: Matrix3d) -> Matrix3d: ...

  @overload
  def rotateLocalZ(self, arg0: float, arg1: Matrix3d) -> Matrix3d: ...

  @overload
  def rotateTowards(self, arg0: Vector3dc, arg1: Vector3dc) -> Matrix3d: ...

  @overload
  def rotateTowards(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Matrix3d) -> Matrix3d: ...

  @overload
  def rotateTowards(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Matrix3d) -> Matrix3d: ...

  @overload
  def rotateTowards(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix3d: ...

  @overload
  def rotateTowards(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix3d) -> Matrix3d: ...

  @overload
  def rotateTowards(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix3d) -> Matrix3d: ...

  @overload
  def rotateX(self, arg0: float) -> Matrix3d: ...

  @overload
  def rotateX(self, arg0: float, arg1: Matrix3d) -> Matrix3d: ...

  @overload
  def rotateX(self, arg0: float, arg1: Matrix3d) -> Matrix3d: ...

  @overload
  def rotateXYZ(self, arg0: float, arg1: float, arg2: float) -> Matrix3d: ...

  @overload
  def rotateXYZ(self, arg0: float, arg1: float, arg2: float, arg3: Matrix3d) -> Matrix3d: ...

  @overload
  def rotateXYZ(self, arg0: float, arg1: float, arg2: float, arg3: Matrix3d) -> Matrix3d: ...

  @overload
  def rotateY(self, arg0: float) -> Matrix3d: ...

  @overload
  def rotateY(self, arg0: float, arg1: Matrix3d) -> Matrix3d: ...

  @overload
  def rotateY(self, arg0: float, arg1: Matrix3d) -> Matrix3d: ...

  @overload
  def rotateYXZ(self, arg0: Vector3d) -> Matrix3d: ...

  @overload
  def rotateYXZ(self, arg0: float, arg1: float, arg2: float) -> Matrix3d: ...

  @overload
  def rotateYXZ(self, arg0: float, arg1: float, arg2: float, arg3: Matrix3d) -> Matrix3d: ...

  @overload
  def rotateYXZ(self, arg0: float, arg1: float, arg2: float, arg3: Matrix3d) -> Matrix3d: ...

  @overload
  def rotateZ(self, arg0: float) -> Matrix3d: ...

  @overload
  def rotateZ(self, arg0: float, arg1: Matrix3d) -> Matrix3d: ...

  @overload
  def rotateZ(self, arg0: float, arg1: Matrix3d) -> Matrix3d: ...

  @overload
  def rotateZYX(self, arg0: float, arg1: float, arg2: float) -> Matrix3d: ...

  @overload
  def rotateZYX(self, arg0: float, arg1: float, arg2: float, arg3: Matrix3d) -> Matrix3d: ...

  @overload
  def rotateZYX(self, arg0: float, arg1: float, arg2: float, arg3: Matrix3d) -> Matrix3d: ...

  @overload
  def rotation(self, arg0: AxisAngle4d) -> Matrix3d: ...

  @overload
  def rotation(self, arg0: AxisAngle4f) -> Matrix3d: ...

  @overload
  def rotation(self, arg0: Quaterniondc) -> Matrix3d: ...

  @overload
  def rotation(self, arg0: Quaternionfc) -> Matrix3d: ...

  @overload
  def rotation(self, arg0: float, arg1: Vector3dc) -> Matrix3d: ...

  @overload
  def rotation(self, arg0: float, arg1: Vector3fc) -> Matrix3d: ...

  @overload
  def rotation(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix3d: ...

  @overload
  def rotationTowards(self, arg0: Vector3dc, arg1: Vector3dc) -> Matrix3d: ...

  @overload
  def rotationTowards(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix3d: ...

  def rotationX(self, arg0: float) -> Matrix3d: ...

  def rotationXYZ(self, arg0: float, arg1: float, arg2: float) -> Matrix3d: ...

  def rotationY(self, arg0: float) -> Matrix3d: ...

  def rotationYXZ(self, arg0: float, arg1: float, arg2: float) -> Matrix3d: ...

  def rotationZ(self, arg0: float) -> Matrix3d: ...

  def rotationZYX(self, arg0: float, arg1: float, arg2: float) -> Matrix3d: ...

  @overload
  def scale(self, arg0: float) -> Matrix3d: ...

  @overload
  def scale(self, arg0: Vector3dc) -> Matrix3d: ...

  @overload
  def scale(self, arg0: float, arg1: Matrix3d) -> Matrix3d: ...

  @overload
  def scale(self, arg0: float, arg1: Matrix3d) -> Matrix3d: ...

  @overload
  def scale(self, arg0: Vector3dc, arg1: Matrix3d) -> Matrix3d: ...

  @overload
  def scale(self, arg0: Vector3dc, arg1: Matrix3d) -> Matrix3d: ...

  @overload
  def scale(self, arg0: float, arg1: float, arg2: float) -> Matrix3d: ...

  @overload
  def scale(self, arg0: float, arg1: float, arg2: float, arg3: Matrix3d) -> Matrix3d: ...

  @overload
  def scale(self, arg0: float, arg1: float, arg2: float, arg3: Matrix3d) -> Matrix3d: ...

  @overload
  def scaleLocal(self, arg0: float, arg1: float, arg2: float) -> Matrix3d: ...

  @overload
  def scaleLocal(self, arg0: float, arg1: float, arg2: float, arg3: Matrix3d) -> Matrix3d: ...

  @overload
  def scaleLocal(self, arg0: float, arg1: float, arg2: float, arg3: Matrix3d) -> Matrix3d: ...

  @overload
  def scaling(self, arg0: float) -> Matrix3d: ...

  @overload
  def scaling(self, arg0: Vector3dc) -> Matrix3d: ...

  @overload
  def scaling(self, arg0: float, arg1: float, arg2: float) -> Matrix3d: ...

  @overload
  def set(self, arg0: list[float]) -> Matrix3d: ...

  @overload
  def set(self, arg0: list[float]) -> Matrix3d: ...

  @overload
  def set(self, arg0: ByteBuffer) -> Matrix3d: ...

  @overload
  def set(self, arg0: DoubleBuffer) -> Matrix3d: ...

  @overload
  def set(self, arg0: FloatBuffer) -> Matrix3d: ...

  @overload
  def set(self, arg0: AxisAngle4d) -> Matrix3d: ...

  @overload
  def set(self, arg0: AxisAngle4f) -> Matrix3d: ...

  @overload
  def set(self, arg0: Matrix2dc) -> Matrix3d: ...

  @overload
  def set(self, arg0: Matrix2fc) -> Matrix3d: ...

  @overload
  def set(self, arg0: Matrix3dc) -> Matrix3d: ...

  @overload
  def set(self, arg0: Matrix3fc) -> Matrix3d: ...

  @overload
  def set(self, arg0: Matrix4dc) -> Matrix3d: ...

  @overload
  def set(self, arg0: Matrix4fc) -> Matrix3d: ...

  @overload
  def set(self, arg0: Matrix4x3dc) -> Matrix3d: ...

  @overload
  def set(self, arg0: Quaterniondc) -> Matrix3d: ...

  @overload
  def set(self, arg0: Quaternionfc) -> Matrix3d: ...

  @overload
  def set(self, arg0: int, arg1: int, arg2: float) -> Matrix3d: ...

  @overload
  def set(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Vector3dc) -> Matrix3d: ...

  @overload
  def set(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float) -> Matrix3d: ...

  @overload
  def setColumn(self, arg0: int, arg1: Vector3dc) -> Matrix3d: ...

  @overload
  def setColumn(self, arg0: int, arg1: float, arg2: float, arg3: float) -> Matrix3d: ...

  def setFloats(self, arg0: ByteBuffer) -> Matrix3d: ...

  def setFromAddress(self, arg0: int) -> Matrix3d: ...

  @overload
  def setLookAlong(self, arg0: Vector3dc, arg1: Vector3dc) -> Matrix3d: ...

  @overload
  def setLookAlong(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix3d: ...

  @overload
  def setRow(self, arg0: int, arg1: Vector3dc) -> Matrix3d: ...

  @overload
  def setRow(self, arg0: int, arg1: float, arg2: float, arg3: float) -> Matrix3d: ...

  def setRowColumn(self, arg0: int, arg1: int, arg2: float) -> Matrix3d: ...

  def setSkewSymmetric(self, arg0: float, arg1: float, arg2: float) -> Matrix3d: ...

  @overload
  def setTransposed(self, arg0: Matrix3dc) -> Matrix3d: ...

  @overload
  def setTransposed(self, arg0: Matrix3fc) -> Matrix3d: ...

  @overload
  def sub(self, arg0: Matrix3dc) -> Matrix3d: ...

  @overload
  def sub(self, arg0: Matrix3dc, arg1: Matrix3d) -> Matrix3d: ...

  @overload
  def sub(self, arg0: Matrix3dc, arg1: Matrix3d) -> Matrix3d: ...

  def swap(self, arg0: Matrix3d) -> Matrix3d: ...

  @overload
  def toString(self) -> str: ...

  @overload
  def toString(self, arg0: NumberFormat) -> str: ...

  @overload
  def transform(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transform(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transform(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transform(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transform(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def transform(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def transform(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def transform(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def transform(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def transform(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def transformTranspose(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformTranspose(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformTranspose(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def transformTranspose(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def transformTranspose(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def transformTranspose(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def transpose(self) -> Matrix3d: ...

  @overload
  def transpose(self, arg0: Matrix3d) -> Matrix3d: ...

  @overload
  def transpose(self, arg0: Matrix3d) -> Matrix3d: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  def zero(self) -> Matrix3d: ...

  @overload
  def __init__(self):
    self.m00: float

    self.m01: float

    self.m02: float

    self.m10: float

    self.m11: float

    self.m12: float

    self.m20: float

    self.m21: float

    self.m22: float

  @overload
  def __init__(self, arg0: DoubleBuffer): ...
  @overload
  def __init__(self, arg0: Matrix2dc): ...
  @overload
  def __init__(self, arg0: Matrix2fc): ...
  @overload
  def __init__(self, arg0: Matrix3dc): ...
  @overload
  def __init__(self, arg0: Matrix3fc): ...
  @overload
  def __init__(self, arg0: Matrix4dc): ...
  @overload
  def __init__(self, arg0: Matrix4fc): ...
  @overload
  def __init__(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Vector3dc): ...
  @overload
  def __init__(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float): ...


class Matrix3dStack(Matrix3d):

  def clear(self) -> Matrix3dStack: ...

  def equals(self, arg0: object) -> bool: ...

  def hashCode(self) -> int: ...

  def popMatrix(self) -> Matrix3dStack: ...

  def pushMatrix(self) -> Matrix3dStack: ...

  def readExternal(self, arg0: ObjectInput) -> None: ...

  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: int): ...


class Matrix3dc:

  def add(self, arg0: Matrix3dc, arg1: Matrix3d) -> Matrix3d: ...

  def cofactor(self, arg0: Matrix3d) -> Matrix3d: ...

  def determinant(self) -> float: ...

  def equals(self, arg0: Matrix3dc, arg1: float) -> bool: ...

  @overload
  def get(self, arg0: list[float]) -> list[float]: ...

  @overload
  def get(self, arg0: list[float]) -> list[float]: ...

  @overload
  def get(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def get(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get(self, arg0: Matrix3d) -> Matrix3d: ...

  @overload
  def get(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def get(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def get(self, arg0: int, arg1: int) -> float: ...

  @overload
  def get(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: int, arg1: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def get(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  def getColumn(self, arg0: int, arg1: Vector3d) -> Vector3d: ...

  def getEulerAnglesZYX(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def getFloats(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getFloats(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getNormalizedRotation(self, arg0: Quaterniond) -> Quaterniond: ...

  @overload
  def getNormalizedRotation(self, arg0: Quaternionf) -> Quaternionf: ...

  def getRotation(self, arg0: AxisAngle4f) -> AxisAngle4f: ...

  def getRow(self, arg0: int, arg1: Vector3d) -> Vector3d: ...

  def getRowColumn(self, arg0: int, arg1: int) -> float: ...

  def getScale(self, arg0: Vector3d) -> Vector3d: ...

  def getToAddress(self, arg0: int) -> Matrix3dc: ...

  @overload
  def getUnnormalizedRotation(self, arg0: Quaterniond) -> Quaterniond: ...

  @overload
  def getUnnormalizedRotation(self, arg0: Quaternionf) -> Quaternionf: ...

  def invert(self, arg0: Matrix3d) -> Matrix3d: ...

  def isFinite(self) -> bool: ...

  def lerp(self, arg0: Matrix3dc, arg1: float, arg2: Matrix3d) -> Matrix3d: ...

  @overload
  def lookAlong(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Matrix3d) -> Matrix3d: ...

  @overload
  def lookAlong(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix3d) -> Matrix3d: ...

  def m00(self) -> float: ...

  def m01(self) -> float: ...

  def m02(self) -> float: ...

  def m10(self) -> float: ...

  def m11(self) -> float: ...

  def m12(self) -> float: ...

  def m20(self) -> float: ...

  def m21(self) -> float: ...

  def m22(self) -> float: ...

  @overload
  def mul(self, arg0: Matrix3dc, arg1: Matrix3d) -> Matrix3d: ...

  @overload
  def mul(self, arg0: Matrix3fc, arg1: Matrix3d) -> Matrix3d: ...

  def mulComponentWise(self, arg0: Matrix3dc, arg1: Matrix3d) -> Matrix3d: ...

  def mulLocal(self, arg0: Matrix3dc, arg1: Matrix3d) -> Matrix3d: ...

  def normal(self, arg0: Matrix3d) -> Matrix3d: ...

  def normalizedPositiveX(self, arg0: Vector3d) -> Vector3d: ...

  def normalizedPositiveY(self, arg0: Vector3d) -> Vector3d: ...

  def normalizedPositiveZ(self, arg0: Vector3d) -> Vector3d: ...

  def obliqueZ(self, arg0: float, arg1: float, arg2: Matrix3d) -> Matrix3d: ...

  def positiveX(self, arg0: Vector3d) -> Vector3d: ...

  def positiveY(self, arg0: Vector3d) -> Vector3d: ...

  def positiveZ(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def quadraticFormProduct(self, arg0: Vector3dc) -> float: ...

  @overload
  def quadraticFormProduct(self, arg0: Vector3fc) -> float: ...

  @overload
  def quadraticFormProduct(self, arg0: float, arg1: float, arg2: float) -> float: ...

  @overload
  def reflect(self, arg0: Quaterniondc, arg1: Matrix3d) -> Matrix3d: ...

  @overload
  def reflect(self, arg0: Vector3dc, arg1: Matrix3d) -> Matrix3d: ...

  @overload
  def reflect(self, arg0: float, arg1: float, arg2: float, arg3: Matrix3d) -> Matrix3d: ...

  @overload
  def rotate(self, arg0: AxisAngle4d, arg1: Matrix3d) -> Matrix3d: ...

  @overload
  def rotate(self, arg0: AxisAngle4f, arg1: Matrix3d) -> Matrix3d: ...

  @overload
  def rotate(self, arg0: Quaterniondc, arg1: Matrix3d) -> Matrix3d: ...

  @overload
  def rotate(self, arg0: Quaternionfc, arg1: Matrix3d) -> Matrix3d: ...

  @overload
  def rotate(self, arg0: float, arg1: Vector3dc, arg2: Matrix3d) -> Matrix3d: ...

  @overload
  def rotate(self, arg0: float, arg1: Vector3fc, arg2: Matrix3d) -> Matrix3d: ...

  @overload
  def rotate(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix3d) -> Matrix3d: ...

  @overload
  def rotateLocal(self, arg0: Quaterniondc, arg1: Matrix3d) -> Matrix3d: ...

  @overload
  def rotateLocal(self, arg0: Quaternionfc, arg1: Matrix3d) -> Matrix3d: ...

  @overload
  def rotateLocal(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix3d) -> Matrix3d: ...

  def rotateLocalX(self, arg0: float, arg1: Matrix3d) -> Matrix3d: ...

  def rotateLocalY(self, arg0: float, arg1: Matrix3d) -> Matrix3d: ...

  def rotateLocalZ(self, arg0: float, arg1: Matrix3d) -> Matrix3d: ...

  @overload
  def rotateTowards(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Matrix3d) -> Matrix3d: ...

  @overload
  def rotateTowards(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix3d) -> Matrix3d: ...

  def rotateX(self, arg0: float, arg1: Matrix3d) -> Matrix3d: ...

  def rotateXYZ(self, arg0: float, arg1: float, arg2: float, arg3: Matrix3d) -> Matrix3d: ...

  def rotateY(self, arg0: float, arg1: Matrix3d) -> Matrix3d: ...

  def rotateYXZ(self, arg0: float, arg1: float, arg2: float, arg3: Matrix3d) -> Matrix3d: ...

  def rotateZ(self, arg0: float, arg1: Matrix3d) -> Matrix3d: ...

  def rotateZYX(self, arg0: float, arg1: float, arg2: float, arg3: Matrix3d) -> Matrix3d: ...

  @overload
  def scale(self, arg0: float, arg1: Matrix3d) -> Matrix3d: ...

  @overload
  def scale(self, arg0: Vector3dc, arg1: Matrix3d) -> Matrix3d: ...

  @overload
  def scale(self, arg0: float, arg1: float, arg2: float, arg3: Matrix3d) -> Matrix3d: ...

  def scaleLocal(self, arg0: float, arg1: float, arg2: float, arg3: Matrix3d) -> Matrix3d: ...

  def sub(self, arg0: Matrix3dc, arg1: Matrix3d) -> Matrix3d: ...

  @overload
  def transform(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transform(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transform(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def transform(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def transform(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def transformTranspose(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformTranspose(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def transformTranspose(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  def transpose(self, arg0: Matrix3d) -> Matrix3d: ...


class Matrix3f:

  @overload
  def add(self, arg0: Matrix3fc) -> Matrix3f: ...

  @overload
  def add(self, arg0: Matrix3fc, arg1: Matrix3f) -> Matrix3f: ...

  @overload
  def add(self, arg0: Matrix3fc, arg1: Matrix3f) -> Matrix3f: ...

  @overload
  def cofactor(self) -> Matrix3f: ...

  @overload
  def cofactor(self, arg0: Matrix3f) -> Matrix3f: ...

  @overload
  def cofactor(self, arg0: Matrix3f) -> Matrix3f: ...

  @overload
  def determinant(self) -> float: ...

  @overload
  def determinant(self) -> float: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def equals(self, arg0: Matrix3fc, arg1: float) -> bool: ...

  @overload
  def equals(self, arg0: Matrix3fc, arg1: float) -> bool: ...

  @overload
  def get(self, arg0: list[float]) -> list[float]: ...

  @overload
  def get(self, arg0: list[float]) -> list[float]: ...

  @overload
  def get(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get(self, arg0: Matrix3f) -> Matrix3f: ...

  @overload
  def get(self, arg0: Matrix3f) -> Matrix3f: ...

  @overload
  def get(self, arg0: Matrix4f) -> Matrix4f: ...

  @overload
  def get(self, arg0: Matrix4f) -> Matrix4f: ...

  @overload
  def get(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def get(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def get(self, arg0: int, arg1: int) -> float: ...

  @overload
  def get(self, arg0: int, arg1: int) -> float: ...

  @overload
  def get(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get3x4(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get3x4(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get3x4(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get3x4(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get3x4(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get3x4(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get3x4(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get3x4(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def getColumn(self, arg0: int, arg1: Vector3f) -> Vector3f: ...

  @overload
  def getColumn(self, arg0: int, arg1: Vector3f) -> Vector3f: ...

  @overload
  def getEulerAnglesZYX(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def getEulerAnglesZYX(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def getNormalizedRotation(self, arg0: Quaterniond) -> Quaterniond: ...

  @overload
  def getNormalizedRotation(self, arg0: Quaterniond) -> Quaterniond: ...

  @overload
  def getNormalizedRotation(self, arg0: Quaternionf) -> Quaternionf: ...

  @overload
  def getNormalizedRotation(self, arg0: Quaternionf) -> Quaternionf: ...

  @overload
  def getRotation(self, arg0: AxisAngle4f) -> AxisAngle4f: ...

  @overload
  def getRotation(self, arg0: AxisAngle4f) -> AxisAngle4f: ...

  @overload
  def getRow(self, arg0: int, arg1: Vector3f) -> Vector3f: ...

  @overload
  def getRow(self, arg0: int, arg1: Vector3f) -> Vector3f: ...

  @overload
  def getRowColumn(self, arg0: int, arg1: int) -> float: ...

  @overload
  def getRowColumn(self, arg0: int, arg1: int) -> float: ...

  @overload
  def getScale(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def getScale(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def getToAddress(self, arg0: int) -> Matrix3fc: ...

  @overload
  def getToAddress(self, arg0: int) -> Matrix3fc: ...

  @overload
  def getTransposed(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getTransposed(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getTransposed(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def getTransposed(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def getTransposed(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getTransposed(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getTransposed(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def getTransposed(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def getUnnormalizedRotation(self, arg0: Quaterniond) -> Quaterniond: ...

  @overload
  def getUnnormalizedRotation(self, arg0: Quaterniond) -> Quaterniond: ...

  @overload
  def getUnnormalizedRotation(self, arg0: Quaternionf) -> Quaternionf: ...

  @overload
  def getUnnormalizedRotation(self, arg0: Quaternionf) -> Quaternionf: ...

  def hashCode(self) -> int: ...

  def identity(self) -> Matrix3f: ...

  @overload
  def invert(self) -> Matrix3f: ...

  @overload
  def invert(self, arg0: Matrix3f) -> Matrix3f: ...

  @overload
  def invert(self, arg0: Matrix3f) -> Matrix3f: ...

  @overload
  def isFinite(self) -> bool: ...

  @overload
  def isFinite(self) -> bool: ...

  @overload
  def lerp(self, arg0: Matrix3fc, arg1: float) -> Matrix3f: ...

  @overload
  def lerp(self, arg0: Matrix3fc, arg1: float, arg2: Matrix3f) -> Matrix3f: ...

  @overload
  def lerp(self, arg0: Matrix3fc, arg1: float, arg2: Matrix3f) -> Matrix3f: ...

  @overload
  def lookAlong(self, arg0: Vector3fc, arg1: Vector3fc) -> Matrix3f: ...

  @overload
  def lookAlong(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Matrix3f) -> Matrix3f: ...

  @overload
  def lookAlong(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Matrix3f) -> Matrix3f: ...

  @overload
  def lookAlong(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix3f: ...

  @overload
  def lookAlong(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix3f) -> Matrix3f: ...

  @overload
  def lookAlong(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix3f) -> Matrix3f: ...

  @overload
  def m00(self) -> float: ...

  @overload
  def m00(self) -> float: ...

  @overload
  def m00(self, arg0: float) -> Matrix3f: ...

  @overload
  def m01(self) -> float: ...

  @overload
  def m01(self) -> float: ...

  @overload
  def m01(self, arg0: float) -> Matrix3f: ...

  @overload
  def m02(self) -> float: ...

  @overload
  def m02(self) -> float: ...

  @overload
  def m02(self, arg0: float) -> Matrix3f: ...

  @overload
  def m10(self) -> float: ...

  @overload
  def m10(self) -> float: ...

  @overload
  def m10(self, arg0: float) -> Matrix3f: ...

  @overload
  def m11(self) -> float: ...

  @overload
  def m11(self) -> float: ...

  @overload
  def m11(self, arg0: float) -> Matrix3f: ...

  @overload
  def m12(self) -> float: ...

  @overload
  def m12(self) -> float: ...

  @overload
  def m12(self, arg0: float) -> Matrix3f: ...

  @overload
  def m20(self) -> float: ...

  @overload
  def m20(self) -> float: ...

  @overload
  def m20(self, arg0: float) -> Matrix3f: ...

  @overload
  def m21(self) -> float: ...

  @overload
  def m21(self) -> float: ...

  @overload
  def m21(self, arg0: float) -> Matrix3f: ...

  @overload
  def m22(self) -> float: ...

  @overload
  def m22(self) -> float: ...

  @overload
  def m22(self, arg0: float) -> Matrix3f: ...

  @overload
  def mul(self, arg0: Matrix3fc) -> Matrix3f: ...

  @overload
  def mul(self, arg0: Matrix3fc, arg1: Matrix3f) -> Matrix3f: ...

  @overload
  def mul(self, arg0: Matrix3fc, arg1: Matrix3f) -> Matrix3f: ...

  @overload
  def mulComponentWise(self, arg0: Matrix3fc) -> Matrix3f: ...

  @overload
  def mulComponentWise(self, arg0: Matrix3fc, arg1: Matrix3f) -> Matrix3f: ...

  @overload
  def mulComponentWise(self, arg0: Matrix3fc, arg1: Matrix3f) -> Matrix3f: ...

  @overload
  def mulLocal(self, arg0: Matrix3fc) -> Matrix3f: ...

  @overload
  def mulLocal(self, arg0: Matrix3fc, arg1: Matrix3f) -> Matrix3f: ...

  @overload
  def mulLocal(self, arg0: Matrix3fc, arg1: Matrix3f) -> Matrix3f: ...

  @overload
  def normal(self) -> Matrix3f: ...

  @overload
  def normal(self, arg0: Matrix3f) -> Matrix3f: ...

  @overload
  def normal(self, arg0: Matrix3f) -> Matrix3f: ...

  @overload
  def normalizedPositiveX(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def normalizedPositiveX(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def normalizedPositiveY(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def normalizedPositiveY(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def normalizedPositiveZ(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def normalizedPositiveZ(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def obliqueZ(self, arg0: float, arg1: float) -> Matrix3f: ...

  @overload
  def obliqueZ(self, arg0: float, arg1: float, arg2: Matrix3f) -> Matrix3f: ...

  @overload
  def obliqueZ(self, arg0: float, arg1: float, arg2: Matrix3f) -> Matrix3f: ...

  @overload
  def positiveX(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def positiveX(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def positiveY(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def positiveY(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def positiveZ(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def positiveZ(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def quadraticFormProduct(self, arg0: Vector3fc) -> float: ...

  @overload
  def quadraticFormProduct(self, arg0: Vector3fc) -> float: ...

  @overload
  def quadraticFormProduct(self, arg0: float, arg1: float, arg2: float) -> float: ...

  @overload
  def quadraticFormProduct(self, arg0: float, arg1: float, arg2: float) -> float: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def reflect(self, arg0: Quaternionfc) -> Matrix3f: ...

  @overload
  def reflect(self, arg0: Vector3fc) -> Matrix3f: ...

  @overload
  def reflect(self, arg0: Quaternionfc, arg1: Matrix3f) -> Matrix3f: ...

  @overload
  def reflect(self, arg0: Quaternionfc, arg1: Matrix3f) -> Matrix3f: ...

  @overload
  def reflect(self, arg0: Vector3fc, arg1: Matrix3f) -> Matrix3f: ...

  @overload
  def reflect(self, arg0: Vector3fc, arg1: Matrix3f) -> Matrix3f: ...

  @overload
  def reflect(self, arg0: float, arg1: float, arg2: float) -> Matrix3f: ...

  @overload
  def reflect(self, arg0: float, arg1: float, arg2: float, arg3: Matrix3f) -> Matrix3f: ...

  @overload
  def reflect(self, arg0: float, arg1: float, arg2: float, arg3: Matrix3f) -> Matrix3f: ...

  @overload
  def reflection(self, arg0: Quaternionfc) -> Matrix3f: ...

  @overload
  def reflection(self, arg0: Vector3fc) -> Matrix3f: ...

  @overload
  def reflection(self, arg0: float, arg1: float, arg2: float) -> Matrix3f: ...

  @overload
  def rotate(self, arg0: AxisAngle4f) -> Matrix3f: ...

  @overload
  def rotate(self, arg0: Quaternionfc) -> Matrix3f: ...

  @overload
  def rotate(self, arg0: float, arg1: Vector3fc) -> Matrix3f: ...

  @overload
  def rotate(self, arg0: AxisAngle4f, arg1: Matrix3f) -> Matrix3f: ...

  @overload
  def rotate(self, arg0: AxisAngle4f, arg1: Matrix3f) -> Matrix3f: ...

  @overload
  def rotate(self, arg0: Quaternionfc, arg1: Matrix3f) -> Matrix3f: ...

  @overload
  def rotate(self, arg0: Quaternionfc, arg1: Matrix3f) -> Matrix3f: ...

  @overload
  def rotate(self, arg0: float, arg1: Vector3fc, arg2: Matrix3f) -> Matrix3f: ...

  @overload
  def rotate(self, arg0: float, arg1: Vector3fc, arg2: Matrix3f) -> Matrix3f: ...

  @overload
  def rotate(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix3f: ...

  @overload
  def rotate(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix3f) -> Matrix3f: ...

  @overload
  def rotate(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix3f) -> Matrix3f: ...

  @overload
  def rotateLocal(self, arg0: Quaternionfc) -> Matrix3f: ...

  @overload
  def rotateLocal(self, arg0: Quaternionfc, arg1: Matrix3f) -> Matrix3f: ...

  @overload
  def rotateLocal(self, arg0: Quaternionfc, arg1: Matrix3f) -> Matrix3f: ...

  @overload
  def rotateLocal(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix3f: ...

  @overload
  def rotateLocal(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix3f) -> Matrix3f: ...

  @overload
  def rotateLocal(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix3f) -> Matrix3f: ...

  @overload
  def rotateLocalX(self, arg0: float) -> Matrix3f: ...

  @overload
  def rotateLocalX(self, arg0: float, arg1: Matrix3f) -> Matrix3f: ...

  @overload
  def rotateLocalX(self, arg0: float, arg1: Matrix3f) -> Matrix3f: ...

  @overload
  def rotateLocalY(self, arg0: float) -> Matrix3f: ...

  @overload
  def rotateLocalY(self, arg0: float, arg1: Matrix3f) -> Matrix3f: ...

  @overload
  def rotateLocalY(self, arg0: float, arg1: Matrix3f) -> Matrix3f: ...

  @overload
  def rotateLocalZ(self, arg0: float) -> Matrix3f: ...

  @overload
  def rotateLocalZ(self, arg0: float, arg1: Matrix3f) -> Matrix3f: ...

  @overload
  def rotateLocalZ(self, arg0: float, arg1: Matrix3f) -> Matrix3f: ...

  @overload
  def rotateTowards(self, arg0: Vector3fc, arg1: Vector3fc) -> Matrix3f: ...

  @overload
  def rotateTowards(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Matrix3f) -> Matrix3f: ...

  @overload
  def rotateTowards(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Matrix3f) -> Matrix3f: ...

  @overload
  def rotateTowards(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix3f: ...

  @overload
  def rotateTowards(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix3f) -> Matrix3f: ...

  @overload
  def rotateTowards(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix3f) -> Matrix3f: ...

  @overload
  def rotateX(self, arg0: float) -> Matrix3f: ...

  @overload
  def rotateX(self, arg0: float, arg1: Matrix3f) -> Matrix3f: ...

  @overload
  def rotateX(self, arg0: float, arg1: Matrix3f) -> Matrix3f: ...

  @overload
  def rotateXYZ(self, arg0: Vector3f) -> Matrix3f: ...

  @overload
  def rotateXYZ(self, arg0: float, arg1: float, arg2: float) -> Matrix3f: ...

  @overload
  def rotateXYZ(self, arg0: float, arg1: float, arg2: float, arg3: Matrix3f) -> Matrix3f: ...

  @overload
  def rotateXYZ(self, arg0: float, arg1: float, arg2: float, arg3: Matrix3f) -> Matrix3f: ...

  @overload
  def rotateY(self, arg0: float) -> Matrix3f: ...

  @overload
  def rotateY(self, arg0: float, arg1: Matrix3f) -> Matrix3f: ...

  @overload
  def rotateY(self, arg0: float, arg1: Matrix3f) -> Matrix3f: ...

  @overload
  def rotateYXZ(self, arg0: Vector3f) -> Matrix3f: ...

  @overload
  def rotateYXZ(self, arg0: float, arg1: float, arg2: float) -> Matrix3f: ...

  @overload
  def rotateYXZ(self, arg0: float, arg1: float, arg2: float, arg3: Matrix3f) -> Matrix3f: ...

  @overload
  def rotateYXZ(self, arg0: float, arg1: float, arg2: float, arg3: Matrix3f) -> Matrix3f: ...

  @overload
  def rotateZ(self, arg0: float) -> Matrix3f: ...

  @overload
  def rotateZ(self, arg0: float, arg1: Matrix3f) -> Matrix3f: ...

  @overload
  def rotateZ(self, arg0: float, arg1: Matrix3f) -> Matrix3f: ...

  @overload
  def rotateZYX(self, arg0: Vector3f) -> Matrix3f: ...

  @overload
  def rotateZYX(self, arg0: float, arg1: float, arg2: float) -> Matrix3f: ...

  @overload
  def rotateZYX(self, arg0: float, arg1: float, arg2: float, arg3: Matrix3f) -> Matrix3f: ...

  @overload
  def rotateZYX(self, arg0: float, arg1: float, arg2: float, arg3: Matrix3f) -> Matrix3f: ...

  @overload
  def rotation(self, arg0: AxisAngle4f) -> Matrix3f: ...

  @overload
  def rotation(self, arg0: Quaternionfc) -> Matrix3f: ...

  @overload
  def rotation(self, arg0: float, arg1: Vector3fc) -> Matrix3f: ...

  @overload
  def rotation(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix3f: ...

  @overload
  def rotationTowards(self, arg0: Vector3fc, arg1: Vector3fc) -> Matrix3f: ...

  @overload
  def rotationTowards(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix3f: ...

  def rotationX(self, arg0: float) -> Matrix3f: ...

  def rotationXYZ(self, arg0: float, arg1: float, arg2: float) -> Matrix3f: ...

  def rotationY(self, arg0: float) -> Matrix3f: ...

  def rotationYXZ(self, arg0: float, arg1: float, arg2: float) -> Matrix3f: ...

  def rotationZ(self, arg0: float) -> Matrix3f: ...

  def rotationZYX(self, arg0: float, arg1: float, arg2: float) -> Matrix3f: ...

  @overload
  def scale(self, arg0: float) -> Matrix3f: ...

  @overload
  def scale(self, arg0: Vector3fc) -> Matrix3f: ...

  @overload
  def scale(self, arg0: float, arg1: Matrix3f) -> Matrix3f: ...

  @overload
  def scale(self, arg0: float, arg1: Matrix3f) -> Matrix3f: ...

  @overload
  def scale(self, arg0: Vector3fc, arg1: Matrix3f) -> Matrix3f: ...

  @overload
  def scale(self, arg0: Vector3fc, arg1: Matrix3f) -> Matrix3f: ...

  @overload
  def scale(self, arg0: float, arg1: float, arg2: float) -> Matrix3f: ...

  @overload
  def scale(self, arg0: float, arg1: float, arg2: float, arg3: Matrix3f) -> Matrix3f: ...

  @overload
  def scale(self, arg0: float, arg1: float, arg2: float, arg3: Matrix3f) -> Matrix3f: ...

  @overload
  def scaleLocal(self, arg0: float, arg1: float, arg2: float) -> Matrix3f: ...

  @overload
  def scaleLocal(self, arg0: float, arg1: float, arg2: float, arg3: Matrix3f) -> Matrix3f: ...

  @overload
  def scaleLocal(self, arg0: float, arg1: float, arg2: float, arg3: Matrix3f) -> Matrix3f: ...

  @overload
  def scaling(self, arg0: float) -> Matrix3f: ...

  @overload
  def scaling(self, arg0: Vector3fc) -> Matrix3f: ...

  @overload
  def scaling(self, arg0: float, arg1: float, arg2: float) -> Matrix3f: ...

  @overload
  def set(self, arg0: list[float]) -> Matrix3f: ...

  @overload
  def set(self, arg0: ByteBuffer) -> Matrix3f: ...

  @overload
  def set(self, arg0: FloatBuffer) -> Matrix3f: ...

  @overload
  def set(self, arg0: AxisAngle4d) -> Matrix3f: ...

  @overload
  def set(self, arg0: AxisAngle4f) -> Matrix3f: ...

  @overload
  def set(self, arg0: Matrix2fc) -> Matrix3f: ...

  @overload
  def set(self, arg0: Matrix3fc) -> Matrix3f: ...

  @overload
  def set(self, arg0: Matrix4fc) -> Matrix3f: ...

  @overload
  def set(self, arg0: Matrix4x3fc) -> Matrix3f: ...

  @overload
  def set(self, arg0: Quaterniondc) -> Matrix3f: ...

  @overload
  def set(self, arg0: Quaternionfc) -> Matrix3f: ...

  @overload
  def set(self, arg0: int, arg1: int, arg2: float) -> Matrix3f: ...

  @overload
  def set(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Vector3fc) -> Matrix3f: ...

  @overload
  def set(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float) -> Matrix3f: ...

  @overload
  def setColumn(self, arg0: int, arg1: Vector3fc) -> Matrix3f: ...

  @overload
  def setColumn(self, arg0: int, arg1: float, arg2: float, arg3: float) -> Matrix3f: ...

  def setFromAddress(self, arg0: int) -> Matrix3f: ...

  @overload
  def setLookAlong(self, arg0: Vector3fc, arg1: Vector3fc) -> Matrix3f: ...

  @overload
  def setLookAlong(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix3f: ...

  @overload
  def setRow(self, arg0: int, arg1: Vector3fc) -> Matrix3f: ...

  @overload
  def setRow(self, arg0: int, arg1: float, arg2: float, arg3: float) -> Matrix3f: ...

  def setRowColumn(self, arg0: int, arg1: int, arg2: float) -> Matrix3f: ...

  def setSkewSymmetric(self, arg0: float, arg1: float, arg2: float) -> Matrix3f: ...

  def setTransposed(self, arg0: Matrix3fc) -> Matrix3f: ...

  @overload
  def sub(self, arg0: Matrix3fc) -> Matrix3f: ...

  @overload
  def sub(self, arg0: Matrix3fc, arg1: Matrix3f) -> Matrix3f: ...

  @overload
  def sub(self, arg0: Matrix3fc, arg1: Matrix3f) -> Matrix3f: ...

  def swap(self, arg0: Matrix3f) -> Matrix3f: ...

  @overload
  def toString(self) -> str: ...

  @overload
  def toString(self, arg0: NumberFormat) -> str: ...

  @overload
  def transform(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transform(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transform(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def transform(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def transform(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  @overload
  def transform(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  @overload
  def transformTranspose(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformTranspose(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformTranspose(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def transformTranspose(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def transformTranspose(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  @overload
  def transformTranspose(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  @overload
  def transpose(self) -> Matrix3f: ...

  @overload
  def transpose(self, arg0: Matrix3f) -> Matrix3f: ...

  @overload
  def transpose(self, arg0: Matrix3f) -> Matrix3f: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  def zero(self) -> Matrix3f: ...

  @overload
  def __init__(self):
    self.m00: float

    self.m01: float

    self.m02: float

    self.m10: float

    self.m11: float

    self.m12: float

    self.m20: float

    self.m21: float

    self.m22: float

  @overload
  def __init__(self, arg0: FloatBuffer): ...
  @overload
  def __init__(self, arg0: Matrix2fc): ...
  @overload
  def __init__(self, arg0: Matrix3fc): ...
  @overload
  def __init__(self, arg0: Matrix4fc): ...
  @overload
  def __init__(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Vector3fc): ...
  @overload
  def __init__(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float): ...


class Matrix3fStack(Matrix3f):

  def clear(self) -> Matrix3fStack: ...

  def equals(self, arg0: object) -> bool: ...

  def hashCode(self) -> int: ...

  def popMatrix(self) -> Matrix3fStack: ...

  def pushMatrix(self) -> Matrix3fStack: ...

  def readExternal(self, arg0: ObjectInput) -> None: ...

  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: int): ...


class Matrix3fc:

  def add(self, arg0: Matrix3fc, arg1: Matrix3f) -> Matrix3f: ...

  def cofactor(self, arg0: Matrix3f) -> Matrix3f: ...

  def determinant(self) -> float: ...

  def equals(self, arg0: Matrix3fc, arg1: float) -> bool: ...

  @overload
  def get(self, arg0: list[float]) -> list[float]: ...

  @overload
  def get(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get(self, arg0: Matrix3f) -> Matrix3f: ...

  @overload
  def get(self, arg0: Matrix4f) -> Matrix4f: ...

  @overload
  def get(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def get(self, arg0: int, arg1: int) -> float: ...

  @overload
  def get(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get3x4(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get3x4(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get3x4(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get3x4(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  def getColumn(self, arg0: int, arg1: Vector3f) -> Vector3f: ...

  def getEulerAnglesZYX(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def getNormalizedRotation(self, arg0: Quaterniond) -> Quaterniond: ...

  @overload
  def getNormalizedRotation(self, arg0: Quaternionf) -> Quaternionf: ...

  def getRotation(self, arg0: AxisAngle4f) -> AxisAngle4f: ...

  def getRow(self, arg0: int, arg1: Vector3f) -> Vector3f: ...

  def getRowColumn(self, arg0: int, arg1: int) -> float: ...

  def getScale(self, arg0: Vector3f) -> Vector3f: ...

  def getToAddress(self, arg0: int) -> Matrix3fc: ...

  @overload
  def getTransposed(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getTransposed(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def getTransposed(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getTransposed(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def getUnnormalizedRotation(self, arg0: Quaterniond) -> Quaterniond: ...

  @overload
  def getUnnormalizedRotation(self, arg0: Quaternionf) -> Quaternionf: ...

  def invert(self, arg0: Matrix3f) -> Matrix3f: ...

  def isFinite(self) -> bool: ...

  def lerp(self, arg0: Matrix3fc, arg1: float, arg2: Matrix3f) -> Matrix3f: ...

  @overload
  def lookAlong(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Matrix3f) -> Matrix3f: ...

  @overload
  def lookAlong(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix3f) -> Matrix3f: ...

  def m00(self) -> float: ...

  def m01(self) -> float: ...

  def m02(self) -> float: ...

  def m10(self) -> float: ...

  def m11(self) -> float: ...

  def m12(self) -> float: ...

  def m20(self) -> float: ...

  def m21(self) -> float: ...

  def m22(self) -> float: ...

  def mul(self, arg0: Matrix3fc, arg1: Matrix3f) -> Matrix3f: ...

  def mulComponentWise(self, arg0: Matrix3fc, arg1: Matrix3f) -> Matrix3f: ...

  def mulLocal(self, arg0: Matrix3fc, arg1: Matrix3f) -> Matrix3f: ...

  def normal(self, arg0: Matrix3f) -> Matrix3f: ...

  def normalizedPositiveX(self, arg0: Vector3f) -> Vector3f: ...

  def normalizedPositiveY(self, arg0: Vector3f) -> Vector3f: ...

  def normalizedPositiveZ(self, arg0: Vector3f) -> Vector3f: ...

  def obliqueZ(self, arg0: float, arg1: float, arg2: Matrix3f) -> Matrix3f: ...

  def positiveX(self, arg0: Vector3f) -> Vector3f: ...

  def positiveY(self, arg0: Vector3f) -> Vector3f: ...

  def positiveZ(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def quadraticFormProduct(self, arg0: Vector3fc) -> float: ...

  @overload
  def quadraticFormProduct(self, arg0: float, arg1: float, arg2: float) -> float: ...

  @overload
  def reflect(self, arg0: Quaternionfc, arg1: Matrix3f) -> Matrix3f: ...

  @overload
  def reflect(self, arg0: Vector3fc, arg1: Matrix3f) -> Matrix3f: ...

  @overload
  def reflect(self, arg0: float, arg1: float, arg2: float, arg3: Matrix3f) -> Matrix3f: ...

  @overload
  def rotate(self, arg0: AxisAngle4f, arg1: Matrix3f) -> Matrix3f: ...

  @overload
  def rotate(self, arg0: Quaternionfc, arg1: Matrix3f) -> Matrix3f: ...

  @overload
  def rotate(self, arg0: float, arg1: Vector3fc, arg2: Matrix3f) -> Matrix3f: ...

  @overload
  def rotate(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix3f) -> Matrix3f: ...

  @overload
  def rotateLocal(self, arg0: Quaternionfc, arg1: Matrix3f) -> Matrix3f: ...

  @overload
  def rotateLocal(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix3f) -> Matrix3f: ...

  def rotateLocalX(self, arg0: float, arg1: Matrix3f) -> Matrix3f: ...

  def rotateLocalY(self, arg0: float, arg1: Matrix3f) -> Matrix3f: ...

  def rotateLocalZ(self, arg0: float, arg1: Matrix3f) -> Matrix3f: ...

  @overload
  def rotateTowards(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Matrix3f) -> Matrix3f: ...

  @overload
  def rotateTowards(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix3f) -> Matrix3f: ...

  def rotateX(self, arg0: float, arg1: Matrix3f) -> Matrix3f: ...

  def rotateXYZ(self, arg0: float, arg1: float, arg2: float, arg3: Matrix3f) -> Matrix3f: ...

  def rotateY(self, arg0: float, arg1: Matrix3f) -> Matrix3f: ...

  def rotateYXZ(self, arg0: float, arg1: float, arg2: float, arg3: Matrix3f) -> Matrix3f: ...

  def rotateZ(self, arg0: float, arg1: Matrix3f) -> Matrix3f: ...

  def rotateZYX(self, arg0: float, arg1: float, arg2: float, arg3: Matrix3f) -> Matrix3f: ...

  @overload
  def scale(self, arg0: float, arg1: Matrix3f) -> Matrix3f: ...

  @overload
  def scale(self, arg0: Vector3fc, arg1: Matrix3f) -> Matrix3f: ...

  @overload
  def scale(self, arg0: float, arg1: float, arg2: float, arg3: Matrix3f) -> Matrix3f: ...

  def scaleLocal(self, arg0: float, arg1: float, arg2: float, arg3: Matrix3f) -> Matrix3f: ...

  def sub(self, arg0: Matrix3fc, arg1: Matrix3f) -> Matrix3f: ...

  @overload
  def transform(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transform(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def transform(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  @overload
  def transformTranspose(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformTranspose(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def transformTranspose(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  def transpose(self, arg0: Matrix3f) -> Matrix3f: ...


class Matrix3x2d:

  @overload
  def determinant(self) -> float: ...

  @overload
  def determinant(self) -> float: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def equals(self, arg0: Matrix3x2dc, arg1: float) -> bool: ...

  @overload
  def equals(self, arg0: Matrix3x2dc, arg1: float) -> bool: ...

  @overload
  def get(self, arg0: list[float]) -> list[float]: ...

  @overload
  def get(self, arg0: list[float]) -> list[float]: ...

  @overload
  def get(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def get(self, arg0: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def get(self, arg0: Matrix3x2d) -> Matrix3x2d: ...

  @overload
  def get(self, arg0: Matrix3x2d) -> Matrix3x2d: ...

  @overload
  def get(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def get(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def get(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: int, arg1: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def get(self, arg0: int, arg1: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def get3x3(self, arg0: list[float]) -> list[float]: ...

  @overload
  def get3x3(self, arg0: list[float]) -> list[float]: ...

  @overload
  def get3x3(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get3x3(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get3x3(self, arg0: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def get3x3(self, arg0: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def get3x3(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def get3x3(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def get3x3(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get3x3(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get3x3(self, arg0: int, arg1: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def get3x3(self, arg0: int, arg1: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def get4x4(self, arg0: list[float]) -> list[float]: ...

  @overload
  def get4x4(self, arg0: list[float]) -> list[float]: ...

  @overload
  def get4x4(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get4x4(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get4x4(self, arg0: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def get4x4(self, arg0: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def get4x4(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def get4x4(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def get4x4(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get4x4(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get4x4(self, arg0: int, arg1: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def get4x4(self, arg0: int, arg1: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def getToAddress(self, arg0: int) -> Matrix3x2dc: ...

  @overload
  def getToAddress(self, arg0: int) -> Matrix3x2dc: ...

  def hashCode(self) -> int: ...

  def identity(self) -> Matrix3x2d: ...

  @overload
  def invert(self) -> Matrix3x2d: ...

  @overload
  def invert(self, arg0: Matrix3x2d) -> Matrix3x2d: ...

  @overload
  def invert(self, arg0: Matrix3x2d) -> Matrix3x2d: ...

  @overload
  def isFinite(self) -> bool: ...

  @overload
  def isFinite(self) -> bool: ...

  @overload
  def m00(self) -> float: ...

  @overload
  def m00(self) -> float: ...

  @overload
  def m01(self) -> float: ...

  @overload
  def m01(self) -> float: ...

  @overload
  def m10(self) -> float: ...

  @overload
  def m10(self) -> float: ...

  @overload
  def m11(self) -> float: ...

  @overload
  def m11(self) -> float: ...

  @overload
  def m20(self) -> float: ...

  @overload
  def m20(self) -> float: ...

  @overload
  def m21(self) -> float: ...

  @overload
  def m21(self) -> float: ...

  @overload
  def mul(self, arg0: Matrix3x2dc) -> Matrix3x2d: ...

  @overload
  def mul(self, arg0: Matrix3x2dc, arg1: Matrix3x2d) -> Matrix3x2d: ...

  @overload
  def mul(self, arg0: Matrix3x2dc, arg1: Matrix3x2d) -> Matrix3x2d: ...

  @overload
  def mulLocal(self, arg0: Matrix3x2dc) -> Matrix3x2d: ...

  @overload
  def mulLocal(self, arg0: Matrix3x2dc, arg1: Matrix3x2d) -> Matrix3x2d: ...

  @overload
  def mulLocal(self, arg0: Matrix3x2dc, arg1: Matrix3x2d) -> Matrix3x2d: ...

  @overload
  def normalizedPositiveX(self, arg0: Vector2d) -> Vector2d: ...

  @overload
  def normalizedPositiveX(self, arg0: Vector2d) -> Vector2d: ...

  @overload
  def normalizedPositiveY(self, arg0: Vector2d) -> Vector2d: ...

  @overload
  def normalizedPositiveY(self, arg0: Vector2d) -> Vector2d: ...

  @overload
  def origin(self, arg0: Vector2d) -> Vector2d: ...

  @overload
  def origin(self, arg0: Vector2d) -> Vector2d: ...

  @overload
  def positiveX(self, arg0: Vector2d) -> Vector2d: ...

  @overload
  def positiveX(self, arg0: Vector2d) -> Vector2d: ...

  @overload
  def positiveY(self, arg0: Vector2d) -> Vector2d: ...

  @overload
  def positiveY(self, arg0: Vector2d) -> Vector2d: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def rotate(self, arg0: float) -> Matrix3x2d: ...

  @overload
  def rotate(self, arg0: float, arg1: Matrix3x2d) -> Matrix3x2d: ...

  @overload
  def rotate(self, arg0: float, arg1: Matrix3x2d) -> Matrix3x2d: ...

  @overload
  def rotateAbout(self, arg0: float, arg1: float, arg2: float) -> Matrix3x2d: ...

  @overload
  def rotateAbout(self, arg0: float, arg1: float, arg2: float, arg3: Matrix3x2d) -> Matrix3x2d: ...

  @overload
  def rotateAbout(self, arg0: float, arg1: float, arg2: float, arg3: Matrix3x2d) -> Matrix3x2d: ...

  @overload
  def rotateLocal(self, arg0: float) -> Matrix3x2d: ...

  @overload
  def rotateLocal(self, arg0: float, arg1: Matrix3x2d) -> Matrix3x2d: ...

  @overload
  def rotateLocal(self, arg0: float, arg1: Matrix3x2d) -> Matrix3x2d: ...

  @overload
  def rotateTo(self, arg0: Vector2dc, arg1: Vector2dc) -> Matrix3x2d: ...

  @overload
  def rotateTo(self, arg0: Vector2dc, arg1: Vector2dc, arg2: Matrix3x2d) -> Matrix3x2d: ...

  @overload
  def rotateTo(self, arg0: Vector2dc, arg1: Vector2dc, arg2: Matrix3x2d) -> Matrix3x2d: ...

  def rotation(self, arg0: float) -> Matrix3x2d: ...

  @overload
  def scale(self, arg0: float) -> Matrix3x2d: ...

  @overload
  def scale(self, arg0: Vector2dc) -> Matrix3x2d: ...

  @overload
  def scale(self, arg0: Vector2fc) -> Matrix3x2d: ...

  @overload
  def scale(self, arg0: float, arg1: float) -> Matrix3x2d: ...

  @overload
  def scale(self, arg0: float, arg1: Matrix3x2d) -> Matrix3x2d: ...

  @overload
  def scale(self, arg0: float, arg1: Matrix3x2d) -> Matrix3x2d: ...

  @overload
  def scale(self, arg0: Vector2dc, arg1: Matrix3x2d) -> Matrix3x2d: ...

  @overload
  def scale(self, arg0: Vector2dc, arg1: Matrix3x2d) -> Matrix3x2d: ...

  @overload
  def scale(self, arg0: Vector2fc, arg1: Matrix3x2d) -> Matrix3x2d: ...

  @overload
  def scale(self, arg0: Vector2fc, arg1: Matrix3x2d) -> Matrix3x2d: ...

  @overload
  def scale(self, arg0: float, arg1: float, arg2: Matrix3x2d) -> Matrix3x2d: ...

  @overload
  def scale(self, arg0: float, arg1: float, arg2: Matrix3x2d) -> Matrix3x2d: ...

  @overload
  def scaleAround(self, arg0: float, arg1: float, arg2: float) -> Matrix3x2d: ...

  @overload
  def scaleAround(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix3x2d: ...

  @overload
  def scaleAround(self, arg0: float, arg1: float, arg2: float, arg3: Matrix3x2d) -> Matrix3x2d: ...

  @overload
  def scaleAround(self, arg0: float, arg1: float, arg2: float, arg3: Matrix3x2d) -> Matrix3x2d: ...

  @overload
  def scaleAround(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix3x2d) -> Matrix3x2d: ...

  @overload
  def scaleAround(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix3x2d) -> Matrix3x2d: ...

  @overload
  def scaleAroundLocal(self, arg0: float, arg1: float, arg2: float) -> Matrix3x2d: ...

  @overload
  def scaleAroundLocal(self, arg0: float, arg1: float, arg2: float, arg3: Matrix3x2d) -> Matrix3x2d: ...

  @overload
  def scaleAroundLocal(self, arg0: float, arg1: float, arg2: float, arg3: Matrix3x2d) -> Matrix3x2d: ...

  @overload
  def scaleAroundLocal(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix3x2d) -> Matrix3x2d: ...

  @overload
  def scaleAroundLocal(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix3x2d) -> Matrix3x2d: ...

  @overload
  def scaleAroundLocal(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix3x2d: ...

  @overload
  def scaleLocal(self, arg0: float) -> Matrix3x2d: ...

  @overload
  def scaleLocal(self, arg0: float, arg1: float) -> Matrix3x2d: ...

  @overload
  def scaleLocal(self, arg0: float, arg1: Matrix3x2d) -> Matrix3x2d: ...

  @overload
  def scaleLocal(self, arg0: float, arg1: Matrix3x2d) -> Matrix3x2d: ...

  @overload
  def scaleLocal(self, arg0: float, arg1: float, arg2: Matrix3x2d) -> Matrix3x2d: ...

  @overload
  def scaleLocal(self, arg0: float, arg1: float, arg2: Matrix3x2d) -> Matrix3x2d: ...

  @overload
  def scaling(self, arg0: float) -> Matrix3x2d: ...

  @overload
  def scaling(self, arg0: float, arg1: float) -> Matrix3x2d: ...

  @overload
  def set(self, arg0: list[float]) -> Matrix3x2d: ...

  @overload
  def set(self, arg0: ByteBuffer) -> Matrix3x2d: ...

  @overload
  def set(self, arg0: DoubleBuffer) -> Matrix3x2d: ...

  @overload
  def set(self, arg0: Matrix2dc) -> Matrix3x2d: ...

  @overload
  def set(self, arg0: Matrix2fc) -> Matrix3x2d: ...

  @overload
  def set(self, arg0: Matrix3x2dc) -> Matrix3x2d: ...

  @overload
  def set(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix3x2d: ...

  def setFromAddress(self, arg0: int) -> Matrix3x2d: ...

  @overload
  def setTranslation(self, arg0: Vector2dc) -> Matrix3x2d: ...

  @overload
  def setTranslation(self, arg0: float, arg1: float) -> Matrix3x2d: ...

  def setView(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix3x2d: ...

  def span(self, arg0: Vector2d, arg1: Vector2d, arg2: Vector2d) -> Matrix3x2d: ...

  @overload
  def testAar(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool: ...

  @overload
  def testAar(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool: ...

  @overload
  def testCircle(self, arg0: float, arg1: float, arg2: float) -> bool: ...

  @overload
  def testCircle(self, arg0: float, arg1: float, arg2: float) -> bool: ...

  @overload
  def testPoint(self, arg0: float, arg1: float) -> bool: ...

  @overload
  def testPoint(self, arg0: float, arg1: float) -> bool: ...

  @overload
  def toString(self) -> str: ...

  @overload
  def toString(self, arg0: NumberFormat) -> str: ...

  @overload
  def transform(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transform(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transform(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def transform(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def transform(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def transform(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def transformDirection(self, arg0: Vector2d) -> Vector2d: ...

  @overload
  def transformDirection(self, arg0: Vector2d) -> Vector2d: ...

  @overload
  def transformDirection(self, arg0: Vector2dc, arg1: Vector2d) -> Vector2d: ...

  @overload
  def transformDirection(self, arg0: Vector2dc, arg1: Vector2d) -> Vector2d: ...

  @overload
  def transformDirection(self, arg0: float, arg1: float, arg2: Vector2d) -> Vector2d: ...

  @overload
  def transformDirection(self, arg0: float, arg1: float, arg2: Vector2d) -> Vector2d: ...

  @overload
  def transformPosition(self, arg0: Vector2d) -> Vector2d: ...

  @overload
  def transformPosition(self, arg0: Vector2d) -> Vector2d: ...

  @overload
  def transformPosition(self, arg0: Vector2dc, arg1: Vector2d) -> Vector2d: ...

  @overload
  def transformPosition(self, arg0: Vector2dc, arg1: Vector2d) -> Vector2d: ...

  @overload
  def transformPosition(self, arg0: float, arg1: float, arg2: Vector2d) -> Vector2d: ...

  @overload
  def transformPosition(self, arg0: float, arg1: float, arg2: Vector2d) -> Vector2d: ...

  @overload
  def translate(self, arg0: Vector2dc) -> Matrix3x2d: ...

  @overload
  def translate(self, arg0: float, arg1: float) -> Matrix3x2d: ...

  @overload
  def translate(self, arg0: Vector2dc, arg1: Matrix3x2d) -> Matrix3x2d: ...

  @overload
  def translate(self, arg0: Vector2dc, arg1: Matrix3x2d) -> Matrix3x2d: ...

  @overload
  def translate(self, arg0: float, arg1: float, arg2: Matrix3x2d) -> Matrix3x2d: ...

  @overload
  def translate(self, arg0: float, arg1: float, arg2: Matrix3x2d) -> Matrix3x2d: ...

  @overload
  def translateLocal(self, arg0: Vector2dc) -> Matrix3x2d: ...

  @overload
  def translateLocal(self, arg0: float, arg1: float) -> Matrix3x2d: ...

  @overload
  def translateLocal(self, arg0: Vector2dc, arg1: Matrix3x2d) -> Matrix3x2d: ...

  @overload
  def translateLocal(self, arg0: Vector2dc, arg1: Matrix3x2d) -> Matrix3x2d: ...

  @overload
  def translateLocal(self, arg0: float, arg1: float, arg2: Matrix3x2d) -> Matrix3x2d: ...

  @overload
  def translateLocal(self, arg0: float, arg1: float, arg2: Matrix3x2d) -> Matrix3x2d: ...

  @overload
  def translation(self, arg0: Vector2dc) -> Matrix3x2d: ...

  @overload
  def translation(self, arg0: float, arg1: float) -> Matrix3x2d: ...

  @overload
  def unproject(self, arg0: float, arg1: float, arg2: list[int], arg3: Vector2d) -> Vector2d: ...

  @overload
  def unproject(self, arg0: float, arg1: float, arg2: list[int], arg3: Vector2d) -> Vector2d: ...

  @overload
  def unprojectInv(self, arg0: float, arg1: float, arg2: list[int], arg3: Vector2d) -> Vector2d: ...

  @overload
  def unprojectInv(self, arg0: float, arg1: float, arg2: list[int], arg3: Vector2d) -> Vector2d: ...

  @overload
  def view(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix3x2d: ...

  @overload
  def view(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix3x2d) -> Matrix3x2d: ...

  @overload
  def view(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix3x2d) -> Matrix3x2d: ...

  @overload
  def viewArea(self, arg0: list[float]) -> list[float]: ...

  @overload
  def viewArea(self, arg0: list[float]) -> list[float]: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  def zero(self) -> Matrix3x2d: ...

  @overload
  def __init__(self):
    self.m00: float

    self.m01: float

    self.m10: float

    self.m11: float

    self.m20: float

    self.m21: float

  @overload
  def __init__(self, arg0: DoubleBuffer): ...
  @overload
  def __init__(self, arg0: Matrix2dc): ...
  @overload
  def __init__(self, arg0: Matrix2fc): ...
  @overload
  def __init__(self, arg0: Matrix3x2dc): ...
  @overload
  def __init__(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float): ...


class Matrix3x2dStack(Matrix3x2d):

  def clear(self) -> Matrix3x2dStack: ...

  def equals(self, arg0: object) -> bool: ...

  def hashCode(self) -> int: ...

  def popMatrix(self) -> Matrix3x2dStack: ...

  def pushMatrix(self) -> Matrix3x2dStack: ...

  def readExternal(self, arg0: ObjectInput) -> None: ...

  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: int): ...


class Matrix3x2dc:

  def determinant(self) -> float: ...

  def equals(self, arg0: Matrix3x2dc, arg1: float) -> bool: ...

  @overload
  def get(self, arg0: list[float]) -> list[float]: ...

  @overload
  def get(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def get(self, arg0: Matrix3x2d) -> Matrix3x2d: ...

  @overload
  def get(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def get(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: int, arg1: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def get3x3(self, arg0: list[float]) -> list[float]: ...

  @overload
  def get3x3(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get3x3(self, arg0: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def get3x3(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def get3x3(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get3x3(self, arg0: int, arg1: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def get4x4(self, arg0: list[float]) -> list[float]: ...

  @overload
  def get4x4(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get4x4(self, arg0: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def get4x4(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def get4x4(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get4x4(self, arg0: int, arg1: DoubleBuffer) -> DoubleBuffer: ...

  def getToAddress(self, arg0: int) -> Matrix3x2dc: ...

  def invert(self, arg0: Matrix3x2d) -> Matrix3x2d: ...

  def isFinite(self) -> bool: ...

  def m00(self) -> float: ...

  def m01(self) -> float: ...

  def m10(self) -> float: ...

  def m11(self) -> float: ...

  def m20(self) -> float: ...

  def m21(self) -> float: ...

  def mul(self, arg0: Matrix3x2dc, arg1: Matrix3x2d) -> Matrix3x2d: ...

  def mulLocal(self, arg0: Matrix3x2dc, arg1: Matrix3x2d) -> Matrix3x2d: ...

  def normalizedPositiveX(self, arg0: Vector2d) -> Vector2d: ...

  def normalizedPositiveY(self, arg0: Vector2d) -> Vector2d: ...

  def origin(self, arg0: Vector2d) -> Vector2d: ...

  def positiveX(self, arg0: Vector2d) -> Vector2d: ...

  def positiveY(self, arg0: Vector2d) -> Vector2d: ...

  def rotate(self, arg0: float, arg1: Matrix3x2d) -> Matrix3x2d: ...

  def rotateAbout(self, arg0: float, arg1: float, arg2: float, arg3: Matrix3x2d) -> Matrix3x2d: ...

  def rotateLocal(self, arg0: float, arg1: Matrix3x2d) -> Matrix3x2d: ...

  def rotateTo(self, arg0: Vector2dc, arg1: Vector2dc, arg2: Matrix3x2d) -> Matrix3x2d: ...

  @overload
  def scale(self, arg0: float, arg1: Matrix3x2d) -> Matrix3x2d: ...

  @overload
  def scale(self, arg0: Vector2dc, arg1: Matrix3x2d) -> Matrix3x2d: ...

  @overload
  def scale(self, arg0: Vector2fc, arg1: Matrix3x2d) -> Matrix3x2d: ...

  @overload
  def scale(self, arg0: float, arg1: float, arg2: Matrix3x2d) -> Matrix3x2d: ...

  @overload
  def scaleAround(self, arg0: float, arg1: float, arg2: float, arg3: Matrix3x2d) -> Matrix3x2d: ...

  @overload
  def scaleAround(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix3x2d) -> Matrix3x2d: ...

  @overload
  def scaleAroundLocal(self, arg0: float, arg1: float, arg2: float, arg3: Matrix3x2d) -> Matrix3x2d: ...

  @overload
  def scaleAroundLocal(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix3x2d) -> Matrix3x2d: ...

  @overload
  def scaleLocal(self, arg0: float, arg1: Matrix3x2d) -> Matrix3x2d: ...

  @overload
  def scaleLocal(self, arg0: float, arg1: float, arg2: Matrix3x2d) -> Matrix3x2d: ...

  def testAar(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool: ...

  def testCircle(self, arg0: float, arg1: float, arg2: float) -> bool: ...

  def testPoint(self, arg0: float, arg1: float) -> bool: ...

  @overload
  def transform(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transform(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def transform(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def transformDirection(self, arg0: Vector2d) -> Vector2d: ...

  @overload
  def transformDirection(self, arg0: Vector2dc, arg1: Vector2d) -> Vector2d: ...

  @overload
  def transformDirection(self, arg0: float, arg1: float, arg2: Vector2d) -> Vector2d: ...

  @overload
  def transformPosition(self, arg0: Vector2d) -> Vector2d: ...

  @overload
  def transformPosition(self, arg0: Vector2dc, arg1: Vector2d) -> Vector2d: ...

  @overload
  def transformPosition(self, arg0: float, arg1: float, arg2: Vector2d) -> Vector2d: ...

  @overload
  def translate(self, arg0: Vector2dc, arg1: Matrix3x2d) -> Matrix3x2d: ...

  @overload
  def translate(self, arg0: float, arg1: float, arg2: Matrix3x2d) -> Matrix3x2d: ...

  @overload
  def translateLocal(self, arg0: Vector2dc, arg1: Matrix3x2d) -> Matrix3x2d: ...

  @overload
  def translateLocal(self, arg0: float, arg1: float, arg2: Matrix3x2d) -> Matrix3x2d: ...

  def unproject(self, arg0: float, arg1: float, arg2: list[int], arg3: Vector2d) -> Vector2d: ...

  def unprojectInv(self, arg0: float, arg1: float, arg2: list[int], arg3: Vector2d) -> Vector2d: ...

  def view(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix3x2d) -> Matrix3x2d: ...

  def viewArea(self, arg0: list[float]) -> list[float]: ...


class Matrix3x2f:

  @overload
  def determinant(self) -> float: ...

  @overload
  def determinant(self) -> float: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def equals(self, arg0: Matrix3x2fc, arg1: float) -> bool: ...

  @overload
  def equals(self, arg0: Matrix3x2fc, arg1: float) -> bool: ...

  @overload
  def get(self, arg0: list[float]) -> list[float]: ...

  @overload
  def get(self, arg0: list[float]) -> list[float]: ...

  @overload
  def get(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get(self, arg0: Matrix3x2f) -> Matrix3x2f: ...

  @overload
  def get(self, arg0: Matrix3x2f) -> Matrix3x2f: ...

  @overload
  def get(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def get(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def get(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get3x3(self, arg0: list[float]) -> list[float]: ...

  @overload
  def get3x3(self, arg0: list[float]) -> list[float]: ...

  @overload
  def get3x3(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get3x3(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get3x3(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get3x3(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get3x3(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def get3x3(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def get3x3(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get3x3(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get3x3(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get3x3(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get4x4(self, arg0: list[float]) -> list[float]: ...

  @overload
  def get4x4(self, arg0: list[float]) -> list[float]: ...

  @overload
  def get4x4(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get4x4(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get4x4(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get4x4(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get4x4(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def get4x4(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def get4x4(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get4x4(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get4x4(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get4x4(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def getToAddress(self, arg0: int) -> Matrix3x2fc: ...

  @overload
  def getToAddress(self, arg0: int) -> Matrix3x2fc: ...

  def hashCode(self) -> int: ...

  def identity(self) -> Matrix3x2f: ...

  @overload
  def invert(self) -> Matrix3x2f: ...

  @overload
  def invert(self, arg0: Matrix3x2f) -> Matrix3x2f: ...

  @overload
  def invert(self, arg0: Matrix3x2f) -> Matrix3x2f: ...

  @overload
  def isFinite(self) -> bool: ...

  @overload
  def isFinite(self) -> bool: ...

  @overload
  def m00(self) -> float: ...

  @overload
  def m00(self) -> float: ...

  @overload
  def m01(self) -> float: ...

  @overload
  def m01(self) -> float: ...

  @overload
  def m10(self) -> float: ...

  @overload
  def m10(self) -> float: ...

  @overload
  def m11(self) -> float: ...

  @overload
  def m11(self) -> float: ...

  @overload
  def m20(self) -> float: ...

  @overload
  def m20(self) -> float: ...

  @overload
  def m21(self) -> float: ...

  @overload
  def m21(self) -> float: ...

  @overload
  def mul(self, arg0: Matrix3x2fc) -> Matrix3x2f: ...

  @overload
  def mul(self, arg0: Matrix3x2fc, arg1: Matrix3x2f) -> Matrix3x2f: ...

  @overload
  def mul(self, arg0: Matrix3x2fc, arg1: Matrix3x2f) -> Matrix3x2f: ...

  @overload
  def mulLocal(self, arg0: Matrix3x2fc) -> Matrix3x2f: ...

  @overload
  def mulLocal(self, arg0: Matrix3x2fc, arg1: Matrix3x2f) -> Matrix3x2f: ...

  @overload
  def mulLocal(self, arg0: Matrix3x2fc, arg1: Matrix3x2f) -> Matrix3x2f: ...

  @overload
  def normalizedPositiveX(self, arg0: Vector2f) -> Vector2f: ...

  @overload
  def normalizedPositiveX(self, arg0: Vector2f) -> Vector2f: ...

  @overload
  def normalizedPositiveY(self, arg0: Vector2f) -> Vector2f: ...

  @overload
  def normalizedPositiveY(self, arg0: Vector2f) -> Vector2f: ...

  @overload
  def origin(self, arg0: Vector2f) -> Vector2f: ...

  @overload
  def origin(self, arg0: Vector2f) -> Vector2f: ...

  @overload
  def positiveX(self, arg0: Vector2f) -> Vector2f: ...

  @overload
  def positiveX(self, arg0: Vector2f) -> Vector2f: ...

  @overload
  def positiveY(self, arg0: Vector2f) -> Vector2f: ...

  @overload
  def positiveY(self, arg0: Vector2f) -> Vector2f: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def rotate(self, arg0: float) -> Matrix3x2f: ...

  @overload
  def rotate(self, arg0: float, arg1: Matrix3x2f) -> Matrix3x2f: ...

  @overload
  def rotate(self, arg0: float, arg1: Matrix3x2f) -> Matrix3x2f: ...

  @overload
  def rotateAbout(self, arg0: float, arg1: float, arg2: float) -> Matrix3x2f: ...

  @overload
  def rotateAbout(self, arg0: float, arg1: float, arg2: float, arg3: Matrix3x2f) -> Matrix3x2f: ...

  @overload
  def rotateAbout(self, arg0: float, arg1: float, arg2: float, arg3: Matrix3x2f) -> Matrix3x2f: ...

  @overload
  def rotateLocal(self, arg0: float) -> Matrix3x2f: ...

  @overload
  def rotateLocal(self, arg0: float, arg1: Matrix3x2f) -> Matrix3x2f: ...

  @overload
  def rotateLocal(self, arg0: float, arg1: Matrix3x2f) -> Matrix3x2f: ...

  @overload
  def rotateTo(self, arg0: Vector2fc, arg1: Vector2fc) -> Matrix3x2f: ...

  @overload
  def rotateTo(self, arg0: Vector2fc, arg1: Vector2fc, arg2: Matrix3x2f) -> Matrix3x2f: ...

  @overload
  def rotateTo(self, arg0: Vector2fc, arg1: Vector2fc, arg2: Matrix3x2f) -> Matrix3x2f: ...

  def rotation(self, arg0: float) -> Matrix3x2f: ...

  @overload
  def scale(self, arg0: float) -> Matrix3x2f: ...

  @overload
  def scale(self, arg0: Vector2fc) -> Matrix3x2f: ...

  @overload
  def scale(self, arg0: float, arg1: float) -> Matrix3x2f: ...

  @overload
  def scale(self, arg0: float, arg1: Matrix3x2f) -> Matrix3x2f: ...

  @overload
  def scale(self, arg0: float, arg1: Matrix3x2f) -> Matrix3x2f: ...

  @overload
  def scale(self, arg0: Vector2fc, arg1: Matrix3x2f) -> Matrix3x2f: ...

  @overload
  def scale(self, arg0: Vector2fc, arg1: Matrix3x2f) -> Matrix3x2f: ...

  @overload
  def scale(self, arg0: float, arg1: float, arg2: Matrix3x2f) -> Matrix3x2f: ...

  @overload
  def scale(self, arg0: float, arg1: float, arg2: Matrix3x2f) -> Matrix3x2f: ...

  @overload
  def scaleAround(self, arg0: float, arg1: float, arg2: float) -> Matrix3x2f: ...

  @overload
  def scaleAround(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix3x2f: ...

  @overload
  def scaleAround(self, arg0: float, arg1: float, arg2: float, arg3: Matrix3x2f) -> Matrix3x2f: ...

  @overload
  def scaleAround(self, arg0: float, arg1: float, arg2: float, arg3: Matrix3x2f) -> Matrix3x2f: ...

  @overload
  def scaleAround(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix3x2f) -> Matrix3x2f: ...

  @overload
  def scaleAround(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix3x2f) -> Matrix3x2f: ...

  @overload
  def scaleAroundLocal(self, arg0: float, arg1: float, arg2: float) -> Matrix3x2f: ...

  @overload
  def scaleAroundLocal(self, arg0: float, arg1: float, arg2: float, arg3: Matrix3x2f) -> Matrix3x2f: ...

  @overload
  def scaleAroundLocal(self, arg0: float, arg1: float, arg2: float, arg3: Matrix3x2f) -> Matrix3x2f: ...

  @overload
  def scaleAroundLocal(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix3x2f) -> Matrix3x2f: ...

  @overload
  def scaleAroundLocal(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix3x2f) -> Matrix3x2f: ...

  @overload
  def scaleAroundLocal(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix3x2f: ...

  @overload
  def scaleLocal(self, arg0: float) -> Matrix3x2f: ...

  @overload
  def scaleLocal(self, arg0: float, arg1: float) -> Matrix3x2f: ...

  @overload
  def scaleLocal(self, arg0: float, arg1: Matrix3x2f) -> Matrix3x2f: ...

  @overload
  def scaleLocal(self, arg0: float, arg1: Matrix3x2f) -> Matrix3x2f: ...

  @overload
  def scaleLocal(self, arg0: float, arg1: float, arg2: Matrix3x2f) -> Matrix3x2f: ...

  @overload
  def scaleLocal(self, arg0: float, arg1: float, arg2: Matrix3x2f) -> Matrix3x2f: ...

  @overload
  def scaling(self, arg0: float) -> Matrix3x2f: ...

  @overload
  def scaling(self, arg0: float, arg1: float) -> Matrix3x2f: ...

  @overload
  def set(self, arg0: list[float]) -> Matrix3x2f: ...

  @overload
  def set(self, arg0: ByteBuffer) -> Matrix3x2f: ...

  @overload
  def set(self, arg0: FloatBuffer) -> Matrix3x2f: ...

  @overload
  def set(self, arg0: Matrix2fc) -> Matrix3x2f: ...

  @overload
  def set(self, arg0: Matrix3x2fc) -> Matrix3x2f: ...

  @overload
  def set(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix3x2f: ...

  def setFromAddress(self, arg0: int) -> Matrix3x2f: ...

  @overload
  def setTranslation(self, arg0: Vector2f) -> Matrix3x2f: ...

  @overload
  def setTranslation(self, arg0: float, arg1: float) -> Matrix3x2f: ...

  def setView(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix3x2f: ...

  @overload
  def shearX(self, arg0: float) -> Matrix3x2f: ...

  @overload
  def shearX(self, arg0: float, arg1: Matrix3x2f) -> Matrix3x2f: ...

  @overload
  def shearY(self, arg0: float) -> Matrix3x2f: ...

  @overload
  def shearY(self, arg0: float, arg1: Matrix3x2f) -> Matrix3x2f: ...

  def span(self, arg0: Vector2f, arg1: Vector2f, arg2: Vector2f) -> Matrix3x2f: ...

  @overload
  def testAar(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool: ...

  @overload
  def testAar(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool: ...

  @overload
  def testCircle(self, arg0: float, arg1: float, arg2: float) -> bool: ...

  @overload
  def testCircle(self, arg0: float, arg1: float, arg2: float) -> bool: ...

  @overload
  def testPoint(self, arg0: float, arg1: float) -> bool: ...

  @overload
  def testPoint(self, arg0: float, arg1: float) -> bool: ...

  @overload
  def toString(self) -> str: ...

  @overload
  def toString(self, arg0: NumberFormat) -> str: ...

  @overload
  def transform(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transform(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transform(self, arg0: Vector3f, arg1: Vector3f) -> Vector3f: ...

  @overload
  def transform(self, arg0: Vector3f, arg1: Vector3f) -> Vector3f: ...

  @overload
  def transform(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  @overload
  def transform(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  @overload
  def transformDirection(self, arg0: Vector2f) -> Vector2f: ...

  @overload
  def transformDirection(self, arg0: Vector2f) -> Vector2f: ...

  @overload
  def transformDirection(self, arg0: Vector2fc, arg1: Vector2f) -> Vector2f: ...

  @overload
  def transformDirection(self, arg0: Vector2fc, arg1: Vector2f) -> Vector2f: ...

  @overload
  def transformDirection(self, arg0: float, arg1: float, arg2: Vector2f) -> Vector2f: ...

  @overload
  def transformDirection(self, arg0: float, arg1: float, arg2: Vector2f) -> Vector2f: ...

  @overload
  def transformPosition(self, arg0: Vector2f) -> Vector2f: ...

  @overload
  def transformPosition(self, arg0: Vector2f) -> Vector2f: ...

  @overload
  def transformPosition(self, arg0: Vector2fc, arg1: Vector2f) -> Vector2f: ...

  @overload
  def transformPosition(self, arg0: Vector2fc, arg1: Vector2f) -> Vector2f: ...

  @overload
  def transformPosition(self, arg0: float, arg1: float, arg2: Vector2f) -> Vector2f: ...

  @overload
  def transformPosition(self, arg0: float, arg1: float, arg2: Vector2f) -> Vector2f: ...

  @overload
  def translate(self, arg0: Vector2fc) -> Matrix3x2f: ...

  @overload
  def translate(self, arg0: float, arg1: float) -> Matrix3x2f: ...

  @overload
  def translate(self, arg0: Vector2fc, arg1: Matrix3x2f) -> Matrix3x2f: ...

  @overload
  def translate(self, arg0: Vector2fc, arg1: Matrix3x2f) -> Matrix3x2f: ...

  @overload
  def translate(self, arg0: float, arg1: float, arg2: Matrix3x2f) -> Matrix3x2f: ...

  @overload
  def translate(self, arg0: float, arg1: float, arg2: Matrix3x2f) -> Matrix3x2f: ...

  @overload
  def translateLocal(self, arg0: Vector2fc) -> Matrix3x2f: ...

  @overload
  def translateLocal(self, arg0: float, arg1: float) -> Matrix3x2f: ...

  @overload
  def translateLocal(self, arg0: Vector2fc, arg1: Matrix3x2f) -> Matrix3x2f: ...

  @overload
  def translateLocal(self, arg0: Vector2fc, arg1: Matrix3x2f) -> Matrix3x2f: ...

  @overload
  def translateLocal(self, arg0: float, arg1: float, arg2: Matrix3x2f) -> Matrix3x2f: ...

  @overload
  def translateLocal(self, arg0: float, arg1: float, arg2: Matrix3x2f) -> Matrix3x2f: ...

  @overload
  def translation(self, arg0: Vector2fc) -> Matrix3x2f: ...

  @overload
  def translation(self, arg0: float, arg1: float) -> Matrix3x2f: ...

  @overload
  def unproject(self, arg0: float, arg1: float, arg2: list[int], arg3: Vector2f) -> Vector2f: ...

  @overload
  def unproject(self, arg0: float, arg1: float, arg2: list[int], arg3: Vector2f) -> Vector2f: ...

  @overload
  def unprojectInv(self, arg0: float, arg1: float, arg2: list[int], arg3: Vector2f) -> Vector2f: ...

  @overload
  def unprojectInv(self, arg0: float, arg1: float, arg2: list[int], arg3: Vector2f) -> Vector2f: ...

  @overload
  def view(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix3x2f: ...

  @overload
  def view(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix3x2f) -> Matrix3x2f: ...

  @overload
  def view(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix3x2f) -> Matrix3x2f: ...

  @overload
  def viewArea(self, arg0: list[float]) -> list[float]: ...

  @overload
  def viewArea(self, arg0: list[float]) -> list[float]: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  def zero(self) -> Matrix3x2f: ...

  @overload
  def __init__(self):
    self.m00: float

    self.m01: float

    self.m10: float

    self.m11: float

    self.m20: float

    self.m21: float

  @overload
  def __init__(self, arg0: FloatBuffer): ...
  @overload
  def __init__(self, arg0: Matrix2fc): ...
  @overload
  def __init__(self, arg0: Matrix3x2fc): ...
  @overload
  def __init__(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float): ...


class Matrix3x2fStack(Matrix3x2f):

  def clear(self) -> Matrix3x2fStack: ...

  def equals(self, arg0: object) -> bool: ...

  def hashCode(self) -> int: ...

  def popMatrix(self) -> Matrix3x2fStack: ...

  def pushMatrix(self) -> Matrix3x2fStack: ...

  def readExternal(self, arg0: ObjectInput) -> None: ...

  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: int): ...


class Matrix3x2fc:

  def determinant(self) -> float: ...

  def equals(self, arg0: Matrix3x2fc, arg1: float) -> bool: ...

  @overload
  def get(self, arg0: list[float]) -> list[float]: ...

  @overload
  def get(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get(self, arg0: Matrix3x2f) -> Matrix3x2f: ...

  @overload
  def get(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def get(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get3x3(self, arg0: list[float]) -> list[float]: ...

  @overload
  def get3x3(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get3x3(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get3x3(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def get3x3(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get3x3(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get4x4(self, arg0: list[float]) -> list[float]: ...

  @overload
  def get4x4(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get4x4(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get4x4(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def get4x4(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get4x4(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  def getToAddress(self, arg0: int) -> Matrix3x2fc: ...

  def invert(self, arg0: Matrix3x2f) -> Matrix3x2f: ...

  def isFinite(self) -> bool: ...

  def m00(self) -> float: ...

  def m01(self) -> float: ...

  def m10(self) -> float: ...

  def m11(self) -> float: ...

  def m20(self) -> float: ...

  def m21(self) -> float: ...

  def mul(self, arg0: Matrix3x2fc, arg1: Matrix3x2f) -> Matrix3x2f: ...

  def mulLocal(self, arg0: Matrix3x2fc, arg1: Matrix3x2f) -> Matrix3x2f: ...

  def normalizedPositiveX(self, arg0: Vector2f) -> Vector2f: ...

  def normalizedPositiveY(self, arg0: Vector2f) -> Vector2f: ...

  def origin(self, arg0: Vector2f) -> Vector2f: ...

  def positiveX(self, arg0: Vector2f) -> Vector2f: ...

  def positiveY(self, arg0: Vector2f) -> Vector2f: ...

  def rotate(self, arg0: float, arg1: Matrix3x2f) -> Matrix3x2f: ...

  def rotateAbout(self, arg0: float, arg1: float, arg2: float, arg3: Matrix3x2f) -> Matrix3x2f: ...

  def rotateLocal(self, arg0: float, arg1: Matrix3x2f) -> Matrix3x2f: ...

  def rotateTo(self, arg0: Vector2fc, arg1: Vector2fc, arg2: Matrix3x2f) -> Matrix3x2f: ...

  @overload
  def scale(self, arg0: float, arg1: Matrix3x2f) -> Matrix3x2f: ...

  @overload
  def scale(self, arg0: Vector2fc, arg1: Matrix3x2f) -> Matrix3x2f: ...

  @overload
  def scale(self, arg0: float, arg1: float, arg2: Matrix3x2f) -> Matrix3x2f: ...

  @overload
  def scaleAround(self, arg0: float, arg1: float, arg2: float, arg3: Matrix3x2f) -> Matrix3x2f: ...

  @overload
  def scaleAround(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix3x2f) -> Matrix3x2f: ...

  @overload
  def scaleAroundLocal(self, arg0: float, arg1: float, arg2: float, arg3: Matrix3x2f) -> Matrix3x2f: ...

  @overload
  def scaleAroundLocal(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix3x2f) -> Matrix3x2f: ...

  @overload
  def scaleLocal(self, arg0: float, arg1: Matrix3x2f) -> Matrix3x2f: ...

  @overload
  def scaleLocal(self, arg0: float, arg1: float, arg2: Matrix3x2f) -> Matrix3x2f: ...

  def testAar(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool: ...

  def testCircle(self, arg0: float, arg1: float, arg2: float) -> bool: ...

  def testPoint(self, arg0: float, arg1: float) -> bool: ...

  @overload
  def transform(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transform(self, arg0: Vector3f, arg1: Vector3f) -> Vector3f: ...

  @overload
  def transform(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  @overload
  def transformDirection(self, arg0: Vector2f) -> Vector2f: ...

  @overload
  def transformDirection(self, arg0: Vector2fc, arg1: Vector2f) -> Vector2f: ...

  @overload
  def transformDirection(self, arg0: float, arg1: float, arg2: Vector2f) -> Vector2f: ...

  @overload
  def transformPosition(self, arg0: Vector2f) -> Vector2f: ...

  @overload
  def transformPosition(self, arg0: Vector2fc, arg1: Vector2f) -> Vector2f: ...

  @overload
  def transformPosition(self, arg0: float, arg1: float, arg2: Vector2f) -> Vector2f: ...

  @overload
  def translate(self, arg0: Vector2fc, arg1: Matrix3x2f) -> Matrix3x2f: ...

  @overload
  def translate(self, arg0: float, arg1: float, arg2: Matrix3x2f) -> Matrix3x2f: ...

  @overload
  def translateLocal(self, arg0: Vector2fc, arg1: Matrix3x2f) -> Matrix3x2f: ...

  @overload
  def translateLocal(self, arg0: float, arg1: float, arg2: Matrix3x2f) -> Matrix3x2f: ...

  def unproject(self, arg0: float, arg1: float, arg2: list[int], arg3: Vector2f) -> Vector2f: ...

  def unprojectInv(self, arg0: float, arg1: float, arg2: list[int], arg3: Vector2f) -> Vector2f: ...

  def view(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix3x2f) -> Matrix3x2f: ...

  def viewArea(self, arg0: list[float]) -> list[float]: ...


class Matrix4d:

  CORNER_NXNYNZ: int

  CORNER_NXNYPZ: int

  CORNER_NXPYNZ: int

  CORNER_NXPYPZ: int

  CORNER_PXNYNZ: int

  CORNER_PXNYPZ: int

  CORNER_PXPYNZ: int

  CORNER_PXPYPZ: int

  PLANE_NX: int

  PLANE_NY: int

  PLANE_NZ: int

  PLANE_PX: int

  PLANE_PY: int

  PLANE_PZ: int

  PROPERTY_AFFINE: int

  PROPERTY_IDENTITY: int

  PROPERTY_ORTHONORMAL: int

  PROPERTY_PERSPECTIVE: int

  PROPERTY_TRANSLATION: int

  @overload
  def add(self, arg0: Matrix4dc) -> Matrix4d: ...

  @overload
  def add(self, arg0: Matrix4dc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def add(self, arg0: Matrix4dc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def add4x3(self, arg0: Matrix4dc) -> Matrix4d: ...

  @overload
  def add4x3(self, arg0: Matrix4fc) -> Matrix4d: ...

  @overload
  def add4x3(self, arg0: Matrix4dc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def add4x3(self, arg0: Matrix4dc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def add4x3(self, arg0: Matrix4fc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def add4x3(self, arg0: Matrix4fc, arg1: Matrix4d) -> Matrix4d: ...

  def affineSpan(self, arg0: Vector3d, arg1: Vector3d, arg2: Vector3d, arg3: Vector3d) -> Matrix4d: ...

  @overload
  def arcball(self, arg0: float, arg1: Vector3dc, arg2: float, arg3: float) -> Matrix4d: ...

  @overload
  def arcball(self, arg0: float, arg1: Vector3dc, arg2: float, arg3: float, arg4: Matrix4d) -> Matrix4d: ...

  @overload
  def arcball(self, arg0: float, arg1: Vector3dc, arg2: float, arg3: float, arg4: Matrix4d) -> Matrix4d: ...

  @overload
  def arcball(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix4d: ...

  @overload
  def arcball(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4d) -> Matrix4d: ...

  @overload
  def arcball(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4d) -> Matrix4d: ...

  def assume(self, arg0: int) -> Matrix4d: ...

  def billboardCylindrical(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Vector3dc) -> Matrix4d: ...

  @overload
  def billboardSpherical(self, arg0: Vector3dc, arg1: Vector3dc) -> Matrix4d: ...

  @overload
  def billboardSpherical(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Vector3dc) -> Matrix4d: ...

  @overload
  def cofactor3x3(self) -> Matrix4d: ...

  @overload
  def cofactor3x3(self, arg0: Matrix3d) -> Matrix3d: ...

  @overload
  def cofactor3x3(self, arg0: Matrix3d) -> Matrix3d: ...

  @overload
  def cofactor3x3(self, arg0: Matrix4d) -> Matrix4d: ...

  @overload
  def cofactor3x3(self, arg0: Matrix4d) -> Matrix4d: ...

  @overload
  def determinant(self) -> float: ...

  @overload
  def determinant(self) -> float: ...

  @overload
  def determinant3x3(self) -> float: ...

  @overload
  def determinant3x3(self) -> float: ...

  @overload
  def determinantAffine(self) -> float: ...

  @overload
  def determinantAffine(self) -> float: ...

  def determineProperties(self) -> Matrix4d: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def equals(self, arg0: Matrix4dc, arg1: float) -> bool: ...

  @overload
  def equals(self, arg0: Matrix4dc, arg1: float) -> bool: ...

  @overload
  def fma4x3(self, arg0: Matrix4dc, arg1: float) -> Matrix4d: ...

  @overload
  def fma4x3(self, arg0: Matrix4dc, arg1: float, arg2: Matrix4d) -> Matrix4d: ...

  @overload
  def fma4x3(self, arg0: Matrix4dc, arg1: float, arg2: Matrix4d) -> Matrix4d: ...

  @overload
  def frustum(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix4d: ...

  @overload
  def frustum(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool) -> Matrix4d: ...

  @overload
  def frustum(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4d) -> Matrix4d: ...

  @overload
  def frustum(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4d) -> Matrix4d: ...

  @overload
  def frustum(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool, arg7: Matrix4d) -> Matrix4d: ...

  @overload
  def frustum(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool, arg7: Matrix4d) -> Matrix4d: ...

  def frustumAabb(self, arg0: Vector3d, arg1: Vector3d) -> Matrix4d: ...

  @overload
  def frustumCorner(self, arg0: int, arg1: Vector3d) -> Vector3d: ...

  @overload
  def frustumCorner(self, arg0: int, arg1: Vector3d) -> Vector3d: ...

  @overload
  def frustumLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix4d: ...

  @overload
  def frustumLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool) -> Matrix4d: ...

  @overload
  def frustumLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4d) -> Matrix4d: ...

  @overload
  def frustumLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4d) -> Matrix4d: ...

  @overload
  def frustumLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool, arg7: Matrix4d) -> Matrix4d: ...

  @overload
  def frustumLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool, arg7: Matrix4d) -> Matrix4d: ...

  @overload
  def frustumPlane(self, arg0: int, arg1: Vector4d) -> Vector4d: ...

  @overload
  def frustumPlane(self, arg0: int, arg1: Vector4d) -> Vector4d: ...

  @overload
  def frustumRayDir(self, arg0: float, arg1: float, arg2: Vector3d) -> Vector3d: ...

  @overload
  def frustumRayDir(self, arg0: float, arg1: float, arg2: Vector3d) -> Vector3d: ...

  @overload
  def get(self, arg0: list[float]) -> list[float]: ...

  @overload
  def get(self, arg0: list[float]) -> list[float]: ...

  @overload
  def get(self, arg0: list[float]) -> list[float]: ...

  @overload
  def get(self, arg0: list[float]) -> list[float]: ...

  @overload
  def get(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def get(self, arg0: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def get(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get(self, arg0: Matrix4d) -> Matrix4d: ...

  @overload
  def get(self, arg0: Matrix4d) -> Matrix4d: ...

  @overload
  def get(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def get(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def get(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def get(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def get(self, arg0: int, arg1: int) -> float: ...

  @overload
  def get(self, arg0: int, arg1: int) -> float: ...

  @overload
  def get(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: int, arg1: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def get(self, arg0: int, arg1: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def get(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get3x3(self, arg0: Matrix3d) -> Matrix3d: ...

  @overload
  def get3x3(self, arg0: Matrix3d) -> Matrix3d: ...

  @overload
  def get4x3(self, arg0: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def get4x3(self, arg0: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def get4x3Transposed(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get4x3Transposed(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get4x3Transposed(self, arg0: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def get4x3Transposed(self, arg0: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def get4x3Transposed(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get4x3Transposed(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get4x3Transposed(self, arg0: int, arg1: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def get4x3Transposed(self, arg0: int, arg1: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def getColumn(self, arg0: int, arg1: Vector3d) -> Vector3d: ...

  @overload
  def getColumn(self, arg0: int, arg1: Vector3d) -> Vector3d: ...

  @overload
  def getColumn(self, arg0: int, arg1: Vector4d) -> Vector4d: ...

  @overload
  def getColumn(self, arg0: int, arg1: Vector4d) -> Vector4d: ...

  @overload
  def getEulerAnglesZYX(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def getEulerAnglesZYX(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def getFloats(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getFloats(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getFloats(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getFloats(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getNormalizedRotation(self, arg0: Quaterniond) -> Quaterniond: ...

  @overload
  def getNormalizedRotation(self, arg0: Quaterniond) -> Quaterniond: ...

  @overload
  def getNormalizedRotation(self, arg0: Quaternionf) -> Quaternionf: ...

  @overload
  def getNormalizedRotation(self, arg0: Quaternionf) -> Quaternionf: ...

  @overload
  def getRow(self, arg0: int, arg1: Vector3d) -> Vector3d: ...

  @overload
  def getRow(self, arg0: int, arg1: Vector3d) -> Vector3d: ...

  @overload
  def getRow(self, arg0: int, arg1: Vector4d) -> Vector4d: ...

  @overload
  def getRow(self, arg0: int, arg1: Vector4d) -> Vector4d: ...

  @overload
  def getRowColumn(self, arg0: int, arg1: int) -> float: ...

  @overload
  def getRowColumn(self, arg0: int, arg1: int) -> float: ...

  @overload
  def getScale(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def getScale(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def getToAddress(self, arg0: int) -> Matrix4dc: ...

  @overload
  def getToAddress(self, arg0: int) -> Matrix4dc: ...

  @overload
  def getTranslation(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def getTranslation(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def getTransposed(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getTransposed(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getTransposed(self, arg0: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def getTransposed(self, arg0: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def getTransposed(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getTransposed(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getTransposed(self, arg0: int, arg1: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def getTransposed(self, arg0: int, arg1: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def getUnnormalizedRotation(self, arg0: Quaterniond) -> Quaterniond: ...

  @overload
  def getUnnormalizedRotation(self, arg0: Quaterniond) -> Quaterniond: ...

  @overload
  def getUnnormalizedRotation(self, arg0: Quaternionf) -> Quaternionf: ...

  @overload
  def getUnnormalizedRotation(self, arg0: Quaternionf) -> Quaternionf: ...

  def hashCode(self) -> int: ...

  def identity(self) -> Matrix4d: ...

  @overload
  def invert(self) -> Matrix4d: ...

  @overload
  def invert(self, arg0: Matrix4d) -> Matrix4d: ...

  @overload
  def invert(self, arg0: Matrix4d) -> Matrix4d: ...

  @overload
  def invertAffine(self) -> Matrix4d: ...

  @overload
  def invertAffine(self, arg0: Matrix4d) -> Matrix4d: ...

  @overload
  def invertAffine(self, arg0: Matrix4d) -> Matrix4d: ...

  @overload
  def invertFrustum(self) -> Matrix4d: ...

  @overload
  def invertFrustum(self, arg0: Matrix4d) -> Matrix4d: ...

  @overload
  def invertFrustum(self, arg0: Matrix4d) -> Matrix4d: ...

  @overload
  def invertOrtho(self) -> Matrix4d: ...

  @overload
  def invertOrtho(self, arg0: Matrix4d) -> Matrix4d: ...

  @overload
  def invertOrtho(self, arg0: Matrix4d) -> Matrix4d: ...

  @overload
  def invertPerspective(self) -> Matrix4d: ...

  @overload
  def invertPerspective(self, arg0: Matrix4d) -> Matrix4d: ...

  @overload
  def invertPerspective(self, arg0: Matrix4d) -> Matrix4d: ...

  @overload
  def invertPerspectiveView(self, arg0: Matrix4dc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def invertPerspectiveView(self, arg0: Matrix4dc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def invertPerspectiveView(self, arg0: Matrix4x3dc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def invertPerspectiveView(self, arg0: Matrix4x3dc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def isAffine(self) -> bool: ...

  @overload
  def isAffine(self) -> bool: ...

  @overload
  def isFinite(self) -> bool: ...

  @overload
  def isFinite(self) -> bool: ...

  @overload
  def lerp(self, arg0: Matrix4dc, arg1: float) -> Matrix4d: ...

  @overload
  def lerp(self, arg0: Matrix4dc, arg1: float, arg2: Matrix4d) -> Matrix4d: ...

  @overload
  def lerp(self, arg0: Matrix4dc, arg1: float, arg2: Matrix4d) -> Matrix4d: ...

  @overload
  def lookAlong(self, arg0: Vector3dc, arg1: Vector3dc) -> Matrix4d: ...

  @overload
  def lookAlong(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Matrix4d) -> Matrix4d: ...

  @overload
  def lookAlong(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Matrix4d) -> Matrix4d: ...

  @overload
  def lookAlong(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix4d: ...

  @overload
  def lookAlong(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4d) -> Matrix4d: ...

  @overload
  def lookAlong(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4d) -> Matrix4d: ...

  @overload
  def lookAt(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Vector3dc) -> Matrix4d: ...

  @overload
  def lookAt(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Vector3dc, arg3: Matrix4d) -> Matrix4d: ...

  @overload
  def lookAt(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Vector3dc, arg3: Matrix4d) -> Matrix4d: ...

  @overload
  def lookAt(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float) -> Matrix4d: ...

  @overload
  def lookAt(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: Matrix4d) -> Matrix4d: ...

  @overload
  def lookAt(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: Matrix4d) -> Matrix4d: ...

  @overload
  def lookAtLH(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Vector3dc) -> Matrix4d: ...

  @overload
  def lookAtLH(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Vector3dc, arg3: Matrix4d) -> Matrix4d: ...

  @overload
  def lookAtLH(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Vector3dc, arg3: Matrix4d) -> Matrix4d: ...

  @overload
  def lookAtLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float) -> Matrix4d: ...

  @overload
  def lookAtLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: Matrix4d) -> Matrix4d: ...

  @overload
  def lookAtLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: Matrix4d) -> Matrix4d: ...

  @overload
  def lookAtPerspective(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: Matrix4d) -> Matrix4d: ...

  @overload
  def lookAtPerspective(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: Matrix4d) -> Matrix4d: ...

  @overload
  def lookAtPerspectiveLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: Matrix4d) -> Matrix4d: ...

  @overload
  def lookAtPerspectiveLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: Matrix4d) -> Matrix4d: ...

  @overload
  def m00(self) -> float: ...

  @overload
  def m00(self) -> float: ...

  @overload
  def m00(self, arg0: float) -> Matrix4d: ...

  @overload
  def m01(self) -> float: ...

  @overload
  def m01(self) -> float: ...

  @overload
  def m01(self, arg0: float) -> Matrix4d: ...

  @overload
  def m02(self) -> float: ...

  @overload
  def m02(self) -> float: ...

  @overload
  def m02(self, arg0: float) -> Matrix4d: ...

  @overload
  def m03(self) -> float: ...

  @overload
  def m03(self) -> float: ...

  @overload
  def m03(self, arg0: float) -> Matrix4d: ...

  @overload
  def m10(self) -> float: ...

  @overload
  def m10(self) -> float: ...

  @overload
  def m10(self, arg0: float) -> Matrix4d: ...

  @overload
  def m11(self) -> float: ...

  @overload
  def m11(self) -> float: ...

  @overload
  def m11(self, arg0: float) -> Matrix4d: ...

  @overload
  def m12(self) -> float: ...

  @overload
  def m12(self) -> float: ...

  @overload
  def m12(self, arg0: float) -> Matrix4d: ...

  @overload
  def m13(self) -> float: ...

  @overload
  def m13(self) -> float: ...

  @overload
  def m13(self, arg0: float) -> Matrix4d: ...

  @overload
  def m20(self) -> float: ...

  @overload
  def m20(self) -> float: ...

  @overload
  def m20(self, arg0: float) -> Matrix4d: ...

  @overload
  def m21(self) -> float: ...

  @overload
  def m21(self) -> float: ...

  @overload
  def m21(self, arg0: float) -> Matrix4d: ...

  @overload
  def m22(self) -> float: ...

  @overload
  def m22(self) -> float: ...

  @overload
  def m22(self, arg0: float) -> Matrix4d: ...

  @overload
  def m23(self) -> float: ...

  @overload
  def m23(self) -> float: ...

  @overload
  def m23(self, arg0: float) -> Matrix4d: ...

  @overload
  def m30(self) -> float: ...

  @overload
  def m30(self) -> float: ...

  @overload
  def m30(self, arg0: float) -> Matrix4d: ...

  @overload
  def m31(self) -> float: ...

  @overload
  def m31(self) -> float: ...

  @overload
  def m31(self, arg0: float) -> Matrix4d: ...

  @overload
  def m32(self) -> float: ...

  @overload
  def m32(self) -> float: ...

  @overload
  def m32(self, arg0: float) -> Matrix4d: ...

  @overload
  def m33(self) -> float: ...

  @overload
  def m33(self) -> float: ...

  @overload
  def m33(self, arg0: float) -> Matrix4d: ...

  @overload
  def mul(self, arg0: Matrix3x2dc) -> Matrix4d: ...

  @overload
  def mul(self, arg0: Matrix3x2fc) -> Matrix4d: ...

  @overload
  def mul(self, arg0: Matrix4dc) -> Matrix4d: ...

  @overload
  def mul(self, arg0: Matrix4f) -> Matrix4d: ...

  @overload
  def mul(self, arg0: Matrix4x3dc) -> Matrix4d: ...

  @overload
  def mul(self, arg0: Matrix3x2dc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def mul(self, arg0: Matrix3x2dc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def mul(self, arg0: Matrix3x2fc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def mul(self, arg0: Matrix3x2fc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def mul(self, arg0: Matrix4dc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def mul(self, arg0: Matrix4dc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def mul(self, arg0: Matrix4fc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def mul(self, arg0: Matrix4fc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def mul(self, arg0: Matrix4x3dc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def mul(self, arg0: Matrix4x3dc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def mul(self, arg0: Matrix4x3fc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def mul(self, arg0: Matrix4x3fc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def mul(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float, arg10: float, arg11: float, arg12: float, arg13: float, arg14: float, arg15: float) -> Matrix4d: ...

  @overload
  def mul(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float, arg10: float, arg11: float, arg12: float, arg13: float, arg14: float, arg15: float, arg16: Matrix4d) -> Matrix4d: ...

  @overload
  def mul(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float, arg10: float, arg11: float, arg12: float, arg13: float, arg14: float, arg15: float, arg16: Matrix4d) -> Matrix4d: ...

  @overload
  def mul0(self, arg0: Matrix4dc) -> Matrix4d: ...

  @overload
  def mul0(self, arg0: Matrix4dc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def mul0(self, arg0: Matrix4dc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def mul3x3(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float) -> Matrix4d: ...

  @overload
  def mul3x3(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: Matrix4d) -> Matrix4d: ...

  @overload
  def mul3x3(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: Matrix4d) -> Matrix4d: ...

  @overload
  def mul4x3ComponentWise(self, arg0: Matrix4dc) -> Matrix4d: ...

  @overload
  def mul4x3ComponentWise(self, arg0: Matrix4dc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def mul4x3ComponentWise(self, arg0: Matrix4dc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def mulAffine(self, arg0: Matrix4dc) -> Matrix4d: ...

  @overload
  def mulAffine(self, arg0: Matrix4dc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def mulAffine(self, arg0: Matrix4dc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def mulAffineR(self, arg0: Matrix4dc) -> Matrix4d: ...

  @overload
  def mulAffineR(self, arg0: Matrix4dc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def mulAffineR(self, arg0: Matrix4dc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def mulComponentWise(self, arg0: Matrix4dc) -> Matrix4d: ...

  @overload
  def mulComponentWise(self, arg0: Matrix4dc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def mulComponentWise(self, arg0: Matrix4dc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def mulLocal(self, arg0: Matrix4dc) -> Matrix4d: ...

  @overload
  def mulLocal(self, arg0: Matrix4dc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def mulLocal(self, arg0: Matrix4dc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def mulLocalAffine(self, arg0: Matrix4dc) -> Matrix4d: ...

  @overload
  def mulLocalAffine(self, arg0: Matrix4dc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def mulLocalAffine(self, arg0: Matrix4dc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def mulOrthoAffine(self, arg0: Matrix4dc) -> Matrix4d: ...

  @overload
  def mulOrthoAffine(self, arg0: Matrix4dc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def mulOrthoAffine(self, arg0: Matrix4dc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def mulPerspectiveAffine(self, arg0: Matrix4dc) -> Matrix4d: ...

  @overload
  def mulPerspectiveAffine(self, arg0: Matrix4dc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def mulPerspectiveAffine(self, arg0: Matrix4dc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def mulPerspectiveAffine(self, arg0: Matrix4x3dc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def mulPerspectiveAffine(self, arg0: Matrix4x3dc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def mulTranslationAffine(self, arg0: Matrix4dc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def mulTranslationAffine(self, arg0: Matrix4dc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def normal(self) -> Matrix4d: ...

  @overload
  def normal(self, arg0: Matrix3d) -> Matrix3d: ...

  @overload
  def normal(self, arg0: Matrix3d) -> Matrix3d: ...

  @overload
  def normal(self, arg0: Matrix4d) -> Matrix4d: ...

  @overload
  def normal(self, arg0: Matrix4d) -> Matrix4d: ...

  @overload
  def normalize3x3(self) -> Matrix4d: ...

  @overload
  def normalize3x3(self, arg0: Matrix3d) -> Matrix3d: ...

  @overload
  def normalize3x3(self, arg0: Matrix3d) -> Matrix3d: ...

  @overload
  def normalize3x3(self, arg0: Matrix4d) -> Matrix4d: ...

  @overload
  def normalize3x3(self, arg0: Matrix4d) -> Matrix4d: ...

  @overload
  def normalizedPositiveX(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def normalizedPositiveX(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def normalizedPositiveY(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def normalizedPositiveY(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def normalizedPositiveZ(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def normalizedPositiveZ(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def obliqueZ(self, arg0: float, arg1: float) -> Matrix4d: ...

  @overload
  def obliqueZ(self, arg0: float, arg1: float, arg2: Matrix4d) -> Matrix4d: ...

  @overload
  def obliqueZ(self, arg0: float, arg1: float, arg2: Matrix4d) -> Matrix4d: ...

  @overload
  def origin(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def origin(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def originAffine(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def originAffine(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def ortho(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix4d: ...

  @overload
  def ortho(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool) -> Matrix4d: ...

  @overload
  def ortho(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4d) -> Matrix4d: ...

  @overload
  def ortho(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4d) -> Matrix4d: ...

  @overload
  def ortho(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool, arg7: Matrix4d) -> Matrix4d: ...

  @overload
  def ortho(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool, arg7: Matrix4d) -> Matrix4d: ...

  @overload
  def ortho2D(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4d: ...

  @overload
  def ortho2D(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4d) -> Matrix4d: ...

  @overload
  def ortho2D(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4d) -> Matrix4d: ...

  @overload
  def ortho2DLH(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4d: ...

  @overload
  def ortho2DLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4d) -> Matrix4d: ...

  @overload
  def ortho2DLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4d) -> Matrix4d: ...

  @overload
  def orthoCrop(self, arg0: Matrix4dc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def orthoCrop(self, arg0: Matrix4dc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def orthoLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix4d: ...

  @overload
  def orthoLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool) -> Matrix4d: ...

  @overload
  def orthoLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4d) -> Matrix4d: ...

  @overload
  def orthoLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4d) -> Matrix4d: ...

  @overload
  def orthoLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool, arg7: Matrix4d) -> Matrix4d: ...

  @overload
  def orthoLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool, arg7: Matrix4d) -> Matrix4d: ...

  @overload
  def orthoSymmetric(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4d: ...

  @overload
  def orthoSymmetric(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool) -> Matrix4d: ...

  @overload
  def orthoSymmetric(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4d) -> Matrix4d: ...

  @overload
  def orthoSymmetric(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4d) -> Matrix4d: ...

  @overload
  def orthoSymmetric(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool, arg5: Matrix4d) -> Matrix4d: ...

  @overload
  def orthoSymmetric(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool, arg5: Matrix4d) -> Matrix4d: ...

  @overload
  def orthoSymmetricLH(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4d: ...

  @overload
  def orthoSymmetricLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool) -> Matrix4d: ...

  @overload
  def orthoSymmetricLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4d) -> Matrix4d: ...

  @overload
  def orthoSymmetricLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4d) -> Matrix4d: ...

  @overload
  def orthoSymmetricLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool, arg5: Matrix4d) -> Matrix4d: ...

  @overload
  def orthoSymmetricLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool, arg5: Matrix4d) -> Matrix4d: ...

  @overload
  def perspective(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4d: ...

  @overload
  def perspective(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool) -> Matrix4d: ...

  @overload
  def perspective(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4d) -> Matrix4d: ...

  @overload
  def perspective(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4d) -> Matrix4d: ...

  @overload
  def perspective(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool, arg5: Matrix4d) -> Matrix4d: ...

  @overload
  def perspective(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool, arg5: Matrix4d) -> Matrix4d: ...

  @overload
  def perspectiveFar(self) -> float: ...

  @overload
  def perspectiveFar(self) -> float: ...

  @overload
  def perspectiveFov(self) -> float: ...

  @overload
  def perspectiveFov(self) -> float: ...

  @overload
  def perspectiveFrustumSlice(self, arg0: float, arg1: float, arg2: Matrix4d) -> Matrix4d: ...

  @overload
  def perspectiveFrustumSlice(self, arg0: float, arg1: float, arg2: Matrix4d) -> Matrix4d: ...

  @overload
  def perspectiveInvOrigin(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def perspectiveInvOrigin(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def perspectiveLH(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4d: ...

  @overload
  def perspectiveLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool) -> Matrix4d: ...

  @overload
  def perspectiveLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4d) -> Matrix4d: ...

  @overload
  def perspectiveLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4d) -> Matrix4d: ...

  @overload
  def perspectiveLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool, arg5: Matrix4d) -> Matrix4d: ...

  @overload
  def perspectiveLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool, arg5: Matrix4d) -> Matrix4d: ...

  @overload
  def perspectiveNear(self) -> float: ...

  @overload
  def perspectiveNear(self) -> float: ...

  @overload
  def perspectiveOffCenter(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix4d: ...

  @overload
  def perspectiveOffCenter(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix4d: ...

  @overload
  def perspectiveOffCenter(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool) -> Matrix4d: ...

  @overload
  def perspectiveOffCenter(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool) -> Matrix4d: ...

  @overload
  def perspectiveOffCenter(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4d) -> Matrix4d: ...

  @overload
  def perspectiveOffCenter(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4d) -> Matrix4d: ...

  @overload
  def perspectiveOffCenter(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool, arg7: Matrix4d) -> Matrix4d: ...

  @overload
  def perspectiveOffCenter(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool, arg7: Matrix4d) -> Matrix4d: ...

  @overload
  def perspectiveOrigin(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def perspectiveOrigin(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def perspectiveRect(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4d: ...

  @overload
  def perspectiveRect(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4d: ...

  @overload
  def perspectiveRect(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool) -> Matrix4d: ...

  @overload
  def perspectiveRect(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool) -> Matrix4d: ...

  @overload
  def perspectiveRect(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4d) -> Matrix4d: ...

  @overload
  def perspectiveRect(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4d) -> Matrix4d: ...

  @overload
  def perspectiveRect(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool, arg5: Matrix4d) -> Matrix4d: ...

  @overload
  def perspectiveRect(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool, arg5: Matrix4d) -> Matrix4d: ...

  @overload
  def pick(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: list[int]) -> Matrix4d: ...

  @overload
  def pick(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: list[int], arg5: Matrix4d) -> Matrix4d: ...

  @overload
  def pick(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: list[int], arg5: Matrix4d) -> Matrix4d: ...

  @overload
  def positiveX(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def positiveX(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def positiveY(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def positiveY(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def positiveZ(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def positiveZ(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def project(self, arg0: Vector3dc, arg1: list[int], arg2: Vector3d) -> Vector3d: ...

  @overload
  def project(self, arg0: Vector3dc, arg1: list[int], arg2: Vector3d) -> Vector3d: ...

  @overload
  def project(self, arg0: Vector3dc, arg1: list[int], arg2: Vector4d) -> Vector4d: ...

  @overload
  def project(self, arg0: Vector3dc, arg1: list[int], arg2: Vector4d) -> Vector4d: ...

  @overload
  def project(self, arg0: float, arg1: float, arg2: float, arg3: list[int], arg4: Vector3d) -> Vector3d: ...

  @overload
  def project(self, arg0: float, arg1: float, arg2: float, arg3: list[int], arg4: Vector3d) -> Vector3d: ...

  @overload
  def project(self, arg0: float, arg1: float, arg2: float, arg3: list[int], arg4: Vector4d) -> Vector4d: ...

  @overload
  def project(self, arg0: float, arg1: float, arg2: float, arg3: list[int], arg4: Vector4d) -> Vector4d: ...

  @overload
  def projectedGridRange(self, arg0: Matrix4dc, arg1: float, arg2: float, arg3: Matrix4d) -> Matrix4d: ...

  @overload
  def projectedGridRange(self, arg0: Matrix4dc, arg1: float, arg2: float, arg3: Matrix4d) -> Matrix4d: ...

  @overload
  def properties(self) -> int: ...

  @overload
  def properties(self) -> int: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def reflect(self, arg0: Quaterniondc, arg1: Vector3dc) -> Matrix4d: ...

  @overload
  def reflect(self, arg0: Vector3dc, arg1: Vector3dc) -> Matrix4d: ...

  @overload
  def reflect(self, arg0: Quaterniondc, arg1: Vector3dc, arg2: Matrix4d) -> Matrix4d: ...

  @overload
  def reflect(self, arg0: Quaterniondc, arg1: Vector3dc, arg2: Matrix4d) -> Matrix4d: ...

  @overload
  def reflect(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Matrix4d) -> Matrix4d: ...

  @overload
  def reflect(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Matrix4d) -> Matrix4d: ...

  @overload
  def reflect(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4d: ...

  @overload
  def reflect(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4d) -> Matrix4d: ...

  @overload
  def reflect(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4d) -> Matrix4d: ...

  @overload
  def reflect(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix4d: ...

  @overload
  def reflect(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4d) -> Matrix4d: ...

  @overload
  def reflect(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4d) -> Matrix4d: ...

  @overload
  def reflection(self, arg0: Quaterniondc, arg1: Vector3dc) -> Matrix4d: ...

  @overload
  def reflection(self, arg0: Vector3dc, arg1: Vector3dc) -> Matrix4d: ...

  @overload
  def reflection(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4d: ...

  @overload
  def reflection(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix4d: ...

  @overload
  def rotate(self, arg0: AxisAngle4d) -> Matrix4d: ...

  @overload
  def rotate(self, arg0: AxisAngle4f) -> Matrix4d: ...

  @overload
  def rotate(self, arg0: Quaterniondc) -> Matrix4d: ...

  @overload
  def rotate(self, arg0: Quaternionfc) -> Matrix4d: ...

  @overload
  def rotate(self, arg0: float, arg1: Vector3dc) -> Matrix4d: ...

  @overload
  def rotate(self, arg0: float, arg1: Vector3fc) -> Matrix4d: ...

  @overload
  def rotate(self, arg0: AxisAngle4d, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def rotate(self, arg0: AxisAngle4d, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def rotate(self, arg0: AxisAngle4f, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def rotate(self, arg0: AxisAngle4f, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def rotate(self, arg0: Quaterniondc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def rotate(self, arg0: Quaterniondc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def rotate(self, arg0: Quaternionfc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def rotate(self, arg0: Quaternionfc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def rotate(self, arg0: float, arg1: Vector3dc, arg2: Matrix4d) -> Matrix4d: ...

  @overload
  def rotate(self, arg0: float, arg1: Vector3dc, arg2: Matrix4d) -> Matrix4d: ...

  @overload
  def rotate(self, arg0: float, arg1: Vector3fc, arg2: Matrix4d) -> Matrix4d: ...

  @overload
  def rotate(self, arg0: float, arg1: Vector3fc, arg2: Matrix4d) -> Matrix4d: ...

  @overload
  def rotate(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4d: ...

  @overload
  def rotate(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4d) -> Matrix4d: ...

  @overload
  def rotate(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4d) -> Matrix4d: ...

  @overload
  def rotateAffine(self, arg0: Quaterniondc) -> Matrix4d: ...

  @overload
  def rotateAffine(self, arg0: Quaternionfc) -> Matrix4d: ...

  @overload
  def rotateAffine(self, arg0: Quaterniondc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def rotateAffine(self, arg0: Quaterniondc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def rotateAffine(self, arg0: Quaternionfc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def rotateAffine(self, arg0: Quaternionfc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def rotateAffine(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4d: ...

  @overload
  def rotateAffine(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4d) -> Matrix4d: ...

  @overload
  def rotateAffine(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4d) -> Matrix4d: ...

  @overload
  def rotateAffineXYZ(self, arg0: float, arg1: float, arg2: float) -> Matrix4d: ...

  @overload
  def rotateAffineXYZ(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4d) -> Matrix4d: ...

  @overload
  def rotateAffineXYZ(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4d) -> Matrix4d: ...

  @overload
  def rotateAffineYXZ(self, arg0: float, arg1: float, arg2: float) -> Matrix4d: ...

  @overload
  def rotateAffineYXZ(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4d) -> Matrix4d: ...

  @overload
  def rotateAffineYXZ(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4d) -> Matrix4d: ...

  @overload
  def rotateAffineZYX(self, arg0: float, arg1: float, arg2: float) -> Matrix4d: ...

  @overload
  def rotateAffineZYX(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4d) -> Matrix4d: ...

  @overload
  def rotateAffineZYX(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4d) -> Matrix4d: ...

  @overload
  def rotateAround(self, arg0: Quaterniondc, arg1: float, arg2: float, arg3: float) -> Matrix4d: ...

  @overload
  def rotateAround(self, arg0: Quaterniondc, arg1: float, arg2: float, arg3: float, arg4: Matrix4d) -> Matrix4d: ...

  @overload
  def rotateAround(self, arg0: Quaterniondc, arg1: float, arg2: float, arg3: float, arg4: Matrix4d) -> Matrix4d: ...

  @overload
  def rotateAroundAffine(self, arg0: Quaterniondc, arg1: float, arg2: float, arg3: float, arg4: Matrix4d) -> Matrix4d: ...

  @overload
  def rotateAroundAffine(self, arg0: Quaterniondc, arg1: float, arg2: float, arg3: float, arg4: Matrix4d) -> Matrix4d: ...

  @overload
  def rotateAroundLocal(self, arg0: Quaterniondc, arg1: float, arg2: float, arg3: float) -> Matrix4d: ...

  @overload
  def rotateAroundLocal(self, arg0: Quaterniondc, arg1: float, arg2: float, arg3: float, arg4: Matrix4d) -> Matrix4d: ...

  @overload
  def rotateAroundLocal(self, arg0: Quaterniondc, arg1: float, arg2: float, arg3: float, arg4: Matrix4d) -> Matrix4d: ...

  @overload
  def rotateLocal(self, arg0: Quaterniondc) -> Matrix4d: ...

  @overload
  def rotateLocal(self, arg0: Quaternionfc) -> Matrix4d: ...

  @overload
  def rotateLocal(self, arg0: Quaterniondc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def rotateLocal(self, arg0: Quaterniondc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def rotateLocal(self, arg0: Quaternionfc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def rotateLocal(self, arg0: Quaternionfc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def rotateLocal(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4d: ...

  @overload
  def rotateLocal(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4d) -> Matrix4d: ...

  @overload
  def rotateLocal(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4d) -> Matrix4d: ...

  @overload
  def rotateLocalX(self, arg0: float) -> Matrix4d: ...

  @overload
  def rotateLocalX(self, arg0: float, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def rotateLocalX(self, arg0: float, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def rotateLocalY(self, arg0: float) -> Matrix4d: ...

  @overload
  def rotateLocalY(self, arg0: float, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def rotateLocalY(self, arg0: float, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def rotateLocalZ(self, arg0: float) -> Matrix4d: ...

  @overload
  def rotateLocalZ(self, arg0: float, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def rotateLocalZ(self, arg0: float, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def rotateTowards(self, arg0: Vector3dc, arg1: Vector3dc) -> Matrix4d: ...

  @overload
  def rotateTowards(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Matrix4d) -> Matrix4d: ...

  @overload
  def rotateTowards(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Matrix4d) -> Matrix4d: ...

  @overload
  def rotateTowards(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix4d: ...

  @overload
  def rotateTowards(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4d) -> Matrix4d: ...

  @overload
  def rotateTowards(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4d) -> Matrix4d: ...

  @overload
  def rotateTowardsXY(self, arg0: float, arg1: float) -> Matrix4d: ...

  @overload
  def rotateTowardsXY(self, arg0: float, arg1: float, arg2: Matrix4d) -> Matrix4d: ...

  @overload
  def rotateTowardsXY(self, arg0: float, arg1: float, arg2: Matrix4d) -> Matrix4d: ...

  @overload
  def rotateTranslation(self, arg0: Quaterniondc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def rotateTranslation(self, arg0: Quaterniondc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def rotateTranslation(self, arg0: Quaternionfc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def rotateTranslation(self, arg0: Quaternionfc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def rotateTranslation(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4d) -> Matrix4d: ...

  @overload
  def rotateTranslation(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4d) -> Matrix4d: ...

  @overload
  def rotateX(self, arg0: float) -> Matrix4d: ...

  @overload
  def rotateX(self, arg0: float, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def rotateX(self, arg0: float, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def rotateXYZ(self, arg0: Vector3d) -> Matrix4d: ...

  @overload
  def rotateXYZ(self, arg0: float, arg1: float, arg2: float) -> Matrix4d: ...

  @overload
  def rotateXYZ(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4d) -> Matrix4d: ...

  @overload
  def rotateXYZ(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4d) -> Matrix4d: ...

  @overload
  def rotateY(self, arg0: float) -> Matrix4d: ...

  @overload
  def rotateY(self, arg0: float, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def rotateY(self, arg0: float, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def rotateYXZ(self, arg0: Vector3d) -> Matrix4d: ...

  @overload
  def rotateYXZ(self, arg0: float, arg1: float, arg2: float) -> Matrix4d: ...

  @overload
  def rotateYXZ(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4d) -> Matrix4d: ...

  @overload
  def rotateYXZ(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4d) -> Matrix4d: ...

  @overload
  def rotateZ(self, arg0: float) -> Matrix4d: ...

  @overload
  def rotateZ(self, arg0: float, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def rotateZ(self, arg0: float, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def rotateZYX(self, arg0: Vector3d) -> Matrix4d: ...

  @overload
  def rotateZYX(self, arg0: float, arg1: float, arg2: float) -> Matrix4d: ...

  @overload
  def rotateZYX(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4d) -> Matrix4d: ...

  @overload
  def rotateZYX(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4d) -> Matrix4d: ...

  @overload
  def rotation(self, arg0: AxisAngle4d) -> Matrix4d: ...

  @overload
  def rotation(self, arg0: AxisAngle4f) -> Matrix4d: ...

  @overload
  def rotation(self, arg0: Quaterniondc) -> Matrix4d: ...

  @overload
  def rotation(self, arg0: Quaternionfc) -> Matrix4d: ...

  @overload
  def rotation(self, arg0: float, arg1: Vector3dc) -> Matrix4d: ...

  @overload
  def rotation(self, arg0: float, arg1: Vector3fc) -> Matrix4d: ...

  @overload
  def rotation(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4d: ...

  def rotationAround(self, arg0: Quaterniondc, arg1: float, arg2: float, arg3: float) -> Matrix4d: ...

  @overload
  def rotationTowards(self, arg0: Vector3dc, arg1: Vector3dc) -> Matrix4d: ...

  @overload
  def rotationTowards(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix4d: ...

  def rotationTowardsXY(self, arg0: float, arg1: float) -> Matrix4d: ...

  def rotationX(self, arg0: float) -> Matrix4d: ...

  def rotationXYZ(self, arg0: float, arg1: float, arg2: float) -> Matrix4d: ...

  def rotationY(self, arg0: float) -> Matrix4d: ...

  def rotationYXZ(self, arg0: float, arg1: float, arg2: float) -> Matrix4d: ...

  def rotationZ(self, arg0: float) -> Matrix4d: ...

  def rotationZYX(self, arg0: float, arg1: float, arg2: float) -> Matrix4d: ...

  @overload
  def scale(self, arg0: float) -> Matrix4d: ...

  @overload
  def scale(self, arg0: Vector3dc) -> Matrix4d: ...

  @overload
  def scale(self, arg0: float, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def scale(self, arg0: float, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def scale(self, arg0: Vector3dc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def scale(self, arg0: Vector3dc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def scale(self, arg0: float, arg1: float, arg2: float) -> Matrix4d: ...

  @overload
  def scale(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4d) -> Matrix4d: ...

  @overload
  def scale(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4d) -> Matrix4d: ...

  @overload
  def scaleAround(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4d: ...

  @overload
  def scaleAround(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4d) -> Matrix4d: ...

  @overload
  def scaleAround(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4d) -> Matrix4d: ...

  @overload
  def scaleAround(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix4d: ...

  @overload
  def scaleAround(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4d) -> Matrix4d: ...

  @overload
  def scaleAround(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4d) -> Matrix4d: ...

  @overload
  def scaleAroundLocal(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4d: ...

  @overload
  def scaleAroundLocal(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4d) -> Matrix4d: ...

  @overload
  def scaleAroundLocal(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4d) -> Matrix4d: ...

  @overload
  def scaleAroundLocal(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix4d: ...

  @overload
  def scaleAroundLocal(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4d) -> Matrix4d: ...

  @overload
  def scaleAroundLocal(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4d) -> Matrix4d: ...

  @overload
  def scaleLocal(self, arg0: float) -> Matrix4d: ...

  @overload
  def scaleLocal(self, arg0: float, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def scaleLocal(self, arg0: float, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def scaleLocal(self, arg0: float, arg1: float, arg2: float) -> Matrix4d: ...

  @overload
  def scaleLocal(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4d) -> Matrix4d: ...

  @overload
  def scaleLocal(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4d) -> Matrix4d: ...

  @overload
  def scaleXY(self, arg0: float, arg1: float) -> Matrix4d: ...

  @overload
  def scaleXY(self, arg0: float, arg1: float, arg2: Matrix4d) -> Matrix4d: ...

  @overload
  def scaleXY(self, arg0: float, arg1: float, arg2: Matrix4d) -> Matrix4d: ...

  @overload
  def scaling(self, arg0: float) -> Matrix4d: ...

  @overload
  def scaling(self, arg0: Vector3dc) -> Matrix4d: ...

  @overload
  def scaling(self, arg0: float, arg1: float, arg2: float) -> Matrix4d: ...

  @overload
  def set(self, arg0: list[float]) -> Matrix4d: ...

  @overload
  def set(self, arg0: list[float]) -> Matrix4d: ...

  @overload
  def set(self, arg0: ByteBuffer) -> Matrix4d: ...

  @overload
  def set(self, arg0: DoubleBuffer) -> Matrix4d: ...

  @overload
  def set(self, arg0: FloatBuffer) -> Matrix4d: ...

  @overload
  def set(self, arg0: AxisAngle4d) -> Matrix4d: ...

  @overload
  def set(self, arg0: AxisAngle4f) -> Matrix4d: ...

  @overload
  def set(self, arg0: Matrix3dc) -> Matrix4d: ...

  @overload
  def set(self, arg0: Matrix4dc) -> Matrix4d: ...

  @overload
  def set(self, arg0: Matrix4fc) -> Matrix4d: ...

  @overload
  def set(self, arg0: Matrix4x3dc) -> Matrix4d: ...

  @overload
  def set(self, arg0: Matrix4x3fc) -> Matrix4d: ...

  @overload
  def set(self, arg0: Quaterniondc) -> Matrix4d: ...

  @overload
  def set(self, arg0: Quaternionfc) -> Matrix4d: ...

  @overload
  def set(self, arg0: list[float], arg1: int) -> Matrix4d: ...

  @overload
  def set(self, arg0: list[float], arg1: int) -> Matrix4d: ...

  @overload
  def set(self, arg0: int, arg1: int, arg2: float) -> Matrix4d: ...

  @overload
  def set(self, arg0: Vector4d, arg1: Vector4d, arg2: Vector4d, arg3: Vector4d) -> Matrix4d: ...

  @overload
  def set(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float, arg10: float, arg11: float, arg12: float, arg13: float, arg14: float, arg15: float) -> Matrix4d: ...

  @overload
  def set3x3(self, arg0: Matrix3dc) -> Matrix4d: ...

  @overload
  def set3x3(self, arg0: Matrix4dc) -> Matrix4d: ...

  @overload
  def set4x3(self, arg0: Matrix4dc) -> Matrix4d: ...

  @overload
  def set4x3(self, arg0: Matrix4x3dc) -> Matrix4d: ...

  @overload
  def set4x3(self, arg0: Matrix4x3fc) -> Matrix4d: ...

  def setColumn(self, arg0: int, arg1: Vector4dc) -> Matrix4d: ...

  def setFloats(self, arg0: ByteBuffer) -> Matrix4d: ...

  def setFromAddress(self, arg0: int) -> Matrix4d: ...

  def setFromIntrinsic(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: int, arg6: int, arg7: float, arg8: float) -> Matrix4d: ...

  @overload
  def setFrustum(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix4d: ...

  @overload
  def setFrustum(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool) -> Matrix4d: ...

  @overload
  def setFrustumLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix4d: ...

  @overload
  def setFrustumLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool) -> Matrix4d: ...

  @overload
  def setLookAlong(self, arg0: Vector3dc, arg1: Vector3dc) -> Matrix4d: ...

  @overload
  def setLookAlong(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix4d: ...

  @overload
  def setLookAt(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Vector3dc) -> Matrix4d: ...

  @overload
  def setLookAt(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float) -> Matrix4d: ...

  @overload
  def setLookAtLH(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Vector3dc) -> Matrix4d: ...

  @overload
  def setLookAtLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float) -> Matrix4d: ...

  @overload
  def setOrtho(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix4d: ...

  @overload
  def setOrtho(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool) -> Matrix4d: ...

  def setOrtho2D(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4d: ...

  def setOrtho2DLH(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4d: ...

  @overload
  def setOrthoLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix4d: ...

  @overload
  def setOrthoLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool) -> Matrix4d: ...

  @overload
  def setOrthoSymmetric(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4d: ...

  @overload
  def setOrthoSymmetric(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool) -> Matrix4d: ...

  @overload
  def setOrthoSymmetricLH(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4d: ...

  @overload
  def setOrthoSymmetricLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool) -> Matrix4d: ...

  @overload
  def setPerspective(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4d: ...

  @overload
  def setPerspective(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool) -> Matrix4d: ...

  @overload
  def setPerspectiveLH(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4d: ...

  @overload
  def setPerspectiveLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool) -> Matrix4d: ...

  @overload
  def setPerspectiveOffCenter(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix4d: ...

  @overload
  def setPerspectiveOffCenter(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool) -> Matrix4d: ...

  @overload
  def setPerspectiveRect(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4d: ...

  @overload
  def setPerspectiveRect(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool) -> Matrix4d: ...

  def setRotationXYZ(self, arg0: float, arg1: float, arg2: float) -> Matrix4d: ...

  def setRotationYXZ(self, arg0: float, arg1: float, arg2: float) -> Matrix4d: ...

  def setRotationZYX(self, arg0: float, arg1: float, arg2: float) -> Matrix4d: ...

  def setRow(self, arg0: int, arg1: Vector4dc) -> Matrix4d: ...

  def setRowColumn(self, arg0: int, arg1: int, arg2: float) -> Matrix4d: ...

  @overload
  def setTranslation(self, arg0: Vector3dc) -> Matrix4d: ...

  @overload
  def setTranslation(self, arg0: float, arg1: float, arg2: float) -> Matrix4d: ...

  def setTransposed(self, arg0: Matrix4dc) -> Matrix4d: ...

  @overload
  def shadow(self, arg0: Vector4d, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def shadow(self, arg0: Vector4dc, arg1: Matrix4dc, arg2: Matrix4d) -> Matrix4d: ...

  @overload
  def shadow(self, arg0: Vector4dc, arg1: Matrix4dc, arg2: Matrix4d) -> Matrix4d: ...

  @overload
  def shadow(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4dc) -> Matrix4d: ...

  @overload
  def shadow(self, arg0: Vector4dc, arg1: float, arg2: float, arg3: float, arg4: float) -> Matrix4d: ...

  @overload
  def shadow(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4dc, arg5: Matrix4d) -> Matrix4d: ...

  @overload
  def shadow(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4dc, arg5: Matrix4d) -> Matrix4d: ...

  @overload
  def shadow(self, arg0: Vector4dc, arg1: float, arg2: float, arg3: float, arg4: float, arg5: Matrix4d) -> Matrix4d: ...

  @overload
  def shadow(self, arg0: Vector4dc, arg1: float, arg2: float, arg3: float, arg4: float, arg5: Matrix4d) -> Matrix4d: ...

  @overload
  def shadow(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float) -> Matrix4d: ...

  @overload
  def shadow(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: Matrix4d) -> Matrix4d: ...

  @overload
  def shadow(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: Matrix4d) -> Matrix4d: ...

  @overload
  def sub(self, arg0: Matrix4dc) -> Matrix4d: ...

  @overload
  def sub(self, arg0: Matrix4dc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def sub(self, arg0: Matrix4dc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def sub4x3(self, arg0: Matrix4dc) -> Matrix4d: ...

  @overload
  def sub4x3(self, arg0: Matrix4dc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def sub4x3(self, arg0: Matrix4dc, arg1: Matrix4d) -> Matrix4d: ...

  def swap(self, arg0: Matrix4d) -> Matrix4d: ...

  @overload
  def testAab(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> bool: ...

  @overload
  def testAab(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> bool: ...

  @overload
  def testPoint(self, arg0: float, arg1: float, arg2: float) -> bool: ...

  @overload
  def testPoint(self, arg0: float, arg1: float, arg2: float) -> bool: ...

  @overload
  def testSphere(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool: ...

  @overload
  def testSphere(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool: ...

  @overload
  def toString(self) -> str: ...

  @overload
  def toString(self, arg0: NumberFormat) -> str: ...

  @overload
  def transform(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transform(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transform(self, arg0: Vector4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def transform(self, arg0: Vector4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def transform(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Vector4d) -> Vector4d: ...

  @overload
  def transform(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Vector4d) -> Vector4d: ...

  @overload
  def transformAab(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Vector3d, arg3: Vector3d) -> Matrix4d: ...

  @overload
  def transformAab(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Vector3d, arg3: Vector3d) -> Matrix4d: ...

  @overload
  def transformAab(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Vector3d, arg7: Vector3d) -> Matrix4d: ...

  @overload
  def transformAab(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Vector3d, arg7: Vector3d) -> Matrix4d: ...

  @overload
  def transformAffine(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transformAffine(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transformAffine(self, arg0: Vector4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def transformAffine(self, arg0: Vector4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def transformAffine(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Vector4d) -> Vector4d: ...

  @overload
  def transformAffine(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Vector4d) -> Vector4d: ...

  @overload
  def transformDirection(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformDirection(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformDirection(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformDirection(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformDirection(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def transformDirection(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def transformDirection(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def transformDirection(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def transformDirection(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def transformDirection(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def transformDirection(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  @overload
  def transformDirection(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  @overload
  def transformPosition(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformPosition(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformPosition(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def transformPosition(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def transformPosition(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def transformPosition(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def transformProject(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformProject(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformProject(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transformProject(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transformProject(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def transformProject(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def transformProject(self, arg0: Vector4dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def transformProject(self, arg0: Vector4dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def transformProject(self, arg0: Vector4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def transformProject(self, arg0: Vector4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def transformProject(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def transformProject(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def transformProject(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Vector3d) -> Vector3d: ...

  @overload
  def transformProject(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Vector3d) -> Vector3d: ...

  @overload
  def transformProject(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Vector4d) -> Vector4d: ...

  @overload
  def transformProject(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Vector4d) -> Vector4d: ...

  @overload
  def transformTranspose(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transformTranspose(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transformTranspose(self, arg0: Vector4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def transformTranspose(self, arg0: Vector4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def transformTranspose(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Vector4d) -> Vector4d: ...

  @overload
  def transformTranspose(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Vector4d) -> Vector4d: ...

  @overload
  def translate(self, arg0: Vector3dc) -> Matrix4d: ...

  @overload
  def translate(self, arg0: Vector3fc) -> Matrix4d: ...

  @overload
  def translate(self, arg0: Vector3dc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def translate(self, arg0: Vector3dc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def translate(self, arg0: Vector3fc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def translate(self, arg0: Vector3fc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def translate(self, arg0: float, arg1: float, arg2: float) -> Matrix4d: ...

  @overload
  def translate(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4d) -> Matrix4d: ...

  @overload
  def translate(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4d) -> Matrix4d: ...

  @overload
  def translateLocal(self, arg0: Vector3dc) -> Matrix4d: ...

  @overload
  def translateLocal(self, arg0: Vector3fc) -> Matrix4d: ...

  @overload
  def translateLocal(self, arg0: Vector3dc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def translateLocal(self, arg0: Vector3dc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def translateLocal(self, arg0: Vector3fc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def translateLocal(self, arg0: Vector3fc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def translateLocal(self, arg0: float, arg1: float, arg2: float) -> Matrix4d: ...

  @overload
  def translateLocal(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4d) -> Matrix4d: ...

  @overload
  def translateLocal(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4d) -> Matrix4d: ...

  @overload
  def translation(self, arg0: Vector3dc) -> Matrix4d: ...

  @overload
  def translation(self, arg0: Vector3fc) -> Matrix4d: ...

  @overload
  def translation(self, arg0: float, arg1: float, arg2: float) -> Matrix4d: ...

  @overload
  def translationRotate(self, arg0: float, arg1: float, arg2: float, arg3: Quaterniondc) -> Matrix4d: ...

  @overload
  def translationRotate(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float) -> Matrix4d: ...

  @overload
  def translationRotateScale(self, arg0: Vector3dc, arg1: Quaterniondc, arg2: float) -> Matrix4d: ...

  @overload
  def translationRotateScale(self, arg0: Vector3dc, arg1: Quaterniondc, arg2: Vector3dc) -> Matrix4d: ...

  @overload
  def translationRotateScale(self, arg0: Vector3fc, arg1: Quaternionfc, arg2: float) -> Matrix4d: ...

  @overload
  def translationRotateScale(self, arg0: Vector3fc, arg1: Quaternionfc, arg2: Vector3fc) -> Matrix4d: ...

  @overload
  def translationRotateScale(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float) -> Matrix4d: ...

  @overload
  def translationRotateScale(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float) -> Matrix4d: ...

  @overload
  def translationRotateScaleInvert(self, arg0: Vector3dc, arg1: Quaterniondc, arg2: float) -> Matrix4d: ...

  @overload
  def translationRotateScaleInvert(self, arg0: Vector3dc, arg1: Quaterniondc, arg2: Vector3dc) -> Matrix4d: ...

  @overload
  def translationRotateScaleInvert(self, arg0: Vector3fc, arg1: Quaternionfc, arg2: float) -> Matrix4d: ...

  @overload
  def translationRotateScaleInvert(self, arg0: Vector3fc, arg1: Quaternionfc, arg2: Vector3fc) -> Matrix4d: ...

  @overload
  def translationRotateScaleInvert(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float) -> Matrix4d: ...

  @overload
  def translationRotateScaleMulAffine(self, arg0: Vector3fc, arg1: Quaterniondc, arg2: Vector3fc, arg3: Matrix4d) -> Matrix4d: ...

  @overload
  def translationRotateScaleMulAffine(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float, arg10: Matrix4d) -> Matrix4d: ...

  @overload
  def translationRotateTowards(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Vector3dc) -> Matrix4d: ...

  @overload
  def translationRotateTowards(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float) -> Matrix4d: ...

  @overload
  def transpose(self) -> Matrix4d: ...

  @overload
  def transpose(self, arg0: Matrix4d) -> Matrix4d: ...

  @overload
  def transpose(self, arg0: Matrix4d) -> Matrix4d: ...

  @overload
  def transpose3x3(self) -> Matrix4d: ...

  @overload
  def transpose3x3(self, arg0: Matrix3d) -> Matrix3d: ...

  @overload
  def transpose3x3(self, arg0: Matrix3d) -> Matrix3d: ...

  @overload
  def transpose3x3(self, arg0: Matrix4d) -> Matrix4d: ...

  @overload
  def transpose3x3(self, arg0: Matrix4d) -> Matrix4d: ...

  def trapezoidCrop(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float) -> Matrix4d: ...

  @overload
  def unproject(self, arg0: Vector3dc, arg1: list[int], arg2: Vector3d) -> Vector3d: ...

  @overload
  def unproject(self, arg0: Vector3dc, arg1: list[int], arg2: Vector3d) -> Vector3d: ...

  @overload
  def unproject(self, arg0: Vector3dc, arg1: list[int], arg2: Vector4d) -> Vector4d: ...

  @overload
  def unproject(self, arg0: Vector3dc, arg1: list[int], arg2: Vector4d) -> Vector4d: ...

  @overload
  def unproject(self, arg0: float, arg1: float, arg2: float, arg3: list[int], arg4: Vector3d) -> Vector3d: ...

  @overload
  def unproject(self, arg0: float, arg1: float, arg2: float, arg3: list[int], arg4: Vector3d) -> Vector3d: ...

  @overload
  def unproject(self, arg0: float, arg1: float, arg2: float, arg3: list[int], arg4: Vector4d) -> Vector4d: ...

  @overload
  def unproject(self, arg0: float, arg1: float, arg2: float, arg3: list[int], arg4: Vector4d) -> Vector4d: ...

  @overload
  def unprojectInv(self, arg0: Vector3dc, arg1: list[int], arg2: Vector3d) -> Vector3d: ...

  @overload
  def unprojectInv(self, arg0: Vector3dc, arg1: list[int], arg2: Vector3d) -> Vector3d: ...

  @overload
  def unprojectInv(self, arg0: Vector3dc, arg1: list[int], arg2: Vector4d) -> Vector4d: ...

  @overload
  def unprojectInv(self, arg0: Vector3dc, arg1: list[int], arg2: Vector4d) -> Vector4d: ...

  @overload
  def unprojectInv(self, arg0: float, arg1: float, arg2: float, arg3: list[int], arg4: Vector3d) -> Vector3d: ...

  @overload
  def unprojectInv(self, arg0: float, arg1: float, arg2: float, arg3: list[int], arg4: Vector3d) -> Vector3d: ...

  @overload
  def unprojectInv(self, arg0: float, arg1: float, arg2: float, arg3: list[int], arg4: Vector4d) -> Vector4d: ...

  @overload
  def unprojectInv(self, arg0: float, arg1: float, arg2: float, arg3: list[int], arg4: Vector4d) -> Vector4d: ...

  @overload
  def unprojectInvRay(self, arg0: Vector2dc, arg1: list[int], arg2: Vector3d, arg3: Vector3d) -> Matrix4d: ...

  @overload
  def unprojectInvRay(self, arg0: Vector2dc, arg1: list[int], arg2: Vector3d, arg3: Vector3d) -> Matrix4d: ...

  @overload
  def unprojectInvRay(self, arg0: float, arg1: float, arg2: list[int], arg3: Vector3d, arg4: Vector3d) -> Matrix4d: ...

  @overload
  def unprojectInvRay(self, arg0: float, arg1: float, arg2: list[int], arg3: Vector3d, arg4: Vector3d) -> Matrix4d: ...

  @overload
  def unprojectRay(self, arg0: Vector2dc, arg1: list[int], arg2: Vector3d, arg3: Vector3d) -> Matrix4d: ...

  @overload
  def unprojectRay(self, arg0: Vector2dc, arg1: list[int], arg2: Vector3d, arg3: Vector3d) -> Matrix4d: ...

  @overload
  def unprojectRay(self, arg0: float, arg1: float, arg2: list[int], arg3: Vector3d, arg4: Vector3d) -> Matrix4d: ...

  @overload
  def unprojectRay(self, arg0: float, arg1: float, arg2: list[int], arg3: Vector3d, arg4: Vector3d) -> Matrix4d: ...

  @overload
  def withLookAtUp(self, arg0: Vector3dc) -> Matrix4d: ...

  @overload
  def withLookAtUp(self, arg0: Vector3dc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def withLookAtUp(self, arg0: Vector3dc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def withLookAtUp(self, arg0: float, arg1: float, arg2: float) -> Matrix4d: ...

  @overload
  def withLookAtUp(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4d) -> Matrix4d: ...

  @overload
  def withLookAtUp(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4d) -> Matrix4d: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  def zero(self) -> Matrix4d: ...

  @staticmethod
  def projViewFromRectangle(arg0: Vector3d, arg1: Vector3d, arg2: Vector3d, arg3: Vector3d, arg4: float, arg5: bool, arg6: Matrix4d, arg7: Matrix4d) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: DoubleBuffer): ...
  @overload
  def __init__(self, arg0: Matrix3dc): ...
  @overload
  def __init__(self, arg0: Matrix4dc): ...
  @overload
  def __init__(self, arg0: Matrix4fc): ...
  @overload
  def __init__(self, arg0: Matrix4x3dc): ...
  @overload
  def __init__(self, arg0: Matrix4x3fc): ...
  @overload
  def __init__(self, arg0: Vector4d, arg1: Vector4d, arg2: Vector4d, arg3: Vector4d): ...
  @overload
  def __init__(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float, arg10: float, arg11: float, arg12: float, arg13: float, arg14: float, arg15: float): ...


class Matrix4dStack(Matrix4d):

  def clear(self) -> Matrix4dStack: ...

  def equals(self, arg0: object) -> bool: ...

  def hashCode(self) -> int: ...

  def popMatrix(self) -> Matrix4dStack: ...

  def pushMatrix(self) -> Matrix4dStack: ...

  def readExternal(self, arg0: ObjectInput) -> None: ...

  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: int): ...


class Matrix4dc:

  CORNER_NXNYNZ: int

  CORNER_NXNYPZ: int

  CORNER_NXPYNZ: int

  CORNER_NXPYPZ: int

  CORNER_PXNYNZ: int

  CORNER_PXNYPZ: int

  CORNER_PXPYNZ: int

  CORNER_PXPYPZ: int

  PLANE_NX: int

  PLANE_NY: int

  PLANE_NZ: int

  PLANE_PX: int

  PLANE_PY: int

  PLANE_PZ: int

  PROPERTY_AFFINE: int

  PROPERTY_IDENTITY: int

  PROPERTY_ORTHONORMAL: int

  PROPERTY_PERSPECTIVE: int

  PROPERTY_TRANSLATION: int

  def add(self, arg0: Matrix4dc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def add4x3(self, arg0: Matrix4dc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def add4x3(self, arg0: Matrix4fc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def arcball(self, arg0: float, arg1: Vector3dc, arg2: float, arg3: float, arg4: Matrix4d) -> Matrix4d: ...

  @overload
  def arcball(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4d) -> Matrix4d: ...

  @overload
  def cofactor3x3(self, arg0: Matrix3d) -> Matrix3d: ...

  @overload
  def cofactor3x3(self, arg0: Matrix4d) -> Matrix4d: ...

  def determinant(self) -> float: ...

  def determinant3x3(self) -> float: ...

  def determinantAffine(self) -> float: ...

  def equals(self, arg0: Matrix4dc, arg1: float) -> bool: ...

  def fma4x3(self, arg0: Matrix4dc, arg1: float, arg2: Matrix4d) -> Matrix4d: ...

  @overload
  def frustum(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4d) -> Matrix4d: ...

  @overload
  def frustum(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool, arg7: Matrix4d) -> Matrix4d: ...

  def frustumCorner(self, arg0: int, arg1: Vector3d) -> Vector3d: ...

  @overload
  def frustumLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4d) -> Matrix4d: ...

  @overload
  def frustumLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool, arg7: Matrix4d) -> Matrix4d: ...

  def frustumPlane(self, arg0: int, arg1: Vector4d) -> Vector4d: ...

  def frustumRayDir(self, arg0: float, arg1: float, arg2: Vector3d) -> Vector3d: ...

  @overload
  def get(self, arg0: list[float]) -> list[float]: ...

  @overload
  def get(self, arg0: list[float]) -> list[float]: ...

  @overload
  def get(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def get(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get(self, arg0: Matrix4d) -> Matrix4d: ...

  @overload
  def get(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def get(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def get(self, arg0: int, arg1: int) -> float: ...

  @overload
  def get(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: int, arg1: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def get(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  def get3x3(self, arg0: Matrix3d) -> Matrix3d: ...

  def get4x3(self, arg0: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def get4x3Transposed(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get4x3Transposed(self, arg0: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def get4x3Transposed(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get4x3Transposed(self, arg0: int, arg1: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def getColumn(self, arg0: int, arg1: Vector3d) -> Vector3d: ...

  @overload
  def getColumn(self, arg0: int, arg1: Vector4d) -> Vector4d: ...

  def getEulerAnglesZYX(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def getFloats(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getFloats(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getNormalizedRotation(self, arg0: Quaterniond) -> Quaterniond: ...

  @overload
  def getNormalizedRotation(self, arg0: Quaternionf) -> Quaternionf: ...

  @overload
  def getRow(self, arg0: int, arg1: Vector3d) -> Vector3d: ...

  @overload
  def getRow(self, arg0: int, arg1: Vector4d) -> Vector4d: ...

  def getRowColumn(self, arg0: int, arg1: int) -> float: ...

  def getScale(self, arg0: Vector3d) -> Vector3d: ...

  def getToAddress(self, arg0: int) -> Matrix4dc: ...

  def getTranslation(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def getTransposed(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getTransposed(self, arg0: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def getTransposed(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getTransposed(self, arg0: int, arg1: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def getUnnormalizedRotation(self, arg0: Quaterniond) -> Quaterniond: ...

  @overload
  def getUnnormalizedRotation(self, arg0: Quaternionf) -> Quaternionf: ...

  def invert(self, arg0: Matrix4d) -> Matrix4d: ...

  def invertAffine(self, arg0: Matrix4d) -> Matrix4d: ...

  def invertFrustum(self, arg0: Matrix4d) -> Matrix4d: ...

  def invertOrtho(self, arg0: Matrix4d) -> Matrix4d: ...

  def invertPerspective(self, arg0: Matrix4d) -> Matrix4d: ...

  @overload
  def invertPerspectiveView(self, arg0: Matrix4dc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def invertPerspectiveView(self, arg0: Matrix4x3dc, arg1: Matrix4d) -> Matrix4d: ...

  def isAffine(self) -> bool: ...

  def isFinite(self) -> bool: ...

  def lerp(self, arg0: Matrix4dc, arg1: float, arg2: Matrix4d) -> Matrix4d: ...

  @overload
  def lookAlong(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Matrix4d) -> Matrix4d: ...

  @overload
  def lookAlong(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4d) -> Matrix4d: ...

  @overload
  def lookAt(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Vector3dc, arg3: Matrix4d) -> Matrix4d: ...

  @overload
  def lookAt(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: Matrix4d) -> Matrix4d: ...

  @overload
  def lookAtLH(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Vector3dc, arg3: Matrix4d) -> Matrix4d: ...

  @overload
  def lookAtLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: Matrix4d) -> Matrix4d: ...

  def lookAtPerspective(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: Matrix4d) -> Matrix4d: ...

  def lookAtPerspectiveLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: Matrix4d) -> Matrix4d: ...

  def m00(self) -> float: ...

  def m01(self) -> float: ...

  def m02(self) -> float: ...

  def m03(self) -> float: ...

  def m10(self) -> float: ...

  def m11(self) -> float: ...

  def m12(self) -> float: ...

  def m13(self) -> float: ...

  def m20(self) -> float: ...

  def m21(self) -> float: ...

  def m22(self) -> float: ...

  def m23(self) -> float: ...

  def m30(self) -> float: ...

  def m31(self) -> float: ...

  def m32(self) -> float: ...

  def m33(self) -> float: ...

  @overload
  def mul(self, arg0: Matrix3x2dc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def mul(self, arg0: Matrix3x2fc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def mul(self, arg0: Matrix4dc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def mul(self, arg0: Matrix4fc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def mul(self, arg0: Matrix4x3dc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def mul(self, arg0: Matrix4x3fc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def mul(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float, arg10: float, arg11: float, arg12: float, arg13: float, arg14: float, arg15: float, arg16: Matrix4d) -> Matrix4d: ...

  def mul0(self, arg0: Matrix4dc, arg1: Matrix4d) -> Matrix4d: ...

  def mul3x3(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: Matrix4d) -> Matrix4d: ...

  def mul4x3ComponentWise(self, arg0: Matrix4dc, arg1: Matrix4d) -> Matrix4d: ...

  def mulAffine(self, arg0: Matrix4dc, arg1: Matrix4d) -> Matrix4d: ...

  def mulAffineR(self, arg0: Matrix4dc, arg1: Matrix4d) -> Matrix4d: ...

  def mulComponentWise(self, arg0: Matrix4dc, arg1: Matrix4d) -> Matrix4d: ...

  def mulLocal(self, arg0: Matrix4dc, arg1: Matrix4d) -> Matrix4d: ...

  def mulLocalAffine(self, arg0: Matrix4dc, arg1: Matrix4d) -> Matrix4d: ...

  def mulOrthoAffine(self, arg0: Matrix4dc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def mulPerspectiveAffine(self, arg0: Matrix4dc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def mulPerspectiveAffine(self, arg0: Matrix4x3dc, arg1: Matrix4d) -> Matrix4d: ...

  def mulTranslationAffine(self, arg0: Matrix4dc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def normal(self, arg0: Matrix3d) -> Matrix3d: ...

  @overload
  def normal(self, arg0: Matrix4d) -> Matrix4d: ...

  @overload
  def normalize3x3(self, arg0: Matrix3d) -> Matrix3d: ...

  @overload
  def normalize3x3(self, arg0: Matrix4d) -> Matrix4d: ...

  def normalizedPositiveX(self, arg0: Vector3d) -> Vector3d: ...

  def normalizedPositiveY(self, arg0: Vector3d) -> Vector3d: ...

  def normalizedPositiveZ(self, arg0: Vector3d) -> Vector3d: ...

  def obliqueZ(self, arg0: float, arg1: float, arg2: Matrix4d) -> Matrix4d: ...

  def origin(self, arg0: Vector3d) -> Vector3d: ...

  def originAffine(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def ortho(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4d) -> Matrix4d: ...

  @overload
  def ortho(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool, arg7: Matrix4d) -> Matrix4d: ...

  def ortho2D(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4d) -> Matrix4d: ...

  def ortho2DLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4d) -> Matrix4d: ...

  def orthoCrop(self, arg0: Matrix4dc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def orthoLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4d) -> Matrix4d: ...

  @overload
  def orthoLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool, arg7: Matrix4d) -> Matrix4d: ...

  @overload
  def orthoSymmetric(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4d) -> Matrix4d: ...

  @overload
  def orthoSymmetric(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool, arg5: Matrix4d) -> Matrix4d: ...

  @overload
  def orthoSymmetricLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4d) -> Matrix4d: ...

  @overload
  def orthoSymmetricLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool, arg5: Matrix4d) -> Matrix4d: ...

  @overload
  def perspective(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4d) -> Matrix4d: ...

  @overload
  def perspective(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool, arg5: Matrix4d) -> Matrix4d: ...

  def perspectiveFar(self) -> float: ...

  def perspectiveFov(self) -> float: ...

  def perspectiveFrustumSlice(self, arg0: float, arg1: float, arg2: Matrix4d) -> Matrix4d: ...

  def perspectiveInvOrigin(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def perspectiveLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4d) -> Matrix4d: ...

  @overload
  def perspectiveLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool, arg5: Matrix4d) -> Matrix4d: ...

  def perspectiveNear(self) -> float: ...

  @overload
  def perspectiveOffCenter(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix4d: ...

  @overload
  def perspectiveOffCenter(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool) -> Matrix4d: ...

  @overload
  def perspectiveOffCenter(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4d) -> Matrix4d: ...

  @overload
  def perspectiveOffCenter(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool, arg7: Matrix4d) -> Matrix4d: ...

  def perspectiveOrigin(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def perspectiveRect(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4d: ...

  @overload
  def perspectiveRect(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool) -> Matrix4d: ...

  @overload
  def perspectiveRect(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4d) -> Matrix4d: ...

  @overload
  def perspectiveRect(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool, arg5: Matrix4d) -> Matrix4d: ...

  def pick(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: list[int], arg5: Matrix4d) -> Matrix4d: ...

  def positiveX(self, arg0: Vector3d) -> Vector3d: ...

  def positiveY(self, arg0: Vector3d) -> Vector3d: ...

  def positiveZ(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def project(self, arg0: Vector3dc, arg1: list[int], arg2: Vector3d) -> Vector3d: ...

  @overload
  def project(self, arg0: Vector3dc, arg1: list[int], arg2: Vector4d) -> Vector4d: ...

  @overload
  def project(self, arg0: float, arg1: float, arg2: float, arg3: list[int], arg4: Vector3d) -> Vector3d: ...

  @overload
  def project(self, arg0: float, arg1: float, arg2: float, arg3: list[int], arg4: Vector4d) -> Vector4d: ...

  def projectedGridRange(self, arg0: Matrix4dc, arg1: float, arg2: float, arg3: Matrix4d) -> Matrix4d: ...

  def properties(self) -> int: ...

  @overload
  def reflect(self, arg0: Quaterniondc, arg1: Vector3dc, arg2: Matrix4d) -> Matrix4d: ...

  @overload
  def reflect(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Matrix4d) -> Matrix4d: ...

  @overload
  def reflect(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4d) -> Matrix4d: ...

  @overload
  def reflect(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4d) -> Matrix4d: ...

  @overload
  def rotate(self, arg0: AxisAngle4d, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def rotate(self, arg0: AxisAngle4f, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def rotate(self, arg0: Quaterniondc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def rotate(self, arg0: Quaternionfc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def rotate(self, arg0: float, arg1: Vector3dc, arg2: Matrix4d) -> Matrix4d: ...

  @overload
  def rotate(self, arg0: float, arg1: Vector3fc, arg2: Matrix4d) -> Matrix4d: ...

  @overload
  def rotate(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4d) -> Matrix4d: ...

  @overload
  def rotateAffine(self, arg0: Quaterniondc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def rotateAffine(self, arg0: Quaternionfc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def rotateAffine(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4d) -> Matrix4d: ...

  def rotateAffineXYZ(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4d) -> Matrix4d: ...

  def rotateAffineYXZ(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4d) -> Matrix4d: ...

  def rotateAffineZYX(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4d) -> Matrix4d: ...

  def rotateAround(self, arg0: Quaterniondc, arg1: float, arg2: float, arg3: float, arg4: Matrix4d) -> Matrix4d: ...

  def rotateAroundAffine(self, arg0: Quaterniondc, arg1: float, arg2: float, arg3: float, arg4: Matrix4d) -> Matrix4d: ...

  def rotateAroundLocal(self, arg0: Quaterniondc, arg1: float, arg2: float, arg3: float, arg4: Matrix4d) -> Matrix4d: ...

  @overload
  def rotateLocal(self, arg0: Quaterniondc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def rotateLocal(self, arg0: Quaternionfc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def rotateLocal(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4d) -> Matrix4d: ...

  def rotateLocalX(self, arg0: float, arg1: Matrix4d) -> Matrix4d: ...

  def rotateLocalY(self, arg0: float, arg1: Matrix4d) -> Matrix4d: ...

  def rotateLocalZ(self, arg0: float, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def rotateTowards(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Matrix4d) -> Matrix4d: ...

  @overload
  def rotateTowards(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4d) -> Matrix4d: ...

  def rotateTowardsXY(self, arg0: float, arg1: float, arg2: Matrix4d) -> Matrix4d: ...

  @overload
  def rotateTranslation(self, arg0: Quaterniondc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def rotateTranslation(self, arg0: Quaternionfc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def rotateTranslation(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4d) -> Matrix4d: ...

  def rotateX(self, arg0: float, arg1: Matrix4d) -> Matrix4d: ...

  def rotateXYZ(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4d) -> Matrix4d: ...

  def rotateY(self, arg0: float, arg1: Matrix4d) -> Matrix4d: ...

  def rotateYXZ(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4d) -> Matrix4d: ...

  def rotateZ(self, arg0: float, arg1: Matrix4d) -> Matrix4d: ...

  def rotateZYX(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4d) -> Matrix4d: ...

  @overload
  def scale(self, arg0: float, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def scale(self, arg0: Vector3dc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def scale(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4d) -> Matrix4d: ...

  @overload
  def scaleAround(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4d) -> Matrix4d: ...

  @overload
  def scaleAround(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4d) -> Matrix4d: ...

  @overload
  def scaleAroundLocal(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4d) -> Matrix4d: ...

  @overload
  def scaleAroundLocal(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4d) -> Matrix4d: ...

  @overload
  def scaleLocal(self, arg0: float, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def scaleLocal(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4d) -> Matrix4d: ...

  def scaleXY(self, arg0: float, arg1: float, arg2: Matrix4d) -> Matrix4d: ...

  @overload
  def shadow(self, arg0: Vector4dc, arg1: Matrix4dc, arg2: Matrix4d) -> Matrix4d: ...

  @overload
  def shadow(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4dc, arg5: Matrix4d) -> Matrix4d: ...

  @overload
  def shadow(self, arg0: Vector4dc, arg1: float, arg2: float, arg3: float, arg4: float, arg5: Matrix4d) -> Matrix4d: ...

  @overload
  def shadow(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: Matrix4d) -> Matrix4d: ...

  def sub(self, arg0: Matrix4dc, arg1: Matrix4d) -> Matrix4d: ...

  def sub4x3(self, arg0: Matrix4dc, arg1: Matrix4d) -> Matrix4d: ...

  def testAab(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> bool: ...

  def testPoint(self, arg0: float, arg1: float, arg2: float) -> bool: ...

  def testSphere(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool: ...

  @overload
  def transform(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transform(self, arg0: Vector4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def transform(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Vector4d) -> Vector4d: ...

  @overload
  def transformAab(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Vector3d, arg3: Vector3d) -> Matrix4d: ...

  @overload
  def transformAab(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Vector3d, arg7: Vector3d) -> Matrix4d: ...

  @overload
  def transformAffine(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transformAffine(self, arg0: Vector4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def transformAffine(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Vector4d) -> Vector4d: ...

  @overload
  def transformDirection(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformDirection(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformDirection(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def transformDirection(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def transformDirection(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def transformDirection(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  @overload
  def transformPosition(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformPosition(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def transformPosition(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def transformProject(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformProject(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transformProject(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def transformProject(self, arg0: Vector4dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def transformProject(self, arg0: Vector4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def transformProject(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def transformProject(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Vector3d) -> Vector3d: ...

  @overload
  def transformProject(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Vector4d) -> Vector4d: ...

  @overload
  def transformTranspose(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transformTranspose(self, arg0: Vector4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def transformTranspose(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Vector4d) -> Vector4d: ...

  @overload
  def translate(self, arg0: Vector3dc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def translate(self, arg0: Vector3fc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def translate(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4d) -> Matrix4d: ...

  @overload
  def translateLocal(self, arg0: Vector3dc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def translateLocal(self, arg0: Vector3fc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def translateLocal(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4d) -> Matrix4d: ...

  def transpose(self, arg0: Matrix4d) -> Matrix4d: ...

  @overload
  def transpose3x3(self, arg0: Matrix3d) -> Matrix3d: ...

  @overload
  def transpose3x3(self, arg0: Matrix4d) -> Matrix4d: ...

  @overload
  def unproject(self, arg0: Vector3dc, arg1: list[int], arg2: Vector3d) -> Vector3d: ...

  @overload
  def unproject(self, arg0: Vector3dc, arg1: list[int], arg2: Vector4d) -> Vector4d: ...

  @overload
  def unproject(self, arg0: float, arg1: float, arg2: float, arg3: list[int], arg4: Vector3d) -> Vector3d: ...

  @overload
  def unproject(self, arg0: float, arg1: float, arg2: float, arg3: list[int], arg4: Vector4d) -> Vector4d: ...

  @overload
  def unprojectInv(self, arg0: Vector3dc, arg1: list[int], arg2: Vector3d) -> Vector3d: ...

  @overload
  def unprojectInv(self, arg0: Vector3dc, arg1: list[int], arg2: Vector4d) -> Vector4d: ...

  @overload
  def unprojectInv(self, arg0: float, arg1: float, arg2: float, arg3: list[int], arg4: Vector3d) -> Vector3d: ...

  @overload
  def unprojectInv(self, arg0: float, arg1: float, arg2: float, arg3: list[int], arg4: Vector4d) -> Vector4d: ...

  @overload
  def unprojectInvRay(self, arg0: Vector2dc, arg1: list[int], arg2: Vector3d, arg3: Vector3d) -> Matrix4d: ...

  @overload
  def unprojectInvRay(self, arg0: float, arg1: float, arg2: list[int], arg3: Vector3d, arg4: Vector3d) -> Matrix4d: ...

  @overload
  def unprojectRay(self, arg0: Vector2dc, arg1: list[int], arg2: Vector3d, arg3: Vector3d) -> Matrix4d: ...

  @overload
  def unprojectRay(self, arg0: float, arg1: float, arg2: list[int], arg3: Vector3d, arg4: Vector3d) -> Matrix4d: ...

  @overload
  def withLookAtUp(self, arg0: Vector3dc, arg1: Matrix4d) -> Matrix4d: ...

  @overload
  def withLookAtUp(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4d) -> Matrix4d: ...


class Matrix4f:

  CORNER_NXNYNZ: int

  CORNER_NXNYPZ: int

  CORNER_NXPYNZ: int

  CORNER_NXPYPZ: int

  CORNER_PXNYNZ: int

  CORNER_PXNYPZ: int

  CORNER_PXPYNZ: int

  CORNER_PXPYPZ: int

  PLANE_NX: int

  PLANE_NY: int

  PLANE_NZ: int

  PLANE_PX: int

  PLANE_PY: int

  PLANE_PZ: int

  PROPERTY_AFFINE: int

  PROPERTY_IDENTITY: int

  PROPERTY_ORTHONORMAL: int

  PROPERTY_PERSPECTIVE: int

  PROPERTY_TRANSLATION: int

  @overload
  def add(self, arg0: Matrix4fc) -> Matrix4f: ...

  @overload
  def add(self, arg0: Matrix4fc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def add(self, arg0: Matrix4fc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def add4x3(self, arg0: Matrix4fc) -> Matrix4f: ...

  @overload
  def add4x3(self, arg0: Matrix4fc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def add4x3(self, arg0: Matrix4fc, arg1: Matrix4f) -> Matrix4f: ...

  def affineSpan(self, arg0: Vector3f, arg1: Vector3f, arg2: Vector3f, arg3: Vector3f) -> Matrix4f: ...

  @overload
  def arcball(self, arg0: float, arg1: Vector3fc, arg2: float, arg3: float) -> Matrix4f: ...

  @overload
  def arcball(self, arg0: float, arg1: Vector3fc, arg2: float, arg3: float, arg4: Matrix4f) -> Matrix4f: ...

  @overload
  def arcball(self, arg0: float, arg1: Vector3fc, arg2: float, arg3: float, arg4: Matrix4f) -> Matrix4f: ...

  @overload
  def arcball(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix4f: ...

  @overload
  def arcball(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4f) -> Matrix4f: ...

  @overload
  def arcball(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4f) -> Matrix4f: ...

  def assume(self, arg0: int) -> Matrix4f: ...

  def billboardCylindrical(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Vector3fc) -> Matrix4f: ...

  @overload
  def billboardSpherical(self, arg0: Vector3fc, arg1: Vector3fc) -> Matrix4f: ...

  @overload
  def billboardSpherical(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Vector3fc) -> Matrix4f: ...

  @overload
  def cofactor3x3(self) -> Matrix4f: ...

  @overload
  def cofactor3x3(self, arg0: Matrix3f) -> Matrix3f: ...

  @overload
  def cofactor3x3(self, arg0: Matrix3f) -> Matrix3f: ...

  @overload
  def cofactor3x3(self, arg0: Matrix4f) -> Matrix4f: ...

  @overload
  def cofactor3x3(self, arg0: Matrix4f) -> Matrix4f: ...

  @overload
  def determinant(self) -> float: ...

  @overload
  def determinant(self) -> float: ...

  @overload
  def determinant3x3(self) -> float: ...

  @overload
  def determinant3x3(self) -> float: ...

  @overload
  def determinantAffine(self) -> float: ...

  @overload
  def determinantAffine(self) -> float: ...

  def determineProperties(self) -> Matrix4f: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def equals(self, arg0: Matrix4fc, arg1: float) -> bool: ...

  @overload
  def equals(self, arg0: Matrix4fc, arg1: float) -> bool: ...

  @overload
  def fma4x3(self, arg0: Matrix4fc, arg1: float) -> Matrix4f: ...

  @overload
  def fma4x3(self, arg0: Matrix4fc, arg1: float, arg2: Matrix4f) -> Matrix4f: ...

  @overload
  def fma4x3(self, arg0: Matrix4fc, arg1: float, arg2: Matrix4f) -> Matrix4f: ...

  @overload
  def frustum(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix4f: ...

  @overload
  def frustum(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool) -> Matrix4f: ...

  @overload
  def frustum(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4f) -> Matrix4f: ...

  @overload
  def frustum(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4f) -> Matrix4f: ...

  @overload
  def frustum(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool, arg7: Matrix4f) -> Matrix4f: ...

  @overload
  def frustum(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool, arg7: Matrix4f) -> Matrix4f: ...

  @overload
  def frustumAabb(self, arg0: Vector3f, arg1: Vector3f) -> Matrix4f: ...

  @overload
  def frustumAabb(self, arg0: Vector3f, arg1: Vector3f) -> Matrix4f: ...

  @overload
  def frustumCorner(self, arg0: int, arg1: Vector3f) -> Vector3f: ...

  @overload
  def frustumCorner(self, arg0: int, arg1: Vector3f) -> Vector3f: ...

  @overload
  def frustumLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix4f: ...

  @overload
  def frustumLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool) -> Matrix4f: ...

  @overload
  def frustumLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4f) -> Matrix4f: ...

  @overload
  def frustumLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4f) -> Matrix4f: ...

  @overload
  def frustumLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool, arg7: Matrix4f) -> Matrix4f: ...

  @overload
  def frustumLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool, arg7: Matrix4f) -> Matrix4f: ...

  @overload
  def frustumPlane(self, arg0: int, arg1: Vector4f) -> Vector4f: ...

  @overload
  def frustumPlane(self, arg0: int, arg1: Vector4f) -> Vector4f: ...

  @overload
  def frustumRayDir(self, arg0: float, arg1: float, arg2: Vector3f) -> Vector3f: ...

  @overload
  def frustumRayDir(self, arg0: float, arg1: float, arg2: Vector3f) -> Vector3f: ...

  @overload
  def get(self, arg0: list[float]) -> list[float]: ...

  @overload
  def get(self, arg0: list[float]) -> list[float]: ...

  @overload
  def get(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get(self, arg0: Matrix4d) -> Matrix4d: ...

  @overload
  def get(self, arg0: Matrix4d) -> Matrix4d: ...

  @overload
  def get(self, arg0: Matrix4f) -> Matrix4f: ...

  @overload
  def get(self, arg0: Matrix4f) -> Matrix4f: ...

  @overload
  def get(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def get(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def get(self, arg0: int, arg1: int) -> float: ...

  @overload
  def get(self, arg0: int, arg1: int) -> float: ...

  @overload
  def get(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get3x3(self, arg0: Matrix3d) -> Matrix3d: ...

  @overload
  def get3x3(self, arg0: Matrix3d) -> Matrix3d: ...

  @overload
  def get3x3(self, arg0: Matrix3f) -> Matrix3f: ...

  @overload
  def get3x3(self, arg0: Matrix3f) -> Matrix3f: ...

  @overload
  def get3x4(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get3x4(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get3x4(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get3x4(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get3x4(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get3x4(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get3x4(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get3x4(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get4x3(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get4x3(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get4x3(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get4x3(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get4x3(self, arg0: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def get4x3(self, arg0: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def get4x3(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get4x3(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get4x3(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get4x3(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get4x3Transposed(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get4x3Transposed(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get4x3Transposed(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get4x3Transposed(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get4x3Transposed(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get4x3Transposed(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get4x3Transposed(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get4x3Transposed(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def getColumn(self, arg0: int, arg1: Vector3f) -> Vector3f: ...

  @overload
  def getColumn(self, arg0: int, arg1: Vector3f) -> Vector3f: ...

  @overload
  def getColumn(self, arg0: int, arg1: Vector4f) -> Vector4f: ...

  @overload
  def getColumn(self, arg0: int, arg1: Vector4f) -> Vector4f: ...

  @overload
  def getEulerAnglesZYX(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def getEulerAnglesZYX(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def getNormalizedRotation(self, arg0: Quaterniond) -> Quaterniond: ...

  @overload
  def getNormalizedRotation(self, arg0: Quaterniond) -> Quaterniond: ...

  @overload
  def getNormalizedRotation(self, arg0: Quaternionf) -> Quaternionf: ...

  @overload
  def getNormalizedRotation(self, arg0: Quaternionf) -> Quaternionf: ...

  @overload
  def getRotation(self, arg0: AxisAngle4d) -> AxisAngle4d: ...

  @overload
  def getRotation(self, arg0: AxisAngle4d) -> AxisAngle4d: ...

  @overload
  def getRotation(self, arg0: AxisAngle4f) -> AxisAngle4f: ...

  @overload
  def getRotation(self, arg0: AxisAngle4f) -> AxisAngle4f: ...

  @overload
  def getRow(self, arg0: int, arg1: Vector3f) -> Vector3f: ...

  @overload
  def getRow(self, arg0: int, arg1: Vector3f) -> Vector3f: ...

  @overload
  def getRow(self, arg0: int, arg1: Vector4f) -> Vector4f: ...

  @overload
  def getRow(self, arg0: int, arg1: Vector4f) -> Vector4f: ...

  @overload
  def getRowColumn(self, arg0: int, arg1: int) -> float: ...

  @overload
  def getRowColumn(self, arg0: int, arg1: int) -> float: ...

  @overload
  def getScale(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def getScale(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def getToAddress(self, arg0: int) -> Matrix4fc: ...

  @overload
  def getToAddress(self, arg0: int) -> Matrix4fc: ...

  @overload
  def getTranslation(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def getTranslation(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def getTransposed(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getTransposed(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getTransposed(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def getTransposed(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def getTransposed(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getTransposed(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getTransposed(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def getTransposed(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def getUnnormalizedRotation(self, arg0: Quaterniond) -> Quaterniond: ...

  @overload
  def getUnnormalizedRotation(self, arg0: Quaterniond) -> Quaterniond: ...

  @overload
  def getUnnormalizedRotation(self, arg0: Quaternionf) -> Quaternionf: ...

  @overload
  def getUnnormalizedRotation(self, arg0: Quaternionf) -> Quaternionf: ...

  def hashCode(self) -> int: ...

  def identity(self) -> Matrix4f: ...

  @overload
  def invert(self) -> Matrix4f: ...

  @overload
  def invert(self, arg0: Matrix4f) -> Matrix4f: ...

  @overload
  def invert(self, arg0: Matrix4f) -> Matrix4f: ...

  @overload
  def invertAffine(self) -> Matrix4f: ...

  @overload
  def invertAffine(self, arg0: Matrix4f) -> Matrix4f: ...

  @overload
  def invertAffine(self, arg0: Matrix4f) -> Matrix4f: ...

  @overload
  def invertFrustum(self) -> Matrix4f: ...

  @overload
  def invertFrustum(self, arg0: Matrix4f) -> Matrix4f: ...

  @overload
  def invertFrustum(self, arg0: Matrix4f) -> Matrix4f: ...

  @overload
  def invertOrtho(self) -> Matrix4f: ...

  @overload
  def invertOrtho(self, arg0: Matrix4f) -> Matrix4f: ...

  @overload
  def invertOrtho(self, arg0: Matrix4f) -> Matrix4f: ...

  @overload
  def invertPerspective(self) -> Matrix4f: ...

  @overload
  def invertPerspective(self, arg0: Matrix4f) -> Matrix4f: ...

  @overload
  def invertPerspective(self, arg0: Matrix4f) -> Matrix4f: ...

  @overload
  def invertPerspectiveView(self, arg0: Matrix4fc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def invertPerspectiveView(self, arg0: Matrix4fc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def invertPerspectiveView(self, arg0: Matrix4x3fc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def invertPerspectiveView(self, arg0: Matrix4x3fc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def isAffine(self) -> bool: ...

  @overload
  def isAffine(self) -> bool: ...

  @overload
  def isFinite(self) -> bool: ...

  @overload
  def isFinite(self) -> bool: ...

  @overload
  def lerp(self, arg0: Matrix4fc, arg1: float) -> Matrix4f: ...

  @overload
  def lerp(self, arg0: Matrix4fc, arg1: float, arg2: Matrix4f) -> Matrix4f: ...

  @overload
  def lerp(self, arg0: Matrix4fc, arg1: float, arg2: Matrix4f) -> Matrix4f: ...

  @overload
  def lookAlong(self, arg0: Vector3fc, arg1: Vector3fc) -> Matrix4f: ...

  @overload
  def lookAlong(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Matrix4f) -> Matrix4f: ...

  @overload
  def lookAlong(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Matrix4f) -> Matrix4f: ...

  @overload
  def lookAlong(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix4f: ...

  @overload
  def lookAlong(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4f) -> Matrix4f: ...

  @overload
  def lookAlong(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4f) -> Matrix4f: ...

  @overload
  def lookAt(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Vector3fc) -> Matrix4f: ...

  @overload
  def lookAt(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Vector3fc, arg3: Matrix4f) -> Matrix4f: ...

  @overload
  def lookAt(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Vector3fc, arg3: Matrix4f) -> Matrix4f: ...

  @overload
  def lookAt(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float) -> Matrix4f: ...

  @overload
  def lookAt(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: Matrix4f) -> Matrix4f: ...

  @overload
  def lookAt(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: Matrix4f) -> Matrix4f: ...

  @overload
  def lookAtLH(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Vector3fc) -> Matrix4f: ...

  @overload
  def lookAtLH(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Vector3fc, arg3: Matrix4f) -> Matrix4f: ...

  @overload
  def lookAtLH(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Vector3fc, arg3: Matrix4f) -> Matrix4f: ...

  @overload
  def lookAtLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float) -> Matrix4f: ...

  @overload
  def lookAtLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: Matrix4f) -> Matrix4f: ...

  @overload
  def lookAtLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: Matrix4f) -> Matrix4f: ...

  @overload
  def lookAtPerspective(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: Matrix4f) -> Matrix4f: ...

  @overload
  def lookAtPerspective(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: Matrix4f) -> Matrix4f: ...

  @overload
  def lookAtPerspectiveLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: Matrix4f) -> Matrix4f: ...

  @overload
  def lookAtPerspectiveLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: Matrix4f) -> Matrix4f: ...

  @overload
  def m00(self) -> float: ...

  @overload
  def m00(self) -> float: ...

  @overload
  def m00(self, arg0: float) -> Matrix4f: ...

  @overload
  def m01(self) -> float: ...

  @overload
  def m01(self) -> float: ...

  @overload
  def m01(self, arg0: float) -> Matrix4f: ...

  @overload
  def m02(self) -> float: ...

  @overload
  def m02(self) -> float: ...

  @overload
  def m02(self, arg0: float) -> Matrix4f: ...

  @overload
  def m03(self) -> float: ...

  @overload
  def m03(self) -> float: ...

  @overload
  def m03(self, arg0: float) -> Matrix4f: ...

  @overload
  def m10(self) -> float: ...

  @overload
  def m10(self) -> float: ...

  @overload
  def m10(self, arg0: float) -> Matrix4f: ...

  @overload
  def m11(self) -> float: ...

  @overload
  def m11(self) -> float: ...

  @overload
  def m11(self, arg0: float) -> Matrix4f: ...

  @overload
  def m12(self) -> float: ...

  @overload
  def m12(self) -> float: ...

  @overload
  def m12(self, arg0: float) -> Matrix4f: ...

  @overload
  def m13(self) -> float: ...

  @overload
  def m13(self) -> float: ...

  @overload
  def m13(self, arg0: float) -> Matrix4f: ...

  @overload
  def m20(self) -> float: ...

  @overload
  def m20(self) -> float: ...

  @overload
  def m20(self, arg0: float) -> Matrix4f: ...

  @overload
  def m21(self) -> float: ...

  @overload
  def m21(self) -> float: ...

  @overload
  def m21(self, arg0: float) -> Matrix4f: ...

  @overload
  def m22(self) -> float: ...

  @overload
  def m22(self) -> float: ...

  @overload
  def m22(self, arg0: float) -> Matrix4f: ...

  @overload
  def m23(self) -> float: ...

  @overload
  def m23(self) -> float: ...

  @overload
  def m23(self, arg0: float) -> Matrix4f: ...

  @overload
  def m30(self) -> float: ...

  @overload
  def m30(self) -> float: ...

  @overload
  def m30(self, arg0: float) -> Matrix4f: ...

  @overload
  def m31(self) -> float: ...

  @overload
  def m31(self) -> float: ...

  @overload
  def m31(self, arg0: float) -> Matrix4f: ...

  @overload
  def m32(self) -> float: ...

  @overload
  def m32(self) -> float: ...

  @overload
  def m32(self, arg0: float) -> Matrix4f: ...

  @overload
  def m33(self) -> float: ...

  @overload
  def m33(self) -> float: ...

  @overload
  def m33(self, arg0: float) -> Matrix4f: ...

  @overload
  def mul(self, arg0: Matrix3x2fc) -> Matrix4f: ...

  @overload
  def mul(self, arg0: Matrix4fc) -> Matrix4f: ...

  @overload
  def mul(self, arg0: Matrix4x3fc) -> Matrix4f: ...

  @overload
  def mul(self, arg0: Matrix3x2fc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def mul(self, arg0: Matrix3x2fc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def mul(self, arg0: Matrix4fc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def mul(self, arg0: Matrix4fc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def mul(self, arg0: Matrix4x3fc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def mul(self, arg0: Matrix4x3fc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def mul(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float, arg10: float, arg11: float, arg12: float, arg13: float, arg14: float, arg15: float) -> Matrix4f: ...

  @overload
  def mul(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float, arg10: float, arg11: float, arg12: float, arg13: float, arg14: float, arg15: float, arg16: Matrix4f) -> Matrix4f: ...

  @overload
  def mul(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float, arg10: float, arg11: float, arg12: float, arg13: float, arg14: float, arg15: float, arg16: Matrix4f) -> Matrix4f: ...

  @overload
  def mul0(self, arg0: Matrix4fc) -> Matrix4f: ...

  @overload
  def mul0(self, arg0: Matrix4fc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def mul0(self, arg0: Matrix4fc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def mul3x3(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float) -> Matrix4f: ...

  @overload
  def mul3x3(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: Matrix4f) -> Matrix4f: ...

  @overload
  def mul3x3(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: Matrix4f) -> Matrix4f: ...

  @overload
  def mul4x3ComponentWise(self, arg0: Matrix4fc) -> Matrix4f: ...

  @overload
  def mul4x3ComponentWise(self, arg0: Matrix4fc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def mul4x3ComponentWise(self, arg0: Matrix4fc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def mulAffine(self, arg0: Matrix4fc) -> Matrix4f: ...

  @overload
  def mulAffine(self, arg0: Matrix4fc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def mulAffine(self, arg0: Matrix4fc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def mulAffineR(self, arg0: Matrix4fc) -> Matrix4f: ...

  @overload
  def mulAffineR(self, arg0: Matrix4fc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def mulAffineR(self, arg0: Matrix4fc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def mulComponentWise(self, arg0: Matrix4fc) -> Matrix4f: ...

  @overload
  def mulComponentWise(self, arg0: Matrix4fc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def mulComponentWise(self, arg0: Matrix4fc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def mulLocal(self, arg0: Matrix4fc) -> Matrix4f: ...

  @overload
  def mulLocal(self, arg0: Matrix4fc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def mulLocal(self, arg0: Matrix4fc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def mulLocalAffine(self, arg0: Matrix4fc) -> Matrix4f: ...

  @overload
  def mulLocalAffine(self, arg0: Matrix4fc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def mulLocalAffine(self, arg0: Matrix4fc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def mulOrthoAffine(self, arg0: Matrix4fc) -> Matrix4f: ...

  @overload
  def mulOrthoAffine(self, arg0: Matrix4fc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def mulOrthoAffine(self, arg0: Matrix4fc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def mulPerspectiveAffine(self, arg0: Matrix4fc) -> Matrix4f: ...

  @overload
  def mulPerspectiveAffine(self, arg0: Matrix4x3fc) -> Matrix4f: ...

  @overload
  def mulPerspectiveAffine(self, arg0: Matrix4fc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def mulPerspectiveAffine(self, arg0: Matrix4fc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def mulPerspectiveAffine(self, arg0: Matrix4x3fc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def mulPerspectiveAffine(self, arg0: Matrix4x3fc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def mulTranslationAffine(self, arg0: Matrix4fc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def mulTranslationAffine(self, arg0: Matrix4fc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def normal(self) -> Matrix4f: ...

  @overload
  def normal(self, arg0: Matrix3f) -> Matrix3f: ...

  @overload
  def normal(self, arg0: Matrix3f) -> Matrix3f: ...

  @overload
  def normal(self, arg0: Matrix4f) -> Matrix4f: ...

  @overload
  def normal(self, arg0: Matrix4f) -> Matrix4f: ...

  @overload
  def normalize3x3(self) -> Matrix4f: ...

  @overload
  def normalize3x3(self, arg0: Matrix3f) -> Matrix3f: ...

  @overload
  def normalize3x3(self, arg0: Matrix3f) -> Matrix3f: ...

  @overload
  def normalize3x3(self, arg0: Matrix4f) -> Matrix4f: ...

  @overload
  def normalize3x3(self, arg0: Matrix4f) -> Matrix4f: ...

  @overload
  def normalizedPositiveX(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def normalizedPositiveX(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def normalizedPositiveY(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def normalizedPositiveY(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def normalizedPositiveZ(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def normalizedPositiveZ(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def obliqueZ(self, arg0: float, arg1: float) -> Matrix4f: ...

  @overload
  def obliqueZ(self, arg0: float, arg1: float, arg2: Matrix4f) -> Matrix4f: ...

  @overload
  def obliqueZ(self, arg0: float, arg1: float, arg2: Matrix4f) -> Matrix4f: ...

  @overload
  def origin(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def origin(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def originAffine(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def originAffine(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def ortho(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix4f: ...

  @overload
  def ortho(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool) -> Matrix4f: ...

  @overload
  def ortho(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4f) -> Matrix4f: ...

  @overload
  def ortho(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4f) -> Matrix4f: ...

  @overload
  def ortho(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool, arg7: Matrix4f) -> Matrix4f: ...

  @overload
  def ortho(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool, arg7: Matrix4f) -> Matrix4f: ...

  @overload
  def ortho2D(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4f: ...

  @overload
  def ortho2D(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4f) -> Matrix4f: ...

  @overload
  def ortho2D(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4f) -> Matrix4f: ...

  @overload
  def ortho2DLH(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4f: ...

  @overload
  def ortho2DLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4f) -> Matrix4f: ...

  @overload
  def ortho2DLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4f) -> Matrix4f: ...

  @overload
  def orthoCrop(self, arg0: Matrix4fc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def orthoCrop(self, arg0: Matrix4fc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def orthoLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix4f: ...

  @overload
  def orthoLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool) -> Matrix4f: ...

  @overload
  def orthoLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4f) -> Matrix4f: ...

  @overload
  def orthoLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4f) -> Matrix4f: ...

  @overload
  def orthoLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool, arg7: Matrix4f) -> Matrix4f: ...

  @overload
  def orthoLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool, arg7: Matrix4f) -> Matrix4f: ...

  @overload
  def orthoSymmetric(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4f: ...

  @overload
  def orthoSymmetric(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool) -> Matrix4f: ...

  @overload
  def orthoSymmetric(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4f) -> Matrix4f: ...

  @overload
  def orthoSymmetric(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4f) -> Matrix4f: ...

  @overload
  def orthoSymmetric(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool, arg5: Matrix4f) -> Matrix4f: ...

  @overload
  def orthoSymmetric(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool, arg5: Matrix4f) -> Matrix4f: ...

  @overload
  def orthoSymmetricLH(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4f: ...

  @overload
  def orthoSymmetricLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool) -> Matrix4f: ...

  @overload
  def orthoSymmetricLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4f) -> Matrix4f: ...

  @overload
  def orthoSymmetricLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4f) -> Matrix4f: ...

  @overload
  def orthoSymmetricLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool, arg5: Matrix4f) -> Matrix4f: ...

  @overload
  def orthoSymmetricLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool, arg5: Matrix4f) -> Matrix4f: ...

  @overload
  def perspective(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4f: ...

  @overload
  def perspective(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool) -> Matrix4f: ...

  @overload
  def perspective(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4f) -> Matrix4f: ...

  @overload
  def perspective(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4f) -> Matrix4f: ...

  @overload
  def perspective(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool, arg5: Matrix4f) -> Matrix4f: ...

  @overload
  def perspective(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool, arg5: Matrix4f) -> Matrix4f: ...

  @overload
  def perspectiveFar(self) -> float: ...

  @overload
  def perspectiveFar(self) -> float: ...

  @overload
  def perspectiveFov(self) -> float: ...

  @overload
  def perspectiveFov(self) -> float: ...

  @overload
  def perspectiveFrustumSlice(self, arg0: float, arg1: float, arg2: Matrix4f) -> Matrix4f: ...

  @overload
  def perspectiveFrustumSlice(self, arg0: float, arg1: float, arg2: Matrix4f) -> Matrix4f: ...

  @overload
  def perspectiveInvOrigin(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def perspectiveInvOrigin(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def perspectiveLH(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4f: ...

  @overload
  def perspectiveLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool) -> Matrix4f: ...

  @overload
  def perspectiveLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4f) -> Matrix4f: ...

  @overload
  def perspectiveLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4f) -> Matrix4f: ...

  @overload
  def perspectiveLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool, arg5: Matrix4f) -> Matrix4f: ...

  @overload
  def perspectiveLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool, arg5: Matrix4f) -> Matrix4f: ...

  @overload
  def perspectiveNear(self) -> float: ...

  @overload
  def perspectiveNear(self) -> float: ...

  @overload
  def perspectiveOffCenter(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix4f: ...

  @overload
  def perspectiveOffCenter(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix4f: ...

  @overload
  def perspectiveOffCenter(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool) -> Matrix4f: ...

  @overload
  def perspectiveOffCenter(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool) -> Matrix4f: ...

  @overload
  def perspectiveOffCenter(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4f) -> Matrix4f: ...

  @overload
  def perspectiveOffCenter(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4f) -> Matrix4f: ...

  @overload
  def perspectiveOffCenter(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool, arg7: Matrix4f) -> Matrix4f: ...

  @overload
  def perspectiveOffCenter(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool, arg7: Matrix4f) -> Matrix4f: ...

  @overload
  def perspectiveOrigin(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def perspectiveOrigin(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def perspectiveRect(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4f: ...

  @overload
  def perspectiveRect(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4f: ...

  @overload
  def perspectiveRect(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool) -> Matrix4f: ...

  @overload
  def perspectiveRect(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool) -> Matrix4f: ...

  @overload
  def perspectiveRect(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4f) -> Matrix4f: ...

  @overload
  def perspectiveRect(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4f) -> Matrix4f: ...

  @overload
  def perspectiveRect(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool, arg5: Matrix4f) -> Matrix4f: ...

  @overload
  def perspectiveRect(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool, arg5: Matrix4f) -> Matrix4f: ...

  @overload
  def pick(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: list[int]) -> Matrix4f: ...

  @overload
  def pick(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: list[int], arg5: Matrix4f) -> Matrix4f: ...

  @overload
  def pick(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: list[int], arg5: Matrix4f) -> Matrix4f: ...

  @overload
  def positiveX(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def positiveX(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def positiveY(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def positiveY(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def positiveZ(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def positiveZ(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def project(self, arg0: Vector3fc, arg1: list[int], arg2: Vector3f) -> Vector3f: ...

  @overload
  def project(self, arg0: Vector3fc, arg1: list[int], arg2: Vector3f) -> Vector3f: ...

  @overload
  def project(self, arg0: Vector3fc, arg1: list[int], arg2: Vector4f) -> Vector4f: ...

  @overload
  def project(self, arg0: Vector3fc, arg1: list[int], arg2: Vector4f) -> Vector4f: ...

  @overload
  def project(self, arg0: float, arg1: float, arg2: float, arg3: list[int], arg4: Vector3f) -> Vector3f: ...

  @overload
  def project(self, arg0: float, arg1: float, arg2: float, arg3: list[int], arg4: Vector3f) -> Vector3f: ...

  @overload
  def project(self, arg0: float, arg1: float, arg2: float, arg3: list[int], arg4: Vector4f) -> Vector4f: ...

  @overload
  def project(self, arg0: float, arg1: float, arg2: float, arg3: list[int], arg4: Vector4f) -> Vector4f: ...

  @overload
  def projectedGridRange(self, arg0: Matrix4fc, arg1: float, arg2: float, arg3: Matrix4f) -> Matrix4f: ...

  @overload
  def projectedGridRange(self, arg0: Matrix4fc, arg1: float, arg2: float, arg3: Matrix4f) -> Matrix4f: ...

  @overload
  def properties(self) -> int: ...

  @overload
  def properties(self) -> int: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def reflect(self, arg0: Quaternionfc, arg1: Vector3fc) -> Matrix4f: ...

  @overload
  def reflect(self, arg0: Vector3fc, arg1: Vector3fc) -> Matrix4f: ...

  @overload
  def reflect(self, arg0: Quaternionfc, arg1: Vector3fc, arg2: Matrix4f) -> Matrix4f: ...

  @overload
  def reflect(self, arg0: Quaternionfc, arg1: Vector3fc, arg2: Matrix4f) -> Matrix4f: ...

  @overload
  def reflect(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Matrix4f) -> Matrix4f: ...

  @overload
  def reflect(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Matrix4f) -> Matrix4f: ...

  @overload
  def reflect(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4f: ...

  @overload
  def reflect(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4f) -> Matrix4f: ...

  @overload
  def reflect(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4f) -> Matrix4f: ...

  @overload
  def reflect(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix4f: ...

  @overload
  def reflect(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4f) -> Matrix4f: ...

  @overload
  def reflect(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4f) -> Matrix4f: ...

  @overload
  def reflection(self, arg0: Quaternionfc, arg1: Vector3fc) -> Matrix4f: ...

  @overload
  def reflection(self, arg0: Vector3fc, arg1: Vector3fc) -> Matrix4f: ...

  @overload
  def reflection(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4f: ...

  @overload
  def reflection(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix4f: ...

  @overload
  def rotate(self, arg0: AxisAngle4f) -> Matrix4f: ...

  @overload
  def rotate(self, arg0: Quaternionfc) -> Matrix4f: ...

  @overload
  def rotate(self, arg0: float, arg1: Vector3fc) -> Matrix4f: ...

  @overload
  def rotate(self, arg0: AxisAngle4f, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def rotate(self, arg0: AxisAngle4f, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def rotate(self, arg0: Quaternionfc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def rotate(self, arg0: Quaternionfc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def rotate(self, arg0: float, arg1: Vector3fc, arg2: Matrix4f) -> Matrix4f: ...

  @overload
  def rotate(self, arg0: float, arg1: Vector3fc, arg2: Matrix4f) -> Matrix4f: ...

  @overload
  def rotate(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4f: ...

  @overload
  def rotate(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4f) -> Matrix4f: ...

  @overload
  def rotate(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4f) -> Matrix4f: ...

  @overload
  def rotateAffine(self, arg0: Quaternionfc) -> Matrix4f: ...

  @overload
  def rotateAffine(self, arg0: Quaternionfc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def rotateAffine(self, arg0: Quaternionfc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def rotateAffine(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4f: ...

  @overload
  def rotateAffine(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4f) -> Matrix4f: ...

  @overload
  def rotateAffine(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4f) -> Matrix4f: ...

  @overload
  def rotateAffineXYZ(self, arg0: float, arg1: float, arg2: float) -> Matrix4f: ...

  @overload
  def rotateAffineXYZ(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4f) -> Matrix4f: ...

  @overload
  def rotateAffineXYZ(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4f) -> Matrix4f: ...

  @overload
  def rotateAffineYXZ(self, arg0: float, arg1: float, arg2: float) -> Matrix4f: ...

  @overload
  def rotateAffineYXZ(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4f) -> Matrix4f: ...

  @overload
  def rotateAffineYXZ(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4f) -> Matrix4f: ...

  @overload
  def rotateAffineZYX(self, arg0: float, arg1: float, arg2: float) -> Matrix4f: ...

  @overload
  def rotateAffineZYX(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4f) -> Matrix4f: ...

  @overload
  def rotateAffineZYX(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4f) -> Matrix4f: ...

  @overload
  def rotateAround(self, arg0: Quaternionfc, arg1: float, arg2: float, arg3: float) -> Matrix4f: ...

  @overload
  def rotateAround(self, arg0: Quaternionfc, arg1: float, arg2: float, arg3: float, arg4: Matrix4f) -> Matrix4f: ...

  @overload
  def rotateAround(self, arg0: Quaternionfc, arg1: float, arg2: float, arg3: float, arg4: Matrix4f) -> Matrix4f: ...

  @overload
  def rotateAroundAffine(self, arg0: Quaternionfc, arg1: float, arg2: float, arg3: float, arg4: Matrix4f) -> Matrix4f: ...

  @overload
  def rotateAroundAffine(self, arg0: Quaternionfc, arg1: float, arg2: float, arg3: float, arg4: Matrix4f) -> Matrix4f: ...

  @overload
  def rotateAroundLocal(self, arg0: Quaternionfc, arg1: float, arg2: float, arg3: float) -> Matrix4f: ...

  @overload
  def rotateAroundLocal(self, arg0: Quaternionfc, arg1: float, arg2: float, arg3: float, arg4: Matrix4f) -> Matrix4f: ...

  @overload
  def rotateAroundLocal(self, arg0: Quaternionfc, arg1: float, arg2: float, arg3: float, arg4: Matrix4f) -> Matrix4f: ...

  @overload
  def rotateLocal(self, arg0: Quaternionfc) -> Matrix4f: ...

  @overload
  def rotateLocal(self, arg0: Quaternionfc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def rotateLocal(self, arg0: Quaternionfc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def rotateLocal(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4f: ...

  @overload
  def rotateLocal(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4f) -> Matrix4f: ...

  @overload
  def rotateLocal(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4f) -> Matrix4f: ...

  @overload
  def rotateLocalX(self, arg0: float) -> Matrix4f: ...

  @overload
  def rotateLocalX(self, arg0: float, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def rotateLocalX(self, arg0: float, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def rotateLocalY(self, arg0: float) -> Matrix4f: ...

  @overload
  def rotateLocalY(self, arg0: float, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def rotateLocalY(self, arg0: float, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def rotateLocalZ(self, arg0: float) -> Matrix4f: ...

  @overload
  def rotateLocalZ(self, arg0: float, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def rotateLocalZ(self, arg0: float, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def rotateTowards(self, arg0: Vector3fc, arg1: Vector3fc) -> Matrix4f: ...

  @overload
  def rotateTowards(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Matrix4f) -> Matrix4f: ...

  @overload
  def rotateTowards(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Matrix4f) -> Matrix4f: ...

  @overload
  def rotateTowards(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix4f: ...

  @overload
  def rotateTowards(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4f) -> Matrix4f: ...

  @overload
  def rotateTowards(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4f) -> Matrix4f: ...

  @overload
  def rotateTowardsXY(self, arg0: float, arg1: float) -> Matrix4f: ...

  @overload
  def rotateTowardsXY(self, arg0: float, arg1: float, arg2: Matrix4f) -> Matrix4f: ...

  @overload
  def rotateTowardsXY(self, arg0: float, arg1: float, arg2: Matrix4f) -> Matrix4f: ...

  @overload
  def rotateTranslation(self, arg0: Quaternionfc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def rotateTranslation(self, arg0: Quaternionfc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def rotateTranslation(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4f) -> Matrix4f: ...

  @overload
  def rotateTranslation(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4f) -> Matrix4f: ...

  @overload
  def rotateX(self, arg0: float) -> Matrix4f: ...

  @overload
  def rotateX(self, arg0: float, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def rotateX(self, arg0: float, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def rotateXYZ(self, arg0: Vector3fc) -> Matrix4f: ...

  @overload
  def rotateXYZ(self, arg0: float, arg1: float, arg2: float) -> Matrix4f: ...

  @overload
  def rotateXYZ(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4f) -> Matrix4f: ...

  @overload
  def rotateXYZ(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4f) -> Matrix4f: ...

  @overload
  def rotateY(self, arg0: float) -> Matrix4f: ...

  @overload
  def rotateY(self, arg0: float, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def rotateY(self, arg0: float, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def rotateYXZ(self, arg0: Vector3f) -> Matrix4f: ...

  @overload
  def rotateYXZ(self, arg0: float, arg1: float, arg2: float) -> Matrix4f: ...

  @overload
  def rotateYXZ(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4f) -> Matrix4f: ...

  @overload
  def rotateYXZ(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4f) -> Matrix4f: ...

  @overload
  def rotateZ(self, arg0: float) -> Matrix4f: ...

  @overload
  def rotateZ(self, arg0: float, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def rotateZ(self, arg0: float, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def rotateZYX(self, arg0: Vector3f) -> Matrix4f: ...

  @overload
  def rotateZYX(self, arg0: float, arg1: float, arg2: float) -> Matrix4f: ...

  @overload
  def rotateZYX(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4f) -> Matrix4f: ...

  @overload
  def rotateZYX(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4f) -> Matrix4f: ...

  @overload
  def rotation(self, arg0: AxisAngle4f) -> Matrix4f: ...

  @overload
  def rotation(self, arg0: Quaternionfc) -> Matrix4f: ...

  @overload
  def rotation(self, arg0: float, arg1: Vector3fc) -> Matrix4f: ...

  @overload
  def rotation(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4f: ...

  def rotationAround(self, arg0: Quaternionfc, arg1: float, arg2: float, arg3: float) -> Matrix4f: ...

  @overload
  def rotationTowards(self, arg0: Vector3fc, arg1: Vector3fc) -> Matrix4f: ...

  @overload
  def rotationTowards(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix4f: ...

  def rotationTowardsXY(self, arg0: float, arg1: float) -> Matrix4f: ...

  def rotationX(self, arg0: float) -> Matrix4f: ...

  def rotationXYZ(self, arg0: float, arg1: float, arg2: float) -> Matrix4f: ...

  def rotationY(self, arg0: float) -> Matrix4f: ...

  def rotationYXZ(self, arg0: float, arg1: float, arg2: float) -> Matrix4f: ...

  def rotationZ(self, arg0: float) -> Matrix4f: ...

  def rotationZYX(self, arg0: float, arg1: float, arg2: float) -> Matrix4f: ...

  @overload
  def scale(self, arg0: float) -> Matrix4f: ...

  @overload
  def scale(self, arg0: Vector3fc) -> Matrix4f: ...

  @overload
  def scale(self, arg0: float, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def scale(self, arg0: float, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def scale(self, arg0: Vector3fc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def scale(self, arg0: Vector3fc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def scale(self, arg0: float, arg1: float, arg2: float) -> Matrix4f: ...

  @overload
  def scale(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4f) -> Matrix4f: ...

  @overload
  def scale(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4f) -> Matrix4f: ...

  @overload
  def scaleAround(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4f: ...

  @overload
  def scaleAround(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4f) -> Matrix4f: ...

  @overload
  def scaleAround(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4f) -> Matrix4f: ...

  @overload
  def scaleAround(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix4f: ...

  @overload
  def scaleAround(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4f) -> Matrix4f: ...

  @overload
  def scaleAround(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4f) -> Matrix4f: ...

  @overload
  def scaleAroundLocal(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4f: ...

  @overload
  def scaleAroundLocal(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4f) -> Matrix4f: ...

  @overload
  def scaleAroundLocal(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4f) -> Matrix4f: ...

  @overload
  def scaleAroundLocal(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix4f: ...

  @overload
  def scaleAroundLocal(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4f) -> Matrix4f: ...

  @overload
  def scaleAroundLocal(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4f) -> Matrix4f: ...

  @overload
  def scaleLocal(self, arg0: float) -> Matrix4f: ...

  @overload
  def scaleLocal(self, arg0: float, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def scaleLocal(self, arg0: float, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def scaleLocal(self, arg0: float, arg1: float, arg2: float) -> Matrix4f: ...

  @overload
  def scaleLocal(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4f) -> Matrix4f: ...

  @overload
  def scaleLocal(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4f) -> Matrix4f: ...

  @overload
  def scaleXY(self, arg0: float, arg1: float) -> Matrix4f: ...

  @overload
  def scaleXY(self, arg0: float, arg1: float, arg2: Matrix4f) -> Matrix4f: ...

  @overload
  def scaleXY(self, arg0: float, arg1: float, arg2: Matrix4f) -> Matrix4f: ...

  @overload
  def scaling(self, arg0: float) -> Matrix4f: ...

  @overload
  def scaling(self, arg0: Vector3fc) -> Matrix4f: ...

  @overload
  def scaling(self, arg0: float, arg1: float, arg2: float) -> Matrix4f: ...

  @overload
  def set(self, arg0: list[float]) -> Matrix4f: ...

  @overload
  def set(self, arg0: ByteBuffer) -> Matrix4f: ...

  @overload
  def set(self, arg0: FloatBuffer) -> Matrix4f: ...

  @overload
  def set(self, arg0: AxisAngle4d) -> Matrix4f: ...

  @overload
  def set(self, arg0: AxisAngle4f) -> Matrix4f: ...

  @overload
  def set(self, arg0: Matrix3fc) -> Matrix4f: ...

  @overload
  def set(self, arg0: Matrix4dc) -> Matrix4f: ...

  @overload
  def set(self, arg0: Matrix4fc) -> Matrix4f: ...

  @overload
  def set(self, arg0: Matrix4x3fc) -> Matrix4f: ...

  @overload
  def set(self, arg0: Quaterniondc) -> Matrix4f: ...

  @overload
  def set(self, arg0: Quaternionfc) -> Matrix4f: ...

  @overload
  def set(self, arg0: list[float], arg1: int) -> Matrix4f: ...

  @overload
  def set(self, arg0: int, arg1: int, arg2: float) -> Matrix4f: ...

  @overload
  def set(self, arg0: Vector4fc, arg1: Vector4fc, arg2: Vector4fc, arg3: Vector4fc) -> Matrix4f: ...

  @overload
  def set(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float, arg10: float, arg11: float, arg12: float, arg13: float, arg14: float, arg15: float) -> Matrix4f: ...

  @overload
  def set3x3(self, arg0: Matrix3fc) -> Matrix4f: ...

  @overload
  def set3x3(self, arg0: Matrix4f) -> Matrix4f: ...

  @overload
  def set4x3(self, arg0: Matrix4f) -> Matrix4f: ...

  @overload
  def set4x3(self, arg0: Matrix4x3fc) -> Matrix4f: ...

  def setColumn(self, arg0: int, arg1: Vector4fc) -> Matrix4f: ...

  def setFromAddress(self, arg0: int) -> Matrix4f: ...

  def setFromIntrinsic(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: int, arg6: int, arg7: float, arg8: float) -> Matrix4f: ...

  @overload
  def setFrustum(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix4f: ...

  @overload
  def setFrustum(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool) -> Matrix4f: ...

  @overload
  def setFrustumLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix4f: ...

  @overload
  def setFrustumLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool) -> Matrix4f: ...

  @overload
  def setLookAlong(self, arg0: Vector3fc, arg1: Vector3fc) -> Matrix4f: ...

  @overload
  def setLookAlong(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix4f: ...

  @overload
  def setLookAt(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Vector3fc) -> Matrix4f: ...

  @overload
  def setLookAt(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float) -> Matrix4f: ...

  @overload
  def setLookAtLH(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Vector3fc) -> Matrix4f: ...

  @overload
  def setLookAtLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float) -> Matrix4f: ...

  @overload
  def setOrtho(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix4f: ...

  @overload
  def setOrtho(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool) -> Matrix4f: ...

  def setOrtho2D(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4f: ...

  def setOrtho2DLH(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4f: ...

  @overload
  def setOrthoLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix4f: ...

  @overload
  def setOrthoLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool) -> Matrix4f: ...

  @overload
  def setOrthoSymmetric(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4f: ...

  @overload
  def setOrthoSymmetric(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool) -> Matrix4f: ...

  @overload
  def setOrthoSymmetricLH(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4f: ...

  @overload
  def setOrthoSymmetricLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool) -> Matrix4f: ...

  @overload
  def setPerspective(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4f: ...

  @overload
  def setPerspective(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool) -> Matrix4f: ...

  @overload
  def setPerspectiveLH(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4f: ...

  @overload
  def setPerspectiveLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool) -> Matrix4f: ...

  @overload
  def setPerspectiveOffCenter(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix4f: ...

  @overload
  def setPerspectiveOffCenter(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool) -> Matrix4f: ...

  @overload
  def setPerspectiveRect(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4f: ...

  @overload
  def setPerspectiveRect(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool) -> Matrix4f: ...

  def setRotationXYZ(self, arg0: float, arg1: float, arg2: float) -> Matrix4f: ...

  def setRotationYXZ(self, arg0: float, arg1: float, arg2: float) -> Matrix4f: ...

  def setRotationZYX(self, arg0: float, arg1: float, arg2: float) -> Matrix4f: ...

  def setRow(self, arg0: int, arg1: Vector4fc) -> Matrix4f: ...

  def setRowColumn(self, arg0: int, arg1: int, arg2: float) -> Matrix4f: ...

  @overload
  def setTranslation(self, arg0: Vector3fc) -> Matrix4f: ...

  @overload
  def setTranslation(self, arg0: float, arg1: float, arg2: float) -> Matrix4f: ...

  @overload
  def setTransposed(self, arg0: list[float]) -> Matrix4f: ...

  @overload
  def setTransposed(self, arg0: ByteBuffer) -> Matrix4f: ...

  @overload
  def setTransposed(self, arg0: FloatBuffer) -> Matrix4f: ...

  @overload
  def setTransposed(self, arg0: Matrix4fc) -> Matrix4f: ...

  @overload
  def setTransposed(self, arg0: list[float], arg1: int) -> Matrix4f: ...

  def setTransposedFromAddress(self, arg0: int) -> Matrix4f: ...

  @overload
  def shadow(self, arg0: Vector4f, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def shadow(self, arg0: Vector4f, arg1: Matrix4fc, arg2: Matrix4f) -> Matrix4f: ...

  @overload
  def shadow(self, arg0: Vector4f, arg1: Matrix4fc, arg2: Matrix4f) -> Matrix4f: ...

  @overload
  def shadow(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4f) -> Matrix4f: ...

  @overload
  def shadow(self, arg0: Vector4f, arg1: float, arg2: float, arg3: float, arg4: float) -> Matrix4f: ...

  @overload
  def shadow(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4fc, arg5: Matrix4f) -> Matrix4f: ...

  @overload
  def shadow(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4fc, arg5: Matrix4f) -> Matrix4f: ...

  @overload
  def shadow(self, arg0: Vector4f, arg1: float, arg2: float, arg3: float, arg4: float, arg5: Matrix4f) -> Matrix4f: ...

  @overload
  def shadow(self, arg0: Vector4f, arg1: float, arg2: float, arg3: float, arg4: float, arg5: Matrix4f) -> Matrix4f: ...

  @overload
  def shadow(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float) -> Matrix4f: ...

  @overload
  def shadow(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: Matrix4f) -> Matrix4f: ...

  @overload
  def shadow(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: Matrix4f) -> Matrix4f: ...

  @overload
  def sub(self, arg0: Matrix4fc) -> Matrix4f: ...

  @overload
  def sub(self, arg0: Matrix4fc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def sub(self, arg0: Matrix4fc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def sub4x3(self, arg0: Matrix4f) -> Matrix4f: ...

  @overload
  def sub4x3(self, arg0: Matrix4fc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def sub4x3(self, arg0: Matrix4fc, arg1: Matrix4f) -> Matrix4f: ...

  def swap(self, arg0: Matrix4f) -> Matrix4f: ...

  @overload
  def testAab(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> bool: ...

  @overload
  def testAab(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> bool: ...

  @overload
  def testPoint(self, arg0: float, arg1: float, arg2: float) -> bool: ...

  @overload
  def testPoint(self, arg0: float, arg1: float, arg2: float) -> bool: ...

  @overload
  def testSphere(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool: ...

  @overload
  def testSphere(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool: ...

  @overload
  def toString(self) -> str: ...

  @overload
  def toString(self, arg0: NumberFormat) -> str: ...

  @overload
  def transform(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transform(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transform(self, arg0: Vector4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def transform(self, arg0: Vector4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def transform(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Vector4f) -> Vector4f: ...

  @overload
  def transform(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Vector4f) -> Vector4f: ...

  @overload
  def transformAab(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Vector3f, arg3: Vector3f) -> Matrix4f: ...

  @overload
  def transformAab(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Vector3f, arg3: Vector3f) -> Matrix4f: ...

  @overload
  def transformAab(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Vector3f, arg7: Vector3f) -> Matrix4f: ...

  @overload
  def transformAab(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Vector3f, arg7: Vector3f) -> Matrix4f: ...

  @overload
  def transformAffine(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transformAffine(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transformAffine(self, arg0: Vector4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def transformAffine(self, arg0: Vector4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def transformAffine(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Vector4f) -> Vector4f: ...

  @overload
  def transformAffine(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Vector4f) -> Vector4f: ...

  @overload
  def transformDirection(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformDirection(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformDirection(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def transformDirection(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def transformDirection(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  @overload
  def transformDirection(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  @overload
  def transformPosition(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformPosition(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformPosition(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def transformPosition(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def transformPosition(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  @overload
  def transformPosition(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  @overload
  def transformProject(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformProject(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformProject(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transformProject(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transformProject(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def transformProject(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def transformProject(self, arg0: Vector4fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def transformProject(self, arg0: Vector4fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def transformProject(self, arg0: Vector4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def transformProject(self, arg0: Vector4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def transformProject(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  @overload
  def transformProject(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  @overload
  def transformProject(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Vector3f) -> Vector3f: ...

  @overload
  def transformProject(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Vector3f) -> Vector3f: ...

  @overload
  def transformProject(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Vector4f) -> Vector4f: ...

  @overload
  def transformProject(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Vector4f) -> Vector4f: ...

  @overload
  def transformTranspose(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transformTranspose(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transformTranspose(self, arg0: Vector4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def transformTranspose(self, arg0: Vector4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def transformTranspose(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Vector4f) -> Vector4f: ...

  @overload
  def transformTranspose(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Vector4f) -> Vector4f: ...

  @overload
  def translate(self, arg0: Vector3fc) -> Matrix4f: ...

  @overload
  def translate(self, arg0: Vector3fc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def translate(self, arg0: Vector3fc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def translate(self, arg0: float, arg1: float, arg2: float) -> Matrix4f: ...

  @overload
  def translate(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4f) -> Matrix4f: ...

  @overload
  def translate(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4f) -> Matrix4f: ...

  @overload
  def translateLocal(self, arg0: Vector3fc) -> Matrix4f: ...

  @overload
  def translateLocal(self, arg0: Vector3fc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def translateLocal(self, arg0: Vector3fc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def translateLocal(self, arg0: float, arg1: float, arg2: float) -> Matrix4f: ...

  @overload
  def translateLocal(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4f) -> Matrix4f: ...

  @overload
  def translateLocal(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4f) -> Matrix4f: ...

  @overload
  def translation(self, arg0: Vector3fc) -> Matrix4f: ...

  @overload
  def translation(self, arg0: float, arg1: float, arg2: float) -> Matrix4f: ...

  @overload
  def translationRotate(self, arg0: float, arg1: float, arg2: float, arg3: Quaternionfc) -> Matrix4f: ...

  @overload
  def translationRotate(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float) -> Matrix4f: ...

  @overload
  def translationRotateScale(self, arg0: Vector3fc, arg1: Quaternionfc, arg2: float) -> Matrix4f: ...

  @overload
  def translationRotateScale(self, arg0: Vector3fc, arg1: Quaternionfc, arg2: Vector3fc) -> Matrix4f: ...

  @overload
  def translationRotateScale(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float) -> Matrix4f: ...

  @overload
  def translationRotateScale(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float) -> Matrix4f: ...

  @overload
  def translationRotateScaleInvert(self, arg0: Vector3fc, arg1: Quaternionfc, arg2: float) -> Matrix4f: ...

  @overload
  def translationRotateScaleInvert(self, arg0: Vector3fc, arg1: Quaternionfc, arg2: Vector3fc) -> Matrix4f: ...

  @overload
  def translationRotateScaleInvert(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float) -> Matrix4f: ...

  @overload
  def translationRotateScaleMulAffine(self, arg0: Vector3fc, arg1: Quaternionfc, arg2: Vector3fc, arg3: Matrix4f) -> Matrix4f: ...

  @overload
  def translationRotateScaleMulAffine(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float, arg10: Matrix4f) -> Matrix4f: ...

  @overload
  def translationRotateTowards(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Vector3fc) -> Matrix4f: ...

  @overload
  def translationRotateTowards(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float) -> Matrix4f: ...

  @overload
  def transpose(self) -> Matrix4f: ...

  @overload
  def transpose(self, arg0: Matrix4f) -> Matrix4f: ...

  @overload
  def transpose(self, arg0: Matrix4f) -> Matrix4f: ...

  @overload
  def transpose3x3(self) -> Matrix4f: ...

  @overload
  def transpose3x3(self, arg0: Matrix3f) -> Matrix3f: ...

  @overload
  def transpose3x3(self, arg0: Matrix3f) -> Matrix3f: ...

  @overload
  def transpose3x3(self, arg0: Matrix4f) -> Matrix4f: ...

  @overload
  def transpose3x3(self, arg0: Matrix4f) -> Matrix4f: ...

  def trapezoidCrop(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float) -> Matrix4f: ...

  @overload
  def unproject(self, arg0: Vector3fc, arg1: list[int], arg2: Vector3f) -> Vector3f: ...

  @overload
  def unproject(self, arg0: Vector3fc, arg1: list[int], arg2: Vector3f) -> Vector3f: ...

  @overload
  def unproject(self, arg0: Vector3fc, arg1: list[int], arg2: Vector4f) -> Vector4f: ...

  @overload
  def unproject(self, arg0: Vector3fc, arg1: list[int], arg2: Vector4f) -> Vector4f: ...

  @overload
  def unproject(self, arg0: float, arg1: float, arg2: float, arg3: list[int], arg4: Vector3f) -> Vector3f: ...

  @overload
  def unproject(self, arg0: float, arg1: float, arg2: float, arg3: list[int], arg4: Vector3f) -> Vector3f: ...

  @overload
  def unproject(self, arg0: float, arg1: float, arg2: float, arg3: list[int], arg4: Vector4f) -> Vector4f: ...

  @overload
  def unproject(self, arg0: float, arg1: float, arg2: float, arg3: list[int], arg4: Vector4f) -> Vector4f: ...

  @overload
  def unprojectInv(self, arg0: Vector3fc, arg1: list[int], arg2: Vector3f) -> Vector3f: ...

  @overload
  def unprojectInv(self, arg0: Vector3fc, arg1: list[int], arg2: Vector3f) -> Vector3f: ...

  @overload
  def unprojectInv(self, arg0: Vector3fc, arg1: list[int], arg2: Vector4f) -> Vector4f: ...

  @overload
  def unprojectInv(self, arg0: Vector3fc, arg1: list[int], arg2: Vector4f) -> Vector4f: ...

  @overload
  def unprojectInv(self, arg0: float, arg1: float, arg2: float, arg3: list[int], arg4: Vector3f) -> Vector3f: ...

  @overload
  def unprojectInv(self, arg0: float, arg1: float, arg2: float, arg3: list[int], arg4: Vector3f) -> Vector3f: ...

  @overload
  def unprojectInv(self, arg0: float, arg1: float, arg2: float, arg3: list[int], arg4: Vector4f) -> Vector4f: ...

  @overload
  def unprojectInv(self, arg0: float, arg1: float, arg2: float, arg3: list[int], arg4: Vector4f) -> Vector4f: ...

  @overload
  def unprojectInvRay(self, arg0: Vector2fc, arg1: list[int], arg2: Vector3f, arg3: Vector3f) -> Matrix4f: ...

  @overload
  def unprojectInvRay(self, arg0: Vector2fc, arg1: list[int], arg2: Vector3f, arg3: Vector3f) -> Matrix4f: ...

  @overload
  def unprojectInvRay(self, arg0: float, arg1: float, arg2: list[int], arg3: Vector3f, arg4: Vector3f) -> Matrix4f: ...

  @overload
  def unprojectInvRay(self, arg0: float, arg1: float, arg2: list[int], arg3: Vector3f, arg4: Vector3f) -> Matrix4f: ...

  @overload
  def unprojectRay(self, arg0: Vector2fc, arg1: list[int], arg2: Vector3f, arg3: Vector3f) -> Matrix4f: ...

  @overload
  def unprojectRay(self, arg0: Vector2fc, arg1: list[int], arg2: Vector3f, arg3: Vector3f) -> Matrix4f: ...

  @overload
  def unprojectRay(self, arg0: float, arg1: float, arg2: list[int], arg3: Vector3f, arg4: Vector3f) -> Matrix4f: ...

  @overload
  def unprojectRay(self, arg0: float, arg1: float, arg2: list[int], arg3: Vector3f, arg4: Vector3f) -> Matrix4f: ...

  @overload
  def withLookAtUp(self, arg0: Vector3fc) -> Matrix4f: ...

  @overload
  def withLookAtUp(self, arg0: Vector3fc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def withLookAtUp(self, arg0: Vector3fc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def withLookAtUp(self, arg0: float, arg1: float, arg2: float) -> Matrix4f: ...

  @overload
  def withLookAtUp(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4f) -> Matrix4f: ...

  @overload
  def withLookAtUp(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4f) -> Matrix4f: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  def zero(self) -> Matrix4f: ...

  @staticmethod
  def projViewFromRectangle(arg0: Vector3f, arg1: Vector3f, arg2: Vector3f, arg3: Vector3f, arg4: float, arg5: bool, arg6: Matrix4f, arg7: Matrix4f) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: FloatBuffer): ...
  @overload
  def __init__(self, arg0: Matrix3fc): ...
  @overload
  def __init__(self, arg0: Matrix4dc): ...
  @overload
  def __init__(self, arg0: Matrix4fc): ...
  @overload
  def __init__(self, arg0: Matrix4x3fc): ...
  @overload
  def __init__(self, arg0: Vector4fc, arg1: Vector4fc, arg2: Vector4fc, arg3: Vector4fc): ...
  @overload
  def __init__(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float, arg10: float, arg11: float, arg12: float, arg13: float, arg14: float, arg15: float): ...


class Matrix4fStack(Matrix4f):

  def clear(self) -> Matrix4fStack: ...

  def equals(self, arg0: object) -> bool: ...

  def hashCode(self) -> int: ...

  def popMatrix(self) -> Matrix4fStack: ...

  def pushMatrix(self) -> Matrix4fStack: ...

  def readExternal(self, arg0: ObjectInput) -> None: ...

  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: int): ...


class Matrix4fc:

  CORNER_NXNYNZ: int

  CORNER_NXNYPZ: int

  CORNER_NXPYNZ: int

  CORNER_NXPYPZ: int

  CORNER_PXNYNZ: int

  CORNER_PXNYPZ: int

  CORNER_PXPYNZ: int

  CORNER_PXPYPZ: int

  PLANE_NX: int

  PLANE_NY: int

  PLANE_NZ: int

  PLANE_PX: int

  PLANE_PY: int

  PLANE_PZ: int

  PROPERTY_AFFINE: int

  PROPERTY_IDENTITY: int

  PROPERTY_ORTHONORMAL: int

  PROPERTY_PERSPECTIVE: int

  PROPERTY_TRANSLATION: int

  def add(self, arg0: Matrix4fc, arg1: Matrix4f) -> Matrix4f: ...

  def add4x3(self, arg0: Matrix4fc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def arcball(self, arg0: float, arg1: Vector3fc, arg2: float, arg3: float, arg4: Matrix4f) -> Matrix4f: ...

  @overload
  def arcball(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4f) -> Matrix4f: ...

  @overload
  def cofactor3x3(self, arg0: Matrix3f) -> Matrix3f: ...

  @overload
  def cofactor3x3(self, arg0: Matrix4f) -> Matrix4f: ...

  def determinant(self) -> float: ...

  def determinant3x3(self) -> float: ...

  def determinantAffine(self) -> float: ...

  def equals(self, arg0: Matrix4fc, arg1: float) -> bool: ...

  def fma4x3(self, arg0: Matrix4fc, arg1: float, arg2: Matrix4f) -> Matrix4f: ...

  @overload
  def frustum(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4f) -> Matrix4f: ...

  @overload
  def frustum(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool, arg7: Matrix4f) -> Matrix4f: ...

  def frustumAabb(self, arg0: Vector3f, arg1: Vector3f) -> Matrix4f: ...

  def frustumCorner(self, arg0: int, arg1: Vector3f) -> Vector3f: ...

  @overload
  def frustumLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4f) -> Matrix4f: ...

  @overload
  def frustumLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool, arg7: Matrix4f) -> Matrix4f: ...

  def frustumPlane(self, arg0: int, arg1: Vector4f) -> Vector4f: ...

  def frustumRayDir(self, arg0: float, arg1: float, arg2: Vector3f) -> Vector3f: ...

  @overload
  def get(self, arg0: list[float]) -> list[float]: ...

  @overload
  def get(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get(self, arg0: Matrix4d) -> Matrix4d: ...

  @overload
  def get(self, arg0: Matrix4f) -> Matrix4f: ...

  @overload
  def get(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def get(self, arg0: int, arg1: int) -> float: ...

  @overload
  def get(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get3x3(self, arg0: Matrix3d) -> Matrix3d: ...

  @overload
  def get3x3(self, arg0: Matrix3f) -> Matrix3f: ...

  @overload
  def get3x4(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get3x4(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get3x4(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get3x4(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get4x3(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get4x3(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get4x3(self, arg0: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def get4x3(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get4x3(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get4x3Transposed(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get4x3Transposed(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get4x3Transposed(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get4x3Transposed(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def getColumn(self, arg0: int, arg1: Vector3f) -> Vector3f: ...

  @overload
  def getColumn(self, arg0: int, arg1: Vector4f) -> Vector4f: ...

  def getEulerAnglesZYX(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def getNormalizedRotation(self, arg0: Quaterniond) -> Quaterniond: ...

  @overload
  def getNormalizedRotation(self, arg0: Quaternionf) -> Quaternionf: ...

  @overload
  def getRotation(self, arg0: AxisAngle4d) -> AxisAngle4d: ...

  @overload
  def getRotation(self, arg0: AxisAngle4f) -> AxisAngle4f: ...

  @overload
  def getRow(self, arg0: int, arg1: Vector3f) -> Vector3f: ...

  @overload
  def getRow(self, arg0: int, arg1: Vector4f) -> Vector4f: ...

  def getRowColumn(self, arg0: int, arg1: int) -> float: ...

  def getScale(self, arg0: Vector3f) -> Vector3f: ...

  def getToAddress(self, arg0: int) -> Matrix4fc: ...

  def getTranslation(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def getTransposed(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getTransposed(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def getTransposed(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getTransposed(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def getUnnormalizedRotation(self, arg0: Quaterniond) -> Quaterniond: ...

  @overload
  def getUnnormalizedRotation(self, arg0: Quaternionf) -> Quaternionf: ...

  def invert(self, arg0: Matrix4f) -> Matrix4f: ...

  def invertAffine(self, arg0: Matrix4f) -> Matrix4f: ...

  def invertFrustum(self, arg0: Matrix4f) -> Matrix4f: ...

  def invertOrtho(self, arg0: Matrix4f) -> Matrix4f: ...

  def invertPerspective(self, arg0: Matrix4f) -> Matrix4f: ...

  @overload
  def invertPerspectiveView(self, arg0: Matrix4fc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def invertPerspectiveView(self, arg0: Matrix4x3fc, arg1: Matrix4f) -> Matrix4f: ...

  def isAffine(self) -> bool: ...

  def isFinite(self) -> bool: ...

  def lerp(self, arg0: Matrix4fc, arg1: float, arg2: Matrix4f) -> Matrix4f: ...

  @overload
  def lookAlong(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Matrix4f) -> Matrix4f: ...

  @overload
  def lookAlong(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4f) -> Matrix4f: ...

  @overload
  def lookAt(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Vector3fc, arg3: Matrix4f) -> Matrix4f: ...

  @overload
  def lookAt(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: Matrix4f) -> Matrix4f: ...

  @overload
  def lookAtLH(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Vector3fc, arg3: Matrix4f) -> Matrix4f: ...

  @overload
  def lookAtLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: Matrix4f) -> Matrix4f: ...

  def lookAtPerspective(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: Matrix4f) -> Matrix4f: ...

  def lookAtPerspectiveLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: Matrix4f) -> Matrix4f: ...

  def m00(self) -> float: ...

  def m01(self) -> float: ...

  def m02(self) -> float: ...

  def m03(self) -> float: ...

  def m10(self) -> float: ...

  def m11(self) -> float: ...

  def m12(self) -> float: ...

  def m13(self) -> float: ...

  def m20(self) -> float: ...

  def m21(self) -> float: ...

  def m22(self) -> float: ...

  def m23(self) -> float: ...

  def m30(self) -> float: ...

  def m31(self) -> float: ...

  def m32(self) -> float: ...

  def m33(self) -> float: ...

  @overload
  def mul(self, arg0: Matrix3x2fc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def mul(self, arg0: Matrix4fc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def mul(self, arg0: Matrix4x3fc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def mul(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float, arg10: float, arg11: float, arg12: float, arg13: float, arg14: float, arg15: float, arg16: Matrix4f) -> Matrix4f: ...

  def mul0(self, arg0: Matrix4fc, arg1: Matrix4f) -> Matrix4f: ...

  def mul3x3(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: Matrix4f) -> Matrix4f: ...

  def mul4x3ComponentWise(self, arg0: Matrix4fc, arg1: Matrix4f) -> Matrix4f: ...

  def mulAffine(self, arg0: Matrix4fc, arg1: Matrix4f) -> Matrix4f: ...

  def mulAffineR(self, arg0: Matrix4fc, arg1: Matrix4f) -> Matrix4f: ...

  def mulComponentWise(self, arg0: Matrix4fc, arg1: Matrix4f) -> Matrix4f: ...

  def mulLocal(self, arg0: Matrix4fc, arg1: Matrix4f) -> Matrix4f: ...

  def mulLocalAffine(self, arg0: Matrix4fc, arg1: Matrix4f) -> Matrix4f: ...

  def mulOrthoAffine(self, arg0: Matrix4fc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def mulPerspectiveAffine(self, arg0: Matrix4fc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def mulPerspectiveAffine(self, arg0: Matrix4x3fc, arg1: Matrix4f) -> Matrix4f: ...

  def mulTranslationAffine(self, arg0: Matrix4fc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def normal(self, arg0: Matrix3f) -> Matrix3f: ...

  @overload
  def normal(self, arg0: Matrix4f) -> Matrix4f: ...

  @overload
  def normalize3x3(self, arg0: Matrix3f) -> Matrix3f: ...

  @overload
  def normalize3x3(self, arg0: Matrix4f) -> Matrix4f: ...

  def normalizedPositiveX(self, arg0: Vector3f) -> Vector3f: ...

  def normalizedPositiveY(self, arg0: Vector3f) -> Vector3f: ...

  def normalizedPositiveZ(self, arg0: Vector3f) -> Vector3f: ...

  def obliqueZ(self, arg0: float, arg1: float, arg2: Matrix4f) -> Matrix4f: ...

  def origin(self, arg0: Vector3f) -> Vector3f: ...

  def originAffine(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def ortho(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4f) -> Matrix4f: ...

  @overload
  def ortho(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool, arg7: Matrix4f) -> Matrix4f: ...

  def ortho2D(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4f) -> Matrix4f: ...

  def ortho2DLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4f) -> Matrix4f: ...

  def orthoCrop(self, arg0: Matrix4fc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def orthoLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4f) -> Matrix4f: ...

  @overload
  def orthoLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool, arg7: Matrix4f) -> Matrix4f: ...

  @overload
  def orthoSymmetric(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4f) -> Matrix4f: ...

  @overload
  def orthoSymmetric(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool, arg5: Matrix4f) -> Matrix4f: ...

  @overload
  def orthoSymmetricLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4f) -> Matrix4f: ...

  @overload
  def orthoSymmetricLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool, arg5: Matrix4f) -> Matrix4f: ...

  @overload
  def perspective(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4f) -> Matrix4f: ...

  @overload
  def perspective(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool, arg5: Matrix4f) -> Matrix4f: ...

  def perspectiveFar(self) -> float: ...

  def perspectiveFov(self) -> float: ...

  def perspectiveFrustumSlice(self, arg0: float, arg1: float, arg2: Matrix4f) -> Matrix4f: ...

  def perspectiveInvOrigin(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def perspectiveLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4f) -> Matrix4f: ...

  @overload
  def perspectiveLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool, arg5: Matrix4f) -> Matrix4f: ...

  def perspectiveNear(self) -> float: ...

  @overload
  def perspectiveOffCenter(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix4f: ...

  @overload
  def perspectiveOffCenter(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool) -> Matrix4f: ...

  @overload
  def perspectiveOffCenter(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4f) -> Matrix4f: ...

  @overload
  def perspectiveOffCenter(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool, arg7: Matrix4f) -> Matrix4f: ...

  def perspectiveOrigin(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def perspectiveRect(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4f: ...

  @overload
  def perspectiveRect(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool) -> Matrix4f: ...

  @overload
  def perspectiveRect(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4f) -> Matrix4f: ...

  @overload
  def perspectiveRect(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool, arg5: Matrix4f) -> Matrix4f: ...

  def pick(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: list[int], arg5: Matrix4f) -> Matrix4f: ...

  def positiveX(self, arg0: Vector3f) -> Vector3f: ...

  def positiveY(self, arg0: Vector3f) -> Vector3f: ...

  def positiveZ(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def project(self, arg0: Vector3fc, arg1: list[int], arg2: Vector3f) -> Vector3f: ...

  @overload
  def project(self, arg0: Vector3fc, arg1: list[int], arg2: Vector4f) -> Vector4f: ...

  @overload
  def project(self, arg0: float, arg1: float, arg2: float, arg3: list[int], arg4: Vector3f) -> Vector3f: ...

  @overload
  def project(self, arg0: float, arg1: float, arg2: float, arg3: list[int], arg4: Vector4f) -> Vector4f: ...

  def projectedGridRange(self, arg0: Matrix4fc, arg1: float, arg2: float, arg3: Matrix4f) -> Matrix4f: ...

  def properties(self) -> int: ...

  @overload
  def reflect(self, arg0: Quaternionfc, arg1: Vector3fc, arg2: Matrix4f) -> Matrix4f: ...

  @overload
  def reflect(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Matrix4f) -> Matrix4f: ...

  @overload
  def reflect(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4f) -> Matrix4f: ...

  @overload
  def reflect(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4f) -> Matrix4f: ...

  @overload
  def rotate(self, arg0: AxisAngle4f, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def rotate(self, arg0: Quaternionfc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def rotate(self, arg0: float, arg1: Vector3fc, arg2: Matrix4f) -> Matrix4f: ...

  @overload
  def rotate(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4f) -> Matrix4f: ...

  @overload
  def rotateAffine(self, arg0: Quaternionfc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def rotateAffine(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4f) -> Matrix4f: ...

  def rotateAffineXYZ(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4f) -> Matrix4f: ...

  def rotateAffineYXZ(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4f) -> Matrix4f: ...

  def rotateAffineZYX(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4f) -> Matrix4f: ...

  def rotateAround(self, arg0: Quaternionfc, arg1: float, arg2: float, arg3: float, arg4: Matrix4f) -> Matrix4f: ...

  def rotateAroundAffine(self, arg0: Quaternionfc, arg1: float, arg2: float, arg3: float, arg4: Matrix4f) -> Matrix4f: ...

  def rotateAroundLocal(self, arg0: Quaternionfc, arg1: float, arg2: float, arg3: float, arg4: Matrix4f) -> Matrix4f: ...

  @overload
  def rotateLocal(self, arg0: Quaternionfc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def rotateLocal(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4f) -> Matrix4f: ...

  def rotateLocalX(self, arg0: float, arg1: Matrix4f) -> Matrix4f: ...

  def rotateLocalY(self, arg0: float, arg1: Matrix4f) -> Matrix4f: ...

  def rotateLocalZ(self, arg0: float, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def rotateTowards(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Matrix4f) -> Matrix4f: ...

  @overload
  def rotateTowards(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4f) -> Matrix4f: ...

  def rotateTowardsXY(self, arg0: float, arg1: float, arg2: Matrix4f) -> Matrix4f: ...

  @overload
  def rotateTranslation(self, arg0: Quaternionfc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def rotateTranslation(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4f) -> Matrix4f: ...

  def rotateX(self, arg0: float, arg1: Matrix4f) -> Matrix4f: ...

  def rotateXYZ(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4f) -> Matrix4f: ...

  def rotateY(self, arg0: float, arg1: Matrix4f) -> Matrix4f: ...

  def rotateYXZ(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4f) -> Matrix4f: ...

  def rotateZ(self, arg0: float, arg1: Matrix4f) -> Matrix4f: ...

  def rotateZYX(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4f) -> Matrix4f: ...

  @overload
  def scale(self, arg0: float, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def scale(self, arg0: Vector3fc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def scale(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4f) -> Matrix4f: ...

  @overload
  def scaleAround(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4f) -> Matrix4f: ...

  @overload
  def scaleAround(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4f) -> Matrix4f: ...

  @overload
  def scaleAroundLocal(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4f) -> Matrix4f: ...

  @overload
  def scaleAroundLocal(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4f) -> Matrix4f: ...

  @overload
  def scaleLocal(self, arg0: float, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def scaleLocal(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4f) -> Matrix4f: ...

  def scaleXY(self, arg0: float, arg1: float, arg2: Matrix4f) -> Matrix4f: ...

  @overload
  def shadow(self, arg0: Vector4f, arg1: Matrix4fc, arg2: Matrix4f) -> Matrix4f: ...

  @overload
  def shadow(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4fc, arg5: Matrix4f) -> Matrix4f: ...

  @overload
  def shadow(self, arg0: Vector4f, arg1: float, arg2: float, arg3: float, arg4: float, arg5: Matrix4f) -> Matrix4f: ...

  @overload
  def shadow(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: Matrix4f) -> Matrix4f: ...

  def sub(self, arg0: Matrix4fc, arg1: Matrix4f) -> Matrix4f: ...

  def sub4x3(self, arg0: Matrix4fc, arg1: Matrix4f) -> Matrix4f: ...

  def testAab(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> bool: ...

  def testPoint(self, arg0: float, arg1: float, arg2: float) -> bool: ...

  def testSphere(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool: ...

  @overload
  def transform(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transform(self, arg0: Vector4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def transform(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Vector4f) -> Vector4f: ...

  @overload
  def transformAab(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Vector3f, arg3: Vector3f) -> Matrix4f: ...

  @overload
  def transformAab(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Vector3f, arg7: Vector3f) -> Matrix4f: ...

  @overload
  def transformAffine(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transformAffine(self, arg0: Vector4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def transformAffine(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Vector4f) -> Vector4f: ...

  @overload
  def transformDirection(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformDirection(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def transformDirection(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  @overload
  def transformPosition(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformPosition(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def transformPosition(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  @overload
  def transformProject(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformProject(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transformProject(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def transformProject(self, arg0: Vector4fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def transformProject(self, arg0: Vector4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def transformProject(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  @overload
  def transformProject(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Vector3f) -> Vector3f: ...

  @overload
  def transformProject(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Vector4f) -> Vector4f: ...

  @overload
  def transformTranspose(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transformTranspose(self, arg0: Vector4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def transformTranspose(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Vector4f) -> Vector4f: ...

  @overload
  def translate(self, arg0: Vector3fc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def translate(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4f) -> Matrix4f: ...

  @overload
  def translateLocal(self, arg0: Vector3fc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def translateLocal(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4f) -> Matrix4f: ...

  def transpose(self, arg0: Matrix4f) -> Matrix4f: ...

  @overload
  def transpose3x3(self, arg0: Matrix3f) -> Matrix3f: ...

  @overload
  def transpose3x3(self, arg0: Matrix4f) -> Matrix4f: ...

  @overload
  def unproject(self, arg0: Vector3fc, arg1: list[int], arg2: Vector3f) -> Vector3f: ...

  @overload
  def unproject(self, arg0: Vector3fc, arg1: list[int], arg2: Vector4f) -> Vector4f: ...

  @overload
  def unproject(self, arg0: float, arg1: float, arg2: float, arg3: list[int], arg4: Vector3f) -> Vector3f: ...

  @overload
  def unproject(self, arg0: float, arg1: float, arg2: float, arg3: list[int], arg4: Vector4f) -> Vector4f: ...

  @overload
  def unprojectInv(self, arg0: Vector3fc, arg1: list[int], arg2: Vector3f) -> Vector3f: ...

  @overload
  def unprojectInv(self, arg0: Vector3fc, arg1: list[int], arg2: Vector4f) -> Vector4f: ...

  @overload
  def unprojectInv(self, arg0: float, arg1: float, arg2: float, arg3: list[int], arg4: Vector3f) -> Vector3f: ...

  @overload
  def unprojectInv(self, arg0: float, arg1: float, arg2: float, arg3: list[int], arg4: Vector4f) -> Vector4f: ...

  @overload
  def unprojectInvRay(self, arg0: Vector2fc, arg1: list[int], arg2: Vector3f, arg3: Vector3f) -> Matrix4f: ...

  @overload
  def unprojectInvRay(self, arg0: float, arg1: float, arg2: list[int], arg3: Vector3f, arg4: Vector3f) -> Matrix4f: ...

  @overload
  def unprojectRay(self, arg0: Vector2fc, arg1: list[int], arg2: Vector3f, arg3: Vector3f) -> Matrix4f: ...

  @overload
  def unprojectRay(self, arg0: float, arg1: float, arg2: list[int], arg3: Vector3f, arg4: Vector3f) -> Matrix4f: ...

  @overload
  def withLookAtUp(self, arg0: Vector3fc, arg1: Matrix4f) -> Matrix4f: ...

  @overload
  def withLookAtUp(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4f) -> Matrix4f: ...


class Matrix4x3d:

  PLANE_NX: int

  PLANE_NY: int

  PLANE_NZ: int

  PLANE_PX: int

  PLANE_PY: int

  PLANE_PZ: int

  PROPERTY_IDENTITY: int

  PROPERTY_ORTHONORMAL: int

  PROPERTY_TRANSLATION: int

  @overload
  def add(self, arg0: Matrix4x3dc) -> Matrix4x3d: ...

  @overload
  def add(self, arg0: Matrix4x3fc) -> Matrix4x3d: ...

  @overload
  def add(self, arg0: Matrix4x3dc, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def add(self, arg0: Matrix4x3dc, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def add(self, arg0: Matrix4x3fc, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def add(self, arg0: Matrix4x3fc, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def arcball(self, arg0: float, arg1: Vector3dc, arg2: float, arg3: float) -> Matrix4x3d: ...

  @overload
  def arcball(self, arg0: float, arg1: Vector3dc, arg2: float, arg3: float, arg4: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def arcball(self, arg0: float, arg1: Vector3dc, arg2: float, arg3: float, arg4: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def arcball(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix4x3d: ...

  @overload
  def arcball(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def arcball(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4x3d) -> Matrix4x3d: ...

  def assume(self, arg0: int) -> Matrix4x3d: ...

  def billboardCylindrical(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Vector3dc) -> Matrix4x3d: ...

  @overload
  def billboardSpherical(self, arg0: Vector3dc, arg1: Vector3dc) -> Matrix4x3d: ...

  @overload
  def billboardSpherical(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Vector3dc) -> Matrix4x3d: ...

  @overload
  def cofactor3x3(self) -> Matrix4x3d: ...

  @overload
  def cofactor3x3(self, arg0: Matrix3d) -> Matrix3d: ...

  @overload
  def cofactor3x3(self, arg0: Matrix3d) -> Matrix3d: ...

  @overload
  def cofactor3x3(self, arg0: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def cofactor3x3(self, arg0: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def determinant(self) -> float: ...

  @overload
  def determinant(self) -> float: ...

  def determineProperties(self) -> Matrix4x3d: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def equals(self, arg0: Matrix4x3dc, arg1: float) -> bool: ...

  @overload
  def equals(self, arg0: Matrix4x3dc, arg1: float) -> bool: ...

  @overload
  def fma(self, arg0: Matrix4x3dc, arg1: float) -> Matrix4x3d: ...

  @overload
  def fma(self, arg0: Matrix4x3fc, arg1: float) -> Matrix4x3d: ...

  @overload
  def fma(self, arg0: Matrix4x3dc, arg1: float, arg2: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def fma(self, arg0: Matrix4x3dc, arg1: float, arg2: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def fma(self, arg0: Matrix4x3fc, arg1: float, arg2: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def fma(self, arg0: Matrix4x3fc, arg1: float, arg2: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def frustumPlane(self, arg0: int, arg1: Vector4d) -> Vector4d: ...

  @overload
  def frustumPlane(self, arg0: int, arg1: Vector4d) -> Vector4d: ...

  @overload
  def get(self, arg0: list[float]) -> list[float]: ...

  @overload
  def get(self, arg0: list[float]) -> list[float]: ...

  @overload
  def get(self, arg0: list[float]) -> list[float]: ...

  @overload
  def get(self, arg0: list[float]) -> list[float]: ...

  @overload
  def get(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def get(self, arg0: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def get(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get(self, arg0: Matrix4d) -> Matrix4d: ...

  @overload
  def get(self, arg0: Matrix4d) -> Matrix4d: ...

  @overload
  def get(self, arg0: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def get(self, arg0: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def get(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def get(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def get(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def get(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def get(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: int, arg1: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def get(self, arg0: int, arg1: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def get(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get4x4(self, arg0: list[float]) -> list[float]: ...

  @overload
  def get4x4(self, arg0: list[float]) -> list[float]: ...

  @overload
  def get4x4(self, arg0: list[float]) -> list[float]: ...

  @overload
  def get4x4(self, arg0: list[float]) -> list[float]: ...

  @overload
  def get4x4(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get4x4(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get4x4(self, arg0: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def get4x4(self, arg0: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def get4x4(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def get4x4(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def get4x4(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def get4x4(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def get4x4(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get4x4(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get4x4(self, arg0: int, arg1: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def get4x4(self, arg0: int, arg1: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def getColumn(self, arg0: int, arg1: Vector3d) -> Vector3d: ...

  @overload
  def getColumn(self, arg0: int, arg1: Vector3d) -> Vector3d: ...

  @overload
  def getEulerAnglesZYX(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def getEulerAnglesZYX(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def getFloats(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getFloats(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getFloats(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getFloats(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getNormalizedRotation(self, arg0: Quaterniond) -> Quaterniond: ...

  @overload
  def getNormalizedRotation(self, arg0: Quaterniond) -> Quaterniond: ...

  @overload
  def getNormalizedRotation(self, arg0: Quaternionf) -> Quaternionf: ...

  @overload
  def getNormalizedRotation(self, arg0: Quaternionf) -> Quaternionf: ...

  @overload
  def getRow(self, arg0: int, arg1: Vector4d) -> Vector4d: ...

  @overload
  def getRow(self, arg0: int, arg1: Vector4d) -> Vector4d: ...

  @overload
  def getScale(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def getScale(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def getToAddress(self, arg0: int) -> Matrix4x3dc: ...

  @overload
  def getToAddress(self, arg0: int) -> Matrix4x3dc: ...

  @overload
  def getTranslation(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def getTranslation(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def getTransposed(self, arg0: list[float]) -> list[float]: ...

  @overload
  def getTransposed(self, arg0: list[float]) -> list[float]: ...

  @overload
  def getTransposed(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getTransposed(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getTransposed(self, arg0: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def getTransposed(self, arg0: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def getTransposed(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def getTransposed(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def getTransposed(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def getTransposed(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def getTransposed(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getTransposed(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getTransposed(self, arg0: int, arg1: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def getTransposed(self, arg0: int, arg1: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def getTransposed(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def getTransposed(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def getTransposedFloats(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getTransposedFloats(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getTransposedFloats(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getTransposedFloats(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getUnnormalizedRotation(self, arg0: Quaterniond) -> Quaterniond: ...

  @overload
  def getUnnormalizedRotation(self, arg0: Quaterniond) -> Quaterniond: ...

  @overload
  def getUnnormalizedRotation(self, arg0: Quaternionf) -> Quaternionf: ...

  @overload
  def getUnnormalizedRotation(self, arg0: Quaternionf) -> Quaternionf: ...

  def hashCode(self) -> int: ...

  def identity(self) -> Matrix4x3d: ...

  @overload
  def invert(self) -> Matrix4x3d: ...

  @overload
  def invert(self, arg0: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def invert(self, arg0: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def invertOrtho(self) -> Matrix4x3d: ...

  @overload
  def invertOrtho(self, arg0: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def invertOrtho(self, arg0: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def isFinite(self) -> bool: ...

  @overload
  def isFinite(self) -> bool: ...

  @overload
  def lerp(self, arg0: Matrix4x3dc, arg1: float) -> Matrix4x3d: ...

  @overload
  def lerp(self, arg0: Matrix4x3dc, arg1: float, arg2: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def lerp(self, arg0: Matrix4x3dc, arg1: float, arg2: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def lookAlong(self, arg0: Vector3dc, arg1: Vector3dc) -> Matrix4x3d: ...

  @overload
  def lookAlong(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def lookAlong(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def lookAlong(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix4x3d: ...

  @overload
  def lookAlong(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def lookAlong(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def lookAt(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Vector3dc) -> Matrix4x3d: ...

  @overload
  def lookAt(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Vector3dc, arg3: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def lookAt(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Vector3dc, arg3: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def lookAt(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float) -> Matrix4x3d: ...

  @overload
  def lookAt(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def lookAt(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def lookAtLH(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Vector3dc) -> Matrix4x3d: ...

  @overload
  def lookAtLH(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Vector3dc, arg3: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def lookAtLH(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Vector3dc, arg3: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def lookAtLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float) -> Matrix4x3d: ...

  @overload
  def lookAtLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def lookAtLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def m00(self) -> float: ...

  @overload
  def m00(self) -> float: ...

  @overload
  def m00(self, arg0: float) -> Matrix4x3d: ...

  @overload
  def m01(self) -> float: ...

  @overload
  def m01(self) -> float: ...

  @overload
  def m01(self, arg0: float) -> Matrix4x3d: ...

  @overload
  def m02(self) -> float: ...

  @overload
  def m02(self) -> float: ...

  @overload
  def m02(self, arg0: float) -> Matrix4x3d: ...

  @overload
  def m10(self) -> float: ...

  @overload
  def m10(self) -> float: ...

  @overload
  def m10(self, arg0: float) -> Matrix4x3d: ...

  @overload
  def m11(self) -> float: ...

  @overload
  def m11(self) -> float: ...

  @overload
  def m11(self, arg0: float) -> Matrix4x3d: ...

  @overload
  def m12(self) -> float: ...

  @overload
  def m12(self) -> float: ...

  @overload
  def m12(self, arg0: float) -> Matrix4x3d: ...

  @overload
  def m20(self) -> float: ...

  @overload
  def m20(self) -> float: ...

  @overload
  def m20(self, arg0: float) -> Matrix4x3d: ...

  @overload
  def m21(self) -> float: ...

  @overload
  def m21(self) -> float: ...

  @overload
  def m21(self, arg0: float) -> Matrix4x3d: ...

  @overload
  def m22(self) -> float: ...

  @overload
  def m22(self) -> float: ...

  @overload
  def m22(self, arg0: float) -> Matrix4x3d: ...

  @overload
  def m30(self) -> float: ...

  @overload
  def m30(self) -> float: ...

  @overload
  def m30(self, arg0: float) -> Matrix4x3d: ...

  @overload
  def m31(self) -> float: ...

  @overload
  def m31(self) -> float: ...

  @overload
  def m31(self, arg0: float) -> Matrix4x3d: ...

  @overload
  def m32(self) -> float: ...

  @overload
  def m32(self) -> float: ...

  @overload
  def m32(self, arg0: float) -> Matrix4x3d: ...

  @overload
  def mul(self, arg0: Matrix4x3dc) -> Matrix4x3d: ...

  @overload
  def mul(self, arg0: Matrix4x3fc) -> Matrix4x3d: ...

  @overload
  def mul(self, arg0: Matrix4x3dc, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def mul(self, arg0: Matrix4x3dc, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def mul(self, arg0: Matrix4x3fc, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def mul(self, arg0: Matrix4x3fc, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def mulComponentWise(self, arg0: Matrix4x3dc) -> Matrix4x3d: ...

  @overload
  def mulComponentWise(self, arg0: Matrix4x3dc, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def mulComponentWise(self, arg0: Matrix4x3dc, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def mulOrtho(self, arg0: Matrix4x3dc) -> Matrix4x3d: ...

  @overload
  def mulOrtho(self, arg0: Matrix4x3dc, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def mulOrtho(self, arg0: Matrix4x3dc, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def mulTranslation(self, arg0: Matrix4x3dc, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def mulTranslation(self, arg0: Matrix4x3dc, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def mulTranslation(self, arg0: Matrix4x3fc, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def mulTranslation(self, arg0: Matrix4x3fc, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def normal(self) -> Matrix4x3d: ...

  @overload
  def normal(self, arg0: Matrix3d) -> Matrix3d: ...

  @overload
  def normal(self, arg0: Matrix3d) -> Matrix3d: ...

  @overload
  def normal(self, arg0: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def normal(self, arg0: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def normalize3x3(self) -> Matrix4x3d: ...

  @overload
  def normalize3x3(self, arg0: Matrix3d) -> Matrix3d: ...

  @overload
  def normalize3x3(self, arg0: Matrix3d) -> Matrix3d: ...

  @overload
  def normalize3x3(self, arg0: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def normalize3x3(self, arg0: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def normalizedPositiveX(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def normalizedPositiveX(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def normalizedPositiveY(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def normalizedPositiveY(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def normalizedPositiveZ(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def normalizedPositiveZ(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def obliqueZ(self, arg0: float, arg1: float) -> Matrix4x3d: ...

  @overload
  def obliqueZ(self, arg0: float, arg1: float, arg2: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def obliqueZ(self, arg0: float, arg1: float, arg2: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def origin(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def origin(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def ortho(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix4x3d: ...

  @overload
  def ortho(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool) -> Matrix4x3d: ...

  @overload
  def ortho(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def ortho(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def ortho(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool, arg7: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def ortho(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool, arg7: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def ortho2D(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4x3d: ...

  @overload
  def ortho2D(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def ortho2D(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def ortho2DLH(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4x3d: ...

  @overload
  def ortho2DLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def ortho2DLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def orthoLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix4x3d: ...

  @overload
  def orthoLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool) -> Matrix4x3d: ...

  @overload
  def orthoLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def orthoLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def orthoLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool, arg7: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def orthoLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool, arg7: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def orthoSymmetric(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4x3d: ...

  @overload
  def orthoSymmetric(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool) -> Matrix4x3d: ...

  @overload
  def orthoSymmetric(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def orthoSymmetric(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def orthoSymmetric(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool, arg5: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def orthoSymmetric(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool, arg5: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def orthoSymmetricLH(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4x3d: ...

  @overload
  def orthoSymmetricLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool) -> Matrix4x3d: ...

  @overload
  def orthoSymmetricLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def orthoSymmetricLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def orthoSymmetricLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool, arg5: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def orthoSymmetricLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool, arg5: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def pick(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: list[int]) -> Matrix4x3d: ...

  @overload
  def pick(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: list[int], arg5: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def pick(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: list[int], arg5: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def positiveX(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def positiveX(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def positiveY(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def positiveY(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def positiveZ(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def positiveZ(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def properties(self) -> int: ...

  @overload
  def properties(self) -> int: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def reflect(self, arg0: Quaterniondc, arg1: Vector3dc) -> Matrix4x3d: ...

  @overload
  def reflect(self, arg0: Vector3dc, arg1: Vector3dc) -> Matrix4x3d: ...

  @overload
  def reflect(self, arg0: Quaterniondc, arg1: Vector3dc, arg2: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def reflect(self, arg0: Quaterniondc, arg1: Vector3dc, arg2: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def reflect(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def reflect(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def reflect(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4x3d: ...

  @overload
  def reflect(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def reflect(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def reflect(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix4x3d: ...

  @overload
  def reflect(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def reflect(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def reflection(self, arg0: Quaterniondc, arg1: Vector3dc) -> Matrix4x3d: ...

  @overload
  def reflection(self, arg0: Vector3dc, arg1: Vector3dc) -> Matrix4x3d: ...

  @overload
  def reflection(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4x3d: ...

  @overload
  def reflection(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix4x3d: ...

  @overload
  def rotate(self, arg0: AxisAngle4d) -> Matrix4x3d: ...

  @overload
  def rotate(self, arg0: AxisAngle4f) -> Matrix4x3d: ...

  @overload
  def rotate(self, arg0: Quaterniondc) -> Matrix4x3d: ...

  @overload
  def rotate(self, arg0: Quaternionfc) -> Matrix4x3d: ...

  @overload
  def rotate(self, arg0: float, arg1: Vector3dc) -> Matrix4x3d: ...

  @overload
  def rotate(self, arg0: float, arg1: Vector3fc) -> Matrix4x3d: ...

  @overload
  def rotate(self, arg0: AxisAngle4d, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def rotate(self, arg0: AxisAngle4d, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def rotate(self, arg0: AxisAngle4f, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def rotate(self, arg0: AxisAngle4f, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def rotate(self, arg0: Quaterniondc, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def rotate(self, arg0: Quaterniondc, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def rotate(self, arg0: Quaternionfc, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def rotate(self, arg0: Quaternionfc, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def rotate(self, arg0: float, arg1: Vector3dc, arg2: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def rotate(self, arg0: float, arg1: Vector3dc, arg2: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def rotate(self, arg0: float, arg1: Vector3fc, arg2: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def rotate(self, arg0: float, arg1: Vector3fc, arg2: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def rotate(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4x3d: ...

  @overload
  def rotate(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def rotate(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def rotateAround(self, arg0: Quaterniondc, arg1: float, arg2: float, arg3: float) -> Matrix4x3d: ...

  @overload
  def rotateAround(self, arg0: Quaterniondc, arg1: float, arg2: float, arg3: float, arg4: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def rotateAround(self, arg0: Quaterniondc, arg1: float, arg2: float, arg3: float, arg4: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def rotateLocal(self, arg0: Quaterniondc) -> Matrix4x3d: ...

  @overload
  def rotateLocal(self, arg0: Quaternionfc) -> Matrix4x3d: ...

  @overload
  def rotateLocal(self, arg0: Quaterniondc, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def rotateLocal(self, arg0: Quaterniondc, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def rotateLocal(self, arg0: Quaternionfc, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def rotateLocal(self, arg0: Quaternionfc, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def rotateLocal(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4x3d: ...

  @overload
  def rotateLocal(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def rotateLocal(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def rotateLocalX(self, arg0: float) -> Matrix4x3d: ...

  @overload
  def rotateLocalX(self, arg0: float, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def rotateLocalY(self, arg0: float) -> Matrix4x3d: ...

  @overload
  def rotateLocalY(self, arg0: float, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def rotateLocalZ(self, arg0: float) -> Matrix4x3d: ...

  @overload
  def rotateLocalZ(self, arg0: float, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def rotateTowards(self, arg0: Vector3dc, arg1: Vector3dc) -> Matrix4x3d: ...

  @overload
  def rotateTowards(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def rotateTowards(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def rotateTowards(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix4x3d: ...

  @overload
  def rotateTowards(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def rotateTowards(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def rotateTranslation(self, arg0: Quaterniondc, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def rotateTranslation(self, arg0: Quaterniondc, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def rotateTranslation(self, arg0: Quaternionfc, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def rotateTranslation(self, arg0: Quaternionfc, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def rotateTranslation(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def rotateTranslation(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def rotateX(self, arg0: float) -> Matrix4x3d: ...

  @overload
  def rotateX(self, arg0: float, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def rotateX(self, arg0: float, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def rotateXYZ(self, arg0: Vector3d) -> Matrix4x3d: ...

  @overload
  def rotateXYZ(self, arg0: float, arg1: float, arg2: float) -> Matrix4x3d: ...

  @overload
  def rotateXYZ(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def rotateXYZ(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def rotateY(self, arg0: float) -> Matrix4x3d: ...

  @overload
  def rotateY(self, arg0: float, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def rotateY(self, arg0: float, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def rotateYXZ(self, arg0: Vector3d) -> Matrix4x3d: ...

  @overload
  def rotateYXZ(self, arg0: float, arg1: float, arg2: float) -> Matrix4x3d: ...

  @overload
  def rotateYXZ(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def rotateYXZ(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def rotateZ(self, arg0: float) -> Matrix4x3d: ...

  @overload
  def rotateZ(self, arg0: float, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def rotateZ(self, arg0: float, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def rotateZYX(self, arg0: Vector3d) -> Matrix4x3d: ...

  @overload
  def rotateZYX(self, arg0: float, arg1: float, arg2: float) -> Matrix4x3d: ...

  @overload
  def rotateZYX(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def rotateZYX(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def rotation(self, arg0: AxisAngle4d) -> Matrix4x3d: ...

  @overload
  def rotation(self, arg0: AxisAngle4f) -> Matrix4x3d: ...

  @overload
  def rotation(self, arg0: Quaterniondc) -> Matrix4x3d: ...

  @overload
  def rotation(self, arg0: Quaternionfc) -> Matrix4x3d: ...

  @overload
  def rotation(self, arg0: float, arg1: Vector3dc) -> Matrix4x3d: ...

  @overload
  def rotation(self, arg0: float, arg1: Vector3fc) -> Matrix4x3d: ...

  @overload
  def rotation(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4x3d: ...

  def rotationAround(self, arg0: Quaterniondc, arg1: float, arg2: float, arg3: float) -> Matrix4x3d: ...

  @overload
  def rotationTowards(self, arg0: Vector3dc, arg1: Vector3dc) -> Matrix4x3d: ...

  @overload
  def rotationTowards(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix4x3d: ...

  def rotationX(self, arg0: float) -> Matrix4x3d: ...

  def rotationXYZ(self, arg0: float, arg1: float, arg2: float) -> Matrix4x3d: ...

  def rotationY(self, arg0: float) -> Matrix4x3d: ...

  def rotationYXZ(self, arg0: float, arg1: float, arg2: float) -> Matrix4x3d: ...

  def rotationZ(self, arg0: float) -> Matrix4x3d: ...

  def rotationZYX(self, arg0: float, arg1: float, arg2: float) -> Matrix4x3d: ...

  @overload
  def scale(self, arg0: float) -> Matrix4x3d: ...

  @overload
  def scale(self, arg0: Vector3dc) -> Matrix4x3d: ...

  @overload
  def scale(self, arg0: float, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def scale(self, arg0: float, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def scale(self, arg0: Vector3dc, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def scale(self, arg0: Vector3dc, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def scale(self, arg0: float, arg1: float, arg2: float) -> Matrix4x3d: ...

  @overload
  def scale(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def scale(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def scaleLocal(self, arg0: float, arg1: float, arg2: float) -> Matrix4x3d: ...

  @overload
  def scaleLocal(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def scaleLocal(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def scaleXY(self, arg0: float, arg1: float) -> Matrix4x3d: ...

  @overload
  def scaleXY(self, arg0: float, arg1: float, arg2: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def scaleXY(self, arg0: float, arg1: float, arg2: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def scaling(self, arg0: float) -> Matrix4x3d: ...

  @overload
  def scaling(self, arg0: Vector3dc) -> Matrix4x3d: ...

  @overload
  def scaling(self, arg0: float, arg1: float, arg2: float) -> Matrix4x3d: ...

  @overload
  def set(self, arg0: list[float]) -> Matrix4x3d: ...

  @overload
  def set(self, arg0: list[float]) -> Matrix4x3d: ...

  @overload
  def set(self, arg0: ByteBuffer) -> Matrix4x3d: ...

  @overload
  def set(self, arg0: DoubleBuffer) -> Matrix4x3d: ...

  @overload
  def set(self, arg0: FloatBuffer) -> Matrix4x3d: ...

  @overload
  def set(self, arg0: AxisAngle4d) -> Matrix4x3d: ...

  @overload
  def set(self, arg0: AxisAngle4f) -> Matrix4x3d: ...

  @overload
  def set(self, arg0: Matrix3dc) -> Matrix4x3d: ...

  @overload
  def set(self, arg0: Matrix3fc) -> Matrix4x3d: ...

  @overload
  def set(self, arg0: Matrix4dc) -> Matrix4x3d: ...

  @overload
  def set(self, arg0: Matrix4x3dc) -> Matrix4x3d: ...

  @overload
  def set(self, arg0: Matrix4x3fc) -> Matrix4x3d: ...

  @overload
  def set(self, arg0: Quaterniondc) -> Matrix4x3d: ...

  @overload
  def set(self, arg0: Quaternionfc) -> Matrix4x3d: ...

  @overload
  def set(self, arg0: list[float], arg1: int) -> Matrix4x3d: ...

  @overload
  def set(self, arg0: list[float], arg1: int) -> Matrix4x3d: ...

  @overload
  def set(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Vector3dc, arg3: Vector3dc) -> Matrix4x3d: ...

  @overload
  def set(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float, arg10: float, arg11: float) -> Matrix4x3d: ...

  @overload
  def set3x3(self, arg0: Matrix3dc) -> Matrix4x3d: ...

  @overload
  def set3x3(self, arg0: Matrix3fc) -> Matrix4x3d: ...

  @overload
  def set3x3(self, arg0: Matrix4x3dc) -> Matrix4x3d: ...

  def setColumn(self, arg0: int, arg1: Vector3dc) -> Matrix4x3d: ...

  def setFloats(self, arg0: ByteBuffer) -> Matrix4x3d: ...

  def setFromAddress(self, arg0: int) -> Matrix4x3d: ...

  @overload
  def setLookAlong(self, arg0: Vector3dc, arg1: Vector3dc) -> Matrix4x3d: ...

  @overload
  def setLookAlong(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix4x3d: ...

  @overload
  def setLookAt(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Vector3dc) -> Matrix4x3d: ...

  @overload
  def setLookAt(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float) -> Matrix4x3d: ...

  @overload
  def setLookAtLH(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Vector3dc) -> Matrix4x3d: ...

  @overload
  def setLookAtLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float) -> Matrix4x3d: ...

  @overload
  def setOrtho(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix4x3d: ...

  @overload
  def setOrtho(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool) -> Matrix4x3d: ...

  def setOrtho2D(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4x3d: ...

  def setOrtho2DLH(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4x3d: ...

  @overload
  def setOrthoLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix4x3d: ...

  @overload
  def setOrthoLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool) -> Matrix4x3d: ...

  @overload
  def setOrthoSymmetric(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4x3d: ...

  @overload
  def setOrthoSymmetric(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool) -> Matrix4x3d: ...

  @overload
  def setOrthoSymmetricLH(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4x3d: ...

  @overload
  def setOrthoSymmetricLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool) -> Matrix4x3d: ...

  def setRotationXYZ(self, arg0: float, arg1: float, arg2: float) -> Matrix4x3d: ...

  def setRotationYXZ(self, arg0: float, arg1: float, arg2: float) -> Matrix4x3d: ...

  def setRotationZYX(self, arg0: float, arg1: float, arg2: float) -> Matrix4x3d: ...

  def setRow(self, arg0: int, arg1: Vector4dc) -> Matrix4x3d: ...

  @overload
  def setTranslation(self, arg0: Vector3dc) -> Matrix4x3d: ...

  @overload
  def setTranslation(self, arg0: float, arg1: float, arg2: float) -> Matrix4x3d: ...

  @overload
  def shadow(self, arg0: Vector4dc, arg1: Matrix4x3dc) -> Matrix4x3d: ...

  @overload
  def shadow(self, arg0: Vector4dc, arg1: Matrix4x3dc, arg2: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def shadow(self, arg0: Vector4dc, arg1: Matrix4x3dc, arg2: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def shadow(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4x3dc) -> Matrix4x3d: ...

  @overload
  def shadow(self, arg0: Vector4dc, arg1: float, arg2: float, arg3: float, arg4: float) -> Matrix4x3d: ...

  @overload
  def shadow(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4x3dc, arg5: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def shadow(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4x3dc, arg5: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def shadow(self, arg0: Vector4dc, arg1: float, arg2: float, arg3: float, arg4: float, arg5: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def shadow(self, arg0: Vector4dc, arg1: float, arg2: float, arg3: float, arg4: float, arg5: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def shadow(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float) -> Matrix4x3d: ...

  @overload
  def shadow(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def shadow(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def sub(self, arg0: Matrix4x3dc) -> Matrix4x3d: ...

  @overload
  def sub(self, arg0: Matrix4x3fc) -> Matrix4x3d: ...

  @overload
  def sub(self, arg0: Matrix4x3dc, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def sub(self, arg0: Matrix4x3dc, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def sub(self, arg0: Matrix4x3fc, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def sub(self, arg0: Matrix4x3fc, arg1: Matrix4x3d) -> Matrix4x3d: ...

  def swap(self, arg0: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def toString(self) -> str: ...

  @overload
  def toString(self, arg0: NumberFormat) -> str: ...

  @overload
  def transform(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transform(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transform(self, arg0: Vector4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def transform(self, arg0: Vector4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def transformAab(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Vector3d, arg3: Vector3d) -> Matrix4x3d: ...

  @overload
  def transformAab(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Vector3d, arg3: Vector3d) -> Matrix4x3d: ...

  @overload
  def transformAab(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Vector3d, arg7: Vector3d) -> Matrix4x3d: ...

  @overload
  def transformAab(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Vector3d, arg7: Vector3d) -> Matrix4x3d: ...

  @overload
  def transformDirection(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformDirection(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformDirection(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def transformDirection(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def transformPosition(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformPosition(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformPosition(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def transformPosition(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def translate(self, arg0: Vector3dc) -> Matrix4x3d: ...

  @overload
  def translate(self, arg0: Vector3fc) -> Matrix4x3d: ...

  @overload
  def translate(self, arg0: Vector3dc, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def translate(self, arg0: Vector3dc, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def translate(self, arg0: Vector3fc, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def translate(self, arg0: Vector3fc, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def translate(self, arg0: float, arg1: float, arg2: float) -> Matrix4x3d: ...

  @overload
  def translate(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def translate(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def translateLocal(self, arg0: Vector3dc) -> Matrix4x3d: ...

  @overload
  def translateLocal(self, arg0: Vector3fc) -> Matrix4x3d: ...

  @overload
  def translateLocal(self, arg0: Vector3dc, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def translateLocal(self, arg0: Vector3dc, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def translateLocal(self, arg0: Vector3fc, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def translateLocal(self, arg0: Vector3fc, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def translateLocal(self, arg0: float, arg1: float, arg2: float) -> Matrix4x3d: ...

  @overload
  def translateLocal(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def translateLocal(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def translation(self, arg0: Vector3dc) -> Matrix4x3d: ...

  @overload
  def translation(self, arg0: Vector3fc) -> Matrix4x3d: ...

  @overload
  def translation(self, arg0: float, arg1: float, arg2: float) -> Matrix4x3d: ...

  def translationRotate(self, arg0: float, arg1: float, arg2: float, arg3: Quaterniondc) -> Matrix4x3d: ...

  @overload
  def translationRotateMul(self, arg0: float, arg1: float, arg2: float, arg3: Quaternionfc, arg4: Matrix4x3dc) -> Matrix4x3d: ...

  @overload
  def translationRotateMul(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: Matrix4x3dc) -> Matrix4x3d: ...

  @overload
  def translationRotateScale(self, arg0: Vector3dc, arg1: Quaterniondc, arg2: Vector3dc) -> Matrix4x3d: ...

  @overload
  def translationRotateScale(self, arg0: Vector3fc, arg1: Quaternionfc, arg2: Vector3fc) -> Matrix4x3d: ...

  @overload
  def translationRotateScale(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float) -> Matrix4x3d: ...

  @overload
  def translationRotateScaleMul(self, arg0: Vector3dc, arg1: Quaterniondc, arg2: Vector3dc, arg3: Matrix4x3dc) -> Matrix4x3d: ...

  @overload
  def translationRotateScaleMul(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float, arg10: Matrix4x3dc) -> Matrix4x3d: ...

  @overload
  def translationRotateTowards(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Vector3dc) -> Matrix4x3d: ...

  @overload
  def translationRotateTowards(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float) -> Matrix4x3d: ...

  @overload
  def transpose3x3(self) -> Matrix4x3d: ...

  @overload
  def transpose3x3(self, arg0: Matrix3d) -> Matrix3d: ...

  @overload
  def transpose3x3(self, arg0: Matrix3d) -> Matrix3d: ...

  @overload
  def transpose3x3(self, arg0: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def transpose3x3(self, arg0: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  def zero(self) -> Matrix4x3d: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: DoubleBuffer): ...
  @overload
  def __init__(self, arg0: Matrix3dc): ...
  @overload
  def __init__(self, arg0: Matrix3fc): ...
  @overload
  def __init__(self, arg0: Matrix4x3dc): ...
  @overload
  def __init__(self, arg0: Matrix4x3fc): ...
  @overload
  def __init__(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float, arg10: float, arg11: float): ...


class Matrix4x3dStack(Matrix4x3d):

  def clear(self) -> Matrix4x3dStack: ...

  def equals(self, arg0: object) -> bool: ...

  def hashCode(self) -> int: ...

  def popMatrix(self) -> Matrix4x3dStack: ...

  def pushMatrix(self) -> Matrix4x3dStack: ...

  def readExternal(self, arg0: ObjectInput) -> None: ...

  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: int): ...


class Matrix4x3dc:

  PLANE_NX: int

  PLANE_NY: int

  PLANE_NZ: int

  PLANE_PX: int

  PLANE_PY: int

  PLANE_PZ: int

  PROPERTY_IDENTITY: int

  PROPERTY_ORTHONORMAL: int

  PROPERTY_TRANSLATION: int

  @overload
  def add(self, arg0: Matrix4x3dc, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def add(self, arg0: Matrix4x3fc, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def arcball(self, arg0: float, arg1: Vector3dc, arg2: float, arg3: float, arg4: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def arcball(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def cofactor3x3(self, arg0: Matrix3d) -> Matrix3d: ...

  @overload
  def cofactor3x3(self, arg0: Matrix4x3d) -> Matrix4x3d: ...

  def determinant(self) -> float: ...

  def equals(self, arg0: Matrix4x3dc, arg1: float) -> bool: ...

  @overload
  def fma(self, arg0: Matrix4x3dc, arg1: float, arg2: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def fma(self, arg0: Matrix4x3fc, arg1: float, arg2: Matrix4x3d) -> Matrix4x3d: ...

  def frustumPlane(self, arg0: int, arg1: Vector4d) -> Vector4d: ...

  @overload
  def get(self, arg0: list[float]) -> list[float]: ...

  @overload
  def get(self, arg0: list[float]) -> list[float]: ...

  @overload
  def get(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def get(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get(self, arg0: Matrix4d) -> Matrix4d: ...

  @overload
  def get(self, arg0: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def get(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def get(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def get(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: int, arg1: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def get(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get4x4(self, arg0: list[float]) -> list[float]: ...

  @overload
  def get4x4(self, arg0: list[float]) -> list[float]: ...

  @overload
  def get4x4(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get4x4(self, arg0: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def get4x4(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def get4x4(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def get4x4(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get4x4(self, arg0: int, arg1: DoubleBuffer) -> DoubleBuffer: ...

  def getColumn(self, arg0: int, arg1: Vector3d) -> Vector3d: ...

  def getEulerAnglesZYX(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def getFloats(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getFloats(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getNormalizedRotation(self, arg0: Quaterniond) -> Quaterniond: ...

  @overload
  def getNormalizedRotation(self, arg0: Quaternionf) -> Quaternionf: ...

  def getRow(self, arg0: int, arg1: Vector4d) -> Vector4d: ...

  def getScale(self, arg0: Vector3d) -> Vector3d: ...

  def getToAddress(self, arg0: int) -> Matrix4x3dc: ...

  def getTranslation(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def getTransposed(self, arg0: list[float]) -> list[float]: ...

  @overload
  def getTransposed(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getTransposed(self, arg0: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def getTransposed(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def getTransposed(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def getTransposed(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getTransposed(self, arg0: int, arg1: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def getTransposed(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def getTransposedFloats(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getTransposedFloats(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getUnnormalizedRotation(self, arg0: Quaterniond) -> Quaterniond: ...

  @overload
  def getUnnormalizedRotation(self, arg0: Quaternionf) -> Quaternionf: ...

  def invert(self, arg0: Matrix4x3d) -> Matrix4x3d: ...

  def invertOrtho(self, arg0: Matrix4x3d) -> Matrix4x3d: ...

  def isFinite(self) -> bool: ...

  def lerp(self, arg0: Matrix4x3dc, arg1: float, arg2: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def lookAlong(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def lookAlong(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def lookAt(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Vector3dc, arg3: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def lookAt(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def lookAtLH(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Vector3dc, arg3: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def lookAtLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: Matrix4x3d) -> Matrix4x3d: ...

  def m00(self) -> float: ...

  def m01(self) -> float: ...

  def m02(self) -> float: ...

  def m10(self) -> float: ...

  def m11(self) -> float: ...

  def m12(self) -> float: ...

  def m20(self) -> float: ...

  def m21(self) -> float: ...

  def m22(self) -> float: ...

  def m30(self) -> float: ...

  def m31(self) -> float: ...

  def m32(self) -> float: ...

  @overload
  def mul(self, arg0: Matrix4x3dc, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def mul(self, arg0: Matrix4x3fc, arg1: Matrix4x3d) -> Matrix4x3d: ...

  def mulComponentWise(self, arg0: Matrix4x3dc, arg1: Matrix4x3d) -> Matrix4x3d: ...

  def mulOrtho(self, arg0: Matrix4x3dc, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def mulTranslation(self, arg0: Matrix4x3dc, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def mulTranslation(self, arg0: Matrix4x3fc, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def normal(self, arg0: Matrix3d) -> Matrix3d: ...

  @overload
  def normal(self, arg0: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def normalize3x3(self, arg0: Matrix3d) -> Matrix3d: ...

  @overload
  def normalize3x3(self, arg0: Matrix4x3d) -> Matrix4x3d: ...

  def normalizedPositiveX(self, arg0: Vector3d) -> Vector3d: ...

  def normalizedPositiveY(self, arg0: Vector3d) -> Vector3d: ...

  def normalizedPositiveZ(self, arg0: Vector3d) -> Vector3d: ...

  def obliqueZ(self, arg0: float, arg1: float, arg2: Matrix4x3d) -> Matrix4x3d: ...

  def origin(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def ortho(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def ortho(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool, arg7: Matrix4x3d) -> Matrix4x3d: ...

  def ortho2D(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4x3d) -> Matrix4x3d: ...

  def ortho2DLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def orthoLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def orthoLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool, arg7: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def orthoSymmetric(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def orthoSymmetric(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool, arg5: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def orthoSymmetricLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def orthoSymmetricLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool, arg5: Matrix4x3d) -> Matrix4x3d: ...

  def pick(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: list[int], arg5: Matrix4x3d) -> Matrix4x3d: ...

  def positiveX(self, arg0: Vector3d) -> Vector3d: ...

  def positiveY(self, arg0: Vector3d) -> Vector3d: ...

  def positiveZ(self, arg0: Vector3d) -> Vector3d: ...

  def properties(self) -> int: ...

  @overload
  def reflect(self, arg0: Quaterniondc, arg1: Vector3dc, arg2: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def reflect(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def reflect(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def reflect(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def rotate(self, arg0: AxisAngle4d, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def rotate(self, arg0: AxisAngle4f, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def rotate(self, arg0: Quaterniondc, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def rotate(self, arg0: Quaternionfc, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def rotate(self, arg0: float, arg1: Vector3dc, arg2: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def rotate(self, arg0: float, arg1: Vector3fc, arg2: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def rotate(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4x3d) -> Matrix4x3d: ...

  def rotateAround(self, arg0: Quaterniondc, arg1: float, arg2: float, arg3: float, arg4: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def rotateLocal(self, arg0: Quaterniondc, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def rotateLocal(self, arg0: Quaternionfc, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def rotateLocal(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def rotateTowards(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def rotateTowards(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def rotateTranslation(self, arg0: Quaterniondc, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def rotateTranslation(self, arg0: Quaternionfc, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def rotateTranslation(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4x3d) -> Matrix4x3d: ...

  def rotateX(self, arg0: float, arg1: Matrix4x3d) -> Matrix4x3d: ...

  def rotateXYZ(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4x3d) -> Matrix4x3d: ...

  def rotateY(self, arg0: float, arg1: Matrix4x3d) -> Matrix4x3d: ...

  def rotateYXZ(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4x3d) -> Matrix4x3d: ...

  def rotateZ(self, arg0: float, arg1: Matrix4x3d) -> Matrix4x3d: ...

  def rotateZYX(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def scale(self, arg0: float, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def scale(self, arg0: Vector3dc, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def scale(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4x3d) -> Matrix4x3d: ...

  def scaleLocal(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4x3d) -> Matrix4x3d: ...

  def scaleXY(self, arg0: float, arg1: float, arg2: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def shadow(self, arg0: Vector4dc, arg1: Matrix4x3dc, arg2: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def shadow(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4x3dc, arg5: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def shadow(self, arg0: Vector4dc, arg1: float, arg2: float, arg3: float, arg4: float, arg5: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def shadow(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def sub(self, arg0: Matrix4x3dc, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def sub(self, arg0: Matrix4x3fc, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def transform(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transform(self, arg0: Vector4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def transformAab(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Vector3d, arg3: Vector3d) -> Matrix4x3d: ...

  @overload
  def transformAab(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Vector3d, arg7: Vector3d) -> Matrix4x3d: ...

  @overload
  def transformDirection(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformDirection(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def transformPosition(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformPosition(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def translate(self, arg0: Vector3dc, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def translate(self, arg0: Vector3fc, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def translate(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def translateLocal(self, arg0: Vector3dc, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def translateLocal(self, arg0: Vector3fc, arg1: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def translateLocal(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def transpose3x3(self, arg0: Matrix3d) -> Matrix3d: ...

  @overload
  def transpose3x3(self, arg0: Matrix4x3d) -> Matrix4x3d: ...


class Matrix4x3f:

  PLANE_NX: int

  PLANE_NY: int

  PLANE_NZ: int

  PLANE_PX: int

  PLANE_PY: int

  PLANE_PZ: int

  PROPERTY_IDENTITY: int

  PROPERTY_ORTHONORMAL: int

  PROPERTY_TRANSLATION: int

  @overload
  def add(self, arg0: Matrix4x3fc) -> Matrix4x3f: ...

  @overload
  def add(self, arg0: Matrix4x3fc, arg1: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def add(self, arg0: Matrix4x3fc, arg1: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def arcball(self, arg0: float, arg1: Vector3fc, arg2: float, arg3: float) -> Matrix4x3f: ...

  @overload
  def arcball(self, arg0: float, arg1: Vector3fc, arg2: float, arg3: float, arg4: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def arcball(self, arg0: float, arg1: Vector3fc, arg2: float, arg3: float, arg4: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def arcball(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix4x3f: ...

  @overload
  def arcball(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def arcball(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4x3f) -> Matrix4x3f: ...

  def assume(self, arg0: int) -> Matrix4x3f: ...

  def billboardCylindrical(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Vector3fc) -> Matrix4x3f: ...

  @overload
  def billboardSpherical(self, arg0: Vector3fc, arg1: Vector3fc) -> Matrix4x3f: ...

  @overload
  def billboardSpherical(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Vector3fc) -> Matrix4x3f: ...

  @overload
  def cofactor3x3(self) -> Matrix4x3f: ...

  @overload
  def cofactor3x3(self, arg0: Matrix3f) -> Matrix3f: ...

  @overload
  def cofactor3x3(self, arg0: Matrix3f) -> Matrix3f: ...

  @overload
  def cofactor3x3(self, arg0: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def cofactor3x3(self, arg0: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def determinant(self) -> float: ...

  @overload
  def determinant(self) -> float: ...

  def determineProperties(self) -> Matrix4x3f: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def equals(self, arg0: Matrix4x3fc, arg1: float) -> bool: ...

  @overload
  def equals(self, arg0: Matrix4x3fc, arg1: float) -> bool: ...

  @overload
  def fma(self, arg0: Matrix4x3fc, arg1: float) -> Matrix4x3f: ...

  @overload
  def fma(self, arg0: Matrix4x3fc, arg1: float, arg2: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def fma(self, arg0: Matrix4x3fc, arg1: float, arg2: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def frustumPlane(self, arg0: int, arg1: Vector4f) -> Vector4f: ...

  @overload
  def frustumPlane(self, arg0: int, arg1: Vector4f) -> Vector4f: ...

  @overload
  def get(self, arg0: list[float]) -> list[float]: ...

  @overload
  def get(self, arg0: list[float]) -> list[float]: ...

  @overload
  def get(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get(self, arg0: Matrix4d) -> Matrix4d: ...

  @overload
  def get(self, arg0: Matrix4d) -> Matrix4d: ...

  @overload
  def get(self, arg0: Matrix4f) -> Matrix4f: ...

  @overload
  def get(self, arg0: Matrix4f) -> Matrix4f: ...

  @overload
  def get(self, arg0: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def get(self, arg0: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def get(self, arg0: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def get(self, arg0: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def get(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def get(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def get(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get3x4(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get3x4(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get3x4(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get3x4(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get3x4(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get3x4(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get3x4(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get3x4(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get4x4(self, arg0: list[float]) -> list[float]: ...

  @overload
  def get4x4(self, arg0: list[float]) -> list[float]: ...

  @overload
  def get4x4(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get4x4(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get4x4(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get4x4(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get4x4(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def get4x4(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def get4x4(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get4x4(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get4x4(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get4x4(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def getColumn(self, arg0: int, arg1: Vector3f) -> Vector3f: ...

  @overload
  def getColumn(self, arg0: int, arg1: Vector3f) -> Vector3f: ...

  @overload
  def getEulerAnglesZYX(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def getEulerAnglesZYX(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def getNormalizedRotation(self, arg0: Quaterniond) -> Quaterniond: ...

  @overload
  def getNormalizedRotation(self, arg0: Quaterniond) -> Quaterniond: ...

  @overload
  def getNormalizedRotation(self, arg0: Quaternionf) -> Quaternionf: ...

  @overload
  def getNormalizedRotation(self, arg0: Quaternionf) -> Quaternionf: ...

  @overload
  def getRotation(self, arg0: AxisAngle4d) -> AxisAngle4d: ...

  @overload
  def getRotation(self, arg0: AxisAngle4d) -> AxisAngle4d: ...

  @overload
  def getRotation(self, arg0: AxisAngle4f) -> AxisAngle4f: ...

  @overload
  def getRotation(self, arg0: AxisAngle4f) -> AxisAngle4f: ...

  @overload
  def getRow(self, arg0: int, arg1: Vector4f) -> Vector4f: ...

  @overload
  def getRow(self, arg0: int, arg1: Vector4f) -> Vector4f: ...

  @overload
  def getScale(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def getScale(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def getToAddress(self, arg0: int) -> Matrix4x3fc: ...

  @overload
  def getToAddress(self, arg0: int) -> Matrix4x3fc: ...

  @overload
  def getTranslation(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def getTranslation(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def getTransposed(self, arg0: list[float]) -> list[float]: ...

  @overload
  def getTransposed(self, arg0: list[float]) -> list[float]: ...

  @overload
  def getTransposed(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getTransposed(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getTransposed(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def getTransposed(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def getTransposed(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def getTransposed(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def getTransposed(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getTransposed(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getTransposed(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def getTransposed(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def getUnnormalizedRotation(self, arg0: Quaterniond) -> Quaterniond: ...

  @overload
  def getUnnormalizedRotation(self, arg0: Quaterniond) -> Quaterniond: ...

  @overload
  def getUnnormalizedRotation(self, arg0: Quaternionf) -> Quaternionf: ...

  @overload
  def getUnnormalizedRotation(self, arg0: Quaternionf) -> Quaternionf: ...

  def hashCode(self) -> int: ...

  def identity(self) -> Matrix4x3f: ...

  @overload
  def invert(self) -> Matrix4x3f: ...

  @overload
  def invert(self, arg0: Matrix4f) -> Matrix4f: ...

  @overload
  def invert(self, arg0: Matrix4f) -> Matrix4f: ...

  @overload
  def invert(self, arg0: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def invert(self, arg0: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def invertOrtho(self) -> Matrix4x3f: ...

  @overload
  def invertOrtho(self, arg0: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def invertOrtho(self, arg0: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def isFinite(self) -> bool: ...

  @overload
  def isFinite(self) -> bool: ...

  @overload
  def lerp(self, arg0: Matrix4x3fc, arg1: float) -> Matrix4x3f: ...

  @overload
  def lerp(self, arg0: Matrix4x3fc, arg1: float, arg2: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def lerp(self, arg0: Matrix4x3fc, arg1: float, arg2: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def lookAlong(self, arg0: Vector3fc, arg1: Vector3fc) -> Matrix4x3f: ...

  @overload
  def lookAlong(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def lookAlong(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def lookAlong(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix4x3f: ...

  @overload
  def lookAlong(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def lookAlong(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def lookAt(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Vector3fc) -> Matrix4x3f: ...

  @overload
  def lookAt(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Vector3fc, arg3: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def lookAt(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Vector3fc, arg3: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def lookAt(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float) -> Matrix4x3f: ...

  @overload
  def lookAt(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def lookAt(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def lookAtLH(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Vector3fc) -> Matrix4x3f: ...

  @overload
  def lookAtLH(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Vector3fc, arg3: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def lookAtLH(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Vector3fc, arg3: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def lookAtLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float) -> Matrix4x3f: ...

  @overload
  def lookAtLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def lookAtLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def m00(self) -> float: ...

  @overload
  def m00(self) -> float: ...

  @overload
  def m00(self, arg0: float) -> Matrix4x3f: ...

  @overload
  def m01(self) -> float: ...

  @overload
  def m01(self) -> float: ...

  @overload
  def m01(self, arg0: float) -> Matrix4x3f: ...

  @overload
  def m02(self) -> float: ...

  @overload
  def m02(self) -> float: ...

  @overload
  def m02(self, arg0: float) -> Matrix4x3f: ...

  @overload
  def m10(self) -> float: ...

  @overload
  def m10(self) -> float: ...

  @overload
  def m10(self, arg0: float) -> Matrix4x3f: ...

  @overload
  def m11(self) -> float: ...

  @overload
  def m11(self) -> float: ...

  @overload
  def m11(self, arg0: float) -> Matrix4x3f: ...

  @overload
  def m12(self) -> float: ...

  @overload
  def m12(self) -> float: ...

  @overload
  def m12(self, arg0: float) -> Matrix4x3f: ...

  @overload
  def m20(self) -> float: ...

  @overload
  def m20(self) -> float: ...

  @overload
  def m20(self, arg0: float) -> Matrix4x3f: ...

  @overload
  def m21(self) -> float: ...

  @overload
  def m21(self) -> float: ...

  @overload
  def m21(self, arg0: float) -> Matrix4x3f: ...

  @overload
  def m22(self) -> float: ...

  @overload
  def m22(self) -> float: ...

  @overload
  def m22(self, arg0: float) -> Matrix4x3f: ...

  @overload
  def m30(self) -> float: ...

  @overload
  def m30(self) -> float: ...

  @overload
  def m30(self, arg0: float) -> Matrix4x3f: ...

  @overload
  def m31(self) -> float: ...

  @overload
  def m31(self) -> float: ...

  @overload
  def m31(self, arg0: float) -> Matrix4x3f: ...

  @overload
  def m32(self) -> float: ...

  @overload
  def m32(self) -> float: ...

  @overload
  def m32(self, arg0: float) -> Matrix4x3f: ...

  @overload
  def mul(self, arg0: Matrix4x3fc) -> Matrix4x3f: ...

  @overload
  def mul(self, arg0: Matrix4x3fc, arg1: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def mul(self, arg0: Matrix4x3fc, arg1: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def mulComponentWise(self, arg0: Matrix4x3fc) -> Matrix4x3f: ...

  @overload
  def mulComponentWise(self, arg0: Matrix4x3fc, arg1: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def mulComponentWise(self, arg0: Matrix4x3fc, arg1: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def mulOrtho(self, arg0: Matrix4x3fc) -> Matrix4x3f: ...

  @overload
  def mulOrtho(self, arg0: Matrix4x3fc, arg1: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def mulOrtho(self, arg0: Matrix4x3fc, arg1: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def mulTranslation(self, arg0: Matrix4x3fc, arg1: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def mulTranslation(self, arg0: Matrix4x3fc, arg1: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def normal(self) -> Matrix4x3f: ...

  @overload
  def normal(self, arg0: Matrix3f) -> Matrix3f: ...

  @overload
  def normal(self, arg0: Matrix3f) -> Matrix3f: ...

  @overload
  def normal(self, arg0: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def normal(self, arg0: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def normalize3x3(self) -> Matrix4x3f: ...

  @overload
  def normalize3x3(self, arg0: Matrix3f) -> Matrix3f: ...

  @overload
  def normalize3x3(self, arg0: Matrix3f) -> Matrix3f: ...

  @overload
  def normalize3x3(self, arg0: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def normalize3x3(self, arg0: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def normalizedPositiveX(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def normalizedPositiveX(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def normalizedPositiveY(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def normalizedPositiveY(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def normalizedPositiveZ(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def normalizedPositiveZ(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def obliqueZ(self, arg0: float, arg1: float) -> Matrix4x3f: ...

  @overload
  def obliqueZ(self, arg0: float, arg1: float, arg2: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def obliqueZ(self, arg0: float, arg1: float, arg2: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def origin(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def origin(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def ortho(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix4x3f: ...

  @overload
  def ortho(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool) -> Matrix4x3f: ...

  @overload
  def ortho(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def ortho(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def ortho(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool, arg7: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def ortho(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool, arg7: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def ortho2D(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4x3f: ...

  @overload
  def ortho2D(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def ortho2D(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def ortho2DLH(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4x3f: ...

  @overload
  def ortho2DLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def ortho2DLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def orthoLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix4x3f: ...

  @overload
  def orthoLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool) -> Matrix4x3f: ...

  @overload
  def orthoLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def orthoLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def orthoLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool, arg7: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def orthoLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool, arg7: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def orthoSymmetric(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4x3f: ...

  @overload
  def orthoSymmetric(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool) -> Matrix4x3f: ...

  @overload
  def orthoSymmetric(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def orthoSymmetric(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def orthoSymmetric(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool, arg5: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def orthoSymmetric(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool, arg5: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def orthoSymmetricLH(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4x3f: ...

  @overload
  def orthoSymmetricLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool) -> Matrix4x3f: ...

  @overload
  def orthoSymmetricLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def orthoSymmetricLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def orthoSymmetricLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool, arg5: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def orthoSymmetricLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool, arg5: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def pick(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: list[int]) -> Matrix4x3f: ...

  @overload
  def pick(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: list[int], arg5: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def pick(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: list[int], arg5: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def positiveX(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def positiveX(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def positiveY(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def positiveY(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def positiveZ(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def positiveZ(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def properties(self) -> int: ...

  @overload
  def properties(self) -> int: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def reflect(self, arg0: Quaternionfc, arg1: Vector3fc) -> Matrix4x3f: ...

  @overload
  def reflect(self, arg0: Vector3fc, arg1: Vector3fc) -> Matrix4x3f: ...

  @overload
  def reflect(self, arg0: Quaternionfc, arg1: Vector3fc, arg2: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def reflect(self, arg0: Quaternionfc, arg1: Vector3fc, arg2: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def reflect(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def reflect(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def reflect(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4x3f: ...

  @overload
  def reflect(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def reflect(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def reflect(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix4x3f: ...

  @overload
  def reflect(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def reflect(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def reflection(self, arg0: Quaternionfc, arg1: Vector3fc) -> Matrix4x3f: ...

  @overload
  def reflection(self, arg0: Vector3fc, arg1: Vector3fc) -> Matrix4x3f: ...

  @overload
  def reflection(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4x3f: ...

  @overload
  def reflection(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix4x3f: ...

  @overload
  def rotate(self, arg0: AxisAngle4f) -> Matrix4x3f: ...

  @overload
  def rotate(self, arg0: Quaternionfc) -> Matrix4x3f: ...

  @overload
  def rotate(self, arg0: float, arg1: Vector3fc) -> Matrix4x3f: ...

  @overload
  def rotate(self, arg0: AxisAngle4f, arg1: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def rotate(self, arg0: AxisAngle4f, arg1: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def rotate(self, arg0: Quaternionfc, arg1: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def rotate(self, arg0: Quaternionfc, arg1: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def rotate(self, arg0: float, arg1: Vector3fc, arg2: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def rotate(self, arg0: float, arg1: Vector3fc, arg2: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def rotate(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4x3f: ...

  @overload
  def rotate(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def rotate(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def rotateAround(self, arg0: Quaternionfc, arg1: float, arg2: float, arg3: float) -> Matrix4x3f: ...

  @overload
  def rotateAround(self, arg0: Quaternionfc, arg1: float, arg2: float, arg3: float, arg4: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def rotateAround(self, arg0: Quaternionfc, arg1: float, arg2: float, arg3: float, arg4: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def rotateLocal(self, arg0: Quaternionfc) -> Matrix4x3f: ...

  @overload
  def rotateLocal(self, arg0: Quaternionfc, arg1: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def rotateLocal(self, arg0: Quaternionfc, arg1: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def rotateLocal(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4x3f: ...

  @overload
  def rotateLocal(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def rotateLocal(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def rotateLocalX(self, arg0: float) -> Matrix4x3f: ...

  @overload
  def rotateLocalX(self, arg0: float, arg1: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def rotateLocalY(self, arg0: float) -> Matrix4x3f: ...

  @overload
  def rotateLocalY(self, arg0: float, arg1: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def rotateLocalZ(self, arg0: float) -> Matrix4x3f: ...

  @overload
  def rotateLocalZ(self, arg0: float, arg1: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def rotateTowards(self, arg0: Vector3fc, arg1: Vector3fc) -> Matrix4x3f: ...

  @overload
  def rotateTowards(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def rotateTowards(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def rotateTowards(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix4x3f: ...

  @overload
  def rotateTowards(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def rotateTowards(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def rotateTranslation(self, arg0: Quaternionfc, arg1: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def rotateTranslation(self, arg0: Quaternionfc, arg1: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def rotateTranslation(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def rotateTranslation(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def rotateX(self, arg0: float) -> Matrix4x3f: ...

  @overload
  def rotateX(self, arg0: float, arg1: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def rotateX(self, arg0: float, arg1: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def rotateXYZ(self, arg0: Vector3f) -> Matrix4x3f: ...

  @overload
  def rotateXYZ(self, arg0: float, arg1: float, arg2: float) -> Matrix4x3f: ...

  @overload
  def rotateXYZ(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def rotateXYZ(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def rotateY(self, arg0: float) -> Matrix4x3f: ...

  @overload
  def rotateY(self, arg0: float, arg1: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def rotateY(self, arg0: float, arg1: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def rotateYXZ(self, arg0: Vector3f) -> Matrix4x3f: ...

  @overload
  def rotateYXZ(self, arg0: float, arg1: float, arg2: float) -> Matrix4x3f: ...

  @overload
  def rotateYXZ(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def rotateYXZ(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def rotateZ(self, arg0: float) -> Matrix4x3f: ...

  @overload
  def rotateZ(self, arg0: float, arg1: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def rotateZ(self, arg0: float, arg1: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def rotateZYX(self, arg0: Vector3f) -> Matrix4x3f: ...

  @overload
  def rotateZYX(self, arg0: float, arg1: float, arg2: float) -> Matrix4x3f: ...

  @overload
  def rotateZYX(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def rotateZYX(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def rotation(self, arg0: AxisAngle4f) -> Matrix4x3f: ...

  @overload
  def rotation(self, arg0: Quaternionfc) -> Matrix4x3f: ...

  @overload
  def rotation(self, arg0: float, arg1: Vector3fc) -> Matrix4x3f: ...

  @overload
  def rotation(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4x3f: ...

  def rotationAround(self, arg0: Quaternionfc, arg1: float, arg2: float, arg3: float) -> Matrix4x3f: ...

  @overload
  def rotationTowards(self, arg0: Vector3fc, arg1: Vector3fc) -> Matrix4x3f: ...

  @overload
  def rotationTowards(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix4x3f: ...

  def rotationX(self, arg0: float) -> Matrix4x3f: ...

  def rotationXYZ(self, arg0: float, arg1: float, arg2: float) -> Matrix4x3f: ...

  def rotationY(self, arg0: float) -> Matrix4x3f: ...

  def rotationYXZ(self, arg0: float, arg1: float, arg2: float) -> Matrix4x3f: ...

  def rotationZ(self, arg0: float) -> Matrix4x3f: ...

  def rotationZYX(self, arg0: float, arg1: float, arg2: float) -> Matrix4x3f: ...

  @overload
  def scale(self, arg0: float) -> Matrix4x3f: ...

  @overload
  def scale(self, arg0: Vector3fc) -> Matrix4x3f: ...

  @overload
  def scale(self, arg0: float, arg1: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def scale(self, arg0: float, arg1: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def scale(self, arg0: Vector3fc, arg1: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def scale(self, arg0: Vector3fc, arg1: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def scale(self, arg0: float, arg1: float, arg2: float) -> Matrix4x3f: ...

  @overload
  def scale(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def scale(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def scaleLocal(self, arg0: float, arg1: float, arg2: float) -> Matrix4x3f: ...

  @overload
  def scaleLocal(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def scaleLocal(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def scaleXY(self, arg0: float, arg1: float) -> Matrix4x3f: ...

  @overload
  def scaleXY(self, arg0: float, arg1: float, arg2: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def scaleXY(self, arg0: float, arg1: float, arg2: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def scaling(self, arg0: float) -> Matrix4x3f: ...

  @overload
  def scaling(self, arg0: Vector3fc) -> Matrix4x3f: ...

  @overload
  def scaling(self, arg0: float, arg1: float, arg2: float) -> Matrix4x3f: ...

  @overload
  def set(self, arg0: list[float]) -> Matrix4x3f: ...

  @overload
  def set(self, arg0: ByteBuffer) -> Matrix4x3f: ...

  @overload
  def set(self, arg0: FloatBuffer) -> Matrix4x3f: ...

  @overload
  def set(self, arg0: AxisAngle4d) -> Matrix4x3f: ...

  @overload
  def set(self, arg0: AxisAngle4f) -> Matrix4x3f: ...

  @overload
  def set(self, arg0: Matrix3fc) -> Matrix4x3f: ...

  @overload
  def set(self, arg0: Matrix4fc) -> Matrix4x3f: ...

  @overload
  def set(self, arg0: Matrix4x3fc) -> Matrix4x3f: ...

  @overload
  def set(self, arg0: Quaterniondc) -> Matrix4x3f: ...

  @overload
  def set(self, arg0: Quaternionfc) -> Matrix4x3f: ...

  @overload
  def set(self, arg0: list[float], arg1: int) -> Matrix4x3f: ...

  @overload
  def set(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Vector3fc, arg3: Vector3fc) -> Matrix4x3f: ...

  @overload
  def set(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float, arg10: float, arg11: float) -> Matrix4x3f: ...

  @overload
  def set3x3(self, arg0: Matrix3fc) -> Matrix4x3f: ...

  @overload
  def set3x3(self, arg0: Matrix4x3fc) -> Matrix4x3f: ...

  def setColumn(self, arg0: int, arg1: Vector3fc) -> Matrix4x3f: ...

  def setFromAddress(self, arg0: int) -> Matrix4x3f: ...

  @overload
  def setLookAlong(self, arg0: Vector3fc, arg1: Vector3fc) -> Matrix4x3f: ...

  @overload
  def setLookAlong(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix4x3f: ...

  @overload
  def setLookAt(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Vector3fc) -> Matrix4x3f: ...

  @overload
  def setLookAt(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float) -> Matrix4x3f: ...

  @overload
  def setLookAtLH(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Vector3fc) -> Matrix4x3f: ...

  @overload
  def setLookAtLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float) -> Matrix4x3f: ...

  @overload
  def setOrtho(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix4x3f: ...

  @overload
  def setOrtho(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool) -> Matrix4x3f: ...

  def setOrtho2D(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4x3f: ...

  def setOrtho2DLH(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4x3f: ...

  @overload
  def setOrthoLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Matrix4x3f: ...

  @overload
  def setOrthoLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool) -> Matrix4x3f: ...

  @overload
  def setOrthoSymmetric(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4x3f: ...

  @overload
  def setOrthoSymmetric(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool) -> Matrix4x3f: ...

  @overload
  def setOrthoSymmetricLH(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Matrix4x3f: ...

  @overload
  def setOrthoSymmetricLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool) -> Matrix4x3f: ...

  def setRotationXYZ(self, arg0: float, arg1: float, arg2: float) -> Matrix4x3f: ...

  def setRotationYXZ(self, arg0: float, arg1: float, arg2: float) -> Matrix4x3f: ...

  def setRotationZYX(self, arg0: float, arg1: float, arg2: float) -> Matrix4x3f: ...

  def setRow(self, arg0: int, arg1: Vector4fc) -> Matrix4x3f: ...

  @overload
  def setTranslation(self, arg0: Vector3fc) -> Matrix4x3f: ...

  @overload
  def setTranslation(self, arg0: float, arg1: float, arg2: float) -> Matrix4x3f: ...

  @overload
  def shadow(self, arg0: Vector4fc, arg1: Matrix4x3fc) -> Matrix4x3f: ...

  @overload
  def shadow(self, arg0: Vector4fc, arg1: Matrix4x3fc, arg2: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def shadow(self, arg0: Vector4fc, arg1: Matrix4x3fc, arg2: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def shadow(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def shadow(self, arg0: Vector4fc, arg1: float, arg2: float, arg3: float, arg4: float) -> Matrix4x3f: ...

  @overload
  def shadow(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4x3fc, arg5: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def shadow(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4x3fc, arg5: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def shadow(self, arg0: Vector4fc, arg1: float, arg2: float, arg3: float, arg4: float, arg5: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def shadow(self, arg0: Vector4fc, arg1: float, arg2: float, arg3: float, arg4: float, arg5: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def shadow(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float) -> Matrix4x3f: ...

  @overload
  def shadow(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def shadow(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def sub(self, arg0: Matrix4x3fc) -> Matrix4x3f: ...

  @overload
  def sub(self, arg0: Matrix4x3fc, arg1: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def sub(self, arg0: Matrix4x3fc, arg1: Matrix4x3f) -> Matrix4x3f: ...

  def swap(self, arg0: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def toString(self) -> str: ...

  @overload
  def toString(self, arg0: NumberFormat) -> str: ...

  @overload
  def transform(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transform(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transform(self, arg0: Vector4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def transform(self, arg0: Vector4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def transformAab(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Vector3f, arg3: Vector3f) -> Matrix4x3f: ...

  @overload
  def transformAab(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Vector3f, arg3: Vector3f) -> Matrix4x3f: ...

  @overload
  def transformAab(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Vector3f, arg7: Vector3f) -> Matrix4x3f: ...

  @overload
  def transformAab(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Vector3f, arg7: Vector3f) -> Matrix4x3f: ...

  @overload
  def transformDirection(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformDirection(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformDirection(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def transformDirection(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def transformPosition(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformPosition(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformPosition(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def transformPosition(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def translate(self, arg0: Vector3fc) -> Matrix4x3f: ...

  @overload
  def translate(self, arg0: Vector3fc, arg1: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def translate(self, arg0: Vector3fc, arg1: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def translate(self, arg0: float, arg1: float, arg2: float) -> Matrix4x3f: ...

  @overload
  def translate(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def translate(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def translateLocal(self, arg0: Vector3fc) -> Matrix4x3f: ...

  @overload
  def translateLocal(self, arg0: Vector3fc, arg1: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def translateLocal(self, arg0: Vector3fc, arg1: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def translateLocal(self, arg0: float, arg1: float, arg2: float) -> Matrix4x3f: ...

  @overload
  def translateLocal(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def translateLocal(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def translation(self, arg0: Vector3fc) -> Matrix4x3f: ...

  @overload
  def translation(self, arg0: float, arg1: float, arg2: float) -> Matrix4x3f: ...

  def translationRotate(self, arg0: float, arg1: float, arg2: float, arg3: Quaternionfc) -> Matrix4x3f: ...

  @overload
  def translationRotateMul(self, arg0: float, arg1: float, arg2: float, arg3: Quaternionfc, arg4: Matrix4x3fc) -> Matrix4x3f: ...

  @overload
  def translationRotateMul(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: Matrix4x3fc) -> Matrix4x3f: ...

  @overload
  def translationRotateScale(self, arg0: Vector3fc, arg1: Quaternionfc, arg2: Vector3fc) -> Matrix4x3f: ...

  @overload
  def translationRotateScale(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float) -> Matrix4x3f: ...

  @overload
  def translationRotateScaleMul(self, arg0: Vector3fc, arg1: Quaternionfc, arg2: Vector3fc, arg3: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def translationRotateScaleMul(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float, arg10: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def translationRotateTowards(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Vector3fc) -> Matrix4x3f: ...

  @overload
  def translationRotateTowards(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float) -> Matrix4x3f: ...

  @overload
  def transpose3x3(self) -> Matrix4x3f: ...

  @overload
  def transpose3x3(self, arg0: Matrix3f) -> Matrix3f: ...

  @overload
  def transpose3x3(self, arg0: Matrix3f) -> Matrix3f: ...

  @overload
  def transpose3x3(self, arg0: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def transpose3x3(self, arg0: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def withLookAtUp(self, arg0: Vector3fc) -> Matrix4x3f: ...

  @overload
  def withLookAtUp(self, arg0: Vector3fc, arg1: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def withLookAtUp(self, arg0: Vector3fc, arg1: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def withLookAtUp(self, arg0: float, arg1: float, arg2: float) -> Matrix4x3f: ...

  @overload
  def withLookAtUp(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def withLookAtUp(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  def zero(self) -> Matrix4x3f: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: FloatBuffer): ...
  @overload
  def __init__(self, arg0: Matrix3fc): ...
  @overload
  def __init__(self, arg0: Matrix4x3fc): ...
  @overload
  def __init__(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Vector3fc, arg3: Vector3fc): ...
  @overload
  def __init__(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float, arg10: float, arg11: float): ...


class Matrix4x3fStack(Matrix4x3f):

  def clear(self) -> Matrix4x3fStack: ...

  def equals(self, arg0: object) -> bool: ...

  def hashCode(self) -> int: ...

  def popMatrix(self) -> Matrix4x3fStack: ...

  def pushMatrix(self) -> Matrix4x3fStack: ...

  def readExternal(self, arg0: ObjectInput) -> None: ...

  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: int): ...


class Matrix4x3fc:

  PLANE_NX: int

  PLANE_NY: int

  PLANE_NZ: int

  PLANE_PX: int

  PLANE_PY: int

  PLANE_PZ: int

  PROPERTY_IDENTITY: int

  PROPERTY_ORTHONORMAL: int

  PROPERTY_TRANSLATION: int

  def add(self, arg0: Matrix4x3fc, arg1: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def arcball(self, arg0: float, arg1: Vector3fc, arg2: float, arg3: float, arg4: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def arcball(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def cofactor3x3(self, arg0: Matrix3f) -> Matrix3f: ...

  @overload
  def cofactor3x3(self, arg0: Matrix4x3f) -> Matrix4x3f: ...

  def determinant(self) -> float: ...

  def equals(self, arg0: Matrix4x3fc, arg1: float) -> bool: ...

  def fma(self, arg0: Matrix4x3fc, arg1: float, arg2: Matrix4x3f) -> Matrix4x3f: ...

  def frustumPlane(self, arg0: int, arg1: Vector4f) -> Vector4f: ...

  @overload
  def get(self, arg0: list[float]) -> list[float]: ...

  @overload
  def get(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get(self, arg0: Matrix4d) -> Matrix4d: ...

  @overload
  def get(self, arg0: Matrix4f) -> Matrix4f: ...

  @overload
  def get(self, arg0: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def get(self, arg0: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def get(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def get(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get3x4(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get3x4(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get3x4(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get3x4(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get4x4(self, arg0: list[float]) -> list[float]: ...

  @overload
  def get4x4(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get4x4(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get4x4(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def get4x4(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get4x4(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  def getColumn(self, arg0: int, arg1: Vector3f) -> Vector3f: ...

  def getEulerAnglesZYX(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def getNormalizedRotation(self, arg0: Quaterniond) -> Quaterniond: ...

  @overload
  def getNormalizedRotation(self, arg0: Quaternionf) -> Quaternionf: ...

  @overload
  def getRotation(self, arg0: AxisAngle4d) -> AxisAngle4d: ...

  @overload
  def getRotation(self, arg0: AxisAngle4f) -> AxisAngle4f: ...

  def getRow(self, arg0: int, arg1: Vector4f) -> Vector4f: ...

  def getScale(self, arg0: Vector3f) -> Vector3f: ...

  def getToAddress(self, arg0: int) -> Matrix4x3fc: ...

  def getTranslation(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def getTransposed(self, arg0: list[float]) -> list[float]: ...

  @overload
  def getTransposed(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getTransposed(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def getTransposed(self, arg0: list[float], arg1: int) -> list[float]: ...

  @overload
  def getTransposed(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getTransposed(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def getUnnormalizedRotation(self, arg0: Quaterniond) -> Quaterniond: ...

  @overload
  def getUnnormalizedRotation(self, arg0: Quaternionf) -> Quaternionf: ...

  @overload
  def invert(self, arg0: Matrix4f) -> Matrix4f: ...

  @overload
  def invert(self, arg0: Matrix4x3f) -> Matrix4x3f: ...

  def invertOrtho(self, arg0: Matrix4x3f) -> Matrix4x3f: ...

  def isFinite(self) -> bool: ...

  def lerp(self, arg0: Matrix4x3fc, arg1: float, arg2: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def lookAlong(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def lookAlong(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def lookAt(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Vector3fc, arg3: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def lookAt(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def lookAtLH(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Vector3fc, arg3: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def lookAtLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: Matrix4x3f) -> Matrix4x3f: ...

  def m00(self) -> float: ...

  def m01(self) -> float: ...

  def m02(self) -> float: ...

  def m10(self) -> float: ...

  def m11(self) -> float: ...

  def m12(self) -> float: ...

  def m20(self) -> float: ...

  def m21(self) -> float: ...

  def m22(self) -> float: ...

  def m30(self) -> float: ...

  def m31(self) -> float: ...

  def m32(self) -> float: ...

  def mul(self, arg0: Matrix4x3fc, arg1: Matrix4x3f) -> Matrix4x3f: ...

  def mulComponentWise(self, arg0: Matrix4x3fc, arg1: Matrix4x3f) -> Matrix4x3f: ...

  def mulOrtho(self, arg0: Matrix4x3fc, arg1: Matrix4x3f) -> Matrix4x3f: ...

  def mulTranslation(self, arg0: Matrix4x3fc, arg1: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def normal(self, arg0: Matrix3f) -> Matrix3f: ...

  @overload
  def normal(self, arg0: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def normalize3x3(self, arg0: Matrix3f) -> Matrix3f: ...

  @overload
  def normalize3x3(self, arg0: Matrix4x3f) -> Matrix4x3f: ...

  def normalizedPositiveX(self, arg0: Vector3f) -> Vector3f: ...

  def normalizedPositiveY(self, arg0: Vector3f) -> Vector3f: ...

  def normalizedPositiveZ(self, arg0: Vector3f) -> Vector3f: ...

  def obliqueZ(self, arg0: float, arg1: float, arg2: Matrix4x3f) -> Matrix4x3f: ...

  def origin(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def ortho(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def ortho(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool, arg7: Matrix4x3f) -> Matrix4x3f: ...

  def ortho2D(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4x3f) -> Matrix4x3f: ...

  def ortho2DLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def orthoLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def orthoLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool, arg7: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def orthoSymmetric(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def orthoSymmetric(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool, arg5: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def orthoSymmetricLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def orthoSymmetricLH(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool, arg5: Matrix4x3f) -> Matrix4x3f: ...

  def pick(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: list[int], arg5: Matrix4x3f) -> Matrix4x3f: ...

  def positiveX(self, arg0: Vector3f) -> Vector3f: ...

  def positiveY(self, arg0: Vector3f) -> Vector3f: ...

  def positiveZ(self, arg0: Vector3f) -> Vector3f: ...

  def properties(self) -> int: ...

  @overload
  def reflect(self, arg0: Quaternionfc, arg1: Vector3fc, arg2: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def reflect(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def reflect(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def reflect(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def rotate(self, arg0: AxisAngle4f, arg1: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def rotate(self, arg0: Quaternionfc, arg1: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def rotate(self, arg0: float, arg1: Vector3fc, arg2: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def rotate(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4x3f) -> Matrix4x3f: ...

  def rotateAround(self, arg0: Quaternionfc, arg1: float, arg2: float, arg3: float, arg4: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def rotateLocal(self, arg0: Quaternionfc, arg1: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def rotateLocal(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def rotateTowards(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def rotateTowards(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def rotateTranslation(self, arg0: Quaternionfc, arg1: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def rotateTranslation(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4x3f) -> Matrix4x3f: ...

  def rotateX(self, arg0: float, arg1: Matrix4x3f) -> Matrix4x3f: ...

  def rotateXYZ(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4x3f) -> Matrix4x3f: ...

  def rotateY(self, arg0: float, arg1: Matrix4x3f) -> Matrix4x3f: ...

  def rotateYXZ(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4x3f) -> Matrix4x3f: ...

  def rotateZ(self, arg0: float, arg1: Matrix4x3f) -> Matrix4x3f: ...

  def rotateZYX(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def scale(self, arg0: float, arg1: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def scale(self, arg0: Vector3fc, arg1: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def scale(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4x3f) -> Matrix4x3f: ...

  def scaleLocal(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4x3f) -> Matrix4x3f: ...

  def scaleXY(self, arg0: float, arg1: float, arg2: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def shadow(self, arg0: Vector4fc, arg1: Matrix4x3fc, arg2: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def shadow(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Matrix4x3fc, arg5: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def shadow(self, arg0: Vector4fc, arg1: float, arg2: float, arg3: float, arg4: float, arg5: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def shadow(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: Matrix4x3f) -> Matrix4x3f: ...

  def sub(self, arg0: Matrix4x3fc, arg1: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def transform(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transform(self, arg0: Vector4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def transformAab(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Vector3f, arg3: Vector3f) -> Matrix4x3f: ...

  @overload
  def transformAab(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Vector3f, arg7: Vector3f) -> Matrix4x3f: ...

  @overload
  def transformDirection(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformDirection(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def transformPosition(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformPosition(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def translate(self, arg0: Vector3fc, arg1: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def translate(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def translateLocal(self, arg0: Vector3fc, arg1: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def translateLocal(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def transpose3x3(self, arg0: Matrix3f) -> Matrix3f: ...

  @overload
  def transpose3x3(self, arg0: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def withLookAtUp(self, arg0: Vector3fc, arg1: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def withLookAtUp(self, arg0: float, arg1: float, arg2: float, arg3: Matrix4x3f) -> Matrix4x3f: ...


class Options:

  DEBUG: bool

  FASTMATH: bool

  FORCE_UNSAFE: bool

  NO_UNSAFE: bool

  NUMBER_FORMAT: NumberFormat

  numberFormatDecimals: int

  SIN_LOOKUP: bool

  SIN_LOOKUP_BITS: int

  USE_MATH_FMA: bool

  useNumberFormat: bool


class PolygonsIntersection:

  @overload
  def testPoint(self, arg0: float, arg1: float) -> bool: ...

  @overload
  def testPoint(self, arg0: float, arg1: float, arg2: BitSet) -> bool: ...

  def __init__(self, arg0: list[float], arg1: list[int], arg2: int): ...

  class Interval: ...

  class ByStartComparator:

    @overload
    def compare(self, arg0: object, arg1: object) -> int: ...

    @overload
    def compare(self, arg0: object, arg1: object) -> int: ...

    def equals(self, arg0: object) -> bool: ...

    def reversed(self) -> Comparator[T]: ...

    @overload
    def thenComparing(self, arg0: Comparator[T]) -> Comparator[T]: ...

    @overload
    def thenComparing(self, arg0: Function[T, U]) -> Comparator[T]: ...

    @overload
    def thenComparing(self, arg0: Function[T, U], arg1: Comparator[U]) -> Comparator[T]: ...

    def thenComparingDouble(self, arg0: ToDoubleFunction[T]) -> Comparator[T]: ...

    def thenComparingInt(self, arg0: ToIntFunction[T]) -> Comparator[T]: ...

    def thenComparingLong(self, arg0: ToLongFunction[T]) -> Comparator[T]: ...

    @staticmethod
    @overload
    def comparing(arg0: Function[T, U]) -> Comparator[T]: ...

    @staticmethod
    @overload
    def comparing(arg0: Function[T, U], arg1: Comparator[U]) -> Comparator[T]: ...

    @staticmethod
    def comparingDouble(arg0: ToDoubleFunction[T]) -> Comparator[T]: ...

    @staticmethod
    def comparingInt(arg0: ToIntFunction[T]) -> Comparator[T]: ...

    @staticmethod
    def comparingLong(arg0: ToLongFunction[T]) -> Comparator[T]: ...

    @staticmethod
    def naturalOrder() -> Comparator[T]: ...

    @staticmethod
    def nullsFirst(arg0: Comparator[T]) -> Comparator[T]: ...

    @staticmethod
    def nullsLast(arg0: Comparator[T]) -> Comparator[T]: ...

    @staticmethod
    def reverseOrder() -> Comparator[T]: ...

  class ByEndComparator:

    @overload
    def compare(self, arg0: object, arg1: object) -> int: ...

    @overload
    def compare(self, arg0: object, arg1: object) -> int: ...

    def equals(self, arg0: object) -> bool: ...

    def reversed(self) -> Comparator[T]: ...

    @overload
    def thenComparing(self, arg0: Comparator[T]) -> Comparator[T]: ...

    @overload
    def thenComparing(self, arg0: Function[T, U]) -> Comparator[T]: ...

    @overload
    def thenComparing(self, arg0: Function[T, U], arg1: Comparator[U]) -> Comparator[T]: ...

    def thenComparingDouble(self, arg0: ToDoubleFunction[T]) -> Comparator[T]: ...

    def thenComparingInt(self, arg0: ToIntFunction[T]) -> Comparator[T]: ...

    def thenComparingLong(self, arg0: ToLongFunction[T]) -> Comparator[T]: ...

    @staticmethod
    @overload
    def comparing(arg0: Function[T, U]) -> Comparator[T]: ...

    @staticmethod
    @overload
    def comparing(arg0: Function[T, U], arg1: Comparator[U]) -> Comparator[T]: ...

    @staticmethod
    def comparingDouble(arg0: ToDoubleFunction[T]) -> Comparator[T]: ...

    @staticmethod
    def comparingInt(arg0: ToIntFunction[T]) -> Comparator[T]: ...

    @staticmethod
    def comparingLong(arg0: ToLongFunction[T]) -> Comparator[T]: ...

    @staticmethod
    def naturalOrder() -> Comparator[T]: ...

    @staticmethod
    def nullsFirst(arg0: Comparator[T]) -> Comparator[T]: ...

    @staticmethod
    def nullsLast(arg0: Comparator[T]) -> Comparator[T]: ...

    @staticmethod
    def reverseOrder() -> Comparator[T]: ...

  class IntervalTreeNode: ...


class Quaterniond:

  @overload
  def add(self, arg0: Quaterniondc) -> Quaterniond: ...

  @overload
  def add(self, arg0: Quaterniondc, arg1: Quaterniond) -> Quaterniond: ...

  @overload
  def add(self, arg0: Quaterniondc, arg1: Quaterniond) -> Quaterniond: ...

  @overload
  def add(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Quaterniond: ...

  @overload
  def add(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Quaterniond) -> Quaterniond: ...

  @overload
  def add(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Quaterniond) -> Quaterniond: ...

  @overload
  def angle(self) -> float: ...

  @overload
  def angle(self) -> float: ...

  @overload
  def conjugate(self) -> Quaterniond: ...

  @overload
  def conjugate(self, arg0: Quaterniond) -> Quaterniond: ...

  @overload
  def conjugate(self, arg0: Quaterniond) -> Quaterniond: ...

  @overload
  def conjugateBy(self, arg0: Quaterniondc) -> Quaterniond: ...

  @overload
  def conjugateBy(self, arg0: Quaterniondc, arg1: Quaterniond) -> Quaterniond: ...

  @overload
  def conjugateBy(self, arg0: Quaterniondc, arg1: Quaterniond) -> Quaterniond: ...

  @overload
  def difference(self, arg0: Quaterniondc) -> Quaterniond: ...

  @overload
  def difference(self, arg0: Quaterniondc, arg1: Quaterniond) -> Quaterniond: ...

  @overload
  def difference(self, arg0: Quaterniondc, arg1: Quaterniond) -> Quaterniond: ...

  @overload
  def div(self, arg0: Quaterniondc) -> Quaterniond: ...

  @overload
  def div(self, arg0: Quaterniondc, arg1: Quaterniond) -> Quaterniond: ...

  @overload
  def div(self, arg0: Quaterniondc, arg1: Quaterniond) -> Quaterniond: ...

  @overload
  def dot(self, arg0: Quaterniondc) -> float: ...

  @overload
  def dot(self, arg0: Quaterniondc) -> float: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def equals(self, arg0: Quaterniondc, arg1: float) -> bool: ...

  @overload
  def equals(self, arg0: Quaterniondc, arg1: float) -> bool: ...

  @overload
  def equals(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool: ...

  @overload
  def equals(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool: ...

  @overload
  def fromAxisAngleDeg(self, arg0: Vector3dc, arg1: float) -> Quaterniond: ...

  @overload
  def fromAxisAngleDeg(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Quaterniond: ...

  @overload
  def fromAxisAngleRad(self, arg0: Vector3dc, arg1: float) -> Quaterniond: ...

  @overload
  def fromAxisAngleRad(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Quaterniond: ...

  @overload
  def get(self, arg0: AxisAngle4d) -> AxisAngle4d: ...

  @overload
  def get(self, arg0: AxisAngle4d) -> AxisAngle4d: ...

  @overload
  def get(self, arg0: AxisAngle4f) -> AxisAngle4f: ...

  @overload
  def get(self, arg0: AxisAngle4f) -> AxisAngle4f: ...

  @overload
  def get(self, arg0: Matrix3d) -> Matrix3d: ...

  @overload
  def get(self, arg0: Matrix3d) -> Matrix3d: ...

  @overload
  def get(self, arg0: Matrix3f) -> Matrix3f: ...

  @overload
  def get(self, arg0: Matrix3f) -> Matrix3f: ...

  @overload
  def get(self, arg0: Matrix4d) -> Matrix4d: ...

  @overload
  def get(self, arg0: Matrix4d) -> Matrix4d: ...

  @overload
  def get(self, arg0: Matrix4f) -> Matrix4f: ...

  @overload
  def get(self, arg0: Matrix4f) -> Matrix4f: ...

  @overload
  def get(self, arg0: Quaterniond) -> Quaterniond: ...

  @overload
  def get(self, arg0: Quaterniond) -> Quaterniond: ...

  @overload
  def get(self, arg0: Quaternionf) -> Quaternionf: ...

  @overload
  def get(self, arg0: Quaternionf) -> Quaternionf: ...

  @overload
  def getEulerAnglesXYZ(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def getEulerAnglesXYZ(self, arg0: Vector3d) -> Vector3d: ...

  def hashCode(self) -> int: ...

  def identity(self) -> Quaterniond: ...

  @overload
  def integrate(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Quaterniond: ...

  @overload
  def integrate(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Quaterniond) -> Quaterniond: ...

  @overload
  def integrate(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Quaterniond) -> Quaterniond: ...

  @overload
  def invert(self) -> Quaterniond: ...

  @overload
  def invert(self, arg0: Quaterniond) -> Quaterniond: ...

  @overload
  def invert(self, arg0: Quaterniond) -> Quaterniond: ...

  @overload
  def isFinite(self) -> bool: ...

  @overload
  def isFinite(self) -> bool: ...

  @overload
  def lengthSquared(self) -> float: ...

  @overload
  def lengthSquared(self) -> float: ...

  @overload
  def lookAlong(self, arg0: Vector3dc, arg1: Vector3dc) -> Quaterniond: ...

  @overload
  def lookAlong(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Quaterniond) -> Quaterniond: ...

  @overload
  def lookAlong(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Quaterniond) -> Quaterniond: ...

  @overload
  def lookAlong(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Quaterniond: ...

  @overload
  def lookAlong(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Quaterniond) -> Quaterniond: ...

  @overload
  def lookAlong(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Quaterniond) -> Quaterniond: ...

  @overload
  def mul(self, arg0: Quaterniondc) -> Quaterniond: ...

  @overload
  def mul(self, arg0: Quaterniondc, arg1: Quaterniond) -> Quaterniond: ...

  @overload
  def mul(self, arg0: Quaterniondc, arg1: Quaterniond) -> Quaterniond: ...

  @overload
  def mul(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Quaterniond: ...

  @overload
  def mul(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Quaterniond) -> Quaterniond: ...

  @overload
  def mul(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Quaterniond) -> Quaterniond: ...

  @overload
  def nlerp(self, arg0: Quaterniondc, arg1: float) -> Quaterniond: ...

  @overload
  def nlerp(self, arg0: Quaterniondc, arg1: float, arg2: Quaterniond) -> Quaterniond: ...

  @overload
  def nlerp(self, arg0: Quaterniondc, arg1: float, arg2: Quaterniond) -> Quaterniond: ...

  @overload
  def nlerpIterative(self, arg0: Quaterniondc, arg1: float, arg2: float) -> Quaterniond: ...

  @overload
  def nlerpIterative(self, arg0: Quaterniondc, arg1: float, arg2: float, arg3: Quaterniond) -> Quaterniond: ...

  @overload
  def nlerpIterative(self, arg0: Quaterniondc, arg1: float, arg2: float, arg3: Quaterniond) -> Quaterniond: ...

  @overload
  def normalize(self) -> Quaterniond: ...

  @overload
  def normalize(self, arg0: Quaterniond) -> Quaterniond: ...

  @overload
  def normalize(self, arg0: Quaterniond) -> Quaterniond: ...

  @overload
  def normalizedPositiveX(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def normalizedPositiveX(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def normalizedPositiveY(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def normalizedPositiveY(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def normalizedPositiveZ(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def normalizedPositiveZ(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def positiveX(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def positiveX(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def positiveY(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def positiveY(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def positiveZ(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def positiveZ(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def premul(self, arg0: Quaterniondc) -> Quaterniond: ...

  @overload
  def premul(self, arg0: Quaterniondc, arg1: Quaterniond) -> Quaterniond: ...

  @overload
  def premul(self, arg0: Quaterniondc, arg1: Quaterniond) -> Quaterniond: ...

  @overload
  def premul(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Quaterniond: ...

  @overload
  def premul(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Quaterniond) -> Quaterniond: ...

  @overload
  def premul(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Quaterniond) -> Quaterniond: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def rotateAxis(self, arg0: float, arg1: Vector3dc) -> Quaterniond: ...

  @overload
  def rotateAxis(self, arg0: float, arg1: Vector3dc, arg2: Quaterniond) -> Quaterniond: ...

  @overload
  def rotateAxis(self, arg0: float, arg1: Vector3dc, arg2: Quaterniond) -> Quaterniond: ...

  @overload
  def rotateAxis(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Quaterniond: ...

  @overload
  def rotateAxis(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Quaterniond) -> Quaterniond: ...

  @overload
  def rotateAxis(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Quaterniond) -> Quaterniond: ...

  @overload
  def rotateLocalX(self, arg0: float) -> Quaterniond: ...

  @overload
  def rotateLocalX(self, arg0: float, arg1: Quaterniond) -> Quaterniond: ...

  @overload
  def rotateLocalX(self, arg0: float, arg1: Quaterniond) -> Quaterniond: ...

  @overload
  def rotateLocalY(self, arg0: float) -> Quaterniond: ...

  @overload
  def rotateLocalY(self, arg0: float, arg1: Quaterniond) -> Quaterniond: ...

  @overload
  def rotateLocalY(self, arg0: float, arg1: Quaterniond) -> Quaterniond: ...

  @overload
  def rotateLocalZ(self, arg0: float) -> Quaterniond: ...

  @overload
  def rotateLocalZ(self, arg0: float, arg1: Quaterniond) -> Quaterniond: ...

  @overload
  def rotateLocalZ(self, arg0: float, arg1: Quaterniond) -> Quaterniond: ...

  @overload
  def rotateTo(self, arg0: Vector3dc, arg1: Vector3dc) -> Quaterniond: ...

  @overload
  def rotateTo(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Quaterniond) -> Quaterniond: ...

  @overload
  def rotateTo(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Quaterniond) -> Quaterniond: ...

  @overload
  def rotateTo(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Quaterniond: ...

  @overload
  def rotateTo(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Quaterniond) -> Quaterniond: ...

  @overload
  def rotateTo(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Quaterniond) -> Quaterniond: ...

  @overload
  def rotateX(self, arg0: float) -> Quaterniond: ...

  @overload
  def rotateX(self, arg0: float, arg1: Quaterniond) -> Quaterniond: ...

  @overload
  def rotateX(self, arg0: float, arg1: Quaterniond) -> Quaterniond: ...

  @overload
  def rotateXYZ(self, arg0: float, arg1: float, arg2: float) -> Quaterniond: ...

  @overload
  def rotateXYZ(self, arg0: float, arg1: float, arg2: float, arg3: Quaterniond) -> Quaterniond: ...

  @overload
  def rotateXYZ(self, arg0: float, arg1: float, arg2: float, arg3: Quaterniond) -> Quaterniond: ...

  @overload
  def rotateY(self, arg0: float) -> Quaterniond: ...

  @overload
  def rotateY(self, arg0: float, arg1: Quaterniond) -> Quaterniond: ...

  @overload
  def rotateY(self, arg0: float, arg1: Quaterniond) -> Quaterniond: ...

  @overload
  def rotateYXZ(self, arg0: float, arg1: float, arg2: float) -> Quaterniond: ...

  @overload
  def rotateYXZ(self, arg0: float, arg1: float, arg2: float, arg3: Quaterniond) -> Quaterniond: ...

  @overload
  def rotateYXZ(self, arg0: float, arg1: float, arg2: float, arg3: Quaterniond) -> Quaterniond: ...

  @overload
  def rotateZ(self, arg0: float) -> Quaterniond: ...

  @overload
  def rotateZ(self, arg0: float, arg1: Quaterniond) -> Quaterniond: ...

  @overload
  def rotateZ(self, arg0: float, arg1: Quaterniond) -> Quaterniond: ...

  @overload
  def rotateZYX(self, arg0: float, arg1: float, arg2: float) -> Quaterniond: ...

  @overload
  def rotateZYX(self, arg0: float, arg1: float, arg2: float, arg3: Quaterniond) -> Quaterniond: ...

  @overload
  def rotateZYX(self, arg0: float, arg1: float, arg2: float, arg3: Quaterniond) -> Quaterniond: ...

  @overload
  def rotationAxis(self, arg0: AxisAngle4f) -> Quaterniond: ...

  @overload
  def rotationAxis(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Quaterniond: ...

  @overload
  def rotationTo(self, arg0: Vector3dc, arg1: Vector3dc) -> Quaterniond: ...

  @overload
  def rotationTo(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Quaterniond: ...

  def rotationX(self, arg0: float) -> Quaterniond: ...

  def rotationXYZ(self, arg0: float, arg1: float, arg2: float) -> Quaterniond: ...

  def rotationY(self, arg0: float) -> Quaterniond: ...

  def rotationYXZ(self, arg0: float, arg1: float, arg2: float) -> Quaterniond: ...

  def rotationZ(self, arg0: float) -> Quaterniond: ...

  def rotationZYX(self, arg0: float, arg1: float, arg2: float) -> Quaterniond: ...

  @overload
  def scale(self, arg0: float) -> Quaterniond: ...

  @overload
  def scale(self, arg0: float, arg1: Quaterniond) -> Quaterniond: ...

  @overload
  def scale(self, arg0: float, arg1: Quaterniond) -> Quaterniond: ...

  def scaling(self, arg0: float) -> Quaterniond: ...

  @overload
  def set(self, arg0: AxisAngle4d) -> Quaterniond: ...

  @overload
  def set(self, arg0: AxisAngle4f) -> Quaterniond: ...

  @overload
  def set(self, arg0: Quaterniondc) -> Quaterniond: ...

  @overload
  def set(self, arg0: Quaternionfc) -> Quaterniond: ...

  @overload
  def set(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Quaterniond: ...

  @overload
  def setAngleAxis(self, arg0: float, arg1: Vector3dc) -> Quaterniond: ...

  @overload
  def setAngleAxis(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Quaterniond: ...

  @overload
  def setFromNormalized(self, arg0: Matrix3dc) -> Quaterniond: ...

  @overload
  def setFromNormalized(self, arg0: Matrix3fc) -> Quaterniond: ...

  @overload
  def setFromNormalized(self, arg0: Matrix4dc) -> Quaterniond: ...

  @overload
  def setFromNormalized(self, arg0: Matrix4fc) -> Quaterniond: ...

  @overload
  def setFromNormalized(self, arg0: Matrix4x3dc) -> Quaterniond: ...

  @overload
  def setFromNormalized(self, arg0: Matrix4x3fc) -> Quaterniond: ...

  @overload
  def setFromUnnormalized(self, arg0: Matrix3dc) -> Quaterniond: ...

  @overload
  def setFromUnnormalized(self, arg0: Matrix3fc) -> Quaterniond: ...

  @overload
  def setFromUnnormalized(self, arg0: Matrix4dc) -> Quaterniond: ...

  @overload
  def setFromUnnormalized(self, arg0: Matrix4fc) -> Quaterniond: ...

  @overload
  def setFromUnnormalized(self, arg0: Matrix4x3dc) -> Quaterniond: ...

  @overload
  def setFromUnnormalized(self, arg0: Matrix4x3fc) -> Quaterniond: ...

  @overload
  def slerp(self, arg0: Quaterniondc, arg1: float) -> Quaterniond: ...

  @overload
  def slerp(self, arg0: Quaterniondc, arg1: float, arg2: Quaterniond) -> Quaterniond: ...

  @overload
  def slerp(self, arg0: Quaterniondc, arg1: float, arg2: Quaterniond) -> Quaterniond: ...

  @overload
  def toString(self) -> str: ...

  @overload
  def toString(self, arg0: NumberFormat) -> str: ...

  @overload
  def transform(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transform(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transform(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transform(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transform(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transform(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transform(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transform(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transform(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def transform(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def transform(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def transform(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def transform(self, arg0: Vector4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def transform(self, arg0: Vector4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def transform(self, arg0: Vector4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def transform(self, arg0: Vector4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def transform(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def transform(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def transform(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  @overload
  def transform(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  @overload
  def transform(self, arg0: float, arg1: float, arg2: float, arg3: Vector4d) -> Vector4d: ...

  @overload
  def transform(self, arg0: float, arg1: float, arg2: float, arg3: Vector4d) -> Vector4d: ...

  @overload
  def transform(self, arg0: float, arg1: float, arg2: float, arg3: Vector4f) -> Vector4f: ...

  @overload
  def transform(self, arg0: float, arg1: float, arg2: float, arg3: Vector4f) -> Vector4f: ...

  @overload
  def transformInverse(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformInverse(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformInverse(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformInverse(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformInverse(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transformInverse(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transformInverse(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transformInverse(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transformInverse(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def transformInverse(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def transformInverse(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def transformInverse(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def transformInverse(self, arg0: Vector4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def transformInverse(self, arg0: Vector4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def transformInverse(self, arg0: Vector4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def transformInverse(self, arg0: Vector4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def transformInverse(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def transformInverse(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def transformInverse(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  @overload
  def transformInverse(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  @overload
  def transformInverse(self, arg0: float, arg1: float, arg2: float, arg3: Vector4d) -> Vector4d: ...

  @overload
  def transformInverse(self, arg0: float, arg1: float, arg2: float, arg3: Vector4d) -> Vector4d: ...

  @overload
  def transformInverse(self, arg0: float, arg1: float, arg2: float, arg3: Vector4f) -> Vector4f: ...

  @overload
  def transformInverse(self, arg0: float, arg1: float, arg2: float, arg3: Vector4f) -> Vector4f: ...

  @overload
  def transformInverseUnit(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformInverseUnit(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformInverseUnit(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformInverseUnit(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformInverseUnit(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transformInverseUnit(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transformInverseUnit(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transformInverseUnit(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transformInverseUnit(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def transformInverseUnit(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def transformInverseUnit(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def transformInverseUnit(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def transformInverseUnit(self, arg0: Vector4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def transformInverseUnit(self, arg0: Vector4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def transformInverseUnit(self, arg0: Vector4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def transformInverseUnit(self, arg0: Vector4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def transformInverseUnit(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def transformInverseUnit(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def transformInverseUnit(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  @overload
  def transformInverseUnit(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  @overload
  def transformInverseUnit(self, arg0: float, arg1: float, arg2: float, arg3: Vector4d) -> Vector4d: ...

  @overload
  def transformInverseUnit(self, arg0: float, arg1: float, arg2: float, arg3: Vector4d) -> Vector4d: ...

  @overload
  def transformInverseUnit(self, arg0: float, arg1: float, arg2: float, arg3: Vector4f) -> Vector4f: ...

  @overload
  def transformInverseUnit(self, arg0: float, arg1: float, arg2: float, arg3: Vector4f) -> Vector4f: ...

  @overload
  def transformPositiveX(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformPositiveX(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformPositiveX(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformPositiveX(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformPositiveX(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transformPositiveX(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transformPositiveX(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transformPositiveX(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transformPositiveY(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformPositiveY(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformPositiveY(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformPositiveY(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformPositiveY(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transformPositiveY(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transformPositiveY(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transformPositiveY(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transformPositiveZ(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformPositiveZ(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformPositiveZ(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformPositiveZ(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformPositiveZ(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transformPositiveZ(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transformPositiveZ(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transformPositiveZ(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transformUnit(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformUnit(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformUnit(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformUnit(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformUnit(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transformUnit(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transformUnit(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transformUnit(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transformUnit(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def transformUnit(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def transformUnit(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def transformUnit(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def transformUnit(self, arg0: Vector4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def transformUnit(self, arg0: Vector4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def transformUnit(self, arg0: Vector4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def transformUnit(self, arg0: Vector4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def transformUnit(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def transformUnit(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def transformUnit(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  @overload
  def transformUnit(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  @overload
  def transformUnit(self, arg0: float, arg1: float, arg2: float, arg3: Vector4d) -> Vector4d: ...

  @overload
  def transformUnit(self, arg0: float, arg1: float, arg2: float, arg3: Vector4d) -> Vector4d: ...

  @overload
  def transformUnit(self, arg0: float, arg1: float, arg2: float, arg3: Vector4f) -> Vector4f: ...

  @overload
  def transformUnit(self, arg0: float, arg1: float, arg2: float, arg3: Vector4f) -> Vector4f: ...

  @overload
  def transformUnitPositiveX(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformUnitPositiveX(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformUnitPositiveX(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformUnitPositiveX(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformUnitPositiveX(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transformUnitPositiveX(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transformUnitPositiveX(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transformUnitPositiveX(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transformUnitPositiveY(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformUnitPositiveY(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformUnitPositiveY(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformUnitPositiveY(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformUnitPositiveY(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transformUnitPositiveY(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transformUnitPositiveY(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transformUnitPositiveY(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transformUnitPositiveZ(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformUnitPositiveZ(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformUnitPositiveZ(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformUnitPositiveZ(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformUnitPositiveZ(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transformUnitPositiveZ(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transformUnitPositiveZ(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transformUnitPositiveZ(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def w(self) -> float: ...

  @overload
  def w(self) -> float: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def x(self) -> float: ...

  @overload
  def x(self) -> float: ...

  @overload
  def y(self) -> float: ...

  @overload
  def y(self) -> float: ...

  @overload
  def z(self) -> float: ...

  @overload
  def z(self) -> float: ...

  @overload
  def __init__(self):
    self.w: float

    self.x: float

    self.y: float

    self.z: float

  @overload
  def __init__(self, arg0: AxisAngle4d): ...
  @overload
  def __init__(self, arg0: AxisAngle4f): ...
  @overload
  def __init__(self, arg0: Quaterniondc): ...
  @overload
  def __init__(self, arg0: Quaternionfc): ...
  @overload
  def __init__(self, arg0: float, arg1: float, arg2: float, arg3: float): ...


class QuaterniondInterpolator:

  def computeWeightedAverage(self, arg0: list[Quaterniond], arg1: list[float], arg2: int, arg3: Quaterniond) -> Quaterniond: ...

  def __init__(self): ...

  class SvdDecomposition3d: ...


class Quaterniondc:

  @overload
  def add(self, arg0: Quaterniondc, arg1: Quaterniond) -> Quaterniond: ...

  @overload
  def add(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Quaterniond) -> Quaterniond: ...

  def angle(self) -> float: ...

  def conjugate(self, arg0: Quaterniond) -> Quaterniond: ...

  def conjugateBy(self, arg0: Quaterniondc, arg1: Quaterniond) -> Quaterniond: ...

  def difference(self, arg0: Quaterniondc, arg1: Quaterniond) -> Quaterniond: ...

  def div(self, arg0: Quaterniondc, arg1: Quaterniond) -> Quaterniond: ...

  def dot(self, arg0: Quaterniondc) -> float: ...

  @overload
  def equals(self, arg0: Quaterniondc, arg1: float) -> bool: ...

  @overload
  def equals(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool: ...

  @overload
  def get(self, arg0: AxisAngle4d) -> AxisAngle4d: ...

  @overload
  def get(self, arg0: AxisAngle4f) -> AxisAngle4f: ...

  @overload
  def get(self, arg0: Matrix3d) -> Matrix3d: ...

  @overload
  def get(self, arg0: Matrix3f) -> Matrix3f: ...

  @overload
  def get(self, arg0: Matrix4d) -> Matrix4d: ...

  @overload
  def get(self, arg0: Matrix4f) -> Matrix4f: ...

  @overload
  def get(self, arg0: Quaterniond) -> Quaterniond: ...

  @overload
  def get(self, arg0: Quaternionf) -> Quaternionf: ...

  def getEulerAnglesXYZ(self, arg0: Vector3d) -> Vector3d: ...

  def integrate(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Quaterniond) -> Quaterniond: ...

  def invert(self, arg0: Quaterniond) -> Quaterniond: ...

  def isFinite(self) -> bool: ...

  def lengthSquared(self) -> float: ...

  @overload
  def lookAlong(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Quaterniond) -> Quaterniond: ...

  @overload
  def lookAlong(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Quaterniond) -> Quaterniond: ...

  @overload
  def mul(self, arg0: Quaterniondc, arg1: Quaterniond) -> Quaterniond: ...

  @overload
  def mul(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Quaterniond) -> Quaterniond: ...

  def nlerp(self, arg0: Quaterniondc, arg1: float, arg2: Quaterniond) -> Quaterniond: ...

  def nlerpIterative(self, arg0: Quaterniondc, arg1: float, arg2: float, arg3: Quaterniond) -> Quaterniond: ...

  def normalize(self, arg0: Quaterniond) -> Quaterniond: ...

  def normalizedPositiveX(self, arg0: Vector3d) -> Vector3d: ...

  def normalizedPositiveY(self, arg0: Vector3d) -> Vector3d: ...

  def normalizedPositiveZ(self, arg0: Vector3d) -> Vector3d: ...

  def positiveX(self, arg0: Vector3d) -> Vector3d: ...

  def positiveY(self, arg0: Vector3d) -> Vector3d: ...

  def positiveZ(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def premul(self, arg0: Quaterniondc, arg1: Quaterniond) -> Quaterniond: ...

  @overload
  def premul(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Quaterniond) -> Quaterniond: ...

  @overload
  def rotateAxis(self, arg0: float, arg1: Vector3dc, arg2: Quaterniond) -> Quaterniond: ...

  @overload
  def rotateAxis(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Quaterniond) -> Quaterniond: ...

  def rotateLocalX(self, arg0: float, arg1: Quaterniond) -> Quaterniond: ...

  def rotateLocalY(self, arg0: float, arg1: Quaterniond) -> Quaterniond: ...

  def rotateLocalZ(self, arg0: float, arg1: Quaterniond) -> Quaterniond: ...

  @overload
  def rotateTo(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Quaterniond) -> Quaterniond: ...

  @overload
  def rotateTo(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Quaterniond) -> Quaterniond: ...

  def rotateX(self, arg0: float, arg1: Quaterniond) -> Quaterniond: ...

  def rotateXYZ(self, arg0: float, arg1: float, arg2: float, arg3: Quaterniond) -> Quaterniond: ...

  def rotateY(self, arg0: float, arg1: Quaterniond) -> Quaterniond: ...

  def rotateYXZ(self, arg0: float, arg1: float, arg2: float, arg3: Quaterniond) -> Quaterniond: ...

  def rotateZ(self, arg0: float, arg1: Quaterniond) -> Quaterniond: ...

  def rotateZYX(self, arg0: float, arg1: float, arg2: float, arg3: Quaterniond) -> Quaterniond: ...

  def scale(self, arg0: float, arg1: Quaterniond) -> Quaterniond: ...

  def slerp(self, arg0: Quaterniondc, arg1: float, arg2: Quaterniond) -> Quaterniond: ...

  @overload
  def transform(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transform(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transform(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transform(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transform(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def transform(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def transform(self, arg0: Vector4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def transform(self, arg0: Vector4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def transform(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def transform(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  @overload
  def transform(self, arg0: float, arg1: float, arg2: float, arg3: Vector4d) -> Vector4d: ...

  @overload
  def transform(self, arg0: float, arg1: float, arg2: float, arg3: Vector4f) -> Vector4f: ...

  @overload
  def transformInverse(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformInverse(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformInverse(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transformInverse(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transformInverse(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def transformInverse(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def transformInverse(self, arg0: Vector4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def transformInverse(self, arg0: Vector4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def transformInverse(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def transformInverse(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  @overload
  def transformInverse(self, arg0: float, arg1: float, arg2: float, arg3: Vector4d) -> Vector4d: ...

  @overload
  def transformInverse(self, arg0: float, arg1: float, arg2: float, arg3: Vector4f) -> Vector4f: ...

  @overload
  def transformInverseUnit(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformInverseUnit(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformInverseUnit(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transformInverseUnit(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transformInverseUnit(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def transformInverseUnit(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def transformInverseUnit(self, arg0: Vector4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def transformInverseUnit(self, arg0: Vector4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def transformInverseUnit(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def transformInverseUnit(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  @overload
  def transformInverseUnit(self, arg0: float, arg1: float, arg2: float, arg3: Vector4d) -> Vector4d: ...

  @overload
  def transformInverseUnit(self, arg0: float, arg1: float, arg2: float, arg3: Vector4f) -> Vector4f: ...

  @overload
  def transformPositiveX(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformPositiveX(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformPositiveX(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transformPositiveX(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transformPositiveY(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformPositiveY(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformPositiveY(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transformPositiveY(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transformPositiveZ(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformPositiveZ(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformPositiveZ(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transformPositiveZ(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transformUnit(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformUnit(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformUnit(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transformUnit(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transformUnit(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def transformUnit(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def transformUnit(self, arg0: Vector4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def transformUnit(self, arg0: Vector4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def transformUnit(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def transformUnit(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  @overload
  def transformUnit(self, arg0: float, arg1: float, arg2: float, arg3: Vector4d) -> Vector4d: ...

  @overload
  def transformUnit(self, arg0: float, arg1: float, arg2: float, arg3: Vector4f) -> Vector4f: ...

  @overload
  def transformUnitPositiveX(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformUnitPositiveX(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformUnitPositiveX(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transformUnitPositiveX(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transformUnitPositiveY(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformUnitPositiveY(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformUnitPositiveY(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transformUnitPositiveY(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transformUnitPositiveZ(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformUnitPositiveZ(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformUnitPositiveZ(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transformUnitPositiveZ(self, arg0: Vector4f) -> Vector4f: ...

  def w(self) -> float: ...

  def x(self) -> float: ...

  def y(self) -> float: ...

  def z(self) -> float: ...


class Quaternionf:

  @overload
  def add(self, arg0: Quaternionfc) -> Quaternionf: ...

  @overload
  def add(self, arg0: Quaternionfc, arg1: Quaternionf) -> Quaternionf: ...

  @overload
  def add(self, arg0: Quaternionfc, arg1: Quaternionf) -> Quaternionf: ...

  @overload
  def add(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Quaternionf: ...

  @overload
  def add(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Quaternionf) -> Quaternionf: ...

  @overload
  def add(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Quaternionf) -> Quaternionf: ...

  @overload
  def angle(self) -> float: ...

  @overload
  def angle(self) -> float: ...

  @overload
  def conjugate(self) -> Quaternionf: ...

  @overload
  def conjugate(self, arg0: Quaternionf) -> Quaternionf: ...

  @overload
  def conjugate(self, arg0: Quaternionf) -> Quaternionf: ...

  @overload
  def conjugateBy(self, arg0: Quaternionfc) -> Quaternionf: ...

  @overload
  def conjugateBy(self, arg0: Quaternionfc, arg1: Quaternionf) -> Quaternionf: ...

  @overload
  def conjugateBy(self, arg0: Quaternionfc, arg1: Quaternionf) -> Quaternionf: ...

  @overload
  def difference(self, arg0: Quaternionf) -> Quaternionf: ...

  @overload
  def difference(self, arg0: Quaternionfc, arg1: Quaternionf) -> Quaternionf: ...

  @overload
  def difference(self, arg0: Quaternionfc, arg1: Quaternionf) -> Quaternionf: ...

  @overload
  def div(self, arg0: Quaternionfc) -> Quaternionf: ...

  @overload
  def div(self, arg0: Quaternionfc, arg1: Quaternionf) -> Quaternionf: ...

  @overload
  def div(self, arg0: Quaternionfc, arg1: Quaternionf) -> Quaternionf: ...

  def dot(self, arg0: Quaternionf) -> float: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def equals(self, arg0: Quaternionfc, arg1: float) -> bool: ...

  @overload
  def equals(self, arg0: Quaternionfc, arg1: float) -> bool: ...

  @overload
  def equals(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool: ...

  @overload
  def equals(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool: ...

  @overload
  def fromAxisAngleDeg(self, arg0: Vector3fc, arg1: float) -> Quaternionf: ...

  @overload
  def fromAxisAngleDeg(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Quaternionf: ...

  @overload
  def fromAxisAngleRad(self, arg0: Vector3fc, arg1: float) -> Quaternionf: ...

  @overload
  def fromAxisAngleRad(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Quaternionf: ...

  @overload
  def get(self, arg0: AxisAngle4d) -> AxisAngle4d: ...

  @overload
  def get(self, arg0: AxisAngle4d) -> AxisAngle4d: ...

  @overload
  def get(self, arg0: AxisAngle4f) -> AxisAngle4f: ...

  @overload
  def get(self, arg0: AxisAngle4f) -> AxisAngle4f: ...

  @overload
  def get(self, arg0: Matrix3d) -> Matrix3d: ...

  @overload
  def get(self, arg0: Matrix3d) -> Matrix3d: ...

  @overload
  def get(self, arg0: Matrix3f) -> Matrix3f: ...

  @overload
  def get(self, arg0: Matrix3f) -> Matrix3f: ...

  @overload
  def get(self, arg0: Matrix4d) -> Matrix4d: ...

  @overload
  def get(self, arg0: Matrix4d) -> Matrix4d: ...

  @overload
  def get(self, arg0: Matrix4f) -> Matrix4f: ...

  @overload
  def get(self, arg0: Matrix4f) -> Matrix4f: ...

  @overload
  def get(self, arg0: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def get(self, arg0: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def get(self, arg0: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def get(self, arg0: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def get(self, arg0: Quaterniond) -> Quaterniond: ...

  @overload
  def get(self, arg0: Quaterniond) -> Quaterniond: ...

  @overload
  def get(self, arg0: Quaternionf) -> Quaternionf: ...

  @overload
  def get(self, arg0: Quaternionf) -> Quaternionf: ...

  @overload
  def getAsMatrix3f(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getAsMatrix3f(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getAsMatrix3f(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def getAsMatrix3f(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def getAsMatrix4f(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getAsMatrix4f(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getAsMatrix4f(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def getAsMatrix4f(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def getAsMatrix4x3f(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getAsMatrix4x3f(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getAsMatrix4x3f(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def getAsMatrix4x3f(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def getEulerAnglesXYZ(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def getEulerAnglesXYZ(self, arg0: Vector3f) -> Vector3f: ...

  def hashCode(self) -> int: ...

  def identity(self) -> Quaternionf: ...

  @overload
  def integrate(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Quaternionf: ...

  @overload
  def integrate(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Quaternionf) -> Quaternionf: ...

  @overload
  def integrate(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Quaternionf) -> Quaternionf: ...

  @overload
  def invert(self) -> Quaternionf: ...

  @overload
  def invert(self, arg0: Quaternionf) -> Quaternionf: ...

  @overload
  def invert(self, arg0: Quaternionf) -> Quaternionf: ...

  @overload
  def isFinite(self) -> bool: ...

  @overload
  def isFinite(self) -> bool: ...

  @overload
  def lengthSquared(self) -> float: ...

  @overload
  def lengthSquared(self) -> float: ...

  @overload
  def lookAlong(self, arg0: Vector3fc, arg1: Vector3fc) -> Quaternionf: ...

  @overload
  def lookAlong(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Quaternionf) -> Quaternionf: ...

  @overload
  def lookAlong(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Quaternionf) -> Quaternionf: ...

  @overload
  def lookAlong(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Quaternionf: ...

  @overload
  def lookAlong(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Quaternionf) -> Quaternionf: ...

  @overload
  def lookAlong(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Quaternionf) -> Quaternionf: ...

  @overload
  def mul(self, arg0: Quaternionfc) -> Quaternionf: ...

  @overload
  def mul(self, arg0: Quaternionfc, arg1: Quaternionf) -> Quaternionf: ...

  @overload
  def mul(self, arg0: Quaternionfc, arg1: Quaternionf) -> Quaternionf: ...

  @overload
  def mul(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Quaternionf: ...

  @overload
  def mul(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Quaternionf) -> Quaternionf: ...

  @overload
  def mul(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Quaternionf) -> Quaternionf: ...

  @overload
  def nlerp(self, arg0: Quaternionfc, arg1: float) -> Quaternionf: ...

  @overload
  def nlerp(self, arg0: Quaternionfc, arg1: float, arg2: Quaternionf) -> Quaternionf: ...

  @overload
  def nlerp(self, arg0: Quaternionfc, arg1: float, arg2: Quaternionf) -> Quaternionf: ...

  @overload
  def nlerpIterative(self, arg0: Quaternionfc, arg1: float, arg2: float) -> Quaternionf: ...

  @overload
  def nlerpIterative(self, arg0: Quaternionfc, arg1: float, arg2: float, arg3: Quaternionf) -> Quaternionf: ...

  @overload
  def nlerpIterative(self, arg0: Quaternionfc, arg1: float, arg2: float, arg3: Quaternionf) -> Quaternionf: ...

  @overload
  def normalize(self) -> Quaternionf: ...

  @overload
  def normalize(self, arg0: Quaternionf) -> Quaternionf: ...

  @overload
  def normalize(self, arg0: Quaternionf) -> Quaternionf: ...

  @overload
  def normalizedPositiveX(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def normalizedPositiveX(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def normalizedPositiveY(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def normalizedPositiveY(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def normalizedPositiveZ(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def normalizedPositiveZ(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def positiveX(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def positiveX(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def positiveY(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def positiveY(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def positiveZ(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def positiveZ(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def premul(self, arg0: Quaternionfc) -> Quaternionf: ...

  @overload
  def premul(self, arg0: Quaternionfc, arg1: Quaternionf) -> Quaternionf: ...

  @overload
  def premul(self, arg0: Quaternionfc, arg1: Quaternionf) -> Quaternionf: ...

  @overload
  def premul(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Quaternionf: ...

  @overload
  def premul(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Quaternionf) -> Quaternionf: ...

  @overload
  def premul(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Quaternionf) -> Quaternionf: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def rotateAxis(self, arg0: float, arg1: Vector3fc) -> Quaternionf: ...

  @overload
  def rotateAxis(self, arg0: float, arg1: Vector3fc, arg2: Quaternionf) -> Quaternionf: ...

  @overload
  def rotateAxis(self, arg0: float, arg1: Vector3fc, arg2: Quaternionf) -> Quaternionf: ...

  @overload
  def rotateAxis(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Quaternionf: ...

  @overload
  def rotateAxis(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Quaternionf) -> Quaternionf: ...

  @overload
  def rotateAxis(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Quaternionf) -> Quaternionf: ...

  @overload
  def rotateLocalX(self, arg0: float) -> Quaternionf: ...

  @overload
  def rotateLocalX(self, arg0: float, arg1: Quaternionf) -> Quaternionf: ...

  @overload
  def rotateLocalX(self, arg0: float, arg1: Quaternionf) -> Quaternionf: ...

  @overload
  def rotateLocalY(self, arg0: float) -> Quaternionf: ...

  @overload
  def rotateLocalY(self, arg0: float, arg1: Quaternionf) -> Quaternionf: ...

  @overload
  def rotateLocalY(self, arg0: float, arg1: Quaternionf) -> Quaternionf: ...

  @overload
  def rotateLocalZ(self, arg0: float) -> Quaternionf: ...

  @overload
  def rotateLocalZ(self, arg0: float, arg1: Quaternionf) -> Quaternionf: ...

  @overload
  def rotateLocalZ(self, arg0: float, arg1: Quaternionf) -> Quaternionf: ...

  @overload
  def rotateTo(self, arg0: Vector3fc, arg1: Vector3fc) -> Quaternionf: ...

  @overload
  def rotateTo(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Quaternionf) -> Quaternionf: ...

  @overload
  def rotateTo(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Quaternionf) -> Quaternionf: ...

  @overload
  def rotateTo(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Quaternionf: ...

  @overload
  def rotateTo(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Quaternionf) -> Quaternionf: ...

  @overload
  def rotateTo(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Quaternionf) -> Quaternionf: ...

  @overload
  def rotateX(self, arg0: float) -> Quaternionf: ...

  @overload
  def rotateX(self, arg0: float, arg1: Quaternionf) -> Quaternionf: ...

  @overload
  def rotateX(self, arg0: float, arg1: Quaternionf) -> Quaternionf: ...

  @overload
  def rotateXYZ(self, arg0: float, arg1: float, arg2: float) -> Quaternionf: ...

  @overload
  def rotateXYZ(self, arg0: float, arg1: float, arg2: float, arg3: Quaternionf) -> Quaternionf: ...

  @overload
  def rotateXYZ(self, arg0: float, arg1: float, arg2: float, arg3: Quaternionf) -> Quaternionf: ...

  @overload
  def rotateY(self, arg0: float) -> Quaternionf: ...

  @overload
  def rotateY(self, arg0: float, arg1: Quaternionf) -> Quaternionf: ...

  @overload
  def rotateY(self, arg0: float, arg1: Quaternionf) -> Quaternionf: ...

  @overload
  def rotateYXZ(self, arg0: float, arg1: float, arg2: float) -> Quaternionf: ...

  @overload
  def rotateYXZ(self, arg0: float, arg1: float, arg2: float, arg3: Quaternionf) -> Quaternionf: ...

  @overload
  def rotateYXZ(self, arg0: float, arg1: float, arg2: float, arg3: Quaternionf) -> Quaternionf: ...

  @overload
  def rotateZ(self, arg0: float) -> Quaternionf: ...

  @overload
  def rotateZ(self, arg0: float, arg1: Quaternionf) -> Quaternionf: ...

  @overload
  def rotateZ(self, arg0: float, arg1: Quaternionf) -> Quaternionf: ...

  @overload
  def rotateZYX(self, arg0: float, arg1: float, arg2: float) -> Quaternionf: ...

  @overload
  def rotateZYX(self, arg0: float, arg1: float, arg2: float, arg3: Quaternionf) -> Quaternionf: ...

  @overload
  def rotateZYX(self, arg0: float, arg1: float, arg2: float, arg3: Quaternionf) -> Quaternionf: ...

  @overload
  def rotationAxis(self, arg0: AxisAngle4f) -> Quaternionf: ...

  @overload
  def rotationAxis(self, arg0: float, arg1: Vector3fc) -> Quaternionf: ...

  @overload
  def rotationAxis(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Quaternionf: ...

  @overload
  def rotationTo(self, arg0: Vector3fc, arg1: Vector3fc) -> Quaternionf: ...

  @overload
  def rotationTo(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> Quaternionf: ...

  def rotationX(self, arg0: float) -> Quaternionf: ...

  def rotationXYZ(self, arg0: float, arg1: float, arg2: float) -> Quaternionf: ...

  def rotationY(self, arg0: float) -> Quaternionf: ...

  def rotationYXZ(self, arg0: float, arg1: float, arg2: float) -> Quaternionf: ...

  def rotationZ(self, arg0: float) -> Quaternionf: ...

  def rotationZYX(self, arg0: float, arg1: float, arg2: float) -> Quaternionf: ...

  @overload
  def scale(self, arg0: float) -> Quaternionf: ...

  @overload
  def scale(self, arg0: float, arg1: Quaternionf) -> Quaternionf: ...

  @overload
  def scale(self, arg0: float, arg1: Quaternionf) -> Quaternionf: ...

  def scaling(self, arg0: float) -> Quaternionf: ...

  @overload
  def set(self, arg0: AxisAngle4d) -> Quaternionf: ...

  @overload
  def set(self, arg0: AxisAngle4f) -> Quaternionf: ...

  @overload
  def set(self, arg0: Quaterniondc) -> Quaternionf: ...

  @overload
  def set(self, arg0: Quaternionfc) -> Quaternionf: ...

  @overload
  def set(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Quaternionf: ...

  @overload
  def setAngleAxis(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Quaternionf: ...

  @overload
  def setAngleAxis(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Quaternionf: ...

  @overload
  def setFromNormalized(self, arg0: Matrix3dc) -> Quaternionf: ...

  @overload
  def setFromNormalized(self, arg0: Matrix3fc) -> Quaternionf: ...

  @overload
  def setFromNormalized(self, arg0: Matrix4dc) -> Quaternionf: ...

  @overload
  def setFromNormalized(self, arg0: Matrix4fc) -> Quaternionf: ...

  @overload
  def setFromNormalized(self, arg0: Matrix4x3dc) -> Quaternionf: ...

  @overload
  def setFromNormalized(self, arg0: Matrix4x3fc) -> Quaternionf: ...

  @overload
  def setFromUnnormalized(self, arg0: Matrix3dc) -> Quaternionf: ...

  @overload
  def setFromUnnormalized(self, arg0: Matrix3fc) -> Quaternionf: ...

  @overload
  def setFromUnnormalized(self, arg0: Matrix4dc) -> Quaternionf: ...

  @overload
  def setFromUnnormalized(self, arg0: Matrix4fc) -> Quaternionf: ...

  @overload
  def setFromUnnormalized(self, arg0: Matrix4x3dc) -> Quaternionf: ...

  @overload
  def setFromUnnormalized(self, arg0: Matrix4x3fc) -> Quaternionf: ...

  @overload
  def slerp(self, arg0: Quaternionfc, arg1: float) -> Quaternionf: ...

  @overload
  def slerp(self, arg0: Quaternionfc, arg1: float, arg2: Quaternionf) -> Quaternionf: ...

  @overload
  def slerp(self, arg0: Quaternionfc, arg1: float, arg2: Quaternionf) -> Quaternionf: ...

  @overload
  def toString(self) -> str: ...

  @overload
  def toString(self, arg0: NumberFormat) -> str: ...

  @overload
  def transform(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transform(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transform(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transform(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transform(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transform(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transform(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transform(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transform(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def transform(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def transform(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def transform(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def transform(self, arg0: Vector4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def transform(self, arg0: Vector4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def transform(self, arg0: Vector4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def transform(self, arg0: Vector4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def transform(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def transform(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def transform(self, arg0: float, arg1: float, arg2: float, arg3: Vector4d) -> Vector4d: ...

  @overload
  def transform(self, arg0: float, arg1: float, arg2: float, arg3: Vector4d) -> Vector4d: ...

  @overload
  def transform(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def transform(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def transform(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  @overload
  def transform(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  @overload
  def transform(self, arg0: float, arg1: float, arg2: float, arg3: Vector4f) -> Vector4f: ...

  @overload
  def transform(self, arg0: float, arg1: float, arg2: float, arg3: Vector4f) -> Vector4f: ...

  @overload
  def transformInverse(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformInverse(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformInverse(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformInverse(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformInverse(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transformInverse(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transformInverse(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transformInverse(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transformInverse(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def transformInverse(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def transformInverse(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def transformInverse(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def transformInverse(self, arg0: Vector4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def transformInverse(self, arg0: Vector4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def transformInverse(self, arg0: Vector4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def transformInverse(self, arg0: Vector4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def transformInverse(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def transformInverse(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def transformInverse(self, arg0: float, arg1: float, arg2: float, arg3: Vector4d) -> Vector4d: ...

  @overload
  def transformInverse(self, arg0: float, arg1: float, arg2: float, arg3: Vector4d) -> Vector4d: ...

  @overload
  def transformInverse(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def transformInverse(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def transformInverse(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  @overload
  def transformInverse(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  @overload
  def transformInverse(self, arg0: float, arg1: float, arg2: float, arg3: Vector4f) -> Vector4f: ...

  @overload
  def transformInverse(self, arg0: float, arg1: float, arg2: float, arg3: Vector4f) -> Vector4f: ...

  @overload
  def transformInverseUnit(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformInverseUnit(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformInverseUnit(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transformInverseUnit(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transformInverseUnit(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transformInverseUnit(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transformInverseUnit(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def transformInverseUnit(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def transformInverseUnit(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def transformInverseUnit(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def transformInverseUnit(self, arg0: Vector4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def transformInverseUnit(self, arg0: Vector4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def transformInverseUnit(self, arg0: Vector4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def transformInverseUnit(self, arg0: Vector4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def transformInverseUnit(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def transformInverseUnit(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def transformInverseUnit(self, arg0: float, arg1: float, arg2: float, arg3: Vector4d) -> Vector4d: ...

  @overload
  def transformInverseUnit(self, arg0: float, arg1: float, arg2: float, arg3: Vector4d) -> Vector4d: ...

  @overload
  def transformInverseUnit(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def transformInverseUnit(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def transformInverseUnit(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  @overload
  def transformInverseUnit(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  @overload
  def transformInverseUnit(self, arg0: float, arg1: float, arg2: float, arg3: Vector4f) -> Vector4f: ...

  @overload
  def transformInverseUnit(self, arg0: float, arg1: float, arg2: float, arg3: Vector4f) -> Vector4f: ...

  @overload
  def transformPositiveX(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformPositiveX(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformPositiveX(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformPositiveX(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformPositiveX(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transformPositiveX(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transformPositiveX(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transformPositiveX(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transformPositiveY(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformPositiveY(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformPositiveY(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformPositiveY(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformPositiveY(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transformPositiveY(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transformPositiveY(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transformPositiveY(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transformPositiveZ(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformPositiveZ(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformPositiveZ(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformPositiveZ(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformPositiveZ(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transformPositiveZ(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transformPositiveZ(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transformPositiveZ(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transformUnit(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformUnit(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformUnit(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transformUnit(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transformUnit(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transformUnit(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transformUnit(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def transformUnit(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def transformUnit(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def transformUnit(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def transformUnit(self, arg0: Vector4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def transformUnit(self, arg0: Vector4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def transformUnit(self, arg0: Vector4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def transformUnit(self, arg0: Vector4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def transformUnit(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def transformUnit(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def transformUnit(self, arg0: float, arg1: float, arg2: float, arg3: Vector4d) -> Vector4d: ...

  @overload
  def transformUnit(self, arg0: float, arg1: float, arg2: float, arg3: Vector4d) -> Vector4d: ...

  @overload
  def transformUnit(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def transformUnit(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def transformUnit(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  @overload
  def transformUnit(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  @overload
  def transformUnit(self, arg0: float, arg1: float, arg2: float, arg3: Vector4f) -> Vector4f: ...

  @overload
  def transformUnit(self, arg0: float, arg1: float, arg2: float, arg3: Vector4f) -> Vector4f: ...

  @overload
  def transformUnitPositiveX(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformUnitPositiveX(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformUnitPositiveX(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformUnitPositiveX(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformUnitPositiveX(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transformUnitPositiveX(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transformUnitPositiveX(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transformUnitPositiveX(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transformUnitPositiveY(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformUnitPositiveY(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformUnitPositiveY(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformUnitPositiveY(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformUnitPositiveY(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transformUnitPositiveY(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transformUnitPositiveY(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transformUnitPositiveY(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transformUnitPositiveZ(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformUnitPositiveZ(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformUnitPositiveZ(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformUnitPositiveZ(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformUnitPositiveZ(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transformUnitPositiveZ(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transformUnitPositiveZ(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transformUnitPositiveZ(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def w(self) -> float: ...

  @overload
  def w(self) -> float: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def x(self) -> float: ...

  @overload
  def x(self) -> float: ...

  @overload
  def y(self) -> float: ...

  @overload
  def y(self) -> float: ...

  @overload
  def z(self) -> float: ...

  @overload
  def z(self) -> float: ...

  @overload
  def __init__(self):
    self.w: float

    self.x: float

    self.y: float

    self.z: float

  @overload
  def __init__(self, arg0: AxisAngle4d): ...
  @overload
  def __init__(self, arg0: AxisAngle4f): ...
  @overload
  def __init__(self, arg0: Quaterniondc): ...
  @overload
  def __init__(self, arg0: Quaternionfc): ...
  @overload
  def __init__(self, arg0: float, arg1: float, arg2: float, arg3: float): ...
  @overload
  def __init__(self, arg0: float, arg1: float, arg2: float, arg3: float): ...


class QuaternionfInterpolator:

  def computeWeightedAverage(self, arg0: list[Quaternionfc], arg1: list[float], arg2: int, arg3: Quaternionf) -> Quaternionf: ...

  def __init__(self): ...

  class SvdDecomposition3f: ...


class Quaternionfc:

  @overload
  def add(self, arg0: Quaternionfc, arg1: Quaternionf) -> Quaternionf: ...

  @overload
  def add(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Quaternionf) -> Quaternionf: ...

  def angle(self) -> float: ...

  def conjugate(self, arg0: Quaternionf) -> Quaternionf: ...

  def conjugateBy(self, arg0: Quaternionfc, arg1: Quaternionf) -> Quaternionf: ...

  def difference(self, arg0: Quaternionfc, arg1: Quaternionf) -> Quaternionf: ...

  def div(self, arg0: Quaternionfc, arg1: Quaternionf) -> Quaternionf: ...

  @overload
  def equals(self, arg0: Quaternionfc, arg1: float) -> bool: ...

  @overload
  def equals(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool: ...

  @overload
  def get(self, arg0: AxisAngle4d) -> AxisAngle4d: ...

  @overload
  def get(self, arg0: AxisAngle4f) -> AxisAngle4f: ...

  @overload
  def get(self, arg0: Matrix3d) -> Matrix3d: ...

  @overload
  def get(self, arg0: Matrix3f) -> Matrix3f: ...

  @overload
  def get(self, arg0: Matrix4d) -> Matrix4d: ...

  @overload
  def get(self, arg0: Matrix4f) -> Matrix4f: ...

  @overload
  def get(self, arg0: Matrix4x3d) -> Matrix4x3d: ...

  @overload
  def get(self, arg0: Matrix4x3f) -> Matrix4x3f: ...

  @overload
  def get(self, arg0: Quaterniond) -> Quaterniond: ...

  @overload
  def get(self, arg0: Quaternionf) -> Quaternionf: ...

  @overload
  def getAsMatrix3f(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getAsMatrix3f(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def getAsMatrix4f(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getAsMatrix4f(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def getAsMatrix4x3f(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getAsMatrix4x3f(self, arg0: FloatBuffer) -> FloatBuffer: ...

  def getEulerAnglesXYZ(self, arg0: Vector3f) -> Vector3f: ...

  def integrate(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Quaternionf) -> Quaternionf: ...

  def invert(self, arg0: Quaternionf) -> Quaternionf: ...

  def isFinite(self) -> bool: ...

  def lengthSquared(self) -> float: ...

  @overload
  def lookAlong(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Quaternionf) -> Quaternionf: ...

  @overload
  def lookAlong(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Quaternionf) -> Quaternionf: ...

  @overload
  def mul(self, arg0: Quaternionfc, arg1: Quaternionf) -> Quaternionf: ...

  @overload
  def mul(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Quaternionf) -> Quaternionf: ...

  def nlerp(self, arg0: Quaternionfc, arg1: float, arg2: Quaternionf) -> Quaternionf: ...

  def nlerpIterative(self, arg0: Quaternionfc, arg1: float, arg2: float, arg3: Quaternionf) -> Quaternionf: ...

  def normalize(self, arg0: Quaternionf) -> Quaternionf: ...

  def normalizedPositiveX(self, arg0: Vector3f) -> Vector3f: ...

  def normalizedPositiveY(self, arg0: Vector3f) -> Vector3f: ...

  def normalizedPositiveZ(self, arg0: Vector3f) -> Vector3f: ...

  def positiveX(self, arg0: Vector3f) -> Vector3f: ...

  def positiveY(self, arg0: Vector3f) -> Vector3f: ...

  def positiveZ(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def premul(self, arg0: Quaternionfc, arg1: Quaternionf) -> Quaternionf: ...

  @overload
  def premul(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Quaternionf) -> Quaternionf: ...

  @overload
  def rotateAxis(self, arg0: float, arg1: Vector3fc, arg2: Quaternionf) -> Quaternionf: ...

  @overload
  def rotateAxis(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Quaternionf) -> Quaternionf: ...

  def rotateLocalX(self, arg0: float, arg1: Quaternionf) -> Quaternionf: ...

  def rotateLocalY(self, arg0: float, arg1: Quaternionf) -> Quaternionf: ...

  def rotateLocalZ(self, arg0: float, arg1: Quaternionf) -> Quaternionf: ...

  @overload
  def rotateTo(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Quaternionf) -> Quaternionf: ...

  @overload
  def rotateTo(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: Quaternionf) -> Quaternionf: ...

  def rotateX(self, arg0: float, arg1: Quaternionf) -> Quaternionf: ...

  def rotateXYZ(self, arg0: float, arg1: float, arg2: float, arg3: Quaternionf) -> Quaternionf: ...

  def rotateY(self, arg0: float, arg1: Quaternionf) -> Quaternionf: ...

  def rotateYXZ(self, arg0: float, arg1: float, arg2: float, arg3: Quaternionf) -> Quaternionf: ...

  def rotateZ(self, arg0: float, arg1: Quaternionf) -> Quaternionf: ...

  def rotateZYX(self, arg0: float, arg1: float, arg2: float, arg3: Quaternionf) -> Quaternionf: ...

  def scale(self, arg0: float, arg1: Quaternionf) -> Quaternionf: ...

  def slerp(self, arg0: Quaternionfc, arg1: float, arg2: Quaternionf) -> Quaternionf: ...

  @overload
  def transform(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transform(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transform(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transform(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transform(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def transform(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def transform(self, arg0: Vector4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def transform(self, arg0: Vector4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def transform(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def transform(self, arg0: float, arg1: float, arg2: float, arg3: Vector4d) -> Vector4d: ...

  @overload
  def transform(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def transform(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  @overload
  def transform(self, arg0: float, arg1: float, arg2: float, arg3: Vector4f) -> Vector4f: ...

  @overload
  def transformInverse(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformInverse(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformInverse(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transformInverse(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transformInverse(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def transformInverse(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def transformInverse(self, arg0: Vector4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def transformInverse(self, arg0: Vector4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def transformInverse(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def transformInverse(self, arg0: float, arg1: float, arg2: float, arg3: Vector4d) -> Vector4d: ...

  @overload
  def transformInverse(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def transformInverse(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  @overload
  def transformInverse(self, arg0: float, arg1: float, arg2: float, arg3: Vector4f) -> Vector4f: ...

  @overload
  def transformInverseUnit(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformInverseUnit(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transformInverseUnit(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transformInverseUnit(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def transformInverseUnit(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def transformInverseUnit(self, arg0: Vector4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def transformInverseUnit(self, arg0: Vector4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def transformInverseUnit(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def transformInverseUnit(self, arg0: float, arg1: float, arg2: float, arg3: Vector4d) -> Vector4d: ...

  @overload
  def transformInverseUnit(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def transformInverseUnit(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  @overload
  def transformInverseUnit(self, arg0: float, arg1: float, arg2: float, arg3: Vector4f) -> Vector4f: ...

  @overload
  def transformPositiveX(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformPositiveX(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformPositiveX(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transformPositiveX(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transformPositiveY(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformPositiveY(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformPositiveY(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transformPositiveY(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transformPositiveZ(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformPositiveZ(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformPositiveZ(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transformPositiveZ(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transformUnit(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformUnit(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transformUnit(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transformUnit(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def transformUnit(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def transformUnit(self, arg0: Vector4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def transformUnit(self, arg0: Vector4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def transformUnit(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def transformUnit(self, arg0: float, arg1: float, arg2: float, arg3: Vector4d) -> Vector4d: ...

  @overload
  def transformUnit(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def transformUnit(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  @overload
  def transformUnit(self, arg0: float, arg1: float, arg2: float, arg3: Vector4f) -> Vector4f: ...

  @overload
  def transformUnitPositiveX(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformUnitPositiveX(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformUnitPositiveX(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transformUnitPositiveX(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transformUnitPositiveY(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformUnitPositiveY(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformUnitPositiveY(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transformUnitPositiveY(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def transformUnitPositiveZ(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def transformUnitPositiveZ(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def transformUnitPositiveZ(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def transformUnitPositiveZ(self, arg0: Vector4f) -> Vector4f: ...

  def w(self) -> float: ...

  def x(self) -> float: ...

  def y(self) -> float: ...

  def z(self) -> float: ...


class Random:

  def nextFloat(self) -> float: ...

  def nextInt(self, arg0: int) -> int: ...

  @staticmethod
  def newSeed() -> int: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: int): ...

  class Xorshiro128: ...


class RayAabIntersection:

  def set(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> None: ...

  def test(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> bool: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float): ...


class RoundingMode:

  CEILING: int

  FLOOR: int

  HALF_DOWN: int

  HALF_EVEN: int

  HALF_UP: int

  TRUNCATE: int


class Runtime:

  HAS_doubleToRawLongBits: bool

  HAS_floatToRawIntBits: bool

  HAS_Long_rotateLeft: bool

  HAS_Math_fma: bool

  @staticmethod
  def doubleToLongBits(arg0: float) -> int: ...

  @staticmethod
  @overload
  def equals(arg0: float, arg1: float, arg2: float) -> bool: ...

  @staticmethod
  @overload
  def equals(arg0: float, arg1: float, arg2: float) -> bool: ...

  @staticmethod
  def floatToIntBits(arg0: float) -> int: ...

  @staticmethod
  def format(arg0: float, arg1: NumberFormat) -> str: ...

  @staticmethod
  def formatNumbers(arg0: str) -> str: ...


class SimplexNoise:

  @staticmethod
  @overload
  def noise(arg0: float, arg1: float) -> float: ...

  @staticmethod
  @overload
  def noise(arg0: float, arg1: float, arg2: float) -> float: ...

  @staticmethod
  @overload
  def noise(arg0: float, arg1: float, arg2: float, arg3: float) -> float: ...

  def __init__(self): ...

  class Vector3b: ...

  class Vector4b: ...


class Vector2d:

  @overload
  def absolute(self) -> Vector2d: ...

  @overload
  def absolute(self, arg0: Vector2d) -> Vector2d: ...

  @overload
  def absolute(self, arg0: Vector2d) -> Vector2d: ...

  @overload
  def add(self, arg0: Vector2dc) -> Vector2d: ...

  @overload
  def add(self, arg0: Vector2fc) -> Vector2d: ...

  @overload
  def add(self, arg0: float, arg1: float) -> Vector2d: ...

  @overload
  def add(self, arg0: Vector2dc, arg1: Vector2d) -> Vector2d: ...

  @overload
  def add(self, arg0: Vector2dc, arg1: Vector2d) -> Vector2d: ...

  @overload
  def add(self, arg0: Vector2fc, arg1: Vector2d) -> Vector2d: ...

  @overload
  def add(self, arg0: Vector2fc, arg1: Vector2d) -> Vector2d: ...

  @overload
  def add(self, arg0: float, arg1: float, arg2: Vector2d) -> Vector2d: ...

  @overload
  def add(self, arg0: float, arg1: float, arg2: Vector2d) -> Vector2d: ...

  @overload
  def angle(self, arg0: Vector2dc) -> float: ...

  @overload
  def angle(self, arg0: Vector2dc) -> float: ...

  @overload
  def ceil(self) -> Vector2d: ...

  @overload
  def ceil(self, arg0: Vector2d) -> Vector2d: ...

  @overload
  def ceil(self, arg0: Vector2d) -> Vector2d: ...

  @overload
  def distance(self, arg0: Vector2dc) -> float: ...

  @overload
  def distance(self, arg0: Vector2dc) -> float: ...

  @overload
  def distance(self, arg0: Vector2fc) -> float: ...

  @overload
  def distance(self, arg0: Vector2fc) -> float: ...

  @overload
  def distance(self, arg0: float, arg1: float) -> float: ...

  @overload
  def distance(self, arg0: float, arg1: float) -> float: ...

  @overload
  def distanceSquared(self, arg0: Vector2dc) -> float: ...

  @overload
  def distanceSquared(self, arg0: Vector2dc) -> float: ...

  @overload
  def distanceSquared(self, arg0: Vector2fc) -> float: ...

  @overload
  def distanceSquared(self, arg0: Vector2fc) -> float: ...

  @overload
  def distanceSquared(self, arg0: float, arg1: float) -> float: ...

  @overload
  def distanceSquared(self, arg0: float, arg1: float) -> float: ...

  @overload
  def div(self, arg0: float) -> Vector2d: ...

  @overload
  def div(self, arg0: Vector2d) -> Vector2d: ...

  @overload
  def div(self, arg0: Vector2fc) -> Vector2d: ...

  @overload
  def div(self, arg0: float, arg1: float) -> Vector2d: ...

  @overload
  def div(self, arg0: float, arg1: Vector2d) -> Vector2d: ...

  @overload
  def div(self, arg0: float, arg1: Vector2d) -> Vector2d: ...

  @overload
  def div(self, arg0: Vector2dc, arg1: Vector2d) -> Vector2d: ...

  @overload
  def div(self, arg0: Vector2dc, arg1: Vector2d) -> Vector2d: ...

  @overload
  def div(self, arg0: Vector2fc, arg1: Vector2d) -> Vector2d: ...

  @overload
  def div(self, arg0: Vector2fc, arg1: Vector2d) -> Vector2d: ...

  @overload
  def div(self, arg0: float, arg1: float, arg2: Vector2d) -> Vector2d: ...

  @overload
  def div(self, arg0: float, arg1: float, arg2: Vector2d) -> Vector2d: ...

  @overload
  def dot(self, arg0: Vector2dc) -> float: ...

  @overload
  def dot(self, arg0: Vector2dc) -> float: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def equals(self, arg0: float, arg1: float) -> bool: ...

  @overload
  def equals(self, arg0: float, arg1: float) -> bool: ...

  @overload
  def equals(self, arg0: Vector2dc, arg1: float) -> bool: ...

  @overload
  def equals(self, arg0: Vector2dc, arg1: float) -> bool: ...

  @overload
  def floor(self) -> Vector2d: ...

  @overload
  def floor(self, arg0: Vector2d) -> Vector2d: ...

  @overload
  def floor(self, arg0: Vector2d) -> Vector2d: ...

  @overload
  def fma(self, arg0: float, arg1: Vector2dc) -> Vector2d: ...

  @overload
  def fma(self, arg0: Vector2dc, arg1: Vector2dc) -> Vector2d: ...

  @overload
  def fma(self, arg0: float, arg1: Vector2dc, arg2: Vector2d) -> Vector2d: ...

  @overload
  def fma(self, arg0: float, arg1: Vector2dc, arg2: Vector2d) -> Vector2d: ...

  @overload
  def fma(self, arg0: Vector2dc, arg1: Vector2dc, arg2: Vector2d) -> Vector2d: ...

  @overload
  def fma(self, arg0: Vector2dc, arg1: Vector2dc, arg2: Vector2d) -> Vector2d: ...

  @overload
  def get(self, arg0: int) -> float: ...

  @overload
  def get(self, arg0: int) -> float: ...

  @overload
  def get(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def get(self, arg0: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def get(self, arg0: Vector2d) -> Vector2d: ...

  @overload
  def get(self, arg0: Vector2d) -> Vector2d: ...

  @overload
  def get(self, arg0: Vector2f) -> Vector2f: ...

  @overload
  def get(self, arg0: Vector2f) -> Vector2f: ...

  @overload
  def get(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: int, arg1: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def get(self, arg0: int, arg1: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def get(self, arg0: int, arg1: Vector2i) -> Vector2i: ...

  @overload
  def get(self, arg0: int, arg1: Vector2i) -> Vector2i: ...

  @overload
  def getToAddress(self, arg0: int) -> Vector2dc: ...

  @overload
  def getToAddress(self, arg0: int) -> Vector2dc: ...

  def hashCode(self) -> int: ...

  @overload
  def isFinite(self) -> bool: ...

  @overload
  def isFinite(self) -> bool: ...

  @overload
  def length(self) -> float: ...

  @overload
  def length(self) -> float: ...

  @overload
  def lengthSquared(self) -> float: ...

  @overload
  def lengthSquared(self) -> float: ...

  @overload
  def lerp(self, arg0: Vector2dc, arg1: float) -> Vector2d: ...

  @overload
  def lerp(self, arg0: Vector2dc, arg1: float, arg2: Vector2d) -> Vector2d: ...

  @overload
  def lerp(self, arg0: Vector2dc, arg1: float, arg2: Vector2d) -> Vector2d: ...

  @overload
  def max(self, arg0: Vector2dc) -> Vector2d: ...

  @overload
  def max(self, arg0: Vector2dc, arg1: Vector2d) -> Vector2d: ...

  @overload
  def max(self, arg0: Vector2dc, arg1: Vector2d) -> Vector2d: ...

  @overload
  def maxComponent(self) -> int: ...

  @overload
  def maxComponent(self) -> int: ...

  @overload
  def min(self, arg0: Vector2dc) -> Vector2d: ...

  @overload
  def min(self, arg0: Vector2dc, arg1: Vector2d) -> Vector2d: ...

  @overload
  def min(self, arg0: Vector2dc, arg1: Vector2d) -> Vector2d: ...

  @overload
  def minComponent(self) -> int: ...

  @overload
  def minComponent(self) -> int: ...

  @overload
  def mul(self, arg0: float) -> Vector2d: ...

  @overload
  def mul(self, arg0: Matrix2dc) -> Vector2d: ...

  @overload
  def mul(self, arg0: Matrix2fc) -> Vector2d: ...

  @overload
  def mul(self, arg0: Vector2dc) -> Vector2d: ...

  @overload
  def mul(self, arg0: float, arg1: float) -> Vector2d: ...

  @overload
  def mul(self, arg0: float, arg1: Vector2d) -> Vector2d: ...

  @overload
  def mul(self, arg0: float, arg1: Vector2d) -> Vector2d: ...

  @overload
  def mul(self, arg0: Matrix2dc, arg1: Vector2d) -> Vector2d: ...

  @overload
  def mul(self, arg0: Matrix2dc, arg1: Vector2d) -> Vector2d: ...

  @overload
  def mul(self, arg0: Matrix2fc, arg1: Vector2d) -> Vector2d: ...

  @overload
  def mul(self, arg0: Matrix2fc, arg1: Vector2d) -> Vector2d: ...

  @overload
  def mul(self, arg0: Vector2dc, arg1: Vector2d) -> Vector2d: ...

  @overload
  def mul(self, arg0: Vector2dc, arg1: Vector2d) -> Vector2d: ...

  @overload
  def mul(self, arg0: float, arg1: float, arg2: Vector2d) -> Vector2d: ...

  @overload
  def mul(self, arg0: float, arg1: float, arg2: Vector2d) -> Vector2d: ...

  @overload
  def mulDirection(self, arg0: Matrix3x2dc) -> Vector2d: ...

  @overload
  def mulDirection(self, arg0: Matrix3x2dc, arg1: Vector2d) -> Vector2d: ...

  @overload
  def mulDirection(self, arg0: Matrix3x2dc, arg1: Vector2d) -> Vector2d: ...

  @overload
  def mulPosition(self, arg0: Matrix3x2dc) -> Vector2d: ...

  @overload
  def mulPosition(self, arg0: Matrix3x2dc, arg1: Vector2d) -> Vector2d: ...

  @overload
  def mulPosition(self, arg0: Matrix3x2dc, arg1: Vector2d) -> Vector2d: ...

  @overload
  def mulTranspose(self, arg0: Matrix2dc) -> Vector2d: ...

  @overload
  def mulTranspose(self, arg0: Matrix2fc) -> Vector2d: ...

  @overload
  def mulTranspose(self, arg0: Matrix2dc, arg1: Vector2d) -> Vector2d: ...

  @overload
  def mulTranspose(self, arg0: Matrix2dc, arg1: Vector2d) -> Vector2d: ...

  @overload
  def mulTranspose(self, arg0: Matrix2fc, arg1: Vector2d) -> Vector2d: ...

  @overload
  def mulTranspose(self, arg0: Matrix2fc, arg1: Vector2d) -> Vector2d: ...

  @overload
  def negate(self) -> Vector2d: ...

  @overload
  def negate(self, arg0: Vector2d) -> Vector2d: ...

  @overload
  def negate(self, arg0: Vector2d) -> Vector2d: ...

  @overload
  def normalize(self) -> Vector2d: ...

  @overload
  def normalize(self, arg0: float) -> Vector2d: ...

  @overload
  def normalize(self, arg0: Vector2d) -> Vector2d: ...

  @overload
  def normalize(self, arg0: Vector2d) -> Vector2d: ...

  @overload
  def normalize(self, arg0: float, arg1: Vector2d) -> Vector2d: ...

  @overload
  def normalize(self, arg0: float, arg1: Vector2d) -> Vector2d: ...

  def perpendicular(self) -> Vector2d: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def round(self) -> Vector2d: ...

  @overload
  def round(self, arg0: Vector2d) -> Vector2d: ...

  @overload
  def round(self, arg0: Vector2d) -> Vector2d: ...

  @overload
  def set(self, arg0: list[float]) -> Vector2d: ...

  @overload
  def set(self, arg0: list[float]) -> Vector2d: ...

  @overload
  def set(self, arg0: float) -> Vector2d: ...

  @overload
  def set(self, arg0: ByteBuffer) -> Vector2d: ...

  @overload
  def set(self, arg0: DoubleBuffer) -> Vector2d: ...

  @overload
  def set(self, arg0: Vector2dc) -> Vector2d: ...

  @overload
  def set(self, arg0: Vector2fc) -> Vector2d: ...

  @overload
  def set(self, arg0: Vector2ic) -> Vector2d: ...

  @overload
  def set(self, arg0: float, arg1: float) -> Vector2d: ...

  @overload
  def set(self, arg0: int, arg1: ByteBuffer) -> Vector2d: ...

  @overload
  def set(self, arg0: int, arg1: DoubleBuffer) -> Vector2d: ...

  def setComponent(self, arg0: int, arg1: float) -> Vector2d: ...

  def setFromAddress(self, arg0: int) -> Vector2d: ...

  @overload
  def sub(self, arg0: Vector2dc) -> Vector2d: ...

  @overload
  def sub(self, arg0: Vector2fc) -> Vector2d: ...

  @overload
  def sub(self, arg0: float, arg1: float) -> Vector2d: ...

  @overload
  def sub(self, arg0: Vector2dc, arg1: Vector2d) -> Vector2d: ...

  @overload
  def sub(self, arg0: Vector2dc, arg1: Vector2d) -> Vector2d: ...

  @overload
  def sub(self, arg0: Vector2fc, arg1: Vector2d) -> Vector2d: ...

  @overload
  def sub(self, arg0: Vector2fc, arg1: Vector2d) -> Vector2d: ...

  @overload
  def sub(self, arg0: float, arg1: float, arg2: Vector2d) -> Vector2d: ...

  @overload
  def sub(self, arg0: float, arg1: float, arg2: Vector2d) -> Vector2d: ...

  @overload
  def toString(self) -> str: ...

  @overload
  def toString(self, arg0: NumberFormat) -> str: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def x(self) -> float: ...

  @overload
  def x(self) -> float: ...

  @overload
  def y(self) -> float: ...

  @overload
  def y(self) -> float: ...

  def zero(self) -> Vector2d: ...

  @overload
  def __init__(self):
    self.x: float

    self.y: float

  @overload
  def __init__(self, arg0: list[float]): ...
  @overload
  def __init__(self, arg0: list[float]): ...
  @overload
  def __init__(self, arg0: float): ...
  @overload
  def __init__(self, arg0: ByteBuffer): ...
  @overload
  def __init__(self, arg0: DoubleBuffer): ...
  @overload
  def __init__(self, arg0: Vector2dc): ...
  @overload
  def __init__(self, arg0: Vector2fc): ...
  @overload
  def __init__(self, arg0: Vector2ic): ...
  @overload
  def __init__(self, arg0: float, arg1: float): ...
  @overload
  def __init__(self, arg0: int, arg1: ByteBuffer): ...
  @overload
  def __init__(self, arg0: int, arg1: DoubleBuffer): ...


class Vector2dc:

  def absolute(self, arg0: Vector2d) -> Vector2d: ...

  @overload
  def add(self, arg0: Vector2dc, arg1: Vector2d) -> Vector2d: ...

  @overload
  def add(self, arg0: Vector2fc, arg1: Vector2d) -> Vector2d: ...

  @overload
  def add(self, arg0: float, arg1: float, arg2: Vector2d) -> Vector2d: ...

  def angle(self, arg0: Vector2dc) -> float: ...

  def ceil(self, arg0: Vector2d) -> Vector2d: ...

  @overload
  def distance(self, arg0: Vector2dc) -> float: ...

  @overload
  def distance(self, arg0: Vector2fc) -> float: ...

  @overload
  def distance(self, arg0: float, arg1: float) -> float: ...

  @overload
  def distanceSquared(self, arg0: Vector2dc) -> float: ...

  @overload
  def distanceSquared(self, arg0: Vector2fc) -> float: ...

  @overload
  def distanceSquared(self, arg0: float, arg1: float) -> float: ...

  @overload
  def div(self, arg0: float, arg1: Vector2d) -> Vector2d: ...

  @overload
  def div(self, arg0: Vector2dc, arg1: Vector2d) -> Vector2d: ...

  @overload
  def div(self, arg0: Vector2fc, arg1: Vector2d) -> Vector2d: ...

  @overload
  def div(self, arg0: float, arg1: float, arg2: Vector2d) -> Vector2d: ...

  def dot(self, arg0: Vector2dc) -> float: ...

  @overload
  def equals(self, arg0: float, arg1: float) -> bool: ...

  @overload
  def equals(self, arg0: Vector2dc, arg1: float) -> bool: ...

  def floor(self, arg0: Vector2d) -> Vector2d: ...

  @overload
  def fma(self, arg0: float, arg1: Vector2dc, arg2: Vector2d) -> Vector2d: ...

  @overload
  def fma(self, arg0: Vector2dc, arg1: Vector2dc, arg2: Vector2d) -> Vector2d: ...

  @overload
  def get(self, arg0: int) -> float: ...

  @overload
  def get(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def get(self, arg0: Vector2d) -> Vector2d: ...

  @overload
  def get(self, arg0: Vector2f) -> Vector2f: ...

  @overload
  def get(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: int, arg1: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def get(self, arg0: int, arg1: Vector2i) -> Vector2i: ...

  def getToAddress(self, arg0: int) -> Vector2dc: ...

  def isFinite(self) -> bool: ...

  def length(self) -> float: ...

  def lengthSquared(self) -> float: ...

  def lerp(self, arg0: Vector2dc, arg1: float, arg2: Vector2d) -> Vector2d: ...

  def max(self, arg0: Vector2dc, arg1: Vector2d) -> Vector2d: ...

  def maxComponent(self) -> int: ...

  def min(self, arg0: Vector2dc, arg1: Vector2d) -> Vector2d: ...

  def minComponent(self) -> int: ...

  @overload
  def mul(self, arg0: float, arg1: Vector2d) -> Vector2d: ...

  @overload
  def mul(self, arg0: Matrix2dc, arg1: Vector2d) -> Vector2d: ...

  @overload
  def mul(self, arg0: Matrix2fc, arg1: Vector2d) -> Vector2d: ...

  @overload
  def mul(self, arg0: Vector2dc, arg1: Vector2d) -> Vector2d: ...

  @overload
  def mul(self, arg0: float, arg1: float, arg2: Vector2d) -> Vector2d: ...

  def mulDirection(self, arg0: Matrix3x2dc, arg1: Vector2d) -> Vector2d: ...

  def mulPosition(self, arg0: Matrix3x2dc, arg1: Vector2d) -> Vector2d: ...

  @overload
  def mulTranspose(self, arg0: Matrix2dc, arg1: Vector2d) -> Vector2d: ...

  @overload
  def mulTranspose(self, arg0: Matrix2fc, arg1: Vector2d) -> Vector2d: ...

  def negate(self, arg0: Vector2d) -> Vector2d: ...

  @overload
  def normalize(self, arg0: Vector2d) -> Vector2d: ...

  @overload
  def normalize(self, arg0: float, arg1: Vector2d) -> Vector2d: ...

  def round(self, arg0: Vector2d) -> Vector2d: ...

  @overload
  def sub(self, arg0: Vector2dc, arg1: Vector2d) -> Vector2d: ...

  @overload
  def sub(self, arg0: Vector2fc, arg1: Vector2d) -> Vector2d: ...

  @overload
  def sub(self, arg0: float, arg1: float, arg2: Vector2d) -> Vector2d: ...

  def x(self) -> float: ...

  def y(self) -> float: ...


class Vector2f:

  @overload
  def absolute(self) -> Vector2f: ...

  @overload
  def absolute(self, arg0: Vector2f) -> Vector2f: ...

  @overload
  def absolute(self, arg0: Vector2f) -> Vector2f: ...

  @overload
  def add(self, arg0: Vector2fc) -> Vector2f: ...

  @overload
  def add(self, arg0: float, arg1: float) -> Vector2f: ...

  @overload
  def add(self, arg0: Vector2fc, arg1: Vector2f) -> Vector2f: ...

  @overload
  def add(self, arg0: Vector2fc, arg1: Vector2f) -> Vector2f: ...

  @overload
  def add(self, arg0: float, arg1: float, arg2: Vector2f) -> Vector2f: ...

  @overload
  def add(self, arg0: float, arg1: float, arg2: Vector2f) -> Vector2f: ...

  @overload
  def angle(self, arg0: Vector2fc) -> float: ...

  @overload
  def angle(self, arg0: Vector2fc) -> float: ...

  @overload
  def ceil(self) -> Vector2f: ...

  @overload
  def ceil(self, arg0: Vector2f) -> Vector2f: ...

  @overload
  def ceil(self, arg0: Vector2f) -> Vector2f: ...

  @overload
  def distance(self, arg0: Vector2fc) -> float: ...

  @overload
  def distance(self, arg0: Vector2fc) -> float: ...

  @overload
  def distance(self, arg0: float, arg1: float) -> float: ...

  @overload
  def distance(self, arg0: float, arg1: float) -> float: ...

  @overload
  def distanceSquared(self, arg0: Vector2fc) -> float: ...

  @overload
  def distanceSquared(self, arg0: Vector2fc) -> float: ...

  @overload
  def distanceSquared(self, arg0: float, arg1: float) -> float: ...

  @overload
  def distanceSquared(self, arg0: float, arg1: float) -> float: ...

  @overload
  def div(self, arg0: float) -> Vector2f: ...

  @overload
  def div(self, arg0: Vector2fc) -> Vector2f: ...

  @overload
  def div(self, arg0: float, arg1: float) -> Vector2f: ...

  @overload
  def div(self, arg0: float, arg1: Vector2f) -> Vector2f: ...

  @overload
  def div(self, arg0: float, arg1: Vector2f) -> Vector2f: ...

  @overload
  def div(self, arg0: Vector2fc, arg1: Vector2f) -> Vector2f: ...

  @overload
  def div(self, arg0: Vector2fc, arg1: Vector2f) -> Vector2f: ...

  @overload
  def div(self, arg0: float, arg1: float, arg2: Vector2f) -> Vector2f: ...

  @overload
  def div(self, arg0: float, arg1: float, arg2: Vector2f) -> Vector2f: ...

  @overload
  def dot(self, arg0: Vector2fc) -> float: ...

  @overload
  def dot(self, arg0: Vector2fc) -> float: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def equals(self, arg0: float, arg1: float) -> bool: ...

  @overload
  def equals(self, arg0: float, arg1: float) -> bool: ...

  @overload
  def equals(self, arg0: Vector2fc, arg1: float) -> bool: ...

  @overload
  def equals(self, arg0: Vector2fc, arg1: float) -> bool: ...

  @overload
  def floor(self) -> Vector2f: ...

  @overload
  def floor(self, arg0: Vector2f) -> Vector2f: ...

  @overload
  def floor(self, arg0: Vector2f) -> Vector2f: ...

  @overload
  def fma(self, arg0: float, arg1: Vector2fc) -> Vector2f: ...

  @overload
  def fma(self, arg0: Vector2fc, arg1: Vector2fc) -> Vector2f: ...

  @overload
  def fma(self, arg0: float, arg1: Vector2fc, arg2: Vector2f) -> Vector2f: ...

  @overload
  def fma(self, arg0: float, arg1: Vector2fc, arg2: Vector2f) -> Vector2f: ...

  @overload
  def fma(self, arg0: Vector2fc, arg1: Vector2fc, arg2: Vector2f) -> Vector2f: ...

  @overload
  def fma(self, arg0: Vector2fc, arg1: Vector2fc, arg2: Vector2f) -> Vector2f: ...

  @overload
  def get(self, arg0: int) -> float: ...

  @overload
  def get(self, arg0: int) -> float: ...

  @overload
  def get(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get(self, arg0: Vector2d) -> Vector2d: ...

  @overload
  def get(self, arg0: Vector2d) -> Vector2d: ...

  @overload
  def get(self, arg0: Vector2f) -> Vector2f: ...

  @overload
  def get(self, arg0: Vector2f) -> Vector2f: ...

  @overload
  def get(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get(self, arg0: int, arg1: Vector2i) -> Vector2i: ...

  @overload
  def get(self, arg0: int, arg1: Vector2i) -> Vector2i: ...

  @overload
  def getToAddress(self, arg0: int) -> Vector2fc: ...

  @overload
  def getToAddress(self, arg0: int) -> Vector2fc: ...

  def hashCode(self) -> int: ...

  @overload
  def isFinite(self) -> bool: ...

  @overload
  def isFinite(self) -> bool: ...

  @overload
  def length(self) -> float: ...

  @overload
  def length(self) -> float: ...

  @overload
  def lengthSquared(self) -> float: ...

  @overload
  def lengthSquared(self) -> float: ...

  @overload
  def lerp(self, arg0: Vector2fc, arg1: float) -> Vector2f: ...

  @overload
  def lerp(self, arg0: Vector2fc, arg1: float, arg2: Vector2f) -> Vector2f: ...

  @overload
  def lerp(self, arg0: Vector2fc, arg1: float, arg2: Vector2f) -> Vector2f: ...

  @overload
  def max(self, arg0: Vector2fc) -> Vector2f: ...

  @overload
  def max(self, arg0: Vector2fc, arg1: Vector2f) -> Vector2f: ...

  @overload
  def max(self, arg0: Vector2fc, arg1: Vector2f) -> Vector2f: ...

  @overload
  def maxComponent(self) -> int: ...

  @overload
  def maxComponent(self) -> int: ...

  @overload
  def min(self, arg0: Vector2fc) -> Vector2f: ...

  @overload
  def min(self, arg0: Vector2fc, arg1: Vector2f) -> Vector2f: ...

  @overload
  def min(self, arg0: Vector2fc, arg1: Vector2f) -> Vector2f: ...

  @overload
  def minComponent(self) -> int: ...

  @overload
  def minComponent(self) -> int: ...

  @overload
  def mul(self, arg0: float) -> Vector2f: ...

  @overload
  def mul(self, arg0: Matrix2dc) -> Vector2f: ...

  @overload
  def mul(self, arg0: Matrix2fc) -> Vector2f: ...

  @overload
  def mul(self, arg0: Vector2fc) -> Vector2f: ...

  @overload
  def mul(self, arg0: float, arg1: float) -> Vector2f: ...

  @overload
  def mul(self, arg0: float, arg1: Vector2f) -> Vector2f: ...

  @overload
  def mul(self, arg0: float, arg1: Vector2f) -> Vector2f: ...

  @overload
  def mul(self, arg0: Matrix2dc, arg1: Vector2f) -> Vector2f: ...

  @overload
  def mul(self, arg0: Matrix2dc, arg1: Vector2f) -> Vector2f: ...

  @overload
  def mul(self, arg0: Matrix2fc, arg1: Vector2f) -> Vector2f: ...

  @overload
  def mul(self, arg0: Matrix2fc, arg1: Vector2f) -> Vector2f: ...

  @overload
  def mul(self, arg0: Vector2fc, arg1: Vector2f) -> Vector2f: ...

  @overload
  def mul(self, arg0: Vector2fc, arg1: Vector2f) -> Vector2f: ...

  @overload
  def mul(self, arg0: float, arg1: float, arg2: Vector2f) -> Vector2f: ...

  @overload
  def mul(self, arg0: float, arg1: float, arg2: Vector2f) -> Vector2f: ...

  @overload
  def mulDirection(self, arg0: Matrix3x2fc) -> Vector2f: ...

  @overload
  def mulDirection(self, arg0: Matrix3x2fc, arg1: Vector2f) -> Vector2f: ...

  @overload
  def mulDirection(self, arg0: Matrix3x2fc, arg1: Vector2f) -> Vector2f: ...

  @overload
  def mulPosition(self, arg0: Matrix3x2fc) -> Vector2f: ...

  @overload
  def mulPosition(self, arg0: Matrix3x2fc, arg1: Vector2f) -> Vector2f: ...

  @overload
  def mulPosition(self, arg0: Matrix3x2fc, arg1: Vector2f) -> Vector2f: ...

  @overload
  def mulTranspose(self, arg0: Matrix2fc) -> Vector2f: ...

  @overload
  def mulTranspose(self, arg0: Matrix2fc, arg1: Vector2f) -> Vector2f: ...

  @overload
  def mulTranspose(self, arg0: Matrix2fc, arg1: Vector2f) -> Vector2f: ...

  @overload
  def negate(self) -> Vector2f: ...

  @overload
  def negate(self, arg0: Vector2f) -> Vector2f: ...

  @overload
  def negate(self, arg0: Vector2f) -> Vector2f: ...

  @overload
  def normalize(self) -> Vector2f: ...

  @overload
  def normalize(self, arg0: float) -> Vector2f: ...

  @overload
  def normalize(self, arg0: Vector2f) -> Vector2f: ...

  @overload
  def normalize(self, arg0: Vector2f) -> Vector2f: ...

  @overload
  def normalize(self, arg0: float, arg1: Vector2f) -> Vector2f: ...

  @overload
  def normalize(self, arg0: float, arg1: Vector2f) -> Vector2f: ...

  def perpendicular(self) -> Vector2f: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def round(self) -> Vector2f: ...

  @overload
  def round(self, arg0: Vector2f) -> Vector2f: ...

  @overload
  def round(self, arg0: Vector2f) -> Vector2f: ...

  @overload
  def set(self, arg0: list[float]) -> Vector2f: ...

  @overload
  def set(self, arg0: float) -> Vector2f: ...

  @overload
  def set(self, arg0: float) -> Vector2f: ...

  @overload
  def set(self, arg0: ByteBuffer) -> Vector2f: ...

  @overload
  def set(self, arg0: FloatBuffer) -> Vector2f: ...

  @overload
  def set(self, arg0: Vector2dc) -> Vector2f: ...

  @overload
  def set(self, arg0: Vector2fc) -> Vector2f: ...

  @overload
  def set(self, arg0: Vector2ic) -> Vector2f: ...

  @overload
  def set(self, arg0: float, arg1: float) -> Vector2f: ...

  @overload
  def set(self, arg0: float, arg1: float) -> Vector2f: ...

  @overload
  def set(self, arg0: int, arg1: ByteBuffer) -> Vector2f: ...

  @overload
  def set(self, arg0: int, arg1: FloatBuffer) -> Vector2f: ...

  def setComponent(self, arg0: int, arg1: float) -> Vector2f: ...

  def setFromAddress(self, arg0: int) -> Vector2f: ...

  @overload
  def sub(self, arg0: Vector2fc) -> Vector2f: ...

  @overload
  def sub(self, arg0: float, arg1: float) -> Vector2f: ...

  @overload
  def sub(self, arg0: Vector2fc, arg1: Vector2f) -> Vector2f: ...

  @overload
  def sub(self, arg0: Vector2fc, arg1: Vector2f) -> Vector2f: ...

  @overload
  def sub(self, arg0: float, arg1: float, arg2: Vector2f) -> Vector2f: ...

  @overload
  def sub(self, arg0: float, arg1: float, arg2: Vector2f) -> Vector2f: ...

  @overload
  def toString(self) -> str: ...

  @overload
  def toString(self, arg0: NumberFormat) -> str: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def x(self) -> float: ...

  @overload
  def x(self) -> float: ...

  @overload
  def y(self) -> float: ...

  @overload
  def y(self) -> float: ...

  def zero(self) -> Vector2f: ...

  @overload
  def __init__(self):
    self.x: float

    self.y: float

  @overload
  def __init__(self, arg0: list[float]): ...
  @overload
  def __init__(self, arg0: float): ...
  @overload
  def __init__(self, arg0: ByteBuffer): ...
  @overload
  def __init__(self, arg0: FloatBuffer): ...
  @overload
  def __init__(self, arg0: Vector2fc): ...
  @overload
  def __init__(self, arg0: Vector2ic): ...
  @overload
  def __init__(self, arg0: float, arg1: float): ...
  @overload
  def __init__(self, arg0: int, arg1: ByteBuffer): ...
  @overload
  def __init__(self, arg0: int, arg1: FloatBuffer): ...


class Vector2fc:

  def absolute(self, arg0: Vector2f) -> Vector2f: ...

  @overload
  def add(self, arg0: Vector2fc, arg1: Vector2f) -> Vector2f: ...

  @overload
  def add(self, arg0: float, arg1: float, arg2: Vector2f) -> Vector2f: ...

  def angle(self, arg0: Vector2fc) -> float: ...

  def ceil(self, arg0: Vector2f) -> Vector2f: ...

  @overload
  def distance(self, arg0: Vector2fc) -> float: ...

  @overload
  def distance(self, arg0: float, arg1: float) -> float: ...

  @overload
  def distanceSquared(self, arg0: Vector2fc) -> float: ...

  @overload
  def distanceSquared(self, arg0: float, arg1: float) -> float: ...

  @overload
  def div(self, arg0: float, arg1: Vector2f) -> Vector2f: ...

  @overload
  def div(self, arg0: Vector2fc, arg1: Vector2f) -> Vector2f: ...

  @overload
  def div(self, arg0: float, arg1: float, arg2: Vector2f) -> Vector2f: ...

  def dot(self, arg0: Vector2fc) -> float: ...

  @overload
  def equals(self, arg0: float, arg1: float) -> bool: ...

  @overload
  def equals(self, arg0: Vector2fc, arg1: float) -> bool: ...

  def floor(self, arg0: Vector2f) -> Vector2f: ...

  @overload
  def fma(self, arg0: float, arg1: Vector2fc, arg2: Vector2f) -> Vector2f: ...

  @overload
  def fma(self, arg0: Vector2fc, arg1: Vector2fc, arg2: Vector2f) -> Vector2f: ...

  @overload
  def get(self, arg0: int) -> float: ...

  @overload
  def get(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get(self, arg0: Vector2d) -> Vector2d: ...

  @overload
  def get(self, arg0: Vector2f) -> Vector2f: ...

  @overload
  def get(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get(self, arg0: int, arg1: Vector2i) -> Vector2i: ...

  def getToAddress(self, arg0: int) -> Vector2fc: ...

  def isFinite(self) -> bool: ...

  def length(self) -> float: ...

  def lengthSquared(self) -> float: ...

  def lerp(self, arg0: Vector2fc, arg1: float, arg2: Vector2f) -> Vector2f: ...

  def max(self, arg0: Vector2fc, arg1: Vector2f) -> Vector2f: ...

  def maxComponent(self) -> int: ...

  def min(self, arg0: Vector2fc, arg1: Vector2f) -> Vector2f: ...

  def minComponent(self) -> int: ...

  @overload
  def mul(self, arg0: float, arg1: Vector2f) -> Vector2f: ...

  @overload
  def mul(self, arg0: Matrix2dc, arg1: Vector2f) -> Vector2f: ...

  @overload
  def mul(self, arg0: Matrix2fc, arg1: Vector2f) -> Vector2f: ...

  @overload
  def mul(self, arg0: Vector2fc, arg1: Vector2f) -> Vector2f: ...

  @overload
  def mul(self, arg0: float, arg1: float, arg2: Vector2f) -> Vector2f: ...

  def mulDirection(self, arg0: Matrix3x2fc, arg1: Vector2f) -> Vector2f: ...

  def mulPosition(self, arg0: Matrix3x2fc, arg1: Vector2f) -> Vector2f: ...

  def mulTranspose(self, arg0: Matrix2fc, arg1: Vector2f) -> Vector2f: ...

  def negate(self, arg0: Vector2f) -> Vector2f: ...

  @overload
  def normalize(self, arg0: Vector2f) -> Vector2f: ...

  @overload
  def normalize(self, arg0: float, arg1: Vector2f) -> Vector2f: ...

  def round(self, arg0: Vector2f) -> Vector2f: ...

  @overload
  def sub(self, arg0: Vector2fc, arg1: Vector2f) -> Vector2f: ...

  @overload
  def sub(self, arg0: float, arg1: float, arg2: Vector2f) -> Vector2f: ...

  def x(self) -> float: ...

  def y(self) -> float: ...


class Vector2i:

  @overload
  def absolute(self) -> Vector2i: ...

  @overload
  def absolute(self, arg0: Vector2i) -> Vector2i: ...

  @overload
  def absolute(self, arg0: Vector2i) -> Vector2i: ...

  @overload
  def add(self, arg0: Vector2ic) -> Vector2i: ...

  @overload
  def add(self, arg0: int, arg1: int) -> Vector2i: ...

  @overload
  def add(self, arg0: Vector2ic, arg1: Vector2i) -> Vector2i: ...

  @overload
  def add(self, arg0: Vector2ic, arg1: Vector2i) -> Vector2i: ...

  @overload
  def add(self, arg0: int, arg1: int, arg2: Vector2i) -> Vector2i: ...

  @overload
  def add(self, arg0: int, arg1: int, arg2: Vector2i) -> Vector2i: ...

  @overload
  def distance(self, arg0: Vector2ic) -> float: ...

  @overload
  def distance(self, arg0: Vector2ic) -> float: ...

  @overload
  def distance(self, arg0: int, arg1: int) -> float: ...

  @overload
  def distance(self, arg0: int, arg1: int) -> float: ...

  @overload
  def distanceSquared(self, arg0: Vector2ic) -> int: ...

  @overload
  def distanceSquared(self, arg0: Vector2ic) -> int: ...

  @overload
  def distanceSquared(self, arg0: int, arg1: int) -> int: ...

  @overload
  def distanceSquared(self, arg0: int, arg1: int) -> int: ...

  @overload
  def div(self, arg0: float) -> Vector2i: ...

  @overload
  def div(self, arg0: int) -> Vector2i: ...

  @overload
  def div(self, arg0: float, arg1: Vector2i) -> Vector2i: ...

  @overload
  def div(self, arg0: float, arg1: Vector2i) -> Vector2i: ...

  @overload
  def div(self, arg0: int, arg1: Vector2i) -> Vector2i: ...

  @overload
  def div(self, arg0: int, arg1: Vector2i) -> Vector2i: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def equals(self, arg0: int, arg1: int) -> bool: ...

  @overload
  def equals(self, arg0: int, arg1: int) -> bool: ...

  @overload
  def get(self, arg0: int) -> int: ...

  @overload
  def get(self, arg0: int) -> int: ...

  @overload
  def get(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: IntBuffer) -> IntBuffer: ...

  @overload
  def get(self, arg0: IntBuffer) -> IntBuffer: ...

  @overload
  def get(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: int, arg1: IntBuffer) -> IntBuffer: ...

  @overload
  def get(self, arg0: int, arg1: IntBuffer) -> IntBuffer: ...

  @overload
  def getToAddress(self, arg0: int) -> Vector2ic: ...

  @overload
  def getToAddress(self, arg0: int) -> Vector2ic: ...

  @overload
  def gridDistance(self, arg0: Vector2ic) -> int: ...

  @overload
  def gridDistance(self, arg0: Vector2ic) -> int: ...

  @overload
  def gridDistance(self, arg0: int, arg1: int) -> int: ...

  @overload
  def gridDistance(self, arg0: int, arg1: int) -> int: ...

  def hashCode(self) -> int: ...

  @overload
  def length(self) -> float: ...

  @overload
  def length(self) -> float: ...

  @overload
  def lengthSquared(self) -> int: ...

  @overload
  def lengthSquared(self) -> int: ...

  @overload
  def max(self, arg0: Vector2ic) -> Vector2i: ...

  @overload
  def max(self, arg0: Vector2ic, arg1: Vector2i) -> Vector2i: ...

  @overload
  def max(self, arg0: Vector2ic, arg1: Vector2i) -> Vector2i: ...

  @overload
  def maxComponent(self) -> int: ...

  @overload
  def maxComponent(self) -> int: ...

  @overload
  def min(self, arg0: Vector2ic) -> Vector2i: ...

  @overload
  def min(self, arg0: Vector2ic, arg1: Vector2i) -> Vector2i: ...

  @overload
  def min(self, arg0: Vector2ic, arg1: Vector2i) -> Vector2i: ...

  @overload
  def minComponent(self) -> int: ...

  @overload
  def minComponent(self) -> int: ...

  @overload
  def mul(self, arg0: int) -> Vector2i: ...

  @overload
  def mul(self, arg0: Vector2ic) -> Vector2i: ...

  @overload
  def mul(self, arg0: int, arg1: int) -> Vector2i: ...

  @overload
  def mul(self, arg0: int, arg1: Vector2i) -> Vector2i: ...

  @overload
  def mul(self, arg0: int, arg1: Vector2i) -> Vector2i: ...

  @overload
  def mul(self, arg0: Vector2ic, arg1: Vector2i) -> Vector2i: ...

  @overload
  def mul(self, arg0: Vector2ic, arg1: Vector2i) -> Vector2i: ...

  @overload
  def mul(self, arg0: int, arg1: int, arg2: Vector2i) -> Vector2i: ...

  @overload
  def mul(self, arg0: int, arg1: int, arg2: Vector2i) -> Vector2i: ...

  @overload
  def negate(self) -> Vector2i: ...

  @overload
  def negate(self, arg0: Vector2i) -> Vector2i: ...

  @overload
  def negate(self, arg0: Vector2i) -> Vector2i: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def set(self, arg0: list[int]) -> Vector2i: ...

  @overload
  def set(self, arg0: int) -> Vector2i: ...

  @overload
  def set(self, arg0: ByteBuffer) -> Vector2i: ...

  @overload
  def set(self, arg0: IntBuffer) -> Vector2i: ...

  @overload
  def set(self, arg0: Vector2dc) -> Vector2i: ...

  @overload
  def set(self, arg0: Vector2ic) -> Vector2i: ...

  @overload
  def set(self, arg0: int, arg1: int) -> Vector2i: ...

  @overload
  def set(self, arg0: int, arg1: ByteBuffer) -> Vector2i: ...

  @overload
  def set(self, arg0: int, arg1: IntBuffer) -> Vector2i: ...

  @overload
  def set(self, arg0: Vector2dc, arg1: int) -> Vector2i: ...

  @overload
  def set(self, arg0: Vector2fc, arg1: int) -> Vector2i: ...

  def setComponent(self, arg0: int, arg1: int) -> Vector2i: ...

  def setFromAddress(self, arg0: int) -> Vector2i: ...

  @overload
  def sub(self, arg0: Vector2ic) -> Vector2i: ...

  @overload
  def sub(self, arg0: int, arg1: int) -> Vector2i: ...

  @overload
  def sub(self, arg0: Vector2ic, arg1: Vector2i) -> Vector2i: ...

  @overload
  def sub(self, arg0: Vector2ic, arg1: Vector2i) -> Vector2i: ...

  @overload
  def sub(self, arg0: int, arg1: int, arg2: Vector2i) -> Vector2i: ...

  @overload
  def sub(self, arg0: int, arg1: int, arg2: Vector2i) -> Vector2i: ...

  @overload
  def toString(self) -> str: ...

  @overload
  def toString(self, arg0: NumberFormat) -> str: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def x(self) -> int: ...

  @overload
  def x(self) -> int: ...

  @overload
  def y(self) -> int: ...

  @overload
  def y(self) -> int: ...

  def zero(self) -> Vector2i: ...

  @overload
  def __init__(self):
    self.x: int

    self.y: int

  @overload
  def __init__(self, arg0: list[int]): ...
  @overload
  def __init__(self, arg0: int): ...
  @overload
  def __init__(self, arg0: ByteBuffer): ...
  @overload
  def __init__(self, arg0: IntBuffer): ...
  @overload
  def __init__(self, arg0: Vector2ic): ...
  @overload
  def __init__(self, arg0: int, arg1: int): ...
  @overload
  def __init__(self, arg0: int, arg1: ByteBuffer): ...
  @overload
  def __init__(self, arg0: int, arg1: IntBuffer): ...
  @overload
  def __init__(self, arg0: Vector2dc, arg1: int): ...
  @overload
  def __init__(self, arg0: Vector2fc, arg1: int): ...
  @overload
  def __init__(self, arg0: float, arg1: float, arg2: int): ...
  @overload
  def __init__(self, arg0: float, arg1: float, arg2: int): ...


class Vector2ic:

  def absolute(self, arg0: Vector2i) -> Vector2i: ...

  @overload
  def add(self, arg0: Vector2ic, arg1: Vector2i) -> Vector2i: ...

  @overload
  def add(self, arg0: int, arg1: int, arg2: Vector2i) -> Vector2i: ...

  @overload
  def distance(self, arg0: Vector2ic) -> float: ...

  @overload
  def distance(self, arg0: int, arg1: int) -> float: ...

  @overload
  def distanceSquared(self, arg0: Vector2ic) -> int: ...

  @overload
  def distanceSquared(self, arg0: int, arg1: int) -> int: ...

  @overload
  def div(self, arg0: float, arg1: Vector2i) -> Vector2i: ...

  @overload
  def div(self, arg0: int, arg1: Vector2i) -> Vector2i: ...

  def equals(self, arg0: int, arg1: int) -> bool: ...

  @overload
  def get(self, arg0: int) -> int: ...

  @overload
  def get(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: IntBuffer) -> IntBuffer: ...

  @overload
  def get(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: int, arg1: IntBuffer) -> IntBuffer: ...

  def getToAddress(self, arg0: int) -> Vector2ic: ...

  @overload
  def gridDistance(self, arg0: Vector2ic) -> int: ...

  @overload
  def gridDistance(self, arg0: int, arg1: int) -> int: ...

  def length(self) -> float: ...

  def lengthSquared(self) -> int: ...

  def max(self, arg0: Vector2ic, arg1: Vector2i) -> Vector2i: ...

  def maxComponent(self) -> int: ...

  def min(self, arg0: Vector2ic, arg1: Vector2i) -> Vector2i: ...

  def minComponent(self) -> int: ...

  @overload
  def mul(self, arg0: int, arg1: Vector2i) -> Vector2i: ...

  @overload
  def mul(self, arg0: Vector2ic, arg1: Vector2i) -> Vector2i: ...

  @overload
  def mul(self, arg0: int, arg1: int, arg2: Vector2i) -> Vector2i: ...

  def negate(self, arg0: Vector2i) -> Vector2i: ...

  @overload
  def sub(self, arg0: Vector2ic, arg1: Vector2i) -> Vector2i: ...

  @overload
  def sub(self, arg0: int, arg1: int, arg2: Vector2i) -> Vector2i: ...

  def x(self) -> int: ...

  def y(self) -> int: ...


class Vector3d:

  @overload
  def absolute(self) -> Vector3d: ...

  @overload
  def absolute(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def absolute(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def add(self, arg0: Vector3dc) -> Vector3d: ...

  @overload
  def add(self, arg0: Vector3fc) -> Vector3d: ...

  @overload
  def add(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def add(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def add(self, arg0: Vector3fc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def add(self, arg0: Vector3fc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def add(self, arg0: float, arg1: float, arg2: float) -> Vector3d: ...

  @overload
  def add(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def add(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def angle(self, arg0: Vector3dc) -> float: ...

  @overload
  def angle(self, arg0: Vector3dc) -> float: ...

  @overload
  def angleCos(self, arg0: Vector3dc) -> float: ...

  @overload
  def angleCos(self, arg0: Vector3dc) -> float: ...

  @overload
  def angleSigned(self, arg0: Vector3dc, arg1: Vector3dc) -> float: ...

  @overload
  def angleSigned(self, arg0: Vector3dc, arg1: Vector3dc) -> float: ...

  @overload
  def angleSigned(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> float: ...

  @overload
  def angleSigned(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> float: ...

  @overload
  def ceil(self) -> Vector3d: ...

  @overload
  def ceil(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def ceil(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def cross(self, arg0: Vector3dc) -> Vector3d: ...

  @overload
  def cross(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def cross(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def cross(self, arg0: float, arg1: float, arg2: float) -> Vector3d: ...

  @overload
  def cross(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def cross(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def distance(self, arg0: Vector3dc) -> float: ...

  @overload
  def distance(self, arg0: Vector3dc) -> float: ...

  @overload
  def distance(self, arg0: float, arg1: float, arg2: float) -> float: ...

  @overload
  def distance(self, arg0: float, arg1: float, arg2: float) -> float: ...

  @overload
  def distanceSquared(self, arg0: Vector3dc) -> float: ...

  @overload
  def distanceSquared(self, arg0: Vector3dc) -> float: ...

  @overload
  def distanceSquared(self, arg0: float, arg1: float, arg2: float) -> float: ...

  @overload
  def distanceSquared(self, arg0: float, arg1: float, arg2: float) -> float: ...

  @overload
  def div(self, arg0: float) -> Vector3d: ...

  @overload
  def div(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def div(self, arg0: Vector3fc) -> Vector3d: ...

  @overload
  def div(self, arg0: float, arg1: Vector3d) -> Vector3d: ...

  @overload
  def div(self, arg0: float, arg1: Vector3d) -> Vector3d: ...

  @overload
  def div(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def div(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def div(self, arg0: Vector3fc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def div(self, arg0: Vector3fc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def div(self, arg0: float, arg1: float, arg2: float) -> Vector3d: ...

  @overload
  def div(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def div(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def dot(self, arg0: Vector3dc) -> float: ...

  @overload
  def dot(self, arg0: Vector3dc) -> float: ...

  @overload
  def dot(self, arg0: float, arg1: float, arg2: float) -> float: ...

  @overload
  def dot(self, arg0: float, arg1: float, arg2: float) -> float: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def equals(self, arg0: Vector3dc, arg1: float) -> bool: ...

  @overload
  def equals(self, arg0: Vector3dc, arg1: float) -> bool: ...

  @overload
  def equals(self, arg0: float, arg1: float, arg2: float) -> bool: ...

  @overload
  def equals(self, arg0: float, arg1: float, arg2: float) -> bool: ...

  @overload
  def floor(self) -> Vector3d: ...

  @overload
  def floor(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def floor(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def fma(self, arg0: float, arg1: Vector3dc) -> Vector3d: ...

  @overload
  def fma(self, arg0: float, arg1: Vector3fc) -> Vector3d: ...

  @overload
  def fma(self, arg0: Vector3dc, arg1: Vector3dc) -> Vector3d: ...

  @overload
  def fma(self, arg0: Vector3fc, arg1: Vector3fc) -> Vector3d: ...

  @overload
  def fma(self, arg0: float, arg1: Vector3dc, arg2: Vector3d) -> Vector3d: ...

  @overload
  def fma(self, arg0: float, arg1: Vector3dc, arg2: Vector3d) -> Vector3d: ...

  @overload
  def fma(self, arg0: float, arg1: Vector3fc, arg2: Vector3d) -> Vector3d: ...

  @overload
  def fma(self, arg0: float, arg1: Vector3fc, arg2: Vector3d) -> Vector3d: ...

  @overload
  def fma(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Vector3d) -> Vector3d: ...

  @overload
  def fma(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Vector3d) -> Vector3d: ...

  @overload
  def fma(self, arg0: Vector3dc, arg1: Vector3fc, arg2: Vector3d) -> Vector3d: ...

  @overload
  def fma(self, arg0: Vector3dc, arg1: Vector3fc, arg2: Vector3d) -> Vector3d: ...

  @overload
  def fma(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Vector3d) -> Vector3d: ...

  @overload
  def fma(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Vector3d) -> Vector3d: ...

  @overload
  def get(self, arg0: int) -> float: ...

  @overload
  def get(self, arg0: int) -> float: ...

  @overload
  def get(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def get(self, arg0: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def get(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def get(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def get(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def get(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def get(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: int, arg1: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def get(self, arg0: int, arg1: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def get(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get(self, arg0: int, arg1: Vector3i) -> Vector3i: ...

  @overload
  def get(self, arg0: int, arg1: Vector3i) -> Vector3i: ...

  @overload
  def getToAddress(self, arg0: int) -> Vector3dc: ...

  @overload
  def getToAddress(self, arg0: int) -> Vector3dc: ...

  @overload
  def getf(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getf(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getf(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getf(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def half(self, arg0: Vector3dc) -> Vector3d: ...

  @overload
  def half(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def half(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def half(self, arg0: float, arg1: float, arg2: float) -> Vector3d: ...

  @overload
  def half(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def half(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  def hashCode(self) -> int: ...

  @overload
  def hermite(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Vector3dc, arg3: float, arg4: Vector3d) -> Vector3d: ...

  @overload
  def hermite(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Vector3dc, arg3: float, arg4: Vector3d) -> Vector3d: ...

  @overload
  def isFinite(self) -> bool: ...

  @overload
  def isFinite(self) -> bool: ...

  @overload
  def length(self) -> float: ...

  @overload
  def length(self) -> float: ...

  @overload
  def lengthSquared(self) -> float: ...

  @overload
  def lengthSquared(self) -> float: ...

  @overload
  def lerp(self, arg0: Vector3dc, arg1: float) -> Vector3d: ...

  @overload
  def lerp(self, arg0: Vector3dc, arg1: float, arg2: Vector3d) -> Vector3d: ...

  @overload
  def lerp(self, arg0: Vector3dc, arg1: float, arg2: Vector3d) -> Vector3d: ...

  @overload
  def max(self, arg0: Vector3dc) -> Vector3d: ...

  @overload
  def max(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def max(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def maxComponent(self) -> int: ...

  @overload
  def maxComponent(self) -> int: ...

  @overload
  def min(self, arg0: Vector3dc) -> Vector3d: ...

  @overload
  def min(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def min(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def minComponent(self) -> int: ...

  @overload
  def minComponent(self) -> int: ...

  @overload
  def mul(self, arg0: float) -> Vector3d: ...

  @overload
  def mul(self, arg0: Matrix3dc) -> Vector3d: ...

  @overload
  def mul(self, arg0: Matrix3fc) -> Vector3d: ...

  @overload
  def mul(self, arg0: Matrix3x2dc) -> Vector3d: ...

  @overload
  def mul(self, arg0: Matrix3x2fc) -> Vector3d: ...

  @overload
  def mul(self, arg0: Vector3dc) -> Vector3d: ...

  @overload
  def mul(self, arg0: Vector3fc) -> Vector3d: ...

  @overload
  def mul(self, arg0: float, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mul(self, arg0: float, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mul(self, arg0: Matrix3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mul(self, arg0: Matrix3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mul(self, arg0: Matrix3dc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def mul(self, arg0: Matrix3dc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def mul(self, arg0: Matrix3fc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mul(self, arg0: Matrix3fc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mul(self, arg0: Matrix3x2dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mul(self, arg0: Matrix3x2dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mul(self, arg0: Matrix3x2fc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mul(self, arg0: Matrix3x2fc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mul(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mul(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mul(self, arg0: Vector3fc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mul(self, arg0: Vector3fc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mul(self, arg0: float, arg1: float, arg2: float) -> Vector3d: ...

  @overload
  def mul(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def mul(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def mulAdd(self, arg0: float, arg1: Vector3dc) -> Vector3d: ...

  @overload
  def mulAdd(self, arg0: Vector3dc, arg1: Vector3dc) -> Vector3d: ...

  @overload
  def mulAdd(self, arg0: float, arg1: Vector3dc, arg2: Vector3d) -> Vector3d: ...

  @overload
  def mulAdd(self, arg0: float, arg1: Vector3dc, arg2: Vector3d) -> Vector3d: ...

  @overload
  def mulAdd(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Vector3d) -> Vector3d: ...

  @overload
  def mulAdd(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Vector3d) -> Vector3d: ...

  @overload
  def mulAdd(self, arg0: Vector3fc, arg1: Vector3dc, arg2: Vector3d) -> Vector3d: ...

  @overload
  def mulAdd(self, arg0: Vector3fc, arg1: Vector3dc, arg2: Vector3d) -> Vector3d: ...

  @overload
  def mulDirection(self, arg0: Matrix4dc) -> Vector3d: ...

  @overload
  def mulDirection(self, arg0: Matrix4fc) -> Vector3d: ...

  @overload
  def mulDirection(self, arg0: Matrix4x3dc) -> Vector3d: ...

  @overload
  def mulDirection(self, arg0: Matrix4x3fc) -> Vector3d: ...

  @overload
  def mulDirection(self, arg0: Matrix4dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mulDirection(self, arg0: Matrix4dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mulDirection(self, arg0: Matrix4fc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mulDirection(self, arg0: Matrix4fc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mulDirection(self, arg0: Matrix4x3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mulDirection(self, arg0: Matrix4x3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mulDirection(self, arg0: Matrix4x3fc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mulDirection(self, arg0: Matrix4x3fc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mulPosition(self, arg0: Matrix4dc) -> Vector3d: ...

  @overload
  def mulPosition(self, arg0: Matrix4fc) -> Vector3d: ...

  @overload
  def mulPosition(self, arg0: Matrix4x3dc) -> Vector3d: ...

  @overload
  def mulPosition(self, arg0: Matrix4x3fc) -> Vector3d: ...

  @overload
  def mulPosition(self, arg0: Matrix4dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mulPosition(self, arg0: Matrix4dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mulPosition(self, arg0: Matrix4fc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mulPosition(self, arg0: Matrix4fc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mulPosition(self, arg0: Matrix4x3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mulPosition(self, arg0: Matrix4x3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mulPosition(self, arg0: Matrix4x3fc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mulPosition(self, arg0: Matrix4x3fc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mulPositionW(self, arg0: Matrix4dc) -> float: ...

  @overload
  def mulPositionW(self, arg0: Matrix4fc) -> float: ...

  @overload
  def mulPositionW(self, arg0: Matrix4dc, arg1: Vector3d) -> float: ...

  @overload
  def mulPositionW(self, arg0: Matrix4dc, arg1: Vector3d) -> float: ...

  @overload
  def mulPositionW(self, arg0: Matrix4fc, arg1: Vector3d) -> float: ...

  @overload
  def mulPositionW(self, arg0: Matrix4fc, arg1: Vector3d) -> float: ...

  @overload
  def mulProject(self, arg0: Matrix4dc) -> Vector3d: ...

  @overload
  def mulProject(self, arg0: Matrix4fc) -> Vector3d: ...

  @overload
  def mulProject(self, arg0: Matrix4dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mulProject(self, arg0: Matrix4dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mulProject(self, arg0: Matrix4fc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mulProject(self, arg0: Matrix4fc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mulProject(self, arg0: Matrix4dc, arg1: float, arg2: Vector3d) -> Vector3d: ...

  @overload
  def mulProject(self, arg0: Matrix4dc, arg1: float, arg2: Vector3d) -> Vector3d: ...

  @overload
  def mulTranspose(self, arg0: Matrix3dc) -> Vector3d: ...

  @overload
  def mulTranspose(self, arg0: Matrix3fc) -> Vector3d: ...

  @overload
  def mulTranspose(self, arg0: Matrix3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mulTranspose(self, arg0: Matrix3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mulTranspose(self, arg0: Matrix3fc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mulTranspose(self, arg0: Matrix3fc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mulTransposeDirection(self, arg0: Matrix4dc) -> Vector3d: ...

  @overload
  def mulTransposeDirection(self, arg0: Matrix4fc) -> Vector3d: ...

  @overload
  def mulTransposeDirection(self, arg0: Matrix4dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mulTransposeDirection(self, arg0: Matrix4dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mulTransposeDirection(self, arg0: Matrix4fc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mulTransposeDirection(self, arg0: Matrix4fc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mulTransposePosition(self, arg0: Matrix4dc) -> Vector3d: ...

  @overload
  def mulTransposePosition(self, arg0: Matrix4fc) -> Vector3d: ...

  @overload
  def mulTransposePosition(self, arg0: Matrix4dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mulTransposePosition(self, arg0: Matrix4dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mulTransposePosition(self, arg0: Matrix4fc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mulTransposePosition(self, arg0: Matrix4fc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def negate(self) -> Vector3d: ...

  @overload
  def negate(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def negate(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def normalize(self) -> Vector3d: ...

  @overload
  def normalize(self, arg0: float) -> Vector3d: ...

  @overload
  def normalize(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def normalize(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def normalize(self, arg0: float, arg1: Vector3d) -> Vector3d: ...

  @overload
  def normalize(self, arg0: float, arg1: Vector3d) -> Vector3d: ...

  @overload
  def orthogonalize(self, arg0: Vector3dc) -> Vector3d: ...

  @overload
  def orthogonalize(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def orthogonalize(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def orthogonalizeUnit(self, arg0: Vector3dc) -> Vector3d: ...

  @overload
  def orthogonalizeUnit(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def orthogonalizeUnit(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def reflect(self, arg0: Vector3dc) -> Vector3d: ...

  @overload
  def reflect(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def reflect(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def reflect(self, arg0: float, arg1: float, arg2: float) -> Vector3d: ...

  @overload
  def reflect(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def reflect(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def rotate(self, arg0: Quaterniondc) -> Vector3d: ...

  @overload
  def rotate(self, arg0: Quaterniondc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def rotate(self, arg0: Quaterniondc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def rotateAxis(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Vector3d: ...

  @overload
  def rotateAxis(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Vector3d) -> Vector3d: ...

  @overload
  def rotateAxis(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Vector3d) -> Vector3d: ...

  @overload
  def rotateX(self, arg0: float) -> Vector3d: ...

  @overload
  def rotateX(self, arg0: float, arg1: Vector3d) -> Vector3d: ...

  @overload
  def rotateX(self, arg0: float, arg1: Vector3d) -> Vector3d: ...

  @overload
  def rotateY(self, arg0: float) -> Vector3d: ...

  @overload
  def rotateY(self, arg0: float, arg1: Vector3d) -> Vector3d: ...

  @overload
  def rotateY(self, arg0: float, arg1: Vector3d) -> Vector3d: ...

  @overload
  def rotateZ(self, arg0: float) -> Vector3d: ...

  @overload
  def rotateZ(self, arg0: float, arg1: Vector3d) -> Vector3d: ...

  @overload
  def rotateZ(self, arg0: float, arg1: Vector3d) -> Vector3d: ...

  @overload
  def rotationTo(self, arg0: Vector3dc, arg1: Quaterniond) -> Quaterniond: ...

  @overload
  def rotationTo(self, arg0: Vector3dc, arg1: Quaterniond) -> Quaterniond: ...

  @overload
  def rotationTo(self, arg0: float, arg1: float, arg2: float, arg3: Quaterniond) -> Quaterniond: ...

  @overload
  def rotationTo(self, arg0: float, arg1: float, arg2: float, arg3: Quaterniond) -> Quaterniond: ...

  @overload
  def round(self) -> Vector3d: ...

  @overload
  def round(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def round(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def set(self, arg0: list[float]) -> Vector3d: ...

  @overload
  def set(self, arg0: list[float]) -> Vector3d: ...

  @overload
  def set(self, arg0: float) -> Vector3d: ...

  @overload
  def set(self, arg0: ByteBuffer) -> Vector3d: ...

  @overload
  def set(self, arg0: DoubleBuffer) -> Vector3d: ...

  @overload
  def set(self, arg0: Vector3dc) -> Vector3d: ...

  @overload
  def set(self, arg0: Vector3fc) -> Vector3d: ...

  @overload
  def set(self, arg0: Vector3ic) -> Vector3d: ...

  @overload
  def set(self, arg0: int, arg1: ByteBuffer) -> Vector3d: ...

  @overload
  def set(self, arg0: int, arg1: DoubleBuffer) -> Vector3d: ...

  @overload
  def set(self, arg0: Vector2dc, arg1: float) -> Vector3d: ...

  @overload
  def set(self, arg0: Vector2fc, arg1: float) -> Vector3d: ...

  @overload
  def set(self, arg0: Vector2ic, arg1: float) -> Vector3d: ...

  @overload
  def set(self, arg0: float, arg1: float, arg2: float) -> Vector3d: ...

  def setComponent(self, arg0: int, arg1: float) -> Vector3d: ...

  def setFromAddress(self, arg0: int) -> Vector3d: ...

  @overload
  def smoothStep(self, arg0: Vector3dc, arg1: float, arg2: Vector3d) -> Vector3d: ...

  @overload
  def smoothStep(self, arg0: Vector3dc, arg1: float, arg2: Vector3d) -> Vector3d: ...

  @overload
  def sub(self, arg0: Vector3dc) -> Vector3d: ...

  @overload
  def sub(self, arg0: Vector3fc) -> Vector3d: ...

  @overload
  def sub(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def sub(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def sub(self, arg0: Vector3fc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def sub(self, arg0: Vector3fc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def sub(self, arg0: float, arg1: float, arg2: float) -> Vector3d: ...

  @overload
  def sub(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def sub(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def toString(self) -> str: ...

  @overload
  def toString(self, arg0: NumberFormat) -> str: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def x(self) -> float: ...

  @overload
  def x(self) -> float: ...

  @overload
  def y(self) -> float: ...

  @overload
  def y(self) -> float: ...

  @overload
  def z(self) -> float: ...

  @overload
  def z(self) -> float: ...

  def zero(self) -> Vector3d: ...

  @overload
  def __init__(self):
    self.x: float

    self.y: float

    self.z: float

  @overload
  def __init__(self, arg0: list[float]): ...
  @overload
  def __init__(self, arg0: list[float]): ...
  @overload
  def __init__(self, arg0: float): ...
  @overload
  def __init__(self, arg0: ByteBuffer): ...
  @overload
  def __init__(self, arg0: DoubleBuffer): ...
  @overload
  def __init__(self, arg0: Vector3dc): ...
  @overload
  def __init__(self, arg0: Vector3fc): ...
  @overload
  def __init__(self, arg0: Vector3ic): ...
  @overload
  def __init__(self, arg0: int, arg1: ByteBuffer): ...
  @overload
  def __init__(self, arg0: int, arg1: DoubleBuffer): ...
  @overload
  def __init__(self, arg0: Vector2dc, arg1: float): ...
  @overload
  def __init__(self, arg0: Vector2fc, arg1: float): ...
  @overload
  def __init__(self, arg0: Vector2ic, arg1: float): ...
  @overload
  def __init__(self, arg0: float, arg1: float, arg2: float): ...


class Vector3dc:

  def absolute(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def add(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def add(self, arg0: Vector3fc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def add(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  def angle(self, arg0: Vector3dc) -> float: ...

  def angleCos(self, arg0: Vector3dc) -> float: ...

  @overload
  def angleSigned(self, arg0: Vector3dc, arg1: Vector3dc) -> float: ...

  @overload
  def angleSigned(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> float: ...

  def ceil(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def cross(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def cross(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def distance(self, arg0: Vector3dc) -> float: ...

  @overload
  def distance(self, arg0: float, arg1: float, arg2: float) -> float: ...

  @overload
  def distanceSquared(self, arg0: Vector3dc) -> float: ...

  @overload
  def distanceSquared(self, arg0: float, arg1: float, arg2: float) -> float: ...

  @overload
  def div(self, arg0: float, arg1: Vector3d) -> Vector3d: ...

  @overload
  def div(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def div(self, arg0: Vector3fc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def div(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def dot(self, arg0: Vector3dc) -> float: ...

  @overload
  def dot(self, arg0: float, arg1: float, arg2: float) -> float: ...

  @overload
  def equals(self, arg0: Vector3dc, arg1: float) -> bool: ...

  @overload
  def equals(self, arg0: float, arg1: float, arg2: float) -> bool: ...

  def floor(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def fma(self, arg0: float, arg1: Vector3dc, arg2: Vector3d) -> Vector3d: ...

  @overload
  def fma(self, arg0: float, arg1: Vector3fc, arg2: Vector3d) -> Vector3d: ...

  @overload
  def fma(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Vector3d) -> Vector3d: ...

  @overload
  def fma(self, arg0: Vector3dc, arg1: Vector3fc, arg2: Vector3d) -> Vector3d: ...

  @overload
  def fma(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Vector3d) -> Vector3d: ...

  @overload
  def get(self, arg0: int) -> float: ...

  @overload
  def get(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def get(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def get(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def get(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: int, arg1: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def get(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get(self, arg0: int, arg1: Vector3i) -> Vector3i: ...

  def getToAddress(self, arg0: int) -> Vector3dc: ...

  @overload
  def getf(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getf(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def half(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def half(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  def hermite(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Vector3dc, arg3: float, arg4: Vector3d) -> Vector3d: ...

  def isFinite(self) -> bool: ...

  def length(self) -> float: ...

  def lengthSquared(self) -> float: ...

  def lerp(self, arg0: Vector3dc, arg1: float, arg2: Vector3d) -> Vector3d: ...

  def max(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  def maxComponent(self) -> int: ...

  def min(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  def minComponent(self) -> int: ...

  @overload
  def mul(self, arg0: float, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mul(self, arg0: Matrix3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mul(self, arg0: Matrix3dc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def mul(self, arg0: Matrix3fc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mul(self, arg0: Matrix3x2dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mul(self, arg0: Matrix3x2fc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mul(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mul(self, arg0: Vector3fc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mul(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  @overload
  def mulAdd(self, arg0: float, arg1: Vector3dc, arg2: Vector3d) -> Vector3d: ...

  @overload
  def mulAdd(self, arg0: Vector3dc, arg1: Vector3dc, arg2: Vector3d) -> Vector3d: ...

  @overload
  def mulAdd(self, arg0: Vector3fc, arg1: Vector3dc, arg2: Vector3d) -> Vector3d: ...

  @overload
  def mulDirection(self, arg0: Matrix4dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mulDirection(self, arg0: Matrix4fc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mulDirection(self, arg0: Matrix4x3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mulDirection(self, arg0: Matrix4x3fc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mulPosition(self, arg0: Matrix4dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mulPosition(self, arg0: Matrix4fc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mulPosition(self, arg0: Matrix4x3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mulPosition(self, arg0: Matrix4x3fc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mulPositionW(self, arg0: Matrix4dc, arg1: Vector3d) -> float: ...

  @overload
  def mulPositionW(self, arg0: Matrix4fc, arg1: Vector3d) -> float: ...

  @overload
  def mulProject(self, arg0: Matrix4dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mulProject(self, arg0: Matrix4fc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mulProject(self, arg0: Matrix4dc, arg1: float, arg2: Vector3d) -> Vector3d: ...

  @overload
  def mulTranspose(self, arg0: Matrix3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mulTranspose(self, arg0: Matrix3fc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mulTransposeDirection(self, arg0: Matrix4dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mulTransposeDirection(self, arg0: Matrix4fc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mulTransposePosition(self, arg0: Matrix4dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mulTransposePosition(self, arg0: Matrix4fc, arg1: Vector3d) -> Vector3d: ...

  def negate(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def normalize(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def normalize(self, arg0: float, arg1: Vector3d) -> Vector3d: ...

  def orthogonalize(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  def orthogonalizeUnit(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def reflect(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def reflect(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  def rotate(self, arg0: Quaterniondc, arg1: Vector3d) -> Vector3d: ...

  def rotateAxis(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Vector3d) -> Vector3d: ...

  def rotateX(self, arg0: float, arg1: Vector3d) -> Vector3d: ...

  def rotateY(self, arg0: float, arg1: Vector3d) -> Vector3d: ...

  def rotateZ(self, arg0: float, arg1: Vector3d) -> Vector3d: ...

  @overload
  def rotationTo(self, arg0: Vector3dc, arg1: Quaterniond) -> Quaterniond: ...

  @overload
  def rotationTo(self, arg0: float, arg1: float, arg2: float, arg3: Quaterniond) -> Quaterniond: ...

  def round(self, arg0: Vector3d) -> Vector3d: ...

  def smoothStep(self, arg0: Vector3dc, arg1: float, arg2: Vector3d) -> Vector3d: ...

  @overload
  def sub(self, arg0: Vector3dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def sub(self, arg0: Vector3fc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def sub(self, arg0: float, arg1: float, arg2: float, arg3: Vector3d) -> Vector3d: ...

  def x(self) -> float: ...

  def y(self) -> float: ...

  def z(self) -> float: ...


class Vector3f:

  @overload
  def absolute(self) -> Vector3f: ...

  @overload
  def absolute(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def absolute(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def add(self, arg0: Vector3fc) -> Vector3f: ...

  @overload
  def add(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def add(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def add(self, arg0: float, arg1: float, arg2: float) -> Vector3f: ...

  @overload
  def add(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  @overload
  def add(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  @overload
  def angle(self, arg0: Vector3fc) -> float: ...

  @overload
  def angle(self, arg0: Vector3fc) -> float: ...

  @overload
  def angleCos(self, arg0: Vector3fc) -> float: ...

  @overload
  def angleCos(self, arg0: Vector3fc) -> float: ...

  @overload
  def angleSigned(self, arg0: Vector3fc, arg1: Vector3fc) -> float: ...

  @overload
  def angleSigned(self, arg0: Vector3fc, arg1: Vector3fc) -> float: ...

  @overload
  def angleSigned(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> float: ...

  @overload
  def angleSigned(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> float: ...

  @overload
  def ceil(self) -> Vector3f: ...

  @overload
  def ceil(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def ceil(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def cross(self, arg0: Vector3fc) -> Vector3f: ...

  @overload
  def cross(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def cross(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def cross(self, arg0: float, arg1: float, arg2: float) -> Vector3f: ...

  @overload
  def cross(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  @overload
  def cross(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  @overload
  def distance(self, arg0: Vector3fc) -> float: ...

  @overload
  def distance(self, arg0: Vector3fc) -> float: ...

  @overload
  def distance(self, arg0: float, arg1: float, arg2: float) -> float: ...

  @overload
  def distance(self, arg0: float, arg1: float, arg2: float) -> float: ...

  @overload
  def distanceSquared(self, arg0: Vector3fc) -> float: ...

  @overload
  def distanceSquared(self, arg0: Vector3fc) -> float: ...

  @overload
  def distanceSquared(self, arg0: float, arg1: float, arg2: float) -> float: ...

  @overload
  def distanceSquared(self, arg0: float, arg1: float, arg2: float) -> float: ...

  @overload
  def div(self, arg0: float) -> Vector3f: ...

  @overload
  def div(self, arg0: Vector3fc) -> Vector3f: ...

  @overload
  def div(self, arg0: float, arg1: Vector3f) -> Vector3f: ...

  @overload
  def div(self, arg0: float, arg1: Vector3f) -> Vector3f: ...

  @overload
  def div(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def div(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def div(self, arg0: float, arg1: float, arg2: float) -> Vector3f: ...

  @overload
  def div(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  @overload
  def div(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  @overload
  def dot(self, arg0: Vector3fc) -> float: ...

  @overload
  def dot(self, arg0: Vector3fc) -> float: ...

  @overload
  def dot(self, arg0: float, arg1: float, arg2: float) -> float: ...

  @overload
  def dot(self, arg0: float, arg1: float, arg2: float) -> float: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def equals(self, arg0: Vector3fc, arg1: float) -> bool: ...

  @overload
  def equals(self, arg0: Vector3fc, arg1: float) -> bool: ...

  @overload
  def equals(self, arg0: float, arg1: float, arg2: float) -> bool: ...

  @overload
  def equals(self, arg0: float, arg1: float, arg2: float) -> bool: ...

  @overload
  def floor(self) -> Vector3f: ...

  @overload
  def floor(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def floor(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def fma(self, arg0: float, arg1: Vector3fc) -> Vector3f: ...

  @overload
  def fma(self, arg0: Vector3fc, arg1: Vector3fc) -> Vector3f: ...

  @overload
  def fma(self, arg0: float, arg1: Vector3fc, arg2: Vector3f) -> Vector3f: ...

  @overload
  def fma(self, arg0: float, arg1: Vector3fc, arg2: Vector3f) -> Vector3f: ...

  @overload
  def fma(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Vector3f) -> Vector3f: ...

  @overload
  def fma(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Vector3f) -> Vector3f: ...

  @overload
  def get(self, arg0: int) -> float: ...

  @overload
  def get(self, arg0: int) -> float: ...

  @overload
  def get(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def get(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def get(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def get(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def get(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get(self, arg0: int, arg1: Vector3i) -> Vector3i: ...

  @overload
  def get(self, arg0: int, arg1: Vector3i) -> Vector3i: ...

  @overload
  def getToAddress(self, arg0: int) -> Vector3fc: ...

  @overload
  def getToAddress(self, arg0: int) -> Vector3fc: ...

  @overload
  def half(self, arg0: Vector3fc) -> Vector3f: ...

  @overload
  def half(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def half(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def half(self, arg0: float, arg1: float, arg2: float) -> Vector3f: ...

  @overload
  def half(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  @overload
  def half(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  def hashCode(self) -> int: ...

  @overload
  def hermite(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Vector3fc, arg3: float, arg4: Vector3f) -> Vector3f: ...

  @overload
  def hermite(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Vector3fc, arg3: float, arg4: Vector3f) -> Vector3f: ...

  @overload
  def isFinite(self) -> bool: ...

  @overload
  def isFinite(self) -> bool: ...

  @overload
  def length(self) -> float: ...

  @overload
  def length(self) -> float: ...

  @overload
  def lengthSquared(self) -> float: ...

  @overload
  def lengthSquared(self) -> float: ...

  @overload
  def lerp(self, arg0: Vector3fc, arg1: float) -> Vector3f: ...

  @overload
  def lerp(self, arg0: Vector3fc, arg1: float, arg2: Vector3f) -> Vector3f: ...

  @overload
  def lerp(self, arg0: Vector3fc, arg1: float, arg2: Vector3f) -> Vector3f: ...

  @overload
  def max(self, arg0: Vector3fc) -> Vector3f: ...

  @overload
  def max(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def max(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def maxComponent(self) -> int: ...

  @overload
  def maxComponent(self) -> int: ...

  @overload
  def min(self, arg0: Vector3fc) -> Vector3f: ...

  @overload
  def min(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def min(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def minComponent(self) -> int: ...

  @overload
  def minComponent(self) -> int: ...

  @overload
  def mul(self, arg0: float) -> Vector3f: ...

  @overload
  def mul(self, arg0: Matrix3dc) -> Vector3f: ...

  @overload
  def mul(self, arg0: Matrix3fc) -> Vector3f: ...

  @overload
  def mul(self, arg0: Matrix3x2fc) -> Vector3f: ...

  @overload
  def mul(self, arg0: Vector3fc) -> Vector3f: ...

  @overload
  def mul(self, arg0: float, arg1: Vector3f) -> Vector3f: ...

  @overload
  def mul(self, arg0: float, arg1: Vector3f) -> Vector3f: ...

  @overload
  def mul(self, arg0: Matrix3dc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def mul(self, arg0: Matrix3dc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def mul(self, arg0: Matrix3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def mul(self, arg0: Matrix3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def mul(self, arg0: Matrix3x2fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def mul(self, arg0: Matrix3x2fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def mul(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def mul(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def mul(self, arg0: float, arg1: float, arg2: float) -> Vector3f: ...

  @overload
  def mul(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  @overload
  def mul(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  @overload
  def mulAdd(self, arg0: float, arg1: Vector3fc) -> Vector3f: ...

  @overload
  def mulAdd(self, arg0: Vector3fc, arg1: Vector3fc) -> Vector3f: ...

  @overload
  def mulAdd(self, arg0: float, arg1: Vector3fc, arg2: Vector3f) -> Vector3f: ...

  @overload
  def mulAdd(self, arg0: float, arg1: Vector3fc, arg2: Vector3f) -> Vector3f: ...

  @overload
  def mulAdd(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Vector3f) -> Vector3f: ...

  @overload
  def mulAdd(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Vector3f) -> Vector3f: ...

  @overload
  def mulDirection(self, arg0: Matrix4dc) -> Vector3f: ...

  @overload
  def mulDirection(self, arg0: Matrix4fc) -> Vector3f: ...

  @overload
  def mulDirection(self, arg0: Matrix4x3fc) -> Vector3f: ...

  @overload
  def mulDirection(self, arg0: Matrix4dc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def mulDirection(self, arg0: Matrix4dc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def mulDirection(self, arg0: Matrix4fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def mulDirection(self, arg0: Matrix4fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def mulDirection(self, arg0: Matrix4x3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def mulDirection(self, arg0: Matrix4x3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def mulPosition(self, arg0: Matrix4fc) -> Vector3f: ...

  @overload
  def mulPosition(self, arg0: Matrix4x3fc) -> Vector3f: ...

  @overload
  def mulPosition(self, arg0: Matrix4fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def mulPosition(self, arg0: Matrix4fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def mulPosition(self, arg0: Matrix4x3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def mulPosition(self, arg0: Matrix4x3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def mulPositionW(self, arg0: Matrix4fc) -> float: ...

  @overload
  def mulPositionW(self, arg0: Matrix4fc, arg1: Vector3f) -> float: ...

  @overload
  def mulPositionW(self, arg0: Matrix4fc, arg1: Vector3f) -> float: ...

  @overload
  def mulProject(self, arg0: Matrix4fc) -> Vector3f: ...

  @overload
  def mulProject(self, arg0: Matrix4fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def mulProject(self, arg0: Matrix4fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def mulProject(self, arg0: Matrix4fc, arg1: float, arg2: Vector3f) -> Vector3f: ...

  @overload
  def mulProject(self, arg0: Matrix4fc, arg1: float, arg2: Vector3f) -> Vector3f: ...

  @overload
  def mulTranspose(self, arg0: Matrix3fc) -> Vector3f: ...

  @overload
  def mulTranspose(self, arg0: Matrix3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def mulTranspose(self, arg0: Matrix3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def mulTransposeDirection(self, arg0: Matrix4fc) -> Vector3f: ...

  @overload
  def mulTransposeDirection(self, arg0: Matrix4fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def mulTransposeDirection(self, arg0: Matrix4fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def mulTransposePosition(self, arg0: Matrix4fc) -> Vector3f: ...

  @overload
  def mulTransposePosition(self, arg0: Matrix4fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def mulTransposePosition(self, arg0: Matrix4fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def negate(self) -> Vector3f: ...

  @overload
  def negate(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def negate(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def normalize(self) -> Vector3f: ...

  @overload
  def normalize(self, arg0: float) -> Vector3f: ...

  @overload
  def normalize(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def normalize(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def normalize(self, arg0: float, arg1: Vector3f) -> Vector3f: ...

  @overload
  def normalize(self, arg0: float, arg1: Vector3f) -> Vector3f: ...

  @overload
  def orthogonalize(self, arg0: Vector3fc) -> Vector3f: ...

  @overload
  def orthogonalize(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def orthogonalize(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def orthogonalizeUnit(self, arg0: Vector3fc) -> Vector3f: ...

  @overload
  def orthogonalizeUnit(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def orthogonalizeUnit(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def reflect(self, arg0: Vector3fc) -> Vector3f: ...

  @overload
  def reflect(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def reflect(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def reflect(self, arg0: float, arg1: float, arg2: float) -> Vector3f: ...

  @overload
  def reflect(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  @overload
  def reflect(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  @overload
  def rotate(self, arg0: Quaternionfc) -> Vector3f: ...

  @overload
  def rotate(self, arg0: Quaternionfc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def rotate(self, arg0: Quaternionfc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def rotateAxis(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Vector3f: ...

  @overload
  def rotateAxis(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Vector3f) -> Vector3f: ...

  @overload
  def rotateAxis(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Vector3f) -> Vector3f: ...

  @overload
  def rotateX(self, arg0: float) -> Vector3f: ...

  @overload
  def rotateX(self, arg0: float, arg1: Vector3f) -> Vector3f: ...

  @overload
  def rotateX(self, arg0: float, arg1: Vector3f) -> Vector3f: ...

  @overload
  def rotateY(self, arg0: float) -> Vector3f: ...

  @overload
  def rotateY(self, arg0: float, arg1: Vector3f) -> Vector3f: ...

  @overload
  def rotateY(self, arg0: float, arg1: Vector3f) -> Vector3f: ...

  @overload
  def rotateZ(self, arg0: float) -> Vector3f: ...

  @overload
  def rotateZ(self, arg0: float, arg1: Vector3f) -> Vector3f: ...

  @overload
  def rotateZ(self, arg0: float, arg1: Vector3f) -> Vector3f: ...

  @overload
  def rotationTo(self, arg0: Vector3fc, arg1: Quaternionf) -> Quaternionf: ...

  @overload
  def rotationTo(self, arg0: Vector3fc, arg1: Quaternionf) -> Quaternionf: ...

  @overload
  def rotationTo(self, arg0: float, arg1: float, arg2: float, arg3: Quaternionf) -> Quaternionf: ...

  @overload
  def rotationTo(self, arg0: float, arg1: float, arg2: float, arg3: Quaternionf) -> Quaternionf: ...

  @overload
  def round(self) -> Vector3f: ...

  @overload
  def round(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def round(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def set(self, arg0: list[float]) -> Vector3f: ...

  @overload
  def set(self, arg0: float) -> Vector3f: ...

  @overload
  def set(self, arg0: float) -> Vector3f: ...

  @overload
  def set(self, arg0: ByteBuffer) -> Vector3f: ...

  @overload
  def set(self, arg0: FloatBuffer) -> Vector3f: ...

  @overload
  def set(self, arg0: Vector3dc) -> Vector3f: ...

  @overload
  def set(self, arg0: Vector3fc) -> Vector3f: ...

  @overload
  def set(self, arg0: Vector3ic) -> Vector3f: ...

  @overload
  def set(self, arg0: int, arg1: ByteBuffer) -> Vector3f: ...

  @overload
  def set(self, arg0: int, arg1: FloatBuffer) -> Vector3f: ...

  @overload
  def set(self, arg0: Vector2dc, arg1: float) -> Vector3f: ...

  @overload
  def set(self, arg0: Vector2fc, arg1: float) -> Vector3f: ...

  @overload
  def set(self, arg0: Vector2ic, arg1: float) -> Vector3f: ...

  @overload
  def set(self, arg0: float, arg1: float, arg2: float) -> Vector3f: ...

  @overload
  def set(self, arg0: float, arg1: float, arg2: float) -> Vector3f: ...

  def setComponent(self, arg0: int, arg1: float) -> Vector3f: ...

  def setFromAddress(self, arg0: int) -> Vector3f: ...

  @overload
  def smoothStep(self, arg0: Vector3fc, arg1: float, arg2: Vector3f) -> Vector3f: ...

  @overload
  def smoothStep(self, arg0: Vector3fc, arg1: float, arg2: Vector3f) -> Vector3f: ...

  @overload
  def sub(self, arg0: Vector3fc) -> Vector3f: ...

  @overload
  def sub(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def sub(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def sub(self, arg0: float, arg1: float, arg2: float) -> Vector3f: ...

  @overload
  def sub(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  @overload
  def sub(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  @overload
  def toString(self) -> str: ...

  @overload
  def toString(self, arg0: NumberFormat) -> str: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def x(self) -> float: ...

  @overload
  def x(self) -> float: ...

  @overload
  def y(self) -> float: ...

  @overload
  def y(self) -> float: ...

  @overload
  def z(self) -> float: ...

  @overload
  def z(self) -> float: ...

  def zero(self) -> Vector3f: ...

  @overload
  def __init__(self):
    self.x: float

    self.y: float

    self.z: float

  @overload
  def __init__(self, arg0: list[float]): ...
  @overload
  def __init__(self, arg0: float): ...
  @overload
  def __init__(self, arg0: ByteBuffer): ...
  @overload
  def __init__(self, arg0: FloatBuffer): ...
  @overload
  def __init__(self, arg0: Vector3fc): ...
  @overload
  def __init__(self, arg0: Vector3ic): ...
  @overload
  def __init__(self, arg0: int, arg1: ByteBuffer): ...
  @overload
  def __init__(self, arg0: int, arg1: FloatBuffer): ...
  @overload
  def __init__(self, arg0: Vector2fc, arg1: float): ...
  @overload
  def __init__(self, arg0: Vector2ic, arg1: float): ...
  @overload
  def __init__(self, arg0: float, arg1: float, arg2: float): ...


class Vector3fc:

  def absolute(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def add(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def add(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  def angle(self, arg0: Vector3fc) -> float: ...

  def angleCos(self, arg0: Vector3fc) -> float: ...

  @overload
  def angleSigned(self, arg0: Vector3fc, arg1: Vector3fc) -> float: ...

  @overload
  def angleSigned(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> float: ...

  def ceil(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def cross(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def cross(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  @overload
  def distance(self, arg0: Vector3fc) -> float: ...

  @overload
  def distance(self, arg0: float, arg1: float, arg2: float) -> float: ...

  @overload
  def distanceSquared(self, arg0: Vector3fc) -> float: ...

  @overload
  def distanceSquared(self, arg0: float, arg1: float, arg2: float) -> float: ...

  @overload
  def div(self, arg0: float, arg1: Vector3f) -> Vector3f: ...

  @overload
  def div(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def div(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  @overload
  def dot(self, arg0: Vector3fc) -> float: ...

  @overload
  def dot(self, arg0: float, arg1: float, arg2: float) -> float: ...

  @overload
  def equals(self, arg0: Vector3fc, arg1: float) -> bool: ...

  @overload
  def equals(self, arg0: float, arg1: float, arg2: float) -> bool: ...

  def floor(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def fma(self, arg0: float, arg1: Vector3fc, arg2: Vector3f) -> Vector3f: ...

  @overload
  def fma(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Vector3f) -> Vector3f: ...

  @overload
  def get(self, arg0: int) -> float: ...

  @overload
  def get(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get(self, arg0: Vector3d) -> Vector3d: ...

  @overload
  def get(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def get(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get(self, arg0: int, arg1: Vector3i) -> Vector3i: ...

  def getToAddress(self, arg0: int) -> Vector3fc: ...

  @overload
  def half(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def half(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  def hermite(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Vector3fc, arg3: float, arg4: Vector3f) -> Vector3f: ...

  def isFinite(self) -> bool: ...

  def length(self) -> float: ...

  def lengthSquared(self) -> float: ...

  def lerp(self, arg0: Vector3fc, arg1: float, arg2: Vector3f) -> Vector3f: ...

  def max(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  def maxComponent(self) -> int: ...

  def min(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  def minComponent(self) -> int: ...

  @overload
  def mul(self, arg0: float, arg1: Vector3f) -> Vector3f: ...

  @overload
  def mul(self, arg0: Matrix3dc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def mul(self, arg0: Matrix3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def mul(self, arg0: Matrix3x2fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def mul(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def mul(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  @overload
  def mulAdd(self, arg0: float, arg1: Vector3fc, arg2: Vector3f) -> Vector3f: ...

  @overload
  def mulAdd(self, arg0: Vector3fc, arg1: Vector3fc, arg2: Vector3f) -> Vector3f: ...

  @overload
  def mulDirection(self, arg0: Matrix4dc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def mulDirection(self, arg0: Matrix4fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def mulDirection(self, arg0: Matrix4x3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def mulPosition(self, arg0: Matrix4fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def mulPosition(self, arg0: Matrix4x3fc, arg1: Vector3f) -> Vector3f: ...

  def mulPositionW(self, arg0: Matrix4fc, arg1: Vector3f) -> float: ...

  @overload
  def mulProject(self, arg0: Matrix4fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def mulProject(self, arg0: Matrix4fc, arg1: float, arg2: Vector3f) -> Vector3f: ...

  def mulTranspose(self, arg0: Matrix3fc, arg1: Vector3f) -> Vector3f: ...

  def mulTransposeDirection(self, arg0: Matrix4fc, arg1: Vector3f) -> Vector3f: ...

  def mulTransposePosition(self, arg0: Matrix4fc, arg1: Vector3f) -> Vector3f: ...

  def negate(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def normalize(self, arg0: Vector3f) -> Vector3f: ...

  @overload
  def normalize(self, arg0: float, arg1: Vector3f) -> Vector3f: ...

  def orthogonalize(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  def orthogonalizeUnit(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def reflect(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def reflect(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  def rotate(self, arg0: Quaternionfc, arg1: Vector3f) -> Vector3f: ...

  def rotateAxis(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Vector3f) -> Vector3f: ...

  def rotateX(self, arg0: float, arg1: Vector3f) -> Vector3f: ...

  def rotateY(self, arg0: float, arg1: Vector3f) -> Vector3f: ...

  def rotateZ(self, arg0: float, arg1: Vector3f) -> Vector3f: ...

  @overload
  def rotationTo(self, arg0: Vector3fc, arg1: Quaternionf) -> Quaternionf: ...

  @overload
  def rotationTo(self, arg0: float, arg1: float, arg2: float, arg3: Quaternionf) -> Quaternionf: ...

  def round(self, arg0: Vector3f) -> Vector3f: ...

  def smoothStep(self, arg0: Vector3fc, arg1: float, arg2: Vector3f) -> Vector3f: ...

  @overload
  def sub(self, arg0: Vector3fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def sub(self, arg0: float, arg1: float, arg2: float, arg3: Vector3f) -> Vector3f: ...

  def x(self) -> float: ...

  def y(self) -> float: ...

  def z(self) -> float: ...


class Vector3i:

  @overload
  def absolute(self) -> Vector3i: ...

  @overload
  def absolute(self, arg0: Vector3i) -> Vector3i: ...

  @overload
  def absolute(self, arg0: Vector3i) -> Vector3i: ...

  @overload
  def add(self, arg0: Vector3ic) -> Vector3i: ...

  @overload
  def add(self, arg0: Vector3ic, arg1: Vector3i) -> Vector3i: ...

  @overload
  def add(self, arg0: Vector3ic, arg1: Vector3i) -> Vector3i: ...

  @overload
  def add(self, arg0: int, arg1: int, arg2: int) -> Vector3i: ...

  @overload
  def add(self, arg0: int, arg1: int, arg2: int, arg3: Vector3i) -> Vector3i: ...

  @overload
  def add(self, arg0: int, arg1: int, arg2: int, arg3: Vector3i) -> Vector3i: ...

  @overload
  def distance(self, arg0: Vector3ic) -> float: ...

  @overload
  def distance(self, arg0: Vector3ic) -> float: ...

  @overload
  def distance(self, arg0: int, arg1: int, arg2: int) -> float: ...

  @overload
  def distance(self, arg0: int, arg1: int, arg2: int) -> float: ...

  @overload
  def distanceSquared(self, arg0: Vector3ic) -> int: ...

  @overload
  def distanceSquared(self, arg0: Vector3ic) -> int: ...

  @overload
  def distanceSquared(self, arg0: int, arg1: int, arg2: int) -> int: ...

  @overload
  def distanceSquared(self, arg0: int, arg1: int, arg2: int) -> int: ...

  @overload
  def div(self, arg0: float) -> Vector3i: ...

  @overload
  def div(self, arg0: int) -> Vector3i: ...

  @overload
  def div(self, arg0: float, arg1: Vector3i) -> Vector3i: ...

  @overload
  def div(self, arg0: float, arg1: Vector3i) -> Vector3i: ...

  @overload
  def div(self, arg0: int, arg1: Vector3i) -> Vector3i: ...

  @overload
  def div(self, arg0: int, arg1: Vector3i) -> Vector3i: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def equals(self, arg0: int, arg1: int, arg2: int) -> bool: ...

  @overload
  def equals(self, arg0: int, arg1: int, arg2: int) -> bool: ...

  @overload
  def get(self, arg0: int) -> int: ...

  @overload
  def get(self, arg0: int) -> int: ...

  @overload
  def get(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: IntBuffer) -> IntBuffer: ...

  @overload
  def get(self, arg0: IntBuffer) -> IntBuffer: ...

  @overload
  def get(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: int, arg1: IntBuffer) -> IntBuffer: ...

  @overload
  def get(self, arg0: int, arg1: IntBuffer) -> IntBuffer: ...

  @overload
  def getToAddress(self, arg0: int) -> Vector3ic: ...

  @overload
  def getToAddress(self, arg0: int) -> Vector3ic: ...

  @overload
  def gridDistance(self, arg0: Vector3ic) -> int: ...

  @overload
  def gridDistance(self, arg0: Vector3ic) -> int: ...

  @overload
  def gridDistance(self, arg0: int, arg1: int, arg2: int) -> int: ...

  @overload
  def gridDistance(self, arg0: int, arg1: int, arg2: int) -> int: ...

  def hashCode(self) -> int: ...

  @overload
  def length(self) -> float: ...

  @overload
  def length(self) -> float: ...

  @overload
  def lengthSquared(self) -> int: ...

  @overload
  def lengthSquared(self) -> int: ...

  @overload
  def max(self, arg0: Vector3ic) -> Vector3i: ...

  @overload
  def max(self, arg0: Vector3ic, arg1: Vector3i) -> Vector3i: ...

  @overload
  def max(self, arg0: Vector3ic, arg1: Vector3i) -> Vector3i: ...

  @overload
  def maxComponent(self) -> int: ...

  @overload
  def maxComponent(self) -> int: ...

  @overload
  def min(self, arg0: Vector3ic) -> Vector3i: ...

  @overload
  def min(self, arg0: Vector3ic, arg1: Vector3i) -> Vector3i: ...

  @overload
  def min(self, arg0: Vector3ic, arg1: Vector3i) -> Vector3i: ...

  @overload
  def minComponent(self) -> int: ...

  @overload
  def minComponent(self) -> int: ...

  @overload
  def mul(self, arg0: int) -> Vector3i: ...

  @overload
  def mul(self, arg0: Vector3ic) -> Vector3i: ...

  @overload
  def mul(self, arg0: int, arg1: Vector3i) -> Vector3i: ...

  @overload
  def mul(self, arg0: int, arg1: Vector3i) -> Vector3i: ...

  @overload
  def mul(self, arg0: Vector3ic, arg1: Vector3i) -> Vector3i: ...

  @overload
  def mul(self, arg0: Vector3ic, arg1: Vector3i) -> Vector3i: ...

  @overload
  def mul(self, arg0: int, arg1: int, arg2: int) -> Vector3i: ...

  @overload
  def mul(self, arg0: int, arg1: int, arg2: int, arg3: Vector3i) -> Vector3i: ...

  @overload
  def mul(self, arg0: int, arg1: int, arg2: int, arg3: Vector3i) -> Vector3i: ...

  @overload
  def negate(self) -> Vector3i: ...

  @overload
  def negate(self, arg0: Vector3i) -> Vector3i: ...

  @overload
  def negate(self, arg0: Vector3i) -> Vector3i: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def set(self, arg0: list[int]) -> Vector3i: ...

  @overload
  def set(self, arg0: int) -> Vector3i: ...

  @overload
  def set(self, arg0: ByteBuffer) -> Vector3i: ...

  @overload
  def set(self, arg0: IntBuffer) -> Vector3i: ...

  @overload
  def set(self, arg0: Vector3dc) -> Vector3i: ...

  @overload
  def set(self, arg0: Vector3ic) -> Vector3i: ...

  @overload
  def set(self, arg0: int, arg1: ByteBuffer) -> Vector3i: ...

  @overload
  def set(self, arg0: int, arg1: IntBuffer) -> Vector3i: ...

  @overload
  def set(self, arg0: Vector2ic, arg1: int) -> Vector3i: ...

  @overload
  def set(self, arg0: Vector3dc, arg1: int) -> Vector3i: ...

  @overload
  def set(self, arg0: Vector3fc, arg1: int) -> Vector3i: ...

  @overload
  def set(self, arg0: int, arg1: int, arg2: int) -> Vector3i: ...

  def setComponent(self, arg0: int, arg1: int) -> Vector3i: ...

  def setFromAddress(self, arg0: int) -> Vector3i: ...

  @overload
  def sub(self, arg0: Vector3ic) -> Vector3i: ...

  @overload
  def sub(self, arg0: Vector3ic, arg1: Vector3i) -> Vector3i: ...

  @overload
  def sub(self, arg0: Vector3ic, arg1: Vector3i) -> Vector3i: ...

  @overload
  def sub(self, arg0: int, arg1: int, arg2: int) -> Vector3i: ...

  @overload
  def sub(self, arg0: int, arg1: int, arg2: int, arg3: Vector3i) -> Vector3i: ...

  @overload
  def sub(self, arg0: int, arg1: int, arg2: int, arg3: Vector3i) -> Vector3i: ...

  @overload
  def toString(self) -> str: ...

  @overload
  def toString(self, arg0: NumberFormat) -> str: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def x(self) -> int: ...

  @overload
  def x(self) -> int: ...

  @overload
  def y(self) -> int: ...

  @overload
  def y(self) -> int: ...

  @overload
  def z(self) -> int: ...

  @overload
  def z(self) -> int: ...

  def zero(self) -> Vector3i: ...

  @overload
  def __init__(self):
    self.x: int

    self.y: int

    self.z: int

  @overload
  def __init__(self, arg0: list[int]): ...
  @overload
  def __init__(self, arg0: int): ...
  @overload
  def __init__(self, arg0: ByteBuffer): ...
  @overload
  def __init__(self, arg0: IntBuffer): ...
  @overload
  def __init__(self, arg0: Vector3ic): ...
  @overload
  def __init__(self, arg0: int, arg1: ByteBuffer): ...
  @overload
  def __init__(self, arg0: int, arg1: IntBuffer): ...
  @overload
  def __init__(self, arg0: Vector2ic, arg1: int): ...
  @overload
  def __init__(self, arg0: Vector3dc, arg1: int): ...
  @overload
  def __init__(self, arg0: Vector3fc, arg1: int): ...
  @overload
  def __init__(self, arg0: int, arg1: int, arg2: int): ...
  @overload
  def __init__(self, arg0: Vector2dc, arg1: float, arg2: int): ...
  @overload
  def __init__(self, arg0: Vector2fc, arg1: float, arg2: int): ...
  @overload
  def __init__(self, arg0: float, arg1: float, arg2: float, arg3: int): ...
  @overload
  def __init__(self, arg0: float, arg1: float, arg2: float, arg3: int): ...


class Vector3ic:

  def absolute(self, arg0: Vector3i) -> Vector3i: ...

  @overload
  def add(self, arg0: Vector3ic, arg1: Vector3i) -> Vector3i: ...

  @overload
  def add(self, arg0: int, arg1: int, arg2: int, arg3: Vector3i) -> Vector3i: ...

  @overload
  def distance(self, arg0: Vector3ic) -> float: ...

  @overload
  def distance(self, arg0: int, arg1: int, arg2: int) -> float: ...

  @overload
  def distanceSquared(self, arg0: Vector3ic) -> int: ...

  @overload
  def distanceSquared(self, arg0: int, arg1: int, arg2: int) -> int: ...

  @overload
  def div(self, arg0: float, arg1: Vector3i) -> Vector3i: ...

  @overload
  def div(self, arg0: int, arg1: Vector3i) -> Vector3i: ...

  def equals(self, arg0: int, arg1: int, arg2: int) -> bool: ...

  @overload
  def get(self, arg0: int) -> int: ...

  @overload
  def get(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: IntBuffer) -> IntBuffer: ...

  @overload
  def get(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: int, arg1: IntBuffer) -> IntBuffer: ...

  def getToAddress(self, arg0: int) -> Vector3ic: ...

  @overload
  def gridDistance(self, arg0: Vector3ic) -> int: ...

  @overload
  def gridDistance(self, arg0: int, arg1: int, arg2: int) -> int: ...

  def length(self) -> float: ...

  def lengthSquared(self) -> int: ...

  def max(self, arg0: Vector3ic, arg1: Vector3i) -> Vector3i: ...

  def maxComponent(self) -> int: ...

  def min(self, arg0: Vector3ic, arg1: Vector3i) -> Vector3i: ...

  def minComponent(self) -> int: ...

  @overload
  def mul(self, arg0: int, arg1: Vector3i) -> Vector3i: ...

  @overload
  def mul(self, arg0: Vector3ic, arg1: Vector3i) -> Vector3i: ...

  @overload
  def mul(self, arg0: int, arg1: int, arg2: int, arg3: Vector3i) -> Vector3i: ...

  def negate(self, arg0: Vector3i) -> Vector3i: ...

  @overload
  def sub(self, arg0: Vector3ic, arg1: Vector3i) -> Vector3i: ...

  @overload
  def sub(self, arg0: int, arg1: int, arg2: int, arg3: Vector3i) -> Vector3i: ...

  def x(self) -> int: ...

  def y(self) -> int: ...

  def z(self) -> int: ...


class Vector4d:

  @overload
  def absolute(self) -> Vector4d: ...

  @overload
  def absolute(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def absolute(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def add(self, arg0: Vector4dc) -> Vector4d: ...

  @overload
  def add(self, arg0: Vector4fc) -> Vector4d: ...

  @overload
  def add(self, arg0: Vector4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def add(self, arg0: Vector4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def add(self, arg0: Vector4fc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def add(self, arg0: Vector4fc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def add(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Vector4d: ...

  @overload
  def add(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Vector4d) -> Vector4d: ...

  @overload
  def add(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Vector4d) -> Vector4d: ...

  @overload
  def angle(self, arg0: Vector4dc) -> float: ...

  @overload
  def angle(self, arg0: Vector4dc) -> float: ...

  @overload
  def angleCos(self, arg0: Vector4dc) -> float: ...

  @overload
  def angleCos(self, arg0: Vector4dc) -> float: ...

  @overload
  def ceil(self) -> Vector4d: ...

  @overload
  def ceil(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def ceil(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def distance(self, arg0: Vector4dc) -> float: ...

  @overload
  def distance(self, arg0: Vector4dc) -> float: ...

  @overload
  def distance(self, arg0: float, arg1: float, arg2: float, arg3: float) -> float: ...

  @overload
  def distance(self, arg0: float, arg1: float, arg2: float, arg3: float) -> float: ...

  @overload
  def distanceSquared(self, arg0: Vector4dc) -> float: ...

  @overload
  def distanceSquared(self, arg0: Vector4dc) -> float: ...

  @overload
  def distanceSquared(self, arg0: float, arg1: float, arg2: float, arg3: float) -> float: ...

  @overload
  def distanceSquared(self, arg0: float, arg1: float, arg2: float, arg3: float) -> float: ...

  @overload
  def div(self, arg0: float) -> Vector4d: ...

  @overload
  def div(self, arg0: Vector4dc) -> Vector4d: ...

  @overload
  def div(self, arg0: float, arg1: Vector4d) -> Vector4d: ...

  @overload
  def div(self, arg0: float, arg1: Vector4d) -> Vector4d: ...

  @overload
  def div(self, arg0: Vector4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def div(self, arg0: Vector4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def dot(self, arg0: Vector4dc) -> float: ...

  @overload
  def dot(self, arg0: Vector4dc) -> float: ...

  @overload
  def dot(self, arg0: float, arg1: float, arg2: float, arg3: float) -> float: ...

  @overload
  def dot(self, arg0: float, arg1: float, arg2: float, arg3: float) -> float: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def equals(self, arg0: Vector4dc, arg1: float) -> bool: ...

  @overload
  def equals(self, arg0: Vector4dc, arg1: float) -> bool: ...

  @overload
  def equals(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool: ...

  @overload
  def equals(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool: ...

  @overload
  def floor(self) -> Vector4d: ...

  @overload
  def floor(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def floor(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def fma(self, arg0: float, arg1: Vector4dc) -> Vector4d: ...

  @overload
  def fma(self, arg0: Vector4dc, arg1: Vector4dc) -> Vector4d: ...

  @overload
  def fma(self, arg0: float, arg1: Vector4dc, arg2: Vector4d) -> Vector4d: ...

  @overload
  def fma(self, arg0: float, arg1: Vector4dc, arg2: Vector4d) -> Vector4d: ...

  @overload
  def fma(self, arg0: Vector4dc, arg1: Vector4dc, arg2: Vector4d) -> Vector4d: ...

  @overload
  def fma(self, arg0: Vector4dc, arg1: Vector4dc, arg2: Vector4d) -> Vector4d: ...

  @overload
  def get(self, arg0: int) -> float: ...

  @overload
  def get(self, arg0: int) -> float: ...

  @overload
  def get(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def get(self, arg0: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def get(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def get(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def get(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def get(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def get(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: int, arg1: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def get(self, arg0: int, arg1: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def get(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get(self, arg0: int, arg1: Vector4i) -> Vector4i: ...

  @overload
  def get(self, arg0: int, arg1: Vector4i) -> Vector4i: ...

  @overload
  def getToAddress(self, arg0: int) -> Vector4dc: ...

  @overload
  def getToAddress(self, arg0: int) -> Vector4dc: ...

  @overload
  def getf(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getf(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getf(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getf(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  def hashCode(self) -> int: ...

  @overload
  def hermite(self, arg0: Vector4dc, arg1: Vector4dc, arg2: Vector4dc, arg3: float, arg4: Vector4d) -> Vector4d: ...

  @overload
  def hermite(self, arg0: Vector4dc, arg1: Vector4dc, arg2: Vector4dc, arg3: float, arg4: Vector4d) -> Vector4d: ...

  @overload
  def isFinite(self) -> bool: ...

  @overload
  def isFinite(self) -> bool: ...

  @overload
  def length(self) -> float: ...

  @overload
  def length(self) -> float: ...

  @overload
  def lengthSquared(self) -> float: ...

  @overload
  def lengthSquared(self) -> float: ...

  @overload
  def lerp(self, arg0: Vector4dc, arg1: float) -> Vector4d: ...

  @overload
  def lerp(self, arg0: Vector4dc, arg1: float, arg2: Vector4d) -> Vector4d: ...

  @overload
  def lerp(self, arg0: Vector4dc, arg1: float, arg2: Vector4d) -> Vector4d: ...

  @overload
  def max(self, arg0: Vector4dc) -> Vector4d: ...

  @overload
  def max(self, arg0: Vector4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def max(self, arg0: Vector4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def maxComponent(self) -> int: ...

  @overload
  def maxComponent(self) -> int: ...

  @overload
  def min(self, arg0: Vector4dc) -> Vector4d: ...

  @overload
  def min(self, arg0: Vector4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def min(self, arg0: Vector4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def minComponent(self) -> int: ...

  @overload
  def minComponent(self) -> int: ...

  @overload
  def mul(self, arg0: float) -> Vector4d: ...

  @overload
  def mul(self, arg0: Matrix4dc) -> Vector4d: ...

  @overload
  def mul(self, arg0: Matrix4fc) -> Vector4d: ...

  @overload
  def mul(self, arg0: Matrix4x3dc) -> Vector4d: ...

  @overload
  def mul(self, arg0: Matrix4x3fc) -> Vector4d: ...

  @overload
  def mul(self, arg0: Vector4dc) -> Vector4d: ...

  @overload
  def mul(self, arg0: Vector4fc) -> Vector4d: ...

  @overload
  def mul(self, arg0: float, arg1: Vector4d) -> Vector4d: ...

  @overload
  def mul(self, arg0: float, arg1: Vector4d) -> Vector4d: ...

  @overload
  def mul(self, arg0: Matrix4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def mul(self, arg0: Matrix4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def mul(self, arg0: Matrix4fc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def mul(self, arg0: Matrix4fc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def mul(self, arg0: Matrix4x3dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def mul(self, arg0: Matrix4x3dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def mul(self, arg0: Matrix4x3fc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def mul(self, arg0: Matrix4x3fc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def mul(self, arg0: Vector4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def mul(self, arg0: Vector4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def mul(self, arg0: Vector4fc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def mul(self, arg0: Vector4fc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def mulAdd(self, arg0: float, arg1: Vector4dc) -> Vector4d: ...

  @overload
  def mulAdd(self, arg0: Vector4dc, arg1: Vector4dc) -> Vector4d: ...

  @overload
  def mulAdd(self, arg0: float, arg1: Vector4dc, arg2: Vector4d) -> Vector4d: ...

  @overload
  def mulAdd(self, arg0: float, arg1: Vector4dc, arg2: Vector4d) -> Vector4d: ...

  @overload
  def mulAdd(self, arg0: Vector4dc, arg1: Vector4dc, arg2: Vector4d) -> Vector4d: ...

  @overload
  def mulAdd(self, arg0: Vector4dc, arg1: Vector4dc, arg2: Vector4d) -> Vector4d: ...

  @overload
  def mulAffine(self, arg0: Matrix4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def mulAffine(self, arg0: Matrix4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def mulAffineTranspose(self, arg0: Matrix4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def mulAffineTranspose(self, arg0: Matrix4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def mulProject(self, arg0: Matrix4dc) -> Vector4d: ...

  @overload
  def mulProject(self, arg0: Matrix4dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mulProject(self, arg0: Matrix4dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mulProject(self, arg0: Matrix4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def mulProject(self, arg0: Matrix4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def mulTranspose(self, arg0: Matrix4dc) -> Vector4d: ...

  @overload
  def mulTranspose(self, arg0: Matrix4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def mulTranspose(self, arg0: Matrix4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def negate(self) -> Vector4d: ...

  @overload
  def negate(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def negate(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def normalize(self) -> Vector4d: ...

  @overload
  def normalize(self, arg0: float) -> Vector4d: ...

  @overload
  def normalize(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def normalize(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def normalize(self, arg0: float, arg1: Vector4d) -> Vector4d: ...

  @overload
  def normalize(self, arg0: float, arg1: Vector4d) -> Vector4d: ...

  @overload
  def normalize3(self) -> Vector4d: ...

  @overload
  def normalize3(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def normalize3(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def rotate(self, arg0: Quaterniondc) -> Vector4d: ...

  @overload
  def rotate(self, arg0: Quaterniondc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def rotate(self, arg0: Quaterniondc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def rotateAxis(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Vector4d: ...

  @overload
  def rotateAxis(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Vector4d) -> Vector4d: ...

  @overload
  def rotateAxis(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Vector4d) -> Vector4d: ...

  @overload
  def rotateX(self, arg0: float) -> Vector4d: ...

  @overload
  def rotateX(self, arg0: float, arg1: Vector4d) -> Vector4d: ...

  @overload
  def rotateX(self, arg0: float, arg1: Vector4d) -> Vector4d: ...

  @overload
  def rotateY(self, arg0: float) -> Vector4d: ...

  @overload
  def rotateY(self, arg0: float, arg1: Vector4d) -> Vector4d: ...

  @overload
  def rotateY(self, arg0: float, arg1: Vector4d) -> Vector4d: ...

  @overload
  def rotateZ(self, arg0: float) -> Vector4d: ...

  @overload
  def rotateZ(self, arg0: float, arg1: Vector4d) -> Vector4d: ...

  @overload
  def rotateZ(self, arg0: float, arg1: Vector4d) -> Vector4d: ...

  @overload
  def round(self) -> Vector4d: ...

  @overload
  def round(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def round(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def set(self, arg0: list[float]) -> Vector4d: ...

  @overload
  def set(self, arg0: list[float]) -> Vector4d: ...

  @overload
  def set(self, arg0: float) -> Vector4d: ...

  @overload
  def set(self, arg0: ByteBuffer) -> Vector4d: ...

  @overload
  def set(self, arg0: DoubleBuffer) -> Vector4d: ...

  @overload
  def set(self, arg0: Vector4dc) -> Vector4d: ...

  @overload
  def set(self, arg0: Vector4fc) -> Vector4d: ...

  @overload
  def set(self, arg0: Vector4ic) -> Vector4d: ...

  @overload
  def set(self, arg0: int, arg1: ByteBuffer) -> Vector4d: ...

  @overload
  def set(self, arg0: int, arg1: DoubleBuffer) -> Vector4d: ...

  @overload
  def set(self, arg0: Vector3dc, arg1: float) -> Vector4d: ...

  @overload
  def set(self, arg0: Vector3fc, arg1: float) -> Vector4d: ...

  @overload
  def set(self, arg0: Vector3ic, arg1: float) -> Vector4d: ...

  @overload
  def set(self, arg0: float, arg1: float, arg2: float) -> Vector4d: ...

  @overload
  def set(self, arg0: Vector2dc, arg1: float, arg2: float) -> Vector4d: ...

  @overload
  def set(self, arg0: Vector2fc, arg1: float, arg2: float) -> Vector4d: ...

  @overload
  def set(self, arg0: Vector2ic, arg1: float, arg2: float) -> Vector4d: ...

  @overload
  def set(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Vector4d: ...

  def setComponent(self, arg0: int, arg1: float) -> Vector4d: ...

  def setFromAddress(self, arg0: int) -> Vector4d: ...

  @overload
  def smoothStep(self, arg0: Vector4dc, arg1: float, arg2: Vector4d) -> Vector4d: ...

  @overload
  def smoothStep(self, arg0: Vector4dc, arg1: float, arg2: Vector4d) -> Vector4d: ...

  @overload
  def sub(self, arg0: Vector4dc) -> Vector4d: ...

  @overload
  def sub(self, arg0: Vector4fc) -> Vector4d: ...

  @overload
  def sub(self, arg0: Vector4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def sub(self, arg0: Vector4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def sub(self, arg0: Vector4fc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def sub(self, arg0: Vector4fc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def sub(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Vector4d: ...

  @overload
  def sub(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Vector4d) -> Vector4d: ...

  @overload
  def sub(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Vector4d) -> Vector4d: ...

  @overload
  def toString(self) -> str: ...

  @overload
  def toString(self, arg0: NumberFormat) -> str: ...

  @overload
  def w(self) -> float: ...

  @overload
  def w(self) -> float: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def x(self) -> float: ...

  @overload
  def x(self) -> float: ...

  @overload
  def y(self) -> float: ...

  @overload
  def y(self) -> float: ...

  @overload
  def z(self) -> float: ...

  @overload
  def z(self) -> float: ...

  def zero(self) -> Vector4d: ...

  @overload
  def __init__(self):
    self.w: float

    self.x: float

    self.y: float

    self.z: float

  @overload
  def __init__(self, arg0: list[float]): ...
  @overload
  def __init__(self, arg0: list[float]): ...
  @overload
  def __init__(self, arg0: float): ...
  @overload
  def __init__(self, arg0: ByteBuffer): ...
  @overload
  def __init__(self, arg0: DoubleBuffer): ...
  @overload
  def __init__(self, arg0: Vector4dc): ...
  @overload
  def __init__(self, arg0: Vector4fc): ...
  @overload
  def __init__(self, arg0: Vector4ic): ...
  @overload
  def __init__(self, arg0: int, arg1: ByteBuffer): ...
  @overload
  def __init__(self, arg0: int, arg1: DoubleBuffer): ...
  @overload
  def __init__(self, arg0: Vector3dc, arg1: float): ...
  @overload
  def __init__(self, arg0: Vector3fc, arg1: float): ...
  @overload
  def __init__(self, arg0: Vector3ic, arg1: float): ...
  @overload
  def __init__(self, arg0: Vector2dc, arg1: float, arg2: float): ...
  @overload
  def __init__(self, arg0: Vector2fc, arg1: float, arg2: float): ...
  @overload
  def __init__(self, arg0: Vector2ic, arg1: float, arg2: float): ...
  @overload
  def __init__(self, arg0: float, arg1: float, arg2: float, arg3: float): ...


class Vector4dc:

  def absolute(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def add(self, arg0: Vector4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def add(self, arg0: Vector4fc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def add(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Vector4d) -> Vector4d: ...

  def angle(self, arg0: Vector4dc) -> float: ...

  def angleCos(self, arg0: Vector4dc) -> float: ...

  def ceil(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def distance(self, arg0: Vector4dc) -> float: ...

  @overload
  def distance(self, arg0: float, arg1: float, arg2: float, arg3: float) -> float: ...

  @overload
  def distanceSquared(self, arg0: Vector4dc) -> float: ...

  @overload
  def distanceSquared(self, arg0: float, arg1: float, arg2: float, arg3: float) -> float: ...

  @overload
  def div(self, arg0: float, arg1: Vector4d) -> Vector4d: ...

  @overload
  def div(self, arg0: Vector4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def dot(self, arg0: Vector4dc) -> float: ...

  @overload
  def dot(self, arg0: float, arg1: float, arg2: float, arg3: float) -> float: ...

  @overload
  def equals(self, arg0: Vector4dc, arg1: float) -> bool: ...

  @overload
  def equals(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool: ...

  def floor(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def fma(self, arg0: float, arg1: Vector4dc, arg2: Vector4d) -> Vector4d: ...

  @overload
  def fma(self, arg0: Vector4dc, arg1: Vector4dc, arg2: Vector4d) -> Vector4d: ...

  @overload
  def get(self, arg0: int) -> float: ...

  @overload
  def get(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def get(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def get(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def get(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: int, arg1: DoubleBuffer) -> DoubleBuffer: ...

  @overload
  def get(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get(self, arg0: int, arg1: Vector4i) -> Vector4i: ...

  def getToAddress(self, arg0: int) -> Vector4dc: ...

  @overload
  def getf(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def getf(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  def hermite(self, arg0: Vector4dc, arg1: Vector4dc, arg2: Vector4dc, arg3: float, arg4: Vector4d) -> Vector4d: ...

  def isFinite(self) -> bool: ...

  def length(self) -> float: ...

  def lengthSquared(self) -> float: ...

  def lerp(self, arg0: Vector4dc, arg1: float, arg2: Vector4d) -> Vector4d: ...

  def max(self, arg0: Vector4dc, arg1: Vector4d) -> Vector4d: ...

  def maxComponent(self) -> int: ...

  def min(self, arg0: Vector4dc, arg1: Vector4d) -> Vector4d: ...

  def minComponent(self) -> int: ...

  @overload
  def mul(self, arg0: float, arg1: Vector4d) -> Vector4d: ...

  @overload
  def mul(self, arg0: Matrix4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def mul(self, arg0: Matrix4fc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def mul(self, arg0: Matrix4x3dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def mul(self, arg0: Matrix4x3fc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def mul(self, arg0: Vector4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def mul(self, arg0: Vector4fc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def mulAdd(self, arg0: float, arg1: Vector4dc, arg2: Vector4d) -> Vector4d: ...

  @overload
  def mulAdd(self, arg0: Vector4dc, arg1: Vector4dc, arg2: Vector4d) -> Vector4d: ...

  def mulAffine(self, arg0: Matrix4dc, arg1: Vector4d) -> Vector4d: ...

  def mulAffineTranspose(self, arg0: Matrix4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def mulProject(self, arg0: Matrix4dc, arg1: Vector3d) -> Vector3d: ...

  @overload
  def mulProject(self, arg0: Matrix4dc, arg1: Vector4d) -> Vector4d: ...

  def mulTranspose(self, arg0: Matrix4dc, arg1: Vector4d) -> Vector4d: ...

  def negate(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def normalize(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def normalize(self, arg0: float, arg1: Vector4d) -> Vector4d: ...

  def normalize3(self, arg0: Vector4d) -> Vector4d: ...

  def rotate(self, arg0: Quaterniondc, arg1: Vector4d) -> Vector4d: ...

  def rotateAxis(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Vector4d) -> Vector4d: ...

  def rotateX(self, arg0: float, arg1: Vector4d) -> Vector4d: ...

  def rotateY(self, arg0: float, arg1: Vector4d) -> Vector4d: ...

  def rotateZ(self, arg0: float, arg1: Vector4d) -> Vector4d: ...

  def round(self, arg0: Vector4d) -> Vector4d: ...

  def smoothStep(self, arg0: Vector4dc, arg1: float, arg2: Vector4d) -> Vector4d: ...

  @overload
  def sub(self, arg0: Vector4dc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def sub(self, arg0: Vector4fc, arg1: Vector4d) -> Vector4d: ...

  @overload
  def sub(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Vector4d) -> Vector4d: ...

  def w(self) -> float: ...

  def x(self) -> float: ...

  def y(self) -> float: ...

  def z(self) -> float: ...


class Vector4f:

  @overload
  def absolute(self) -> Vector4f: ...

  @overload
  def absolute(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def absolute(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def add(self, arg0: Vector4fc) -> Vector4f: ...

  @overload
  def add(self, arg0: Vector4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def add(self, arg0: Vector4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def add(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Vector4f: ...

  @overload
  def add(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Vector4f) -> Vector4f: ...

  @overload
  def add(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Vector4f) -> Vector4f: ...

  @overload
  def angle(self, arg0: Vector4fc) -> float: ...

  @overload
  def angle(self, arg0: Vector4fc) -> float: ...

  @overload
  def angleCos(self, arg0: Vector4fc) -> float: ...

  @overload
  def angleCos(self, arg0: Vector4fc) -> float: ...

  @overload
  def ceil(self) -> Vector4f: ...

  @overload
  def ceil(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def ceil(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def distance(self, arg0: Vector4fc) -> float: ...

  @overload
  def distance(self, arg0: Vector4fc) -> float: ...

  @overload
  def distance(self, arg0: float, arg1: float, arg2: float, arg3: float) -> float: ...

  @overload
  def distance(self, arg0: float, arg1: float, arg2: float, arg3: float) -> float: ...

  @overload
  def distanceSquared(self, arg0: Vector4fc) -> float: ...

  @overload
  def distanceSquared(self, arg0: Vector4fc) -> float: ...

  @overload
  def distanceSquared(self, arg0: float, arg1: float, arg2: float, arg3: float) -> float: ...

  @overload
  def distanceSquared(self, arg0: float, arg1: float, arg2: float, arg3: float) -> float: ...

  @overload
  def div(self, arg0: float) -> Vector4f: ...

  @overload
  def div(self, arg0: Vector4fc) -> Vector4f: ...

  @overload
  def div(self, arg0: float, arg1: Vector4f) -> Vector4f: ...

  @overload
  def div(self, arg0: float, arg1: Vector4f) -> Vector4f: ...

  @overload
  def div(self, arg0: Vector4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def div(self, arg0: Vector4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def div(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Vector4f: ...

  @overload
  def div(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Vector4f) -> Vector4f: ...

  @overload
  def div(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Vector4f) -> Vector4f: ...

  @overload
  def dot(self, arg0: Vector4fc) -> float: ...

  @overload
  def dot(self, arg0: Vector4fc) -> float: ...

  @overload
  def dot(self, arg0: float, arg1: float, arg2: float, arg3: float) -> float: ...

  @overload
  def dot(self, arg0: float, arg1: float, arg2: float, arg3: float) -> float: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def equals(self, arg0: Vector4fc, arg1: float) -> bool: ...

  @overload
  def equals(self, arg0: Vector4fc, arg1: float) -> bool: ...

  @overload
  def equals(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool: ...

  @overload
  def equals(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool: ...

  @overload
  def floor(self) -> Vector4f: ...

  @overload
  def floor(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def floor(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def fma(self, arg0: float, arg1: Vector4fc) -> Vector4f: ...

  @overload
  def fma(self, arg0: Vector4fc, arg1: Vector4fc) -> Vector4f: ...

  @overload
  def fma(self, arg0: float, arg1: Vector4fc, arg2: Vector4f) -> Vector4f: ...

  @overload
  def fma(self, arg0: float, arg1: Vector4fc, arg2: Vector4f) -> Vector4f: ...

  @overload
  def fma(self, arg0: Vector4fc, arg1: Vector4fc, arg2: Vector4f) -> Vector4f: ...

  @overload
  def fma(self, arg0: Vector4fc, arg1: Vector4fc, arg2: Vector4f) -> Vector4f: ...

  @overload
  def get(self, arg0: int) -> float: ...

  @overload
  def get(self, arg0: int) -> float: ...

  @overload
  def get(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def get(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def get(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def get(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def get(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get(self, arg0: int, arg1: Vector4i) -> Vector4i: ...

  @overload
  def get(self, arg0: int, arg1: Vector4i) -> Vector4i: ...

  @overload
  def getToAddress(self, arg0: int) -> Vector4fc: ...

  @overload
  def getToAddress(self, arg0: int) -> Vector4fc: ...

  def hashCode(self) -> int: ...

  @overload
  def hermite(self, arg0: Vector4fc, arg1: Vector4fc, arg2: Vector4fc, arg3: float, arg4: Vector4f) -> Vector4f: ...

  @overload
  def hermite(self, arg0: Vector4fc, arg1: Vector4fc, arg2: Vector4fc, arg3: float, arg4: Vector4f) -> Vector4f: ...

  @overload
  def isFinite(self) -> bool: ...

  @overload
  def isFinite(self) -> bool: ...

  @overload
  def length(self) -> float: ...

  @overload
  def length(self) -> float: ...

  @overload
  def lengthSquared(self) -> float: ...

  @overload
  def lengthSquared(self) -> float: ...

  @overload
  def lerp(self, arg0: Vector4fc, arg1: float) -> Vector4f: ...

  @overload
  def lerp(self, arg0: Vector4fc, arg1: float, arg2: Vector4f) -> Vector4f: ...

  @overload
  def lerp(self, arg0: Vector4fc, arg1: float, arg2: Vector4f) -> Vector4f: ...

  @overload
  def max(self, arg0: Vector4fc) -> Vector4f: ...

  @overload
  def max(self, arg0: Vector4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def max(self, arg0: Vector4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def maxComponent(self) -> int: ...

  @overload
  def maxComponent(self) -> int: ...

  @overload
  def min(self, arg0: Vector4fc) -> Vector4f: ...

  @overload
  def min(self, arg0: Vector4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def min(self, arg0: Vector4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def minComponent(self) -> int: ...

  @overload
  def minComponent(self) -> int: ...

  @overload
  def mul(self, arg0: float) -> Vector4f: ...

  @overload
  def mul(self, arg0: Matrix4fc) -> Vector4f: ...

  @overload
  def mul(self, arg0: Matrix4x3fc) -> Vector4f: ...

  @overload
  def mul(self, arg0: Vector4fc) -> Vector4f: ...

  @overload
  def mul(self, arg0: float, arg1: Vector4f) -> Vector4f: ...

  @overload
  def mul(self, arg0: float, arg1: Vector4f) -> Vector4f: ...

  @overload
  def mul(self, arg0: Matrix4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def mul(self, arg0: Matrix4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def mul(self, arg0: Matrix4x3fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def mul(self, arg0: Matrix4x3fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def mul(self, arg0: Vector4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def mul(self, arg0: Vector4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def mul(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Vector4f: ...

  @overload
  def mul(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Vector4f) -> Vector4f: ...

  @overload
  def mul(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Vector4f) -> Vector4f: ...

  @overload
  def mulAdd(self, arg0: float, arg1: Vector4fc) -> Vector4f: ...

  @overload
  def mulAdd(self, arg0: Vector4fc, arg1: Vector4fc) -> Vector4f: ...

  @overload
  def mulAdd(self, arg0: float, arg1: Vector4fc, arg2: Vector4f) -> Vector4f: ...

  @overload
  def mulAdd(self, arg0: float, arg1: Vector4fc, arg2: Vector4f) -> Vector4f: ...

  @overload
  def mulAdd(self, arg0: Vector4fc, arg1: Vector4fc, arg2: Vector4f) -> Vector4f: ...

  @overload
  def mulAdd(self, arg0: Vector4fc, arg1: Vector4fc, arg2: Vector4f) -> Vector4f: ...

  @overload
  def mulAffine(self, arg0: Matrix4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def mulAffine(self, arg0: Matrix4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def mulAffineTranspose(self, arg0: Matrix4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def mulAffineTranspose(self, arg0: Matrix4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def mulProject(self, arg0: Matrix4fc) -> Vector4f: ...

  @overload
  def mulProject(self, arg0: Matrix4fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def mulProject(self, arg0: Matrix4fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def mulProject(self, arg0: Matrix4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def mulProject(self, arg0: Matrix4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def mulTranspose(self, arg0: Matrix4fc) -> Vector4f: ...

  @overload
  def mulTranspose(self, arg0: Matrix4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def mulTranspose(self, arg0: Matrix4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def negate(self) -> Vector4f: ...

  @overload
  def negate(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def negate(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def normalize(self) -> Vector4f: ...

  @overload
  def normalize(self, arg0: float) -> Vector4f: ...

  @overload
  def normalize(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def normalize(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def normalize(self, arg0: float, arg1: Vector4f) -> Vector4f: ...

  @overload
  def normalize(self, arg0: float, arg1: Vector4f) -> Vector4f: ...

  @overload
  def normalize3(self) -> Vector4f: ...

  @overload
  def normalize3(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def normalize3(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def rotate(self, arg0: Quaternionfc) -> Vector4f: ...

  @overload
  def rotate(self, arg0: Quaternionfc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def rotate(self, arg0: Quaternionfc, arg1: Vector4f) -> Vector4f: ...

  def rotateAbout(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Vector4f: ...

  @overload
  def rotateAxis(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Vector4f) -> Vector4f: ...

  @overload
  def rotateAxis(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Vector4f) -> Vector4f: ...

  @overload
  def rotateX(self, arg0: float) -> Vector4f: ...

  @overload
  def rotateX(self, arg0: float, arg1: Vector4f) -> Vector4f: ...

  @overload
  def rotateX(self, arg0: float, arg1: Vector4f) -> Vector4f: ...

  @overload
  def rotateY(self, arg0: float) -> Vector4f: ...

  @overload
  def rotateY(self, arg0: float, arg1: Vector4f) -> Vector4f: ...

  @overload
  def rotateY(self, arg0: float, arg1: Vector4f) -> Vector4f: ...

  @overload
  def rotateZ(self, arg0: float) -> Vector4f: ...

  @overload
  def rotateZ(self, arg0: float, arg1: Vector4f) -> Vector4f: ...

  @overload
  def rotateZ(self, arg0: float, arg1: Vector4f) -> Vector4f: ...

  @overload
  def round(self) -> Vector4f: ...

  @overload
  def round(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def round(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def set(self, arg0: list[float]) -> Vector4f: ...

  @overload
  def set(self, arg0: float) -> Vector4f: ...

  @overload
  def set(self, arg0: float) -> Vector4f: ...

  @overload
  def set(self, arg0: ByteBuffer) -> Vector4f: ...

  @overload
  def set(self, arg0: FloatBuffer) -> Vector4f: ...

  @overload
  def set(self, arg0: Vector4dc) -> Vector4f: ...

  @overload
  def set(self, arg0: Vector4fc) -> Vector4f: ...

  @overload
  def set(self, arg0: Vector4ic) -> Vector4f: ...

  @overload
  def set(self, arg0: int, arg1: ByteBuffer) -> Vector4f: ...

  @overload
  def set(self, arg0: int, arg1: FloatBuffer) -> Vector4f: ...

  @overload
  def set(self, arg0: Vector3fc, arg1: float) -> Vector4f: ...

  @overload
  def set(self, arg0: Vector3ic, arg1: float) -> Vector4f: ...

  @overload
  def set(self, arg0: float, arg1: float, arg2: float) -> Vector4f: ...

  @overload
  def set(self, arg0: Vector2fc, arg1: float, arg2: float) -> Vector4f: ...

  @overload
  def set(self, arg0: Vector2ic, arg1: float, arg2: float) -> Vector4f: ...

  @overload
  def set(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Vector4f: ...

  @overload
  def set(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Vector4f: ...

  def setComponent(self, arg0: int, arg1: float) -> Vector4f: ...

  def setFromAddress(self, arg0: int) -> Vector4f: ...

  @overload
  def smoothStep(self, arg0: Vector4fc, arg1: float, arg2: Vector4f) -> Vector4f: ...

  @overload
  def smoothStep(self, arg0: Vector4fc, arg1: float, arg2: Vector4f) -> Vector4f: ...

  @overload
  def sub(self, arg0: Vector4fc) -> Vector4f: ...

  @overload
  def sub(self, arg0: Vector4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def sub(self, arg0: Vector4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def sub(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Vector4f: ...

  @overload
  def sub(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Vector4f) -> Vector4f: ...

  @overload
  def sub(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Vector4f) -> Vector4f: ...

  @overload
  def toString(self) -> str: ...

  @overload
  def toString(self, arg0: NumberFormat) -> str: ...

  @overload
  def w(self) -> float: ...

  @overload
  def w(self) -> float: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def x(self) -> float: ...

  @overload
  def x(self) -> float: ...

  @overload
  def y(self) -> float: ...

  @overload
  def y(self) -> float: ...

  @overload
  def z(self) -> float: ...

  @overload
  def z(self) -> float: ...

  def zero(self) -> Vector4f: ...

  @overload
  def __init__(self):
    self.w: float

    self.x: float

    self.y: float

    self.z: float

  @overload
  def __init__(self, arg0: list[float]): ...
  @overload
  def __init__(self, arg0: float): ...
  @overload
  def __init__(self, arg0: ByteBuffer): ...
  @overload
  def __init__(self, arg0: FloatBuffer): ...
  @overload
  def __init__(self, arg0: Vector4fc): ...
  @overload
  def __init__(self, arg0: Vector4ic): ...
  @overload
  def __init__(self, arg0: int, arg1: ByteBuffer): ...
  @overload
  def __init__(self, arg0: int, arg1: FloatBuffer): ...
  @overload
  def __init__(self, arg0: Vector3fc, arg1: float): ...
  @overload
  def __init__(self, arg0: Vector3ic, arg1: float): ...
  @overload
  def __init__(self, arg0: Vector2fc, arg1: float, arg2: float): ...
  @overload
  def __init__(self, arg0: Vector2ic, arg1: float, arg2: float): ...
  @overload
  def __init__(self, arg0: float, arg1: float, arg2: float, arg3: float): ...


class Vector4fc:

  def absolute(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def add(self, arg0: Vector4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def add(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Vector4f) -> Vector4f: ...

  def angle(self, arg0: Vector4fc) -> float: ...

  def angleCos(self, arg0: Vector4fc) -> float: ...

  def ceil(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def distance(self, arg0: Vector4fc) -> float: ...

  @overload
  def distance(self, arg0: float, arg1: float, arg2: float, arg3: float) -> float: ...

  @overload
  def distanceSquared(self, arg0: Vector4fc) -> float: ...

  @overload
  def distanceSquared(self, arg0: float, arg1: float, arg2: float, arg3: float) -> float: ...

  @overload
  def div(self, arg0: float, arg1: Vector4f) -> Vector4f: ...

  @overload
  def div(self, arg0: Vector4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def div(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Vector4f) -> Vector4f: ...

  @overload
  def dot(self, arg0: Vector4fc) -> float: ...

  @overload
  def dot(self, arg0: float, arg1: float, arg2: float, arg3: float) -> float: ...

  @overload
  def equals(self, arg0: Vector4fc, arg1: float) -> bool: ...

  @overload
  def equals(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool: ...

  def floor(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def fma(self, arg0: float, arg1: Vector4fc, arg2: Vector4f) -> Vector4f: ...

  @overload
  def fma(self, arg0: Vector4fc, arg1: Vector4fc, arg2: Vector4f) -> Vector4f: ...

  @overload
  def get(self, arg0: int) -> float: ...

  @overload
  def get(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get(self, arg0: Vector4d) -> Vector4d: ...

  @overload
  def get(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def get(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: int, arg1: FloatBuffer) -> FloatBuffer: ...

  @overload
  def get(self, arg0: int, arg1: Vector4i) -> Vector4i: ...

  def getToAddress(self, arg0: int) -> Vector4fc: ...

  def hermite(self, arg0: Vector4fc, arg1: Vector4fc, arg2: Vector4fc, arg3: float, arg4: Vector4f) -> Vector4f: ...

  def isFinite(self) -> bool: ...

  def length(self) -> float: ...

  def lengthSquared(self) -> float: ...

  def lerp(self, arg0: Vector4fc, arg1: float, arg2: Vector4f) -> Vector4f: ...

  def max(self, arg0: Vector4fc, arg1: Vector4f) -> Vector4f: ...

  def maxComponent(self) -> int: ...

  def min(self, arg0: Vector4fc, arg1: Vector4f) -> Vector4f: ...

  def minComponent(self) -> int: ...

  @overload
  def mul(self, arg0: float, arg1: Vector4f) -> Vector4f: ...

  @overload
  def mul(self, arg0: Matrix4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def mul(self, arg0: Matrix4x3fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def mul(self, arg0: Vector4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def mul(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Vector4f) -> Vector4f: ...

  @overload
  def mulAdd(self, arg0: float, arg1: Vector4fc, arg2: Vector4f) -> Vector4f: ...

  @overload
  def mulAdd(self, arg0: Vector4fc, arg1: Vector4fc, arg2: Vector4f) -> Vector4f: ...

  def mulAffine(self, arg0: Matrix4fc, arg1: Vector4f) -> Vector4f: ...

  def mulAffineTranspose(self, arg0: Matrix4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def mulProject(self, arg0: Matrix4fc, arg1: Vector3f) -> Vector3f: ...

  @overload
  def mulProject(self, arg0: Matrix4fc, arg1: Vector4f) -> Vector4f: ...

  def mulTranspose(self, arg0: Matrix4fc, arg1: Vector4f) -> Vector4f: ...

  def negate(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def normalize(self, arg0: Vector4f) -> Vector4f: ...

  @overload
  def normalize(self, arg0: float, arg1: Vector4f) -> Vector4f: ...

  def normalize3(self, arg0: Vector4f) -> Vector4f: ...

  def rotate(self, arg0: Quaternionfc, arg1: Vector4f) -> Vector4f: ...

  def rotateAxis(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Vector4f) -> Vector4f: ...

  def rotateX(self, arg0: float, arg1: Vector4f) -> Vector4f: ...

  def rotateY(self, arg0: float, arg1: Vector4f) -> Vector4f: ...

  def rotateZ(self, arg0: float, arg1: Vector4f) -> Vector4f: ...

  def round(self, arg0: Vector4f) -> Vector4f: ...

  def smoothStep(self, arg0: Vector4fc, arg1: float, arg2: Vector4f) -> Vector4f: ...

  @overload
  def sub(self, arg0: Vector4fc, arg1: Vector4f) -> Vector4f: ...

  @overload
  def sub(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Vector4f) -> Vector4f: ...

  def w(self) -> float: ...

  def x(self) -> float: ...

  def y(self) -> float: ...

  def z(self) -> float: ...


class Vector4i:

  @overload
  def absolute(self) -> Vector4i: ...

  @overload
  def absolute(self, arg0: Vector4i) -> Vector4i: ...

  @overload
  def absolute(self, arg0: Vector4i) -> Vector4i: ...

  @overload
  def add(self, arg0: Vector4ic) -> Vector4i: ...

  @overload
  def add(self, arg0: Vector4ic, arg1: Vector4i) -> Vector4i: ...

  @overload
  def add(self, arg0: Vector4ic, arg1: Vector4i) -> Vector4i: ...

  @overload
  def add(self, arg0: int, arg1: int, arg2: int, arg3: int) -> Vector4i: ...

  @overload
  def add(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: Vector4i) -> Vector4i: ...

  @overload
  def add(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: Vector4i) -> Vector4i: ...

  @overload
  def distance(self, arg0: Vector4ic) -> float: ...

  @overload
  def distance(self, arg0: Vector4ic) -> float: ...

  @overload
  def distance(self, arg0: int, arg1: int, arg2: int, arg3: int) -> float: ...

  @overload
  def distance(self, arg0: int, arg1: int, arg2: int, arg3: int) -> float: ...

  @overload
  def distanceSquared(self, arg0: Vector4ic) -> int: ...

  @overload
  def distanceSquared(self, arg0: Vector4ic) -> int: ...

  @overload
  def distanceSquared(self, arg0: int, arg1: int, arg2: int, arg3: int) -> int: ...

  @overload
  def distanceSquared(self, arg0: int, arg1: int, arg2: int, arg3: int) -> int: ...

  @overload
  def div(self, arg0: float) -> Vector4i: ...

  @overload
  def div(self, arg0: int) -> Vector4i: ...

  @overload
  def div(self, arg0: Vector4ic) -> Vector4i: ...

  @overload
  def div(self, arg0: float, arg1: Vector4i) -> Vector4i: ...

  @overload
  def div(self, arg0: float, arg1: Vector4i) -> Vector4i: ...

  @overload
  def div(self, arg0: int, arg1: Vector4i) -> Vector4i: ...

  @overload
  def div(self, arg0: int, arg1: Vector4i) -> Vector4i: ...

  @overload
  def div(self, arg0: Vector4ic, arg1: Vector4i) -> Vector4i: ...

  @overload
  def div(self, arg0: Vector4ic, arg1: Vector4i) -> Vector4i: ...

  @overload
  def dot(self, arg0: Vector4ic) -> int: ...

  @overload
  def dot(self, arg0: Vector4ic) -> int: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def equals(self, arg0: int, arg1: int, arg2: int, arg3: int) -> bool: ...

  @overload
  def equals(self, arg0: int, arg1: int, arg2: int, arg3: int) -> bool: ...

  @overload
  def get(self, arg0: int) -> int: ...

  @overload
  def get(self, arg0: int) -> int: ...

  @overload
  def get(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: IntBuffer) -> IntBuffer: ...

  @overload
  def get(self, arg0: IntBuffer) -> IntBuffer: ...

  @overload
  def get(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: int, arg1: IntBuffer) -> IntBuffer: ...

  @overload
  def get(self, arg0: int, arg1: IntBuffer) -> IntBuffer: ...

  @overload
  def getToAddress(self, arg0: int) -> Vector4ic: ...

  @overload
  def getToAddress(self, arg0: int) -> Vector4ic: ...

  @overload
  def gridDistance(self, arg0: Vector4ic) -> int: ...

  @overload
  def gridDistance(self, arg0: Vector4ic) -> int: ...

  @overload
  def gridDistance(self, arg0: int, arg1: int, arg2: int, arg3: int) -> int: ...

  @overload
  def gridDistance(self, arg0: int, arg1: int, arg2: int, arg3: int) -> int: ...

  def hashCode(self) -> int: ...

  @overload
  def length(self) -> float: ...

  @overload
  def length(self) -> float: ...

  @overload
  def lengthSquared(self) -> int: ...

  @overload
  def lengthSquared(self) -> int: ...

  @overload
  def max(self, arg0: Vector4ic) -> Vector4i: ...

  @overload
  def max(self, arg0: Vector4ic, arg1: Vector4i) -> Vector4i: ...

  @overload
  def max(self, arg0: Vector4ic, arg1: Vector4i) -> Vector4i: ...

  @overload
  def maxComponent(self) -> int: ...

  @overload
  def maxComponent(self) -> int: ...

  @overload
  def min(self, arg0: Vector4ic) -> Vector4i: ...

  @overload
  def min(self, arg0: Vector4ic, arg1: Vector4i) -> Vector4i: ...

  @overload
  def min(self, arg0: Vector4ic, arg1: Vector4i) -> Vector4i: ...

  @overload
  def minComponent(self) -> int: ...

  @overload
  def minComponent(self) -> int: ...

  @overload
  def mul(self, arg0: int) -> Vector4i: ...

  @overload
  def mul(self, arg0: Vector4ic) -> Vector4i: ...

  @overload
  def mul(self, arg0: int, arg1: Vector4i) -> Vector4i: ...

  @overload
  def mul(self, arg0: int, arg1: Vector4i) -> Vector4i: ...

  @overload
  def mul(self, arg0: Vector4ic, arg1: Vector4i) -> Vector4i: ...

  @overload
  def mul(self, arg0: Vector4ic, arg1: Vector4i) -> Vector4i: ...

  @overload
  def negate(self) -> Vector4i: ...

  @overload
  def negate(self, arg0: Vector4i) -> Vector4i: ...

  @overload
  def negate(self, arg0: Vector4i) -> Vector4i: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def readExternal(self, arg0: ObjectInput) -> None: ...

  @overload
  def set(self, arg0: list[int]) -> Vector4i: ...

  @overload
  def set(self, arg0: int) -> Vector4i: ...

  @overload
  def set(self, arg0: ByteBuffer) -> Vector4i: ...

  @overload
  def set(self, arg0: IntBuffer) -> Vector4i: ...

  @overload
  def set(self, arg0: Vector4dc) -> Vector4i: ...

  @overload
  def set(self, arg0: Vector4ic) -> Vector4i: ...

  @overload
  def set(self, arg0: int, arg1: ByteBuffer) -> Vector4i: ...

  @overload
  def set(self, arg0: int, arg1: IntBuffer) -> Vector4i: ...

  @overload
  def set(self, arg0: Vector3ic, arg1: int) -> Vector4i: ...

  @overload
  def set(self, arg0: Vector4dc, arg1: int) -> Vector4i: ...

  @overload
  def set(self, arg0: Vector4fc, arg1: int) -> Vector4i: ...

  @overload
  def set(self, arg0: Vector2ic, arg1: int, arg2: int) -> Vector4i: ...

  @overload
  def set(self, arg0: int, arg1: int, arg2: int, arg3: int) -> Vector4i: ...

  def setComponent(self, arg0: int, arg1: int) -> Vector4i: ...

  def setFromAddress(self, arg0: int) -> Vector4i: ...

  @overload
  def sub(self, arg0: Vector4ic) -> Vector4i: ...

  @overload
  def sub(self, arg0: Vector4ic, arg1: Vector4i) -> Vector4i: ...

  @overload
  def sub(self, arg0: Vector4ic, arg1: Vector4i) -> Vector4i: ...

  @overload
  def sub(self, arg0: int, arg1: int, arg2: int, arg3: int) -> Vector4i: ...

  @overload
  def sub(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: Vector4i) -> Vector4i: ...

  @overload
  def sub(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: Vector4i) -> Vector4i: ...

  @overload
  def toString(self) -> str: ...

  @overload
  def toString(self, arg0: NumberFormat) -> str: ...

  @overload
  def w(self) -> int: ...

  @overload
  def w(self) -> int: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def writeExternal(self, arg0: ObjectOutput) -> None: ...

  @overload
  def x(self) -> int: ...

  @overload
  def x(self) -> int: ...

  @overload
  def y(self) -> int: ...

  @overload
  def y(self) -> int: ...

  @overload
  def z(self) -> int: ...

  @overload
  def z(self) -> int: ...

  def zero(self) -> Vector4i: ...

  @overload
  def __init__(self):
    self.w: int

    self.x: int

    self.y: int

    self.z: int

  @overload
  def __init__(self, arg0: list[int]): ...
  @overload
  def __init__(self, arg0: int): ...
  @overload
  def __init__(self, arg0: ByteBuffer): ...
  @overload
  def __init__(self, arg0: IntBuffer): ...
  @overload
  def __init__(self, arg0: Vector4ic): ...
  @overload
  def __init__(self, arg0: int, arg1: ByteBuffer): ...
  @overload
  def __init__(self, arg0: int, arg1: IntBuffer): ...
  @overload
  def __init__(self, arg0: Vector3ic, arg1: int): ...
  @overload
  def __init__(self, arg0: Vector4dc, arg1: int): ...
  @overload
  def __init__(self, arg0: Vector4fc, arg1: int): ...
  @overload
  def __init__(self, arg0: Vector2ic, arg1: int, arg2: int): ...
  @overload
  def __init__(self, arg0: Vector3fc, arg1: float, arg2: int): ...
  @overload
  def __init__(self, arg0: int, arg1: int, arg2: int, arg3: int): ...


class Vector4ic:

  def absolute(self, arg0: Vector4i) -> Vector4i: ...

  @overload
  def add(self, arg0: Vector4ic, arg1: Vector4i) -> Vector4i: ...

  @overload
  def add(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: Vector4i) -> Vector4i: ...

  @overload
  def distance(self, arg0: Vector4ic) -> float: ...

  @overload
  def distance(self, arg0: int, arg1: int, arg2: int, arg3: int) -> float: ...

  @overload
  def distanceSquared(self, arg0: Vector4ic) -> int: ...

  @overload
  def distanceSquared(self, arg0: int, arg1: int, arg2: int, arg3: int) -> int: ...

  @overload
  def div(self, arg0: float, arg1: Vector4i) -> Vector4i: ...

  @overload
  def div(self, arg0: int, arg1: Vector4i) -> Vector4i: ...

  @overload
  def div(self, arg0: Vector4ic, arg1: Vector4i) -> Vector4i: ...

  def dot(self, arg0: Vector4ic) -> int: ...

  def equals(self, arg0: int, arg1: int, arg2: int, arg3: int) -> bool: ...

  @overload
  def get(self, arg0: int) -> int: ...

  @overload
  def get(self, arg0: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: IntBuffer) -> IntBuffer: ...

  @overload
  def get(self, arg0: int, arg1: ByteBuffer) -> ByteBuffer: ...

  @overload
  def get(self, arg0: int, arg1: IntBuffer) -> IntBuffer: ...

  def getToAddress(self, arg0: int) -> Vector4ic: ...

  @overload
  def gridDistance(self, arg0: Vector4ic) -> int: ...

  @overload
  def gridDistance(self, arg0: int, arg1: int, arg2: int, arg3: int) -> int: ...

  def length(self) -> float: ...

  def lengthSquared(self) -> int: ...

  def max(self, arg0: Vector4ic, arg1: Vector4i) -> Vector4i: ...

  def maxComponent(self) -> int: ...

  def min(self, arg0: Vector4ic, arg1: Vector4i) -> Vector4i: ...

  def minComponent(self) -> int: ...

  @overload
  def mul(self, arg0: int, arg1: Vector4i) -> Vector4i: ...

  @overload
  def mul(self, arg0: Vector4ic, arg1: Vector4i) -> Vector4i: ...

  def negate(self, arg0: Vector4i) -> Vector4i: ...

  @overload
  def sub(self, arg0: Vector4ic, arg1: Vector4i) -> Vector4i: ...

  @overload
  def sub(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: Vector4i) -> Vector4i: ...

  def w(self) -> int: ...

  def x(self) -> int: ...

  def y(self) -> int: ...

  def z(self) -> int: ...

