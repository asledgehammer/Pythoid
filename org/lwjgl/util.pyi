from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.io import InputStream
from java.net import URL
from java.nio import ByteBuffer
from javax.sound.sampled import AudioInputStream

class Color:

  BLACK: ReadableColor

  BLUE: ReadableColor

  CYAN: ReadableColor

  DKGREY: ReadableColor

  GREEN: ReadableColor

  GREY: ReadableColor

  LTGREY: ReadableColor

  ORANGE: ReadableColor

  PURPLE: ReadableColor

  RED: ReadableColor

  WHITE: ReadableColor

  YELLOW: ReadableColor

  def equals(self, arg0: object) -> bool: ...

  def fromHSB(self, arg0: float, arg1: float, arg2: float) -> None: ...

  @overload
  def getAlpha(self) -> int: ...

  @overload
  def getAlpha(self) -> int: ...

  @overload
  def getAlphaByte(self) -> int: ...

  @overload
  def getAlphaByte(self) -> int: ...

  @overload
  def getBlue(self) -> int: ...

  @overload
  def getBlue(self) -> int: ...

  @overload
  def getBlueByte(self) -> int: ...

  @overload
  def getBlueByte(self) -> int: ...

  @overload
  def getGreen(self) -> int: ...

  @overload
  def getGreen(self) -> int: ...

  @overload
  def getGreenByte(self) -> int: ...

  @overload
  def getGreenByte(self) -> int: ...

  @overload
  def getRed(self) -> int: ...

  @overload
  def getRed(self) -> int: ...

  @overload
  def getRedByte(self) -> int: ...

  @overload
  def getRedByte(self) -> int: ...

  def hashCode(self) -> int: ...

  @overload
  def readABGR(self, arg0: ByteBuffer) -> None: ...

  @overload
  def readABGR(self, arg0: ByteBuffer) -> None: ...

  @overload
  def readARGB(self, arg0: ByteBuffer) -> None: ...

  @overload
  def readARGB(self, arg0: ByteBuffer) -> None: ...

  @overload
  def readBGR(self, arg0: ByteBuffer) -> None: ...

  @overload
  def readBGR(self, arg0: ByteBuffer) -> None: ...

  @overload
  def readBGRA(self, arg0: ByteBuffer) -> None: ...

  @overload
  def readBGRA(self, arg0: ByteBuffer) -> None: ...

  @overload
  def readRGB(self, arg0: ByteBuffer) -> None: ...

  @overload
  def readRGB(self, arg0: ByteBuffer) -> None: ...

  @overload
  def readRGBA(self, arg0: ByteBuffer) -> None: ...

  @overload
  def readRGBA(self, arg0: ByteBuffer) -> None: ...

  @overload
  def set(self, arg0: int, arg1: int, arg2: int) -> None: ...

  @overload
  def set(self, arg0: int, arg1: int, arg2: int) -> None: ...

  @overload
  def set(self, arg0: int, arg1: int, arg2: int) -> None: ...

  @overload
  def set(self, arg0: int, arg1: int, arg2: int) -> None: ...

  @overload
  def set(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...

  @overload
  def set(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...

  @overload
  def set(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...

  @overload
  def set(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...

  @overload
  def setAlpha(self, arg0: int) -> None: ...

  @overload
  def setAlpha(self, arg0: int) -> None: ...

  @overload
  def setAlpha(self, arg0: int) -> None: ...

  @overload
  def setAlpha(self, arg0: int) -> None: ...

  @overload
  def setBlue(self, arg0: int) -> None: ...

  @overload
  def setBlue(self, arg0: int) -> None: ...

  @overload
  def setBlue(self, arg0: int) -> None: ...

  @overload
  def setBlue(self, arg0: int) -> None: ...

  @overload
  def setColor(self, arg0: ReadableColor) -> None: ...

  @overload
  def setColor(self, arg0: ReadableColor) -> None: ...

  @overload
  def setGreen(self, arg0: int) -> None: ...

  @overload
  def setGreen(self, arg0: int) -> None: ...

  @overload
  def setGreen(self, arg0: int) -> None: ...

  @overload
  def setGreen(self, arg0: int) -> None: ...

  @overload
  def setRed(self, arg0: int) -> None: ...

  @overload
  def setRed(self, arg0: int) -> None: ...

  @overload
  def setRed(self, arg0: int) -> None: ...

  @overload
  def setRed(self, arg0: int) -> None: ...

  def toHSB(self, arg0: list[float]) -> list[float]: ...

  def toString(self) -> str: ...

  @overload
  def writeABGR(self, arg0: ByteBuffer) -> None: ...

  @overload
  def writeABGR(self, arg0: ByteBuffer) -> None: ...

  @overload
  def writeARGB(self, arg0: ByteBuffer) -> None: ...

  @overload
  def writeARGB(self, arg0: ByteBuffer) -> None: ...

  @overload
  def writeBGR(self, arg0: ByteBuffer) -> None: ...

  @overload
  def writeBGR(self, arg0: ByteBuffer) -> None: ...

  @overload
  def writeBGRA(self, arg0: ByteBuffer) -> None: ...

  @overload
  def writeBGRA(self, arg0: ByteBuffer) -> None: ...

  @overload
  def writeRGB(self, arg0: ByteBuffer) -> None: ...

  @overload
  def writeRGB(self, arg0: ByteBuffer) -> None: ...

  @overload
  def writeRGBA(self, arg0: ByteBuffer) -> None: ...

  @overload
  def writeRGBA(self, arg0: ByteBuffer) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: ReadableColor): ...
  @overload
  def __init__(self, arg0: int, arg1: int, arg2: int): ...
  @overload
  def __init__(self, arg0: int, arg1: int, arg2: int): ...
  @overload
  def __init__(self, arg0: int, arg1: int, arg2: int, arg3: int): ...
  @overload
  def __init__(self, arg0: int, arg1: int, arg2: int, arg3: int): ...


class Dimension:

  def equals(self, arg0: object) -> bool: ...

  @overload
  def getHeight(self) -> int: ...

  @overload
  def getHeight(self) -> int: ...

  @overload
  def getSize(self, arg0: WritableDimension) -> None: ...

  @overload
  def getSize(self, arg0: WritableDimension) -> None: ...

  @overload
  def getWidth(self) -> int: ...

  @overload
  def getWidth(self) -> int: ...

  def hashCode(self) -> int: ...

  @overload
  def setHeight(self, arg0: int) -> None: ...

  @overload
  def setHeight(self, arg0: int) -> None: ...

  @overload
  def setSize(self, arg0: ReadableDimension) -> None: ...

  @overload
  def setSize(self, arg0: ReadableDimension) -> None: ...

  @overload
  def setSize(self, arg0: int, arg1: int) -> None: ...

  @overload
  def setSize(self, arg0: int, arg1: int) -> None: ...

  @overload
  def setWidth(self, arg0: int) -> None: ...

  @overload
  def setWidth(self, arg0: int) -> None: ...

  def toString(self) -> str: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: ReadableDimension): ...
  @overload
  def __init__(self, arg0: int, arg1: int): ...


class Point:

  def equals(self, arg0: object) -> bool: ...

  @overload
  def getLocation(self, arg0: WritablePoint) -> None: ...

  @overload
  def getLocation(self, arg0: WritablePoint) -> None: ...

  @overload
  def getX(self) -> int: ...

  @overload
  def getX(self) -> int: ...

  @overload
  def getY(self) -> int: ...

  @overload
  def getY(self) -> int: ...

  def hashCode(self) -> int: ...

  @overload
  def setLocation(self, arg0: ReadablePoint) -> None: ...

  @overload
  def setLocation(self, arg0: ReadablePoint) -> None: ...

  @overload
  def setLocation(self, arg0: int, arg1: int) -> None: ...

  @overload
  def setLocation(self, arg0: int, arg1: int) -> None: ...

  @overload
  def setX(self, arg0: int) -> None: ...

  @overload
  def setX(self, arg0: int) -> None: ...

  @overload
  def setY(self, arg0: int) -> None: ...

  @overload
  def setY(self, arg0: int) -> None: ...

  def toString(self) -> str: ...

  @overload
  def translate(self, arg0: ReadablePoint) -> None: ...

  @overload
  def translate(self, arg0: int, arg1: int) -> None: ...

  def untranslate(self, arg0: ReadablePoint) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: ReadablePoint): ...
  @overload
  def __init__(self, arg0: int, arg1: int): ...


class ReadableColor:

  BLACK: ReadableColor

  BLUE: ReadableColor

  CYAN: ReadableColor

  DKGREY: ReadableColor

  GREEN: ReadableColor

  GREY: ReadableColor

  LTGREY: ReadableColor

  ORANGE: ReadableColor

  PURPLE: ReadableColor

  RED: ReadableColor

  WHITE: ReadableColor

  YELLOW: ReadableColor

  def getAlpha(self) -> int: ...

  def getAlphaByte(self) -> int: ...

  def getBlue(self) -> int: ...

  def getBlueByte(self) -> int: ...

  def getGreen(self) -> int: ...

  def getGreenByte(self) -> int: ...

  def getRed(self) -> int: ...

  def getRedByte(self) -> int: ...

  def writeABGR(self, arg0: ByteBuffer) -> None: ...

  def writeARGB(self, arg0: ByteBuffer) -> None: ...

  def writeBGR(self, arg0: ByteBuffer) -> None: ...

  def writeBGRA(self, arg0: ByteBuffer) -> None: ...

  def writeRGB(self, arg0: ByteBuffer) -> None: ...

  def writeRGBA(self, arg0: ByteBuffer) -> None: ...


class ReadableDimension:

  def getHeight(self) -> int: ...

  def getSize(self, arg0: WritableDimension) -> None: ...

  def getWidth(self) -> int: ...


class ReadablePoint:

  def getLocation(self, arg0: WritablePoint) -> None: ...

  def getX(self) -> int: ...

  def getY(self) -> int: ...


class ReadableRectangle:

  def getBounds(self, arg0: WritableRectangle) -> None: ...

  def getHeight(self) -> int: ...

  def getLocation(self, arg0: WritablePoint) -> None: ...

  def getSize(self, arg0: WritableDimension) -> None: ...

  def getWidth(self) -> int: ...

  def getX(self) -> int: ...

  def getY(self) -> int: ...


class Rectangle:

  @overload
  def add(self, arg0: ReadablePoint) -> None: ...

  @overload
  def add(self, arg0: ReadableRectangle) -> None: ...

  @overload
  def add(self, arg0: int, arg1: int) -> None: ...

  @overload
  def contains(self, arg0: ReadablePoint) -> bool: ...

  @overload
  def contains(self, arg0: ReadableRectangle) -> bool: ...

  @overload
  def contains(self, arg0: int, arg1: int) -> bool: ...

  @overload
  def contains(self, arg0: int, arg1: int, arg2: int, arg3: int) -> bool: ...

  def equals(self, arg0: object) -> bool: ...

  @overload
  def getBounds(self, arg0: WritableRectangle) -> None: ...

  @overload
  def getBounds(self, arg0: WritableRectangle) -> None: ...

  def getHeight(self) -> int: ...

  def getLocation(self, arg0: WritablePoint) -> None: ...

  def getSize(self, arg0: WritableDimension) -> None: ...

  def getWidth(self) -> int: ...

  def getX(self) -> int: ...

  def getY(self) -> int: ...

  def grow(self, arg0: int, arg1: int) -> None: ...

  def intersection(self, arg0: ReadableRectangle, arg1: Rectangle) -> Rectangle: ...

  def intersects(self, arg0: ReadableRectangle) -> bool: ...

  def isEmpty(self) -> bool: ...

  @overload
  def setBounds(self, arg0: ReadableRectangle) -> None: ...

  @overload
  def setBounds(self, arg0: ReadableRectangle) -> None: ...

  @overload
  def setBounds(self, arg0: ReadablePoint, arg1: ReadableDimension) -> None: ...

  @overload
  def setBounds(self, arg0: ReadablePoint, arg1: ReadableDimension) -> None: ...

  @overload
  def setBounds(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...

  @overload
  def setBounds(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...

  def setHeight(self, arg0: int) -> None: ...

  @overload
  def setLocation(self, arg0: ReadablePoint) -> None: ...

  @overload
  def setLocation(self, arg0: int, arg1: int) -> None: ...

  @overload
  def setSize(self, arg0: ReadableDimension) -> None: ...

  @overload
  def setSize(self, arg0: int, arg1: int) -> None: ...

  def setWidth(self, arg0: int) -> None: ...

  def setX(self, arg0: int) -> None: ...

  def setY(self, arg0: int) -> None: ...

  def toString(self) -> str: ...

  @overload
  def translate(self, arg0: ReadablePoint) -> None: ...

  @overload
  def translate(self, arg0: int, arg1: int) -> None: ...

  def union(self, arg0: ReadableRectangle, arg1: WritableRectangle) -> WritableRectangle: ...

  def untranslate(self, arg0: ReadablePoint) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: ReadableRectangle): ...
  @overload
  def __init__(self, arg0: ReadablePoint, arg1: ReadableDimension): ...
  @overload
  def __init__(self, arg0: int, arg1: int, arg2: int, arg3: int): ...


class Renderable:

  def render(self) -> None: ...


class Timer:

  def getTime(self) -> float: ...

  def isPaused(self) -> bool: ...

  def pause(self) -> None: ...

  def reset(self) -> None: ...

  def resume(self) -> None: ...

  def set(self, arg0: float) -> None: ...

  def toString(self) -> str: ...

  @staticmethod
  def tick() -> None: ...

  def __init__(self): ...


class WaveData:

  def dispose(self) -> None: ...

  @staticmethod
  @overload
  def create(arg0: list[int]) -> WaveData: ...

  @staticmethod
  @overload
  def create(arg0: InputStream) -> WaveData: ...

  @staticmethod
  @overload
  def create(arg0: str) -> WaveData: ...

  @staticmethod
  @overload
  def create(arg0: URL) -> WaveData: ...

  @staticmethod
  @overload
  def create(arg0: ByteBuffer) -> WaveData: ...

  @staticmethod
  @overload
  def create(arg0: AudioInputStream) -> WaveData: ...


class WritableColor:

  def readABGR(self, arg0: ByteBuffer) -> None: ...

  def readARGB(self, arg0: ByteBuffer) -> None: ...

  def readBGR(self, arg0: ByteBuffer) -> None: ...

  def readBGRA(self, arg0: ByteBuffer) -> None: ...

  def readRGB(self, arg0: ByteBuffer) -> None: ...

  def readRGBA(self, arg0: ByteBuffer) -> None: ...

  @overload
  def set(self, arg0: int, arg1: int, arg2: int) -> None: ...

  @overload
  def set(self, arg0: int, arg1: int, arg2: int) -> None: ...

  @overload
  def set(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...

  @overload
  def set(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...

  @overload
  def setAlpha(self, arg0: int) -> None: ...

  @overload
  def setAlpha(self, arg0: int) -> None: ...

  @overload
  def setBlue(self, arg0: int) -> None: ...

  @overload
  def setBlue(self, arg0: int) -> None: ...

  def setColor(self, arg0: ReadableColor) -> None: ...

  @overload
  def setGreen(self, arg0: int) -> None: ...

  @overload
  def setGreen(self, arg0: int) -> None: ...

  @overload
  def setRed(self, arg0: int) -> None: ...

  @overload
  def setRed(self, arg0: int) -> None: ...


class WritableDimension:

  def setHeight(self, arg0: int) -> None: ...

  @overload
  def setSize(self, arg0: ReadableDimension) -> None: ...

  @overload
  def setSize(self, arg0: int, arg1: int) -> None: ...

  def setWidth(self, arg0: int) -> None: ...


class WritablePoint:

  @overload
  def setLocation(self, arg0: ReadablePoint) -> None: ...

  @overload
  def setLocation(self, arg0: int, arg1: int) -> None: ...

  def setX(self, arg0: int) -> None: ...

  def setY(self, arg0: int) -> None: ...


class WritableRectangle:

  @overload
  def setBounds(self, arg0: ReadableRectangle) -> None: ...

  @overload
  def setBounds(self, arg0: ReadablePoint, arg1: ReadableDimension) -> None: ...

  @overload
  def setBounds(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...

  def setHeight(self, arg0: int) -> None: ...

  @overload
  def setLocation(self, arg0: ReadablePoint) -> None: ...

  @overload
  def setLocation(self, arg0: int, arg1: int) -> None: ...

  @overload
  def setSize(self, arg0: ReadableDimension) -> None: ...

  @overload
  def setSize(self, arg0: int, arg1: int) -> None: ...

  def setWidth(self, arg0: int) -> None: ...

  def setX(self, arg0: int) -> None: ...

  def setY(self, arg0: int) -> None: ...


class XPMFile:

  def getBytes(self) -> list[int]: ...

  def getHeight(self) -> int: ...

  def getWidth(self) -> int: ...

  @staticmethod
  @overload
  def load(arg0: InputStream) -> XPMFile: ...

  @staticmethod
  @overload
  def load(arg0: str) -> XPMFile: ...

  @staticmethod
  def main(arg0: list[str]) -> None: ...

