from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.lang import Integer
from java.util import ArrayList, Comparator
from java.util.function import Function, ToDoubleFunction, ToIntFunction, ToLongFunction

U = TypeVar('U', default=Any)
T = TypeVar('T', default=Any)

class ASearchNode:

  def c(self, arg0: ISearchNode) -> float: ...

  def equals(self, arg0: object) -> bool: ...

  @overload
  def f(self) -> float: ...

  @overload
  def f(self) -> float: ...

  @overload
  def g(self) -> float: ...

  @overload
  def g(self) -> float: ...

  @overload
  def getDepth(self) -> int: ...

  @overload
  def getDepth(self) -> int: ...

  def getParent(self) -> ISearchNode: ...

  def getSuccessors(self, arg0: ArrayList[ISearchNode]) -> None: ...

  def h(self) -> float: ...

  def hashCode(self) -> int: ...

  def keyCode(self) -> Integer: ...

  @overload
  def setDepth(self, arg0: int) -> None: ...

  @overload
  def setDepth(self, arg0: int) -> None: ...

  @overload
  def setG(self, arg0: float) -> None: ...

  @overload
  def setG(self, arg0: float) -> None: ...

  def setParent(self, arg0: ISearchNode) -> None: ...

  def __init__(self): ...


class AStar:

  def bestNodeAfterSearch(self) -> ISearchNode: ...

  def numSearchSteps(self) -> int: ...

  def search(self, arg0: ISearchNode, arg1: IGoalNode) -> ISearchNode: ...

  def setMaxSteps(self, arg0: int) -> None: ...

  def shortestPath(self, arg0: ISearchNode, arg1: IGoalNode) -> ArrayList[ISearchNode]: ...

  @staticmethod
  def path(arg0: ISearchNode) -> ArrayList[ISearchNode]: ...

  def __init__(self):
    self.bestnodeaftersearch: ISearchNode

  class SearchNodeComparator:

    @overload
    def compare(self, arg0: ISearchNode, arg1: ISearchNode) -> int: ...

    @overload
    def compare(self, arg0: object, arg1: object) -> int: ...

    @overload
    def compare(self, arg0: object, arg1: object) -> int: ...

    def equals(self, arg0: object) -> bool: ...

    def reversed(self) -> Comparator[T]: ...

    @overload
    def thenComparing(self, arg0: Comparator[T]) -> Comparator[T]: ...

    @overload
    def thenComparing(self, arg0: Function[T, U]) -> Comparator[T]: ...

    @overload
    def thenComparing(self, arg0: Function[T, U], arg1: Comparator[U]) -> Comparator[T]: ...

    def thenComparingDouble(self, arg0: ToDoubleFunction[T]) -> Comparator[T]: ...

    def thenComparingInt(self, arg0: ToIntFunction[T]) -> Comparator[T]: ...

    def thenComparingLong(self, arg0: ToLongFunction[T]) -> Comparator[T]: ...

    @staticmethod
    @overload
    def comparing(arg0: Function[T, U]) -> Comparator[T]: ...

    @staticmethod
    @overload
    def comparing(arg0: Function[T, U], arg1: Comparator[U]) -> Comparator[T]: ...

    @staticmethod
    def comparingDouble(arg0: ToDoubleFunction[T]) -> Comparator[T]: ...

    @staticmethod
    def comparingInt(arg0: ToIntFunction[T]) -> Comparator[T]: ...

    @staticmethod
    def comparingLong(arg0: ToLongFunction[T]) -> Comparator[T]: ...

    @staticmethod
    def naturalOrder() -> Comparator[T]: ...

    @staticmethod
    def nullsFirst(arg0: Comparator[T]) -> Comparator[T]: ...

    @staticmethod
    def nullsLast(arg0: Comparator[T]) -> Comparator[T]: ...

    @staticmethod
    def reverseOrder() -> Comparator[T]: ...


class IGoalNode:

  def inGoal(self, arg0: ISearchNode) -> bool: ...


class ISearchNode:

  def c(self, arg0: ISearchNode) -> float: ...

  def equals(self, arg0: object) -> bool: ...

  def f(self) -> float: ...

  def g(self) -> float: ...

  def getDepth(self) -> int: ...

  def getParent(self) -> ISearchNode: ...

  def getSuccessors(self, arg0: ArrayList[ISearchNode]) -> None: ...

  def h(self) -> float: ...

  def hashCode(self) -> int: ...

  def keyCode(self) -> Integer: ...

  def setDepth(self, arg0: int) -> None: ...

  def setG(self, arg0: float) -> None: ...

  def setParent(self, arg0: ISearchNode) -> None: ...

