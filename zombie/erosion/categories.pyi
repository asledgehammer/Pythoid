from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.nio import ByteBuffer
from java.util import ArrayList
from zombie.erosion import ErosionData, ErosionRegions
from zombie.erosion.obj import ErosionObj
from zombie.iso import IsoGridSquare

class ErosionCategory:

  def getObjectNames(self, list: ArrayList[str]) -> None: ...

  def init(self) -> None: ...

  def replaceExistingObject(self, _sq: IsoGridSquare, _sqErosionData: ErosionData.Square, _chunkData: ErosionData.Chunk, _isExterior: bool, _hasWall: bool) -> bool: ...

  def update(self, _sq: IsoGridSquare, _sqErosionData: ErosionData.Square, _sqCategoryData: ErosionCategory.Data, _chunkData: ErosionData.Chunk, _eTick: int) -> None: ...

  def updateObj(self, _sqErosionData: ErosionData.Square, _sqCategoryData: ErosionCategory.Data, _sq: IsoGridSquare, _gameObj: ErosionObj, _bTree: bool, _stage: int, _dispSeason: int, _bloom: bool) -> None: ...

  def validateSpawn(self, _sq: IsoGridSquare, _sqErosionData: ErosionData.Square, _chunkData: ErosionData.Chunk, _isExterior: bool, _hasWall: bool, _isRespawn: bool) -> bool: ...

  @staticmethod
  def loadCategoryData(input: ByteBuffer, WorldVersion: int) -> ErosionCategory.Data: ...

  def __init__(self):
    self.id: int
    self.region: ErosionRegions.Region

  class SeasonDisplay: ...

  class Data:

    def load(self, input: ByteBuffer, WorldVersion: int) -> None: ...

    def save(self, output: ByteBuffer) -> None: ...

    def __init__(self):
      self.categoryid: int
      self.dispbloom: bool
      self.dispseason: int
      self.donothing: bool
      self.hasspawned: bool
      self.regionid: int
      self.stage: int


class Flowerbed(ErosionCategory):

  def getObjectNames(self, list: ArrayList[str]) -> None: ...

  def init(self) -> None: ...

  def replaceExistingObject(self, _sq: IsoGridSquare, _sqErosionData: ErosionData.Square, _chunkData: ErosionData.Chunk, _isExterior: bool, _hasWall: bool) -> bool: ...

  def update(self, _sq: IsoGridSquare, _sqErosionData: ErosionData.Square, _sqCategoryData: ErosionCategory.Data, _chunkData: ErosionData.Chunk, _eTick: int) -> None: ...

  def validateSpawn(self, _sq: IsoGridSquare, _sqErosionData: ErosionData.Square, _chunkData: ErosionData.Chunk, _isExterior: bool, _hasWall: bool, _isRespawn: bool) -> bool: ...

  def __init__(self): ...

  class CategoryData(ErosionCategory.Data):

    def load(self, arg0: ByteBuffer, arg1: int) -> None: ...

    def save(self, arg0: ByteBuffer) -> None: ...


class NatureBush(ErosionCategory):

  def getObjectNames(self, list: ArrayList[str]) -> None: ...

  def init(self) -> None: ...

  def replaceExistingObject(self, _sq: IsoGridSquare, _sqErosionData: ErosionData.Square, _chunkData: ErosionData.Chunk, _isExterior: bool, _hasWall: bool) -> bool: ...

  def update(self, _sq: IsoGridSquare, _sqErosionData: ErosionData.Square, _sqCategoryData: ErosionCategory.Data, _chunkData: ErosionData.Chunk, _eTick: int) -> None: ...

  def validateSpawn(self, _sq: IsoGridSquare, _sqErosionData: ErosionData.Square, _chunkData: ErosionData.Chunk, _isExterior: bool, _hasWall: bool, _isRespawn: bool) -> bool: ...

  def __init__(self): ...

  class BushInit:

    def __init__(self, arg0: NatureBush, arg1: str, arg2: float, arg3: float, arg4: bool):
      self.bloomend: float
      self.bloomstart: float
      self.hasflower: bool
      self.name: str

  class CategoryData(ErosionCategory.Data):

    def load(self, arg0: ByteBuffer, arg1: int) -> None: ...

    def save(self, arg0: ByteBuffer) -> None: ...


class NatureGeneric(ErosionCategory):

  def getObjectNames(self, list: ArrayList[str]) -> None: ...

  def init(self) -> None: ...

  def replaceExistingObject(self, _sq: IsoGridSquare, _sqErosionData: ErosionData.Square, _chunkData: ErosionData.Chunk, _isExterior: bool, _hasWall: bool) -> bool: ...

  def update(self, _sq: IsoGridSquare, _sqErosionData: ErosionData.Square, _sqCategoryData: ErosionCategory.Data, _chunkData: ErosionData.Chunk, _eTick: int) -> None: ...

  def validateSpawn(self, _sq: IsoGridSquare, _sqErosionData: ErosionData.Square, _chunkData: ErosionData.Chunk, _isExterior: bool, _hasWall: bool, _isRespawn: bool) -> bool: ...

  def __init__(self): ...

  class CategoryData(ErosionCategory.Data):

    def load(self, arg0: ByteBuffer, arg1: int) -> None: ...

    def save(self, arg0: ByteBuffer) -> None: ...


class NaturePlants(ErosionCategory):

  def getObjectNames(self, list: ArrayList[str]) -> None: ...

  def init(self) -> None: ...

  def replaceExistingObject(self, _sq: IsoGridSquare, _sqErosionData: ErosionData.Square, _chunkData: ErosionData.Chunk, _isExterior: bool, _hasWall: bool) -> bool: ...

  def update(self, _sq: IsoGridSquare, _sqErosionData: ErosionData.Square, _sqCategoryData: ErosionCategory.Data, _chunkData: ErosionData.Chunk, _eTick: int) -> None: ...

  def validateSpawn(self, _sq: IsoGridSquare, _sqErosionData: ErosionData.Square, _chunkData: ErosionData.Chunk, _isExterior: bool, _hasWall: bool, _isRespawn: bool) -> bool: ...

  def __init__(self): ...

  class PlantInit:

    def __init__(self, arg0: NaturePlants, arg1: str, arg2: bool, arg3: float, arg4: float):
      self.bloomend: float
      self.bloomstart: float
      self.hasflower: bool
      self.name: str

  class CategoryData(ErosionCategory.Data):

    def load(self, arg0: ByteBuffer, arg1: int) -> None: ...

    def save(self, arg0: ByteBuffer) -> None: ...


class NatureTrees(ErosionCategory):

  def getObjectNames(self, list: ArrayList[str]) -> None: ...

  def init(self) -> None: ...

  def replaceExistingObject(self, _sq: IsoGridSquare, _sqErosionData: ErosionData.Square, _chunkData: ErosionData.Chunk, _isExterior: bool, _hasWall: bool) -> bool: ...

  def update(self, _sq: IsoGridSquare, _sqErosionData: ErosionData.Square, _sqCategoryData: ErosionCategory.Data, _chunkData: ErosionData.Chunk, _eTick: int) -> None: ...

  def validateSpawn(self, _sq: IsoGridSquare, _sqErosionData: ErosionData.Square, _chunkData: ErosionData.Chunk, _isExterior: bool, _hasWall: bool, _isRespawn: bool) -> bool: ...

  def __init__(self): ...

  class TreeInit:

    def __init__(self, arg0: NatureTrees, arg1: str, arg2: str, arg3: bool):
      self.evergreen: bool
      self.name: str
      self.tile: str

  class CategoryData(ErosionCategory.Data):

    def load(self, arg0: ByteBuffer, arg1: int) -> None: ...

    def save(self, arg0: ByteBuffer) -> None: ...


class StreetCracks(ErosionCategory):

  def getObjectNames(self, list: ArrayList[str]) -> None: ...

  def init(self) -> None: ...

  def replaceExistingObject(self, _sq: IsoGridSquare, _sqErosionData: ErosionData.Square, _chunkData: ErosionData.Chunk, _isExterior: bool, _hasWall: bool) -> bool: ...

  def update(self, _sq: IsoGridSquare, _sqErosionData: ErosionData.Square, _sqCategoryData: ErosionCategory.Data, _chunkData: ErosionData.Chunk, _eTick: int) -> None: ...

  def validateSpawn(self, _sq: IsoGridSquare, _sqErosionData: ErosionData.Square, _chunkData: ErosionData.Chunk, _isExterior: bool, _hasWall: bool, _isRespawn: bool) -> bool: ...

  def __init__(self): ...

  class CategoryData(ErosionCategory.Data):

    def load(self, arg0: ByteBuffer, arg1: int) -> None: ...

    def save(self, arg0: ByteBuffer) -> None: ...


class WallCracks(ErosionCategory):

  def getObjectNames(self, list: ArrayList[str]) -> None: ...

  def init(self) -> None: ...

  def replaceExistingObject(self, _sq: IsoGridSquare, _sqErosionData: ErosionData.Square, _chunkData: ErosionData.Chunk, _isExterior: bool, _hasWall: bool) -> bool: ...

  def update(self, _sq: IsoGridSquare, _sqErosionData: ErosionData.Square, _sqCategoryData: ErosionCategory.Data, _chunkData: ErosionData.Chunk, _eTick: int) -> None: ...

  def validateSpawn(self, _sq: IsoGridSquare, _sqErosionData: ErosionData.Square, _chunkData: ErosionData.Chunk, _isExterior: bool, _hasWall: bool, _isRespawn: bool) -> bool: ...

  def __init__(self): ...

  class CategoryData(ErosionCategory.Data):

    def load(self, arg0: ByteBuffer, arg1: int) -> None: ...

    def save(self, arg0: ByteBuffer) -> None: ...


class WallVines(ErosionCategory):

  def getObjectNames(self, list: ArrayList[str]) -> None: ...

  def init(self) -> None: ...

  def replaceExistingObject(self, _sq: IsoGridSquare, _sqErosionData: ErosionData.Square, _chunkData: ErosionData.Chunk, _isExterior: bool, _hasWall: bool) -> bool: ...

  def update(self, _sq: IsoGridSquare, _sqErosionData: ErosionData.Square, _sqCategoryData: ErosionCategory.Data, _chunkData: ErosionData.Chunk, _eTick: int) -> None: ...

  def validateSpawn(self, _sq: IsoGridSquare, _sqErosionData: ErosionData.Square, _chunkData: ErosionData.Chunk, _isExterior: bool, _hasWall: bool, _isRespawn: bool) -> bool: ...

  def __init__(self): ...

  class CategoryData(ErosionCategory.Data):

    def load(self, arg0: ByteBuffer, arg1: int) -> None: ...

    def save(self, arg0: ByteBuffer) -> None: ...

