from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from fmod.fmod import FMOD_STUDIO_PARAMETER_DESCRIPTION, BaseSoundListener
from java.io import DataInputStream, DataOutputStream
from java.lang import Enum, Float, Integer, Iterable, Long, Boolean, Runnable
from java.nio import ByteBuffer
from java.util import ArrayList, Stack, List, HashMap, BitSet, LinkedList
from org.joml import Vector3f
from org.junit import Assert
from se.krka.kahlua.vm import KahluaTable
from zombie import SharedDescriptors
from zombie.ai import State, GameCharacterAIBrain, MapKnowledge, StateMachine
from zombie.ai.astar import AStarPathFinderResult
from zombie.ai.sadisticAIDirector import SleepingEventData
from zombie.audio import FMODParameterList, GameSoundClip
from zombie.audio.parameters import ParameterCharacterMovementSpeed, ParameterMeleeHitSurface, ParameterCharacterInside, ParameterPlayerDistance, ParameterZombieState
from zombie.characterTextures import BloodBodyPartType
from zombie.characters.AttachedItems import AttachedItems, AttachedLocationGroup
from zombie.characters.BodyDamage import BodyDamage, Metabolics, Fitness, Nutrition, BodyPartType
from zombie.characters.CharacterTimedActions import BaseAction
from zombie.characters.Moodles import Moodles, MoodleType
from zombie.characters.WornItems import BodyLocationGroup, WornItems
from zombie.characters.action import ActionContext, ActionStateSnapshot
from zombie.characters.professions import ProfessionFactory
from zombie.characters.skills import PerkFactory
from zombie.characters.traits import TraitCollection, ObservationFactory
from zombie.chat import ChatElement, ChatMessage
from zombie.core import ImmutableColor, Color
from zombie.core.network import ByteBufferWriter
from zombie.core.opengl import Shader
from zombie.core.profiling import PerformanceProfileProbe
from zombie.core.raknet import UdpConnection
from zombie.core.skinnedmodel import ModelManager, DeadBodyAtlas
from zombie.core.skinnedmodel.advancedanimation import AnimLayer, AnimEvent, AnimationVariableSource, AdvancedAnimator, IAnimationVariableSlot, AnimationVariableHandle, AnimationVariableSlotCallbackBool, AnimationVariableSlotCallbackFloat, AnimationVariableSlotCallbackInt, AnimationVariableSlotCallbackString
from zombie.core.skinnedmodel.advancedanimation.debug import AnimatorDebugMonitor
from zombie.core.skinnedmodel.animation import AnimationTrack, AnimationPlayer
from zombie.core.skinnedmodel.animation.debug import AnimationPlayerRecorder
from zombie.core.skinnedmodel.model import ModelInstance, ModelInstanceTextureCreator
from zombie.core.skinnedmodel.population import BeardStyle, HairStyle, Outfit
from zombie.core.skinnedmodel.visual import BaseVisual, ItemVisuals, HumanVisual
from zombie.core.textures import TextureDraw, ColorInfo
from zombie.inventory import InventoryItem, ItemContainer
from zombie.inventory.types import HandWeapon, Literature, Radio, InventoryContainer
from zombie.iso import IsoObject, Vector2, IsoGridSquare, IsoDirections, IsoMovingObject, Vector3, BuildingDef, RoomDef, IsoCell, IsoPushableObject, IsoMetaGrid
from zombie.iso.areas import IsoBuilding
from zombie.iso.objects import IsoThumpable, IsoWindow, IsoDeadBody
from zombie.iso.sprite import IsoSpriteInstance, IsoSprite
from zombie.network import NetworkVariables, ReplayManager
from zombie.network.packets import ZombiePacket, DeadCharacterPacket, PlayerPacket, EventPacket
from zombie.network.packets.hit import AttackVars, HitInfo, VehicleHitPacket
from zombie.scripting.objects import Recipe
from zombie.ui import UIFont
from zombie.vehicles import BaseVehicle, PolygonalMap2, PathFindBehavior2, VehiclePart

class AnimStateTriggerXmlFile:

  def __init__(self):
    self.animset: str
    self.forceanim: bool
    self.nodename: str
    self.scalarvalue: str
    self.scalarvalue2: str
    self.setscalarvalues: bool
    self.statename: str


class BaseCharacterSoundEmitter:

  def hasSoundsToStart(self) -> bool: ...

  def isClear(self) -> bool: ...

  @overload
  def isPlaying(self, alias: str) -> bool: ...

  @overload
  def isPlaying(self, channel: int) -> bool: ...

  def playFootsteps(self, file: str, volume: float) -> None: ...

  @overload
  def playSound(self, file: str) -> int: ...

  @overload
  def playSound(self, file: str, proxy: IsoObject) -> int: ...

  def playSoundImpl(self, file: str, proxy: IsoObject) -> int: ...

  def playVocals(self, file: str) -> int: ...

  def register(self) -> None: ...

  def set(self, x: float, y: float, z: float) -> None: ...

  def setParameterValue(self, soundRef: int, parameterDescription: FMOD_STUDIO_PARAMETER_DESCRIPTION, value: float) -> None: ...

  def setPitch(self, handle: int, pitch: float) -> None: ...

  def setVolume(self, handle: int, volume: float) -> None: ...

  def stopAll(self) -> None: ...

  def stopOrTriggerSound(self, handle: int) -> None: ...

  def stopOrTriggerSoundByName(self, name: str) -> None: ...

  def stopSound(self, channel: int) -> int: ...

  def stopSoundByName(self, soundName: str) -> int: ...

  def stopSoundLocal(self, handle: int) -> None: ...

  def tick(self) -> None: ...

  def unregister(self) -> None: ...

  def __init__(self, chr: IsoGameCharacter): ...


class BaseZombieSoundManager:

  def addCharacter(self, chr: IsoZombie) -> None: ...

  def playSound(self, chr: IsoZombie) -> None: ...

  def postUpdate(self) -> None: ...

  def update(self) -> None: ...

  def __init__(self, numSlots: int, staleSlotMS: int): ...


class CharacterActionAnims(Enum):

  Bandage: CharacterActionAnims

  Build: CharacterActionAnims

  BuildLow: CharacterActionAnims

  Chop_tree: CharacterActionAnims

  Craft: CharacterActionAnims

  Destroy: CharacterActionAnims

  Dig: CharacterActionAnims

  DigHoe: CharacterActionAnims

  DigPickAxe: CharacterActionAnims

  DigShovel: CharacterActionAnims

  DigTrowel: CharacterActionAnims

  Disassemble: CharacterActionAnims

  Drink: CharacterActionAnims

  Eat: CharacterActionAnims

  InsertBullets: CharacterActionAnims

  # None: CharacterActionAnims

  Paint: CharacterActionAnims

  Pour: CharacterActionAnims

  Read: CharacterActionAnims

  Reload: CharacterActionAnims

  RemoveBullets: CharacterActionAnims

  Shave: CharacterActionAnims

  TakePills: CharacterActionAnims

  @staticmethod
  def valueOf(arg0: str) -> CharacterActionAnims: ...

  @staticmethod
  def values() -> list[CharacterActionAnims]: ...


class CharacterSoundEmitter(BaseCharacterSoundEmitter):

  def hasSoundsToStart(self) -> bool: ...

  @overload
  def hasSustainPoints(self, handle: int) -> bool: ...

  @overload
  def hasSustainPoints(self, handle: int) -> bool: ...

  def isClear(self) -> bool: ...

  @overload
  def isEmpty(self) -> bool: ...

  @overload
  def isEmpty(self) -> bool: ...

  @overload
  def isPlaying(self, alias: str) -> bool: ...

  @overload
  def isPlaying(self, alias: str) -> bool: ...

  @overload
  def isPlaying(self, eventInstance: int) -> bool: ...

  @overload
  def isPlaying(self, eventInstance: int) -> bool: ...

  def playFootsteps(self, file: str, volume: float) -> None: ...

  @overload
  def playSound(self, file: str) -> int: ...

  @overload
  def playSound(self, file: str) -> int: ...

  @overload
  def playSound(self, file: str, doWorldSound: bool) -> int: ...

  @overload
  def playSound(self, file: str, doWorldSound: bool) -> int: ...

  @overload
  def playSound(self, file: str, proxy: IsoObject) -> int: ...

  def playSoundImpl(self, file: str, proxy: IsoObject) -> int: ...

  def playVocals(self, file: str) -> int: ...

  def register(self) -> None: ...

  def set(self, x: float, y: float, z: float) -> None: ...

  def setParameterValue(self, soundRef: int, parameterDescription: FMOD_STUDIO_PARAMETER_DESCRIPTION, value: float) -> None: ...

  @overload
  def setPitch(self, handle: int, pitch: float) -> None: ...

  @overload
  def setPitch(self, handle: int, pitch: float) -> None: ...

  @overload
  def setPos(self, x: float, y: float, z: float) -> None: ...

  @overload
  def setPos(self, x: float, y: float, z: float) -> None: ...

  @overload
  def setVolume(self, handle: int, volume: float) -> None: ...

  @overload
  def setVolume(self, handle: int, volume: float) -> None: ...

  def stopAll(self) -> None: ...

  @overload
  def stopOrTriggerSound(self, eventInstance: int) -> None: ...

  @overload
  def stopOrTriggerSound(self, eventInstance: int) -> None: ...

  @overload
  def stopOrTriggerSoundByName(self, name: str) -> None: ...

  @overload
  def stopOrTriggerSoundByName(self, name: str) -> None: ...

  @overload
  def stopSound(self, eventInstance: int) -> int: ...

  @overload
  def stopSound(self, eventInstance: int) -> int: ...

  def stopSoundByName(self, soundName: str) -> int: ...

  def stopSoundLocal(self, handle: int) -> None: ...

  @overload
  def tick(self) -> None: ...

  @overload
  def tick(self) -> None: ...

  @overload
  def triggerCue(self, handle: int) -> None: ...

  @overload
  def triggerCue(self, handle: int) -> None: ...

  def unregister(self) -> None: ...

  def __init__(self, chr: IsoGameCharacter): ...

  class footstep(Enum):

    concrete: CharacterSoundEmitter.footstep

    grass: CharacterSoundEmitter.footstep

    gravel: CharacterSoundEmitter.footstep

    snow: CharacterSoundEmitter.footstep

    upstairs: CharacterSoundEmitter.footstep

    wood: CharacterSoundEmitter.footstep

    @staticmethod
    def valueOf(arg0: str) -> CharacterSoundEmitter.footstep: ...

    @staticmethod
    def values() -> list[CharacterSoundEmitter.footstep]: ...


class ClothingWetness:

  def calculateExposedItems(self) -> None: ...

  def decreaseWetness(self, wetness: float) -> None: ...

  def increaseWetness(self, wetness: float) -> None: ...

  def updateWetness(self, outerWetnessInc: float, outerWetnessDec: float) -> None: ...

  def __init__(self, character: IsoGameCharacter):
    self.changed: bool
    self.character: IsoGameCharacter
    self.clothing: list[ClothingWetness.ItemList]
    self.perspiringparts: list[int]

  class ItemList(ArrayList): ...


class DummyCharacterSoundEmitter(BaseCharacterSoundEmitter):

  def hasSoundsToStart(self) -> bool: ...

  def hasSustainPoints(self, handle: int) -> bool: ...

  def isClear(self) -> bool: ...

  @overload
  def isPlaying(self, alias: str) -> bool: ...

  @overload
  def isPlaying(self, channel: int) -> bool: ...

  def playFootsteps(self, file: str, volume: float) -> None: ...

  @overload
  def playSound(self, file: str) -> int: ...

  @overload
  def playSound(self, file: str, proxy: IsoObject) -> int: ...

  def playSoundImpl(self, file: str, proxy: IsoObject) -> int: ...

  def playVocals(self, file: str) -> int: ...

  def register(self) -> None: ...

  def set(self, x: float, y: float, z: float) -> None: ...

  def setParameterValue(self, soundRef: int, parameterDescription: FMOD_STUDIO_PARAMETER_DESCRIPTION, value: float) -> None: ...

  def setPitch(self, handle: int, pitch: float) -> None: ...

  def setVolume(self, handle: int, volume: float) -> None: ...

  def stopAll(self) -> None: ...

  def stopOrTriggerSound(self, handle: int) -> None: ...

  def stopOrTriggerSoundByName(self, name: str) -> None: ...

  def stopSound(self, channel: int) -> int: ...

  def stopSoundByName(self, soundName: str) -> int: ...

  def stopSoundLocal(self, handle: int) -> None: ...

  def tick(self) -> None: ...

  def unregister(self) -> None: ...

  def __init__(self, chr: IsoGameCharacter):
    self.x: float
    self.y: float
    self.z: float


class EquippedTextureCreator(TextureDraw.GenericDrawer):

  @overload
  def init(self, _modelInstance: ModelInstance, bloodLevel: float) -> None: ...

  @overload
  def init(self, modelInstance: ModelInstance, item: InventoryItem) -> None: ...

  def isRendered(self) -> bool: ...

  def postRender(self) -> None: ...

  def render(self) -> None: ...

  @staticmethod
  def alloc() -> EquippedTextureCreator: ...

  def __init__(self): ...


class Faction:

  factions: ArrayList[Faction]

  def addPlayer(self, pName: str) -> None: ...

  def canCreateTag(self) -> bool: ...

  def getName(self) -> str: ...

  def getOwner(self) -> str: ...

  def getPlayers(self) -> ArrayList[str]: ...

  def getTag(self) -> str: ...

  def getTagColor(self) -> ColorInfo: ...

  def isMember(self, name: str) -> bool: ...

  def isOwner(self, name: str) -> bool: ...

  def isPlayerMember(self, player: IsoPlayer) -> bool: ...

  def load(self, input: ByteBuffer, WorldVersion: int) -> None: ...

  def removeFaction(self) -> None: ...

  def removePlayer(self, player: str) -> None: ...

  def save(self, output: ByteBuffer) -> None: ...

  def setName(self, name: str) -> None: ...

  def setOwner(self, owner: str) -> None: ...

  def setTag(self, tag: str) -> None: ...

  def setTagColor(self, tagColor: ColorInfo) -> None: ...

  def syncFaction(self) -> None: ...

  def writeToBuffer(self, bb: ByteBufferWriter, remove: bool) -> None: ...

  @staticmethod
  def canCreateFaction(player: IsoPlayer) -> bool: ...

  @staticmethod
  def createFaction(name: str, owner: str) -> Faction: ...

  @staticmethod
  def factionExist(name: str) -> bool: ...

  @staticmethod
  def getFaction(name: str) -> Faction: ...

  @staticmethod
  def getFactions() -> ArrayList[Faction]: ...

  @staticmethod
  @overload
  def getPlayerFaction(username: str) -> Faction: ...

  @staticmethod
  @overload
  def getPlayerFaction(player: IsoPlayer) -> Faction: ...

  @staticmethod
  @overload
  def isAlreadyInFaction(username: str) -> bool: ...

  @staticmethod
  @overload
  def isAlreadyInFaction(player: IsoPlayer) -> bool: ...

  @staticmethod
  def tagExist(name: str) -> bool: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, name: str, owner: str): ...


class HairOutfitDefinitions:

  instance: HairOutfitDefinitions

  def checkDirty(self) -> None: ...

  def getRandomBeard(self, outfit: str, beardList: ArrayList[BeardStyle]) -> str: ...

  def getRandomHaircut(self, outfit: str, hairList: ArrayList[HairStyle]) -> str: ...

  def getRandomHaircutColor(self, outfit: str) -> ImmutableColor: ...

  def getValidHairStylesForOutfit(self, outfit: str, hairStyles: ArrayList[HairStyle], result: ArrayList[HairStyle]) -> None: ...

  def isHaircutValid(self, outfit: str, haircut: str) -> bool: ...

  def __init__(self):
    self.hairstyle: str
    self.m_dirty: bool
    self.m_haircutdefinition: ArrayList[HairOutfitDefinitions.HaircutDefinition]
    self.m_outfitdefinition: ArrayList[HairOutfitDefinitions.HaircutOutfitDefinition]
    self.minworldage: int

  class HaircutDefinition:

    def __init__(self, hairStyle: str, minWorldAge: int, onlyFor: ArrayList[str]):
      self.hairstyle: str
      self.minworldage: int
      self.onlyfor: ArrayList[str]

  class HaircutOutfitDefinition:

    def __init__(self, outfit: str, haircutChance: ArrayList[HairOutfitDefinitions.StringChance], beardChance: ArrayList[HairOutfitDefinitions.StringChance], haircutColor: ArrayList[HairOutfitDefinitions.StringChance]):
      self.beardchance: ArrayList[HairOutfitDefinitions.StringChance]
      self.haircutchance: ArrayList[HairOutfitDefinitions.StringChance]
      self.haircutcolor: ArrayList[HairOutfitDefinitions.StringChance]
      self.outfit: str

  class StringChance: ...


class HaloTextHelper:

  COLOR_GREEN: HaloTextHelper.ColorRGB

  COLOR_RED: HaloTextHelper.ColorRGB

  COLOR_WHITE: HaloTextHelper.ColorRGB

  @staticmethod
  @overload
  def addText(player: IsoPlayer, text: str) -> None: ...

  @staticmethod
  @overload
  def addText(player: IsoPlayer, text: str, color: HaloTextHelper.ColorRGB) -> None: ...

  @staticmethod
  @overload
  def addText(player: IsoPlayer, text: str, r: int, g: int, b: int) -> None: ...

  @staticmethod
  @overload
  def addTextWithArrow(player: IsoPlayer, text: str, arrowIsUp: bool, color: HaloTextHelper.ColorRGB) -> None: ...

  @staticmethod
  @overload
  def addTextWithArrow(player: IsoPlayer, text: str, arrowIsUp: bool, color: HaloTextHelper.ColorRGB, arrowColor: HaloTextHelper.ColorRGB) -> None: ...

  @staticmethod
  @overload
  def addTextWithArrow(player: IsoPlayer, text: str, arrowIsUp: bool, r: int, g: int, b: int) -> None: ...

  @staticmethod
  @overload
  def addTextWithArrow(player: IsoPlayer, text: str, arrowIsUp: bool, r: int, g: int, b: int, aR: int, aG: int, aB: int) -> None: ...

  @staticmethod
  def forceNextAddText() -> None: ...

  @staticmethod
  def getColorGreen() -> HaloTextHelper.ColorRGB: ...

  @staticmethod
  def getColorRed() -> HaloTextHelper.ColorRGB: ...

  @staticmethod
  def getColorWhite() -> HaloTextHelper.ColorRGB: ...

  @staticmethod
  def update() -> None: ...

  def __init__(self): ...

  class ColorRGB:

    def __init__(self, r: int, g: int, b: int):
      self.a: int
      self.b: int
      self.g: int
      self.r: int


class HitReactionNetworkAI:

  def finish(self) -> None: ...

  def getDescription(self) -> str: ...

  def isDoSkipMovement(self) -> bool: ...

  def isSetup(self) -> bool: ...

  def isStarted(self) -> bool: ...

  def move(self) -> None: ...

  def moveFinal(self) -> None: ...

  def process(self, dropPositionX: float, dropPositionY: float, dropPositionZ: float, dropDirection: float) -> None: ...

  def setup(self, dropPositionX: float, dropPositionY: float, dropPositionZ: int, angle: Float) -> None: ...

  def start(self) -> None: ...

  @staticmethod
  def CalcHitReactionVehicle(target: IsoGameCharacter, vehicle: BaseVehicle) -> None: ...

  @staticmethod
  def CalcHitReactionWeapon(wielder: IsoGameCharacter, target: IsoGameCharacter, weapon: HandWeapon) -> None: ...

  def __init__(self, character: IsoGameCharacter):
    self.finaldirection: Vector2
    self.finalposition: Vector2
    self.finalpositionz: int
    self.startdirection: Vector2
    self.startposition: Vector2


class IComparitor:

  def test(self, main: IsoGameCharacter, test: IsoGameCharacter) -> bool: ...


class ILuaGameCharacter:

  def Callout(self) -> None: ...

  def CanAttack(self) -> bool: ...

  def ClearVariable(self, arg0: str) -> None: ...

  def Dressup(self, arg0: SurvivorDesc) -> None: ...

  @overload
  def Eat(self, arg0: InventoryItem) -> bool: ...

  @overload
  def Eat(self, arg0: InventoryItem, arg1: float) -> bool: ...

  def GetVariable(self, arg0: str) -> str: ...

  def HasTrait(self, trait: str) -> bool: ...

  @overload
  def Hit(self, arg0: HandWeapon, arg1: IsoGameCharacter, arg2: float, arg3: bool, arg4: float) -> float: ...

  @overload
  def Hit(self, arg0: BaseVehicle, arg1: float, arg2: bool, arg3: float, arg4: float) -> float: ...

  @overload
  def Hit(self, arg0: HandWeapon, arg1: IsoGameCharacter, arg2: float, arg3: bool, arg4: float, arg5: bool) -> float: ...

  def IsSpeaking(self) -> bool: ...

  @overload
  def LevelPerk(self, perk: PerkFactory.Perk) -> None: ...

  @overload
  def LevelPerk(self, perk: PerkFactory.Perk, removePick: bool) -> None: ...

  def LoseLevel(self, perk: PerkFactory.Perk) -> None: ...

  def PlayAnim(self, string: str) -> None: ...

  def PlayAnimUnlooped(self, string: str) -> None: ...

  def PlayAnimWithSpeed(self, string: str, framesSpeedPerFrame: float) -> None: ...

  def ReadLiterature(self, literature: Literature) -> None: ...

  @overload
  def Say(self, line: str) -> None: ...

  @overload
  def Say(self, line: str, r: float, g: float, b: float, font: UIFont, baseRange: float, customTag: str) -> None: ...

  def SetVariable(self, arg0: str, arg1: str) -> None: ...

  def StartAction(self, act: BaseAction) -> None: ...

  @overload
  def StartTimedActionAnim(self, event: str) -> None: ...

  @overload
  def StartTimedActionAnim(self, event: str, type: str) -> None: ...

  def StopAllActionQueue(self) -> None: ...

  def StopBurning(self) -> None: ...

  def StopTimedActionAnim(self) -> None: ...

  def addBlood(self, arg0: BloodBodyPartType, arg1: bool, arg2: bool, arg3: bool) -> None: ...

  def addHole(self, arg0: BloodBodyPartType) -> bool: ...

  def addKnownMediaLine(self, guid: str) -> None: ...

  def addWorldSoundUnlessInvisible(self, radius: int, volume: int, bStressHumans: bool) -> None: ...

  def canClimbDownSheetRope(self, sq: IsoGridSquare) -> bool: ...

  def canClimbDownSheetRopeInCurrentSquare(self) -> bool: ...

  def canClimbSheetRope(self, sq: IsoGridSquare) -> bool: ...

  def changeState(self, state: State) -> None: ...

  def clearAttachedItems(self) -> None: ...

  def clearKnownMediaLines(self) -> None: ...

  def clearWornItems(self) -> None: ...

  def climbDownSheetRope(self) -> None: ...

  def climbOverFence(self, dir: IsoDirections) -> None: ...

  def climbSheetRope(self) -> None: ...

  @overload
  def climbThroughWindow(self, w: IsoThumpable) -> None: ...

  @overload
  def climbThroughWindow(self, w: IsoWindow) -> None: ...

  @overload
  def climbThroughWindow(self, w: IsoThumpable, startingFrame: Integer) -> None: ...

  @overload
  def climbThroughWindow(self, w: IsoWindow, startingFrame: Integer) -> None: ...

  def climbThroughWindowFrame(self, obj: IsoObject) -> None: ...

  def closeWindow(self, w: IsoWindow) -> None: ...

  def dressInNamedOutfit(self, arg0: str) -> None: ...

  def dressInPersistentOutfit(self, arg0: str) -> None: ...

  def dressInPersistentOutfitID(self, arg0: int) -> None: ...

  def facePosition(self, x: int, y: int) -> None: ...

  def faceThisObject(self, object: IsoObject) -> None: ...

  def faceThisObjectAlt(self, object: IsoObject) -> None: ...

  def getAlreadyReadPages(self, fullType: str) -> int: ...

  def getAttachedItem(self, arg0: str) -> InventoryItem: ...

  def getAttachedItems(self) -> AttachedItems: ...

  def getAttachedLocationGroup(self) -> AttachedLocationGroup: ...

  def getBed(self) -> IsoObject: ...

  def getBedType(self) -> str: ...

  def getBodyDamage(self) -> BodyDamage: ...

  def getBodyDamageRemote(self) -> BodyDamage: ...

  def getBodyLocationGroup(self) -> BodyLocationGroup: ...

  def getBumpType(self) -> str: ...

  def getCharacterActions(self) -> Stack[BaseAction]: ...

  def getCurrentState(self) -> State: ...

  def getDebugMonitor(self) -> AnimatorDebugMonitor: ...

  def getDescriptor(self) -> SurvivorDesc: ...

  def getEmitter(self) -> BaseCharacterSoundEmitter: ...

  def getFatigueMod(self) -> float: ...

  def getFullName(self) -> str: ...

  def getHammerSoundMod(self) -> float: ...

  def getHealth(self) -> float: ...

  def getHoursSurvived(self) -> float: ...

  def getInventory(self) -> ItemContainer: ...

  def getInventoryWeight(self) -> float: ...

  def getKnownRecipes(self) -> List[str]: ...

  def getLastHitCount(self) -> int: ...

  def getLastHourSleeped(self) -> int: ...

  def getMaintenanceMod(self) -> int: ...

  def getMaxWeight(self) -> int: ...

  def getMeleeDelay(self) -> float: ...

  def getMoodles(self) -> Moodles: ...

  def getOutfitName(self) -> str: ...

  def getPath2(self) -> PolygonalMap2.Path: ...

  def getPathFindBehavior2(self) -> PathFindBehavior2: ...

  def getPerkInfo(self, perk: PerkFactory.Perk) -> IsoGameCharacter.PerkInfo: ...

  def getPerkLevel(self, perks: PerkFactory.Perk) -> int: ...

  def getPrimaryHandItem(self) -> InventoryItem: ...

  def getRecoilDelay(self) -> float: ...

  def getReduceInfectionPower(self) -> float: ...

  def getSafety(self) -> Safety: ...

  def getSecondaryHandItem(self) -> InventoryItem: ...

  def getSleepingTabletEffect(self) -> float: ...

  def getSpriteDef(self) -> IsoSpriteInstance: ...

  def getStats(self) -> Stats: ...

  def getTemperature(self) -> float: ...

  def getTimeSinceLastSmoke(self) -> float: ...

  def getTraits(self) -> TraitCollection: ...

  def getVehicle(self) -> BaseVehicle: ...

  def getVisual(self) -> BaseVisual: ...

  def getWeldingSoundMod(self) -> float: ...

  def getWornItem(self, arg0: str) -> InventoryItem: ...

  def getWornItems(self) -> WornItems: ...

  def getXp(self) -> IsoGameCharacter.XP: ...

  def getXpForLevel(self, level: int) -> int: ...

  def getZombieKills(self) -> int: ...

  def hasEquipped(self, String: str) -> bool: ...

  def hasEquippedTag(self, tag: str) -> bool: ...

  def hasItems(self, type: str, count: int) -> bool: ...

  def initSpritePartsEmpty(self) -> None: ...

  def isAboveTopOfStairs(self) -> bool: ...

  def isAiming(self) -> bool: ...

  def isAsleep(self) -> bool: ...

  def isAttachedItem(self, item: InventoryItem) -> bool: ...

  def isBuildCheat(self) -> bool: ...

  def isBumped(self) -> bool: ...

  def isCurrentState(self, state: State) -> bool: ...

  def isDeathDragDown(self) -> bool: ...

  def isDriving(self) -> bool: ...

  def isEquipped(self, item: InventoryItem) -> bool: ...

  def isEquippedClothing(self, item: InventoryItem) -> bool: ...

  def isFarmingCheat(self) -> bool: ...

  def isFemale(self) -> bool: ...

  def isGodMod(self) -> bool: ...

  def isHandItem(self, item: InventoryItem) -> bool: ...

  def isHealthCheat(self) -> bool: ...

  def isInARoom(self) -> bool: ...

  def isInvisible(self) -> bool: ...

  def isItemInBothHands(self, item: InventoryItem) -> bool: ...

  def isKnownMediaLine(self, guid: str) -> bool: ...

  def isKnownPoison(self, item: InventoryItem) -> bool: ...

  def isMechanicsCheat(self) -> bool: ...

  def isMovablesCheat(self) -> bool: ...

  def isOnDeathDone(self) -> bool: ...

  def isOnFire(self) -> bool: ...

  def isOnKillDone(self) -> bool: ...

  def isOutside(self) -> bool: ...

  def isPlayingDeathSound(self) -> bool: ...

  def isPrimaryHandItem(self, item: InventoryItem) -> bool: ...

  def isRangedWeaponEmpty(self) -> bool: ...

  def isReading(self) -> bool: ...

  @overload
  def isRecipeKnown(self, name: str) -> bool: ...

  @overload
  def isRecipeKnown(self, recipe: Recipe) -> bool: ...

  def isSecondaryHandItem(self, item: InventoryItem) -> bool: ...

  def isShowAdminTag(self) -> bool: ...

  def isSpeaking(self) -> bool: ...

  def isTimedActionInstant(self) -> bool: ...

  def isTimedActionInstantCheat(self) -> bool: ...

  def isUnlimitedCarry(self) -> bool: ...

  def isZombie(self) -> bool: ...

  def openWindow(self, w: IsoWindow) -> None: ...

  def pathToLocation(self, x: int, y: int, z: int) -> None: ...

  def pathToLocationF(self, x: float, y: float, z: float) -> None: ...

  def playSound(self, file: str) -> int: ...

  def playSoundLocal(self, file: str) -> int: ...

  def removeAttachedItem(self, arg0: InventoryItem) -> None: ...

  def removeFromHands(self, item: InventoryItem) -> bool: ...

  def removeKnownMediaLine(self, guid: str) -> None: ...

  def removeWornItem(self, arg0: InventoryItem) -> None: ...

  def reportEvent(self, name: str) -> None: ...

  def resetBeardGrowingTime(self) -> None: ...

  def resetHairGrowingTime(self) -> None: ...

  def resetModel(self) -> None: ...

  def resetModelNextFrame(self) -> None: ...

  def sendStopBurning(self) -> None: ...

  def setAlreadyReadPages(self, fullType: str, pages: int) -> None: ...

  def setAsleep(self, Asleep: bool) -> None: ...

  def setAttachedItem(self, arg0: str, arg1: InventoryItem) -> None: ...

  def setAttachedItems(self, arg0: AttachedItems) -> None: ...

  def setBed(self, bed: IsoObject) -> None: ...

  def setBedType(self, bedType: str) -> None: ...

  def setBuildCheat(self, buildCheat: bool) -> None: ...

  def setClothingItem_Back(self, arg0: InventoryItem) -> None: ...

  def setClothingItem_Feet(self, arg0: InventoryItem) -> None: ...

  def setClothingItem_Hands(self, arg0: InventoryItem) -> None: ...

  def setClothingItem_Head(self, arg0: InventoryItem) -> None: ...

  def setClothingItem_Legs(self, arg0: InventoryItem) -> None: ...

  def setClothingItem_Torso(self, arg0: InventoryItem) -> None: ...

  def setDeathDragDown(self, arg0: bool) -> None: ...

  def setDebugMonitor(self, monitor: AnimatorDebugMonitor) -> None: ...

  def setDescriptor(self, descriptor: SurvivorDesc) -> None: ...

  def setDir(self, directions: IsoDirections) -> None: ...

  def setFarmingCheat(self, b: bool) -> None: ...

  def setFemale(self, isFemale: bool) -> None: ...

  def setForceWakeUpTime(self, ForceWakeUpTime: float) -> None: ...

  def setGodMod(self, b: bool) -> None: ...

  @overload
  def setHaloNote(self, str: str) -> None: ...

  @overload
  def setHaloNote(self, str: str, dispTime: float) -> None: ...

  @overload
  def setHaloNote(self, str: str, r: int, g: int, b: int, dispTime: float) -> None: ...

  def setHealth(self, arg0: float) -> None: ...

  def setHealthCheat(self, healthCheat: bool) -> None: ...

  def setInvisible(self, b: bool) -> None: ...

  def setLastHitCount(self, arg0: int) -> None: ...

  def setLastHourSleeped(self, arg0: int) -> None: ...

  def setMechanicsCheat(self, mechanicsCheat: bool) -> None: ...

  def setMeleeDelay(self, delay: float) -> None: ...

  def setMovablesCheat(self, b: bool) -> None: ...

  def setOnDeathDone(self, arg0: bool) -> None: ...

  def setOnKillDone(self, arg0: bool) -> None: ...

  def setPath2(self, path: PolygonalMap2.Path) -> None: ...

  def setPerkLevelDebug(self, perks: PerkFactory.Perk, level: int) -> None: ...

  def setPlayingDeathSound(self, arg0: bool) -> None: ...

  def setPrimaryHandItem(self, leftHandItem: InventoryItem) -> None: ...

  def setRangedWeaponEmpty(self, val: bool) -> None: ...

  def setReading(self, isReading: bool) -> None: ...

  def setRecoilDelay(self, recoilDelay: float) -> None: ...

  def setReduceInfectionPower(self, arg0: float) -> None: ...

  def setSafety(self, safety: Safety) -> None: ...

  def setSecondaryHandItem(self, rightHandItem: InventoryItem) -> None: ...

  def setShowAdminTag(self, showAdminTag: bool) -> None: ...

  def setSleepingTabletEffect(self, arg0: float) -> None: ...

  def setSpeakColourInfo(self, info: ColorInfo) -> None: ...

  def setTemperature(self, arg0: float) -> None: ...

  def setTimeOfSleep(self, arg0: float) -> None: ...

  def setTimeSinceLastSmoke(self, timeSinceLastSmoke: float) -> None: ...

  def setTimedActionInstantCheat(self, b: bool) -> None: ...

  def setUnlimitedCarry(self, unlimitedCarry: bool) -> None: ...

  def setVehicle(self, v: BaseVehicle) -> None: ...

  def setWornItem(self, arg0: str, arg1: InventoryItem) -> None: ...

  def setWornItems(self, arg0: WornItems) -> None: ...

  def smashCarWindow(self, part: VehiclePart) -> None: ...

  def smashWindow(self, w: IsoWindow) -> None: ...

  def stopOrTriggerSound(self, eventInstance: int) -> None: ...


class ILuaGameCharacterAttachedItems:

  def clearAttachedItems(self) -> None: ...

  def getAttachedItem(self, location: str) -> InventoryItem: ...

  def getAttachedItems(self) -> AttachedItems: ...

  def getAttachedLocationGroup(self) -> AttachedLocationGroup: ...

  def removeAttachedItem(self, item: InventoryItem) -> None: ...

  def setAttachedItem(self, location: str, item: InventoryItem) -> None: ...

  def setAttachedItems(self, other: AttachedItems) -> None: ...


class ILuaGameCharacterClothing:

  def Dressup(self, desc: SurvivorDesc) -> None: ...

  def clearWornItems(self) -> None: ...

  def dressInNamedOutfit(self, outfitName: str) -> None: ...

  def dressInPersistentOutfit(self, outfitName: str) -> None: ...

  def dressInPersistentOutfitID(self, outfitID: int) -> None: ...

  def getBodyLocationGroup(self) -> BodyLocationGroup: ...

  def getOutfitName(self) -> str: ...

  def getWornItem(self, location: str) -> InventoryItem: ...

  def getWornItems(self) -> WornItems: ...

  def removeWornItem(self, item: InventoryItem) -> None: ...

  def setClothingItem_Back(self, item: InventoryItem) -> None: ...

  def setClothingItem_Feet(self, item: InventoryItem) -> None: ...

  def setClothingItem_Hands(self, item: InventoryItem) -> None: ...

  def setClothingItem_Head(self, item: InventoryItem) -> None: ...

  def setClothingItem_Legs(self, item: InventoryItem) -> None: ...

  def setClothingItem_Torso(self, item: InventoryItem) -> None: ...

  def setWornItem(self, location: str, item: InventoryItem) -> None: ...

  def setWornItems(self, other: WornItems) -> None: ...


class ILuaGameCharacterDamage:

  @overload
  def Hit(self, weapon: HandWeapon, wielder: IsoGameCharacter, damageSplit: float, bIgnoreDamage: bool, modDelta: float) -> float: ...

  @overload
  def Hit(self, vehicle: BaseVehicle, speed: float, isHitFromBehind: bool, hitDirX: float, hitDirY: float) -> float: ...

  @overload
  def Hit(self, weapon: HandWeapon, wielder: IsoGameCharacter, damageSplit: float, bIgnoreDamage: bool, modDelta: float, bRemote: bool) -> float: ...

  def StopBurning(self) -> None: ...

  def addBlood(self, part: BloodBodyPartType, scratched: bool, bitten: bool, allLayers: bool) -> None: ...

  def addHole(self, part: BloodBodyPartType) -> bool: ...

  def getBodyDamage(self) -> BodyDamage: ...

  def getBodyDamageRemote(self) -> BodyDamage: ...

  def getBumpType(self) -> str: ...

  def getHealth(self) -> float: ...

  def getLastHitCount(self) -> int: ...

  def isBumped(self) -> bool: ...

  def isDeathDragDown(self) -> bool: ...

  def isOnDeathDone(self) -> bool: ...

  def isOnFire(self) -> bool: ...

  def isOnKillDone(self) -> bool: ...

  def isPlayingDeathSound(self) -> bool: ...

  def sendStopBurning(self) -> None: ...

  def setDeathDragDown(self, dragDown: bool) -> None: ...

  def setHealth(self, Health: float) -> None: ...

  def setLastHitCount(self, hitCount: int) -> None: ...

  def setOnDeathDone(self, done: bool) -> None: ...

  def setOnKillDone(self, done: bool) -> None: ...

  def setPlayingDeathSound(self, playing: bool) -> None: ...


class ILuaGameCharacterHealth:

  @overload
  def Eat(self, info: InventoryItem) -> bool: ...

  @overload
  def Eat(self, info: InventoryItem, percentage: float) -> bool: ...

  def getFatigueMod(self) -> float: ...

  def getLastHourSleeped(self) -> int: ...

  def getReduceInfectionPower(self) -> float: ...

  def getSleepingTabletEffect(self) -> float: ...

  def getTemperature(self) -> float: ...

  def setLastHourSleeped(self, lastHourSleeped: int) -> None: ...

  def setReduceInfectionPower(self, reduceInfectionPower: float) -> None: ...

  def setSleepingTabletEffect(self, SleepingTabletEffect: float) -> None: ...

  def setTemperature(self, t: float) -> None: ...

  def setTimeOfSleep(self, timeOfSleep: float) -> None: ...


class ILuaVariableSource:

  def ClearVariable(self, key: str) -> None: ...

  def GetVariable(self, key: str) -> str: ...

  def SetVariable(self, key: str, value: str) -> None: ...


class IsoDummyCameraCharacter(IsoGameCharacter):

  def update(self) -> None: ...

  def __init__(self, x: float, y: float, z: float): ...


class IsoGameCharacter(IsoMovingObject):

  RENDER_OFFSET_X: int

  RENDER_OFFSET_Y: int

  s_maxPossibleTwist: float

  def Anger(self, amount: int) -> None: ...

  def ApplyInBedOffset(self, apply: bool) -> None: ...

  def BetaAntiDepress(self, delta: float) -> None: ...

  def BetaBlockers(self, delta: float) -> None: ...

  def CacheEquipped(self) -> None: ...

  @overload
  def Callout(self) -> None: ...

  @overload
  def Callout(self) -> None: ...

  @overload
  def Callout(self, doAnim: bool) -> None: ...

  @overload
  def CanAttack(self) -> bool: ...

  @overload
  def CanAttack(self) -> bool: ...

  def CanSee(self, obj: IsoMovingObject) -> bool: ...

  def ClearEquippedCache(self) -> None: ...

  @overload
  def ClearVariable(self, key: str) -> None: ...

  @overload
  def ClearVariable(self, key: str) -> None: ...

  def DirectionFromVector(self, vecA: Vector2) -> None: ...

  @overload
  def DoDeath(self, weapon: HandWeapon, wielder: IsoGameCharacter) -> None: ...

  @overload
  def DoDeath(self, weapon: HandWeapon, wielder: IsoGameCharacter, bGory: bool) -> None: ...

  def DoFloorSplat(self, sq: IsoGridSquare, id: str, bFlip: bool, offZ: float, alpha: float) -> None: ...

  @overload
  def DoFootstepSound(self, volume: float) -> None: ...

  @overload
  def DoFootstepSound(self, type: str) -> None: ...

  def DoSneezeText(self) -> None: ...

  def DoSwingCollisionBoneCheck(self, zombie: IsoGameCharacter, bone: int, tempoLengthTest: float) -> bool: ...

  def DrawSneezeText(self) -> None: ...

  def Dressup(self, desc: SurvivorDesc) -> None: ...

  @overload
  def Eat(self, info: InventoryItem) -> bool: ...

  @overload
  def Eat(self, info: InventoryItem, percentage: float) -> bool: ...

  def FireCheck(self) -> None: ...

  @overload
  def GetAnimSetName(self) -> str: ...

  @overload
  def GetAnimSetName(self) -> str: ...

  def GetPrimaryEquippedCache(self) -> InventoryItem: ...

  def GetSecondaryEquippedCache(self) -> InventoryItem: ...

  @overload
  def GetVariable(self, key: str) -> str: ...

  @overload
  def GetVariable(self, key: str) -> str: ...

  def HasItem(self, string: str) -> bool: ...

  @overload
  def HasTrait(self, trait: str) -> bool: ...

  @overload
  def HasTrait(self, trait: str) -> bool: ...

  @overload
  def Hit(self, weapon: HandWeapon, wielder: IsoGameCharacter, damageSplit: float, bIgnoreDamage: bool, modDelta: float) -> float: ...

  @overload
  def Hit(self, vehicle: BaseVehicle, speed: float, isHitFromBehind: bool, hitDirX: float, hitDirY: float) -> float: ...

  @overload
  def Hit(self, weapon: HandWeapon, wielder: IsoGameCharacter, damageSplit: float, bIgnoreDamage: bool, modDelta: float, bRemote: bool) -> float: ...

  def InitSpriteParts(self, desc: SurvivorDesc) -> None: ...

  @overload
  def IsAttackRange(self, x: float, y: float, z: float) -> bool: ...

  @overload
  def IsAttackRange(self, we: HandWeapon, obj: IsoMovingObject, bonePos: Vector3, extraRange: bool) -> bool: ...

  @overload
  def IsSpeaking(self) -> bool: ...

  @overload
  def IsSpeaking(self) -> bool: ...

  @overload
  def IsSpeaking(self) -> bool: ...

  def Kill(self, killer: IsoGameCharacter) -> None: ...

  @overload
  def LevelPerk(self, perk: PerkFactory.Perk) -> None: ...

  @overload
  def LevelPerk(self, perk: PerkFactory.Perk) -> None: ...

  @overload
  def LevelPerk(self, perk: PerkFactory.Perk, removePick: bool) -> None: ...

  @overload
  def LevelPerk(self, perk: PerkFactory.Perk, removePick: bool) -> None: ...

  @overload
  def LoseLevel(self, perk: PerkFactory.Perk) -> None: ...

  @overload
  def LoseLevel(self, perk: PerkFactory.Perk) -> None: ...

  def MoveForward(self, dist: float, x: float, y: float, soundDelta: float) -> None: ...

  def NPCGetAiming(self) -> bool: ...

  def NPCGetRunning(self) -> bool: ...

  def NPCSetAiming(self, isAiming: bool) -> None: ...

  def NPCSetAttack(self, newvalue: bool) -> None: ...

  def NPCSetJustMoved(self, newvalue: bool) -> None: ...

  def NPCSetMelee(self, newvalue: bool) -> None: ...

  def NPCSetRunning(self, newvalue: bool) -> None: ...

  @overload
  def OnAnimEvent(self, sender: AnimLayer, event: AnimEvent) -> None: ...

  @overload
  def OnAnimEvent(self, sender: AnimLayer, event: AnimEvent) -> None: ...

  def OnDeath(self) -> None: ...

  def PainMeds(self, delta: float) -> None: ...

  @overload
  def PlayAnim(self, string: str) -> None: ...

  @overload
  def PlayAnim(self, string: str) -> None: ...

  @overload
  def PlayAnimUnlooped(self, string: str) -> None: ...

  @overload
  def PlayAnimUnlooped(self, string: str) -> None: ...

  @overload
  def PlayAnimWithSpeed(self, string: str, framesSpeedPerFrame: float) -> None: ...

  @overload
  def PlayAnimWithSpeed(self, string: str, framesSpeedPerFrame: float) -> None: ...

  def QueueAction(self, act: BaseAction) -> None: ...

  @overload
  def ReadLiterature(self, literature: Literature) -> None: ...

  @overload
  def ReadLiterature(self, literature: Literature) -> None: ...

  def ReduceHealthWhenBurning(self) -> None: ...

  @overload
  def Say(self, line: str) -> None: ...

  @overload
  def Say(self, line: str) -> None: ...

  @overload
  def Say(self, line: str) -> None: ...

  @overload
  def Say(self, line: str, r: float, g: float, b: float, font: UIFont, baseRange: float, customTag: str) -> None: ...

  @overload
  def Say(self, line: str, r: float, g: float, b: float, font: UIFont, baseRange: float, customTag: str) -> None: ...

  @overload
  def SayDebug(self, text: str) -> None: ...

  @overload
  def SayDebug(self, n: int, text: str) -> None: ...

  def SayRadio(self, line: str, r: float, g: float, b: float, font: UIFont, baseRange: float, channel: int, customTag: str) -> None: ...

  def SayShout(self, line: str) -> None: ...

  def SayWhisper(self, line: str) -> None: ...

  def Seen(self, SeenList: Stack[IsoMovingObject]) -> None: ...

  def SetOnFire(self) -> None: ...

  @overload
  def SetVariable(self, key: str, value: str) -> None: ...

  @overload
  def SetVariable(self, key: str, value: str) -> None: ...

  def SleepingTablet(self, SleepingTabletDelta: float) -> None: ...

  def SpreadFire(self) -> None: ...

  def SpreadFireMP(self) -> None: ...

  @overload
  def StartAction(self, act: BaseAction) -> None: ...

  @overload
  def StartAction(self, act: BaseAction) -> None: ...

  @overload
  def StartTimedActionAnim(self, event: str) -> None: ...

  @overload
  def StartTimedActionAnim(self, event: str) -> None: ...

  @overload
  def StartTimedActionAnim(self, event: str, type: str) -> None: ...

  @overload
  def StartTimedActionAnim(self, event: str, type: str) -> None: ...

  @overload
  def StopAllActionQueue(self) -> None: ...

  @overload
  def StopAllActionQueue(self) -> None: ...

  def StopAllActionQueueAiming(self) -> None: ...

  def StopAllActionQueueRunning(self) -> None: ...

  def StopAllActionQueueWalking(self) -> None: ...

  def StopBurning(self) -> None: ...

  @overload
  def StopTimedActionAnim(self) -> None: ...

  @overload
  def StopTimedActionAnim(self) -> None: ...

  def Throw(self, weapon: HandWeapon) -> None: ...

  @overload
  def actionStateChanged(self, sender: ActionContext) -> None: ...

  @overload
  def actionStateChanged(self, sender: ActionContext) -> None: ...

  def addBasicPatch(self, part: BloodBodyPartType) -> None: ...

  @overload
  def addBlood(self, speed: float) -> None: ...

  @overload
  def addBlood(self, part: BloodBodyPartType, scratched: bool, bitten: bool, allLayers: bool) -> None: ...

  def addDirt(self, part: BloodBodyPartType, nbr: Integer, allLayers: bool) -> None: ...

  @overload
  def addHole(self, part: BloodBodyPartType) -> bool: ...

  @overload
  def addHole(self, part: BloodBodyPartType, allLayers: bool) -> bool: ...

  def addHoleFromZombieAttacks(self, part: BloodBodyPartType, scratch: bool) -> bool: ...

  @overload
  def addKnownMediaLine(self, guid: str) -> None: ...

  @overload
  def addKnownMediaLine(self, guid: str) -> None: ...

  @overload
  def addLineChatElement(self, line: str) -> None: ...

  @overload
  def addLineChatElement(self, line: str, r: float, g: float, b: float) -> None: ...

  @overload
  def addLineChatElement(self, line: str, r: float, g: float, b: float, font: UIFont, baseRange: float, customTag: str) -> None: ...

  @overload
  def addLineChatElement(self, line: str, r: float, g: float, b: float, font: UIFont, baseRange: float, customTag: str, bbcode: bool, img: bool, icons: bool, colors: bool, fonts: bool, equalizeHeights: bool) -> None: ...

  def addVisualDamage(self, itemType: str) -> None: ...

  @overload
  def addWorldSoundUnlessInvisible(self, radius: int, volume: int, bStressHumans: bool) -> None: ...

  @overload
  def addWorldSoundUnlessInvisible(self, radius: int, volume: int, bStressHumans: bool) -> None: ...

  def applyTraits(self, luaTraits: ArrayList[str]) -> None: ...

  def attackFromWindowsLunge(self, zombie: IsoZombie) -> None: ...

  def autoDrink(self) -> None: ...

  def avoidDamage(self) -> bool: ...

  def becomeCorpse(self) -> None: ...

  def burnCorpse(self, corpse: IsoDeadBody) -> None: ...

  @overload
  def calcHitDir(self, out: Vector2) -> None: ...

  @overload
  def calcHitDir(self, wielder: IsoGameCharacter, weapon: HandWeapon, out: Vector2) -> Float: ...

  def calculateBaseSpeed(self) -> float: ...

  @overload
  def canClimbDownSheetRope(self, sq: IsoGridSquare) -> bool: ...

  @overload
  def canClimbDownSheetRope(self, sq: IsoGridSquare) -> bool: ...

  @overload
  def canClimbDownSheetRopeInCurrentSquare(self) -> bool: ...

  @overload
  def canClimbDownSheetRopeInCurrentSquare(self) -> bool: ...

  @overload
  def canClimbSheetRope(self, sq: IsoGridSquare) -> bool: ...

  @overload
  def canClimbSheetRope(self, sq: IsoGridSquare) -> bool: ...

  def canSprint(self) -> bool: ...

  @overload
  def changeState(self, state: State) -> None: ...

  @overload
  def changeState(self, state: State) -> None: ...

  def checkIsNearWall(self) -> float: ...

  def checkUpdateModelTextures(self) -> None: ...

  def clearAttachedItems(self) -> None: ...

  @overload
  def clearKnownMediaLines(self) -> None: ...

  @overload
  def clearKnownMediaLines(self) -> None: ...

  @overload
  def clearVariable(self, key: str) -> None: ...

  @overload
  def clearVariable(self, key: str) -> None: ...

  @overload
  def clearVariables(self) -> None: ...

  @overload
  def clearVariables(self) -> None: ...

  def clearWornItems(self) -> None: ...

  @overload
  def climbDownSheetRope(self) -> None: ...

  @overload
  def climbDownSheetRope(self) -> None: ...

  @overload
  def climbOverFence(self, dir: IsoDirections) -> None: ...

  @overload
  def climbOverFence(self, dir: IsoDirections) -> None: ...

  @overload
  def climbSheetRope(self) -> None: ...

  @overload
  def climbSheetRope(self) -> None: ...

  @overload
  def climbThroughWindow(self, w: IsoThumpable) -> None: ...

  @overload
  def climbThroughWindow(self, w: IsoThumpable) -> None: ...

  @overload
  def climbThroughWindow(self, w: IsoWindow) -> None: ...

  @overload
  def climbThroughWindow(self, w: IsoWindow) -> None: ...

  @overload
  def climbThroughWindow(self, w: IsoThumpable, startingFrame: Integer) -> None: ...

  @overload
  def climbThroughWindow(self, w: IsoThumpable, startingFrame: Integer) -> None: ...

  @overload
  def climbThroughWindow(self, w: IsoWindow, startingFrame: Integer) -> None: ...

  @overload
  def climbThroughWindow(self, w: IsoWindow, startingFrame: Integer) -> None: ...

  @overload
  def climbThroughWindowFrame(self, obj: IsoObject) -> None: ...

  @overload
  def climbThroughWindowFrame(self, obj: IsoObject) -> None: ...

  @overload
  def closeWindow(self, w: IsoWindow) -> None: ...

  @overload
  def closeWindow(self, w: IsoWindow) -> None: ...

  @overload
  def clothingItemChanged(self, itemGuid: str) -> None: ...

  @overload
  def clothingItemChanged(self, itemGuid: str) -> None: ...

  def compareMovePriority(self, other: IsoGameCharacter) -> int: ...

  def containsVariable(self, name: str) -> bool: ...

  def createKeyRing(self) -> None: ...

  def dbgGetAnimTrack(self, layerIdx: int, trackIdx: int) -> AnimationTrack: ...

  def dbgGetAnimTrackName(self, layerIdx: int, trackIdx: int) -> str: ...

  def dbgGetAnimTrackTime(self, layerIdx: int, trackIdx: int) -> float: ...

  def dbgGetAnimTrackWeight(self, layerIdx: int, trackIdx: int) -> float: ...

  def die(self) -> None: ...

  def doHitByVehicle(self, baseVehicle: BaseVehicle, hitVars: BaseVehicle.HitVars) -> None: ...

  def drawDebugTextBelow(self, text: str) -> None: ...

  def drawDirectionLine(self, dir: Vector2, length: float, r: float, g: float, b: float) -> None: ...

  def dressInClothingItem(self, itemGUID: str) -> None: ...

  def dressInNamedOutfit(self, outfitName: str) -> None: ...

  def dressInPersistentOutfit(self, outfitName: str) -> None: ...

  def dressInPersistentOutfitID(self, outfitID: int) -> None: ...

  def dressInRandomOutfit(self) -> None: ...

  def dropHandItems(self) -> None: ...

  def dropHeavyItems(self) -> None: ...

  def endPlaybackGameVariables(self, playbackVars: AnimationVariableSource) -> None: ...

  def enterVehicle(self, v: BaseVehicle, seat: int, offset: Vector3f) -> None: ...

  def exert(self, f: float) -> None: ...

  def faceLocation(self, x: float, y: float) -> None: ...

  def faceLocationF(self, x: float, y: float) -> None: ...

  @overload
  def facePosition(self, x: int, y: int) -> None: ...

  @overload
  def facePosition(self, x: int, y: int) -> None: ...

  @overload
  def faceThisObject(self, object: IsoObject) -> None: ...

  @overload
  def faceThisObject(self, object: IsoObject) -> None: ...

  @overload
  def faceThisObjectAlt(self, object: IsoObject) -> None: ...

  @overload
  def faceThisObjectAlt(self, object: IsoObject) -> None: ...

  def fallenOnKnees(self) -> None: ...

  def forceAwake(self) -> None: ...

  def getAbsoluteExcessTwist(self) -> float: ...

  @overload
  def getActionContext(self) -> ActionContext: ...

  @overload
  def getActionContext(self) -> ActionContext: ...

  def getActionStateName(self) -> str: ...

  def getActiveLightItems(self, items: ArrayList[InventoryItem]) -> ArrayList[InventoryItem]: ...

  @overload
  def getAdvancedAnimator(self) -> AdvancedAnimator: ...

  @overload
  def getAdvancedAnimator(self) -> AdvancedAnimator: ...

  def getAge(self) -> int: ...

  @overload
  def getAlreadyReadPages(self, fullType: str) -> int: ...

  @overload
  def getAlreadyReadPages(self, fullType: str) -> int: ...

  def getAnimAngle(self) -> float: ...

  def getAnimAngleRadians(self) -> float: ...

  def getAnimAngleStepDelta(self) -> float: ...

  def getAnimAngleTwistDelta(self) -> float: ...

  def getAnimVector(self, out: Vector2) -> Vector2: ...

  def getAnimationDebug(self) -> str: ...

  @overload
  def getAnimationPlayer(self) -> AnimationPlayer: ...

  @overload
  def getAnimationPlayer(self) -> AnimationPlayer: ...

  @overload
  def getAnimationPlayerRecorder(self) -> AnimationPlayerRecorder: ...

  @overload
  def getAnimationPlayerRecorder(self) -> AnimationPlayerRecorder: ...

  def getAnimationStateName(self) -> str: ...

  def getAttachedItem(self, location: str) -> InventoryItem: ...

  def getAttachedItems(self) -> AttachedItems: ...

  def getAttachedLocationGroup(self) -> AttachedLocationGroup: ...

  def getAttackTargetSquare(self) -> IsoGridSquare: ...

  def getAttackedBy(self) -> IsoGameCharacter: ...

  def getAutoWalkDirection(self) -> Vector2: ...

  def getBarricadeStrengthMod(self) -> float: ...

  def getBarricadeTimeMod(self) -> float: ...

  @overload
  def getBed(self) -> IsoObject: ...

  @overload
  def getBed(self) -> IsoObject: ...

  @overload
  def getBedType(self) -> str: ...

  @overload
  def getBedType(self) -> str: ...

  def getBeenMovingFor(self) -> float: ...

  def getBeenSprintingFor(self) -> float: ...

  def getBetaDelta(self) -> float: ...

  def getBetaEffect(self) -> float: ...

  def getBloodImpactX(self) -> float: ...

  def getBloodImpactY(self) -> float: ...

  def getBloodImpactZ(self) -> float: ...

  def getBloodSplat(self) -> IsoSprite: ...

  def getBodyDamage(self) -> BodyDamage: ...

  def getBodyDamageRemote(self) -> BodyDamage: ...

  def getBodyLocationGroup(self) -> BodyLocationGroup: ...

  def getBodyPartClothingDefense(self, part: Integer, bite: bool, bullet: bool) -> float: ...

  def getBrain(self) -> GameCharacterAIBrain: ...

  def getBumpFallType(self) -> str: ...

  def getBumpType(self) -> str: ...

  def getBumpedChr(self) -> IsoGameCharacter: ...

  @overload
  def getCharacterActions(self) -> Stack[BaseAction]: ...

  @overload
  def getCharacterActions(self) -> Stack[BaseAction]: ...

  def getCharacterTraits(self) -> IsoGameCharacter.CharacterTraits: ...

  def getChatElement(self) -> ChatElement: ...

  def getChopTreeSpeed(self) -> float: ...

  def getClickSound(self) -> str: ...

  def getClothingItem_Back(self) -> InventoryItem: ...

  def getClothingItem_Feet(self) -> InventoryItem: ...

  def getClothingItem_Hands(self) -> InventoryItem: ...

  def getClothingItem_Head(self) -> InventoryItem: ...

  def getClothingItem_Legs(self) -> InventoryItem: ...

  def getClothingItem_Torso(self) -> InventoryItem: ...

  def getClothingWetness(self) -> ClothingWetness: ...

  def getCurrentActionContextStateName(self) -> str: ...

  def getCurrentBuilding(self) -> IsoBuilding: ...

  def getCurrentBuildingDef(self) -> BuildingDef: ...

  def getCurrentRoomDef(self) -> RoomDef: ...

  @overload
  def getCurrentState(self) -> State: ...

  @overload
  def getCurrentState(self) -> State: ...

  def getCurrentStateName(self) -> str: ...

  def getDangerLevels(self) -> float: ...

  @overload
  def getDebugMonitor(self) -> AnimatorDebugMonitor: ...

  @overload
  def getDebugMonitor(self) -> AnimatorDebugMonitor: ...

  def getDefaultState(self) -> State: ...

  def getDeferredAngleDelta(self) -> float: ...

  def getDeferredMovement(self, out_result: Vector2) -> Vector2: ...

  def getDeferredRotationWeight(self) -> float: ...

  def getDepressDelta(self) -> float: ...

  def getDepressEffect(self) -> float: ...

  @overload
  def getDescriptor(self) -> SurvivorDesc: ...

  @overload
  def getDescriptor(self) -> SurvivorDesc: ...

  def getDieCount(self) -> int: ...

  def getDirectionAngle(self) -> float: ...

  @overload
  def getDotWithForwardDirection(self, bonePos: Vector3) -> float: ...

  @overload
  def getDotWithForwardDirection(self, targetX: float, targetY: float) -> float: ...

  @overload
  def getEmitter(self) -> BaseCharacterSoundEmitter: ...

  @overload
  def getEmitter(self) -> BaseCharacterSoundEmitter: ...

  def getEnemyList(self) -> Stack[IsoGameCharacter]: ...

  def getEquipedRadio(self) -> Radio: ...

  def getExcessTwist(self) -> float: ...

  @overload
  def getFMODParameters(self) -> FMODParameterList: ...

  @overload
  def getFMODParameters(self) -> FMODParameterList: ...

  def getFallTime(self) -> float: ...

  def getFamiliarBuildings(self) -> Stack[IsoBuilding]: ...

  def getFatigueMod(self) -> float: ...

  def getFatiqueMultiplier(self) -> float: ...

  def getFinder(self) -> AStarPathFinderResult: ...

  def getFireKillRate(self) -> float: ...

  def getFireSpreadProbability(self) -> int: ...

  def getFollowingTarget(self) -> IsoGameCharacter: ...

  def getForceWakeUpTime(self) -> float: ...

  def getForwardDirection(self) -> Vector2: ...

  @overload
  def getFullName(self) -> str: ...

  @overload
  def getFullName(self) -> str: ...

  def getGameCharacterAIBrain(self) -> GameCharacterAIBrain: ...

  def getGameVariables(self) -> Iterable[IAnimationVariableSlot]: ...

  def getGlobalMovementMod(self, bDoNoises: bool) -> float: ...

  def getHaloTimerCount(self) -> float: ...

  @overload
  def getHammerSoundMod(self) -> float: ...

  @overload
  def getHammerSoundMod(self) -> float: ...

  def getHealth(self) -> float: ...

  def getHitChancesMod(self) -> int: ...

  def getHitReaction(self) -> str: ...

  def getHitReactionNetworkAI(self) -> HitReactionNetworkAI: ...

  def getHittingMod(self) -> float: ...

  @overload
  def getHoursSurvived(self) -> float: ...

  @overload
  def getHoursSurvived(self) -> float: ...

  def getHungerMultiplier(self) -> float: ...

  def getHurtSound(self) -> str: ...

  def getHyperthermiaMod(self) -> float: ...

  def getIgnoreMovement(self) -> bool: ...

  @overload
  def getInventory(self) -> ItemContainer: ...

  @overload
  def getInventory(self) -> ItemContainer: ...

  @overload
  def getInventoryWeight(self) -> float: ...

  @overload
  def getInventoryWeight(self) -> float: ...

  def getIsNPC(self) -> bool: ...

  @overload
  def getItemVisuals(self) -> ItemVisuals: ...

  @overload
  def getItemVisuals(self, itemVisuals: ItemVisuals) -> None: ...

  @overload
  def getKnownRecipes(self) -> List[str]: ...

  @overload
  def getKnownRecipes(self) -> List[str]: ...

  def getLastBump(self) -> int: ...

  def getLastChatMessage(self) -> ChatMessage: ...

  def getLastFallSpeed(self) -> float: ...

  def getLastHeardSound(self) -> IsoGameCharacter.Location: ...

  def getLastHitCount(self) -> int: ...

  def getLastHourSleeped(self) -> int: ...

  def getLastKnownLocation(self) -> HashMap[str, IsoGameCharacter.Location]: ...

  def getLastKnownLocationOf(self, character: str) -> IsoGameCharacter.Location: ...

  def getLastLocalEnemies(self) -> int: ...

  def getLastSpokenLine(self) -> str: ...

  def getLastZombieKills(self) -> int: ...

  def getLeaveBodyTimedown(self) -> float: ...

  def getLegsSprite(self) -> IsoSprite: ...

  def getLevelMaxForXp(self) -> int: ...

  def getLevelUpLevels(self, level: int) -> int: ...

  def getLevelUpMultiplier(self) -> float: ...

  def getLightInfo2(self) -> IsoGameCharacter.LightInfo: ...

  def getLightfootMod(self) -> float: ...

  def getLlx(self) -> float: ...

  def getLly(self) -> float: ...

  def getLlz(self) -> float: ...

  def getLocalEnemyList(self) -> Stack[IsoGameCharacter]: ...

  def getLocalGroupList(self) -> ArrayList[IsoMovingObject]: ...

  def getLocalList(self) -> ArrayList[IsoMovingObject]: ...

  def getLocalNeutralList(self) -> ArrayList[IsoMovingObject]: ...

  def getLocalRelevantEnemyList(self) -> ArrayList[IsoMovingObject]: ...

  def getLookAngleRadians(self) -> float: ...

  def getLookVector(self, vector2: Vector2) -> Vector2: ...

  def getLowDangerInVicinity(self, attempts: int, range: int) -> IsoGridSquare: ...

  def getLrx(self) -> float: ...

  def getLry(self) -> float: ...

  @overload
  def getMaintenanceMod(self) -> int: ...

  @overload
  def getMaintenanceMod(self) -> int: ...

  def getMapKnowledge(self) -> MapKnowledge: ...

  def getMaxChatLines(self) -> int: ...

  def getMaxTwist(self) -> float: ...

  @overload
  def getMaxWeight(self) -> int: ...

  @overload
  def getMaxWeight(self) -> int: ...

  def getMaxWeightBase(self) -> int: ...

  def getMeleeCombatMod(self) -> int: ...

  @overload
  def getMeleeDelay(self) -> float: ...

  @overload
  def getMeleeDelay(self) -> float: ...

  def getMetalBarricadeStrengthMod(self) -> float: ...

  def getModel(self) -> ModelInstance: ...

  @overload
  def getModelInstance(self) -> ModelInstance: ...

  @overload
  def getModelInstance(self) -> ModelInstance: ...

  def getMomentumScalar(self) -> float: ...

  @overload
  def getMoodles(self) -> Moodles: ...

  @overload
  def getMoodles(self) -> Moodles: ...

  def getMoveDelta(self) -> float: ...

  def getMoveForwardVec(self) -> Vector2: ...

  def getMoveSpeed(self) -> float: ...

  def getNearVehicle(self) -> BaseVehicle: ...

  def getNetworkCharacterAI(self) -> NetworkCharacterAI: ...

  def getNextAnimationTranslationLength(self) -> Float: ...

  def getNextWander(self) -> int: ...

  def getNimbleMod(self) -> float: ...

  def getNumSurvivorsInVicinity(self) -> int: ...

  def getOnlineID(self) -> int: ...

  def getOrCreateSleepingEventData(self) -> SleepingEventData: ...

  @overload
  def getOrCreateVariable(self, key: str) -> IAnimationVariableSlot: ...

  @overload
  def getOrCreateVariable(self, key: str) -> IAnimationVariableSlot: ...

  def getOutfitName(self) -> str: ...

  def getPacingMod(self) -> float: ...

  def getPainDelta(self) -> float: ...

  def getPainEffect(self) -> float: ...

  @overload
  def getPath2(self) -> PolygonalMap2.Path: ...

  @overload
  def getPath2(self) -> PolygonalMap2.Path: ...

  @overload
  def getPathFindBehavior2(self) -> PathFindBehavior2: ...

  @overload
  def getPathFindBehavior2(self) -> PathFindBehavior2: ...

  def getPathIndex(self) -> int: ...

  def getPathTargetX(self) -> int: ...

  def getPathTargetY(self) -> int: ...

  def getPathTargetZ(self) -> int: ...

  def getPatience(self) -> int: ...

  def getPatienceMax(self) -> int: ...

  def getPatienceMin(self) -> int: ...

  @overload
  def getPerkInfo(self, perk: PerkFactory.Perk) -> IsoGameCharacter.PerkInfo: ...

  @overload
  def getPerkInfo(self, perk: PerkFactory.Perk) -> IsoGameCharacter.PerkInfo: ...

  @overload
  def getPerkLevel(self, perks: PerkFactory.Perk) -> int: ...

  @overload
  def getPerkLevel(self, perks: PerkFactory.Perk) -> int: ...

  def getPerkList(self) -> ArrayList[IsoGameCharacter.PerkInfo]: ...

  def getPersistentOutfitID(self) -> int: ...

  def getPreviousActionContextStateName(self) -> str: ...

  def getPreviousStateName(self) -> str: ...

  @overload
  def getPrimaryHandItem(self) -> InventoryItem: ...

  @overload
  def getPrimaryHandItem(self) -> InventoryItem: ...

  def getPrimaryHandType(self) -> str: ...

  def getRandomDefaultOutfit(self) -> Outfit: ...

  def getReadyModelData(self) -> ArrayList[ModelInstance]: ...

  def getReanimAnimDelay(self) -> int: ...

  def getReanimAnimFrame(self) -> int: ...

  def getReanimateTimer(self) -> float: ...

  @overload
  def getRecoilDelay(self) -> float: ...

  @overload
  def getRecoilDelay(self) -> float: ...

  def getRecoveryMod(self) -> float: ...

  def getReduceInfectionPower(self) -> float: ...

  def getRemoteID(self) -> int: ...

  def getRunSpeedModifier(self) -> float: ...

  @overload
  def getSafety(self) -> Safety: ...

  @overload
  def getSafety(self) -> Safety: ...

  @overload
  def getSayLine(self) -> str: ...

  @overload
  def getSayLine(self) -> str: ...

  @overload
  def getSecondaryHandItem(self) -> InventoryItem: ...

  @overload
  def getSecondaryHandItem(self) -> InventoryItem: ...

  def getSecondaryHandType(self) -> str: ...

  def getShoulderTwist(self) -> float: ...

  def getShovingMod(self) -> float: ...

  def getSleepingTabletDelta(self) -> float: ...

  def getSleepingTabletEffect(self) -> float: ...

  def getSlowFactor(self) -> float: ...

  def getSlowTimer(self) -> float: ...

  def getSneakSpotMod(self) -> float: ...

  def getSpeakColour(self) -> Color: ...

  def getSpeakTime(self) -> float: ...

  def getSpeedMod(self) -> float: ...

  def getSprintMod(self) -> float: ...

  @overload
  def getSpriteDef(self) -> IsoSpriteInstance: ...

  @overload
  def getSpriteDef(self) -> IsoSpriteInstance: ...

  def getSquare(self) -> IsoGridSquare: ...

  def getStaggerTimeMod(self) -> float: ...

  def getStateMachine(self) -> StateMachine: ...

  def getStateMachineParams(self, state: State) -> HashMap[object, object]: ...

  @overload
  def getStats(self) -> Stats: ...

  @overload
  def getStats(self) -> Stats: ...

  def getSurroundingAttackingZombies(self) -> int: ...

  def getSurvivorKills(self) -> int: ...

  @overload
  def getTalkerType(self) -> str: ...

  @overload
  def getTalkerType(self) -> str: ...

  def getTargetTwist(self) -> float: ...

  def getTeleport(self) -> NetworkTeleport: ...

  def getTemperature(self) -> float: ...

  def getTextureCreator(self) -> ModelInstanceTextureCreator: ...

  def getThirstMultiplier(self) -> float: ...

  def getThreatLevel(self) -> int: ...

  @overload
  def getTimeSinceLastSmoke(self) -> float: ...

  @overload
  def getTimeSinceLastSmoke(self) -> float: ...

  def getTimeThumping(self) -> int: ...

  def getTimedActionTimeModifier(self) -> float: ...

  def getTorchStrength(self) -> float: ...

  def getTotalBlood(self) -> float: ...

  @overload
  def getTraits(self) -> TraitCollection: ...

  @overload
  def getTraits(self) -> TraitCollection: ...

  def getTurnDelta(self) -> float: ...

  def getTwist(self) -> float: ...

  @overload
  def getUID(self) -> str: ...

  @overload
  def getUID(self) -> str: ...

  def getUseHandWeapon(self) -> HandWeapon: ...

  def getUsedItemsOn(self) -> Stack[str]: ...

  def getUserNameHeight(self) -> int: ...

  @overload
  def getVariable(self, key: str) -> IAnimationVariableSlot: ...

  @overload
  def getVariable(self, handle: AnimationVariableHandle) -> IAnimationVariableSlot: ...

  @overload
  def getVariableBoolean(self, name: str) -> bool: ...

  @overload
  def getVariableBoolean(self, key: str, defaultVal: bool) -> bool: ...

  def getVariableFloat(self, name: str, defaultVal: float) -> float: ...

  def getVariableString(self, name: str) -> str: ...

  @overload
  def getVehicle(self) -> BaseVehicle: ...

  @overload
  def getVehicle(self) -> BaseVehicle: ...

  def getVeryCloseEnemyList(self) -> ArrayList[IsoMovingObject]: ...

  @overload
  def getVisual(self) -> BaseVisual: ...

  @overload
  def getVisual(self) -> BaseVisual: ...

  def getWaterSource(self, items: ArrayList[InventoryItem]) -> InventoryItem: ...

  def getWeaponLevel(self) -> int: ...

  def getWeightMod(self) -> float: ...

  @overload
  def getWeldingSoundMod(self) -> float: ...

  @overload
  def getWeldingSoundMod(self) -> float: ...

  def getWornItem(self, location: str) -> InventoryItem: ...

  def getWornItems(self) -> WornItems: ...

  def getX(self) -> float: ...

  @overload
  def getXp(self) -> IsoGameCharacter.XP: ...

  @overload
  def getXp(self) -> IsoGameCharacter.XP: ...

  @overload
  def getXpForLevel(self, level: int) -> int: ...

  @overload
  def getXpForLevel(self, level: int) -> int: ...

  def getY(self) -> float: ...

  def getZ(self) -> float: ...

  @overload
  def getZombieKills(self) -> int: ...

  @overload
  def getZombieKills(self) -> int: ...

  def hasActiveModel(self) -> bool: ...

  def hasAnimationPlayer(self) -> bool: ...

  @overload
  def hasEquipped(self, itemType: str) -> bool: ...

  @overload
  def hasEquipped(self, itemType: str) -> bool: ...

  @overload
  def hasEquippedTag(self, tag: str) -> bool: ...

  @overload
  def hasEquippedTag(self, tag: str) -> bool: ...

  def hasFootInjury(self) -> bool: ...

  def hasHitReaction(self) -> bool: ...

  @overload
  def hasItems(self, type: str, count: int) -> bool: ...

  @overload
  def hasItems(self, type: str, count: int) -> bool: ...

  def hasPath(self) -> bool: ...

  def hasTimedActions(self) -> bool: ...

  @overload
  def helmetFall(self, hitHead: bool) -> bool: ...

  @overload
  def helmetFall(self, hitHead: bool, forcedItem: str) -> bool: ...

  def hitConsequences(self, weapon: HandWeapon, wielder: IsoGameCharacter, bIgnoreDamage: bool, damage: float, bRemote: bool) -> None: ...

  def initAttachedItems(self, groupName: str) -> None: ...

  def initLightInfo2(self) -> IsoGameCharacter.LightInfo: ...

  @overload
  def initSpritePartsEmpty(self) -> None: ...

  @overload
  def initSpritePartsEmpty(self) -> None: ...

  def initWornItems(self, bodyLocationGroupName: str) -> None: ...

  @overload
  def isAboveTopOfStairs(self) -> bool: ...

  @overload
  def isAboveTopOfStairs(self) -> bool: ...

  def isAimAtFloor(self) -> bool: ...

  @overload
  def isAiming(self) -> bool: ...

  @overload
  def isAiming(self) -> bool: ...

  def isAlive(self) -> bool: ...

  def isAllowConversation(self) -> bool: ...

  def isAnimForecasted(self) -> bool: ...

  @overload
  def isAnimationRecorderActive(self) -> bool: ...

  @overload
  def isAnimationRecorderActive(self) -> bool: ...

  @overload
  def isAsleep(self) -> bool: ...

  @overload
  def isAsleep(self) -> bool: ...

  @overload
  def isAttachedItem(self, item: InventoryItem) -> bool: ...

  @overload
  def isAttachedItem(self, item: InventoryItem) -> bool: ...

  def isAttackAnim(self) -> bool: ...

  def isAttackWasSuperAttack(self) -> bool: ...

  def isAttacking(self) -> bool: ...

  def isAutoWalk(self) -> bool: ...

  def isBehaviourMoving(self) -> bool: ...

  def isBehind(self, chr: IsoGameCharacter) -> bool: ...

  def isBeingSteppedOn(self) -> bool: ...

  @overload
  def isBuildCheat(self) -> bool: ...

  @overload
  def isBuildCheat(self) -> bool: ...

  def isBumpDone(self) -> bool: ...

  def isBumpFall(self) -> bool: ...

  def isBumpStaggered(self) -> bool: ...

  def isBumped(self) -> bool: ...

  def isCanShout(self) -> bool: ...

  def isClimbing(self) -> bool: ...

  def isClimbingThroughWindow(self, window: IsoWindow) -> bool: ...

  def isClosingWindow(self, window: IsoWindow) -> bool: ...

  def isCriticalHit(self) -> bool: ...

  @overload
  def isCurrentState(self, state: State) -> bool: ...

  @overload
  def isCurrentState(self, state: State) -> bool: ...

  def isDead(self) -> bool: ...

  def isDeathDragDown(self) -> bool: ...

  def isDoDeathSound(self) -> bool: ...

  def isDoingActionThatCanBeCancelled(self) -> bool: ...

  @overload
  def isDriving(self) -> bool: ...

  @overload
  def isDriving(self) -> bool: ...

  @overload
  def isEquipped(self, item: InventoryItem) -> bool: ...

  @overload
  def isEquipped(self, item: InventoryItem) -> bool: ...

  @overload
  def isEquippedClothing(self, item: InventoryItem) -> bool: ...

  @overload
  def isEquippedClothing(self, item: InventoryItem) -> bool: ...

  def isFacingLocation(self, x: float, y: float, dot: float) -> bool: ...

  def isFacingObject(self, object: IsoObject, dot: float) -> bool: ...

  def isFallOnFront(self) -> bool: ...

  @overload
  def isFarmingCheat(self) -> bool: ...

  @overload
  def isFarmingCheat(self) -> bool: ...

  @overload
  def isFemale(self) -> bool: ...

  @overload
  def isFemale(self) -> bool: ...

  def isForceShove(self) -> bool: ...

  @overload
  def isGodMod(self) -> bool: ...

  @overload
  def isGodMod(self) -> bool: ...

  @overload
  def isHandItem(self, item: InventoryItem) -> bool: ...

  @overload
  def isHandItem(self, item: InventoryItem) -> bool: ...

  @overload
  def isHealthCheat(self) -> bool: ...

  @overload
  def isHealthCheat(self) -> bool: ...

  def isHeavyItem(self, item: InventoryItem) -> bool: ...

  def isHideWeaponModel(self) -> bool: ...

  def isHitFromBehind(self) -> bool: ...

  def isIgnoreMovementForDirection(self) -> bool: ...

  def isIgnoreStaggerBack(self) -> bool: ...

  @overload
  def isInARoom(self) -> bool: ...

  @overload
  def isInARoom(self) -> bool: ...

  def isInTrees(self) -> bool: ...

  def isInTrees2(self, ignoreBush: bool) -> bool: ...

  def isInTreesNoBush(self) -> bool: ...

  def isInvincible(self) -> bool: ...

  @overload
  def isInvisible(self) -> bool: ...

  @overload
  def isInvisible(self) -> bool: ...

  @overload
  def isItemInBothHands(self, item: InventoryItem) -> bool: ...

  @overload
  def isItemInBothHands(self, item: InventoryItem) -> bool: ...

  def isKnockedDown(self) -> bool: ...

  @overload
  def isKnownMediaLine(self, guid: str) -> bool: ...

  @overload
  def isKnownMediaLine(self, guid: str) -> bool: ...

  @overload
  def isKnownPoison(self, item: InventoryItem) -> bool: ...

  @overload
  def isKnownPoison(self, item: InventoryItem) -> bool: ...

  def isLastCollidedN(self) -> bool: ...

  def isLastCollidedW(self) -> bool: ...

  def isLocal(self) -> bool: ...

  def isMaskClicked(self, x: int, y: int, flip: bool) -> bool: ...

  @overload
  def isMechanicsCheat(self) -> bool: ...

  @overload
  def isMechanicsCheat(self) -> bool: ...

  @overload
  def isMovablesCheat(self) -> bool: ...

  @overload
  def isMovablesCheat(self) -> bool: ...

  def isMoving(self) -> bool: ...

  def isMuzzleFlash(self) -> bool: ...

  def isNPC(self) -> bool: ...

  def isOnDeathDone(self) -> bool: ...

  def isOnFire(self) -> bool: ...

  def isOnKillDone(self) -> bool: ...

  @overload
  def isOutside(self) -> bool: ...

  @overload
  def isOutside(self) -> bool: ...

  def isPathing(self) -> bool: ...

  def isPersistentOutfitInit(self) -> bool: ...

  def isPlayerMoving(self) -> bool: ...

  def isPlayingDeathSound(self) -> bool: ...

  def isPrimaryEquipped(self, item: str) -> bool: ...

  @overload
  def isPrimaryHandItem(self, item: InventoryItem) -> bool: ...

  @overload
  def isPrimaryHandItem(self, item: InventoryItem) -> bool: ...

  def isProne(self) -> bool: ...

  @overload
  def isRangedWeaponEmpty(self) -> bool: ...

  @overload
  def isRangedWeaponEmpty(self) -> bool: ...

  @overload
  def isReading(self) -> bool: ...

  @overload
  def isReading(self) -> bool: ...

  def isReanim(self) -> bool: ...

  @overload
  def isRecipeKnown(self, name: str) -> bool: ...

  @overload
  def isRecipeKnown(self, name: str) -> bool: ...

  @overload
  def isRecipeKnown(self, recipe: Recipe) -> bool: ...

  @overload
  def isRecipeKnown(self, recipe: Recipe) -> bool: ...

  def isRunning(self) -> bool: ...

  def isSceneCulled(self) -> bool: ...

  def isSeatedInVehicle(self) -> bool: ...

  @overload
  def isSecondaryHandItem(self, item: InventoryItem) -> bool: ...

  @overload
  def isSecondaryHandItem(self, item: InventoryItem) -> bool: ...

  @overload
  def isShowAdminTag(self) -> bool: ...

  @overload
  def isShowAdminTag(self) -> bool: ...

  def isSitOnGround(self) -> bool: ...

  def isSkipResolveCollision(self) -> bool: ...

  def isSneaking(self) -> bool: ...

  @overload
  def isSpeaking(self) -> bool: ...

  @overload
  def isSpeaking(self) -> bool: ...

  def isSprinting(self) -> bool: ...

  def isStrafing(self) -> bool: ...

  def isSuperAttack(self) -> bool: ...

  def isTeleporting(self) -> bool: ...

  @overload
  def isTimedActionInstant(self) -> bool: ...

  @overload
  def isTimedActionInstant(self) -> bool: ...

  @overload
  def isTimedActionInstantCheat(self) -> bool: ...

  @overload
  def isTimedActionInstantCheat(self) -> bool: ...

  def isUnderVehicle(self) -> bool: ...

  @overload
  def isUnlimitedCarry(self) -> bool: ...

  @overload
  def isUnlimitedCarry(self) -> bool: ...

  def isUnlimitedEndurance(self) -> bool: ...

  def isUsingWornItems(self) -> bool: ...

  def isVariable(self, name: str, val: str) -> bool: ...

  def isVehicleCollisionActive(self, testVehicle: BaseVehicle) -> bool: ...

  def isVisibleToNPCs(self) -> bool: ...

  @overload
  def isZombie(self) -> bool: ...

  @overload
  def isZombie(self) -> bool: ...

  @overload
  def isZombieAttacking(self) -> bool: ...

  @overload
  def isZombieAttacking(self, other: IsoMovingObject) -> bool: ...

  def isbDoDefer(self) -> bool: ...

  def isbFalling(self) -> bool: ...

  def isbOnBed(self) -> bool: ...

  def isbUseParts(self) -> bool: ...

  def learnRecipe(self, name: str) -> bool: ...

  def level0(self, perk: PerkFactory.Perk) -> None: ...

  def load(self, input: ByteBuffer, WorldVersion: int, IS_DEBUG_SAVE: bool) -> None: ...

  def loadChange(self, change: str, bb: ByteBuffer) -> None: ...

  def onCullStateChanged(self, modelManager: ModelManager, isCulled: bool) -> None: ...

  def onMouseLeftClick(self, x: int, y: int) -> bool: ...

  def onWornItemsChanged(self) -> None: ...

  @overload
  def openWindow(self, w: IsoWindow) -> None: ...

  @overload
  def openWindow(self, w: IsoWindow) -> None: ...

  def pathToCharacter(self, target: IsoGameCharacter) -> None: ...

  @overload
  def pathToLocation(self, x: int, y: int, z: int) -> None: ...

  @overload
  def pathToLocation(self, x: int, y: int, z: int) -> None: ...

  @overload
  def pathToLocationF(self, x: float, y: float, z: float) -> None: ...

  @overload
  def pathToLocationF(self, x: float, y: float, z: float) -> None: ...

  def pathToSound(self, x: int, y: int, z: int) -> None: ...

  def playBloodSplatterSound(self) -> None: ...

  def playDeadSound(self) -> None: ...

  def playEmote(self, emote: str) -> None: ...

  def playHurtSound(self) -> None: ...

  @overload
  def playSound(self, file: str) -> int: ...

  @overload
  def playSound(self, file: str) -> int: ...

  @overload
  def playSoundLocal(self, file: str) -> int: ...

  @overload
  def playSoundLocal(self, file: str) -> int: ...

  def playbackRecordCurrentStateSnapshot(self) -> ActionStateSnapshot: ...

  def playbackSetCurrentStateSnapshot(self, snapshot: ActionStateSnapshot) -> None: ...

  def postUpdateEquippedTextures(self) -> None: ...

  def postUpdateModelTextures(self) -> None: ...

  def postupdate(self) -> None: ...

  def preupdate(self) -> None: ...

  def processHitDamage(self, weapon: HandWeapon, wielder: IsoGameCharacter, damageSplit: float, bIgnoreDamage: bool, modDelta: float) -> float: ...

  def readInventory(self, b: ByteBuffer) -> str: ...

  def releaseAnimationPlayer(self) -> None: ...

  def reloadOutfit(self) -> None: ...

  def removeAttachedItem(self, item: InventoryItem) -> None: ...

  @overload
  def removeFromHands(self, item: InventoryItem) -> bool: ...

  @overload
  def removeFromHands(self, item: InventoryItem) -> bool: ...

  def removeFromWorld(self) -> None: ...

  @overload
  def removeKnownMediaLine(self, guid: str) -> None: ...

  @overload
  def removeKnownMediaLine(self, guid: str) -> None: ...

  @overload
  def removeWornItem(self, item: InventoryItem) -> None: ...

  @overload
  def removeWornItem(self, item: InventoryItem, forceDropTooHeavy: bool) -> None: ...

  def render(self, x: float, y: float, z: float, col: ColorInfo, bDoChild: bool, bWallLightingPass: bool, shader: Shader) -> None: ...

  def renderObjectPicker(self, x: float, y: float, z: float, lightInfo: ColorInfo) -> None: ...

  def renderServerGUI(self) -> None: ...

  def renderShadow(self, x: float, y: float, z: float) -> None: ...

  def renderlast(self) -> None: ...

  @overload
  def reportEvent(self, name: str) -> None: ...

  @overload
  def reportEvent(self, name: str) -> None: ...

  @overload
  def resetBeardGrowingTime(self) -> None: ...

  @overload
  def resetBeardGrowingTime(self) -> None: ...

  def resetBodyDamageRemote(self) -> None: ...

  def resetEquippedHandsModels(self) -> None: ...

  @overload
  def resetHairGrowingTime(self) -> None: ...

  @overload
  def resetHairGrowingTime(self) -> None: ...

  @overload
  def resetModel(self) -> None: ...

  @overload
  def resetModel(self) -> None: ...

  @overload
  def resetModelNextFrame(self) -> None: ...

  @overload
  def resetModelNextFrame(self) -> None: ...

  def save(self, output: ByteBuffer, IS_DEBUG_SAVE: bool) -> None: ...

  def saveChange(self, change: str, tbl: KahluaTable, bb: ByteBuffer) -> None: ...

  def sendStopBurning(self) -> None: ...

  def serverRemoveItemFromZombie(self, item: str) -> None: ...

  def setAge(self, age: int) -> None: ...

  def setAimAtFloor(self, b: bool) -> None: ...

  def setAllowConversation(self, AllowConversation: bool) -> None: ...

  @overload
  def setAlreadyReadPages(self, fullType: str, pages: int) -> None: ...

  @overload
  def setAlreadyReadPages(self, fullType: str, pages: int) -> None: ...

  def setAnimForecasted(self, timeMs: int) -> None: ...

  def setAnimated(self, b: bool) -> None: ...

  @overload
  def setAsleep(self, Asleep: bool) -> None: ...

  @overload
  def setAsleep(self, Asleep: bool) -> None: ...

  def setAttachedItem(self, location: str, item: InventoryItem) -> None: ...

  def setAttachedItems(self, other: AttachedItems) -> None: ...

  def setAttackAnim(self, attackAnim: bool) -> None: ...

  def setAttackTargetSquare(self, attackTargetSquare: IsoGridSquare) -> None: ...

  def setAttackWasSuperAttack(self, AttackWasSuperAttack: bool) -> None: ...

  def setAttackedBy(self, AttackedBy: IsoGameCharacter) -> None: ...

  def setAutoWalk(self, b: bool) -> None: ...

  def setAutoWalkDirection(self, v: Vector2) -> None: ...

  def setAvoidDamage(self, avoid: bool) -> None: ...

  @overload
  def setBed(self, bed: IsoObject) -> None: ...

  @overload
  def setBed(self, bed: IsoObject) -> None: ...

  @overload
  def setBedType(self, bedType: str) -> None: ...

  @overload
  def setBedType(self, bedType: str) -> None: ...

  def setBeenMovingFor(self, beenMovingFor: float) -> None: ...

  def setBeenSprintingFor(self, beenSprintingFor: float) -> None: ...

  def setBetaDelta(self, BetaDelta: float) -> None: ...

  def setBetaEffect(self, BetaEffect: float) -> None: ...

  def setBloodImpactX(self, BloodImpactX: float) -> None: ...

  def setBloodImpactY(self, BloodImpactY: float) -> None: ...

  def setBloodImpactZ(self, BloodImpactZ: float) -> None: ...

  def setBloodSplat(self, bloodSplat: IsoSprite) -> None: ...

  @overload
  def setBuildCheat(self, buildCheat: bool) -> None: ...

  @overload
  def setBuildCheat(self, buildCheat: bool) -> None: ...

  def setBumpDone(self, val: bool) -> None: ...

  def setBumpFall(self, val: bool) -> None: ...

  def setBumpFallType(self, val: str) -> None: ...

  def setBumpStaggered(self, val: bool) -> None: ...

  def setBumpType(self, bumpType: str) -> None: ...

  def setBumpedChr(self, bumpedChr: IsoGameCharacter) -> None: ...

  def setCanShout(self, canShout: bool) -> None: ...

  def setClickSound(self, clickSound: str) -> None: ...

  def setClothingItem_Back(self, item: InventoryItem) -> None: ...

  def setClothingItem_Feet(self, item: InventoryItem) -> None: ...

  def setClothingItem_Hands(self, item: InventoryItem) -> None: ...

  def setClothingItem_Head(self, item: InventoryItem) -> None: ...

  def setClothingItem_Legs(self, item: InventoryItem) -> None: ...

  def setClothingItem_Torso(self, item: InventoryItem) -> None: ...

  def setCriticalHit(self, isCrit: bool) -> None: ...

  def setDangerLevels(self, dangerLevels: float) -> None: ...

  def setDeathDragDown(self, dragDown: bool) -> None: ...

  @overload
  def setDebugMonitor(self, monitor: AnimatorDebugMonitor) -> None: ...

  @overload
  def setDebugMonitor(self, monitor: AnimatorDebugMonitor) -> None: ...

  @overload
  def setDefaultState(self) -> None: ...

  @overload
  def setDefaultState(self, defaultState: State) -> None: ...

  def setDelayToSleep(self, delay: float) -> None: ...

  def setDepressDelta(self, DepressDelta: float) -> None: ...

  def setDepressEffect(self, DepressEffect: float) -> None: ...

  @overload
  def setDescriptor(self, descriptor: SurvivorDesc) -> None: ...

  @overload
  def setDescriptor(self, descriptor: SurvivorDesc) -> None: ...

  def setDieCount(self, DieCount: int) -> None: ...

  @overload
  def setDir(self, directions: IsoDirections) -> None: ...

  @overload
  def setDir(self, directions: IsoDirections) -> None: ...

  def setDirectionAngle(self, angleDegrees: float) -> None: ...

  def setDoDeathSound(self, doDeathSound: bool) -> None: ...

  def setFallOnFront(self, fallOnFront: bool) -> None: ...

  def setFallTime(self, fallTime: float) -> None: ...

  @overload
  def setFarmingCheat(self, b: bool) -> None: ...

  @overload
  def setFarmingCheat(self, b: bool) -> None: ...

  @overload
  def setFemale(self, isFemale: bool) -> None: ...

  @overload
  def setFemale(self, isFemale: bool) -> None: ...

  def setFireKillRate(self, FireKillRate: float) -> None: ...

  def setFireSpreadProbability(self, FireSpreadProbability: int) -> None: ...

  def setFollowingTarget(self, FollowingTarget: IsoGameCharacter) -> None: ...

  def setForceShove(self, forceShove: bool) -> None: ...

  @overload
  def setForceWakeUpTime(self, ForceWakeUpTime: float) -> None: ...

  @overload
  def setForceWakeUpTime(self, ForceWakeUpTime: float) -> None: ...

  @overload
  def setForwardDirection(self, dir: Vector2) -> None: ...

  @overload
  def setForwardDirection(self, x: float, y: float) -> None: ...

  @overload
  def setGodMod(self, b: bool) -> None: ...

  @overload
  def setGodMod(self, b: bool) -> None: ...

  @overload
  def setHaloNote(self, str: str) -> None: ...

  @overload
  def setHaloNote(self, str: str) -> None: ...

  @overload
  def setHaloNote(self, str: str, dispTime: float) -> None: ...

  @overload
  def setHaloNote(self, str: str, dispTime: float) -> None: ...

  @overload
  def setHaloNote(self, str: str, r: int, g: int, b: int, dispTime: float) -> None: ...

  @overload
  def setHaloNote(self, str: str, r: int, g: int, b: int, dispTime: float) -> None: ...

  def setHealth(self, Health: float) -> None: ...

  @overload
  def setHealthCheat(self, healthCheat: bool) -> None: ...

  @overload
  def setHealthCheat(self, healthCheat: bool) -> None: ...

  def setHideWeaponModel(self, hideWeaponModel: bool) -> None: ...

  def setHitFromBehind(self, hitFromBehind: bool) -> None: ...

  def setHitReaction(self, hitReaction: str) -> None: ...

  def setHurtSound(self, hurtSound: str) -> None: ...

  def setIgnoreAimingInput(self, b: bool) -> None: ...

  def setIgnoreMovement(self, ignoreMovement: bool) -> None: ...

  def setIgnoreStaggerBack(self, IgnoreStaggerBack: bool) -> None: ...

  def setInventory(self, inventory: ItemContainer) -> None: ...

  def setInvincible(self, invincible: bool) -> None: ...

  @overload
  def setInvisible(self, b: bool) -> None: ...

  @overload
  def setInvisible(self, b: bool) -> None: ...

  def setIsAiming(self, aIsAiming: bool) -> None: ...

  def setIsNPC(self, isAI: bool) -> None: ...

  def setKnockedDown(self, bKnockedDown: bool) -> None: ...

  def setLastBump(self, lastBump: int) -> None: ...

  def setLastChatMessage(self, lastChatMessage: ChatMessage) -> None: ...

  def setLastCollidedN(self, lastCollidedN: bool) -> None: ...

  def setLastCollidedW(self, lastCollidedW: bool) -> None: ...

  def setLastFallSpeed(self, lastFallSpeed: float) -> None: ...

  def setLastHeardSound(self, x: int, y: int, z: int) -> None: ...

  def setLastHitCount(self, hitCount: int) -> None: ...

  def setLastHourSleeped(self, lastHourSleeped: int) -> None: ...

  def setLastLocalEnemies(self, LastLocalEnemies: int) -> None: ...

  def setLastSpokenLine(self, line: str) -> None: ...

  def setLastZombieKills(self, LastZombieKills: int) -> None: ...

  def setLeaveBodyTimedown(self, leaveBodyTimedown: float) -> None: ...

  def setLegsSprite(self, legsSprite: IsoSprite) -> None: ...

  def setLevelUpMultiplier(self, LevelUpMultiplier: float) -> None: ...

  def setLlx(self, llx: float) -> None: ...

  def setLly(self, lly: float) -> None: ...

  def setLlz(self, llz: float) -> None: ...

  def setLrx(self, lrx: float) -> None: ...

  def setLry(self, lry: float) -> None: ...

  def setMaxTwist(self, degrees: float) -> None: ...

  def setMaxWeight(self, maxWeight: int) -> None: ...

  def setMaxWeightBase(self, maxWeightBase: int) -> None: ...

  @overload
  def setMechanicsCheat(self, mechanicsCheat: bool) -> None: ...

  @overload
  def setMechanicsCheat(self, mechanicsCheat: bool) -> None: ...

  @overload
  def setMeleeDelay(self, delay: float) -> None: ...

  @overload
  def setMeleeDelay(self, delay: float) -> None: ...

  @overload
  def setMetabolicTarget(self, target: float) -> None: ...

  @overload
  def setMetabolicTarget(self, m: Metabolics) -> None: ...

  def setMomentumScalar(self, val: float) -> None: ...

  @overload
  def setMovablesCheat(self, b: bool) -> None: ...

  @overload
  def setMovablesCheat(self, b: bool) -> None: ...

  def setMoveDelta(self, moveDelta: float) -> None: ...

  def setMoveForwardVec(self, moveForwardVec: Vector2) -> None: ...

  def setMoving(self, val: bool) -> None: ...

  def setNPC(self, newvalue: bool) -> None: ...

  def setNextWander(self, NextWander: int) -> None: ...

  def setNumSurvivorsInVicinity(self, NumSurvivorsInVicinity: int) -> None: ...

  def setOnDeathDone(self, done: bool) -> None: ...

  def setOnFire(self, OnFire: bool) -> None: ...

  def setOnKillDone(self, done: bool) -> None: ...

  def setPainDelta(self, PainDelta: float) -> None: ...

  def setPainEffect(self, PainEffect: float) -> None: ...

  @overload
  def setPath2(self, path: PolygonalMap2.Path) -> None: ...

  @overload
  def setPath2(self, path: PolygonalMap2.Path) -> None: ...

  def setPathIndex(self, pathIndex: int) -> None: ...

  def setPathing(self, pathing: bool) -> None: ...

  def setPatience(self, Patience: int) -> None: ...

  def setPatienceMax(self, PatienceMax: int) -> None: ...

  def setPatienceMin(self, PatienceMin: int) -> None: ...

  @overload
  def setPerkLevelDebug(self, perks: PerkFactory.Perk, level: int) -> None: ...

  @overload
  def setPerkLevelDebug(self, perks: PerkFactory.Perk, level: int) -> None: ...

  @overload
  def setPersistentOutfitID(self, outfitID: int) -> None: ...

  @overload
  def setPersistentOutfitID(self, outfitID: int, init: bool) -> None: ...

  def setPlayingDeathSound(self, playing: bool) -> None: ...

  @overload
  def setPrimaryHandItem(self, leftHandItem: InventoryItem) -> None: ...

  @overload
  def setPrimaryHandItem(self, leftHandItem: InventoryItem) -> None: ...

  @overload
  def setRangedWeaponEmpty(self, val: bool) -> None: ...

  @overload
  def setRangedWeaponEmpty(self, val: bool) -> None: ...

  @overload
  def setReading(self, isReading: bool) -> None: ...

  @overload
  def setReading(self, isReading: bool) -> None: ...

  def setReanim(self, Reanim: bool) -> None: ...

  def setReanimAnimDelay(self, ReanimAnimDelay: int) -> None: ...

  def setReanimAnimFrame(self, ReanimAnimFrame: int) -> None: ...

  def setReanimateTimer(self, ReanimateTimer: float) -> None: ...

  @overload
  def setRecoilDelay(self, recoilDelay: float) -> None: ...

  @overload
  def setRecoilDelay(self, recoilDelay: float) -> None: ...

  def setReduceInfectionPower(self, reduceInfectionPower: float) -> None: ...

  def setRemoteID(self, RemoteID: int) -> None: ...

  def setRunning(self, bRunning: bool) -> None: ...

  @overload
  def setSafety(self, safety: Safety) -> None: ...

  @overload
  def setSafety(self, safety: Safety) -> None: ...

  def setSayLine(self, sayLine: str) -> None: ...

  def setSceneCulled(self, isCulled: bool) -> None: ...

  @overload
  def setSecondaryHandItem(self, rightHandItem: InventoryItem) -> None: ...

  @overload
  def setSecondaryHandItem(self, rightHandItem: InventoryItem) -> None: ...

  @overload
  def setShowAdminTag(self, showAdminTag: bool) -> None: ...

  @overload
  def setShowAdminTag(self, showAdminTag: bool) -> None: ...

  def setSitOnGround(self, sitOnGround: bool) -> None: ...

  def setSleepingTabletDelta(self, SleepingTabletDelta: float) -> None: ...

  def setSleepingTabletEffect(self, SleepingTabletEffect: float) -> None: ...

  def setSlowFactor(self, slowFactor: float) -> None: ...

  def setSlowTimer(self, slowTimer: float) -> None: ...

  def setSneaking(self, bSneaking: bool) -> None: ...

  def setSpeakColour(self, SpeakColour: Color) -> None: ...

  @overload
  def setSpeakColourInfo(self, info: ColorInfo) -> None: ...

  @overload
  def setSpeakColourInfo(self, info: ColorInfo) -> None: ...

  def setSpeakTime(self, SpeakTime: int) -> None: ...

  def setSpeaking(self, Speaking: bool) -> None: ...

  def setSpeedMod(self, speedMod: float) -> None: ...

  def setSprinting(self, bSprinting: bool) -> None: ...

  def setStaggerTimeMod(self, staggerTimeMod: float) -> None: ...

  def setStateMachineLocked(self, val: bool) -> None: ...

  def setSuperAttack(self, superAttack: bool) -> None: ...

  def setSurvivorKills(self, survivorKills: int) -> None: ...

  def setTeleport(self, _teleport: NetworkTeleport) -> None: ...

  def setTemperature(self, t: float) -> None: ...

  def setTextureCreator(self, textureCreator: ModelInstanceTextureCreator) -> None: ...

  def setTimeOfSleep(self, timeOfSleep: float) -> None: ...

  @overload
  def setTimeSinceLastSmoke(self, timeSinceLastSmoke: float) -> None: ...

  @overload
  def setTimeSinceLastSmoke(self, timeSinceLastSmoke: float) -> None: ...

  def setTimeThumping(self, TimeThumping: int) -> None: ...

  @overload
  def setTimedActionInstantCheat(self, b: bool) -> None: ...

  @overload
  def setTimedActionInstantCheat(self, b: bool) -> None: ...

  def setTurnDelta(self, m_turnDelta: float) -> None: ...

  @overload
  def setUnlimitedCarry(self, unlimitedCarry: bool) -> None: ...

  @overload
  def setUnlimitedCarry(self, unlimitedCarry: bool) -> None: ...

  def setUnlimitedEndurance(self, unlimitedEndurance: bool) -> None: ...

  def setUseHandWeapon(self, useHandWeapon: HandWeapon) -> None: ...

  @overload
  def setVariable(self, var: IAnimationVariableSlot) -> None: ...

  @overload
  def setVariable(self, var: IAnimationVariableSlot) -> None: ...

  @overload
  def setVariable(self, key: str, value: bool) -> None: ...

  @overload
  def setVariable(self, key: str, value: bool) -> None: ...

  @overload
  def setVariable(self, key: str, value: float) -> None: ...

  @overload
  def setVariable(self, key: str, value: float) -> None: ...

  @overload
  def setVariable(self, key: str, value: str) -> None: ...

  @overload
  def setVariable(self, key: str, value: str) -> None: ...

  @overload
  def setVariable(self, key: str, defaultVal: bool, callbackGet: AnimationVariableSlotCallbackBool.CallbackGetStrongTyped) -> None: ...

  @overload
  def setVariable(self, key: str, defaultVal: float, callbackGet: AnimationVariableSlotCallbackFloat.CallbackGetStrongTyped) -> None: ...

  @overload
  def setVariable(self, key: str, defaultVal: int, callbackGet: AnimationVariableSlotCallbackInt.CallbackGetStrongTyped) -> None: ...

  @overload
  def setVariable(self, key: str, defaultVal: str, callbackGet: AnimationVariableSlotCallbackString.CallbackGetStrongTyped) -> None: ...

  @overload
  def setVariable(self, key: str, defaultVal: bool, callbackGet: AnimationVariableSlotCallbackBool.CallbackGetStrongTyped, callbackSet: AnimationVariableSlotCallbackBool.CallbackSetStrongTyped) -> None: ...

  @overload
  def setVariable(self, key: str, defaultVal: float, callbackGet: AnimationVariableSlotCallbackFloat.CallbackGetStrongTyped, callbackSet: AnimationVariableSlotCallbackFloat.CallbackSetStrongTyped) -> None: ...

  @overload
  def setVariable(self, key: str, defaultVal: int, callbackGet: AnimationVariableSlotCallbackInt.CallbackGetStrongTyped, callbackSet: AnimationVariableSlotCallbackInt.CallbackSetStrongTyped) -> None: ...

  @overload
  def setVariable(self, key: str, defaultVal: str, callbackGet: AnimationVariableSlotCallbackString.CallbackGetStrongTyped, callbackSet: AnimationVariableSlotCallbackString.CallbackSetStrongTyped) -> None: ...

  @overload
  def setVehicle(self, v: BaseVehicle) -> None: ...

  @overload
  def setVehicle(self, v: BaseVehicle) -> None: ...

  def setVisibleToNPCs(self, VisibleToNPCs: bool) -> None: ...

  @overload
  def setWornItem(self, location: str, item: InventoryItem) -> None: ...

  @overload
  def setWornItem(self, location: str, item: InventoryItem, forceDropTooHeavy: bool) -> None: ...

  def setWornItems(self, other: WornItems) -> None: ...

  def setXp(self, xp: IsoGameCharacter.XP) -> None: ...

  def setZombieKills(self, ZombieKills: int) -> None: ...

  def setbClimbing(self, bClimbing: bool) -> None: ...

  def setbDoDefer(self, bDoDefer: bool) -> None: ...

  def setbFalling(self, bFalling: bool) -> None: ...

  def setbOnBed(self, bOnBed: bool) -> None: ...

  def setbUseParts(self, bUseParts: bool) -> None: ...

  def shouldBeTurning(self) -> bool: ...

  def shouldBeTurning90(self) -> bool: ...

  def shouldBeTurningAround(self) -> bool: ...

  def shouldBecomeCorpse(self) -> bool: ...

  def shouldBecomeZombieAfterDeath(self) -> bool: ...

  def shouldDoInventory(self) -> bool: ...

  def shouldWaitToStartTimedAction(self) -> bool: ...

  @overload
  def smashCarWindow(self, part: VehiclePart) -> None: ...

  @overload
  def smashCarWindow(self, part: VehiclePart) -> None: ...

  @overload
  def smashWindow(self, w: IsoWindow) -> None: ...

  @overload
  def smashWindow(self, w: IsoWindow) -> None: ...

  def splatBlood(self, dist: int, alpha: float) -> None: ...

  def splatBloodFloor(self) -> None: ...

  def splatBloodFloorBig(self) -> None: ...

  @overload
  def startEvent(self, eventInstance: int, clip: GameSoundClip, parameterSet: BitSet) -> None: ...

  @overload
  def startEvent(self, eventInstance: int, clip: GameSoundClip, parameterSet: BitSet) -> None: ...

  def startMuzzleFlash(self) -> None: ...

  def startPlaybackGameVariables(self) -> AnimationVariableSource: ...

  @overload
  def stopEvent(self, eventInstance: int, clip: GameSoundClip, parameterSet: BitSet) -> None: ...

  @overload
  def stopEvent(self, eventInstance: int, clip: GameSoundClip, parameterSet: BitSet) -> None: ...

  @overload
  def stopOrTriggerSound(self, eventInstance: int) -> None: ...

  @overload
  def stopOrTriggerSound(self, eventInstance: int) -> None: ...

  def testDefense(self, zomb: IsoZombie) -> bool: ...

  def testDotSide(self, target: IsoMovingObject) -> str: ...

  def update(self) -> None: ...

  def updateEmitter(self) -> None: ...

  def updateEquippedRadioFreq(self) -> None: ...

  @overload
  def updateEvent(self, eventInstance: int, clip: GameSoundClip) -> None: ...

  @overload
  def updateEvent(self, eventInstance: int, clip: GameSoundClip) -> None: ...

  def updateLightInfo(self) -> None: ...

  def updateRecoilVar(self) -> None: ...

  def updateSpeedModifiers(self) -> None: ...

  def updateTextObjects(self) -> None: ...

  def writeInventory(self, b: ByteBuffer) -> None: ...

  def zeroForwardDirectionX(self) -> None: ...

  def zeroForwardDirectionY(self) -> None: ...

  @staticmethod
  def getInf() -> ColorInfo: ...

  @staticmethod
  def getSurvivorMap() -> HashMap[Integer, SurvivorDesc]: ...

  @staticmethod
  def getTempo() -> Vector2: ...

  def __init__(self, cell: IsoCell, x: float, y: float, z: float):
    self.actioncontext: ActionContext
    self.advancedanimator: AdvancedAnimator
    self.amputations: ArrayList[str]
    self.asleep: bool
    self.attackvars: AttackVars
    self.bagsworn: ArrayList[InventoryContainer]
    self.beard: ModelInstance
    self.blockturning: bool
    self.bumpnbr: int
    self.bupdateequippedtextures: bool
    self.callout: bool
    self.clientignorecollision: int
    self.dodirtbloodetc: bool
    self.dorendershadow: bool
    self.emitter: BaseCharacterSoundEmitter
    self.forcenulloverride: bool
    self.hair: ModelInstance
    self.hitlist: ArrayList[HitInfo]
    self.invradiofreq: ArrayList[Integer]
    self.isvisibletoplayer: list[bool]
    self.knockbackattackmod: float
    self.lastautomaticshoot: int
    self.legssprite: IsoSprite
    self.networkcharacter: NetworkCharacter
    self.overrideprimaryhandmodel: str
    self.overridesecondaryhandmodel: str
    self.primaryhandmodel: ModelInstance
    self.realdir: IsoDirections
    self.realstate: NetworkVariables.ZombieState
    self.realx: float
    self.realy: float
    self.realz: int
    self.reanimatedcorpse: IsoGameCharacter
    self.reanimatedcorpseid: int
    self.removedfromworldms: int
    self.savedvehiclerunning: bool
    self.savedvehicleseat: int
    self.savedvehiclex: float
    self.savedvehicley: float
    self.secondaryhandmodel: ModelInstance
    self.shootinarow: int
    self.speedmod: float
    self.statemachineparams: HashMap[State, HashMap[object, object]]
    self.traits: IsoGameCharacter.CharacterTraits
    self.upkillcount: bool
    self.vocalevent: int

  class XP:

    MaxXPGrowthRate: float

    @overload
    def AddXP(self, arg0: PerkFactory.Perk, arg1: float) -> None: ...

    @overload
    def AddXP(self, arg0: HandWeapon, arg1: int) -> None: ...

    @overload
    def AddXP(self, arg0: PerkFactory.Perk, arg1: float, arg2: bool, arg3: bool, arg4: bool) -> None: ...

    def AddXPNoMultiplier(self, arg0: PerkFactory.Perk, arg1: float) -> None: ...

    def addXpMultiplier(self, arg0: PerkFactory.Perk, arg1: float, arg2: int, arg3: int) -> None: ...

    def getLevel(self) -> int: ...

    def getMultiplier(self, arg0: PerkFactory.Perk) -> float: ...

    def getMultiplierMap(self) -> HashMap[PerkFactory.Perk, IsoGameCharacter.XPMultiplier]: ...

    def getPerkBoost(self, arg0: PerkFactory.Perk) -> int: ...

    def getTotalXp(self) -> float: ...

    def getXP(self, arg0: PerkFactory.Perk) -> float: ...

    def load(self, arg0: ByteBuffer, arg1: int) -> None: ...

    def recalcSumm(self) -> None: ...

    def save(self, arg0: ByteBuffer) -> None: ...

    def setLevel(self, arg0: int) -> None: ...

    def setPerkBoost(self, arg0: PerkFactory.Perk, arg1: int) -> None: ...

    def setTotalXP(self, arg0: float) -> None: ...

    def setXPToLevel(self, arg0: PerkFactory.Perk, arg1: int) -> None: ...

    def update(self) -> None: ...

    def __init__(self, arg0: IsoGameCharacter, arg1: IsoGameCharacter):
      self.lastlevel: int
      self.level: int
      self.totalxp: float
      self.xpmap: HashMap[PerkFactory.Perk, Float]
      self.xpmapmultiplier: HashMap[PerkFactory.Perk, IsoGameCharacter.XPMultiplier]

  class CharacterTraits(TraitCollection):

    def isIlliterate(self) -> bool: ...

    def __init__(self, arg0: IsoGameCharacter):
      self.adrenalinejunkie: TraitCollection.TraitSlot
      self.agoraphobic: TraitCollection.TraitSlot
      self.asthmatic: TraitCollection.TraitSlot
      self.athletic: TraitCollection.TraitSlot
      self.axeman: TraitCollection.TraitSlot
      self.brave: TraitCollection.TraitSlot
      self.brooding: TraitCollection.TraitSlot
      self.burglar: TraitCollection.TraitSlot
      self.claustophobic: TraitCollection.TraitSlot
      self.clumsy: TraitCollection.TraitSlot
      self.conspicuous: TraitCollection.TraitSlot
      self.cowardly: TraitCollection.TraitSlot
      self.deaf: TraitCollection.TraitSlot
      self.desensitized: TraitCollection.TraitSlot
      self.disorganized: TraitCollection.TraitSlot
      self.eagleeyed: TraitCollection.TraitSlot
      self.emaciated: TraitCollection.TraitSlot
      self.fasthealer: TraitCollection.TraitSlot
      self.fastlearner: TraitCollection.TraitSlot
      self.feeble: TraitCollection.TraitSlot
      self.graceful: TraitCollection.TraitSlot
      self.hardofhearing: TraitCollection.TraitSlot
      self.heartyappitite: TraitCollection.TraitSlot
      self.heavydrinker: TraitCollection.TraitSlot
      self.hemophobic: TraitCollection.TraitSlot
      self.highthirst: TraitCollection.TraitSlot
      self.hypercondriac: TraitCollection.TraitSlot
      self.illiterate: TraitCollection.TraitSlot
      self.inconspicuous: TraitCollection.TraitSlot
      self.injured: TraitCollection.TraitSlot
      self.insomniac: TraitCollection.TraitSlot
      self.irongut: TraitCollection.TraitSlot
      self.jogger: TraitCollection.TraitSlot
      self.keenhearing: TraitCollection.TraitSlot
      self.lightdrinker: TraitCollection.TraitSlot
      self.lighteater: TraitCollection.TraitSlot
      self.lowthirst: TraitCollection.TraitSlot
      self.lucky: TraitCollection.TraitSlot
      self.marksman: TraitCollection.TraitSlot
      self.needslesssleep: TraitCollection.TraitSlot
      self.needsmoresleep: TraitCollection.TraitSlot
      self.nightowl: TraitCollection.TraitSlot
      self.nightvision: TraitCollection.TraitSlot
      self.nutritionist: TraitCollection.TraitSlot
      self.nutritionist2: TraitCollection.TraitSlot
      self.obese: TraitCollection.TraitSlot
      self.organized: TraitCollection.TraitSlot
      self.outdoorsman: TraitCollection.TraitSlot
      self.outofshape: TraitCollection.TraitSlot
      self.overweight: TraitCollection.TraitSlot
      self.pacifist: TraitCollection.TraitSlot
      self.patient: TraitCollection.TraitSlot
      self.playsfootball: TraitCollection.TraitSlot
      self.pronetoillness: TraitCollection.TraitSlot
      self.resilient: TraitCollection.TraitSlot
      self.shortsighted: TraitCollection.TraitSlot
      self.shorttemper: TraitCollection.TraitSlot
      self.slowhealer: TraitCollection.TraitSlot
      self.slowlearner: TraitCollection.TraitSlot
      self.smoker: TraitCollection.TraitSlot
      self.speeddemon: TraitCollection.TraitSlot
      self.stout: TraitCollection.TraitSlot
      self.strong: TraitCollection.TraitSlot
      self.sundaydriver: TraitCollection.TraitSlot
      self.thickskinned: TraitCollection.TraitSlot
      self.thinskinned: TraitCollection.TraitSlot
      self.underweight: TraitCollection.TraitSlot
      self.unfit: TraitCollection.TraitSlot
      self.unlucky: TraitCollection.TraitSlot
      self.veryunderweight: TraitCollection.TraitSlot
      self.weak: TraitCollection.TraitSlot
      self.weakstomach: TraitCollection.TraitSlot

  class Location:

    def equals(self, other: object) -> bool: ...

    def getX(self) -> int: ...

    def getY(self) -> int: ...

    def getZ(self) -> int: ...

    def set(self, x: int, y: int, z: int) -> IsoGameCharacter.Location: ...

    @overload
    def __init__(self):
      self.x: int

      self.y: int

      self.z: int

    @overload
    def __init__(self, x: int, y: int, z: int): ...

  class LightInfo:

    def initFrom(self, other: IsoGameCharacter.LightInfo) -> None: ...

    def __init__(self):
      self.anglex: float
      self.angley: float
      self.bmod: float
      self.gmod: float
      self.night: float
      self.rmod: float
      self.square: IsoGridSquare
      self.time: int
      self.torches: ArrayList[IsoGameCharacter.TorchInfo]
      self.x: float
      self.y: float
      self.z: float

  class L_getDotWithForwardDirection: ...

  class PerkInfo:

    def getLevel(self) -> int: ...

    def __init__(self, arg0: IsoGameCharacter):
      self.level: int
      self.perk: PerkFactory.Perk

  class ReadBook: ...

  class L_renderShadow: ...

  class L_renderLast: ...

  class s_performance:

    update: PerformanceProfileProbe

  class TorchInfo:

    @overload
    def set(self, part: VehiclePart) -> IsoGameCharacter.TorchInfo: ...

    @overload
    def set(self, p: IsoPlayer, item: InventoryItem) -> IsoGameCharacter.TorchInfo: ...

    @staticmethod
    def alloc() -> IsoGameCharacter.TorchInfo: ...

    @staticmethod
    def release(info: IsoGameCharacter.TorchInfo) -> None: ...

    def __init__(self):
      self.anglex: float
      self.angley: float
      self.bcone: bool
      self.dist: float
      self.dot: float
      self.focusing: int
      self.id: int
      self.strength: float
      self.x: float
      self.y: float
      self.z: float

  class L_postUpdate: ...

  class L_actionStateChanged: ...

  class l_testDotSide: ...

  class Bandages: ...

  class XPMultiplier:

    def __init__(self):
      self.maxlevel: int
      self.minlevel: int
      self.multiplier: float

  class BodyLocation(Enum):

    Arm: IsoGameCharacter.BodyLocation

    Chest: IsoGameCharacter.BodyLocation

    Foot: IsoGameCharacter.BodyLocation

    Hand: IsoGameCharacter.BodyLocation

    Head: IsoGameCharacter.BodyLocation

    Leg: IsoGameCharacter.BodyLocation

    Stomach: IsoGameCharacter.BodyLocation

    @staticmethod
    def valueOf(arg0: str) -> IsoGameCharacter.BodyLocation: ...

    @staticmethod
    def values() -> list[IsoGameCharacter.BodyLocation]: ...


class IsoLivingCharacter(IsoGameCharacter):

  def AttemptAttack(self, ChargeDelta: float) -> bool: ...

  def DoAttack(self, ChargeDelta: float) -> bool: ...

  def isCollidedWithPushableThisFrame(self) -> bool: ...

  def isDoShove(self) -> bool: ...

  def setDoShove(self, bDoShove: bool) -> None: ...

  def __init__(self, cell: IsoCell, x: float, y: float, z: float):
    self.barehands: HandWeapon
    self.bcollidedwithpushable: bool
    self.bdoshove: bool
    self.targetonground: IsoGameCharacter
    self.usechargedelta: float


class IsoLuaCharacter(IsoGameCharacter):

  def update(self) -> None: ...

  def __init__(self, x: float, y: float, z: float): ...


class IsoPlayer(IsoLivingCharacter):

  assumedPlayer: int

  DEATH_MUSIC_NAME: str

  isTestAIMode: bool

  MAX: int

  NoSound: bool

  numPlayers: int

  players: list[IsoPlayer]

  def AttemptAttack(self) -> bool: ...

  @overload
  def DoAttack(self, chargeDelta: float) -> bool: ...

  @overload
  def DoAttack(self, chargeDelta: float, forceShove: bool, clickSound: str) -> bool: ...

  def DoFootstepSound(self, type: str) -> None: ...

  def GetAnimSetName(self) -> str: ...

  def Hit(self, vehicle: BaseVehicle, speed: float, isHitFromBehind: bool, hitDirX: float, hitDirY: float) -> float: ...

  def InitSpriteParts(self) -> None: ...

  def IsAiming(self) -> bool: ...

  def IsInMeleeAttack(self) -> bool: ...

  def IsRunning(self) -> bool: ...

  def IsUsingAimWeapon(self) -> bool: ...

  def Kill(self, killer: IsoGameCharacter) -> None: ...

  def MoveUnmodded(self, dir: Vector2) -> None: ...

  def OnAnimEvent(self, sender: AnimLayer, event: AnimEvent) -> None: ...

  def OnDeath(self) -> None: ...

  def TestZombieSpotPlayer(self, chr: IsoMovingObject) -> None: ...

  def actionStateChanged(self, sender: ActionContext) -> None: ...

  def addMechanicsItem(self, itemid: str, part: VehiclePart, milli: Long) -> None: ...

  def addWorldSoundUnlessInvisible(self, radius: int, volume: int, bStressHumans: bool) -> None: ...

  def becomeCorpse(self) -> None: ...

  def calculateContext(self) -> None: ...

  def calculateCritChance(self, target: IsoGameCharacter) -> int: ...

  def canClimbOverWall(self, dir: IsoDirections) -> bool: ...

  def canSeePlayerStats(self) -> bool: ...

  @overload
  def checkCanSeeClient(self, remoteChr: IsoPlayer) -> bool: ...

  @overload
  def checkCanSeeClient(self, remoteConnection: UdpConnection) -> bool: ...

  def checkWalkTo(self) -> bool: ...

  def clearNetworkEvents(self) -> None: ...

  def climbOverWall(self, dir: IsoDirections) -> bool: ...

  def createPlayerStats(self, b: ByteBufferWriter, adminUsername: str) -> ByteBufferWriter: ...

  def doBeatenVehicle(self, vehicleSpeed: float) -> float: ...

  def doContext(self, dir: IsoDirections) -> bool: ...

  def dressInClothingItem(self, itemGUID: str) -> None: ...

  def dressInNamedOutfit(self, outfitName: str) -> None: ...

  def getAccessLevel(self) -> str: ...

  def getActionContext(self) -> ActionContext: ...

  def getActiveLightItem(self) -> InventoryItem: ...

  def getAimVector(self, vec: Vector2) -> Vector2: ...

  def getAimingMod(self) -> float: ...

  def getAimingRangeMod(self) -> float: ...

  def getAlreadyReadBook(self) -> ArrayList[str]: ...

  def getAsleepTime(self) -> float: ...

  def getAttackType(self) -> str: ...

  def getCell(self) -> IsoCell: ...

  def getClearSpottedTimer(self) -> int: ...

  def getClosestZombieDist(self) -> IsoGameCharacter: ...

  def getClosestZombieToOtherZombie(self, closestTo: IsoZombie) -> IsoZombie: ...

  def getContextDoorOrWindowOrWindowFrame(self, assumedDir: IsoDirections) -> IsoObject: ...

  def getControllerAimDir(self, vec: Vector2) -> Vector2: ...

  def getDamageFromHitByACar(self, vehicleSpeed: float) -> float: ...

  def getDeferredMovement(self, out_result: Vector2) -> Vector2: ...

  def getDialogMood(self) -> int: ...

  def getDisplayName(self) -> str: ...

  def getDragCharacter(self) -> IsoSurvivor: ...

  def getDragObject(self) -> IsoMovingObject: ...

  def getFitness(self) -> Fitness: ...

  def getFollowID(self) -> int: ...

  def getForname(self) -> str: ...

  def getGlobalMovementMod(self, bDoNoises: bool) -> float: ...

  def getHeartDelay(self) -> float: ...

  def getHeartDelayMax(self) -> float: ...

  def getHitReactionNetworkAI(self) -> HitReactionNetworkAI: ...

  def getHoursSurvived(self) -> float: ...

  @overload
  def getHumanVisual(self) -> HumanVisual: ...

  @overload
  def getHumanVisual(self) -> HumanVisual: ...

  def getInvAimingMod(self) -> float: ...

  def getInvAimingRangeMod(self) -> float: ...

  @overload
  def getItemVisuals(self) -> ItemVisuals: ...

  @overload
  def getItemVisuals(self, itemVisuals: ItemVisuals) -> None: ...

  @overload
  def getItemVisuals(self, itemVisuals: ItemVisuals) -> None: ...

  def getJoypadBind(self) -> int: ...

  def getLastAngle(self) -> Vector2: ...

  def getLastSeenZomboidTime(self) -> float: ...

  def getLastSpotted(self) -> Stack[IsoMovingObject]: ...

  def getLightDistance(self) -> float: ...

  def getMaxWeightDelta(self) -> float: ...

  def getMechanicsItem(self, itemId: str) -> Long: ...

  def getMoodleLevel(self, type: MoodleType) -> int: ...

  def getMouseAimVector(self, vec: Vector2) -> Vector2: ...

  def getMoveSpeed(self) -> float: ...

  def getNearVehicle(self) -> BaseVehicle: ...

  def getNetworkCharacterAI(self) -> NetworkCharacterAI: ...

  def getNutrition(self) -> Nutrition: ...

  def getObjectName(self) -> str: ...

  def getOffSetXUI(self) -> int: ...

  def getOffSetYUI(self) -> int: ...

  def getOnlineID(self) -> int: ...

  def getParameterCharacterMovementSpeed(self) -> ParameterCharacterMovementSpeed: ...

  def getPathSpeed(self) -> float: ...

  def getPing(self) -> int: ...

  def getPlayerClothingInsulation(self) -> float: ...

  def getPlayerClothingTemperature(self) -> float: ...

  def getPlayerMoveDir(self) -> Vector2: ...

  def getPlayerNum(self) -> int: ...

  def getRelevantAndDistance(self, x: float, y: float, RelevantRange: float) -> float: ...

  def getReloadingMod(self) -> float: ...

  def getSeeNearbyCharacterDistance(self) -> float: ...

  def getSleepingPillsTaken(self) -> int: ...

  def getSpottedList(self) -> Stack[IsoMovingObject]: ...

  def getSteamID(self) -> int: ...

  def getSurname(self) -> str: ...

  def getTagColor(self) -> ColorInfo: ...

  def getTagPrefix(self) -> str: ...

  def getTicksSinceSeenZombie(self) -> int: ...

  def getTimeSinceLastStab(self) -> float: ...

  def getTimeSurvived(self) -> str: ...

  def getTimedActionTimeModifier(self) -> float: ...

  def getTorchDot(self) -> float: ...

  def getTorchStrength(self) -> float: ...

  def getTransactionID(self) -> Integer: ...

  def getTurnDelta(self) -> float: ...

  def getUseableVehicle(self) -> BaseVehicle: ...

  @overload
  def getUsername(self) -> str: ...

  @overload
  def getUsername(self, canShowFirstname: Boolean) -> str: ...

  def getVisual(self) -> BaseVisual: ...

  def getZombieRelevenceScore(self, z: IsoZombie) -> float: ...

  def hitConsequences(self, weapon: HandWeapon, wielder: IsoGameCharacter, bIgnoreDamage: bool, damage: float, bRemote: bool) -> None: ...

  def hopFence(self, dir: IsoDirections, bTest: bool) -> bool: ...

  def isAccessLevel(self, level: str) -> bool: ...

  def isAimControlActive(self) -> bool: ...

  def isAimKeyDown(self) -> bool: ...

  def isAllChatMuted(self) -> bool: ...

  def isAllowRun(self) -> bool: ...

  def isAllowSprint(self) -> bool: ...

  def isAttackAnimThrowTimeOut(self) -> bool: ...

  def isAttackFromBehind(self) -> bool: ...

  def isAttackStarted(self) -> bool: ...

  def isAttacking(self) -> bool: ...

  def isAuthorizeMeleeAction(self) -> bool: ...

  def isAuthorizeShoveStomp(self) -> bool: ...

  def isBannedAttacking(self) -> bool: ...

  def isBehaviourMoving(self) -> bool: ...

  def isBlockMovement(self) -> bool: ...

  def isCanHearAll(self) -> bool: ...

  def isCanSeeAll(self) -> bool: ...

  def isCheatPlayerSeeEveryone(self) -> bool: ...

  def isClimbOverWallStruggle(self) -> bool: ...

  def isClimbOverWallSuccess(self) -> bool: ...

  def isDeaf(self) -> bool: ...

  def isDoingActionThatCanBeCancelled(self) -> bool: ...

  def isFactionPvp(self) -> bool: ...

  def isFemale(self) -> bool: ...

  def isForceAim(self) -> bool: ...

  def isForceOverrideAnim(self) -> bool: ...

  def isForceRun(self) -> bool: ...

  def isForceSprint(self) -> bool: ...

  def isGhostMode(self) -> bool: ...

  def isIgnoreAutoVault(self) -> bool: ...

  def isIgnoreContextKey(self) -> bool: ...

  def isIgnoreInputsForDirection(self) -> bool: ...

  def isInTrees2(self, ignoreBush: bool) -> bool: ...

  def isJustMoved(self) -> bool: ...

  def isLBPressed(self) -> bool: ...

  def isLocal(self) -> bool: ...

  def isLocalPlayer(self) -> bool: ...

  def isLookingWhileInVehicle(self) -> bool: ...

  def isMaskClicked(self, x: int, y: int, flip: bool) -> bool: ...

  def isNearVehicle(self) -> Boolean: ...

  def isNetworkTeleportEnabled(self) -> bool: ...

  def isNoClip(self) -> bool: ...

  def isOnlyPlayerAsleep(self) -> bool: ...

  def isOutside(self) -> bool: ...

  def isPathfindRunning(self) -> bool: ...

  def isPerformingAnAction(self) -> bool: ...

  def isPlayerMoving(self) -> bool: ...

  def isPushableForSeparate(self) -> bool: ...

  def isPushedByForSeparate(self, other: IsoMovingObject) -> bool: ...

  def isSafeToClimbOver(self, dir: IsoDirections) -> bool: ...

  def isSaveFileIPValid(self) -> bool: ...

  def isSaveFileInUse(self) -> bool: ...

  def isSeeEveryone(self) -> bool: ...

  def isSeeNonPvpZone(self) -> bool: ...

  def isShowMPInfos(self) -> bool: ...

  def isShowTag(self) -> bool: ...

  @overload
  def isSkeleton(self) -> bool: ...

  @overload
  def isSkeleton(self) -> bool: ...

  def isSolidForSeparate(self) -> bool: ...

  def isTargetedByZombie(self) -> bool: ...

  def isTimedActionInstant(self) -> bool: ...

  def isTorchCone(self) -> bool: ...

  def isVehicleCollisionActive(self, testVehicle: BaseVehicle) -> bool: ...

  def isWaiting(self) -> bool: ...

  def isWearingNightVisionGoggles(self) -> bool: ...

  def isZombie(self) -> bool: ...

  def isbChangeCharacterDebounce(self) -> bool: ...

  def isbCouldBeSeenThisFrame(self) -> bool: ...

  def isbSeenThisFrame(self) -> bool: ...

  @overload
  def load(self, fileName: str) -> None: ...

  @overload
  def load(self, input: ByteBuffer, WorldVersion: int, IS_DEBUG_SAVE: bool) -> None: ...

  def nullifyAiming(self) -> None: ...

  def onCullStateChanged(self, modelManager: ModelManager, isCulled: bool) -> None: ...

  def onWornItemsChanged(self) -> None: ...

  def postupdate(self) -> None: ...

  def pressedAim(self) -> bool: ...

  def pressedAttack(self, calcAttackVars: bool) -> None: ...

  def pressedCancelAction(self) -> bool: ...

  def pressedMovement(self, ignoreBlock: bool) -> bool: ...

  def preupdate(self) -> None: ...

  def removeFromWorld(self) -> None: ...

  def removeSaveFile(self) -> None: ...

  def render(self, x: float, y: float, z: float, col: ColorInfo, bDoChild: bool, bWallLightingPass: bool, shader: Shader) -> None: ...

  def renderlast(self) -> None: ...

  @overload
  def save(self) -> None: ...

  @overload
  def save(self, fileName: str) -> None: ...

  @overload
  def save(self, output: ByteBuffer, IS_DEBUG_SAVE: bool) -> None: ...

  def setAccessLevel(self, newLvl: str) -> None: ...

  def setAllChatMuted(self, allChatMuted: bool) -> None: ...

  def setAllowRun(self, allowRun: bool) -> None: ...

  def setAllowSprint(self, allowSprint: bool) -> None: ...

  def setAsleepTime(self, AsleepTime: float) -> None: ...

  def setAttackAnimThrowTimer(self, dt: int) -> None: ...

  def setAttackFromBehind(self, attackFromBehind: bool) -> None: ...

  def setAttackType(self, attackType: str) -> None: ...

  def setAuthorizeMeleeAction(self, enabled: bool) -> None: ...

  def setAuthorizeShoveStomp(self, enabled: bool) -> None: ...

  def setBannedAttacking(self, b: bool) -> None: ...

  def setBlockMovement(self, blockMovement: bool) -> None: ...

  def setCanHearAll(self, b: bool) -> None: ...

  def setCanSeeAll(self, b: bool) -> None: ...

  def setClearSpottedTimer(self, ClearSpottedTimer: int) -> None: ...

  def setClimbOverWallStruggle(self, climbOverWallStruggle: bool) -> None: ...

  def setClimbOverWallSuccess(self, climbOverWallSuccess: bool) -> None: ...

  def setDialogMood(self, DialogMood: int) -> None: ...

  def setDisplayName(self, displayName: str) -> None: ...

  def setDragCharacter(self, DragCharacter: IsoSurvivor) -> None: ...

  def setDragObject(self, DragObject: IsoMovingObject) -> None: ...

  def setFactionPvp(self, pvp: bool) -> None: ...

  def setFitnessSpeed(self) -> None: ...

  def setFollowID(self, followID: int) -> None: ...

  def setForceAim(self, forceAim: bool) -> None: ...

  def setForceOverrideAnim(self, forceOverride: bool) -> None: ...

  def setForceRun(self, forceRun: bool) -> None: ...

  def setForceSprint(self, forceSprint: bool) -> None: ...

  def setForname(self, Forname: str) -> None: ...

  def setGhostMode(self, aGhostMode: bool) -> None: ...

  def setHeartDelay(self, heartDelay: float) -> None: ...

  def setHeartDelayMax(self, heartDelayMax: int) -> None: ...

  def setHoursSurvived(self, hrs: float) -> None: ...

  def setIgnoreAutoVault(self, ignoreAutoVault: bool) -> None: ...

  def setIgnoreContextKey(self, ignoreContextKey: bool) -> None: ...

  def setIgnoreInputsForDirection(self, ignoreInputsForDirection: bool) -> None: ...

  def setInitiateAttack(self, initiate: bool) -> None: ...

  def setJoypadIgnoreAimUntilCentered(self, ignore: bool) -> None: ...

  def setJustMoved(self, val: bool) -> None: ...

  def setLastAngle(self, lastAngle: Vector2) -> None: ...

  def setLastSpotted(self, LastSpotted: Stack[IsoMovingObject]) -> None: ...

  def setMaxWeightDelta(self, maxWeightDelta: float) -> None: ...

  @overload
  def setMeleeHitSurface(self, material: str) -> None: ...

  @overload
  def setMeleeHitSurface(self, material: ParameterMeleeHitSurface.Material) -> None: ...

  def setMoodleCantSprint(self, b: bool) -> None: ...

  def setMoveSpeed(self, moveSpeed: float) -> None: ...

  def setNetworkTeleportEnabled(self, b: bool) -> None: ...

  def setNoClip(self, noClip: bool) -> None: ...

  def setOffSetXUI(self, offSetXUI: int) -> None: ...

  def setOffSetYUI(self, offSetYUI: int) -> None: ...

  def setOnlineID(self, value: int) -> None: ...

  def setPathfindRunning(self, newvalue: bool) -> None: ...

  def setPerformingAnAction(self, val: bool) -> None: ...

  def setPing(self, ping: int) -> None: ...

  def setPlayerMoveDir(self, aPlayerMoveDir: Vector2) -> None: ...

  def setPlayerStats(self, bb: ByteBuffer, adminUsername: str) -> str: ...

  def setPosition(self, ax: float, ay: float, az: float) -> None: ...

  def setSeeNonPvpZone(self, seeNonPvpZone: bool) -> None: ...

  def setShowMPInfos(self, b: bool) -> None: ...

  def setShowTag(self, show: bool) -> None: ...

  def setSleepingPillsTaken(self, sleepingPillsTaken: int) -> None: ...

  def setSteamID(self, steamID: int) -> None: ...

  def setSurname(self, Surname: str) -> None: ...

  def setTagColor(self, tagColor: ColorInfo) -> None: ...

  def setTagPrefix(self, newTag: str) -> None: ...

  def setTicksSinceSeenZombie(self, TicksSinceSeenZombie: int) -> None: ...

  def setTimeSinceLastStab(self, timeSinceLastStab: float) -> None: ...

  def setTransactionID(self, transactionID: Integer) -> None: ...

  def setUsername(self, newUsername: str) -> None: ...

  def setVehicle4TestCollision(self, vehicle: BaseVehicle) -> None: ...

  def setVehicleHitLocation(self, vehicle: BaseVehicle) -> None: ...

  def setWaiting(self, Waiting: bool) -> None: ...

  def setWearingNightVisionGoggles(self, b: bool) -> None: ...

  def setbChangeCharacterDebounce(self, bChangeCharacterDebounce: bool) -> None: ...

  def setbCouldBeSeenThisFrame(self, bCouldBeSeenThisFrame: bool) -> None: ...

  def setbSeenThisFrame(self, bSeenThisFrame: bool) -> None: ...

  def shouldBeTurning(self) -> bool: ...

  def shouldDoInventory(self) -> bool: ...

  def startReceivingBodyDamageUpdates(self, other: IsoPlayer) -> None: ...

  def stopReceivingBodyDamageUpdates(self, other: IsoPlayer) -> None: ...

  def toggleForceAim(self) -> bool: ...

  def toggleForceRun(self) -> bool: ...

  def toggleForceSprint(self) -> bool: ...

  def update(self) -> None: ...

  def updateEnduranceWhileSitting(self) -> None: ...

  def updateLOS(self) -> None: ...

  def updateMovementRates(self) -> None: ...

  def updateUsername(self) -> None: ...

  def zombiesSwitchOwnershipEachUpdate(self) -> bool: ...

  @staticmethod
  def Reset() -> None: ...

  @staticmethod
  def UpdateRemovedEmitters() -> None: ...

  @staticmethod
  def allPlayersAsleep() -> bool: ...

  @staticmethod
  def allPlayersDead() -> bool: ...

  @staticmethod
  def getAllFileNames() -> ArrayList[str]: ...

  @staticmethod
  def getAllSavedPlayers() -> ArrayList[IsoPlayer]: ...

  @staticmethod
  def getCoopPVP() -> bool: ...

  @staticmethod
  def getFollowDeadCount() -> int: ...

  @staticmethod
  def getInstance() -> IsoPlayer: ...

  @staticmethod
  def getLocalPlayerByOnlineID(ID: int) -> IsoPlayer: ...

  @staticmethod
  def getPlayerIndex() -> int: ...

  @staticmethod
  def getPlayers() -> ArrayList[IsoPlayer]: ...

  @staticmethod
  def getStaticTraits() -> Stack[str]: ...

  @staticmethod
  def getUniqueFileName() -> str: ...

  @staticmethod
  def hasInstance() -> bool: ...

  @staticmethod
  def invokeOnPlayerInstance(callback: Runnable) -> None: ...

  @staticmethod
  def isServerPlayerIDValid(id: str) -> bool: ...

  @staticmethod
  def setCoopPVP(enabled: bool) -> None: ...

  @staticmethod
  def setFollowDeadCount(aFollowDeadCount: int) -> None: ...

  @staticmethod
  def setInstance(newInstance: IsoPlayer) -> None: ...

  @staticmethod
  def setLocalPlayer(index: int, newPlayerObj: IsoPlayer) -> None: ...

  @overload
  def __init__(self, cell: IsoCell):
    self.accesslevel: str

    self.attackstarted: bool

    self.bbannedattacking: bool

    self.bdeathfinished: bool

    self.bjoypadignoreaimuntilcentered: bool

    self.bjoypadignorechargingrt: bool

    self.bjoypadmovementactive: bool

    self.bleedinglevel: int

    self.bpresscontext: bool

    self.bremote: bool

    self.canhearall: bool

    self.canseeall: bool

    self.chargetime: float

    self.closestzombie: float

    self.contextpanic: float

    self.currentspeed: float

    self.dirtyrecalcgridstack: bool

    self.dirtyrecalcgridstacktime: float

    self.factionpvp: bool

    self.ischarging: bool

    self.ischarginglt: bool

    self.isspeek: bool

    self.isvoicemute: bool

    self.joypadbind: int

    self.l3pressed: bool

    self.lastangle: Vector2

    self.lastremoteupdate: int

    self.lasttargeted: float

    self.maxspeed: float

    self.maxweightdelta: float

    self.moodlecantsprint: bool

    self.mptorchcone: bool

    self.mptorchdist: float

    self.mptorchstrength: float

    self.networkai: NetworkPlayerAI

    self.numnearbybuildingsrooms: float

    self.onlinechunkgridwidth: int

    self.onlineid: int

    self.playerindex: int

    self.playermovedir: Vector2

    self.r3pressed: bool

    self.remotefitlvl: int

    self.remotesneaklvl: int

    self.remotestrlvl: int

    self.replay: ReplayManager

    self.runningtime: float

    self.savefilename: str

    self.serverplayerindex: int

    self.showtag: bool

    self.soundlistener: BaseSoundListener

    self.spottedbyplayer: bool

    self.sqlid: int

    self.tagprefix: str

    self.targetedbyzombie: bool

    self.timepressedcontext: float

    self.timesincelastnetdata: int

    self.timesinceopendoor: float

    self.usechargedelta: float

    self.usechargetime: float

    self.username: str

  @overload
  def __init__(self, cell: IsoCell, desc: SurvivorDesc, x: int, y: int, z: int): ...

  class InputState: ...

  class VehicleContainerData: ...

  class s_performance: ...

  class MoveVars: ...

  class VehicleContainer:

    def equals(self, arg0: object) -> bool: ...

    def set(self, arg0: BaseVehicle, arg1: int) -> IsoPlayer.VehicleContainer: ...


class IsoSurvivor(IsoLivingCharacter):

  def Despawn(self) -> None: ...

  def getObjectName(self) -> str: ...

  def reloadSpritePart(self) -> None: ...

  @overload
  def __init__(self, cell: IsoCell):
    self.collidepushable: IsoPushableObject

    self.draggable: bool

    self.following: IsoGameCharacter

    self.nightssurvived: int

    self.nogoredeath: bool

    self.ping: int

  @overload
  def __init__(self, cell: IsoCell, x: int, y: int, z: int): ...
  @overload
  def __init__(self, desc: SurvivorDesc, cell: IsoCell, x: int, y: int, z: int): ...
  @overload
  def __init__(self, desc: SurvivorDesc, cell: IsoCell, x: int, y: int, z: int, bSetInstance: bool): ...


class IsoZombie(IsoGameCharacter):

  AllowRepathDelayMax: int

  AttackAnimTimeMax: int

  CRAWLER_DAMAGE_DOT: float

  CRAWLER_DAMAGE_RANGE: float

  EAT_BODY_DIST: float

  EAT_BODY_TIME: float

  HEARING_NORMAL: int

  HEARING_PINPOINT: int

  HEARING_POOR: int

  HEARING_RANDOM: int

  LUNGE_TIME: float

  PALETTE_COUNT: int

  SPEED_FAST_SHAMBLER: int

  SPEED_RANDOM: int

  SPEED_SHAMBLER: int

  SPEED_SPRINTER: int

  SPRINTER_FIXES: bool

  THUMP_FLAG_GARAGE_DOOR: int

  THUMP_FLAG_GENERIC: int

  THUMP_FLAG_METAL: int

  THUMP_FLAG_WINDOW: int

  THUMP_FLAG_WINDOW_EXTRA: int

  def DoCorpseInventory(self) -> None: ...

  @overload
  def DoFootstepSound(self, volume: float) -> None: ...

  @overload
  def DoFootstepSound(self, type: str) -> None: ...

  def DoZombieInventory(self) -> None: ...

  def DoZombieSpeeds(self, spMod: float) -> None: ...

  def DoZombieStats(self) -> None: ...

  def GetAnimSetName(self) -> str: ...

  @overload
  def Hit(self, vehicle: BaseVehicle, speed: float, isHitFromBehind: bool, hitDir: Vector2) -> float: ...

  @overload
  def Hit(self, vehicle: BaseVehicle, speed: float, isHitFromBehind: bool, hitDirX: float, hitDirY: float) -> float: ...

  @overload
  def Hit(self, weapon: HandWeapon, wielder: IsoGameCharacter, damageSplit: float, bIgnoreDamage: bool, modDelta: float, bRemote: bool) -> float: ...

  @overload
  def InitSpritePartsZombie(self) -> None: ...

  @overload
  def InitSpritePartsZombie(self, desc: SurvivorDesc) -> None: ...

  @overload
  def Kill(self, killer: IsoGameCharacter) -> None: ...

  @overload
  def Kill(self, killer: IsoGameCharacter, bGory: bool) -> None: ...

  def Move(self, dir: Vector2) -> None: ...

  def MoveUnmodded(self, dir: Vector2) -> None: ...

  def RespondToSound(self) -> None: ...

  def Wander(self) -> None: ...

  def WanderFromWindow(self) -> bool: ...

  def actionStateChanged(self, sender: ActionContext) -> None: ...

  def addAggro(self, other: IsoMovingObject, damage: float) -> None: ...

  def addBlood(self, speed: float) -> None: ...

  def addItemToSpawnAtDeath(self, item: InventoryItem) -> None: ...

  def addRandomBloodDirtHolesEtc(self) -> None: ...

  def addRandomVisualBandages(self) -> None: ...

  def addRandomVisualDamages(self) -> None: ...

  def addVisualBandage(self, bodyPart: BodyPartType, bloody: bool) -> None: ...

  def applyDamageFromVehicle(self, vehicleSpeed: float, damage: float) -> None: ...

  def becomeCorpse(self) -> None: ...

  def calcHitDir(self, wielder: IsoGameCharacter, weapon: HandWeapon, out: Vector2) -> Float: ...

  def canBeDeletedUnnoticed(self, minDistance: float) -> bool: ...

  def clearAggroList(self) -> None: ...

  def clearItemsToSpawnAtDeath(self) -> None: ...

  def clothingItemChanged(self, itemGuid: str) -> None: ...

  def collideWith(self, obj: IsoObject) -> None: ...

  def dressInClothingItem(self, itemGUID: str) -> None: ...

  def dressInNamedOutfit(self, outfitName: str) -> None: ...

  def dressInPersistentOutfitID(self, outfitID: int) -> None: ...

  def dressInRandomOutfit(self) -> None: ...

  def getActionContext(self) -> ActionContext: ...

  def getCrawlerType(self) -> int: ...

  def getEatBodyTarget(self) -> IsoMovingObject: ...

  def getEatSpeed(self) -> float: ...

  def getFootstepVolume(self) -> float: ...

  def getHitAngle(self) -> Vector2: ...

  def getHitHeadWhileOnFloor(self) -> int: ...

  def getHitReactionNetworkAI(self) -> HitReactionNetworkAI: ...

  def getHitTime(self) -> int: ...

  @overload
  def getHumanVisual(self) -> HumanVisual: ...

  @overload
  def getHumanVisual(self) -> HumanVisual: ...

  @overload
  def getItemVisuals(self) -> ItemVisuals: ...

  @overload
  def getItemVisuals(self, itemVisuals: ItemVisuals) -> None: ...

  @overload
  def getItemVisuals(self, itemVisuals: ItemVisuals) -> None: ...

  def getNetworkCharacterAI(self) -> NetworkCharacterAI: ...

  def getObjectName(self) -> str: ...

  def getOnlineID(self) -> int: ...

  def getPlayerAttackPosition(self) -> str: ...

  def getRealState(self) -> str: ...

  def getReanimatedPlayer(self) -> IsoPlayer: ...

  def getScreenProperX(self, playerIndex: int) -> int: ...

  def getScreenProperY(self, playerIndex: int) -> int: ...

  def getSharedDescriptor(self) -> SharedDescriptors.Descriptor: ...

  def getSharedDescriptorID(self) -> int: ...

  def getTarget(self) -> IsoMovingObject: ...

  def getTargetSeenTime(self) -> float: ...

  def getThumpCondition(self) -> float: ...

  def getThumpTimer(self) -> int: ...

  def getTurnDelta(self) -> float: ...

  def getVisual(self) -> BaseVisual: ...

  def getZombieLungeSpeed(self) -> None: ...

  def getZombieWalkTowardSpeed(self, speed: float, dist: float, temp: Vector2) -> None: ...

  def hitConsequences(self, weapon: HandWeapon, wielder: IsoGameCharacter, bIgnoreDamage: bool, damage: float, bRemote: bool) -> None: ...

  def initCanCrawlUnderVehicle(self) -> None: ...

  def initializeStates(self) -> None: ...

  def isAlwaysKnockedDown(self) -> bool: ...

  def isAttacking(self) -> bool: ...

  def isBecomeCrawler(self) -> bool: ...

  def isCanCrawlUnderVehicle(self) -> bool: ...

  def isCanWalk(self) -> bool: ...

  def isCrawling(self) -> bool: ...

  def isFacingTarget(self) -> bool: ...

  def isFakeDead(self) -> bool: ...

  def isFemale(self) -> bool: ...

  def isForceEatingAnimation(self) -> bool: ...

  def isForceFakeDead(self) -> bool: ...

  def isHitLegsWhileOnFloor(self) -> bool: ...

  def isJawStabAttach(self) -> bool: ...

  def isKnifeDeath(self) -> bool: ...

  def isLeadAggro(self, other: IsoMovingObject) -> bool: ...

  def isLocal(self) -> bool: ...

  def isNoTeeth(self) -> bool: ...

  def isOnlyJawStab(self) -> bool: ...

  def isProne(self) -> bool: ...

  def isPushableForSeparate(self) -> bool: ...

  def isPushedByForSeparate(self, other: IsoMovingObject) -> bool: ...

  def isReanimate(self) -> bool: ...

  def isReanimatedPlayer(self) -> bool: ...

  def isRemoteZombie(self) -> bool: ...

  def isSitAgainstWall(self) -> bool: ...

  @overload
  def isSkeleton(self) -> bool: ...

  @overload
  def isSkeleton(self) -> bool: ...

  def isSolidForSeparate(self) -> bool: ...

  def isStaggerBack(self) -> bool: ...

  def isTargetInCone(self, dist: float, dot: float) -> bool: ...

  def isTargetLocationKnown(self) -> bool: ...

  def isTargetVisible(self) -> bool: ...

  def isUseless(self) -> bool: ...

  def isUsingWornItems(self) -> bool: ...

  def isVehicleCollisionActive(self, testVehicle: BaseVehicle) -> bool: ...

  @overload
  def isZombie(self) -> bool: ...

  @overload
  def isZombie(self) -> bool: ...

  @overload
  def isZombieAttacking(self) -> bool: ...

  @overload
  def isZombieAttacking(self, other: IsoMovingObject) -> bool: ...

  def knockDown(self, hitFromBehind: bool) -> None: ...

  def load(self, input: ByteBuffer, WorldVersion: int, IS_DEBUG_SAVE: bool) -> None: ...

  def makeInactive(self, binactive: bool) -> None: ...

  def onMouseLeftClick(self) -> None: ...

  def onWornItemsChanged(self) -> None: ...

  def pathToCharacter(self, target: IsoGameCharacter) -> None: ...

  def pathToLocationF(self, x: float, y: float, z: float) -> None: ...

  def playHurtSound(self) -> None: ...

  def postupdate(self) -> None: ...

  def preupdate(self) -> None: ...

  def removeFromWorld(self) -> None: ...

  def render(self, x: float, y: float, z: float, col: ColorInfo, bDoChild: bool, bWallLightingPass: bool, shader: Shader) -> None: ...

  def renderlast(self) -> None: ...

  def resetForReuse(self) -> None: ...

  def save(self, output: ByteBuffer, IS_DEBUG_SAVE: bool) -> None: ...

  def setAlwaysKnockedDown(self, alwaysKnockedDown: bool) -> None: ...

  def setAsSurvivor(self) -> None: ...

  def setBecomeCrawler(self, crawler: bool) -> None: ...

  def setBodyToEat(self, body: IsoDeadBody) -> None: ...

  def setCanCrawlUnderVehicle(self, b: bool) -> None: ...

  def setCanWalk(self, bCanStand: bool) -> None: ...

  def setCrawler(self, crawling: bool) -> None: ...

  def setCrawlerType(self, crawlerType: int) -> None: ...

  def setDressInRandomOutfit(self, dressInRandom: bool) -> None: ...

  @overload
  def setEatBodyTarget(self, target: IsoMovingObject, force: bool) -> None: ...

  @overload
  def setEatBodyTarget(self, target: IsoMovingObject, force: bool, eatSpeed: float) -> None: ...

  def setFakeDead(self, bFakeDead: bool) -> None: ...

  def setFemaleEtc(self, female: bool) -> None: ...

  def setForceEatingAnimation(self, forceEatingAnimation: bool) -> None: ...

  def setForceFakeDead(self, bForceFakeDead: bool) -> None: ...

  def setHitAngle(self, hitAngle: Vector2) -> None: ...

  def setHitHeadWhileOnFloor(self, hitHeadWhileOnFloor: int) -> None: ...

  def setHitLegsWhileOnFloor(self, hitLegsWhileOnFloor: bool) -> None: ...

  def setHitTime(self, hitTime: int) -> None: ...

  def setImmortalTutorialZombie(self, immortal: bool) -> None: ...

  def setJawStabAttach(self, bJawStabAttach: bool) -> None: ...

  def setKnifeDeath(self, bKnifeDeath: bool) -> None: ...

  def setNoTeeth(self, noTeeth: bool) -> None: ...

  def setOnlyJawStab(self, onlyJawStab: bool) -> None: ...

  def setPlayerAttackPosition(self, playerAttackPosition: str) -> None: ...

  def setReanimate(self, reanimate: bool) -> None: ...

  def setReanimatedPlayer(self, reanimated: bool) -> None: ...

  def setSitAgainstWall(self, sitAgainstWall: bool) -> None: ...

  def setSkeleton(self, isSkeleton: bool) -> None: ...

  def setStaggerBack(self, bStaggerBack: bool) -> None: ...

  def setTarget(self, t: IsoMovingObject) -> None: ...

  def setTargetSeenTime(self, seconds: float) -> None: ...

  @overload
  def setThumpCondition(self, condition: float) -> None: ...

  @overload
  def setThumpCondition(self, condition: int, maxCondition: int) -> None: ...

  def setThumpFlag(self, v: int) -> None: ...

  def setThumpTimer(self, thumpTimer: int) -> None: ...

  def setTurnAlertedValues(self, soundX: int, soundY: int) -> None: ...

  def setUseless(self, useless: bool) -> None: ...

  def setVehicle4TestCollision(self, vehicle: BaseVehicle) -> None: ...

  def setVehicleHitLocation(self, vehicle: BaseVehicle) -> None: ...

  def setWalkType(self, _walkType: str) -> None: ...

  def setWasFakeDead(self, wasFakeDead: bool) -> None: ...

  def shouldDoFenceLunge(self) -> bool: ...

  def shouldDoInventory(self) -> bool: ...

  def shouldGetUpFromCrawl(self) -> bool: ...

  def spotted(self, other: IsoMovingObject, bForced: bool) -> None: ...

  def testCollideWithVehicles(self, vehicle: BaseVehicle) -> bool: ...

  def toggleCrawling(self) -> None: ...

  def tryThump(self, square: IsoGridSquare) -> bool: ...

  def update(self) -> None: ...

  def updateVocalProperties(self) -> None: ...

  def useDescriptor(self, sharedDesc: SharedDescriptors.Descriptor) -> None: ...

  def wasFakeDead(self) -> bool: ...

  def wasLocal(self) -> bool: ...

  def writeInventory(self, b: ByteBuffer) -> None: ...

  @overload
  def __init__(self, cell: IsoCell):
    self.alerted: bool

    self.allowrepathdelay: float

    self.atlastex: DeadBodyAtlas.BodyTexture

    self.attackanimtime: int

    self.authowner: UdpConnection

    self.authownerplayer: IsoPlayer

    self.bcrawling: bool

    self.bdressinrandomoutfit: bool

    self.bindoorzombie: bool

    self.blunger: bool

    self.bodytoeat: IsoDeadBody

    self.bremote: bool

    self.brunning: bool

    self.bstaggerback: bool

    self.cognition: int

    self.collidewhilehit: bool

    self.eatbodytarget: IsoMovingObject

    self.followcount: int

    self.ghost: bool

    self.group: ZombieGroup

    self.hearing: int

    self.immortaltutorialzombie: bool

    self.inactive: bool

    self.keepitreal: bool

    self.laceration: bool

    self.lastchangeowner: int

    self.lastplayerhit: int

    self.lastremoteupdate: int

    self.lasttargetseenx: int

    self.lasttargetseeny: int

    self.lasttargetseenz: int

    self.lungesoundtime: int

    self.lungetimer: float

    self.memory: int

    self.movex: float

    self.movey: float

    self.networkai: NetworkZombieAI

    self.onlineid: int

    self.palette: int

    self.parametercharacterinside: ParameterCharacterInside

    self.parameterplayerdistance: ParameterPlayerDistance

    self.parameterzombiestate: ParameterZombieState

    self.pendingoutfitname: str

    self.scratch: bool

    self.sight: int

    self.soundattract: float

    self.soundattracttimeout: float

    self.soundsourcetarget: object

    self.speedtype: int

    self.spotsounddelay: int

    self.spottedlast: IsoMovingObject

    self.spritename: str

    self.strength: int

    self.target: IsoMovingObject

    self.thumpflag: int

    self.thumpsent: bool

    self.timesinceseenflesh: float

    self.vectortotarget: Vector2

    self.walkvariant: str

    self.walkvariantuse: str

    self.zombieid: int

    self.zombiepacket: ZombiePacket

    self.zombiepacketupdated: bool

  @overload
  def __init__(self, cell: IsoCell, desc: SurvivorDesc, _palette: int): ...

  class Aggro:

    def addDamage(self, arg0: float) -> None: ...

    def getAggro(self) -> float: ...

    def __init__(self, arg0: IsoMovingObject, arg1: float): ...

  class s_performance: ...

  class FloodFill: ...

  class ZombieSound(Enum):

    Burned: IsoZombie.ZombieSound

    DeadCloseKilled: IsoZombie.ZombieSound

    DeadNotCloseKilled: IsoZombie.ZombieSound

    Hurt: IsoZombie.ZombieSound

    Idle: IsoZombie.ZombieSound

    Lunge: IsoZombie.ZombieSound

    MAX: IsoZombie.ZombieSound

    def radius(self) -> int: ...

    @staticmethod
    def fromIndex(index: int) -> IsoZombie.ZombieSound: ...

    @staticmethod
    def valueOf(arg0: str) -> IsoZombie.ZombieSound: ...

    @staticmethod
    def values() -> list[IsoZombie.ZombieSound]: ...


class MPDebugAI:

  @staticmethod
  def getNearestPlayer(target: IsoPlayer) -> IsoPlayer: ...

  @staticmethod
  def updateInputState(player: IsoPlayer, state: IsoPlayer.InputState) -> bool: ...

  @staticmethod
  def updateMovementFromInput(player: IsoPlayer, moveVars: IsoPlayer.MoveVars) -> bool: ...

  def __init__(self): ...


class MoveDeltaModifiers:

  def __init__(self):
    self.movedelta: float
    self.turndelta: float
    self.twistdelta: float


class NetworkCharacter:

  def checkReset(self, t: int) -> None: ...

  def checkResetPlayer(self, t: int) -> None: ...

  def predict(self, dt: int, t: int, px: float, py: float, rx: float, ry: float) -> NetworkCharacter.Transform: ...

  def reconstruct(self, t: int, px: float, py: float, rx: float, ry: float) -> NetworkCharacter.Transform: ...

  def reset(self) -> None: ...

  def updateExtrapolationPoint(self, t: int, px: float, py: float, rx: float, ry: float) -> None: ...

  def updateInterpolationPoint(self, t: int, px: float, py: float, rx: float, ry: float) -> None: ...

  def updatePointInternal(self, px: float, py: float, rx: float, ry: float) -> None: ...

  def updateTransform(self, px: float, py: float, rx: float, ry: float) -> None: ...

  def __init__(self):
    self.transform: NetworkCharacter.Transform

  class Transform:

    def __init__(self):
      self.moving: bool
      self.operation: NetworkCharacter.Operation
      self.position: Vector2
      self.rotation: Vector2
      self.time: int

  class Point: ...

  class Operation(Enum):

    EXTRAPOLATION: NetworkCharacter.Operation

    INTERPOLATION: NetworkCharacter.Operation

    NONE: NetworkCharacter.Operation

    @staticmethod
    def valueOf(arg0: str) -> NetworkCharacter.Operation: ...

    @staticmethod
    def values() -> list[NetworkCharacter.Operation]: ...


class NetworkCharacterAI:

  def addTeleportData(self, time: int, prediction: str) -> None: ...

  def checkPosition(self, connection: UdpConnection, character: IsoGameCharacter, x: float, y: float) -> bool: ...

  def clearTeleportDebug(self) -> None: ...

  def getAction(self) -> BaseAction: ...

  def getPerformingAction(self) -> str: ...

  def getTeleportDebug(self) -> NetworkTeleport.NetworkTeleportDebug: ...

  def isCollisionEnabled(self) -> bool: ...

  def isNoCollisionTimeout(self) -> bool: ...

  def isSetDeadBody(self) -> bool: ...

  def isSetVehicleHit(self) -> bool: ...

  def isVehicleHitTimeout(self) -> bool: ...

  def processDeadBody(self) -> None: ...

  def processVehicleHit(self) -> None: ...

  def reset(self) -> None: ...

  def resetSpeedLimiter(self) -> None: ...

  def resetVehicleHitTimeout(self) -> None: ...

  def setAction(self, action: BaseAction) -> None: ...

  def setDeadBody(self, packet: DeadCharacterPacket) -> None: ...

  def setLocal(self, wasLocal: bool) -> None: ...

  def setNoCollision(self, interval: int) -> None: ...

  def setOverride(self, override: bool, primaryHandModel: str, secondaryHandModel: str) -> None: ...

  def setPerformingAction(self, animation: str) -> None: ...

  def setTeleportDebug(self, teleportDebug: NetworkTeleport.NetworkTeleportDebug) -> None: ...

  def setVehicleHit(self, packet: VehicleHitPacket) -> None: ...

  def startAction(self) -> None: ...

  def stopAction(self) -> None: ...

  def updateHitVehicle(self) -> None: ...

  def wasLocal(self) -> bool: ...

  def __init__(self, character: IsoGameCharacter):
    self.debugdata: HashMap[Integer, str]
    self.predictiontype: NetworkVariables.PredictionTypes
    self.teleportdebug: NetworkTeleport.NetworkTeleportDebug

  class SpeedChecker:

    def getDescription(self) -> str: ...

    @overload
    def getSpeed(self) -> float: ...

    @overload
    def getSpeed(self) -> float: ...

    @overload
    def isVehicle(self) -> bool: ...

    @overload
    def isVehicle(self) -> bool: ...


class NetworkPlayerAI(NetworkCharacterAI):

  def doCheckAccessLevel(self) -> bool: ...

  def isDismantleAllowed(self) -> bool: ...

  def isNeedToUpdate(self) -> bool: ...

  def isPressedCancelAction(self) -> bool: ...

  def isPressedMovement(self) -> bool: ...

  def needToUpdate(self) -> None: ...

  def parse(self, packet: PlayerPacket) -> None: ...

  def set(self, packet: PlayerPacket) -> bool: ...

  def setBlockUpdate(self, value: bool) -> None: ...

  def setCheckAccessLevelDelay(self, delay: int) -> None: ...

  def setPressedCancelAction(self, pressedCancelAction: bool) -> None: ...

  def setPressedMovement(self, pressedMovement: bool) -> None: ...

  def setUpdateTimer(self, nextTimerValue: float) -> None: ...

  def update(self) -> None: ...

  def __init__(self, character: IsoGameCharacter):
    self.climbfenceoutcomefall: bool
    self.collidepointx: float
    self.collidepointy: float
    self.direction: Vector2
    self.distance: Vector2
    self.events: LinkedList[EventPacket]
    self.footstepsoundradius: int
    self.forcepathfinder: bool
    self.lastbooleanvariables: int
    self.lastforwarddirection: float
    self.lastplayermovedirlen: float
    self.moving: bool
    self.needtomovingusingpathfinder: bool
    self.targetx: float
    self.targety: float
    self.targetz: int
    self.usepathfind: bool


class NetworkPlayerVariables:

  @staticmethod
  def getBooleanVariables(isoPlayer: IsoPlayer) -> int: ...

  @staticmethod
  def setBooleanVariables(isoPlayer: IsoPlayer, val: int) -> None: ...

  def __init__(self): ...


class NetworkTeleport:

  enable: bool

  enableInstantTeleport: bool

  def process(self, playerIndex: int) -> None: ...

  def stop(self, playerIndex: int) -> None: ...

  @staticmethod
  @overload
  def teleport(chr: IsoGameCharacter, packet: PlayerPacket, _duration: float) -> bool: ...

  @staticmethod
  @overload
  def teleport(chr: IsoGameCharacter, type: NetworkTeleport.Type, x: float, y: float, z: int, _duration: float) -> bool: ...

  @staticmethod
  def update(chr: IsoGameCharacter, packet: PlayerPacket) -> None: ...

  def __init__(self, chr: IsoGameCharacter, type: NetworkTeleport.Type, x: float, y: float, z: int, _duration: float):
    self.ndirection: float

  class Type(Enum):

    disappearing: NetworkTeleport.Type

    materialization: NetworkTeleport.Type

    none: NetworkTeleport.Type

    teleportation: NetworkTeleport.Type

    @staticmethod
    def valueOf(arg0: str) -> NetworkTeleport.Type: ...

    @staticmethod
    def values() -> list[NetworkTeleport.Type]: ...

  class NetworkTeleportDebug:

    def getDistance(self) -> float: ...

    def __init__(self, id: int, lx: float, ly: float, lz: float, nx: float, ny: float, nz: float, type: NetworkVariables.PredictionTypes): ...


class NetworkZombieAI(NetworkCharacterAI):

  def extraUpdate(self) -> None: ...

  def parse(self, packet: ZombiePacket) -> None: ...

  def preupdate(self) -> None: ...

  def reset(self) -> None: ...

  def set(self, packet: ZombiePacket) -> None: ...

  def setUpdateTimer(self, time: float) -> None: ...

  @staticmethod
  def getPredictionDebug(character: IsoGameCharacter, packet: ZombiePacket, currentTime: int, next: int) -> str: ...

  def __init__(self, character: IsoGameCharacter):
    self.debuginterfaceactive: bool
    self.isclimbing: bool
    self.mindsync: NetworkZombieMind
    self.reanimatedbodyid: int
    self.targetx: float
    self.targety: float
    self.targetz: int
    self.usepathfind: bool
    self.zombie: IsoZombie


class NetworkZombieMind:

  def doRestorePFBTarget(self) -> None: ...

  def parse(self, packet: ZombiePacket) -> None: ...

  def restorePFBTarget(self) -> None: ...

  def set(self, packet: ZombiePacket) -> None: ...

  def zombieIdleUpdate(self) -> None: ...

  def __init__(self, zombie: IsoZombie): ...


class NetworkZombieVariables:

  @staticmethod
  def getBooleanVariables(zombie: IsoZombie) -> int: ...

  @staticmethod
  def getInt(zombie: IsoZombie, id: int) -> int: ...

  @staticmethod
  def setBooleanVariables(zombie: IsoZombie, val: int) -> None: ...

  @staticmethod
  def setInt(zombie: IsoZombie, id: int, value: int) -> None: ...

  def __init__(self): ...

  class VariablesInt:

    health: int

    MAX: int

    smParamTargetAngle: int

    speedMod: int

    target: int

    timeSinceSeenFlesh: int

    def __init__(self): ...


class Safety:

  def copyFrom(self, other: Safety) -> None: ...

  def getCharacter(self) -> object: ...

  def getCooldown(self) -> float: ...

  def getDescription(self) -> str: ...

  def getToggle(self) -> float: ...

  def isEnabled(self) -> bool: ...

  def isLast(self) -> bool: ...

  def isToggleAllowed(self) -> bool: ...

  def load(self, input: ByteBuffer, WorldVersion: int) -> None: ...

  def save(self, output: ByteBuffer) -> None: ...

  def setCooldown(self, cooldown: float) -> None: ...

  def setEnabled(self, enabled: bool) -> None: ...

  def setLast(self, last: bool) -> None: ...

  def setToggle(self, toggle: float) -> None: ...

  def toggleSafety(self) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, character: IsoGameCharacter): ...


class SafetySystemManager:

  @staticmethod
  def checkUpdateDelay(wielder: IsoGameCharacter, target: IsoGameCharacter) -> bool: ...

  @staticmethod
  def clear() -> None: ...

  @staticmethod
  def clearSafety(player: IsoPlayer) -> None: ...

  @staticmethod
  def restoreSafety(player: IsoPlayer) -> None: ...

  @staticmethod
  def storeSafety(player: IsoPlayer) -> None: ...

  @staticmethod
  def updateOptions() -> None: ...

  def __init__(self): ...


class Stance(Enum):

  Haste: Stance

  Normal: Stance

  Stealth: Stance

  @staticmethod
  def valueOf(arg0: str) -> Stance: ...

  @staticmethod
  def values() -> list[Stance]: ...


class Stats:

  NumCloseZombies: int

  def getAnger(self) -> float: ...

  def getBoredom(self) -> float: ...

  def getDrunkenness(self) -> float: ...

  def getEndurance(self) -> float: ...

  def getEnduranceRecharging(self) -> bool: ...

  def getEndurancedanger(self) -> float: ...

  def getEndurancelast(self) -> float: ...

  def getEndurancewarn(self) -> float: ...

  def getFatigue(self) -> float: ...

  def getFear(self) -> float: ...

  def getFitness(self) -> float: ...

  def getHunger(self) -> float: ...

  def getIdleboredom(self) -> float: ...

  def getMaxStressFromCigarettes(self) -> float: ...

  def getMorale(self) -> float: ...

  def getNumChasingZombies(self) -> int: ...

  def getNumVeryCloseZombies(self) -> int: ...

  def getNumVisibleZombies(self) -> int: ...

  def getPain(self) -> float: ...

  def getPanic(self) -> float: ...

  def getSanity(self) -> float: ...

  def getSickness(self) -> float: ...

  def getStress(self) -> float: ...

  def getStressFromCigarettes(self) -> float: ...

  def getThirst(self) -> float: ...

  def getTrippingRotAngle(self) -> float: ...

  def getVisibleZombies(self) -> int: ...

  def isTripping(self) -> bool: ...

  @overload
  def load(self, input: DataInputStream) -> None: ...

  @overload
  def load(self, input: ByteBuffer, WorldVersion: int) -> None: ...

  def resetStats(self) -> None: ...

  @overload
  def save(self, output: DataOutputStream) -> None: ...

  @overload
  def save(self, output: ByteBuffer) -> None: ...

  def setAnger(self, Anger: float) -> None: ...

  def setBoredom(self, boredom: float) -> None: ...

  def setDrunkenness(self, Drunkenness: float) -> None: ...

  def setEndurance(self, endurance: float) -> None: ...

  def setEndurancedanger(self, endurancedanger: float) -> None: ...

  def setEndurancelast(self, endurancelast: float) -> None: ...

  def setEndurancewarn(self, endurancewarn: float) -> None: ...

  def setFatigue(self, fatigue: float) -> None: ...

  def setFear(self, Fear: float) -> None: ...

  def setFitness(self, fitness: float) -> None: ...

  def setHunger(self, hunger: float) -> None: ...

  def setIdleboredom(self, idleboredom: float) -> None: ...

  def setMorale(self, morale: float) -> None: ...

  def setNumVisibleZombies(self, NumVisibleZombies: int) -> None: ...

  def setPain(self, Pain: float) -> None: ...

  def setPanic(self, Panic: float) -> None: ...

  def setSanity(self, Sanity: float) -> None: ...

  def setSickness(self, Sickness: float) -> None: ...

  def setStress(self, stress: float) -> None: ...

  def setStressFromCigarettes(self, stressFromCigarettes: float) -> None: ...

  def setThirst(self, thirst: float) -> None: ...

  def setTripping(self, Tripping: bool) -> None: ...

  def setTrippingRotAngle(self, TrippingRotAngle: float) -> None: ...

  def __init__(self):
    self.anger: float
    self.boredom: float
    self.chasingzombiesdanger: float
    self.drunkenness: float
    self.endurance: float
    self.endurancedanger: float
    self.endurancelast: float
    self.endurancerecharging: bool
    self.endurancewarn: float
    self.fatigue: float
    self.fear: float
    self.fitness: float
    self.hunger: float
    self.idleboredom: float
    self.lastnumchasingzombies: int
    self.lastnumvisiblezombies: int
    self.lastveryclosezombies: int
    self.morale: float
    self.musiczombiestargeting: int
    self.musiczombiesvisible: int
    self.numchasingzombies: int
    self.numvisiblezombies: int
    self.pain: float
    self.panic: float
    self.sanity: float
    self.sickness: float
    self.stress: float
    self.stressfromcigarettes: float
    self.thirst: float
    self.tripping: bool
    self.trippingrotangle: float


class SurvivorDesc:

  HairCommonColors: ArrayList[ImmutableColor]

  TrouserCommonColors: ArrayList[Color]

  def addObservation(self, obv: str) -> None: ...

  def dressInNamedOutfit(self, outfitName: str) -> None: ...

  def getAggressiveness(self) -> float: ...

  def getBravery(self) -> float: ...

  def getCalculatedToughness(self) -> int: ...

  def getCommonHairColor(self) -> ArrayList[ImmutableColor]: ...

  def getCompassion(self) -> float: ...

  def getExtras(self) -> ArrayList[str]: ...

  def getFavourindoors(self) -> float: ...

  def getForename(self) -> str: ...

  def getFriendliness(self) -> float: ...

  def getGroup(self) -> SurvivorGroup: ...

  @overload
  def getHumanVisual(self) -> HumanVisual: ...

  @overload
  def getHumanVisual(self) -> HumanVisual: ...

  def getID(self) -> int: ...

  def getInstance(self) -> IsoGameCharacter: ...

  def getInventoryScript(self) -> str: ...

  @overload
  def getItemVisuals(self, itemVisuals: ItemVisuals) -> None: ...

  @overload
  def getItemVisuals(self, itemVisuals: ItemVisuals) -> None: ...

  def getLoner(self) -> float: ...

  def getLoyalty(self) -> float: ...

  @overload
  def getMetCount(self) -> HashMap[Integer, Integer]: ...

  @overload
  def getMetCount(self, descriptor: SurvivorDesc) -> int: ...

  def getMeta(self) -> KahluaTable: ...

  def getObservations(self) -> ArrayList[ObservationFactory.Observation]: ...

  def getProfession(self) -> str: ...

  def getSurname(self) -> str: ...

  def getTemper(self) -> float: ...

  def getTorso(self) -> str: ...

  def getType(self) -> SurvivorFactory.SurvivorType: ...

  def getWornItem(self, bodyLocation: str) -> InventoryItem: ...

  def getWornItems(self) -> WornItems: ...

  def getXPBoostMap(self) -> HashMap[PerkFactory.Perk, Integer]: ...

  def hasObservation(self, o: str) -> bool: ...

  def isAggressive(self) -> bool: ...

  def isDead(self) -> bool: ...

  @overload
  def isFemale(self) -> bool: ...

  @overload
  def isFemale(self) -> bool: ...

  def isFriendly(self) -> bool: ...

  def isLeader(self) -> bool: ...

  @overload
  def isSkeleton(self) -> bool: ...

  @overload
  def isSkeleton(self) -> bool: ...

  @overload
  def isZombie(self) -> bool: ...

  @overload
  def isZombie(self) -> bool: ...

  def load(self, input: ByteBuffer, WorldVersion: int, chr: IsoGameCharacter) -> None: ...

  def loadCompact(self, input: ByteBuffer) -> None: ...

  def meet(self, desc: SurvivorDesc) -> None: ...

  def save(self, output: ByteBuffer) -> None: ...

  def saveCompact(self, output: ByteBuffer) -> None: ...

  def setAggressiveness(self, aggressiveness: float) -> None: ...

  def setBravery(self, bravery: float) -> None: ...

  def setCompassion(self, compassion: float) -> None: ...

  def setFavourindoors(self, favourindoors: float) -> None: ...

  def setFemale(self, bFemale: bool) -> None: ...

  def setForename(self, forename: str) -> None: ...

  def setFriendliness(self, friendliness: float) -> None: ...

  def setID(self, ID: int) -> None: ...

  def setInstance(self, Instance: IsoGameCharacter) -> None: ...

  def setInventoryScript(self, InventoryScript: str) -> None: ...

  def setLoner(self, loner: float) -> None: ...

  def setLoyalty(self, loyalty: float) -> None: ...

  def setProfession(self, Profession: str) -> None: ...

  def setProfessionSkills(self, profession: ProfessionFactory.Profession) -> None: ...

  def setSurname(self, surname: str) -> None: ...

  def setTemper(self, temper: float) -> None: ...

  def setTorso(self, torso: str) -> None: ...

  def setType(self, type: SurvivorFactory.SurvivorType) -> None: ...

  def setWornItem(self, bodyLocation: str, item: InventoryItem) -> None: ...

  @staticmethod
  def addHairColor(color: ColorInfo) -> None: ...

  @staticmethod
  def addTrouserColor(color: ColorInfo) -> None: ...

  @staticmethod
  def getIDCount() -> int: ...

  @staticmethod
  def getRandomSkinColor() -> Color: ...

  @staticmethod
  def setIDCount(aIDCount: int) -> None: ...

  @overload
  def __init__(self):
    self.bdead: bool

    self.extra: ArrayList[str]

    self.humanvisual: HumanVisual

    self.profession: str

    self.wornitems: WornItems

  @overload
  def __init__(self, bNew: bool): ...
  @overload
  def __init__(self, other: SurvivorDesc): ...


class SurvivorFactory:

  FemaleForenames: ArrayList[str]

  MaleForenames: ArrayList[str]

  Surnames: ArrayList[str]

  @staticmethod
  def CreateFamily(nCount: int) -> list[SurvivorDesc]: ...

  @staticmethod
  @overload
  def CreateSurvivor() -> SurvivorDesc: ...

  @staticmethod
  @overload
  def CreateSurvivor(survivorType: SurvivorFactory.SurvivorType) -> SurvivorDesc: ...

  @staticmethod
  @overload
  def CreateSurvivor(survivorType: SurvivorFactory.SurvivorType, bFemale: bool) -> SurvivorDesc: ...

  @staticmethod
  def CreateSurvivorGroup(nCount: int) -> list[SurvivorDesc]: ...

  @staticmethod
  def InstansiateInCell(desc: SurvivorDesc, cell: IsoCell, x: int, y: int, z: int) -> IsoSurvivor: ...

  @staticmethod
  def Reset() -> None: ...

  @staticmethod
  def addFemaleForename(forename: str) -> None: ...

  @staticmethod
  def addMaleForename(forename: str) -> None: ...

  @staticmethod
  def addSurname(surName: str) -> None: ...

  @staticmethod
  def getRandomForename(bFemale: bool) -> str: ...

  @staticmethod
  def getRandomSurname() -> str: ...

  @staticmethod
  def randomName(desc: SurvivorDesc) -> None: ...

  @staticmethod
  def setTorso(survivor: SurvivorDesc) -> None: ...

  def __init__(self): ...

  class SurvivorType(Enum):

    Aggressive: SurvivorFactory.SurvivorType

    Friendly: SurvivorFactory.SurvivorType

    Neutral: SurvivorFactory.SurvivorType

    @staticmethod
    def valueOf(arg0: str) -> SurvivorFactory.SurvivorType: ...

    @staticmethod
    def values() -> list[SurvivorFactory.SurvivorType]: ...


class SurvivorGroup:

  def addMember(self, member: SurvivorDesc) -> None: ...

  def getLeader(self) -> SurvivorDesc: ...

  def isLeader(self, member: SurvivorDesc) -> bool: ...

  def removeMember(self, member: SurvivorDesc) -> None: ...

  def __init__(self):
    self.members: ArrayList[SurvivorDesc]
    self.order: str
    self.safehouse: BuildingDef


class Talker:

  def IsSpeaking(self) -> bool: ...

  def Say(self, line: str) -> None: ...

  def getSayLine(self) -> str: ...

  def getTalkerType(self) -> str: ...


class TestZombieInterpolate(Assert):

  def test_all(self) -> None: ...

  def test_case1(self) -> None: ...

  def test_predictor(self) -> None: ...

  def test_predictor_normal_go(self) -> None: ...

  def test_predictor_normal_rotate(self) -> None: ...

  def test_predictor_stay(self) -> None: ...

  def test_reconstructor_normal_go(self) -> None: ...

  def test_reconstructor_stay(self) -> None: ...

  def test_reconstructor_unnormal_go(self) -> None: ...

  def __init__(self): ...


class TriggerSetAnimationRecorderFile:

  def __init__(self):
    self.discard: bool
    self.isrecording: bool


class TriggerXmlFile:

  def __init__(self):
    self.clothingitemguid: str
    self.ismale: bool
    self.outfitname: str


class UnderwearDefinition:

  instance: UnderwearDefinition

  def checkDirty(self) -> None: ...

  @staticmethod
  def addRandomUnderwear(zed: IsoZombie) -> None: ...

  def __init__(self):
    self.m_dirty: bool

  class StringChance:

    def __init__(self, arg0: str, arg1: float): ...

  class OutfitUnderwearDefinition:

    def __init__(self, top: ArrayList[UnderwearDefinition.StringChance], bottom: str, chanceToSpawn: int, gender: str):
      self.bottom: str
      self.chancetospawn: int
      self.female: bool
      self.top: ArrayList[UnderwearDefinition.StringChance]
      self.toptotalchance: int


class ZombieFootstepManager(BaseZombieSoundManager):

  instance: ZombieFootstepManager

  def playSound(self, chr: IsoZombie) -> None: ...

  def postUpdate(self) -> None: ...

  def __init__(self): ...


class ZombieGroup:

  def add(self, zombie: IsoZombie) -> None: ...

  def getLeader(self) -> IsoZombie: ...

  def isEmpty(self) -> bool: ...

  def remove(self, zombie: IsoZombie) -> None: ...

  def reset(self) -> ZombieGroup: ...

  def size(self) -> int: ...

  def update(self) -> None: ...

  def __init__(self):
    self.lastspreadouttime: float


class ZombieIDMapTest(Assert):

  def test10Allocations(self) -> None: ...

  def test32653Adds(self) -> None: ...

  def test32653Allocations(self) -> None: ...

  def test32653Process(self) -> None: ...

  @staticmethod
  def beforeAll() -> None: ...

  def __init__(self): ...


class ZombieThumpManager(BaseZombieSoundManager):

  instance: ZombieThumpManager

  def playSound(self, chr: IsoZombie) -> None: ...

  def postUpdate(self) -> None: ...

  def __init__(self): ...


class ZombieVocalsManager:

  instance: ZombieVocalsManager

  def addCharacter(self, chr: IsoZombie) -> None: ...

  def postUpdate(self) -> None: ...

  def render(self) -> None: ...

  def update(self) -> None: ...

  @staticmethod
  def Reset() -> None: ...

  def __init__(self): ...

  class Slot: ...

  class ObjectWithDistance: ...


class ZombiesZoneDefinition:

  bDirty: bool

  @staticmethod
  def applyDefinition(chr: IsoZombie, zombieZone: IsoMetaGrid.Zone, zombieToSpawn: ZombiesZoneDefinition.ZZDOutfit, bFemale: bool) -> None: ...

  @staticmethod
  def dressInRandomOutfit(chr: IsoZombie) -> None: ...

  @staticmethod
  def getDefinitionZoneAt(x: int, y: int, z: int) -> IsoMetaGrid.Zone: ...

  @staticmethod
  def getRandomDefaultOutfit(bFemale: bool, roomName: str) -> Outfit: ...

  @staticmethod
  def getRandomOutfitInSetList(list: ArrayList[ZombiesZoneDefinition.ZZDOutfit], doTotalChance100: bool) -> ZombiesZoneDefinition.ZZDOutfit: ...

  @staticmethod
  def pickDefinition(x: int, y: int, z: int, bFemale: bool) -> ZombiesZoneDefinition.PickDefinition: ...

  @staticmethod
  def pickPersistentOutfit(square: IsoGridSquare) -> int: ...

  @staticmethod
  def registerCustomOutfits() -> None: ...

  def __init__(self): ...

  class ZZDZone: ...

  class ZZDOutfit: ...

  class StringChance: ...

  class PickDefinition:

    def __init__(self): ...

