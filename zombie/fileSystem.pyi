from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.io import InputStream, FileInputStream, FilterInputStream
from java.lang import Enum, Boolean
from java.util import HashMap
from zombie.core.textures import TexturePackPage

class DeviceList:

  def add(self, device: IFileDevice) -> None: ...

  def createFile(self) -> IFile: ...

  def createStream(self, path: str) -> InputStream: ...

  def __init__(self): ...


class DiskFileDevice:

  @overload
  def createFile(self, child: IFile) -> IFile: ...

  @overload
  def createFile(self, child: IFile) -> IFile: ...

  @overload
  def createStream(self, path: str, child: InputStream) -> InputStream: ...

  @overload
  def createStream(self, path: str, child: InputStream) -> InputStream: ...

  @overload
  def destroyFile(self, file: IFile) -> None: ...

  @overload
  def destroyFile(self, file: IFile) -> None: ...

  @overload
  def destroyStream(self, stream: InputStream) -> None: ...

  @overload
  def destroyStream(self, stream: InputStream) -> None: ...

  @overload
  def name(self) -> str: ...

  @overload
  def name(self) -> str: ...

  def __init__(self, name: str): ...

  class DiskFile:

    @overload
    def close(self) -> None: ...

    @overload
    def close(self) -> None: ...

    @overload
    def getBuffer(self) -> list[int]: ...

    @overload
    def getBuffer(self) -> list[int]: ...

    @overload
    def getDevice(self) -> IFileDevice: ...

    @overload
    def getDevice(self) -> IFileDevice: ...

    @overload
    def getInputStream(self) -> InputStream: ...

    @overload
    def getInputStream(self) -> InputStream: ...

    @overload
    def open(self, arg0: str, arg1: int) -> bool: ...

    @overload
    def open(self, arg0: str, arg1: int) -> bool: ...

    @overload
    def pos(self) -> int: ...

    @overload
    def pos(self) -> int: ...

    @overload
    def read(self, arg0: list[int], arg1: int) -> bool: ...

    @overload
    def read(self, arg0: list[int], arg1: int) -> bool: ...

    @overload
    def release(self) -> None: ...

    @overload
    def release(self) -> None: ...

    @overload
    def seek(self, arg0: FileSeekMode, arg1: int) -> bool: ...

    @overload
    def seek(self, arg0: FileSeekMode, arg1: int) -> bool: ...

    @overload
    def size(self) -> int: ...

    @overload
    def size(self) -> int: ...

    @overload
    def write(self, arg0: list[int], arg1: int) -> bool: ...

    @overload
    def write(self, arg0: list[int], arg1: int) -> bool: ...


class FileOpenMode:

  CREATE: int

  CREATE_AND_WRITE: int

  NONE: int

  OPEN: int

  OPEN_AND_READ: int

  READ: int

  STREAM: int

  WRITE: int

  @staticmethod
  def toStringMode(bits: int) -> str: ...

  def __init__(self): ...


class FileSeekMode(Enum):

  BEGIN: FileSeekMode

  CURRENT: FileSeekMode

  END: FileSeekMode

  @staticmethod
  def valueOf(arg0: str) -> FileSeekMode: ...

  @staticmethod
  def values() -> list[FileSeekMode]: ...


class FileSystem:

  INVALID_ASYNC: int

  def cancelAsync(self, id: int) -> None: ...

  def close(self, file: IFile) -> None: ...

  def closeAsync(self, file: IFile, cb: IFileTask2Callback) -> None: ...

  def closeStream(self, stream: InputStream) -> None: ...

  def getDefaultDevice(self) -> DeviceList: ...

  def getTexturePackAlpha(self, name: str, page: str) -> bool: ...

  def getTexturePackDevice(self, name: str) -> DeviceList: ...

  def getTexturePackFlags(self, name: str) -> int: ...

  def hasWork(self) -> bool: ...

  def mount(self, device: IFileDevice) -> bool: ...

  def mountTexturePack(self, name: str, subTextures: FileSystem.TexturePackTextures, flags: int) -> None: ...

  def open(self, deviceList: DeviceList, path: str, mode: int) -> IFile: ...

  def openAsync(self, deviceList: DeviceList, path: str, mode: int, cb: IFileTask2Callback) -> int: ...

  def openStream(self, deviceList: DeviceList, path: str) -> InputStream: ...

  def runAsync(self, task: FileTask) -> int: ...

  def unMount(self, device: IFileDevice) -> bool: ...

  def updateAsyncTransactions(self) -> None: ...

  def __init__(self): ...

  class TexturePackTextures(HashMap):

    def __init__(self): ...

  class SubTexture:

    def __init__(self, packName: str, pageName: str, info: TexturePackPage.SubTextureInfo):
      self.m_info: TexturePackPage.SubTextureInfo
      self.m_pack_name: str
      self.m_page_name: str


class FileSystemImpl(FileSystem):

  TexturePackCompression: HashMap[str, Boolean]

  def cancelAsync(self, id: int) -> None: ...

  def close(self, file: IFile) -> None: ...

  def closeAsync(self, file: IFile, cb: IFileTask2Callback) -> None: ...

  def closeStream(self, stream: InputStream) -> None: ...

  def getDefaultDevice(self) -> DeviceList: ...

  def getTexturePackAlpha(self, name: str, page: str) -> bool: ...

  def getTexturePackDevice(self, name: str) -> DeviceList: ...

  def getTexturePackFlags(self, name: str) -> int: ...

  def hasWork(self) -> bool: ...

  def mount(self, device: IFileDevice) -> bool: ...

  def mountTexturePack(self, name: str, subTextures: FileSystem.TexturePackTextures, flags: int) -> None: ...

  def open(self, deviceList: DeviceList, path: str, mode: int) -> IFile: ...

  def openAsync(self, deviceList: DeviceList, path: str, mode: int, cb: IFileTask2Callback) -> int: ...

  def openStream(self, deviceList: DeviceList, path: str) -> InputStream: ...

  def runAsync(self, fileTask: FileTask) -> int: ...

  def unMount(self, device: IFileDevice) -> bool: ...

  def updateAsyncTransactions(self) -> None: ...

  def __init__(self): ...

  class OpenTask(FileTask):

    def call(self) -> object: ...

    def done(self) -> None: ...

    def handleResult(self, arg0: object) -> None: ...

  class CloseTask(FileTask):

    def call(self) -> object: ...

    def done(self) -> None: ...

    def handleResult(self, arg0: object) -> None: ...

  class AsyncItem: ...


class FileTask:

  def call(self) -> object: ...

  def done(self) -> None: ...

  def getErrorMessage(self) -> str: ...

  def handleResult(self, result: object) -> None: ...

  def setPriority(self, priority: int) -> None: ...

  @overload
  def __init__(self, fileSystem: FileSystem): ...
  @overload
  def __init__(self, fileSystem: FileSystem, cb: IFileTaskCallback): ...


class IFile:

  def close(self) -> None: ...

  def getBuffer(self) -> list[int]: ...

  def getDevice(self) -> IFileDevice: ...

  def getInputStream(self) -> InputStream: ...

  def open(self, path: str, mode: int) -> bool: ...

  def pos(self) -> int: ...

  def read(self, buffer: list[int], size: int) -> bool: ...

  def release(self) -> None: ...

  def seek(self, mode: FileSeekMode, pos: int) -> bool: ...

  def size(self) -> int: ...

  def write(self, buffer: list[int], size: int) -> bool: ...


class IFileDevice:

  def createFile(self, child: IFile) -> IFile: ...

  def createStream(self, path: str, child: InputStream) -> InputStream: ...

  def destroyFile(self, file: IFile) -> None: ...

  def destroyStream(self, stream: InputStream) -> None: ...

  def name(self) -> str: ...


class IFileTask2Callback:

  def onFileTaskFinished(self, file: IFile, result: object) -> None: ...


class IFileTaskCallback:

  def onFileTaskFinished(self, result: object) -> None: ...


class MemoryFileDevice:

  @overload
  def createFile(self, child: IFile) -> IFile: ...

  @overload
  def createFile(self, child: IFile) -> IFile: ...

  @overload
  def createStream(self, path: str, child: InputStream) -> InputStream: ...

  @overload
  def createStream(self, path: str, child: InputStream) -> InputStream: ...

  @overload
  def destroyFile(self, file: IFile) -> None: ...

  @overload
  def destroyFile(self, file: IFile) -> None: ...

  @overload
  def destroyStream(self, stream: InputStream) -> None: ...

  @overload
  def destroyStream(self, stream: InputStream) -> None: ...

  @overload
  def name(self) -> str: ...

  @overload
  def name(self) -> str: ...

  def __init__(self): ...

  class MemoryFile:

    @overload
    def close(self) -> None: ...

    @overload
    def close(self) -> None: ...

    @overload
    def getBuffer(self) -> list[int]: ...

    @overload
    def getBuffer(self) -> list[int]: ...

    @overload
    def getDevice(self) -> IFileDevice: ...

    @overload
    def getDevice(self) -> IFileDevice: ...

    @overload
    def getInputStream(self) -> InputStream: ...

    @overload
    def getInputStream(self) -> InputStream: ...

    @overload
    def open(self, arg0: str, arg1: int) -> bool: ...

    @overload
    def open(self, arg0: str, arg1: int) -> bool: ...

    @overload
    def pos(self) -> int: ...

    @overload
    def pos(self) -> int: ...

    @overload
    def read(self, arg0: list[int], arg1: int) -> bool: ...

    @overload
    def read(self, arg0: list[int], arg1: int) -> bool: ...

    @overload
    def release(self) -> None: ...

    @overload
    def release(self) -> None: ...

    @overload
    def seek(self, arg0: FileSeekMode, arg1: int) -> bool: ...

    @overload
    def seek(self, arg0: FileSeekMode, arg1: int) -> bool: ...

    @overload
    def size(self) -> int: ...

    @overload
    def size(self) -> int: ...

    @overload
    def write(self, arg0: list[int], arg1: int) -> bool: ...

    @overload
    def write(self, arg0: list[int], arg1: int) -> bool: ...


class TexturePackDevice:

  @overload
  def createFile(self, child: IFile) -> IFile: ...

  @overload
  def createFile(self, child: IFile) -> IFile: ...

  @overload
  def createStream(self, path: str, child: InputStream) -> InputStream: ...

  @overload
  def createStream(self, path: str, child: InputStream) -> InputStream: ...

  @overload
  def destroyFile(self, file: IFile) -> None: ...

  @overload
  def destroyFile(self, file: IFile) -> None: ...

  @overload
  def destroyStream(self, stream: InputStream) -> None: ...

  @overload
  def destroyStream(self, stream: InputStream) -> None: ...

  def getSubTextureInfo(self, result: FileSystem.TexturePackTextures) -> None: ...

  def getTextureFlags(self) -> int: ...

  def isAlpha(self, page: str) -> bool: ...

  @overload
  def name(self) -> str: ...

  @overload
  def name(self) -> str: ...

  def __init__(self, name: str, flags: int): ...

  class TexturePackInputStream(FileInputStream): ...

  class SubTexture: ...

  class Page: ...

  class PositionInputStream(FilterInputStream):

    def getPosition(self) -> int: ...

    def mark(self, arg0: int) -> None: ...

    @overload
    def read(self) -> int: ...

    @overload
    def read(self, arg0: list[int], arg1: int, arg2: int) -> int: ...

    def reset(self) -> None: ...

    def skip(self, arg0: int) -> int: ...

    def __init__(self, arg0: TexturePackDevice, arg1: InputStream): ...

