from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.lang import Enum
from java.nio import FloatBuffer
from org.lwjgl.util import ReadableColor

class AbstractStyle:

  @overload
  def build(self) -> GeometryData: ...

  @overload
  def build(self) -> GeometryData: ...

  @overload
  def getAlphaOp(self) -> AlphaOp: ...

  @overload
  def getAlphaOp(self) -> AlphaOp: ...

  @overload
  def getRenderSprite(self) -> bool: ...

  @overload
  def getRenderSprite(self) -> bool: ...

  @overload
  def getStyleID(self) -> int: ...

  @overload
  def getStyleID(self) -> int: ...

  @overload
  def render(self, vertexOffset: int, indexOffset: int) -> None: ...

  @overload
  def render(self, vertexOffset: int, indexOffset: int) -> None: ...

  @overload
  def resetState(self) -> None: ...

  @overload
  def resetState(self) -> None: ...

  @overload
  def setupState(self) -> None: ...

  @overload
  def setupState(self) -> None: ...

  def __init__(self): ...


class AdditiveStyle(AbstractStyle):

  instance: AdditiveStyle

  def getAlphaOp(self) -> AlphaOp: ...

  def getRenderSprite(self) -> bool: ...

  def getStyleID(self) -> int: ...

  def resetState(self) -> None: ...

  def setupState(self) -> None: ...

  def __init__(self): ...


class AlphaOp(Enum):

  KEEP: AlphaOp

  PREMULTIPLY: AlphaOp

  ZERO: AlphaOp

  @overload
  def op(self, c: int, alpha: int, dest: FloatBuffer) -> None: ...

  @overload
  def op(self, c: ReadableColor, alpha: int, dest: FloatBuffer) -> None: ...

  @staticmethod
  def valueOf(arg0: str) -> AlphaOp: ...

  @staticmethod
  def values() -> list[AlphaOp]: ...


class FloatList:

  def add(self, f: float) -> float: ...

  @overload
  def addAll(self, f: list[float]) -> None: ...

  @overload
  def addAll(self, f: FloatList) -> None: ...

  def array(self) -> list[float]: ...

  def capacity(self) -> int: ...

  def clear(self) -> None: ...

  def ensureCapacity(self, size: int) -> None: ...

  def get(self, index: int) -> float: ...

  def isEmpty(self) -> bool: ...

  def remove(self, idx: int) -> float: ...

  def size(self) -> int: ...

  def toArray(self, dest: list[object]) -> None: ...

  def trimToSize(self) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, size: int): ...
  @overload
  def __init__(self, fastExpand: bool, size: int): ...


class GeometryData:

  def clear(self) -> None: ...

  def getIndexData(self) -> ShortList: ...

  def getVertexData(self) -> FloatList: ...

  def __init__(self, vertexData: FloatList, indexData: ShortList): ...


class IntList:

  def add(self, f: int) -> int: ...

  @overload
  def addAll(self, f: list[int]) -> None: ...

  @overload
  def addAll(self, f: IntList) -> None: ...

  def array(self) -> list[int]: ...

  def capacity(self) -> int: ...

  def clear(self) -> None: ...

  def ensureCapacity(self, size: int) -> None: ...

  def get(self, index: int) -> int: ...

  def isEmpty(self) -> bool: ...

  def remove(self, idx: int) -> int: ...

  def size(self) -> int: ...

  def toArray(self, dest: list[int]) -> list[int]: ...

  def trimToSize(self) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, size: int): ...
  @overload
  def __init__(self, fastExpand: bool, size: int): ...


class LightingStyle(AbstractStyle):

  instance: LightingStyle

  def getAlphaOp(self) -> AlphaOp: ...

  def getRenderSprite(self) -> bool: ...

  def getStyleID(self) -> int: ...

  def resetState(self) -> None: ...

  def setupState(self) -> None: ...

  def __init__(self): ...


class ShortList:

  def add(self, f: int) -> int: ...

  @overload
  def addAll(self, f: list[int]) -> None: ...

  @overload
  def addAll(self, f: ShortList) -> None: ...

  def array(self) -> list[int]: ...

  def capacity(self) -> int: ...

  def clear(self) -> None: ...

  def ensureCapacity(self, size: int) -> None: ...

  def get(self, index: int) -> int: ...

  def isEmpty(self) -> bool: ...

  def remove(self, idx: int) -> int: ...

  def size(self) -> int: ...

  def toArray(self, dest: list[int]) -> list[int]: ...

  def trimToSize(self) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, size: int): ...
  @overload
  def __init__(self, fastExpand: bool, size: int): ...


class Style:

  def build(self) -> GeometryData: ...

  def getAlphaOp(self) -> AlphaOp: ...

  def getRenderSprite(self) -> bool: ...

  def getStyleID(self) -> int: ...

  def render(self, vertexOffset: int, indexOffset: int) -> None: ...

  def resetState(self) -> None: ...

  def setupState(self) -> None: ...


class TransparentStyle(AbstractStyle):

  instance: TransparentStyle

  def getAlphaOp(self) -> AlphaOp: ...

  def getRenderSprite(self) -> bool: ...

  def getStyleID(self) -> int: ...

  def resetState(self) -> None: ...

  def setupState(self) -> None: ...

  def __init__(self): ...


class UIFBOStyle(AbstractStyle):

  instance: UIFBOStyle

  def getAlphaOp(self) -> AlphaOp: ...

  def getRenderSprite(self) -> bool: ...

  def getStyleID(self) -> int: ...

  def setupState(self) -> None: ...

  def __init__(self): ...

