from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.lang import Float, Enum
from java.util import ArrayList, List
from zombie.characters import IsoGameCharacter
from zombie.core.skinnedmodel.advancedanimation import AnimLayer

class AnimatorDebugMonitor:

  def IsDirty(self) -> bool: ...

  def IsDirtyFloatList(self) -> bool: ...

  def addCustomVariable(self, var: str) -> None: ...

  def getFilter(self, index: int) -> bool: ...

  def getFloatNames(self) -> ArrayList[str]: ...

  def getLogString(self) -> str: ...

  def getSelectedVarFloatList(self) -> ArrayList[Float]: ...

  def getSelectedVarMaxFloat(self) -> str: ...

  def getSelectedVarMinFloat(self) -> str: ...

  def getSelectedVariable(self) -> str: ...

  def getSelectedVariableFloat(self) -> float: ...

  def isDoTickStamps(self) -> bool: ...

  def removeCustomVariable(self, var: str) -> None: ...

  def setDoTickStamps(self, doTickStamps: bool) -> None: ...

  def setFilter(self, index: int, b: bool) -> None: ...

  def setSelectedVariable(self, key: str) -> None: ...

  def update(self, chr: IsoGameCharacter, Layers: list[AnimLayer]) -> None: ...

  @staticmethod
  def getKnownVariables() -> List[str]: ...

  @staticmethod
  def isKnownVarsDirty() -> bool: ...

  @staticmethod
  def registerVariable(key: str) -> None: ...

  def __init__(self, chr: IsoGameCharacter): ...

  class LogType(Enum):

    DEFAULT: AnimatorDebugMonitor.LogType

    LAYER: AnimatorDebugMonitor.LogType

    MAX: AnimatorDebugMonitor.LogType

    NODE: AnimatorDebugMonitor.LogType

    TRACK: AnimatorDebugMonitor.LogType

    VAR: AnimatorDebugMonitor.LogType

    def value(self) -> int: ...

    @staticmethod
    def valueOf(arg0: str) -> AnimatorDebugMonitor.LogType: ...

    @staticmethod
    def values() -> list[AnimatorDebugMonitor.LogType]: ...

  class MonitorLogLine: ...

  class MonitoredVar:

    def logFloat(self, arg0: float) -> None: ...

  class MonitoredLayer:

    def __init__(self, arg0: AnimatorDebugMonitor, arg1: int): ...

  class MonitoredNode: ...

  class MonitoredTrack: ...

