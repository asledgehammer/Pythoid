from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.nio import ByteBuffer
from java.util import ArrayList
from zombie.characterTextures import BloodBodyPartType
from zombie.core import ImmutableColor
from zombie.core.skinnedmodel.model import Model, CharacterMask
from zombie.core.skinnedmodel.population import Outfit, ClothingItem, ClothingItemReference
from zombie.inventory import InventoryItem
from zombie.scripting.objects import ModelScript, Item

class BaseVisual:

  def clear(self) -> None: ...

  def copyFrom(self, other: BaseVisual) -> None: ...

  def dressInNamedOutfit(self, outfitName: str, itemVisuals: ItemVisuals) -> None: ...

  def getModel(self) -> Model: ...

  def getModelScript(self) -> ModelScript: ...

  def load(self, input: ByteBuffer, WorldVersion: int) -> None: ...

  def save(self, output: ByteBuffer) -> None: ...

  def __init__(self): ...


class HumanVisual(BaseVisual):

  def addBodyVisual(self, clothingItemName: str) -> ItemVisual: ...

  def addBodyVisualFromClothingItemName(self, clothingItemName: str) -> ItemVisual: ...

  def addBodyVisualFromItemType(self, itemType: str) -> ItemVisual: ...

  def addClothingItem(self, itemVisuals: ItemVisuals, scriptItem: Item) -> ItemVisual: ...

  def clear(self) -> None: ...

  def copyFrom(self, other_: BaseVisual) -> None: ...

  @overload
  def dressInClothingItem(self, itemGUID: str, itemVisuals: ItemVisuals) -> None: ...

  @overload
  def dressInClothingItem(self, itemGUID: str, itemVisuals: ItemVisuals, clearCurrentVisuals: bool) -> None: ...

  def dressInNamedOutfit(self, outfitName: str, itemVisuals: ItemVisuals) -> None: ...

  def getBeardColor(self) -> ImmutableColor: ...

  def getBeardModel(self) -> str: ...

  def getBlood(self, bodyPartType: BloodBodyPartType) -> float: ...

  def getBodyHairIndex(self) -> int: ...

  def getBodyVisuals(self) -> ItemVisuals: ...

  def getDirt(self, bodyPartType: BloodBodyPartType) -> float: ...

  def getHairColor(self) -> ImmutableColor: ...

  def getHairModel(self) -> str: ...

  def getHole(self, bodyPartType: BloodBodyPartType) -> float: ...

  def getLastStandString(self) -> str: ...

  def getModel(self) -> Model: ...

  def getModelScript(self) -> ModelScript: ...

  def getNaturalBeardColor(self) -> ImmutableColor: ...

  def getNaturalHairColor(self) -> ImmutableColor: ...

  def getNonAttachedHair(self) -> str: ...

  def getOutfit(self) -> Outfit: ...

  def getSkinColor(self) -> ImmutableColor: ...

  def getSkinTexture(self) -> str: ...

  def getSkinTextureIndex(self) -> int: ...

  def getTotalBlood(self) -> float: ...

  def hasBodyVisualFromItemType(self, itemType: str) -> bool: ...

  def isFemale(self) -> bool: ...

  def isSkeleton(self) -> bool: ...

  def isZombie(self) -> bool: ...

  def lerp(self, start: float, __end__: float, delta: float) -> float: ...

  def load(self, input: ByteBuffer, WorldVersion: int) -> None: ...

  def loadLastStandString(self, saveStr: str) -> bool: ...

  def pickRandomZombieRotStage(self) -> int: ...

  def randomBlood(self) -> None: ...

  def randomDirt(self) -> None: ...

  def removeBlood(self) -> None: ...

  def removeBodyVisualFromItemType(self, itemType: str) -> ItemVisual: ...

  def removeDirt(self) -> None: ...

  def save(self, output: ByteBuffer) -> None: ...

  def setBeardColor(self, color: ImmutableColor) -> None: ...

  def setBeardModel(self, model: str) -> None: ...

  def setBlood(self, bodyPartType: BloodBodyPartType, amount: float) -> None: ...

  def setBodyHairIndex(self, index: int) -> None: ...

  def setDirt(self, bodyPartType: BloodBodyPartType, amount: float) -> None: ...

  def setForceModel(self, model: Model) -> None: ...

  def setForceModelScript(self, modelScript: str) -> None: ...

  def setHairColor(self, color: ImmutableColor) -> None: ...

  def setHairModel(self, model: str) -> None: ...

  def setHole(self, bodyPartType: BloodBodyPartType) -> None: ...

  def setNaturalBeardColor(self, color: ImmutableColor) -> None: ...

  def setNaturalHairColor(self, color: ImmutableColor) -> None: ...

  def setNonAttachedHair(self, nonAttachedHair: str) -> None: ...

  def setOutfit(self, outfit: Outfit) -> None: ...

  def setSkinColor(self, color: ImmutableColor) -> None: ...

  def setSkinTextureIndex(self, index: int) -> None: ...

  def setSkinTextureName(self, textureName: str) -> None: ...

  def synchWithOutfit(self, outfit: Outfit) -> None: ...

  @staticmethod
  def GetMask(itemVisuals: ItemVisuals) -> CharacterMask: ...

  def __init__(self, owner: IHumanVisual):
    self.zombierotstage: int


class IHumanVisual:

  def getHumanVisual(self) -> HumanVisual: ...

  def getItemVisuals(self, itemVisuals: ItemVisuals) -> None: ...

  def isFemale(self) -> bool: ...

  def isSkeleton(self) -> bool: ...

  def isZombie(self) -> bool: ...


class ItemVisual:

  NULL_HUE: float

  def clear(self) -> None: ...

  def copyBlood(self, other: ItemVisual) -> None: ...

  def copyDirt(self, other: ItemVisual) -> None: ...

  def copyFrom(self, other: ItemVisual) -> None: ...

  def copyHoles(self, other: ItemVisual) -> None: ...

  def copyPatches(self, other: ItemVisual) -> None: ...

  def getAlternateModelName(self) -> str: ...

  @overload
  def getBaseTexture(self) -> int: ...

  @overload
  def getBaseTexture(self, clothingItem: ClothingItem) -> str: ...

  def getBasicPatch(self, bodyPartType: BloodBodyPartType) -> float: ...

  def getBasicPatchesNumber(self) -> int: ...

  def getBlood(self, bodyPartType: BloodBodyPartType) -> float: ...

  def getClothingItem(self) -> ClothingItem: ...

  def getClothingItemCombinedMask(self, in_out_mask: CharacterMask) -> None: ...

  def getClothingItemName(self) -> str: ...

  def getDecal(self, clothingItem: ClothingItem) -> str: ...

  def getDenimPatch(self, bodyPartType: BloodBodyPartType) -> float: ...

  def getDirt(self, bodyPartType: BloodBodyPartType) -> float: ...

  def getHole(self, bodyPartType: BloodBodyPartType) -> float: ...

  def getHolesNumber(self) -> int: ...

  def getHue(self, clothingItem: ClothingItem) -> float: ...

  def getInventoryItem(self) -> InventoryItem: ...

  def getItemType(self) -> str: ...

  def getLastStandString(self) -> str: ...

  def getLeatherPatch(self, bodyPartType: BloodBodyPartType) -> float: ...

  def getScriptItem(self) -> Item: ...

  @overload
  def getTextureChoice(self) -> int: ...

  @overload
  def getTextureChoice(self, clothingItem: ClothingItem) -> str: ...

  @overload
  def getTint(self) -> ImmutableColor: ...

  @overload
  def getTint(self, clothingItem: ClothingItem) -> ImmutableColor: ...

  def getTotalBlood(self) -> float: ...

  def load(self, input: ByteBuffer, WorldVersion: int) -> None: ...

  def pickUninitializedValues(self, clothingItem: ClothingItem) -> None: ...

  def removeBlood(self) -> None: ...

  def removeDirt(self) -> None: ...

  def removeHole(self, bodyPartIndex: int) -> None: ...

  def removePatch(self, bodyPartIndex: int) -> None: ...

  def save(self, output: ByteBuffer) -> None: ...

  def setAlternateModelName(self, name: str) -> None: ...

  def setBaseTexture(self, baseTexture: int) -> None: ...

  def setBasicPatch(self, bodyPartType: BloodBodyPartType) -> None: ...

  def setBlood(self, bodyPartType: BloodBodyPartType, amount: float) -> None: ...

  def setClothingItemName(self, name: str) -> None: ...

  def setDecal(self, decalName: str) -> None: ...

  def setDenimPatch(self, bodyPartType: BloodBodyPartType) -> None: ...

  def setDirt(self, bodyPartType: BloodBodyPartType, amount: float) -> None: ...

  def setHole(self, bodyPartType: BloodBodyPartType) -> None: ...

  def setHue(self, hue: float) -> None: ...

  def setInventoryItem(self, inventoryItem: InventoryItem) -> None: ...

  def setItemType(self, fullType: str) -> None: ...

  def setLeatherPatch(self, bodyPartType: BloodBodyPartType) -> None: ...

  def setTextureChoice(self, TextureChoice: int) -> None: ...

  def setTint(self, tint: ImmutableColor) -> None: ...

  def synchWithOutfit(self, itemRef: ClothingItemReference) -> None: ...

  def toString(self) -> str: ...

  @staticmethod
  def createLastStandItem(saveStr: str) -> InventoryItem: ...

  @overload
  def __init__(self):
    self.m_basetexture: int

    self.m_decal: str

    self.m_hue: float

    self.m_texturechoice: int

    self.m_tint: ImmutableColor

  @overload
  def __init__(self, other: ItemVisual): ...


class ItemVisuals(ArrayList):

  def findHat(self) -> ItemVisual: ...

  def findMask(self) -> ItemVisual: ...

  def load(self, input: ByteBuffer, WorldVersion: int) -> None: ...

  def save(self, output: ByteBuffer) -> None: ...

  def __init__(self): ...

