from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.nio import FloatBuffer
from org.joml import Matrix4f, Vector4f, Vector3f
from org.lwjgl.util.vector import Matrix4f
from zombie.characters import IsoGameCharacter
from zombie.core.opengl import ShaderProgram
from zombie.core.skinnedmodel.model import ModelInstance, ModelSlotRenderData, ModelInstanceRenderData
from zombie.core.textures import Texture
from zombie.iso import IsoMovingObject

class Shader:

  def End(self) -> None: ...

  def Start(self) -> None: ...

  def getID(self) -> int: ...

  def getShaderProgram(self) -> ShaderProgram: ...

  def isStatic(self) -> bool: ...

  def isVehicleShader(self) -> bool: ...

  def setAlpha(self, alpha: float) -> None: ...

  @overload
  def setAmbient(self, amb: float) -> None: ...

  @overload
  def setAmbient(self, ambr: float, ambg: float, ambb: float) -> None: ...

  def setDepthBias(self, bias: float) -> None: ...

  def setHueShift(self, hue: float) -> None: ...

  @overload
  def setLight(self, index: int, x: float, y: float, z: float, r: float, g: float, b: float, rad: float, animPlayerAngle: float, inst: ModelInstance) -> None: ...

  @overload
  def setLight(self, index: int, x: float, y: float, z: float, r: float, g: float, b: float, rad: float, animPlayerAngle: float, offsetX: float, offsetY: float, offsetZ: float, instObject: IsoMovingObject) -> None: ...

  def setLightingAmount(self, lighting: float) -> None: ...

  @overload
  def setMatrix(self, location: int, matrix4f: list[float]) -> None: ...

  @overload
  def setMatrix(self, location: int, matrix4f: Matrix4f) -> None: ...

  def setMatrixBlood1(self, matrix1: list[float], matrix2: list[float]) -> None: ...

  def setMatrixBlood2(self, matrix1: list[float], matrix2: list[float]) -> None: ...

  @overload
  def setMatrixPalette(self, skin: list[Matrix4f]) -> None: ...

  @overload
  def setMatrixPalette(self, skin: list[Matrix4f]) -> None: ...

  @overload
  def setMatrixPalette(self, matrixPalette: FloatBuffer) -> None: ...

  @overload
  def setMatrixPalette(self, matrixPalette: FloatBuffer, transpose: bool) -> None: ...

  def setReflectionParam(self, timesOfDay: float, refWindows: float, refBody: float) -> None: ...

  def setShaderAlpha(self, a: float) -> None: ...

  def setTexture(self, tex: Texture, unitName: str, textureUnit: int) -> None: ...

  def setTextureDamage1Enables1(self, matrix4f: list[float]) -> None: ...

  def setTextureDamage1Enables2(self, matrix4f: list[float]) -> None: ...

  def setTextureDamage2Enables1(self, matrix4f: list[float]) -> None: ...

  def setTextureDamage2Enables2(self, matrix4f: list[float]) -> None: ...

  def setTextureLightsEnables1(self, matrix4f: list[float]) -> None: ...

  def setTextureLightsEnables2(self, matrix4f: list[float]) -> None: ...

  @overload
  def setTexturePainColor(self, vec: Vector4f) -> None: ...

  @overload
  def setTexturePainColor(self, vec: Vector3f, a: float) -> None: ...

  @overload
  def setTexturePainColor(self, x: float, y: float, z: float, a: float) -> None: ...

  def setTextureRustA(self, a: float) -> None: ...

  def setTextureUninstall1(self, matrix4f: list[float]) -> None: ...

  def setTextureUninstall2(self, matrix4f: list[float]) -> None: ...

  def setTint(self, x: float, y: float, z: float) -> None: ...

  @overload
  def setTransformMatrix(self, matrix4f: Matrix4f, transpose: bool) -> None: ...

  @overload
  def setTransformMatrix(self, matrix4f: Matrix4f, transpose: bool) -> None: ...

  def startCharacter(self, slotData: ModelSlotRenderData, instData: ModelInstanceRenderData) -> None: ...

  def updateAlpha(self, chr: IsoGameCharacter, playerIndex: int) -> None: ...

  def updateParams(self) -> None: ...

  def __init__(self, name: str, bStatic: bool):
    self.boneindicesattrib: int
    self.boneweightsattrib: int


class ShaderManager:

  instance: ShaderManager

  def getOrCreateShader(self, name: str, bStatic: bool) -> Shader: ...

  def __init__(self): ...

