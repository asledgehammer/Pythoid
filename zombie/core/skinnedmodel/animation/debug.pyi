from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.io import PrintStream
from java.lang import StringBuilder
from java.util import List
from java.util.function import Consumer
from zombie.ai import State, StateMachine
from zombie.characters import IsoGameCharacter
from zombie.characters.action import ActionState
from zombie.core.skinnedmodel.advancedanimation import AnimState, LiveAnimNode, IAnimationVariableSource
from zombie.core.skinnedmodel.animation import AnimationTrack
from zombie.iso import Vector3, Vector2

class AnimationNodeRecordingFrame(GenericNameWeightRecordingFrame):

  def logAIState(self, state: State, subStates: List[StateMachine.SubstateSlot]) -> None: ...

  def logActionState(self, state: ActionState, childStates: List[ActionState]) -> None: ...

  def logAnimState(self, state: AnimState) -> None: ...

  def logCharacterToPlayerDiff(self, diff: Vector3) -> None: ...

  def writeHeader(self, logLine: StringBuilder) -> None: ...

  def __init__(self, fileKey: str): ...


class AnimationPlayerRecorder:

  def beginLine(self, frameNo: int) -> None: ...

  def discardRecording(self) -> None: ...

  def endLine(self) -> None: ...

  def getOwner(self) -> IsoGameCharacter: ...

  def isRecording(self) -> bool: ...

  def logAIState(self, state: State, subStates: List[StateMachine.SubstateSlot]) -> None: ...

  def logActionState(self, state: ActionState, childStates: List[ActionState]) -> None: ...

  def logAnimNode(self, liveNode: LiveAnimNode) -> None: ...

  def logAnimState(self, state: AnimState) -> None: ...

  def logAnimWeights(self, tracks: List[AnimationTrack], animBlendIndices: list[int], animBlendWeights: list[float], deferredMovement: Vector2) -> None: ...

  def logCharacterPos(self) -> None: ...

  def logVariables(self, varSource: IAnimationVariableSource) -> None: ...

  def setRecording(self, value: bool) -> None: ...

  @staticmethod
  def openFileStream(key: str, append: bool, fileNameConsumer: Consumer[str]) -> PrintStream: ...

  def __init__(self, owner: IsoGameCharacter): ...


class AnimationTrackRecordingFrame(GenericNameWeightRecordingFrame):

  def getDeferredMovement(self) -> Vector2: ...

  def logAnimWeights(self, tracks: List[AnimationTrack], animBlendIndices: list[int], animBlendWeights: list[float], deferredMovement: Vector2) -> None: ...

  def reset(self) -> None: ...

  def writeHeader(self, logLine: StringBuilder) -> None: ...

  def __init__(self, fileKey: str): ...


class AnimationVariableRecordingFrame(GenericNameValueRecordingFrame):

  def getValueAt(self, i: int) -> str: ...

  def logVariable(self, name: str, val: str) -> None: ...

  def logVariables(self, varSource: IAnimationVariableSource) -> None: ...

  def reset(self) -> None: ...

  def __init__(self, fileKey: str): ...


class GenericNameValueRecordingFrame:

  def close(self) -> None: ...

  def closeAndDiscard(self) -> None: ...

  def getColumnCount(self) -> int: ...

  def getNameAt(self, i: int) -> str: ...

  def getOrCreateColumn(self, nodeName: str) -> int: ...

  def getValueAt(self, i: int) -> str: ...

  def reset(self) -> None: ...

  def setFrameNumber(self, frameNumber: int) -> None: ...

  def writeLine(self) -> None: ...

  @staticmethod
  @overload
  def appendCell(logLine: StringBuilder) -> StringBuilder: ...

  @staticmethod
  @overload
  def appendCell(logLine: StringBuilder, cell: float) -> StringBuilder: ...

  @staticmethod
  @overload
  def appendCell(logLine: StringBuilder, cell: int) -> StringBuilder: ...

  @staticmethod
  @overload
  def appendCell(logLine: StringBuilder, cell: str) -> StringBuilder: ...

  @staticmethod
  @overload
  def appendCell(logLine: StringBuilder, cell: int) -> StringBuilder: ...

  @staticmethod
  def appendCellQuot(logLine: StringBuilder, cell: str) -> StringBuilder: ...

  def __init__(self, fileKey: str, valuesFileNameSuffix: str): ...


class GenericNameWeightRecordingFrame(GenericNameValueRecordingFrame):

  def getOrCreateColumn(self, name: str, layer: int) -> int: ...

  def getValueAt(self, i: int) -> str: ...

  def getWeightAt(self, i: int) -> float: ...

  def logWeight(self, name: str, layer: int, weight: float) -> None: ...

  def reset(self) -> None: ...

  def __init__(self, fileKey: str): ...

