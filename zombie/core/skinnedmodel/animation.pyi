from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.lang import Integer, Enum
from java.util import List, HashMap
from java.util.function import Consumer, Supplier
from org.lwjgl.util.vector import Matrix4f, Vector3f, Quaternion
from zombie.characters import IsoGameCharacter
from zombie.core.skinnedmodel.advancedanimation import AnimBoneWeight
from zombie.core.skinnedmodel.animation.debug import AnimationPlayerRecorder
from zombie.core.skinnedmodel.animation.sharedskele import SharedSkeleAnimationRepository
from zombie.core.skinnedmodel.model import SkinningBone, SkinningData, Model, VertexPositionNormalTangentTextureSkin, SoftwareModelMesh
from zombie.iso import Vector2
from zombie.util import PooledObject

class AnimTrackSampler:

  def getBoneMatrix(self, boneIdx: int, out_matrix: Matrix4f) -> None: ...

  def getCurrentTime(self) -> float: ...

  def getNumBones(self) -> int: ...

  def getTotalTime(self) -> float: ...

  def isLooped(self) -> bool: ...

  def moveToTime(self, time: float) -> None: ...


class AnimationBoneBinding:

  def getBone(self) -> SkinningBone: ...

  def getSkinningData(self) -> SkinningData: ...

  def setSkinningData(self, skinningData: SkinningData) -> None: ...

  def toString(self) -> str: ...

  def __init__(self, boneName: str):
    self.bonename: str


class AnimationBoneBindingPair:

  def getBoneA(self) -> SkinningBone: ...

  def getBoneB(self) -> SkinningBone: ...

  def getBoneIdxA(self) -> int: ...

  def getBoneIdxB(self) -> int: ...

  def isValid(self) -> bool: ...

  def matches(self, boneA: str, boneB: str) -> bool: ...

  def setSkinningData(self, skinningData: SkinningData) -> None: ...

  def toString(self) -> str: ...

  def __init__(self, boneA: str, boneB: str):
    self.bonebindinga: AnimationBoneBinding
    self.bonebindingb: AnimationBoneBinding


class AnimationBoneWeightBinding(AnimationBoneBinding):

  def forEachDescendant(self, consumer: Consumer[SkinningBone]) -> None: ...

  def getIncludeDescendants(self) -> bool: ...

  def getWeight(self) -> float: ...

  def setIncludeDescendants(self, set: bool) -> None: ...

  def setWeight(self, weight: float) -> None: ...

  @overload
  def __init__(self, boneWeight: AnimBoneWeight): ...
  @overload
  def __init__(self, boneName: str, weight: float, includeDescendants: bool): ...


class AnimationClip:

  def getBoneFramesAt(self, idx: int) -> list[Keyframe]: ...

  def getKeyframes(self) -> list[Keyframe]: ...

  def getRootMotionFrameAt(self, idx: int) -> Keyframe: ...

  def getRootMotionFrameCount(self) -> int: ...

  def getTranslationLength(self, deferredBoneAxis: BoneAxis) -> float: ...

  def __init__(self, duration: float, keyframes: List[Keyframe], name: str, bKeepLastFrame: bool):
    self.duration: float
    self.name: str
    self.staticclip: StaticAnimation

  class KeyframeByBoneIndexElement: ...


class AnimationMultiTrack:

  def Update(self, time: float) -> None: ...

  def addTrack(self, track: AnimationTrack) -> None: ...

  def findTrack(self, trackName: str) -> AnimationTrack: ...

  def getDuration(self) -> float: ...

  def getIndexOfTrack(self, track: AnimationTrack) -> int: ...

  def getTrackAt(self, i: int) -> AnimationTrack: ...

  def getTrackCount(self) -> int: ...

  def getTracks(self) -> List[AnimationTrack]: ...

  def removeTrack(self, track: AnimationTrack) -> None: ...

  def removeTrackAt(self, indexOf: int) -> None: ...

  def removeTracks(self, tracks: List[AnimationTrack]) -> None: ...

  def reset(self) -> None: ...

  def __init__(self): ...


class AnimationPlayer(PooledObject):

  def DoAngles(self) -> None: ...

  def GetPropBoneMatrix(self, bone: int) -> Matrix4f: ...

  def SetDir(self, dir: Vector2) -> None: ...

  def SetForceDir(self, dir: Vector2) -> None: ...

  @overload
  def Update(self) -> None: ...

  @overload
  def Update(self, deltaT: float) -> None: ...

  def UpdateDir(self, character: IsoGameCharacter) -> None: ...

  def UpdateSkinTransforms(self) -> None: ...

  def addBoneReparent(self, boneName: str, newParentBone: str) -> None: ...

  def discardRecording(self) -> None: ...

  def dismember(self, bone: int) -> None: ...

  def getAngle(self) -> float: ...

  def getBoneModelTransform(self, boneIdx: int, out_modelTransform: Matrix4f) -> Matrix4f: ...

  def getBoneTransform(self, boneIdx: int, out_boneTransform: Matrix4f) -> Matrix4f: ...

  def getCounterRotationBone(self) -> AnimationBoneBinding: ...

  def getDeferredAngleDelta(self) -> float: ...

  def getDeferredMovement(self, out_result: Vector2) -> None: ...

  def getDeferredRotationWeight(self) -> float: ...

  def getExcessTwistAngle(self) -> float: ...

  def getMaxTwistAngle(self) -> float: ...

  def getModel(self) -> Model: ...

  def getMultiTrack(self) -> AnimationMultiTrack: ...

  def getRecorder(self) -> AnimationPlayerRecorder: ...

  def getRenderedAngle(self) -> float: ...

  def getShoulderTwistAngle(self) -> float: ...

  def getSkinTransforms(self, skinnedTo: SkinningData) -> list[Matrix4f]: ...

  def getSkinningBoneIndex(self, boneName: str, defaultVal: int) -> int: ...

  def getSkinningBoneIndices(self) -> HashMap[str, Integer]: ...

  def getSkinningData(self) -> SkinningData: ...

  def getTargetAngle(self) -> float: ...

  def getTargetTwistAngle(self) -> float: ...

  def getTwistAngle(self) -> float: ...

  def getUnweightedModelTransform(self, track: AnimationTrack, boneIdx: int, out_modelTransform: Matrix4f) -> Matrix4f: ...

  def hasSkinningData(self) -> bool: ...

  def isBoneReparented(self, boneIdx: int) -> bool: ...

  def isBoneTransformsNeedFirstFrame(self) -> bool: ...

  def isReady(self) -> bool: ...

  def isRecording(self) -> bool: ...

  def onReleased(self) -> None: ...

  def play(self, animName: str, looped: bool) -> AnimationTrack: ...

  def reset(self) -> None: ...

  def resetBoneModelTransforms(self) -> None: ...

  def setAngle(self, angle: float) -> None: ...

  def setAngleToTarget(self) -> None: ...

  def setCounterRotationBone(self, boneName: str) -> None: ...

  def setMaxTwistAngle(self, radians: float) -> None: ...

  def setModel(self, model: Model) -> None: ...

  def setRecorder(self, recorder: AnimationPlayerRecorder) -> None: ...

  def setRecording(self, val: bool) -> None: ...

  def setSharedAnimRepo(self, repo: SharedSkeleAnimationRepository) -> None: ...

  def setTargetAngle(self, targetAngle: float) -> None: ...

  def setTargetToAngle(self) -> None: ...

  def setTwistBones(self, arg0: list[str]) -> None: ...

  def updateMultiTrackBoneTransforms_DeferredMovementOnly(self) -> None: ...

  @staticmethod
  def alloc(model: Model) -> AnimationPlayer: ...

  @staticmethod
  def calculateAnimPlayerAngle(dir: Vector2) -> float: ...

  @staticmethod
  def getUnweightedBoneTransform(track: AnimationTrack, boneIdx: int, out_boneTransform: Matrix4f) -> Matrix4f: ...

  @staticmethod
  def lerpBlendWeight(arg0: float, to: float, fadeTimeTo1: float) -> float: ...

  @staticmethod
  def releaseTracks(tracks: List[AnimationTrack]) -> None: ...

  class SkinTransformData(PooledObject):

    def setSkinnedTo(self, arg0: SkinningData) -> None: ...

    @staticmethod
    def alloc(arg0: SkinningData) -> AnimationPlayer.SkinTransformData: ...

  class L_setTwistBones: ...

  class L_applyTwistBone: ...

  class L_updateBoneAnimationTransform: ...

  class L_getTrackTransform: ...

  class updateMultiTrackBoneTransforms_DeferredMovementOnly: ...

  class L_getBoneModelTransform: ...

  class L_getUnweightedModelTransform: ...

  class L_getUnweightedBoneTransform: ...


class AnimationTrack(PooledObject):

  def Update(self, time: float) -> None: ...

  def UpdateKeyframes(self, dt: float) -> None: ...

  def addListener(self, listener: IAnimListener) -> None: ...

  def advance(self, advanceAmount: float) -> None: ...

  def advanceFraction(self, advanceFraction: float) -> None: ...

  def get(self, bone: int, out_pos: Vector3f, out_rot: Quaternion, out_scale: Vector3f) -> None: ...

  def getBoneWeight(self, boneIdx: int) -> float: ...

  def getClampedBlendDelta(self) -> float: ...

  def getClip(self) -> AnimationClip: ...

  def getCurrentDeferredCounterPosition(self, out_result: Vector3f) -> Vector3f: ...

  def getCurrentDeferredPosition(self, out_result: Vector3f) -> Vector3f: ...

  def getCurrentDeferredRotation(self) -> float: ...

  def getCurrentTime(self) -> float: ...

  def getCurrentTimeFraction(self) -> float: ...

  def getCurrentTimeValue(self) -> float: ...

  def getDeferredBoneWeight(self) -> float: ...

  def getDeferredMovement(self, bonePos: Vector3f, out_deferredPos: Vector2) -> Vector2: ...

  def getDeferredMovementBoneIdx(self) -> int: ...

  def getDeferredMovementDiff(self, out_result: Vector2) -> Vector2: ...

  def getDeferredRotationDiff(self) -> float: ...

  def getDeferredTwistRotation(self, boneRotation: Quaternion) -> float: ...

  def getDuration(self) -> float: ...

  def getLayerIdx(self) -> int: ...

  def getPreviousTime(self) -> float: ...

  def getPreviousTimeValue(self) -> float: ...

  def getPriority(self) -> int: ...

  def getUseDeferredRotation(self) -> bool: ...

  def hasBoneMask(self) -> bool: ...

  def hasClip(self) -> bool: ...

  def initBoneWeights(self, skinningData: SkinningData) -> None: ...

  def isFinished(self) -> bool: ...

  def isLooping(self) -> bool: ...

  def moveCurrentTimeValueTo(self, target: float) -> None: ...

  def moveCurrentTimeValueToFraction(self, fraction: float) -> None: ...

  def onReleased(self) -> None: ...

  def removeListener(self, listener: IAnimListener) -> None: ...

  def reset(self) -> AnimationTrack: ...

  def rewind(self, rewindAmount: float) -> None: ...

  def scaledAdvance(self, advanceAmount: float) -> None: ...

  def scaledRewind(self, rewindAmount: float) -> None: ...

  def setBoneWeights(self, boneWeights: List[AnimBoneWeight]) -> None: ...

  def setCurrentTimeValue(self, currentTimeValue: float) -> None: ...

  def setDeferredBone(self, bone: SkinningBone, axis: BoneAxis) -> None: ...

  def setLayerIdx(self, layerIdx: int) -> None: ...

  def setPreviousTimeValue(self, previousTimeValue: float) -> None: ...

  def setUseDeferredRotation(self, val: bool) -> None: ...

  def startClip(self, clip: AnimationClip, loop: bool) -> None: ...

  @staticmethod
  def alloc() -> AnimationTrack: ...

  @staticmethod
  def createClone(source: AnimationTrack, allocator: Supplier[AnimationTrack]) -> AnimationTrack: ...

  class KeyframeSpan:

    def isBone(self, arg0: int) -> bool: ...

  class DeferredMotionData:

    def reset(self) -> None: ...

  class s_performance: ...

  class L_updateDeferredValues: ...

  class l_updatePoseInternal: ...

  class l_getDeferredMovementFrameAt: ...


class BoneAxis(Enum):

  Y: BoneAxis

  Z: BoneAxis

  @staticmethod
  def valueOf(arg0: str) -> BoneAxis: ...

  @staticmethod
  def values() -> list[BoneAxis]: ...


class BoneTransform(PooledObject):

  def getMatrix(self, out_result: Matrix4f) -> None: ...

  def getPRS(self, out_pos: Vector3f, out_rot: Quaternion, out_scale: Vector3f) -> None: ...

  def getPosition(self, out_pos: Vector3f) -> None: ...

  def mul(self, a: Matrix4f, b: Matrix4f) -> None: ...

  @overload
  def set(self, matrix: Matrix4f) -> None: ...

  @overload
  def set(self, rhs: BoneTransform) -> None: ...

  @overload
  def set(self, pos: Vector3f, rot: Quaternion, scale: Vector3f) -> None: ...

  def setIdentity(self) -> None: ...

  @staticmethod
  def alloc() -> BoneTransform: ...


class IAnimListener:

  def onAnimStarted(self, track: AnimationTrack) -> None: ...

  def onLoopedAnim(self, track: AnimationTrack) -> None: ...

  def onNonLoopedAnimFadeOut(self, track: AnimationTrack) -> None: ...

  def onNonLoopedAnimFinished(self, track: AnimationTrack) -> None: ...

  def onTrackDestroyed(self, track: AnimationTrack) -> None: ...


class Keyframe:

  def clear(self) -> None: ...

  def get(self, out_pos: Vector3f, out_rot: Quaternion, out_scale: Vector3f) -> None: ...

  def set(self, keyframe: Keyframe) -> None: ...

  def setIdentity(self) -> None: ...

  @staticmethod
  @overload
  def lerp(a: Keyframe, b: Keyframe, time: float, out_result: Keyframe) -> Keyframe: ...

  @staticmethod
  @overload
  def lerp(a: Keyframe, b: Keyframe, time: float, out_pos: Vector3f, out_rot: Quaternion, out_scale: Vector3f) -> None: ...

  @staticmethod
  def setIdentityIfNotNull(to: Quaternion) -> None: ...

  @staticmethod
  @overload
  def setIfNotNull(to: Quaternion, val: Quaternion) -> None: ...

  @staticmethod
  @overload
  def setIfNotNull(to: Vector3f, x: float, y: float, z: float) -> None: ...

  @staticmethod
  @overload
  def setIfNotNull(to: Vector3f, val: Vector3f, default_x: float, default_y: float, default_z: float) -> None: ...

  @overload
  def __init__(self):
    self.bone: int

    self.bonename: str

    self.position: Vector3f

    self.rotation: Quaternion

    self.scale: Vector3f

    self.time: float

  @overload
  def __init__(self, pos: Vector3f, rotation: Quaternion, scale: Vector3f): ...


class ModelTransformSampler(PooledObject):

  @overload
  def getBoneMatrix(self, boneIdx: int, out_matrix: Matrix4f) -> None: ...

  @overload
  def getBoneMatrix(self, boneIdx: int, out_matrix: Matrix4f) -> None: ...

  @overload
  def getCurrentTime(self) -> float: ...

  @overload
  def getCurrentTime(self) -> float: ...

  @overload
  def getNumBones(self) -> int: ...

  @overload
  def getNumBones(self) -> int: ...

  @overload
  def getTotalTime(self) -> float: ...

  @overload
  def getTotalTime(self) -> float: ...

  @overload
  def isLooped(self) -> bool: ...

  @overload
  def isLooped(self) -> bool: ...

  @overload
  def moveToTime(self, time: float) -> None: ...

  @overload
  def moveToTime(self, time: float) -> None: ...

  def onReleased(self) -> None: ...

  @staticmethod
  def alloc(animationPlayer: AnimationPlayer, animTrack: AnimationTrack) -> ModelTransformSampler: ...

  def __init__(self): ...

  class L_updateBoneAnimationTransform:

    deferredPos: Vector3f

    key: Keyframe

    pos: Vector3f

    rot: Quaternion

    rotAxis: Vector3f

    rotEulers: Vector3f

    rotMat: Matrix4f

    scale: Vector3f

    def __init__(self): ...


class SoftwareSkinnedModelAnim:

  boneTransforms: list[Matrix4f]

  skinTransforms: list[Matrix4f]

  worldTransforms: list[Matrix4f]

  def Draw(self, frame: int, offset: int, name: str) -> None: ...

  def UpdateSkinTransforms(self, skinningDataValue: SkinningData) -> None: ...

  def UpdateWorldTransforms(self, rootTransform: Matrix4f, angle: float, skinningDataValue: SkinningData) -> None: ...

  def updateSkin(self, matrixPalette: list[Matrix4f], vertices: list[VertexPositionNormalTangentTextureSkin], n: int) -> VertexPositionNormalTangentTextureSkin: ...

  def __init__(self, anims: list[StaticAnimation], model: SoftwareModelMesh, skinning: SkinningData):
    self.animationlength: HashMap[str, Integer]
    self.animationoffset: HashMap[str, Integer]
    self.vertcount: int


class StaticAnimation:

  def Create(self) -> None: ...

  def doRootMotion(self, frames: List[Keyframe]) -> None: ...

  def getPose(self) -> None: ...

  def getPosition(self, out: Vector3f, bone: int) -> Vector3f: ...

  def getRotation(self, out: Quaternion, bone: int) -> Quaternion: ...

  @overload
  def interpolate(self, frames: List[Keyframe]) -> None: ...

  @overload
  def interpolate(self, frames: List[Keyframe], time: float) -> Keyframe: ...

  def __init__(self, clip: AnimationClip):
    self.clip: AnimationClip
    self.matrices: list[list[Matrix4f]]
    self.name: str


class TwistableBoneTransform(BoneTransform):

  @staticmethod
  def alloc() -> TwistableBoneTransform: ...

