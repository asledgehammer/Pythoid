from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.lang import Enum, Boolean, Float, Integer, Iterable
from java.util import List, ArrayList, Comparator, HashMap
from java.util.function import Function, ToDoubleFunction, ToIntFunction, ToLongFunction
from zombie.asset import Asset, AssetType, AssetManager
from zombie.characters import IsoGameCharacter, SurvivorDesc
from zombie.characters.AttachedItems import AttachedModelNames
from zombie.characters.action import ActionContext
from zombie.core.skinnedmodel import ModelCamera
from zombie.core.skinnedmodel.advancedanimation.debug import AnimatorDebugMonitor
from zombie.core.skinnedmodel.animation import AnimationMultiTrack, AnimationTrack, BoneAxis, AnimationPlayer
from zombie.core.skinnedmodel.animation.debug import AnimationPlayerRecorder
from zombie.core.skinnedmodel.model import ModelInstance
from zombie.core.skinnedmodel.visual import HumanVisual, ItemVisuals, BaseVisual
from zombie.core.textures import ColorInfo
from zombie.iso import Vector2, IsoGridSquare
from zombie.util import PooledObject, PooledArrayObject

U = TypeVar('U', default=Any)
T = TypeVar('T', default=Any)
VariableType = TypeVar('VariableType', default=Any)
CallbackGet_VariableType = TypeVar('CallbackGet_VariableType', default=Any)
CallbackSet_VariableType = TypeVar('CallbackSet_VariableType', default=Any)

class AdvancedAnimator:

  s_MotionScale: float

  s_RotationScale: float

  def GetDebug(self) -> str: ...

  def OnAnimDataChanged(self, reload: bool) -> None: ...

  @overload
  def OnAnimEvent(self, sender: AnimLayer, event: AnimEvent) -> None: ...

  @overload
  def OnAnimEvent(self, sender: AnimLayer, event: AnimEvent) -> None: ...

  def Reload(self) -> None: ...

  def SetAnimSet(self, aset: AnimationSet) -> None: ...

  @overload
  def SetState(self, stateName: str) -> None: ...

  @overload
  def SetState(self, stateName: str, subStateNames: List[str]) -> None: ...

  def containsAnyIdleNodes(self) -> bool: ...

  def containsState(self, stateName: str) -> bool: ...

  def debugGetVariables(self) -> ArrayList[str]: ...

  def getActiveSubLayerCount(self) -> int: ...

  def getCharacter(self) -> IAnimatable: ...

  def getCurrentStateName(self) -> str: ...

  def getDebugMonitor(self) -> AnimatorDebugMonitor: ...

  def getRootLayer(self) -> AnimLayer: ...

  def getSubLayerAt(self, idx: int) -> AnimLayer: ...

  def getSubLayerCount(self) -> int: ...

  def init(self, character: IAnimatable) -> None: ...

  def isRecording(self) -> bool: ...

  def printDebugCharacterActions(self, target: str) -> None: ...

  def render(self) -> None: ...

  def setDebugMonitor(self, monitor: AnimatorDebugMonitor) -> None: ...

  def setRecorder(self, recorder: AnimationPlayerRecorder) -> None: ...

  def update(self) -> None: ...

  def updateSpeedScale(self, variable: str, newSpeed: float) -> None: ...

  @staticmethod
  def checkModifiedFiles() -> None: ...

  @staticmethod
  def systemInit() -> None: ...

  def __init__(self):
    self.animcallbackhandlers: ArrayList[IAnimEventCallback]
    self.animset: AnimationSet

  class SubLayerSlot:

    def applyTransition(self) -> None: ...

    def transitionTo(self, newState: AnimState, force: bool) -> None: ...

    def update(self) -> None: ...

    def __init__(self, rootLayer: AnimLayer, character: IAnimatable, animEventsCallback: IAnimEventCallback):
      self.animlayer: AnimLayer
      self.shouldbeactive: bool


class Anim2DBlend:

  def __init__(self):
    self.m_animname: str
    self.m_referenceid: str
    self.m_speedscale: float
    self.m_xpos: float
    self.m_ypos: float


class Anim2DBlendPicker:

  def Pick(self, x: float, y: float) -> Anim2DBlendPicker.PickResults: ...

  def SetPickTriangles(self, tris: List[Anim2DBlendTriangle]) -> None: ...

  def __init__(self): ...

  class Counter:

    def Increment(self) -> int: ...

  class Edge:

    def equals(self, arg0: object) -> bool: ...

    def hashCode(self) -> int: ...

    def __init__(self, arg0: Anim2DBlend, arg1: Anim2DBlend):
      self.a: Anim2DBlend
      self.b: Anim2DBlend

  class HullComparer:

    @overload
    def compare(self, arg0: object, arg1: object) -> int: ...

    @overload
    def compare(self, arg0: object, arg1: object) -> int: ...

    @overload
    def compare(self, arg0: Anim2DBlend, arg1: Anim2DBlend) -> int: ...

    def equals(self, arg0: object) -> bool: ...

    def isLessThan(self, arg0: Anim2DBlend, arg1: Anim2DBlend) -> bool: ...

    def reversed(self) -> Comparator[T]: ...

    @overload
    def thenComparing(self, arg0: Comparator[T]) -> Comparator[T]: ...

    @overload
    def thenComparing(self, arg0: Function[T, U]) -> Comparator[T]: ...

    @overload
    def thenComparing(self, arg0: Function[T, U], arg1: Comparator[U]) -> Comparator[T]: ...

    def thenComparingDouble(self, arg0: ToDoubleFunction[T]) -> Comparator[T]: ...

    def thenComparingInt(self, arg0: ToIntFunction[T]) -> Comparator[T]: ...

    def thenComparingLong(self, arg0: ToLongFunction[T]) -> Comparator[T]: ...

    @staticmethod
    @overload
    def comparing(arg0: Function[T, U]) -> Comparator[T]: ...

    @staticmethod
    @overload
    def comparing(arg0: Function[T, U], arg1: Comparator[U]) -> Comparator[T]: ...

    @staticmethod
    def comparingDouble(arg0: ToDoubleFunction[T]) -> Comparator[T]: ...

    @staticmethod
    def comparingInt(arg0: ToIntFunction[T]) -> Comparator[T]: ...

    @staticmethod
    def comparingLong(arg0: ToLongFunction[T]) -> Comparator[T]: ...

    @staticmethod
    def naturalOrder() -> Comparator[T]: ...

    @staticmethod
    def nullsFirst(arg0: Comparator[T]) -> Comparator[T]: ...

    @staticmethod
    def nullsLast(arg0: Comparator[T]) -> Comparator[T]: ...

    @staticmethod
    def reverseOrder() -> Comparator[T]: ...

    def __init__(self, arg0: float, arg1: float): ...

  class PickResults:

    def __init__(self):
      self.node1: Anim2DBlend
      self.node2: Anim2DBlend
      self.node3: Anim2DBlend
      self.numnodes: int
      self.scale1: float
      self.scale2: float
      self.scale3: float


class Anim2DBlendTriangle:

  def Contains(self, x: float, y: float) -> bool: ...

  @staticmethod
  def sign(P1X: float, P1Y: float, P2X: float, P2Y: float, P3X: float, P3Y: float) -> float: ...

  def __init__(self):
    self.node1: Anim2DBlend
    self.node2: Anim2DBlend
    self.node3: Anim2DBlend


class AnimBoneWeight:

  @overload
  def __init__(self):
    self.bonename: str

    self.includedescendants: bool

    self.weight: float

  @overload
  def __init__(self, boneName: str, weight: float): ...


class AnimCondition:

  def check(self, varSource: IAnimationVariableSource) -> bool: ...

  def getConditionString(self) -> str: ...

  def getValueString(self) -> str: ...

  def toString(self) -> str: ...

  def __init__(self):
    self.m_boolvalue: bool
    self.m_floatvalue: float
    self.m_name: str
    self.m_stringvalue: str
    self.m_type: AnimCondition.Type

  class Type(Enum):

    BOOL: AnimCondition.Type

    EQU: AnimCondition.Type

    GTR: AnimCondition.Type

    LESS: AnimCondition.Type

    NEQ: AnimCondition.Type

    STRING: AnimCondition.Type

    STRNEQ: AnimCondition.Type

    @staticmethod
    def valueOf(arg0: str) -> AnimCondition.Type: ...

    @staticmethod
    def values() -> list[AnimCondition.Type]: ...


class AnimEvent:

  def toDetailsString(self) -> str: ...

  def toString(self) -> str: ...

  def __init__(self):
    self.m_eventname: str
    self.m_parametervalue: str
    self.m_setvariable1: str
    self.m_setvariable2: str
    self.m_time: AnimEvent.AnimEventTime
    self.m_timepc: float

  class AnimEventTime(Enum):

    End: AnimEvent.AnimEventTime

    Percentage: AnimEvent.AnimEventTime

    Start: AnimEvent.AnimEventTime

    @staticmethod
    def valueOf(arg0: str) -> AnimEvent.AnimEventTime: ...

    @staticmethod
    def values() -> list[AnimEvent.AnimEventTime]: ...


class AnimLayer:

  def GetDebugString(self) -> str: ...

  def Reset(self) -> None: ...

  def TransitionTo(self, newState: AnimState, force: bool) -> bool: ...

  def Update(self) -> None: ...

  def findTransitionToNewNode(self, newNode: LiveAnimNode, isSubNode: bool) -> LiveAnimNode: ...

  def getAnimationTrack(self) -> AnimationMultiTrack: ...

  def getCurrentStateName(self) -> str: ...

  def getCurrentSyncNode(self) -> LiveAnimNode: ...

  def getCurrentSyncTrack(self) -> AnimationTrack: ...

  def getDebugNodeName(self) -> str: ...

  def getDepth(self) -> int: ...

  def getLiveAnimNodes(self) -> List[LiveAnimNode]: ...

  def getVariableSource(self) -> IAnimationVariableSource: ...

  def hasState(self) -> bool: ...

  def isCurrentState(self, stateName: str) -> bool: ...

  def isRecording(self) -> bool: ...

  def isStateless(self) -> bool: ...

  def isSubLayer(self) -> bool: ...

  @overload
  def onAnimStarted(self, track: AnimationTrack) -> None: ...

  @overload
  def onAnimStarted(self, track: AnimationTrack) -> None: ...

  @overload
  def onLoopedAnim(self, track: AnimationTrack) -> None: ...

  @overload
  def onLoopedAnim(self, track: AnimationTrack) -> None: ...

  @overload
  def onNonLoopedAnimFadeOut(self, track: AnimationTrack) -> None: ...

  @overload
  def onNonLoopedAnimFadeOut(self, track: AnimationTrack) -> None: ...

  @overload
  def onNonLoopedAnimFinished(self, track: AnimationTrack) -> None: ...

  @overload
  def onNonLoopedAnimFinished(self, track: AnimationTrack) -> None: ...

  @overload
  def onTrackDestroyed(self, track: AnimationTrack) -> None: ...

  @overload
  def onTrackDestroyed(self, track: AnimationTrack) -> None: ...

  def removeFadedOutNodes(self) -> None: ...

  def render(self) -> None: ...

  def updateNodeActiveFlags(self) -> None: ...

  @overload
  def __init__(self, character: IAnimatable, animEventsCallback: IAnimEventCallback): ...
  @overload
  def __init__(self, parentLayer: AnimLayer, character: IAnimatable, animEventsCallback: IAnimEventCallback): ...

  class StartAnimTrackParameters(PooledObject):

    def onReleased(self) -> None: ...

    @staticmethod
    def alloc() -> AnimLayer.StartAnimTrackParameters: ...


class AnimNode:

  def checkConditions(self, varSource: IAnimationVariableSource) -> bool: ...

  def findTransitionTo(self, varSource: IAnimationVariableSource, targetName: str) -> AnimTransition: ...

  def getBlendOutTime(self) -> float: ...

  def getConditionsString(self) -> str: ...

  def getDeferredBoneAxis(self) -> BoneAxis: ...

  def getDeferredBoneName(self) -> str: ...

  def getPriority(self) -> int: ...

  def getSpeedScale(self, varSource: IAnimationVariableSource) -> float: ...

  def isAbstract(self) -> bool: ...

  def isIdleAnim(self) -> bool: ...

  def toString(self) -> str: ...

  @staticmethod
  def Parse(source: str) -> AnimNode: ...

  def __init__(self):
    self.m_2dblends: List[Anim2DBlend]
    self.m_2dblendtri: List[Anim2DBlendTriangle]
    self.m_animname: str
    self.m_animreverse: bool
    self.m_blendouttime: float
    self.m_blendtime: float
    self.m_conditions: List[AnimCondition]
    self.m_deferredboneaxis: BoneAxis
    self.m_deferredbonename: str
    self.m_earlytransitionout: bool
    self.m_events: List[AnimEvent]
    self.m_looped: bool
    self.m_maxtorsotwist: float
    self.m_name: str
    self.m_picker: Anim2DBlendPicker
    self.m_priority: int
    self.m_randomadvancefraction: float
    self.m_scalar: str
    self.m_scalar2: str
    self.m_speedscale: str
    self.m_speedscalerandommultipliermax: float
    self.m_speedscalerandommultipliermin: float
    self.m_speedscalevariable: str
    self.m_state: AnimState
    self.m_stopanimonexit: bool
    self.m_substateboneweights: List[AnimBoneWeight]
    self.m_synctrackingenabled: bool
    self.m_transitions: List[AnimTransition]
    self.m_usedeferedrotation: bool


class AnimNodeAsset(Asset):

  ASSET_TYPE: AssetType

  def getType(self) -> AssetType: ...


class AnimNodeAssetManager(AssetManager):

  instance: AnimNodeAssetManager

  def onStateChanged(self, old_state: Asset.State, new_state: Asset.State, asset: Asset) -> None: ...

  def __init__(self): ...


class AnimState:

  def getAnimNodes(self, varSource: IAnimationVariableSource, nodes: List[AnimNode]) -> List[AnimNode]: ...

  def toString(self) -> str: ...

  @staticmethod
  def Parse(name: str, statePath: str) -> AnimState: ...

  @staticmethod
  def getStateName(state: AnimState) -> str: ...

  def __init__(self):
    self.m_defaultindex: int
    self.m_name: str
    self.m_nodes: List[AnimNode]
    self.m_set: AnimationSet


class AnimTransition:

  def __init__(self):
    self.m_animname: str
    self.m_blendintime: float
    self.m_blendouttime: float
    self.m_conditions: List[AnimCondition]
    self.m_speedscale: float
    self.m_syncadjusttime: float
    self.m_target: str


class AnimatedModel(AnimationVariableSource):

  @overload
  def DoRender(self, camera: ModelCamera) -> None: ...

  @overload
  def DoRender(self, x: int, y: int, w: int, h: int, sizeV: float, animPlayerAngle: float) -> None: ...

  def DoRenderToWorld(self, x: float, y: float, z: float, animPlayerAngle: float) -> None: ...

  @overload
  def GetAnimSetName(self) -> str: ...

  @overload
  def GetAnimSetName(self) -> str: ...

  @overload
  def OnAnimEvent(self, sender: AnimLayer, event: AnimEvent) -> None: ...

  @overload
  def OnAnimEvent(self, sender: AnimLayer, event: AnimEvent) -> None: ...

  @overload
  def actionStateChanged(self, sender: ActionContext) -> None: ...

  @overload
  def actionStateChanged(self, sender: ActionContext) -> None: ...

  def clothingItemChanged(self, itemGuid: str) -> None: ...

  @overload
  def getActionContext(self) -> ActionContext: ...

  @overload
  def getActionContext(self) -> ActionContext: ...

  @overload
  def getAdvancedAnimator(self) -> AdvancedAnimator: ...

  @overload
  def getAdvancedAnimator(self) -> AdvancedAnimator: ...

  @overload
  def getAnimationPlayer(self) -> AnimationPlayer: ...

  @overload
  def getAnimationPlayer(self) -> AnimationPlayer: ...

  @overload
  def getAnimationPlayerRecorder(self) -> AnimationPlayerRecorder: ...

  @overload
  def getAnimationPlayerRecorder(self) -> AnimationPlayerRecorder: ...

  @overload
  def getHumanVisual(self) -> HumanVisual: ...

  @overload
  def getHumanVisual(self) -> HumanVisual: ...

  @overload
  def getItemVisuals(self, itemVisuals: ItemVisuals) -> None: ...

  @overload
  def getItemVisuals(self, itemVisuals: ItemVisuals) -> None: ...

  @overload
  def getModelInstance(self) -> ModelInstance: ...

  @overload
  def getModelInstance(self) -> ModelInstance: ...

  def getOnlineID(self) -> int: ...

  def getState(self) -> str: ...

  @overload
  def getUID(self) -> str: ...

  @overload
  def getUID(self) -> str: ...

  def getVisual(self) -> BaseVisual: ...

  @overload
  def isAnimationRecorderActive(self) -> bool: ...

  @overload
  def isAnimationRecorderActive(self) -> bool: ...

  @overload
  def isFemale(self) -> bool: ...

  @overload
  def isFemale(self) -> bool: ...

  def isIsometric(self) -> bool: ...

  def isReadyToRender(self) -> bool: ...

  def isRendered(self) -> bool: ...

  @overload
  def isSkeleton(self) -> bool: ...

  @overload
  def isSkeleton(self) -> bool: ...

  @overload
  def isZombie(self) -> bool: ...

  @overload
  def isZombie(self) -> bool: ...

  def postRender(self, bRendered: bool) -> None: ...

  def releaseAnimationPlayer(self) -> None: ...

  def renderMain(self) -> int: ...

  def setAlpha(self, alpha: float) -> None: ...

  def setAmbient(self, ambient: ColorInfo, outside: bool, room: bool) -> None: ...

  def setAngle(self, angle: Vector2) -> None: ...

  def setAnimSetName(self, name: str) -> None: ...

  def setAnimate(self, animate: bool) -> None: ...

  def setAttachedModelNames(self, attachedModelNames: AttachedModelNames) -> None: ...

  def setCharacter(self, character: IsoGameCharacter) -> None: ...

  def setFlipY(self, flip: bool) -> None: ...

  def setIsometric(self, iso: bool) -> None: ...

  def setLights(self, lights: list[IsoGridSquare.ResultLight], x: float, y: float, z: float) -> None: ...

  def setModelData(self, baseVisual: HumanVisual, itemVisuals: ItemVisuals) -> None: ...

  def setOffset(self, x: float, y: float, z: float) -> None: ...

  def setOutfitName(self, name: str, female: bool, zombie: bool) -> None: ...

  def setPrimaryHandModelName(self, name: str) -> None: ...

  def setSecondaryHandModelName(self, name: str) -> None: ...

  def setState(self, state: str) -> None: ...

  def setSurvivorDesc(self, survivorDesc: SurvivorDesc) -> None: ...

  def setTrackTime(self, trackTime: float) -> None: ...

  def setVisual(self, baseVisual: HumanVisual) -> None: ...

  def update(self) -> None: ...

  def __init__(self): ...

  class StateInfo:

    def __init__(self): ...

  class UIModelCamera(ModelCamera):

    def Begin(self) -> None: ...

    def End(self) -> None: ...

  class AnimatedModelInstanceRenderData:

    def transformToParent(self, arg0: AnimatedModel.AnimatedModelInstanceRenderData) -> AnimatedModel.AnimatedModelInstanceRenderData: ...

  class WorldModelCamera(ModelCamera):

    def Begin(self) -> None: ...

    def End(self) -> None: ...


class AnimationSet:

  def GetState(self, name: str) -> AnimState: ...

  def Load(self, name: str) -> bool: ...

  def containsState(self, name: str) -> bool: ...

  @staticmethod
  def GetAnimationSet(name: str, reload: bool) -> AnimationSet: ...

  @staticmethod
  def Reset() -> None: ...

  def __init__(self):
    self.m_name: str
    self.states: HashMap[str, AnimState]


class AnimationVariableGenericSlot(AnimationVariableSlot):

  def canConvertFrom(self, val: str) -> bool: ...

  def clear(self) -> None: ...

  def getType(self) -> AnimationVariableType: ...

  def getValueBool(self) -> bool: ...

  def getValueFloat(self) -> float: ...

  def getValueString(self) -> str: ...

  @overload
  def setValue(self, val: bool) -> None: ...

  @overload
  def setValue(self, val: float) -> None: ...

  @overload
  def setValue(self, val: str) -> None: ...

  def __init__(self, key: str): ...


class AnimationVariableHandle:

  def getVariableIndex(self) -> int: ...

  def getVariableName(self) -> str: ...

  @staticmethod
  def alloc(name: str) -> AnimationVariableHandle: ...


class AnimationVariableHandlePool:

  @staticmethod
  def getOrCreate(name: str) -> AnimationVariableHandle: ...

  def __init__(self): ...


class AnimationVariableSlot:

  def canConvertFrom(self, arg0: str) -> bool: ...

  def clear(self) -> None: ...

  @overload
  def getKey(self) -> str: ...

  @overload
  def getKey(self) -> str: ...

  def getType(self) -> AnimationVariableType: ...

  def getValueBool(self) -> bool: ...

  def getValueFloat(self) -> float: ...

  def getValueString(self) -> str: ...

  def isReadOnly(self) -> bool: ...

  @overload
  def setValue(self, arg0: bool) -> None: ...

  @overload
  def setValue(self, arg0: float) -> None: ...

  @overload
  def setValue(self, arg0: str) -> None: ...


class AnimationVariableSlotBool(AnimationVariableSlot):

  def canConvertFrom(self, val: str) -> bool: ...

  def clear(self) -> None: ...

  def getType(self) -> AnimationVariableType: ...

  def getValueBool(self) -> bool: ...

  def getValueFloat(self) -> float: ...

  def getValueString(self) -> str: ...

  @overload
  def setValue(self, val: bool) -> None: ...

  @overload
  def setValue(self, val: float) -> None: ...

  @overload
  def setValue(self, val: str) -> None: ...

  def __init__(self, key: str): ...


class AnimationVariableSlotCallback[VariableType](AnimationVariableSlot):

  def clear(self) -> None: ...

  def getDefaultValue(self) -> object: ...

  def getValue(self) -> object: ...

  def isReadOnly(self) -> bool: ...

  def trySetValue(self, arg0: object) -> bool: ...

  class CallbackGet[CallbackGet_VariableType]:

    def call(self) -> object: ...

  class CallbackSet[CallbackSet_VariableType]:

    def call(self, arg0: object) -> None: ...


class AnimationVariableSlotCallbackBool(AnimationVariableSlotCallback):

  def canConvertFrom(self, val: str) -> bool: ...

  @overload
  def getDefaultValue(self) -> Boolean: ...

  @overload
  def getDefaultValue(self) -> object: ...

  def getType(self) -> AnimationVariableType: ...

  def getValueBool(self) -> bool: ...

  def getValueFloat(self) -> float: ...

  def getValueString(self) -> str: ...

  @overload
  def setValue(self, val: bool) -> None: ...

  @overload
  def setValue(self, val: float) -> None: ...

  @overload
  def setValue(self, val: str) -> None: ...

  @overload
  def __init__(self, key: str, callbackGet: AnimationVariableSlotCallbackBool.CallbackGetStrongTyped): ...
  @overload
  def __init__(self, key: str, defaultVal: bool, callbackGet: AnimationVariableSlotCallbackBool.CallbackGetStrongTyped): ...
  @overload
  def __init__(self, key: str, callbackGet: AnimationVariableSlotCallbackBool.CallbackGetStrongTyped, callbackSet: AnimationVariableSlotCallbackBool.CallbackSetStrongTyped): ...
  @overload
  def __init__(self, key: str, defaultVal: bool, callbackGet: AnimationVariableSlotCallbackBool.CallbackGetStrongTyped, callbackSet: AnimationVariableSlotCallbackBool.CallbackSetStrongTyped): ...

  class CallbackSetStrongTyped:

    def call(self, arg0: object) -> None: ...

  class CallbackGetStrongTyped:

    def call(self) -> object: ...


class AnimationVariableSlotCallbackFloat(AnimationVariableSlotCallback):

  def canConvertFrom(self, val: str) -> bool: ...

  @overload
  def getDefaultValue(self) -> Float: ...

  @overload
  def getDefaultValue(self) -> object: ...

  def getType(self) -> AnimationVariableType: ...

  def getValueBool(self) -> bool: ...

  def getValueFloat(self) -> float: ...

  def getValueString(self) -> str: ...

  @overload
  def setValue(self, val: bool) -> None: ...

  @overload
  def setValue(self, val: float) -> None: ...

  @overload
  def setValue(self, val: str) -> None: ...

  @overload
  def __init__(self, key: str, callbackGet: AnimationVariableSlotCallbackFloat.CallbackGetStrongTyped): ...
  @overload
  def __init__(self, key: str, defaultVal: float, callbackGet: AnimationVariableSlotCallbackFloat.CallbackGetStrongTyped): ...
  @overload
  def __init__(self, key: str, callbackGet: AnimationVariableSlotCallbackFloat.CallbackGetStrongTyped, callbackSet: AnimationVariableSlotCallbackFloat.CallbackSetStrongTyped): ...
  @overload
  def __init__(self, key: str, defaultVal: float, callbackGet: AnimationVariableSlotCallbackFloat.CallbackGetStrongTyped, callbackSet: AnimationVariableSlotCallbackFloat.CallbackSetStrongTyped): ...

  class CallbackSetStrongTyped:

    def call(self, arg0: object) -> None: ...

  class CallbackGetStrongTyped:

    def call(self) -> object: ...


class AnimationVariableSlotCallbackInt(AnimationVariableSlotCallback):

  def canConvertFrom(self, val: str) -> bool: ...

  @overload
  def getDefaultValue(self) -> Integer: ...

  @overload
  def getDefaultValue(self) -> object: ...

  def getType(self) -> AnimationVariableType: ...

  def getValueBool(self) -> bool: ...

  def getValueFloat(self) -> float: ...

  def getValueString(self) -> str: ...

  @overload
  def setValue(self, val: bool) -> None: ...

  @overload
  def setValue(self, val: float) -> None: ...

  @overload
  def setValue(self, val: str) -> None: ...

  @overload
  def __init__(self, key: str, callbackGet: AnimationVariableSlotCallbackInt.CallbackGetStrongTyped): ...
  @overload
  def __init__(self, key: str, defaultVal: int, callbackGet: AnimationVariableSlotCallbackInt.CallbackGetStrongTyped): ...
  @overload
  def __init__(self, key: str, callbackGet: AnimationVariableSlotCallbackInt.CallbackGetStrongTyped, callbackSet: AnimationVariableSlotCallbackInt.CallbackSetStrongTyped): ...
  @overload
  def __init__(self, key: str, defaultVal: int, callbackGet: AnimationVariableSlotCallbackInt.CallbackGetStrongTyped, callbackSet: AnimationVariableSlotCallbackInt.CallbackSetStrongTyped): ...

  class CallbackSetStrongTyped:

    def call(self, arg0: object) -> None: ...

  class CallbackGetStrongTyped:

    def call(self) -> object: ...


class AnimationVariableSlotCallbackString(AnimationVariableSlotCallback):

  def canConvertFrom(self, val: str) -> bool: ...

  @overload
  def getDefaultValue(self) -> str: ...

  @overload
  def getDefaultValue(self) -> object: ...

  def getType(self) -> AnimationVariableType: ...

  def getValueBool(self) -> bool: ...

  def getValueFloat(self) -> float: ...

  def getValueString(self) -> str: ...

  @overload
  def setValue(self, val: bool) -> None: ...

  @overload
  def setValue(self, val: float) -> None: ...

  @overload
  def setValue(self, val: str) -> None: ...

  @overload
  def __init__(self, key: str, callbackGet: AnimationVariableSlotCallbackString.CallbackGetStrongTyped): ...
  @overload
  def __init__(self, key: str, defaultVal: str, callbackGet: AnimationVariableSlotCallbackString.CallbackGetStrongTyped): ...
  @overload
  def __init__(self, key: str, callbackGet: AnimationVariableSlotCallbackString.CallbackGetStrongTyped, callbackSet: AnimationVariableSlotCallbackString.CallbackSetStrongTyped): ...
  @overload
  def __init__(self, key: str, defaultVal: str, callbackGet: AnimationVariableSlotCallbackString.CallbackGetStrongTyped, callbackSet: AnimationVariableSlotCallbackString.CallbackSetStrongTyped): ...

  class CallbackSetStrongTyped:

    def call(self, arg0: object) -> None: ...

  class CallbackGetStrongTyped:

    def call(self) -> object: ...


class AnimationVariableSlotFloat(AnimationVariableSlot):

  def canConvertFrom(self, val: str) -> bool: ...

  def clear(self) -> None: ...

  def getType(self) -> AnimationVariableType: ...

  def getValueBool(self) -> bool: ...

  def getValueFloat(self) -> float: ...

  def getValueString(self) -> str: ...

  @overload
  def setValue(self, val: bool) -> None: ...

  @overload
  def setValue(self, val: float) -> None: ...

  @overload
  def setValue(self, val: str) -> None: ...

  def __init__(self, key: str): ...


class AnimationVariableSlotString(AnimationVariableSlot):

  def canConvertFrom(self, val: str) -> bool: ...

  def clear(self) -> None: ...

  def getType(self) -> AnimationVariableType: ...

  def getValueBool(self) -> bool: ...

  def getValueFloat(self) -> float: ...

  def getValueString(self) -> str: ...

  @overload
  def setValue(self, val: bool) -> None: ...

  @overload
  def setValue(self, val: float) -> None: ...

  @overload
  def setValue(self, val: str) -> None: ...

  def __init__(self, key: str): ...


class AnimationVariableSource:

  @overload
  def clearVariable(self, key: str) -> None: ...

  @overload
  def clearVariable(self, key: str) -> None: ...

  @overload
  def clearVariables(self) -> None: ...

  @overload
  def clearVariables(self) -> None: ...

  def containsVariable(self, key: str) -> bool: ...

  def getGameVariables(self) -> Iterable[IAnimationVariableSlot]: ...

  @overload
  def getOrCreateVariable(self, key: str) -> IAnimationVariableSlot: ...

  @overload
  def getOrCreateVariable(self, key: str) -> IAnimationVariableSlot: ...

  @overload
  def getVariable(self, key: str) -> IAnimationVariableSlot: ...

  @overload
  def getVariable(self, handle: AnimationVariableHandle) -> IAnimationVariableSlot: ...

  @overload
  def getVariableBoolean(self, key: str) -> bool: ...

  @overload
  def getVariableBoolean(self, key: str, defaultVal: bool) -> bool: ...

  def getVariableFloat(self, key: str, defaultVal: float) -> float: ...

  def getVariableString(self, key: str) -> str: ...

  def isVariable(self, name: str, val: str) -> bool: ...

  @overload
  def setVariable(self, var: IAnimationVariableSlot) -> None: ...

  @overload
  def setVariable(self, var: IAnimationVariableSlot) -> None: ...

  @overload
  def setVariable(self, key: str, value: bool) -> None: ...

  @overload
  def setVariable(self, key: str, value: bool) -> None: ...

  @overload
  def setVariable(self, key: str, value: float) -> None: ...

  @overload
  def setVariable(self, key: str, value: float) -> None: ...

  @overload
  def setVariable(self, key: str, value: str) -> None: ...

  @overload
  def setVariable(self, key: str, value: str) -> None: ...

  @overload
  def setVariable(self, key: str, callbackGet: AnimationVariableSlotCallbackBool.CallbackGetStrongTyped) -> None: ...

  @overload
  def setVariable(self, key: str, callbackGet: AnimationVariableSlotCallbackFloat.CallbackGetStrongTyped) -> None: ...

  @overload
  def setVariable(self, key: str, callbackGet: AnimationVariableSlotCallbackInt.CallbackGetStrongTyped) -> None: ...

  @overload
  def setVariable(self, key: str, callbackGet: AnimationVariableSlotCallbackString.CallbackGetStrongTyped) -> None: ...

  @overload
  def setVariable(self, key: str, defaultVal: bool, callbackGet: AnimationVariableSlotCallbackBool.CallbackGetStrongTyped) -> None: ...

  @overload
  def setVariable(self, key: str, defaultVal: float, callbackGet: AnimationVariableSlotCallbackFloat.CallbackGetStrongTyped) -> None: ...

  @overload
  def setVariable(self, key: str, defaultVal: int, callbackGet: AnimationVariableSlotCallbackInt.CallbackGetStrongTyped) -> None: ...

  @overload
  def setVariable(self, key: str, defaultVal: str, callbackGet: AnimationVariableSlotCallbackString.CallbackGetStrongTyped) -> None: ...

  @overload
  def setVariable(self, key: str, callbackGet: AnimationVariableSlotCallbackBool.CallbackGetStrongTyped, callbackSet: AnimationVariableSlotCallbackBool.CallbackSetStrongTyped) -> None: ...

  @overload
  def setVariable(self, key: str, callbackGet: AnimationVariableSlotCallbackFloat.CallbackGetStrongTyped, callbackSet: AnimationVariableSlotCallbackFloat.CallbackSetStrongTyped) -> None: ...

  @overload
  def setVariable(self, key: str, callbackGet: AnimationVariableSlotCallbackInt.CallbackGetStrongTyped, callbackSet: AnimationVariableSlotCallbackInt.CallbackSetStrongTyped) -> None: ...

  @overload
  def setVariable(self, key: str, callbackGet: AnimationVariableSlotCallbackString.CallbackGetStrongTyped, callbackSet: AnimationVariableSlotCallbackString.CallbackSetStrongTyped) -> None: ...

  @overload
  def setVariable(self, key: str, defaultVal: bool, callbackGet: AnimationVariableSlotCallbackBool.CallbackGetStrongTyped, callbackSet: AnimationVariableSlotCallbackBool.CallbackSetStrongTyped) -> None: ...

  @overload
  def setVariable(self, key: str, defaultVal: float, callbackGet: AnimationVariableSlotCallbackFloat.CallbackGetStrongTyped, callbackSet: AnimationVariableSlotCallbackFloat.CallbackSetStrongTyped) -> None: ...

  @overload
  def setVariable(self, key: str, defaultVal: int, callbackGet: AnimationVariableSlotCallbackInt.CallbackGetStrongTyped, callbackSet: AnimationVariableSlotCallbackInt.CallbackSetStrongTyped) -> None: ...

  @overload
  def setVariable(self, key: str, defaultVal: str, callbackGet: AnimationVariableSlotCallbackString.CallbackGetStrongTyped, callbackSet: AnimationVariableSlotCallbackString.CallbackSetStrongTyped) -> None: ...

  def __init__(self): ...


class AnimationVariableType(Enum):

  Boolean: AnimationVariableType

  Float: AnimationVariableType

  String: AnimationVariableType

  Void: AnimationVariableType

  @staticmethod
  def valueOf(arg0: str) -> AnimationVariableType: ...

  @staticmethod
  def values() -> list[AnimationVariableType]: ...


class BlendInfo:

  def __init__(self):
    self.dec: float
    self.inc: float
    self.muldec: str
    self.mulinc: str
    self.name: str
    self.type: BlendType

  class BlendInstance:

    def GetDebug(self) -> str: ...

    def set(self, val: float) -> None: ...

    def update(self) -> None: ...

    def __init__(self, info: BlendInfo):
      self.current: float
      self.target: float


class BlendType(Enum):

  InverseExponential: BlendType

  Linear: BlendType

  Type: BlendType

  @staticmethod
  def valueOf(arg0: str) -> BlendType: ...

  @staticmethod
  def values() -> list[BlendType]: ...


class IAnimEventCallback:

  def OnAnimEvent(self, sender: AnimLayer, event: AnimEvent) -> None: ...


class IAnimatable:

  def GetAnimSetName(self) -> str: ...

  def containsVariable(self, arg0: str) -> bool: ...

  def getActionContext(self) -> ActionContext: ...

  def getAdvancedAnimator(self) -> AdvancedAnimator: ...

  def getAnimationPlayer(self) -> AnimationPlayer: ...

  def getAnimationPlayerRecorder(self) -> AnimationPlayerRecorder: ...

  def getGameVariables(self) -> Iterable[IAnimationVariableSlot]: ...

  def getModelInstance(self) -> ModelInstance: ...

  def getOnlineID(self) -> int: ...

  def getUID(self) -> str: ...

  @overload
  def getVariable(self, arg0: str) -> IAnimationVariableSlot: ...

  @overload
  def getVariable(self, arg0: AnimationVariableHandle) -> IAnimationVariableSlot: ...

  @overload
  def getVariableBoolean(self, arg0: str) -> bool: ...

  @overload
  def getVariableBoolean(self, arg0: str, arg1: bool) -> bool: ...

  def getVariableFloat(self, arg0: str, arg1: float) -> float: ...

  def getVariableString(self, arg0: str) -> str: ...

  def isAnimationRecorderActive(self) -> bool: ...

  def isVariable(self, arg0: str, arg1: str) -> bool: ...


class IAnimationVariableMap:

  def clearVariable(self, key: str) -> None: ...

  def clearVariables(self) -> None: ...

  def containsVariable(self, arg0: str) -> bool: ...

  def getGameVariables(self) -> Iterable[IAnimationVariableSlot]: ...

  def getOrCreateVariable(self, key: str) -> IAnimationVariableSlot: ...

  @overload
  def getVariable(self, arg0: str) -> IAnimationVariableSlot: ...

  @overload
  def getVariable(self, arg0: AnimationVariableHandle) -> IAnimationVariableSlot: ...

  @overload
  def getVariableBoolean(self, arg0: str) -> bool: ...

  @overload
  def getVariableBoolean(self, arg0: str, arg1: bool) -> bool: ...

  def getVariableFloat(self, arg0: str, arg1: float) -> float: ...

  def getVariableString(self, arg0: str) -> str: ...

  def isVariable(self, arg0: str, arg1: str) -> bool: ...

  @overload
  def setVariable(self, slot: IAnimationVariableSlot) -> None: ...

  @overload
  def setVariable(self, key: str, value: bool) -> None: ...

  @overload
  def setVariable(self, key: str, value: float) -> None: ...

  @overload
  def setVariable(self, key: str, value: str) -> None: ...


class IAnimationVariableSlot:

  def canConvertFrom(self, val: str) -> bool: ...

  def clear(self) -> None: ...

  def getKey(self) -> str: ...

  def getType(self) -> AnimationVariableType: ...

  def getValueBool(self) -> bool: ...

  def getValueFloat(self) -> float: ...

  def getValueString(self) -> str: ...

  def isReadOnly(self) -> bool: ...

  @overload
  def setValue(self, val: bool) -> None: ...

  @overload
  def setValue(self, val: float) -> None: ...

  @overload
  def setValue(self, val: str) -> None: ...


class IAnimationVariableSource:

  def containsVariable(self, name: str) -> bool: ...

  def getGameVariables(self) -> Iterable[IAnimationVariableSlot]: ...

  @overload
  def getVariable(self, key: str) -> IAnimationVariableSlot: ...

  @overload
  def getVariable(self, handle: AnimationVariableHandle) -> IAnimationVariableSlot: ...

  @overload
  def getVariableBoolean(self, name: str) -> bool: ...

  @overload
  def getVariableBoolean(self, key: str, defaultVal: bool) -> bool: ...

  def getVariableFloat(self, name: str, defaultVal: float) -> float: ...

  def getVariableString(self, name: str) -> str: ...

  def isVariable(self, name: str, val: str) -> bool: ...


class LiveAnimNode(PooledObject):

  def addMainTrack(self, track: AnimationTrack) -> None: ...

  def findTransitionTo(self, varSource: IAnimationVariableSource, name: str) -> AnimTransition: ...

  def getBlendInTime(self) -> float: ...

  def getBlendOutTime(self) -> float: ...

  def getDeferredBoneAxis(self) -> BoneAxis: ...

  def getDeferredBoneName(self) -> str: ...

  def getLayerIdx(self) -> int: ...

  def getMainInitialRewindTime(self) -> float: ...

  def getName(self) -> str: ...

  def getPlayingTrackAt(self, trackIdx: int) -> AnimationTrack: ...

  def getPlayingTrackCount(self) -> int: ...

  def getPriority(self) -> int: ...

  def getSourceNode(self) -> AnimNode: ...

  def getSpeedScale(self, varSource: IAnimationVariableSource) -> float: ...

  def getSubStateBoneWeights(self) -> List[AnimBoneWeight]: ...

  def getTransitionFrom(self) -> str: ...

  def getTransitionInBlendInTime(self) -> float: ...

  def getTransitionInBlendOutTime(self) -> float: ...

  def getTransitionInTrack(self) -> AnimationTrack: ...

  def getTransitionInWeight(self) -> float: ...

  def getTransitionLayerIdx(self) -> int: ...

  def getWeight(self) -> float: ...

  def isActive(self) -> bool: ...

  def isIdleAnimActive(self) -> bool: ...

  def isLooped(self) -> bool: ...

  def isMainAnimActive(self) -> bool: ...

  def isNew(self) -> bool: ...

  def isTransitioningIn(self) -> bool: ...

  @overload
  def onAnimStarted(self, track: AnimationTrack) -> None: ...

  @overload
  def onAnimStarted(self, track: AnimationTrack) -> None: ...

  @overload
  def onLoopedAnim(self, track: AnimationTrack) -> None: ...

  @overload
  def onLoopedAnim(self, track: AnimationTrack) -> None: ...

  @overload
  def onNonLoopedAnimFadeOut(self, track: AnimationTrack) -> None: ...

  @overload
  def onNonLoopedAnimFadeOut(self, track: AnimationTrack) -> None: ...

  @overload
  def onNonLoopedAnimFinished(self, track: AnimationTrack) -> None: ...

  @overload
  def onNonLoopedAnimFinished(self, track: AnimationTrack) -> None: ...

  def onReleased(self) -> None: ...

  @overload
  def onTrackDestroyed(self, track: AnimationTrack) -> None: ...

  @overload
  def onTrackDestroyed(self, track: AnimationTrack) -> None: ...

  def setActive(self, active: bool) -> None: ...

  def setTransitionInBlendDelta(self, blendDelta: float) -> None: ...

  def setTransitionOut(self, transitionOut: AnimTransition) -> None: ...

  @overload
  def startTransitionIn(self, transitionFrom: AnimNode, transitionIn: AnimTransition, track: AnimationTrack) -> None: ...

  @overload
  def startTransitionIn(self, transitionFrom: LiveAnimNode, transitionIn: AnimTransition, track: AnimationTrack) -> None: ...

  def update(self, timeDelta: float) -> None: ...

  def wasActivated(self) -> bool: ...

  def wasDeactivated(self) -> bool: ...

  @staticmethod
  def alloc(animLayer: AnimLayer, sourceNode: AnimNode, layerIdx: int) -> LiveAnimNode: ...

  class TransitionIn: ...


class PooledAnimBoneWeightArray(PooledArrayObject):

  @staticmethod
  def alloc(count: int) -> PooledAnimBoneWeightArray: ...

  @staticmethod
  @overload
  def toArray(list: List[AnimBoneWeight]) -> PooledAnimBoneWeightArray: ...

  @staticmethod
  @overload
  def toArray(source: PooledArrayObject[AnimBoneWeight]) -> PooledAnimBoneWeightArray: ...

  def __init__(self): ...

