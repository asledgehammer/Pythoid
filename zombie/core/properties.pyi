from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.lang import Double
from java.util import List, ArrayList, Comparator
from java.util.function import Function, ToDoubleFunction, ToIntFunction, ToLongFunction
from zombie.core.Collections import NonBlockingHashMap
from zombie.iso.SpriteDetails import IsoFlagType

U = TypeVar('U', default=Any)
T = TypeVar('T', default=Any)

class PropertyContainer:

  sorted: List[object]

  test: NonBlockingHashMap[IsoFlagType, PropertyContainer.MostTested]

  def AddProperties(self, other: PropertyContainer) -> None: ...

  def Clear(self) -> None: ...

  def CreateKeySet(self) -> None: ...

  @overload
  def Is(self, flag: Double) -> bool: ...

  @overload
  def Is(self, isoPropertyType: str) -> bool: ...

  @overload
  def Is(self, flag: IsoFlagType) -> bool: ...

  @overload
  def Set(self, flag: IsoFlagType) -> None: ...

  @overload
  def Set(self, propName: str, propName2: str) -> None: ...

  @overload
  def Set(self, flag: IsoFlagType, ignored: str) -> None: ...

  @overload
  def Set(self, propName: str, propName2: str, checkIsoFlagType: bool) -> None: ...

  @overload
  def UnSet(self, propName: str) -> None: ...

  @overload
  def UnSet(self, flag: IsoFlagType) -> None: ...

  def Val(self, property: str) -> str: ...

  def getFlagsList(self) -> ArrayList[IsoFlagType]: ...

  def getItemHeight(self) -> int: ...

  def getPropertyNames(self) -> ArrayList[str]: ...

  def getStackReplaceTileOffset(self) -> int: ...

  def getSurface(self) -> int: ...

  def isSurfaceOffset(self) -> bool: ...

  def isTable(self) -> bool: ...

  def isTableTop(self) -> bool: ...

  def __init__(self): ...

  class MostTested:

    def __init__(self):
      self.count: int
      self.flag: IsoFlagType

  class ProfileEntryComparitor:

    @overload
    def compare(self, arg0: object, arg1: object) -> int: ...

    @overload
    def compare(self, arg0: object, arg1: object) -> int: ...

    def equals(self, arg0: object) -> bool: ...

    def reversed(self) -> Comparator[T]: ...

    @overload
    def thenComparing(self, arg0: Comparator[T]) -> Comparator[T]: ...

    @overload
    def thenComparing(self, arg0: Function[T, U]) -> Comparator[T]: ...

    @overload
    def thenComparing(self, arg0: Function[T, U], arg1: Comparator[U]) -> Comparator[T]: ...

    def thenComparingDouble(self, arg0: ToDoubleFunction[T]) -> Comparator[T]: ...

    def thenComparingInt(self, arg0: ToIntFunction[T]) -> Comparator[T]: ...

    def thenComparingLong(self, arg0: ToLongFunction[T]) -> Comparator[T]: ...

    @staticmethod
    @overload
    def comparing(arg0: Function[T, U]) -> Comparator[T]: ...

    @staticmethod
    @overload
    def comparing(arg0: Function[T, U], arg1: Comparator[U]) -> Comparator[T]: ...

    @staticmethod
    def comparingDouble(arg0: ToDoubleFunction[T]) -> Comparator[T]: ...

    @staticmethod
    def comparingInt(arg0: ToIntFunction[T]) -> Comparator[T]: ...

    @staticmethod
    def comparingLong(arg0: ToLongFunction[T]) -> Comparator[T]: ...

    @staticmethod
    def naturalOrder() -> Comparator[T]: ...

    @staticmethod
    def nullsFirst(arg0: Comparator[T]) -> Comparator[T]: ...

    @staticmethod
    def nullsLast(arg0: Comparator[T]) -> Comparator[T]: ...

    @staticmethod
    def reverseOrder() -> Comparator[T]: ...

    def __init__(self): ...

