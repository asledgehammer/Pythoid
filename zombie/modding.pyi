from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.util import ArrayList
from zombie.characters import IsoPlayer
from zombie.inventory import InventoryItem

class ActiveMods:

  def checkMissingMaps(self) -> None: ...

  def checkMissingMods(self) -> None: ...

  def clear(self) -> None: ...

  def copyFrom(self, other: ActiveMods) -> None: ...

  def getMapOrder(self) -> ArrayList[str]: ...

  def getMods(self) -> ArrayList[str]: ...

  def isModActive(self, modID: str) -> bool: ...

  def removeMapOrder(self, folder: str) -> None: ...

  def removeMod(self, modID: str) -> None: ...

  def setModActive(self, modID: str, active: bool) -> None: ...

  @staticmethod
  def Reset() -> None: ...

  @staticmethod
  def getById(id: str) -> ActiveMods: ...

  @staticmethod
  def getByIndex(index: int) -> ActiveMods: ...

  @staticmethod
  def indexOf(id: str) -> int: ...

  @staticmethod
  def renderUI() -> None: ...

  @staticmethod
  def requiresResetLua(activeMods: ActiveMods) -> bool: ...

  @staticmethod
  def setLoadedMods(activeMods: ActiveMods) -> None: ...

  def __init__(self, id: str): ...


class ActiveModsFile:

  def read(self, path: str, activeMods: ActiveMods) -> bool: ...

  def write(self, path: str, activeMods: ActiveMods) -> bool: ...

  def __init__(self): ...


class ModUtilsJava:

  @staticmethod
  def getRandomUUID() -> str: ...

  @staticmethod
  def sendItemListNet(sender: IsoPlayer, items: ArrayList[InventoryItem], receiver: IsoPlayer, transferID: str, custom: str) -> bool: ...

  def __init__(self): ...

