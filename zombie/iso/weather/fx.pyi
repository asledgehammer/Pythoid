from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from zombie.core.textures import Texture, TextureDraw, ColorInfo, TextureFBO
from zombie.iso import IsoGridSquare
from zombie.iso.sprite import IsoSprite

class CloudParticle(WeatherParticle):

  def update(self, delta: float) -> None: ...

  @overload
  def __init__(self, texture: Texture): ...
  @overload
  def __init__(self, texture: Texture, w: int, h: int): ...


class FogParticle(WeatherParticle):

  def update(self, delta: float) -> None: ...

  def __init__(self, texture: Texture, w: int, h: int): ...


class IsoWeatherFX:

  ZoomMod: float

  def getCloudIntensity(self) -> float: ...

  def getFogIntensity(self) -> float: ...

  def getPrecipitationIntensity(self) -> float: ...

  def getPrecipitationIsSnow(self) -> bool: ...

  def getRenderWindAngleRain(self) -> float: ...

  def getWindAngleIntensity(self) -> float: ...

  def getWindIntensity(self) -> float: ...

  def getWindPrecipIntensity(self) -> float: ...

  def hasCloudsToRender(self) -> bool: ...

  def hasFogToRender(self) -> bool: ...

  def hasPrecipitationToRender(self) -> bool: ...

  def init(self) -> None: ...

  def isDebugBounds(self) -> bool: ...

  def render(self) -> None: ...

  def renderClouds(self) -> None: ...

  def renderFog(self) -> None: ...

  def renderLayered(self, doClouds: bool, doFog: bool, doPrecip: bool) -> None: ...

  def renderPrecipitation(self) -> None: ...

  def setCloudIntensity(self, intensity: float) -> None: ...

  def setDebugBounds(self, b: bool) -> None: ...

  def setFogIntensity(self, intensity: float) -> None: ...

  def setPrecipitationIntensity(self, intensity: float) -> None: ...

  def setPrecipitationIsSnow(self, b: bool) -> None: ...

  def setWindAngleIntensity(self, intensity: float) -> None: ...

  def setWindIntensity(self, intensity: float) -> None: ...

  def setWindPrecipIntensity(self, intensity: float) -> None: ...

  def update(self) -> None: ...

  @staticmethod
  def clamp(min: float, max: float, val: float) -> float: ...

  @staticmethod
  def clerp(t: float, a: float, b: float) -> float: ...

  @staticmethod
  def lerp(t: float, a: float, b: float) -> float: ...

  def __init__(self): ...

  class Drawer(TextureDraw.GenericDrawer):

    def render(self) -> None: ...


class ParticleRectangle:

  def SetParticles(self, parts: list[WeatherParticle]) -> None: ...

  def SetParticlesStrength(self, str: float) -> None: ...

  def getHeight(self) -> int: ...

  def getWidth(self) -> int: ...

  def render(self) -> None: ...

  def requiresUpdate(self) -> bool: ...

  def update(self, delta: float) -> None: ...

  def __init__(self, w: int, h: int): ...


class RainParticle(WeatherParticle):

  def render(self, offsetx: float, offsety: float) -> None: ...

  def update(self, delta: float) -> None: ...

  def __init__(self, texture: Texture, height: int): ...

  class RenderPoints:

    def getX(self, arg0: int) -> float: ...

    def getY(self, arg0: int) -> float: ...

    def rotate(self, arg0: float) -> None: ...

    def setCenter(self, arg0: float, arg1: float) -> None: ...

    def setDimensions(self, arg0: float, arg1: float) -> None: ...

    def __init__(self, arg0: RainParticle): ...

  class Point:

    def set(self, arg0: float, arg1: float) -> None: ...

    def setOrig(self, arg0: float, arg1: float) -> None: ...


class SnowParticle(WeatherParticle):

  def render(self, offsetx: float, offsety: float) -> None: ...

  def update(self, delta: float) -> None: ...

  def __init__(self, texture: Texture): ...


class SteppedUpdateFloat:

  def getTarget(self) -> float: ...

  def overrideCurrentValue(self, f: float) -> None: ...

  def setTarget(self, target: float) -> None: ...

  def update(self, delta: float) -> None: ...

  def value(self) -> float: ...

  def __init__(self, current: float, step: float, min: float, max: float): ...


class WeatherFxMask:

  BIT_CHARS: int

  BIT_DOOR: int

  BIT_FLOOR: int

  BIT_IS_CUT: int

  BIT_OBJECTS: int

  BIT_WALL_SE: int

  BIT_WALLN: int

  BIT_WALLW: int

  defColorInfo: ColorInfo

  floorSprite: IsoSprite

  MASKING_ENABLED: bool

  offsetX: float

  offsetY: float

  wallNSprite: IsoSprite

  wallNWSprite: IsoSprite

  wallSESprite: IsoSprite

  wallWSprite: IsoSprite

  def isLoc(self, x: int, y: int, z: int) -> bool: ...

  @staticmethod
  def addMaskLocation(gs: IsoGridSquare, x: int, y: int, z: int) -> None: ...

  @staticmethod
  def checkFbos() -> bool: ...

  @staticmethod
  def destroy() -> None: ...

  @staticmethod
  def forceMaskUpdate(plrIndex: int) -> None: ...

  @staticmethod
  def forceMaskUpdateAll() -> None: ...

  @staticmethod
  def getFboMask() -> TextureFBO: ...

  @staticmethod
  def getFboParticles() -> TextureFBO: ...

  @staticmethod
  def init() -> None: ...

  @staticmethod
  def initMask() -> None: ...

  @staticmethod
  def playerHasMaskToDraw(plrIndex: int) -> bool: ...

  @staticmethod
  def renderFxMask(nPlayer: int) -> None: ...

  @staticmethod
  def setDiamondIterDone(plrIndex: int) -> None: ...

  def __init__(self):
    self.enabled: bool
    self.flags: int
    self.gs: IsoGridSquare
    self.x: int
    self.y: int
    self.z: int

  class PlayerFxMask:

    def __init__(self): ...


class WeatherParticle:

  def isOnScreen(self, offsetx: float, offsety: float) -> bool: ...

  def render(self, offsetx: float, offsety: float) -> None: ...

  @overload
  def update(self, delta: float) -> None: ...

  @overload
  def update(self, delta: float, doBounds: bool) -> None: ...

  @overload
  def __init__(self, texture: Texture): ...
  @overload
  def __init__(self, texture: Texture, w: int, h: int): ...

