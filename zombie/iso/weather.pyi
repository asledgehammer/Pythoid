from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.io import DataInputStream, DataOutputStream
from java.lang import Integer, Enum
from java.nio import ByteBuffer
from java.util import ArrayList, GregorianCalendar
from se.krka.kahlua.vm import KahluaTable
from zombie.characters import IsoGameCharacter, IsoPlayer
from zombie.core import Color
from zombie.core.opengl import RenderSettings, Shader, ShaderProgram
from zombie.core.raknet import UdpConnection
from zombie.core.textures import TextureDraw
from zombie.erosion.season import ErosionSeason
from zombie.iso import IsoGridSquare, IsoMetaGrid
from zombie.vehicles import BaseVehicle

class ClimateColorInfo:

  def getExterior(self) -> Color: ...

  def getInterior(self) -> Color: ...

  def interp(self, to: ClimateColorInfo, t: float, result: ClimateColorInfo) -> ClimateColorInfo: ...

  def load(self, input: DataInputStream, worldVersion: int) -> None: ...

  def read(self, input: ByteBuffer) -> None: ...

  def save(self, output: DataOutputStream) -> None: ...

  def scale(self, val: float) -> None: ...

  @overload
  def setExterior(self, other: Color) -> None: ...

  @overload
  def setExterior(self, r: float, g: float, b: float, a: float) -> None: ...

  @overload
  def setInterior(self, other: Color) -> None: ...

  @overload
  def setInterior(self, r: float, g: float, b: float, a: float) -> None: ...

  def setTo(self, other: ClimateColorInfo) -> None: ...

  def write(self, output: ByteBuffer) -> None: ...

  @staticmethod
  def writeColorInfoConfig() -> bool: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, r: float, g: float, b: float, a: float): ...
  @overload
  def __init__(self, r: float, g: float, b: float, a: float, r2: float, g2: float, b2: float, a2: float): ...


class ClimateForecaster:

  def getDaysTillFirstWeather(self) -> int: ...

  @overload
  def getForecast(self) -> ClimateForecaster.DayForecast: ...

  @overload
  def getForecast(self, offset: int) -> ClimateForecaster.DayForecast: ...

  def getForecasts(self) -> ArrayList[ClimateForecaster.DayForecast]: ...

  def __init__(self): ...

  class DayForecast:

    def getAirFront(self) -> ClimateManager.AirFront: ...

    def getAirFrontString(self) -> str: ...

    def getCloudiness(self) -> ClimateForecaster.ForecastValue: ...

    def getDawn(self) -> float: ...

    def getDayLightHours(self) -> float: ...

    def getDusk(self) -> float: ...

    def getFogDuration(self) -> float: ...

    def getFogStrength(self) -> float: ...

    def getHumidity(self) -> ClimateForecaster.ForecastValue: ...

    def getIndexOffset(self) -> int: ...

    def getMeanWindAngleString(self) -> str: ...

    def getName(self) -> str: ...

    def getTemperature(self) -> ClimateForecaster.ForecastValue: ...

    def getWeatherEndTime(self) -> float: ...

    def getWeatherOverlap(self) -> ClimateForecaster.DayForecast: ...

    def getWeatherPeriod(self) -> WeatherPeriod: ...

    def getWeatherStages(self) -> ArrayList[Integer]: ...

    def getWeatherStartTime(self) -> float: ...

    def getWindDirection(self) -> ClimateForecaster.ForecastValue: ...

    def getWindPower(self) -> ClimateForecaster.ForecastValue: ...

    def isChanceOnSnow(self) -> bool: ...

    def isHasBlizzard(self) -> bool: ...

    def isHasFog(self) -> bool: ...

    def isHasHeavyRain(self) -> bool: ...

    def isHasStorm(self) -> bool: ...

    def isHasTropicalStorm(self) -> bool: ...

    def isWeatherStarts(self) -> bool: ...

    def __init__(self): ...

  class ForecastValue:

    def getDayMax(self) -> float: ...

    def getDayMean(self) -> float: ...

    def getDayMin(self) -> float: ...

    def getNightMax(self) -> float: ...

    def getNightMean(self) -> float: ...

    def getNightMin(self) -> float: ...

    def getTotalMax(self) -> float: ...

    def getTotalMean(self) -> float: ...

    def getTotalMin(self) -> float: ...

    def __init__(self): ...


class ClimateHistory:

  def init(self, climateManager: ClimateManager) -> None: ...

  def updateDayChange(self, climateManager: ClimateManager) -> None: ...

  def __init__(self): ...


class ClimateManager:

  A_STORM_IS_COMING: bool

  AVG_FAV_AIR_TEMPERATURE: float

  BOOL_IS_SNOW: int

  BOOL_MAX: int

  COLOR_GLOBAL_LIGHT: int

  COLOR_MAX: int

  COLOR_NEW_FOG: int

  FLOAT_AMBIENT: int

  FLOAT_CLOUD_INTENSITY: int

  FLOAT_DAYLIGHT_STRENGTH: int

  FLOAT_DESATURATION: int

  FLOAT_FOG_INTENSITY: int

  FLOAT_GLOBAL_LIGHT_INTENSITY: int

  FLOAT_HUMIDITY: int

  FLOAT_MAX: int

  FLOAT_NIGHT_STRENGTH: int

  FLOAT_PRECIPITATION_INTENSITY: int

  FLOAT_TEMPERATURE: int

  FLOAT_VIEW_DISTANCE: int

  FLOAT_WIND_ANGLE_INTENSITY: int

  FLOAT_WIND_INTENSITY: int

  FRONT_COLD: int

  FRONT_STATIONARY: int

  FRONT_WARM: int

  MAX_WINDSPEED_KPH: float

  MAX_WINDSPEED_MPH: float

  PacketAdminVarsUpdate: int

  PacketClientChangedAdminVars: int

  PacketClientChangedWeather: int

  PacketFlare: int

  PacketRequestAdminVars: int

  PacketThunderEvent: int

  PacketUpdateClimateVars: int

  PacketWeatherUpdate: int

  THE_DESCENDING_FOG: bool

  WINTER_IS_COMING: bool

  def CalculateWeatherFrontStrength(self, year: int, month: int, day: int, front: ClimateManager.AirFront) -> None: ...

  def CopyClimateValues(self, copy: ClimateValues) -> None: ...

  @overload
  def execute_Simulation(self) -> None: ...

  @overload
  def execute_Simulation(self, RainModOverride: int) -> None: ...

  def forceDayInfoUpdate(self) -> None: ...

  def getAirMass(self) -> float: ...

  def getAirMassDaily(self) -> float: ...

  def getAirMassTemperature(self) -> float: ...

  @overload
  def getAirTemperatureForCharacter(self, plr: IsoGameCharacter) -> float: ...

  @overload
  def getAirTemperatureForCharacter(self, plr: IsoGameCharacter, doWindChill: bool) -> float: ...

  @overload
  def getAirTemperatureForSquare(self, square: IsoGridSquare) -> float: ...

  @overload
  def getAirTemperatureForSquare(self, square: IsoGridSquare, vehicle: BaseVehicle) -> float: ...

  @overload
  def getAirTemperatureForSquare(self, square: IsoGridSquare, vehicle: BaseVehicle, doWindChill: bool) -> float: ...

  def getAmbient(self) -> float: ...

  def getBaseTemperature(self) -> float: ...

  def getBoolMax(self) -> int: ...

  def getClimateBool(self, id: int) -> ClimateManager.ClimateBool: ...

  def getClimateColor(self, id: int) -> ClimateManager.ClimateColor: ...

  def getClimateFloat(self, id: int) -> ClimateManager.ClimateFloat: ...

  def getClimateForecaster(self) -> ClimateForecaster: ...

  def getClimateHistory(self) -> ClimateHistory: ...

  def getClimateValuesCopy(self) -> ClimateValues: ...

  def getCloudIntensity(self) -> float: ...

  def getColFog(self) -> ClimateColorInfo: ...

  def getColFogLegacy(self) -> ClimateColorInfo: ...

  def getColFogNew(self) -> ClimateColorInfo: ...

  def getColNight(self) -> ClimateColorInfo: ...

  def getColNightMoon(self) -> ClimateColorInfo: ...

  def getColNightNoMoon(self) -> ClimateColorInfo: ...

  def getColorMax(self) -> int: ...

  def getColorNewFog(self) -> ClimateColorInfo: ...

  def getCorrectedWindAngleIntensity(self) -> float: ...

  def getCurrentDay(self) -> ClimateManager.DayInfo: ...

  def getDayLightStrength(self) -> float: ...

  def getDayMeanTemperature(self) -> float: ...

  def getDesaturation(self) -> float: ...

  def getEnabledFxUpdate(self) -> bool: ...

  def getEnabledSimulation(self) -> bool: ...

  def getEnabledWeatherGeneration(self) -> bool: ...

  def getFloatMax(self) -> int: ...

  def getFogIntensity(self) -> float: ...

  def getFogTintStorm(self) -> ClimateColorInfo: ...

  def getFogTintTropical(self) -> ClimateColorInfo: ...

  def getFrontStrength(self) -> float: ...

  def getGlobalLight(self) -> ClimateColorInfo: ...

  def getGlobalLightIntensity(self) -> float: ...

  def getGlobalLightInternal(self) -> Color: ...

  def getHumidity(self) -> float: ...

  def getIsThunderStorming(self) -> bool: ...

  def getMaxWindspeedKph(self) -> float: ...

  def getMaxWindspeedMph(self) -> float: ...

  def getModData(self) -> KahluaTable: ...

  def getNextDay(self) -> ClimateManager.DayInfo: ...

  def getNightStrength(self) -> float: ...

  def getPrecipitationIntensity(self) -> float: ...

  def getPrecipitationIsSnow(self) -> bool: ...

  def getPreviousDay(self) -> ClimateManager.DayInfo: ...

  def getRainIntensity(self) -> float: ...

  def getSeason(self) -> ErosionSeason: ...

  def getSeasonColor(self, segment: int, temperature: int, season: int) -> ClimateColorInfo: ...

  def getSeasonName(self) -> str: ...

  def getSeasonProgression(self) -> float: ...

  def getSeasonStrength(self) -> float: ...

  def getSimplexOffsetA(self) -> float: ...

  def getSimplexOffsetB(self) -> float: ...

  def getSimplexOffsetC(self) -> float: ...

  def getSimplexOffsetD(self) -> float: ...

  def getSnowFracNow(self) -> float: ...

  def getSnowIntensity(self) -> float: ...

  def getSnowStrength(self) -> float: ...

  def getTemperature(self) -> float: ...

  def getThunderStorm(self) -> ThunderStorm: ...

  def getViewDistance(self) -> float: ...

  def getWeatherInterference(self) -> float: ...

  def getWeatherPeriod(self) -> WeatherPeriod: ...

  def getWindAngleDegrees(self) -> float: ...

  def getWindAngleIntensity(self) -> float: ...

  def getWindAngleRadians(self) -> float: ...

  def getWindForceMovement(self, character: IsoGameCharacter, angle: float) -> float: ...

  def getWindIntensity(self) -> float: ...

  def getWindPower(self) -> float: ...

  def getWindSpeedMovement(self) -> float: ...

  def getWindspeedKph(self) -> float: ...

  def getWorldAgeHours(self) -> float: ...

  def init(self, metaGrid: IsoMetaGrid) -> None: ...

  def isRaining(self) -> bool: ...

  def isSnowing(self) -> bool: ...

  def isUpdated(self) -> bool: ...

  def launchFlare(self) -> None: ...

  def load(self, input: DataInputStream, worldVersion: int) -> None: ...

  def postCellLoadSetSnow(self) -> None: ...

  def receiveClimatePacket(self, bb: ByteBuffer, ignoreConnection: UdpConnection) -> None: ...

  def resetAdmin(self) -> None: ...

  def resetModded(self) -> None: ...

  def resetOverrides(self) -> None: ...

  def save(self, output: DataOutputStream) -> None: ...

  def sendInitialState(self, connection: UdpConnection) -> None: ...

  def setAmbient(self, f: float) -> None: ...

  def setDayLightStrength(self, f: float) -> None: ...

  def setDesaturation(self, desaturation: float) -> None: ...

  def setEnabledFxUpdate(self, b: bool) -> None: ...

  def setEnabledSimulation(self, b: bool) -> None: ...

  def setEnabledWeatherGeneration(self, b: bool) -> None: ...

  def setNightStrength(self, b: float) -> None: ...

  def setPrecipitationIsSnow(self, b: bool) -> None: ...

  def setSeasonColorDawn(self, temperature: int, season: int, r: float, g: float, b: float, a: float, exterior: bool) -> None: ...

  def setSeasonColorDay(self, temperature: int, season: int, r: float, g: float, b: float, a: float, exterior: bool) -> None: ...

  def setSeasonColorDusk(self, temperature: int, season: int, r: float, g: float, b: float, a: float, exterior: bool) -> None: ...

  def setViewDistance(self, f: float) -> None: ...

  def stopWeatherAndThunder(self) -> None: ...

  def transmitClientChangeAdminVars(self) -> None: ...

  def transmitGenerateWeather(self, strength: float, front: int) -> None: ...

  def transmitRequestAdminVars(self) -> None: ...

  def transmitServerStartRain(self, intensity: float) -> None: ...

  def transmitServerStopRain(self) -> None: ...

  def transmitServerStopWeather(self) -> None: ...

  def transmitServerTriggerLightning(self, x: int, y: int, doStrike: bool, doLightning: bool, doRumble: bool) -> None: ...

  def transmitServerTriggerStorm(self, duration: float) -> None: ...

  def transmitStopWeather(self) -> None: ...

  def transmitTriggerBlizzard(self, duration: float) -> None: ...

  def transmitTriggerStorm(self, duration: float) -> None: ...

  def transmitTriggerTropical(self, duration: float) -> None: ...

  def triggerCustomWeather(self, strength: float, warmFront: bool) -> bool: ...

  def triggerCustomWeatherStage(self, stage: int, duration: float) -> bool: ...

  @overload
  def triggerKateBobIntroStorm(self, centerX: int, centerY: int, duration: float, strength: float, initialProgress: float, angle: float, initialPuddles: float) -> None: ...

  @overload
  def triggerKateBobIntroStorm(self, centerX: int, centerY: int, duration: float, strength: float, initialProgress: float, angle: float, initialPuddles: float, cloudcolor: ClimateColorInfo) -> None: ...

  def triggerWinterIsComingStorm(self) -> None: ...

  def update(self) -> None: ...

  def updateEveryTenMins(self) -> None: ...

  def updateOLD(self) -> None: ...

  @staticmethod
  def ToKph(val: float) -> float: ...

  @staticmethod
  def ToMph(val: float) -> float: ...

  @staticmethod
  @overload
  def clamp(min: float, max: float, val: float) -> float: ...

  @staticmethod
  @overload
  def clamp(min: int, max: int, val: int) -> int: ...

  @staticmethod
  def clamp01(val: float) -> float: ...

  @staticmethod
  def clerp(t: float, a: float, b: float) -> float: ...

  @staticmethod
  def getInstance() -> ClimateManager: ...

  @staticmethod
  def getWindAngleString(angle: float) -> str: ...

  @staticmethod
  def getWindNoiseBase() -> float: ...

  @staticmethod
  def getWindNoiseFinal() -> float: ...

  @staticmethod
  def getWindTickFinal() -> float: ...

  @staticmethod
  def lerp(t: float, a: float, b: float) -> float: ...

  @staticmethod
  def normalizeRange(v: float, n: float) -> float: ...

  @staticmethod
  def posToPosNegRange(v: float) -> float: ...

  @staticmethod
  def setInstance(inst: ClimateManager) -> None: ...

  def __init__(self): ...

  class AirFront:

    def addDaySample(self, noiseval: float) -> None: ...

    def copyFrom(self, other: ClimateManager.AirFront) -> None: ...

    def getAngleDegrees(self) -> float: ...

    def getDays(self) -> float: ...

    def getMaxNoise(self) -> float: ...

    def getStrength(self) -> float: ...

    def getTotalNoise(self) -> float: ...

    def getType(self) -> int: ...

    def load(self, input: DataInputStream) -> None: ...

    def save(self, output: DataOutputStream) -> None: ...

    def setFrontType(self, type: int) -> None: ...

    def setStrength(self, str: float) -> None: ...

    def __init__(self): ...

  class ClimateFloat:

    def getAdminValue(self) -> float: ...

    def getFinalValue(self) -> float: ...

    def getID(self) -> int: ...

    def getInternalValue(self) -> float: ...

    def getMax(self) -> float: ...

    def getMin(self) -> float: ...

    def getModdedValue(self) -> float: ...

    def getName(self) -> str: ...

    def getOverride(self) -> float: ...

    def getOverrideInterpolate(self) -> float: ...

    def init(self, id: int, name: str) -> ClimateManager.ClimateFloat: ...

    def isEnableAdmin(self) -> bool: ...

    def isEnableOverride(self) -> bool: ...

    def setAdminValue(self, f: float) -> None: ...

    def setEnableAdmin(self, b: bool) -> None: ...

    def setEnableModded(self, b: bool) -> None: ...

    def setEnableOverride(self, b: bool) -> None: ...

    def setFinalValue(self, f: float) -> None: ...

    def setModdedInterpolate(self, f: float) -> None: ...

    def setModdedValue(self, f: float) -> None: ...

    def setOverride(self, targ: float, inter: float) -> None: ...

    def __init__(self): ...

  class ClimateColor:

    def getAdminValue(self) -> ClimateColorInfo: ...

    def getFinalValue(self) -> ClimateColorInfo: ...

    def getID(self) -> int: ...

    def getInternalValue(self) -> ClimateColorInfo: ...

    def getModdedValue(self) -> ClimateColorInfo: ...

    def getName(self) -> str: ...

    def getOverride(self) -> ClimateColorInfo: ...

    def getOverrideInterpolate(self) -> float: ...

    def init(self, id: int, name: str) -> ClimateManager.ClimateColor: ...

    def isEnableAdmin(self) -> bool: ...

    def isEnableOverride(self) -> bool: ...

    @overload
    def setAdminValue(self, targ: ClimateColorInfo) -> None: ...

    @overload
    def setAdminValue(self, r: float, g: float, b: float, a: float, r1: float, g1: float, b1: float, a1: float) -> None: ...

    def setAdminValueExterior(self, r: float, g: float, b: float, a: float) -> None: ...

    def setAdminValueInterior(self, r: float, g: float, b: float, a: float) -> None: ...

    def setEnableAdmin(self, b: bool) -> None: ...

    def setEnableModded(self, b: bool) -> None: ...

    def setEnableOverride(self, b: bool) -> None: ...

    def setFinalValue(self, targ: ClimateColorInfo) -> None: ...

    def setModdedInterpolate(self, f: float) -> None: ...

    def setModdedValue(self, targ: ClimateColorInfo) -> None: ...

    @overload
    def setOverride(self, input: ByteBuffer, interp: float) -> None: ...

    @overload
    def setOverride(self, targ: ClimateColorInfo, inter: float) -> None: ...

    def __init__(self): ...

  class ClimateBool:

    def getAdminValue(self) -> bool: ...

    def getID(self) -> int: ...

    def getInternalValue(self) -> bool: ...

    def getModdedValue(self) -> bool: ...

    def getName(self) -> str: ...

    def getOverride(self) -> bool: ...

    def init(self, id: int, name: str) -> ClimateManager.ClimateBool: ...

    def isEnableAdmin(self) -> bool: ...

    def isEnableOverride(self) -> bool: ...

    def setAdminValue(self, b: bool) -> None: ...

    def setEnableAdmin(self, b: bool) -> None: ...

    def setEnableModded(self, b: bool) -> None: ...

    def setEnableOverride(self, b: bool) -> None: ...

    def setFinalValue(self, b: bool) -> None: ...

    def setModdedValue(self, b: bool) -> None: ...

    def setOverride(self, b: bool) -> None: ...

    def __init__(self): ...

  class ClimateNetInfo: ...

  class DayInfo:

    def getDateValue(self) -> int: ...

    def getDay(self) -> int: ...

    def getHour(self) -> int: ...

    def getMinutes(self) -> int: ...

    def getMonth(self) -> int: ...

    def getSeason(self) -> ErosionSeason: ...

    def getYear(self) -> int: ...

    def set(self, day: int, month: int, year: int) -> None: ...

    def __init__(self):
      self.calendar: GregorianCalendar
      self.datevalue: int
      self.day: int
      self.hour: int
      self.minutes: int
      self.month: int
      self.season: ErosionSeason
      self.year: int

  class ClimateNetAuth(Enum):

    ClientAndServer: ClimateManager.ClimateNetAuth

    ClientOnly: ClimateManager.ClimateNetAuth

    Denied: ClimateManager.ClimateNetAuth

    ServerOnly: ClimateManager.ClimateNetAuth

    @staticmethod
    def valueOf(arg0: str) -> ClimateManager.ClimateNetAuth: ...

    @staticmethod
    def values() -> list[ClimateManager.ClimateNetAuth]: ...

  class SeasonColor:

    CLOUDY: int

    FALL: int

    NORMAL: int

    SPRING: int

    SUMMER: int

    WARM: int

    WINTER: int

    def getColor(self, arg0: int, arg1: int) -> ClimateColorInfo: ...

    def setColorExterior(self, arg0: int, arg1: int, arg2: float, arg3: float, arg4: float, arg5: float) -> None: ...

    def setColorInterior(self, arg0: int, arg1: int, arg2: float, arg3: float, arg4: float, arg5: float) -> None: ...

    def setIgnoreNormal(self, arg0: bool) -> None: ...

    def update(self, arg0: float, arg1: float, arg2: int, arg3: int) -> ClimateColorInfo: ...

    def __init__(self): ...


class ClimateMoon:

  def getCurrentMoonPhase(self) -> int: ...

  @staticmethod
  def getInstance() -> ClimateMoon: ...

  @staticmethod
  def getMoonFloat() -> float: ...

  @staticmethod
  def getPhaseName() -> str: ...

  @staticmethod
  def updatePhase(year: int, month: int, day: int) -> None: ...

  def __init__(self): ...


class ClimateValues:

  def CopyValues(self, copy: ClimateValues) -> None: ...

  def getAirFrontAirmass(self) -> float: ...

  def getAirMassNoiseFrequencyMod(self) -> float: ...

  def getAirMassTemperature(self) -> float: ...

  def getAmbient(self) -> float: ...

  def getBaseTemperature(self) -> float: ...

  def getCacheDay(self) -> int: ...

  def getCacheMonth(self) -> int: ...

  def getCacheWorldAgeHours(self) -> float: ...

  def getCacheYear(self) -> int: ...

  def getCloudIntensity(self) -> float: ...

  def getCloudyT(self) -> float: ...

  def getCopy(self) -> ClimateValues: ...

  def getDawn(self) -> float: ...

  def getDayFogDuration(self) -> float: ...

  def getDayFogStrength(self) -> float: ...

  def getDayLightLagged(self) -> float: ...

  def getDayLightStrength(self) -> float: ...

  def getDayLightStrengthBase(self) -> float: ...

  def getDayMeanTemperature(self) -> float: ...

  def getDesaturation(self) -> float: ...

  def getDusk(self) -> float: ...

  def getHumidity(self) -> float: ...

  def getLerpNight(self) -> float: ...

  def getNightLagged(self) -> float: ...

  def getNightStrength(self) -> float: ...

  def getNoiseAirmass(self) -> float: ...

  def getNoon(self) -> float: ...

  def getTemperature(self) -> float: ...

  def getTime(self) -> float: ...

  def getWindAngleDegrees(self) -> float: ...

  def getWindAngleIntensity(self) -> float: ...

  def getWindIntensity(self) -> float: ...

  def isDayDoFog(self) -> bool: ...

  def isTemperatureIsSnow(self) -> bool: ...

  @overload
  def pollDate(self, calendar: GregorianCalendar) -> None: ...

  @overload
  def pollDate(self, year: int, month: int, dayOfMonth: int) -> None: ...

  @overload
  def pollDate(self, year: int, month: int, dayOfMonth: int, hourOfDay: int) -> None: ...

  @overload
  def pollDate(self, year: int, month: int, dayOfMonth: int, hourOfDay: int, minute: int) -> None: ...

  def print(self) -> None: ...

  def __init__(self, clim: ClimateManager): ...


class SimplexNoise:

  @staticmethod
  @overload
  def noise(xin: float, yin: float) -> float: ...

  @staticmethod
  @overload
  def noise(xin: float, yin: float, zin: float) -> float: ...

  @staticmethod
  @overload
  def noise(x: float, y: float, z: float, w: float) -> float: ...

  def __init__(self): ...

  class Grad: ...


class Temperature:

  BodyMaxTemp: float

  BodyMinTemp: float

  CELSIUS_POSTFIX: str

  coreCelciusMax: float

  coreCelciusMin: float

  DO_DAYLEN_MOD: bool

  DO_DEFAULT_BASE: bool

  FAHRENHEIT_POSTFIX: str

  FavorableNakedTemp: float

  FavorableRoomTemp: float

  homeostasisDefault: float

  Hyperthermia_1: float

  Hyperthermia_2: float

  Hyperthermia_3: float

  Hyperthermia_4: float

  Hypothermia_1: float

  Hypothermia_2: float

  Hypothermia_3: float

  Hypothermia_4: float

  neutralZone: float

  skinCelciusFavorable: float

  skinCelciusMax: float

  skinCelciusMin: float

  TrueInsulationMultiplier: float

  TrueWindresistMultiplier: float

  @staticmethod
  def CelsiusToFahrenheit(celsius: float) -> float: ...

  @staticmethod
  def FahrenheitToCelsius(fahrenheit: float) -> float: ...

  @staticmethod
  def WindchillCelsiusKph(t: float, v: float) -> float: ...

  @staticmethod
  def getCelsiusPostfix() -> str: ...

  @staticmethod
  def getFahrenheitPostfix() -> str: ...

  @staticmethod
  def getFractionForRealTimeRatePerMin(rate: float) -> float: ...

  @staticmethod
  def getTemperaturePostfix() -> str: ...

  @staticmethod
  def getTemperatureString(celsius: float) -> str: ...

  @staticmethod
  def getTrueInsulationValue(insulation: float) -> float: ...

  @staticmethod
  def getTrueWindresistanceValue(windresist: float) -> float: ...

  @staticmethod
  def getValueColor(val: float) -> Color: ...

  @staticmethod
  def getWindChillAmountForPlayer(player: IsoPlayer) -> float: ...

  @staticmethod
  def reset() -> None: ...

  def __init__(self): ...


class ThunderStorm:

  MAP_MAX_X: int

  MAP_MAX_Y: int

  MAP_MIN_X: int

  MAP_MIN_Y: int

  def HasActiveThunderClouds(self) -> bool: ...

  def applyLightningForPlayer(self, renderSettings: RenderSettings.PlayerRenderSettings, plrIndex: int, player: IsoPlayer) -> None: ...

  def enqueueThunderEvent(self, x: int, y: int, doStrike: bool, doLightning: bool, doRumble: bool) -> None: ...

  def getClouds(self) -> ArrayList[ThunderStorm.ThunderCloud]: ...

  def isModifyingNight(self) -> bool: ...

  def load(self, input: DataInputStream) -> None: ...

  def noise(self, s: str) -> None: ...

  def readNetThunderEvent(self, input: ByteBuffer) -> None: ...

  def save(self, output: DataOutputStream) -> None: ...

  @overload
  def startThunderCloud(self, str: float, angle: float, radius: float, eventFreq: float, thunderRatio: float, duration: float, targetRandomPlayer: bool) -> None: ...

  @overload
  def startThunderCloud(self, str: float, angle: float, radius: float, eventFreq: float, thunderRatio: float, duration: float, targetRandomPlayer: bool, percentageOffset: float) -> ThunderStorm.ThunderCloud: ...

  def stopAllClouds(self) -> None: ...

  def stopCloud(self, id: int) -> None: ...

  def triggerThunderEvent(self, x: int, y: int, doStrike: bool, doLightning: bool, doRumble: bool) -> None: ...

  def update(self, currentTime: float) -> None: ...

  def writeNetThunderEvent(self, output: ByteBuffer) -> None: ...

  @staticmethod
  def getMapDiagonal() -> int: ...

  def __init__(self, climmgr: ClimateManager): ...

  class ThunderCloud:

    def getCurrentX(self) -> int: ...

    def getCurrentY(self) -> int: ...

    def getRadius(self) -> float: ...

    def getStrength(self) -> float: ...

    def isRunning(self) -> bool: ...

    def lifeTime(self) -> float: ...

    def setCenter(self, centerX: int, centerY: int, angle: float) -> None: ...

    def __init__(self): ...

  class ThunderEvent: ...

  class PlayerLightningInfo: ...

  class LightningState(Enum):

    ApplyLightning: ThunderStorm.LightningState

    Idle: ThunderStorm.LightningState

    @staticmethod
    def valueOf(arg0: str) -> ThunderStorm.LightningState: ...

    @staticmethod
    def values() -> list[ThunderStorm.LightningState]: ...


class WeatherPeriod:

  FRONT_STRENGTH_THRESHOLD: float

  STAGE_BLIZZARD: int

  STAGE_CLEARING: int

  STAGE_DRIZZLE: int

  STAGE_HEAVY_PRECIP: int

  STAGE_INTERMEZZO: int

  STAGE_KATEBOB_STORM: int

  STAGE_MAX: int

  STAGE_MODDED: int

  STAGE_MODERATE: int

  STAGE_SHOWERS: int

  STAGE_START: int

  STAGE_STORM: int

  STAGE_TROPICAL_STORM: int

  def createAndAddModdedStage(self, moddedID: str, duration: float) -> WeatherPeriod.WeatherStage: ...

  def createAndAddStage(self, typeid: int, duration: float) -> WeatherPeriod.WeatherStage: ...

  def endCreateModdedPeriod(self) -> bool: ...

  def getCloudColor(self) -> ClimateColorInfo: ...

  def getCloudColorBlizzard(self) -> ClimateColorInfo: ...

  def getCloudColorBlueish(self) -> ClimateColorInfo: ...

  def getCloudColorGreenish(self) -> ClimateColorInfo: ...

  def getCloudColorPurplish(self) -> ClimateColorInfo: ...

  def getCloudColorReddish(self) -> ClimateColorInfo: ...

  def getCloudColorTropical(self) -> ClimateColorInfo: ...

  def getCurrentStage(self) -> WeatherPeriod.WeatherStage: ...

  def getCurrentStageID(self) -> int: ...

  def getCurrentStrength(self) -> float: ...

  def getDuration(self) -> float: ...

  def getFrontCache(self) -> ClimateManager.AirFront: ...

  def getFrontType(self) -> int: ...

  def getPrecipitationFinal(self) -> float: ...

  def getPrintStuff(self) -> bool: ...

  def getRainThreshold(self) -> float: ...

  def getStageForWorldAge(self, worldAgeHours: float) -> WeatherPeriod.WeatherStage: ...

  def getStageProgress(self) -> float: ...

  def getTotalProgress(self) -> float: ...

  def getTotalStrength(self) -> float: ...

  def getWeatherNoise(self) -> float: ...

  def getWeatherStages(self) -> ArrayList[WeatherPeriod.WeatherStage]: ...

  def getWindAngleDegrees(self) -> float: ...

  def hasBlizzard(self) -> bool: ...

  def hasHeavyRain(self) -> bool: ...

  def hasStorm(self) -> bool: ...

  def hasTropical(self) -> bool: ...

  @overload
  def initSimulationDebug(self, front: ClimateManager.AirFront, hoursSinceStart: float) -> None: ...

  @overload
  def initSimulationDebug(self, front: ClimateManager.AirFront, hoursSinceStart: float, doThisStageOnly: int, singleStageDuration: float) -> None: ...

  def isBlizzard(self) -> bool: ...

  def isRunning(self) -> bool: ...

  def isThunderStorm(self) -> bool: ...

  def isTropicalStorm(self) -> bool: ...

  def load(self, input: DataInputStream, worldVersion: int) -> None: ...

  def readNetWeatherData(self, input: ByteBuffer) -> None: ...

  def save(self, output: DataOutputStream) -> None: ...

  def setCloudColor(self, cloudcol: ClimateColorInfo) -> None: ...

  def setDummy(self, b: bool) -> None: ...

  def setKateBobStormCoords(self, x: int, y: int) -> None: ...

  def setKateBobStormProgress(self, progress: float) -> None: ...

  def setPrintStuff(self, b: bool) -> None: ...

  def startCreateModdedPeriod(self, warmFront: bool, strength: float, angle: float) -> bool: ...

  def stopWeatherPeriod(self) -> None: ...

  def update(self, hoursSinceStart: float) -> None: ...

  def writeNetWeatherData(self, output: ByteBuffer) -> None: ...

  @staticmethod
  def getMaxTemperatureInfluence() -> float: ...

  def __init__(self, climmgr: ClimateManager, ts: ThunderStorm): ...

  class WeatherStage:

    def getHasStartedCloud(self) -> bool: ...

    def getLinearT(self) -> float: ...

    def getModID(self) -> str: ...

    def getParabolicT(self) -> float: ...

    def getStageCurrentStrength(self) -> float: ...

    def getStageDuration(self) -> float: ...

    def getStageEnd(self) -> float: ...

    def getStageID(self) -> int: ...

    def getStageStart(self) -> float: ...

    def lerpEntryTo(self, mid: int, __end__: int) -> None: ...

    def load(self, input: DataInputStream, worldVersion: int) -> None: ...

    def save(self, output: DataOutputStream) -> None: ...

    def setHasStartedCloud(self, b: bool) -> None: ...

    def setStageID(self, id: int) -> None: ...

    def setTargetStrength(self, t: float) -> None: ...

    @overload
    def __init__(self): ...
    @overload
    def __init__(self, id: int): ...

  class StrLerpVal(Enum):

    Entry: WeatherPeriod.StrLerpVal

    NextTarget: WeatherPeriod.StrLerpVal

    # None: WeatherPeriod.StrLerpVal

    Target: WeatherPeriod.StrLerpVal

    def getValue(self) -> int: ...

    @staticmethod
    def fromValue(id: int) -> WeatherPeriod.StrLerpVal: ...

    @staticmethod
    def valueOf(arg0: str) -> WeatherPeriod.StrLerpVal: ...

    @staticmethod
    def values() -> list[WeatherPeriod.StrLerpVal]: ...


class WeatherShader(Shader):

  def onCompileSuccess(self, sender: ShaderProgram) -> None: ...

  def postRender(self, texd: TextureDraw) -> None: ...

  def startMainThread(self, texd: TextureDraw, playerIndex: int) -> None: ...

  def startRenderThread(self, texd: TextureDraw) -> None: ...

  def __init__(self, name: str):
    self.timeofday: int


class WorldFlares:

  DEBUG_DRAW: bool

  ENABLED: bool

  NEXT_ID: int

  @staticmethod
  def Clear() -> None: ...

  @staticmethod
  def applyFlaresForPlayer(renderSettings: RenderSettings.PlayerRenderSettings, plrIndex: int, player: IsoPlayer) -> None: ...

  @staticmethod
  def debugRender() -> None: ...

  @staticmethod
  def getDebugDraw() -> bool: ...

  @staticmethod
  def getFlare(index: int) -> WorldFlares.Flare: ...

  @staticmethod
  def getFlareCount() -> int: ...

  @staticmethod
  def getFlareID(id: int) -> WorldFlares.Flare: ...

  @staticmethod
  def launchFlare(lifetime: float, x: int, y: int, range: int, windSpeed: float, r: float, g: float, b: float, ri: float, gi: float, bi: float) -> None: ...

  @staticmethod
  def setDebugDraw(b: bool) -> None: ...

  @staticmethod
  def update() -> None: ...

  def __init__(self): ...

  class Flare:

    def getColor(self) -> ClimateColorInfo: ...

    def getColorPlayer(self, index: int) -> ClimateColorInfo: ...

    def getDistModPlayer(self, index: int) -> float: ...

    def getId(self) -> int: ...

    def getIntensity(self) -> float: ...

    def getIntensityPlayer(self, index: int) -> float: ...

    def getLerpPlayer(self, index: int) -> float: ...

    def getLifeTime(self) -> float: ...

    def getMaxLifeTime(self) -> float: ...

    def getOutColorPlayer(self, index: int) -> ClimateColorInfo: ...

    def getPercent(self) -> float: ...

    def getRange(self) -> int: ...

    def getWindSpeed(self) -> float: ...

    def getX(self) -> float: ...

    def getY(self) -> float: ...

    def isHasLaunched(self) -> bool: ...

    def __init__(self): ...

  class PlayerFlareLightInfo: ...

