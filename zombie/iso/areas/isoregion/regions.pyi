from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.util import ArrayList
from zombie.core import Color
from zombie.iso.areas.isoregion.data import DataRoot

class IChunkRegion: ...


class IWorldRegion:

  def getDebugConnectedNeighborCopy(self) -> ArrayList[IsoWorldRegion]: ...

  def getDebugIsoChunkRegionCopy(self) -> ArrayList[IsoChunkRegion]: ...

  def getNeighbors(self) -> ArrayList[IsoWorldRegion]: ...

  def getRoofCnt(self) -> int: ...

  def getSquareSize(self) -> int: ...

  def isFogMask(self) -> bool: ...

  def isFullyRoofed(self) -> bool: ...

  def isPlayerRoom(self) -> bool: ...


class IsoChunkRegion:

  def addChunkBorderSquaresCnt(self) -> None: ...

  def addConnectedNeighbor(self, neighbor: IsoChunkRegion) -> None: ...

  def addNeighbor(self, neighbor: IsoChunkRegion) -> None: ...

  def addRoof(self) -> None: ...

  def addSquareCount(self) -> None: ...

  def containsConnectedNeighbor(self, n: IsoChunkRegion) -> bool: ...

  def containsConnectedNeighborID(self, id: int) -> bool: ...

  def getChunkBorderSquaresCnt(self) -> int: ...

  def getColor(self) -> Color: ...

  def getConnectedNeighborWithLargestIsoWorldRegion(self) -> IsoChunkRegion: ...

  def getConnectedNeighbors(self) -> ArrayList[IsoChunkRegion]: ...

  def getDebugConnectedNeighborCopy(self) -> ArrayList[IsoChunkRegion]: ...

  def getID(self) -> int: ...

  def getIsEnclosed(self) -> bool: ...

  def getIsoWorldRegion(self) -> IsoWorldRegion: ...

  def getNeighborCount(self) -> int: ...

  def getRoofCnt(self) -> int: ...

  def getSquareSize(self) -> int: ...

  def getzLayer(self) -> int: ...

  def resetRoofCnt(self) -> None: ...

  def setEnclosed(self, dir: int, b: bool) -> None: ...

  def setIsoWorldRegion(self, mr: IsoWorldRegion) -> None: ...

  def unlinkFromIsoWorldRegion(self) -> IsoWorldRegion: ...


class IsoRegionManager:

  def allocIsoChunkRegion(self, zLayer: int) -> IsoChunkRegion: ...

  def allocIsoWorldRegion(self) -> IsoWorldRegion: ...

  def getChunkRegionCount(self) -> int: ...

  def getColor(self) -> Color: ...

  def getWorldRegionCount(self) -> int: ...

  def releaseIsoChunkRegion(self, chunkRegion: IsoChunkRegion) -> None: ...

  def releaseIsoWorldRegion(self, worldRegion: IsoWorldRegion) -> None: ...

  def __init__(self, dataRoot: DataRoot): ...


class IsoWorldRegion:

  def addIsoChunkRegion(self, region: IsoChunkRegion) -> None: ...

  def containsIsoChunkRegion(self, region: IsoChunkRegion) -> bool: ...

  def getColor(self) -> Color: ...

  @overload
  def getDebugConnectedNeighborCopy(self) -> ArrayList[IsoWorldRegion]: ...

  @overload
  def getDebugConnectedNeighborCopy(self) -> ArrayList[IsoWorldRegion]: ...

  @overload
  def getDebugIsoChunkRegionCopy(self) -> ArrayList[IsoChunkRegion]: ...

  @overload
  def getDebugIsoChunkRegionCopy(self) -> ArrayList[IsoChunkRegion]: ...

  def getID(self) -> int: ...

  @overload
  def getNeighbors(self) -> ArrayList[IsoWorldRegion]: ...

  @overload
  def getNeighbors(self) -> ArrayList[IsoWorldRegion]: ...

  @overload
  def getRoofCnt(self) -> int: ...

  @overload
  def getRoofCnt(self) -> int: ...

  def getRoofedPercentage(self) -> float: ...

  @overload
  def getSquareSize(self) -> int: ...

  @overload
  def getSquareSize(self) -> int: ...

  def isEnclosed(self) -> bool: ...

  @overload
  def isFogMask(self) -> bool: ...

  @overload
  def isFogMask(self) -> bool: ...

  @overload
  def isFullyRoofed(self) -> bool: ...

  @overload
  def isFullyRoofed(self) -> bool: ...

  @overload
  def isPlayerRoom(self) -> bool: ...

  @overload
  def isPlayerRoom(self) -> bool: ...

  def linkNeighbors(self) -> None: ...

  def merge(self, other: IsoWorldRegion) -> None: ...

  def size(self) -> int: ...

  def swapIsoChunkRegions(self, newlist: ArrayList[IsoChunkRegion]) -> ArrayList[IsoChunkRegion]: ...

  def unlinkNeighbors(self) -> None: ...

