from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.nio import ByteBuffer
from java.util import List
from zombie.iso.areas.isoregion.regions import IsoChunkRegion, IsoWorldRegion, IsoRegionManager

class DataCell: ...


class DataChunk:

  def getChunkX(self) -> int: ...

  def getChunkY(self) -> int: ...

  def getIsoChunkRegion(self, x: int, y: int, z: int) -> IsoChunkRegion: ...

  def getLastUpdateStamp(self) -> int: ...

  @overload
  def getSquare(self, x: int, y: int, z: int) -> int: ...

  @overload
  def getSquare(self, x: int, y: int, z: int, ignoreCoordCheck: bool) -> int: ...

  def load(self, bb: ByteBuffer, worldVersion: int, readLength: bool) -> None: ...

  def save(self, bb: ByteBuffer) -> None: ...

  def selectedHasFlags(self, flags: int) -> bool: ...

  def setDirtyAllActive(self) -> None: ...

  def setLastUpdateStamp(self, lastUpdateStamp: int) -> None: ...

  def setRegion(self, x: int, y: int, z: int, regionIndex: int) -> None: ...

  def setSelectedFlags(self, x: int, y: int, z: int) -> None: ...

  def squareGetFlags(self, x: int, y: int, z: int) -> int: ...


class DataRoot:

  def DequeueDirtyIsoWorldRegion(self, mr: IsoWorldRegion) -> None: ...

  def EnqueueDirtyDataChunk(self, chunk: DataChunk) -> None: ...

  def EnqueueDirtyIsoWorldRegion(self, mr: IsoWorldRegion) -> None: ...

  def getAllChunks(self, list: List[DataChunk]) -> None: ...

  def getDataChunk(self, chunkx: int, chunky: int) -> DataChunk: ...

  def getIsoChunkRegion(self, x: int, y: int, z: int) -> IsoChunkRegion: ...

  def getIsoWorldRegion(self, x: int, y: int, z: int) -> IsoWorldRegion: ...

  def getSquareFlags(self, x: int, y: int, z: int) -> int: ...

  def processDirtyChunks(self) -> None: ...

  def resetAllData(self) -> None: ...

  def updateExistingSquare(self, x: int, y: int, z: int, flags: int) -> None: ...

  def __init__(self):
    self.regionmanager: IsoRegionManager
    self.select: DataRoot.SelectInfo

  class SelectInfo:

    @overload
    def reset(self, x: int, y: int, z: int, createSquare: bool) -> None: ...

    @overload
    def reset(self, x: int, y: int, z: int, createChunk: bool, createSquare: bool) -> None: ...


class DataSquarePos:

  DEBUG_POOL: bool

  def set(self, x: int, y: int, z: int) -> None: ...

