from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.awt import Rectangle
from java.lang import Enum
from java.nio import ByteBuffer
from java.util import Stack, ArrayList, Vector
from zombie.characters import SurvivorDesc, IsoPlayer
from zombie.inventory import ItemType, ItemContainer
from zombie.iso import BuildingDef, LotHeader, IsoGridSquare, IsoLightSource, IsoCell, RoomDef, IsoObject, IsoRoomLight
from zombie.iso.objects import IsoDoor, IsoWindow, IsoLightSwitch

class BuildingScore:

  def __init__(self, b: IsoBuilding):
    self.building: IsoBuilding
    self.defense: float
    self.food: float
    self.safety: int
    self.size: int
    self.weapons: float
    self.wood: float


class IsoArea:

  Doobo: bool

  version: str

  @staticmethod
  def Ardo(filename: str) -> str: ...

  @staticmethod
  def Thigglewhat() -> bool: ...

  @staticmethod
  def Thigglewhat2(str: str, gfgf: str) -> bool: ...

  @staticmethod
  def Thigglewhat22(str: str) -> str: ...

  @staticmethod
  def asasa(filename: str) -> list[int]: ...

  def __init__(self): ...


class IsoBuilding(IsoArea):

  GoodBuildingScore: float

  IDMax: int

  PoorBuildingScore: float

  def AddRoom(self, room: IsoRoom) -> None: ...

  def CalculateExits(self) -> None: ...

  def CalculateWindows(self) -> None: ...

  def ContainsAllItems(self, items: Stack[str]) -> bool: ...

  def CreateFrom(self, building: BuildingDef, info: LotHeader) -> None: ...

  def FillContainers(self) -> None: ...

  def ScoreBuildingPersonSpecific(self, desc: SurvivorDesc, bFarGood: bool) -> float: ...

  def TriggerAlarm(self) -> None: ...

  @overload
  def addDoor(self, obj: IsoDoor, bOtherTile: bool) -> None: ...

  @overload
  def addDoor(self, obj: IsoDoor, bOtherTile: bool, arg2: IsoGridSquare, building: IsoBuilding) -> None: ...

  @overload
  def addWindow(self, obj: IsoWindow, bOtherTile: bool) -> None: ...

  @overload
  def addWindow(self, obj: IsoWindow, bOtherTile: bool, arg2: IsoGridSquare, building: IsoBuilding) -> None: ...

  def containsRoom(self, room: str) -> bool: ...

  def forceAwake(self) -> None: ...

  def getContainerWith(self, itemType: ItemType) -> ItemContainer: ...

  def getDef(self) -> BuildingDef: ...

  def getFreeTile(self) -> IsoGridSquare: ...

  def getID(self) -> int: ...

  def getRandomContainer(self, type: str) -> ItemContainer: ...

  def getRandomFirstFloorWindow(self) -> IsoWindow: ...

  @overload
  def getRandomRoom(self) -> IsoRoom: ...

  @overload
  def getRandomRoom(self, room: str) -> IsoRoom: ...

  def getRoomsNumber(self) -> int: ...

  def hasWater(self) -> bool: ...

  def isAllExplored(self) -> bool: ...

  def isResidential(self) -> bool: ...

  def isToxic(self) -> bool: ...

  def setAllExplored(self, b: bool) -> None: ...

  def setToxic(self, isToxic: bool) -> None: ...

  def update(self) -> None: ...

  @overload
  def __init__(self):
    self.bounds: Rectangle

    self.bseeninside: bool

    self.container: ArrayList[ItemContainer]

    # self.def: BuildingDef

    self.exits: Vector[IsoRoomExit]

    self.id: int

    self.isresidence: bool

    self.lights: ArrayList[IsoLightSource]

    self.rooms: Vector[IsoRoom]

    self.safety: int

    self.scoreupdate: int

    self.transparentwalls: int

    self.windows: Vector[IsoWindow]

  @overload
  def __init__(self, cell: IsoCell): ...


class IsoRoom:

  def CreateBuilding(self, cell: IsoCell) -> IsoBuilding: ...

  def addSquare(self, sq: IsoGridSquare) -> None: ...

  def createLights(self, active: bool) -> None: ...

  def getBuilding(self) -> IsoBuilding: ...

  def getContainer(self) -> ArrayList[ItemContainer]: ...

  def getFreeTile(self) -> IsoGridSquare: ...

  def getLightSwitches(self) -> ArrayList[IsoLightSwitch]: ...

  def getName(self) -> str: ...

  def getRandomFreeSquare(self) -> IsoGridSquare: ...

  def getRandomSquare(self) -> IsoGridSquare: ...

  def getRoomDef(self) -> RoomDef: ...

  def getSquares(self) -> ArrayList[IsoGridSquare]: ...

  def getTileList(self) -> Vector[IsoGridSquare]: ...

  def getWaterSources(self) -> ArrayList[IsoObject]: ...

  def getWindows(self) -> ArrayList[IsoWindow]: ...

  def hasLightSwitches(self) -> bool: ...

  def hasWater(self) -> bool: ...

  def isInside(self, x: int, y: int, z: int) -> bool: ...

  def onSee(self) -> None: ...

  def refreshSquares(self) -> None: ...

  def removeSquare(self, sq: IsoGridSquare) -> None: ...

  def setWaterSources(self, WaterSources: ArrayList[IsoObject]) -> None: ...

  def spawnZombies(self) -> None: ...

  def useWater(self) -> None: ...

  def __init__(self):
    self.beds: Vector[IsoGridSquare]
    self.bounds: Rectangle
    self.building: IsoBuilding
    self.containers: ArrayList[ItemContainer]
    # self.def: RoomDef
    self.exits: Vector[IsoRoomExit]
    self.layer: int
    self.lightswitches: ArrayList[IsoLightSwitch]
    self.rects: ArrayList[RoomDef.RoomRect]
    self.roomdef: str
    self.roomlights: ArrayList[IsoRoomLight]
    self.seen: int
    self.squares: ArrayList[IsoGridSquare]
    self.tilelist: Vector[IsoGridSquare]
    self.transparentwalls: int
    self.visited: int
    self.watersources: ArrayList[IsoObject]
    self.windows: ArrayList[IsoWindow]


class IsoRoomExit:

  ThiggleQ: str

  def getDoor(self, cell: IsoCell) -> IsoObject: ...

  @overload
  def __init__(self, arg0: IsoRoom, x: int, y: int, layer: int):
    # self.from: IsoRoom

    self.layer: int

    self.to: IsoRoomExit

    self.type: IsoRoomExit.ExitType

    self.x: int

    self.y: int

  @overload
  def __init__(self, to: IsoRoomExit, x: int, y: int, layer: int): ...
  @overload
  def __init__(self, arg0: IsoRoom, to: IsoRoomExit, x: int, y: int, layer: int): ...

  class ExitType(Enum):

    Door: IsoRoomExit.ExitType

    Window: IsoRoomExit.ExitType

    @staticmethod
    def valueOf(arg0: str) -> IsoRoomExit.ExitType: ...

    @staticmethod
    def values() -> list[IsoRoomExit.ExitType]: ...


class NonPvpZone:

  nonPvpZoneList: ArrayList[NonPvpZone]

  def getSize(self) -> int: ...

  def getTitle(self) -> str: ...

  def getX(self) -> int: ...

  def getX2(self) -> int: ...

  def getY(self) -> int: ...

  def getY2(self) -> int: ...

  def load(self, input: ByteBuffer, WorldVersion: int) -> None: ...

  def save(self, output: ByteBuffer) -> None: ...

  def setSize(self, size: int) -> None: ...

  def setTitle(self, title: str) -> None: ...

  def setX(self, x: int) -> None: ...

  def setX2(self, x2: int) -> None: ...

  def setY(self, y: int) -> None: ...

  def setY2(self, y2: int) -> None: ...

  def syncNonPvpZone(self, remove: bool) -> None: ...

  @staticmethod
  def addNonPvpZone(title: str, x: int, y: int, x2: int, y2: int) -> NonPvpZone: ...

  @staticmethod
  def getAllZones() -> ArrayList[NonPvpZone]: ...

  @staticmethod
  def getNonPvpZone(x: int, y: int) -> NonPvpZone: ...

  @staticmethod
  def getZoneByTitle(title: str) -> NonPvpZone: ...

  @staticmethod
  def removeNonPvpZone(title: str) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, title: str, x: int, y: int, x2: int, y2: int): ...


class SafeHouse:

  def addPlayer(self, player: str) -> None: ...

  @overload
  def alreadyHaveSafehouse(self, username: str) -> SafeHouse: ...

  @overload
  def alreadyHaveSafehouse(self, player: IsoPlayer) -> SafeHouse: ...

  def checkTrespass(self, player: IsoPlayer) -> None: ...

  def containsLocation(self, x: float, y: float) -> bool: ...

  def getH(self) -> int: ...

  def getId(self) -> str: ...

  def getLastVisited(self) -> int: ...

  def getOpenTimer(self) -> int: ...

  def getOwner(self) -> str: ...

  def getPlayerConnected(self) -> int: ...

  def getPlayers(self) -> ArrayList[str]: ...

  def getTitle(self) -> str: ...

  def getW(self) -> int: ...

  def getX(self) -> int: ...

  def getX2(self) -> int: ...

  def getY(self) -> int: ...

  def getY2(self) -> int: ...

  def isOwner(self, player: IsoPlayer) -> bool: ...

  def isRespawnInSafehouse(self, username: str) -> bool: ...

  def kickOutOfSafehouse(self, player: IsoPlayer) -> None: ...

  @overload
  def playerAllowed(self, name: str) -> bool: ...

  @overload
  def playerAllowed(self, player: IsoPlayer) -> bool: ...

  def removePlayer(self, player: str) -> None: ...

  @overload
  def removeSafeHouse(self, player: IsoPlayer) -> None: ...

  @overload
  def removeSafeHouse(self, player: IsoPlayer, force: bool) -> None: ...

  def save(self, output: ByteBuffer) -> None: ...

  def setH(self, h: int) -> None: ...

  def setLastVisited(self, lastVisited: int) -> None: ...

  def setOpenTimer(self, openTimer: int) -> None: ...

  def setOwner(self, owner: str) -> None: ...

  def setPlayerConnected(self, playerConnected: int) -> None: ...

  def setPlayers(self, players: ArrayList[str]) -> None: ...

  def setRespawnInSafehouse(self, b: bool, username: str) -> None: ...

  def setTitle(self, title: str) -> None: ...

  def setW(self, w: int) -> None: ...

  def setX(self, x: int) -> None: ...

  def setY(self, y: int) -> None: ...

  def syncSafehouse(self) -> None: ...

  def updatePlayersConnected(self) -> None: ...

  def updateSafehouse(self, player: IsoPlayer) -> None: ...

  @staticmethod
  @overload
  def addSafeHouse(square: IsoGridSquare, player: IsoPlayer) -> SafeHouse: ...

  @staticmethod
  @overload
  def addSafeHouse(x: int, y: int, w: int, h: int, player: str, remote: bool) -> SafeHouse: ...

  @staticmethod
  def allowSafeHouse(player: IsoPlayer) -> bool: ...

  @staticmethod
  def canBeSafehouse(clickedSquare: IsoGridSquare, player: IsoPlayer) -> str: ...

  @staticmethod
  def clearSafehouseList() -> None: ...

  @staticmethod
  @overload
  def getSafeHouse(square: IsoGridSquare) -> SafeHouse: ...

  @staticmethod
  @overload
  def getSafeHouse(x: int, y: int, w: int, h: int) -> SafeHouse: ...

  @staticmethod
  def getSafehouseList() -> ArrayList[SafeHouse]: ...

  @staticmethod
  @overload
  def hasSafehouse(username: str) -> SafeHouse: ...

  @staticmethod
  @overload
  def hasSafehouse(player: IsoPlayer) -> SafeHouse: ...

  @staticmethod
  def init() -> None: ...

  @staticmethod
  def isPlayerAllowedOnSquare(player: IsoPlayer, sq: IsoGridSquare) -> bool: ...

  @staticmethod
  def isSafeHouse(square: IsoGridSquare, username: str, doDisableSafehouse: bool) -> SafeHouse: ...

  @staticmethod
  def load(bb: ByteBuffer, WorldVersion: int) -> SafeHouse: ...

  @staticmethod
  def updateSafehousePlayersConnected() -> None: ...

  def __init__(self, x: int, y: int, w: int, h: int, player: str):
    self.playersrespawn: ArrayList[str]

