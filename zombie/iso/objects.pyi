from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from fmod.fmod import Audio
from java.lang import Integer, Enum, Boolean
from java.nio import ByteBuffer
from java.util import ArrayList, Map, Stack
from java.util.function import Consumer
from se.krka.kahlua.vm import KahluaTable
from zombie.characters import IsoGameCharacter, IsoPlayer
from zombie.characters.AttachedItems import AttachedItems
from zombie.characters.WornItems import WornItems
from zombie.chat import ChatElement
from zombie.core.network import ByteBufferWriter
from zombie.core.opengl import Shader
from zombie.core.raknet import UdpConnection
from zombie.core.skinnedmodel import DeadBodyAtlas
from zombie.core.skinnedmodel.visual import HumanVisual, ItemVisuals, BaseVisual
from zombie.core.textures import ColorInfo, TextureDraw
from zombie.inventory import InventoryItem, ItemContainer
from zombie.inventory.types import HandWeapon, DrainableComboItem, Moveable
from zombie.iso import IsoObject, IsoCell, IsoGridSquare, IsoPhysicsObject, IsoMovingObject, Vector2, IsoDirections, IsoLightSource, IsoChunk, IsoMetaGrid, IsoPushableObject
from zombie.iso.objects.interfaces import BarricadeAble, Thumpable
from zombie.iso.sprite import IsoSprite
from zombie.radio.devices import DeviceData
from zombie.ui import ObjectTooltip
from zombie.vehicles import BaseVehicle

class BSFurnace(IsoObject):

  def addFuel(self, amount: float) -> None: ...

  def addToWorld(self) -> None: ...

  def getFuelAmount(self) -> float: ...

  def getFuelDecrease(self) -> float: ...

  def getHeat(self) -> float: ...

  def getHeatDecrease(self) -> float: ...

  def getHeatIncrease(self) -> float: ...

  def getMeltingSkill(self, meltItem: InventoryItem) -> int: ...

  def getObjectName(self) -> str: ...

  def isFireStarted(self) -> bool: ...

  def load(self, input: ByteBuffer, WorldVersion: int, IS_DEBUG_SAVE: bool) -> None: ...

  def removeFromWorld(self) -> None: ...

  def save(self, output: ByteBuffer, IS_DEBUG_SAVE: bool) -> None: ...

  def setFireStarted(self, fireStarted: bool) -> None: ...

  def setFuelAmount(self, amount: float) -> None: ...

  def setFuelDecrease(self, fuelDecrease: float) -> None: ...

  def setHeat(self, heat: float) -> None: ...

  def setHeatDecrease(self, heatDecrease: float) -> None: ...

  def setHeatIncrease(self, heatIncrease: float) -> None: ...

  def syncFurnace(self) -> None: ...

  def update(self) -> None: ...

  def updateLight(self) -> None: ...

  @overload
  def __init__(self, cell: IsoCell):
    self.firestarted: bool

    self.fuelamount: float

    self.fueldecrease: float

    self.heat: float

    self.heatdecrease: float

    self.heatincrease: float

    self.slitsprite: str

    self.ssprite: str

  @overload
  def __init__(self, cell: IsoCell, sq: IsoGridSquare, sprite: str, litSprite: str): ...


class ClothingDryerLogic:

  @overload
  def getContainer(self) -> ItemContainer: ...

  @overload
  def getContainer(self) -> ItemContainer: ...

  def getObject(self) -> IsoObject: ...

  @overload
  def isActivated(self) -> bool: ...

  @overload
  def isActivated(self) -> bool: ...

  @overload
  def isItemAllowedInContainer(self, container: ItemContainer, item: InventoryItem) -> bool: ...

  @overload
  def isItemAllowedInContainer(self, container: ItemContainer, item: InventoryItem) -> bool: ...

  @overload
  def isRemoveItemAllowedFromContainer(self, container: ItemContainer, item: InventoryItem) -> bool: ...

  @overload
  def isRemoveItemAllowedFromContainer(self, container: ItemContainer, item: InventoryItem) -> bool: ...

  def load(self, input: ByteBuffer, WorldVersion: int, IS_DEBUG_SAVE: bool) -> None: ...

  @overload
  def loadChange(self, change: str, bb: ByteBuffer) -> None: ...

  @overload
  def loadChange(self, change: str, bb: ByteBuffer) -> None: ...

  def save(self, output: ByteBuffer, IS_DEBUG_SAVE: bool) -> None: ...

  @overload
  def saveChange(self, change: str, tbl: KahluaTable, bb: ByteBuffer) -> None: ...

  @overload
  def saveChange(self, change: str, tbl: KahluaTable, bb: ByteBuffer) -> None: ...

  @overload
  def setActivated(self, activated: bool) -> None: ...

  @overload
  def setActivated(self, activated: bool) -> None: ...

  @overload
  def switchModeOff(self) -> None: ...

  @overload
  def switchModeOff(self) -> None: ...

  @overload
  def switchModeOn(self) -> None: ...

  @overload
  def switchModeOn(self) -> None: ...

  @overload
  def update(self) -> None: ...

  @overload
  def update(self) -> None: ...

  def __init__(self, object: IsoObject): ...


class ClothingWasherLogic:

  @overload
  def getContainer(self) -> ItemContainer: ...

  @overload
  def getContainer(self) -> ItemContainer: ...

  def getObject(self) -> IsoObject: ...

  @overload
  def isActivated(self) -> bool: ...

  @overload
  def isActivated(self) -> bool: ...

  @overload
  def isItemAllowedInContainer(self, container: ItemContainer, item: InventoryItem) -> bool: ...

  @overload
  def isItemAllowedInContainer(self, container: ItemContainer, item: InventoryItem) -> bool: ...

  @overload
  def isRemoveItemAllowedFromContainer(self, container: ItemContainer, item: InventoryItem) -> bool: ...

  @overload
  def isRemoveItemAllowedFromContainer(self, container: ItemContainer, item: InventoryItem) -> bool: ...

  def load(self, input: ByteBuffer, WorldVersion: int, IS_DEBUG_SAVE: bool) -> None: ...

  @overload
  def loadChange(self, change: str, bb: ByteBuffer) -> None: ...

  @overload
  def loadChange(self, change: str, bb: ByteBuffer) -> None: ...

  def save(self, output: ByteBuffer, IS_DEBUG_SAVE: bool) -> None: ...

  @overload
  def saveChange(self, change: str, tbl: KahluaTable, bb: ByteBuffer) -> None: ...

  @overload
  def saveChange(self, change: str, tbl: KahluaTable, bb: ByteBuffer) -> None: ...

  @overload
  def setActivated(self, activated: bool) -> None: ...

  @overload
  def setActivated(self, activated: bool) -> None: ...

  @overload
  def switchModeOff(self) -> None: ...

  @overload
  def switchModeOff(self) -> None: ...

  @overload
  def switchModeOn(self) -> None: ...

  @overload
  def switchModeOn(self) -> None: ...

  @overload
  def update(self) -> None: ...

  @overload
  def update(self) -> None: ...

  def __init__(self, object: IsoObject): ...


class IsoBall(IsoPhysicsObject):

  def collideGround(self) -> None: ...

  def collideWall(self) -> None: ...

  def getObjectName(self) -> str: ...

  def render(self, x: float, y: float, z: float, info: ColorInfo, bDoAttached: bool, bWallLightingPass: bool, shader: Shader) -> None: ...

  def update(self) -> None: ...

  @overload
  def __init__(self, cell: IsoCell): ...
  @overload
  def __init__(self, cell: IsoCell, x: float, y: float, z: float, xvel: float, yvel: float, weapon: HandWeapon, character: IsoGameCharacter): ...


class IsoBarbecue(IsoObject):

  def addFuel(self, units: int) -> None: ...

  def addToWorld(self) -> None: ...

  def extinguish(self) -> None: ...

  def getFuelAmount(self) -> int: ...

  def getObjectName(self) -> str: ...

  def getTemperature(self) -> float: ...

  def hasFuel(self) -> bool: ...

  def hasPropaneTank(self) -> bool: ...

  def isLit(self) -> bool: ...

  def isPropaneBBQ(self) -> bool: ...

  def isSmouldering(self) -> bool: ...

  def load(self, input: ByteBuffer, WorldVersion: int, IS_DEBUG_SAVE: bool) -> None: ...

  def loadChange(self, change: str, bb: ByteBuffer) -> None: ...

  def removeFromWorld(self) -> None: ...

  def removePropaneTank(self) -> InventoryItem: ...

  def render(self, x: float, y: float, z: float, col: ColorInfo, bDoChild: bool, bWallLightingPass: bool, shader: Shader) -> None: ...

  def save(self, output: ByteBuffer, IS_DEBUG_SAVE: bool) -> None: ...

  def saveChange(self, change: str, tbl: KahluaTable, bb: ByteBuffer) -> None: ...

  def setFuelAmount(self, units: int) -> None: ...

  def setLit(self, lit: bool) -> None: ...

  def setPropaneTank(self, tank: InventoryItem) -> None: ...

  def setSprite(self, newsprite: IsoSprite) -> None: ...

  def toggle(self) -> None: ...

  def turnOff(self) -> None: ...

  def turnOn(self) -> None: ...

  def update(self) -> None: ...

  def useFuel(self, amount: int) -> int: ...

  @staticmethod
  def isSpriteWithPropaneTank(sprite: IsoSprite) -> bool: ...

  @staticmethod
  def isSpriteWithoutPropaneTank(sprite: IsoSprite) -> bool: ...

  @overload
  def __init__(self, cell: IsoCell): ...
  @overload
  def __init__(self, cell: IsoCell, sq: IsoGridSquare, gid: IsoSprite): ...


class IsoBarricade(IsoObject):

  MAX_PLANKS: int

  METAL_BAR_HEALTH: int

  METAL_HEALTH: int

  METAL_HEALTH_DAMAGED: int

  PLANK_HEALTH: int

  def Damage(self, amount: int) -> None: ...

  def DamageBarricade(self, amount: int) -> None: ...

  def TestCollide(self, obj: IsoMovingObject, arg1: IsoGridSquare, to: IsoGridSquare) -> bool: ...

  def TestVision(self, arg0: IsoGridSquare, to: IsoGridSquare) -> IsoObject.VisionResult: ...

  @overload
  def Thump(self, thumper: IsoMovingObject) -> None: ...

  @overload
  def Thump(self, thumper: IsoMovingObject) -> None: ...

  @overload
  def WeaponHit(self, owner: IsoGameCharacter, weapon: HandWeapon) -> None: ...

  @overload
  def WeaponHit(self, owner: IsoGameCharacter, weapon: HandWeapon) -> None: ...

  def addMetal(self, chr: IsoGameCharacter, metal: InventoryItem) -> None: ...

  def addMetalBar(self, chr: IsoGameCharacter, metalBar: InventoryItem) -> None: ...

  def addPlank(self, chr: IsoGameCharacter, plank: InventoryItem) -> None: ...

  def canAddPlank(self) -> bool: ...

  def getBarricadedObject(self) -> BarricadeAble: ...

  def getFacingPosition(self, pos: Vector2) -> Vector2: ...

  def getNumPlanks(self) -> int: ...

  def getObjectName(self) -> str: ...

  @overload
  def getThumpCondition(self) -> float: ...

  @overload
  def getThumpCondition(self) -> float: ...

  @overload
  def getThumpableFor(self, chr: IsoGameCharacter) -> Thumpable: ...

  @overload
  def getThumpableFor(self, chr: IsoGameCharacter) -> Thumpable: ...

  def isBlockVision(self) -> bool: ...

  @overload
  def isDestroyed(self) -> bool: ...

  @overload
  def isDestroyed(self) -> bool: ...

  def isMetal(self) -> bool: ...

  def isMetalBar(self) -> bool: ...

  def load(self, input: ByteBuffer, WorldVersion: int, IS_DEBUG_SAVE: bool) -> None: ...

  def loadChange(self, change: str, bb: ByteBuffer) -> None: ...

  def removeMetal(self, chr: IsoGameCharacter) -> InventoryItem: ...

  def removeMetalBar(self, chr: IsoGameCharacter) -> InventoryItem: ...

  def removePlank(self, chr: IsoGameCharacter) -> InventoryItem: ...

  def render(self, x: float, y: float, z: float, col: ColorInfo, bDoAttached: bool, bWallLightingPass: bool, shader: Shader) -> None: ...

  def save(self, output: ByteBuffer, IS_DEBUG_SAVE: bool) -> None: ...

  def saveChange(self, change: str, tbl: KahluaTable, bb: ByteBuffer) -> None: ...

  @staticmethod
  @overload
  def AddBarricadeToObject(to: BarricadeAble, addOpposite: bool) -> IsoBarricade: ...

  @staticmethod
  @overload
  def AddBarricadeToObject(to: BarricadeAble, chr: IsoGameCharacter) -> IsoBarricade: ...

  @staticmethod
  def GetBarricadeForCharacter(obj: BarricadeAble, chr: IsoGameCharacter) -> IsoBarricade: ...

  @staticmethod
  def GetBarricadeOnSquare(square: IsoGridSquare, dir: IsoDirections) -> IsoBarricade: ...

  @staticmethod
  def GetBarricadeOppositeCharacter(obj: BarricadeAble, chr: IsoGameCharacter) -> IsoBarricade: ...

  @overload
  def __init__(self, cell: IsoCell): ...
  @overload
  def __init__(self, cell: IsoCell, gridSquare: IsoGridSquare, dir: IsoDirections): ...


class IsoBloodDrop(IsoPhysicsObject):

  def Serialize(self) -> bool: ...

  def collideGround(self) -> None: ...

  def collideWall(self) -> None: ...

  def getObjectName(self) -> str: ...

  def render(self, x: float, y: float, z: float, info: ColorInfo, bDoAttached: bool, bWallLightingPass: bool, shader: Shader) -> None: ...

  def update(self) -> None: ...

  @overload
  def __init__(self, cell: IsoCell):
    self.time: float

    self.tintb: float

    self.tintg: float

    self.tintr: float

  @overload
  def __init__(self, cell: IsoCell, x: float, y: float, z: float, xvel: float, yvel: float): ...


class IsoBrokenGlass(IsoObject):

  def addToWorld(self) -> None: ...

  def getObjectName(self) -> str: ...

  def load(self, bb: ByteBuffer, WorldVersion: int, IS_DEBUG_SAVE: bool) -> None: ...

  def removeFromWorld(self) -> None: ...

  def render(self, x: float, y: float, z: float, col: ColorInfo, bDoChild: bool, bWallLightingPass: bool, shader: Shader) -> None: ...

  def renderObjectPicker(self, x: float, y: float, z: float, lightInfo: ColorInfo) -> None: ...

  def save(self, bb: ByteBuffer, IS_DEBUG_SAVE: bool) -> None: ...

  def __init__(self, cell: IsoCell): ...


class IsoCarBatteryCharger(IsoObject):

  def addToWorld(self) -> None: ...

  def getBattery(self) -> InventoryItem: ...

  def getChargeRate(self) -> float: ...

  def getItem(self) -> InventoryItem: ...

  def getObjectName(self) -> str: ...

  def isActivated(self) -> bool: ...

  def load(self, bb: ByteBuffer, WorldVersion: int, IS_DEBUG_SAVE: bool) -> None: ...

  def removeFromWorld(self) -> None: ...

  def render(self, x: float, y: float, z: float, col: ColorInfo, bDoChild: bool, bWallLightingPass: bool, shader: Shader) -> None: ...

  def renderObjectPicker(self, x: float, y: float, z: float, lightInfo: ColorInfo) -> None: ...

  def save(self, bb: ByteBuffer, IS_DEBUG_SAVE: bool) -> None: ...

  def setActivated(self, activated: bool) -> None: ...

  def setBattery(self, battery: InventoryItem) -> None: ...

  def setChargeRate(self, chargeRate: float) -> None: ...

  def sync(self) -> None: ...

  def syncIsoObject(self, bRemote: bool, val: int, source: UdpConnection, bb: ByteBuffer) -> None: ...

  def syncIsoObjectSend(self, b: ByteBufferWriter) -> None: ...

  def update(self) -> None: ...

  @overload
  def __init__(self, cell: IsoCell): ...
  @overload
  def __init__(self, item: InventoryItem, cell: IsoCell, square: IsoGridSquare): ...


class IsoClothingDryer(IsoObject):

  def addToWorld(self) -> None: ...

  def getObjectName(self) -> str: ...

  def isActivated(self) -> bool: ...

  def isItemAllowedInContainer(self, container: ItemContainer, item: InventoryItem) -> bool: ...

  def isRemoveItemAllowedFromContainer(self, container: ItemContainer, item: InventoryItem) -> bool: ...

  def load(self, input: ByteBuffer, WorldVersion: int, IS_DEBUG_SAVE: bool) -> None: ...

  def loadChange(self, change: str, bb: ByteBuffer) -> None: ...

  def removeFromWorld(self) -> None: ...

  def save(self, output: ByteBuffer, IS_DEBUG_SAVE: bool) -> None: ...

  def saveChange(self, change: str, tbl: KahluaTable, bb: ByteBuffer) -> None: ...

  def setActivated(self, activated: bool) -> None: ...

  def update(self) -> None: ...

  @overload
  def __init__(self, cell: IsoCell): ...
  @overload
  def __init__(self, cell: IsoCell, sq: IsoGridSquare, gid: IsoSprite): ...


class IsoClothingWasher(IsoObject):

  def addToWorld(self) -> None: ...

  def getObjectName(self) -> str: ...

  def isActivated(self) -> bool: ...

  def isItemAllowedInContainer(self, container: ItemContainer, item: InventoryItem) -> bool: ...

  def isRemoveItemAllowedFromContainer(self, container: ItemContainer, item: InventoryItem) -> bool: ...

  def load(self, input: ByteBuffer, WorldVersion: int, IS_DEBUG_SAVE: bool) -> None: ...

  def loadChange(self, change: str, bb: ByteBuffer) -> None: ...

  def removeFromWorld(self) -> None: ...

  def save(self, output: ByteBuffer, IS_DEBUG_SAVE: bool) -> None: ...

  def saveChange(self, change: str, tbl: KahluaTable, bb: ByteBuffer) -> None: ...

  def setActivated(self, activated: bool) -> None: ...

  def update(self) -> None: ...

  @overload
  def __init__(self, cell: IsoCell): ...
  @overload
  def __init__(self, cell: IsoCell, sq: IsoGridSquare, gid: IsoSprite): ...


class IsoCombinationWasherDryer(IsoObject):

  def addToWorld(self) -> None: ...

  def getObjectName(self) -> str: ...

  def isActivated(self) -> bool: ...

  def isItemAllowedInContainer(self, container: ItemContainer, item: InventoryItem) -> bool: ...

  def isModeDryer(self) -> bool: ...

  def isModeWasher(self) -> bool: ...

  def isRemoveItemAllowedFromContainer(self, container: ItemContainer, item: InventoryItem) -> bool: ...

  def load(self, input: ByteBuffer, WorldVersion: int, IS_DEBUG_SAVE: bool) -> None: ...

  def loadChange(self, change: str, bb: ByteBuffer) -> None: ...

  def removeFromWorld(self) -> None: ...

  def save(self, output: ByteBuffer, IS_DEBUG_SAVE: bool) -> None: ...

  def saveChange(self, change: str, tbl: KahluaTable, bb: ByteBuffer) -> None: ...

  def setActivated(self, activated: bool) -> None: ...

  def setModeDryer(self) -> None: ...

  def setModeWasher(self) -> None: ...

  def update(self) -> None: ...

  @overload
  def __init__(self, cell: IsoCell): ...
  @overload
  def __init__(self, cell: IsoCell, sq: IsoGridSquare, gid: IsoSprite): ...


class IsoCompost(IsoObject):

  def addToWorld(self) -> None: ...

  def getCompost(self) -> float: ...

  def getObjectName(self) -> str: ...

  def getThumpableFor(self, chr: IsoGameCharacter) -> Thumpable: ...

  def load(self, input: ByteBuffer, WorldVersion: int, IS_DEBUG_SAVE: bool) -> None: ...

  def remove(self) -> None: ...

  def save(self, output: ByteBuffer, IS_DEBUG_SAVE: bool) -> None: ...

  def setCompost(self, compost: float) -> None: ...

  def syncCompost(self) -> None: ...

  def update(self) -> None: ...

  def updateSprite(self) -> None: ...

  @overload
  def __init__(self, cell: IsoCell): ...
  @overload
  def __init__(self, cell: IsoCell, sq: IsoGridSquare): ...


class IsoCurtain(IsoObject):

  def IsOpen(self) -> bool: ...

  def TestVision(self, arg0: IsoGridSquare, to: IsoGridSquare) -> IsoObject.VisionResult: ...

  def ToggleDoor(self, chr: IsoGameCharacter) -> None: ...

  def ToggleDoorSilent(self) -> None: ...

  def canInteractWith(self, chr: IsoGameCharacter) -> bool: ...

  def getFacingPosition(self, pos: Vector2) -> Vector2: ...

  def getNorth(self) -> bool: ...

  def getObjectAttachedTo(self) -> IsoObject: ...

  def getObjectName(self) -> str: ...

  def getOppositeSquare(self) -> IsoGridSquare: ...

  def getSoundPrefix(self) -> str: ...

  @overload
  def isAdjacentToSquare(self, square2: IsoGridSquare) -> bool: ...

  @overload
  def isAdjacentToSquare(self, square1: IsoGridSquare, square2: IsoGridSquare) -> bool: ...

  def load(self, input: ByteBuffer, WorldVersion: int, IS_DEBUG_SAVE: bool) -> None: ...

  def onMouseLeftClick(self, x: int, y: int) -> bool: ...

  def removeSheet(self, chr: IsoGameCharacter) -> None: ...

  def render(self, x: float, y: float, z: float, col: ColorInfo, bDoAttached: bool, bWallLightingPass: bool, shader: Shader) -> None: ...

  def save(self, output: ByteBuffer, IS_DEBUG_SAVE: bool) -> None: ...

  @overload
  def syncIsoObject(self, bRemote: bool, val: int, source: UdpConnection) -> None: ...

  @overload
  def syncIsoObject(self, bRemote: bool, val: int, source: UdpConnection, bb: ByteBuffer) -> None: ...

  def syncIsoObjectSend(self, b: ByteBufferWriter) -> None: ...

  @staticmethod
  def isSheet(curtain: IsoObject) -> bool: ...

  @overload
  def __init__(self, cell: IsoCell):
    self.barricaded: bool

    self.barricidemaxstrength: Integer

    self.barricidestrength: Integer

    self.health: Integer

    self.locked: bool

    self.maxhealth: Integer

    self.north: bool

    self.open: bool

    self.pushedmaxstrength: Integer

    self.pushedstrength: Integer

  @overload
  def __init__(self, cell: IsoCell, gridSquare: IsoGridSquare, gid: str, north: bool): ...
  @overload
  def __init__(self, cell: IsoCell, gridSquare: IsoGridSquare, gid: IsoSprite, north: bool, spriteclosed: bool): ...


class IsoDeadBody(IsoMovingObject):

  MAX_ROT_STAGES: int

  def Burn(self) -> None: ...

  def Collision(self, collision: Vector2, object: IsoObject) -> None: ...

  @overload
  def IsSpeaking(self) -> bool: ...

  @overload
  def IsSpeaking(self) -> bool: ...

  @overload
  def Say(self, line: str) -> None: ...

  @overload
  def Say(self, line: str) -> None: ...

  def addToWorld(self) -> None: ...

  def checkClothing(self, removedItem: InventoryItem) -> None: ...

  def getAngle(self) -> float: ...

  def getAttachedItems(self) -> AttachedItems: ...

  @overload
  def getHumanVisual(self) -> HumanVisual: ...

  @overload
  def getHumanVisual(self) -> HumanVisual: ...

  def getItem(self) -> InventoryItem: ...

  @overload
  def getItemVisuals(self, itemVisuals: ItemVisuals) -> None: ...

  @overload
  def getItemVisuals(self, itemVisuals: ItemVisuals) -> None: ...

  def getObjectID(self) -> int: ...

  def getObjectName(self) -> str: ...

  def getOnlineID(self) -> int: ...

  def getOutfitName(self) -> str: ...

  def getPrimaryHandItem(self) -> InventoryItem: ...

  def getReanimateTime(self) -> float: ...

  @overload
  def getSayLine(self) -> str: ...

  @overload
  def getSayLine(self) -> str: ...

  def getSecondaryHandItem(self) -> InventoryItem: ...

  @overload
  def getTalkerType(self) -> str: ...

  @overload
  def getTalkerType(self) -> str: ...

  def getVisual(self) -> BaseVisual: ...

  def getWornItems(self) -> WornItems: ...

  def isCrawling(self) -> bool: ...

  def isFakeDead(self) -> bool: ...

  def isFallOnFront(self) -> bool: ...

  @overload
  def isFemale(self) -> bool: ...

  @overload
  def isFemale(self) -> bool: ...

  def isMouseOver(self, screenX: float, screenY: float) -> bool: ...

  def isPlayer(self) -> bool: ...

  @overload
  def isSkeleton(self) -> bool: ...

  @overload
  def isSkeleton(self) -> bool: ...

  @overload
  def isZombie(self) -> bool: ...

  @overload
  def isZombie(self) -> bool: ...

  def load(self, input: ByteBuffer, WorldVersion: int, IS_DEBUG_SAVE: bool) -> None: ...

  def loadChange(self, change: str, bb: ByteBuffer) -> None: ...

  def readInventory(self, b: ByteBuffer) -> str: ...

  def reanimate(self) -> None: ...

  def reanimateLater(self) -> None: ...

  def reanimateNow(self) -> None: ...

  def removeFromWorld(self) -> None: ...

  def render(self, x: float, y: float, z: float, col: ColorInfo, bDoChild: bool, bWallLightingPass: bool, shader: Shader) -> None: ...

  def renderObjectPicker(self, x: float, y: float, z: float, lightInfo: ColorInfo) -> None: ...

  def renderShadow(self) -> None: ...

  def renderlast(self) -> None: ...

  def save(self, output: ByteBuffer, IS_DEBUG_SAVE: bool) -> None: ...

  def saveChange(self, change: str, tbl: KahluaTable, bb: ByteBuffer) -> None: ...

  def setAttachedItems(self, other: AttachedItems) -> None: ...

  def setContainer(self, container: ItemContainer) -> None: ...

  def setCrawling(self, crawling: bool) -> None: ...

  def setFakeDead(self, fakeDead: bool) -> None: ...

  def setFallOnFront(self, fallOnFront: bool) -> None: ...

  def setObjectID(self, objectID: int) -> None: ...

  def setOnlineID(self, onlineID: int) -> None: ...

  def setPrimaryHandItem(self, item: InventoryItem) -> None: ...

  def setReanimateTime(self, hours: float) -> None: ...

  def setSecondaryHandItem(self, item: InventoryItem) -> None: ...

  def setWornItems(self, other: WornItems) -> None: ...

  def softReset(self) -> None: ...

  def update(self) -> None: ...

  @staticmethod
  def Reset() -> None: ...

  @staticmethod
  def addDeadBodyID(id: int, deadBody: IsoDeadBody) -> None: ...

  @staticmethod
  def getDeadBody(id: int) -> IsoDeadBody: ...

  @staticmethod
  def isDead(id: int) -> bool: ...

  @staticmethod
  def removeDeadBody(id: int) -> None: ...

  @staticmethod
  def updateBodies() -> None: ...

  @overload
  def __init__(self, died: IsoGameCharacter):
    self.atlastex: DeadBodyAtlas.BodyTexture

    self.sayline: str

    self.speaking: bool

  @overload
  def __init__(self, cell: IsoCell): ...
  @overload
  def __init__(self, died: IsoGameCharacter, wasCorpseAlready: bool): ...


class IsoDoor(IsoObject):

  tempo: Vector2

  def HasCurtains(self) -> IsoDoor: ...

  def IsOpen(self) -> bool: ...

  def IsStrengthenedByPushedItems(self) -> bool: ...

  def TestCollide(self, obj: IsoMovingObject, arg1: IsoGridSquare, to: IsoGridSquare) -> bool: ...

  def TestPathfindCollide(self, obj: IsoMovingObject, arg1: IsoGridSquare, to: IsoGridSquare) -> bool: ...

  def TestVision(self, arg0: IsoGridSquare, to: IsoGridSquare) -> IsoObject.VisionResult: ...

  @overload
  def Thump(self, thumper: IsoMovingObject) -> None: ...

  @overload
  def Thump(self, thumper: IsoMovingObject) -> None: ...

  def ToggleDoor(self, chr: IsoGameCharacter) -> None: ...

  def ToggleDoorActual(self, chr: IsoGameCharacter) -> None: ...

  def ToggleDoorSilent(self) -> None: ...

  @overload
  def WeaponHit(self, owner: IsoGameCharacter, weapon: HandWeapon) -> None: ...

  @overload
  def WeaponHit(self, owner: IsoGameCharacter, weapon: HandWeapon) -> None: ...

  def addRandomBarricades(self) -> None: ...

  @overload
  def addSheet(self, chr: IsoGameCharacter) -> None: ...

  @overload
  def addSheet(self, inside: bool, chr: IsoGameCharacter) -> None: ...

  def canClimbOver(self, chr: IsoGameCharacter) -> bool: ...

  def checkKeyId(self) -> int: ...

  def destroy(self) -> None: ...

  def getAddSheetSquare(self, chr: IsoGameCharacter) -> IsoGridSquare: ...

  @overload
  def getBarricadeForCharacter(self, chr: IsoGameCharacter) -> IsoBarricade: ...

  @overload
  def getBarricadeForCharacter(self, chr: IsoGameCharacter) -> IsoBarricade: ...

  @overload
  def getBarricadeOnOppositeSquare(self) -> IsoBarricade: ...

  @overload
  def getBarricadeOnOppositeSquare(self) -> IsoBarricade: ...

  @overload
  def getBarricadeOnSameSquare(self) -> IsoBarricade: ...

  @overload
  def getBarricadeOnSameSquare(self) -> IsoBarricade: ...

  @overload
  def getBarricadeOppositeCharacter(self, chr: IsoGameCharacter) -> IsoBarricade: ...

  @overload
  def getBarricadeOppositeCharacter(self, chr: IsoGameCharacter) -> IsoBarricade: ...

  def getFacingPosition(self, pos: Vector2) -> Vector2: ...

  def getFacingPositionAlt(self, pos: Vector2) -> Vector2: ...

  def getHealth(self) -> int: ...

  def getKeyId(self) -> int: ...

  def getMaxHealth(self) -> int: ...

  @overload
  def getNorth(self) -> bool: ...

  @overload
  def getNorth(self) -> bool: ...

  def getObjectName(self) -> str: ...

  def getOpenSprite(self) -> IsoSprite: ...

  @overload
  def getOppositeSquare(self) -> IsoGridSquare: ...

  @overload
  def getOppositeSquare(self) -> IsoGridSquare: ...

  def getOtherSideOfDoor(self, chr: IsoGameCharacter) -> IsoGridSquare: ...

  def getRenderEffectMaster(self) -> IsoObject: ...

  def getSheetSquare(self) -> IsoGridSquare: ...

  def getSpriteEdge(self, ignoreOpen: bool) -> IsoDirections: ...

  def getSquare(self) -> IsoGridSquare: ...

  @overload
  def getThumpCondition(self) -> float: ...

  @overload
  def getThumpCondition(self) -> float: ...

  def getThumpSound(self) -> str: ...

  @overload
  def getThumpableFor(self, chr: IsoGameCharacter) -> Thumpable: ...

  @overload
  def getThumpableFor(self, chr: IsoGameCharacter) -> Thumpable: ...

  def haveKey(self) -> bool: ...

  def isAdjacentToSquare(self, square2: IsoGridSquare) -> bool: ...

  @overload
  def isBarricadeAllowed(self) -> bool: ...

  @overload
  def isBarricadeAllowed(self) -> bool: ...

  @overload
  def isBarricaded(self) -> bool: ...

  @overload
  def isBarricaded(self) -> bool: ...

  def isCurtainOpen(self) -> bool: ...

  @overload
  def isDestroyed(self) -> bool: ...

  @overload
  def isDestroyed(self) -> bool: ...

  def isExterior(self) -> bool: ...

  def isExteriorDoor(self, chr: IsoGameCharacter) -> bool: ...

  def isFacingSheet(self, chr: IsoGameCharacter) -> bool: ...

  def isHoppable(self) -> bool: ...

  def isLocked(self) -> bool: ...

  def isLockedByKey(self) -> bool: ...

  def isObstructed(self) -> bool: ...

  def load(self, input: ByteBuffer, WorldVersion: int, IS_DEBUG_SAVE: bool) -> None: ...

  def loadChange(self, change: str, bb: ByteBuffer) -> None: ...

  def loadState(self, bb: ByteBuffer) -> None: ...

  def onMouseLeftClick(self, x: int, y: int) -> bool: ...

  def removeSheet(self, chr: IsoGameCharacter) -> None: ...

  def render(self, x: float, y: float, z: float, info: ColorInfo, bDoAttached: bool, bWallLightingPass: bool, shader: Shader) -> None: ...

  def renderWallTile(self, x: float, y: float, z: float, col: ColorInfo, bDoAttached: bool, bWallLightingPass: bool, shader: Shader, texdModifier: Consumer[TextureDraw]) -> None: ...

  def save(self, output: ByteBuffer, IS_DEBUG_SAVE: bool) -> None: ...

  def saveChange(self, change: str, tbl: KahluaTable, bb: ByteBuffer) -> None: ...

  def saveState(self, bb: ByteBuffer) -> None: ...

  def setCurtainOpen(self, open: bool) -> None: ...

  def setHaveKey(self, haveKey: bool) -> None: ...

  def setHealth(self, Health: int) -> None: ...

  def setIsLocked(self, lock: bool) -> None: ...

  def setKeyId(self, keyId: int) -> None: ...

  def setLocked(self, bLocked: bool) -> None: ...

  def setLockedByKey(self, lockedByKey: bool) -> None: ...

  def setOpenSprite(self, sprite: IsoSprite) -> None: ...

  def syncDoorKey(self) -> None: ...

  def syncIsoObject(self, bRemote: bool, val: int, source: UdpConnection, bb: ByteBuffer) -> None: ...

  def syncIsoObjectSend(self, b: ByteBufferWriter) -> None: ...

  def toggleCurtain(self) -> None: ...

  def transmitSetCurtainOpen(self, open: bool) -> None: ...

  @staticmethod
  def destroyDoubleDoor(oneOfFour: IsoObject) -> bool: ...

  @staticmethod
  def destroyGarageDoor(oneOfThree: IsoObject) -> bool: ...

  @staticmethod
  def getDoubleDoorIndex(oneOfFour: IsoObject) -> int: ...

  @staticmethod
  def getDoubleDoorObject(oneOfFour: IsoObject, index: int) -> IsoObject: ...

  @staticmethod
  def getGarageDoorFirst(oneOfThree: IsoObject) -> IsoObject: ...

  @staticmethod
  def getGarageDoorIndex(oneOfThree: IsoObject) -> int: ...

  @staticmethod
  def getGarageDoorNext(oneOfThree: IsoObject) -> IsoObject: ...

  @staticmethod
  def getGarageDoorPrev(oneOfThree: IsoObject) -> IsoObject: ...

  @staticmethod
  def isDoorObstructed(object: IsoObject) -> bool: ...

  @staticmethod
  def isDoubleDoorObstructed(oneOfFour: IsoObject) -> bool: ...

  @staticmethod
  def toggleDoubleDoor(oneOfFour: IsoObject, doSync: bool) -> None: ...

  @staticmethod
  def toggleGarageDoor(oneOfThree: IsoObject, doSync: bool) -> None: ...

  @overload
  def __init__(self, cell: IsoCell):
    self.health: int

    self.locked: bool

    self.lockedbykey: bool

    self.maxhealth: int

    self.north: bool

    self.open: bool

    self.pushedmaxstrength: int

    self.pushedstrength: int

    self.type: IsoDoor.DoorType

  @overload
  def __init__(self, cell: IsoCell, gridSquare: IsoGridSquare, gid: str, north: bool): ...
  @overload
  def __init__(self, cell: IsoCell, gridSquare: IsoGridSquare, gid: IsoSprite, north: bool): ...
  @overload
  def __init__(self, cell: IsoCell, gridSquare: IsoGridSquare, gid: str, north: bool, table: KahluaTable): ...

  class DoorType(Enum):

    StrongWooden: IsoDoor.DoorType

    WeakWooden: IsoDoor.DoorType

    @staticmethod
    def valueOf(arg0: str) -> IsoDoor.DoorType: ...

    @staticmethod
    def values() -> list[IsoDoor.DoorType]: ...


class IsoFallingClothing(IsoPhysicsObject):

  def collideGround(self) -> None: ...

  def collideWall(self) -> None: ...

  def getObjectName(self) -> str: ...

  def render(self, x: float, y: float, z: float, info: ColorInfo, bDoAttached: bool, bWallLightingPass: bool, shader: Shader) -> None: ...

  def update(self) -> None: ...

  @overload
  def __init__(self, cell: IsoCell):
    self.addworlditem: bool

  @overload
  def __init__(self, cell: IsoCell, x: float, y: float, z: float, xvel: float, yvel: float, clothing: InventoryItem): ...


class IsoFire(IsoObject):

  def HasTooltip(self) -> bool: ...

  def Spread(self) -> None: ...

  def TestCollide(self, obj: IsoMovingObject, PassedObjectSquare: IsoGridSquare) -> bool: ...

  def TestVision(self, arg0: IsoGridSquare, to: IsoGridSquare) -> IsoObject.VisionResult: ...

  def addToWorld(self) -> None: ...

  def extinctFire(self) -> None: ...

  def getEnergy(self) -> int: ...

  def getLife(self) -> int: ...

  def getLightRadius(self) -> int: ...

  def getObjectName(self) -> str: ...

  def getSpreadDelay(self) -> int: ...

  def isCampfire(self) -> bool: ...

  def isPermanent(self) -> bool: ...

  def load(self, b: ByteBuffer, WorldVersion: int, IS_DEBUG_SAVE: bool) -> None: ...

  def loadChange(self, change: str, bb: ByteBuffer) -> None: ...

  def removeFromWorld(self) -> None: ...

  def render(self, x: float, y: float, z: float, col: ColorInfo, bDoChild: bool, bWallLightingPass: bool, shader: Shader) -> None: ...

  def save(self, output: ByteBuffer, IS_DEBUG_SAVE: bool) -> None: ...

  def saveChange(self, change: str, tbl: KahluaTable, bb: ByteBuffer) -> None: ...

  def setLife(self, Life: int) -> None: ...

  def setLifeStage(self, lifeStage: int) -> None: ...

  def setLightRadius(self, radius: int) -> None: ...

  def setSpreadDelay(self, SpreadDelay: int) -> None: ...

  def update(self) -> None: ...

  @staticmethod
  @overload
  def CanAddFire(gridSquare: IsoGridSquare, CanBurnAnywhere: bool) -> bool: ...

  @staticmethod
  @overload
  def CanAddFire(gridSquare: IsoGridSquare, CanBurnAnywhere: bool, smoke: bool) -> bool: ...

  @staticmethod
  def CanAddSmoke(gridSquare: IsoGridSquare, CanBurnAnywhere: bool) -> bool: ...

  @staticmethod
  def Fire_IsSquareFlamable(gridSquare: IsoGridSquare) -> bool: ...

  @overload
  def __init__(self, cell: IsoCell):
    self.age: int

    self.bsmoke: bool

    self.energy: int

    self.life: int

    self.lifestage: int

    self.lifestageduration: int

    self.lifestagetimer: int

    self.lightoscillator: float

    self.lightradius: int

    self.lightsource: IsoLightSource

    self.maxlife: int

    self.minlife: int

    self.numflameparticles: int

    self.perm: bool

    self.spreaddelay: int

    self.spreadtimer: int

  @overload
  def __init__(self, cell: IsoCell, gridSquare: IsoGridSquare): ...
  @overload
  def __init__(self, cell: IsoCell, gridSquare: IsoGridSquare, CanBurnAnywhere: bool, StartingEnergy: int): ...
  @overload
  def __init__(self, cell: IsoCell, gridSquare: IsoGridSquare, CanBurnAnywhere: bool, StartingEnergy: int, SetLife: int): ...
  @overload
  def __init__(self, cell: IsoCell, gridSquare: IsoGridSquare, CanBurnAnywhere: bool, StartingEnergy: int, SetLife: int, isSmoke: bool): ...


class IsoFireManager:

  Blue_Oscilator: float

  Blue_Oscilator_Rate: float

  Blue_Oscilator_Val: float

  CharactersOnFire_Stack: ArrayList[IsoGameCharacter]

  FireAlpha: float

  FireAnimDelay: float

  FireRecalc: int

  FireRecalcDelay: int

  FireStack: ArrayList[IsoFire]

  FireTintMod: ColorInfo

  Green_Oscilator: float

  Green_Oscilator_Rate: float

  Green_Oscilator_Val: float

  LightCalcFromBurningCharacters: bool

  MaxFireObjects: int

  OscilatorEffectScalar: float

  OscilatorSpeedScalar: float

  Red_Oscilator: float

  Red_Oscilator_Rate: float

  Red_Oscilator_Val: float

  SmokeAlpha: float

  SmokeAnimDelay: float

  SmokeTintMod: ColorInfo

  @staticmethod
  def Add(NewFire: IsoFire) -> None: ...

  @staticmethod
  def AddBurningCharacter(BurningCharacter: IsoGameCharacter) -> None: ...

  @staticmethod
  def Fire_LightCalc(FireSquare: IsoGridSquare, TestSquare: IsoGridSquare, playerIndex: int) -> None: ...

  @staticmethod
  def LightTileWithFire(TestSquare: IsoGridSquare) -> None: ...

  @staticmethod
  def MolotovSmash(cell: IsoCell, gridSquare: IsoGridSquare) -> None: ...

  @staticmethod
  def Remove(DyingFire: IsoFire) -> None: ...

  @staticmethod
  def RemoveAllOn(sq: IsoGridSquare) -> None: ...

  @staticmethod
  def RemoveBurningCharacter(BurningCharacter: IsoGameCharacter) -> None: ...

  @staticmethod
  def Reset() -> None: ...

  @staticmethod
  @overload
  def StartFire(cell: IsoCell, gridSquare: IsoGridSquare, IgniteOnAny: bool, FireStartingEnergy: int) -> None: ...

  @staticmethod
  @overload
  def StartFire(cell: IsoCell, gridSquare: IsoGridSquare, IgniteOnAny: bool, FireStartingEnergy: int, Life: int) -> None: ...

  @staticmethod
  def StartSmoke(cell: IsoCell, gridSquare: IsoGridSquare, IgniteOnAny: bool, FireStartingEnergy: int, Life: int) -> None: ...

  @staticmethod
  def Update() -> None: ...

  @staticmethod
  def addCharacterOnFire(character: IsoGameCharacter) -> None: ...

  @staticmethod
  def deleteCharacterOnFire(character: IsoGameCharacter) -> None: ...

  @staticmethod
  def explode(cell: IsoCell, gridSquare: IsoGridSquare, power: int) -> None: ...

  @staticmethod
  def stopSound(fire: IsoFire) -> None: ...

  @staticmethod
  def updateSound(fire: IsoFire) -> None: ...

  def __init__(self): ...

  class FireSounds:

    class Slot: ...


class IsoFireplace(IsoObject):

  def addFuel(self, units: int) -> None: ...

  def addToWorld(self) -> None: ...

  def extinguish(self) -> None: ...

  def getFacingPosition(self, pos: Vector2) -> Vector2: ...

  def getFuelAmount(self) -> int: ...

  def getObjectName(self) -> str: ...

  def getTemperature(self) -> float: ...

  def hasFuel(self) -> bool: ...

  def isLit(self) -> bool: ...

  def isSmouldering(self) -> bool: ...

  def load(self, input: ByteBuffer, WorldVersion: int, IS_DEBUG_SAVE: bool) -> None: ...

  def loadChange(self, change: str, bb: ByteBuffer) -> None: ...

  def removeFromWorld(self) -> None: ...

  def render(self, x: float, y: float, z: float, col: ColorInfo, bDoChild: bool, bWallLightingPass: bool, shader: Shader) -> None: ...

  def save(self, output: ByteBuffer, IS_DEBUG_SAVE: bool) -> None: ...

  def saveChange(self, change: str, tbl: KahluaTable, bb: ByteBuffer) -> None: ...

  def setFuelAmount(self, units: int) -> None: ...

  def setLit(self, lit: bool) -> None: ...

  def update(self) -> None: ...

  def useFuel(self, amount: int) -> int: ...

  @overload
  def __init__(self, cell: IsoCell): ...
  @overload
  def __init__(self, cell: IsoCell, sq: IsoGridSquare, gid: IsoSprite): ...


class IsoGenerator(IsoObject):

  def addToWorld(self) -> None: ...

  def failToStart(self) -> None: ...

  def getCondition(self) -> int: ...

  def getFuel(self) -> float: ...

  def getItemsPowered(self) -> ArrayList[str]: ...

  def getObjectName(self) -> str: ...

  def getTotalPowerUsing(self) -> float: ...

  def isActivated(self) -> bool: ...

  def isConnected(self) -> bool: ...

  def load(self, input: ByteBuffer, WorldVersion: int, IS_DEBUG_SAVE: bool) -> None: ...

  def remove(self) -> None: ...

  def removeFromWorld(self) -> None: ...

  def save(self, output: ByteBuffer, IS_DEBUG_SAVE: bool) -> None: ...

  def setActivated(self, activated: bool) -> None: ...

  def setCondition(self, condition: int) -> None: ...

  def setConnected(self, connected: bool) -> None: ...

  def setFuel(self, fuel: float) -> None: ...

  def setInfoFromItem(self, item: InventoryItem) -> None: ...

  def setSurroundingElectricity(self) -> None: ...

  def setTotalPowerUsing(self, totalPowerUsing: float) -> None: ...

  def sync(self, fuel: float, condition: int, connected: bool, activated: bool) -> None: ...

  def syncIsoObject(self, bRemote: bool, val: int, source: UdpConnection, bb: ByteBuffer) -> None: ...

  def syncIsoObjectSend(self, b: ByteBufferWriter) -> None: ...

  def update(self) -> None: ...

  @staticmethod
  def Reset() -> None: ...

  @staticmethod
  def chunkLoaded(chunk: IsoChunk) -> None: ...

  @staticmethod
  def isPoweringSquare(generatorX: int, generatorY: int, generatorZ: int, x: int, y: int, z: int) -> bool: ...

  @staticmethod
  def updateGenerator(sq: IsoGridSquare) -> None: ...

  @staticmethod
  def updateSurroundingNow() -> None: ...

  @overload
  def __init__(self, cell: IsoCell):
    self.activated: bool

    self.condition: int

    self.connected: bool

    self.fuel: float

  @overload
  def __init__(self, item: InventoryItem, cell: IsoCell, sq: IsoGridSquare): ...
  @overload
  def __init__(self, item: InventoryItem, cell: IsoCell, sq: IsoGridSquare, remote: bool): ...


class IsoJukebox(IsoObject):

  def SetPlaying(self, ShouldPlay: bool) -> None: ...

  def addToWorld(self) -> None: ...

  def getObjectName(self) -> str: ...

  def onMouseLeftClick(self, x: int, y: int) -> bool: ...

  def update(self) -> None: ...

  @overload
  def __init__(self, cell: IsoCell): ...
  @overload
  def __init__(self, cell: IsoCell, sq: IsoGridSquare, gid: str): ...
  @overload
  def __init__(self, cell: IsoCell, sq: IsoGridSquare, spr: IsoSprite): ...


class IsoLightSwitch(IsoObject):

  def addBattery(self, chr: IsoGameCharacter, battery: InventoryItem) -> None: ...

  def addLightBulb(self, chr: IsoGameCharacter, bulb: InventoryItem) -> None: ...

  def addLightSourceFromSprite(self) -> None: ...

  def addToWorld(self) -> None: ...

  def canSwitchLight(self) -> bool: ...

  def getBulbItem(self) -> str: ...

  def getCanBeModified(self) -> bool: ...

  def getCustomSettingsFromItem(self, item: InventoryItem) -> None: ...

  def getDelta(self) -> float: ...

  def getHasBattery(self) -> bool: ...

  def getLights(self) -> ArrayList[IsoLightSource]: ...

  def getObjectName(self) -> str: ...

  def getPower(self) -> float: ...

  def getPrimaryB(self) -> float: ...

  def getPrimaryG(self) -> float: ...

  def getPrimaryR(self) -> float: ...

  def getUseBattery(self) -> bool: ...

  def hasLightBulb(self) -> bool: ...

  def isActivated(self) -> bool: ...

  def load(self, input: ByteBuffer, WorldVersion: int, IS_DEBUG_SAVE: bool) -> None: ...

  def onMouseLeftClick(self, x: int, y: int) -> bool: ...

  def receiveSyncCustomizedSettings(self, bb: ByteBuffer, connection: UdpConnection) -> None: ...

  def removeBattery(self, chr: IsoGameCharacter) -> DrainableComboItem: ...

  def removeFromWorld(self) -> None: ...

  def removeLightBulb(self, chr: IsoGameCharacter) -> InventoryItem: ...

  def save(self, output: ByteBuffer, IS_DEBUG_SAVE: bool) -> None: ...

  @overload
  def setActive(self, active: bool) -> bool: ...

  @overload
  def setActive(self, active: bool, setActiveBoolOnly: bool) -> bool: ...

  @overload
  def setActive(self, active: bool, setActiveBoolOnly: bool, ignoreSwitchCheck: bool) -> bool: ...

  def setBulbItemRaw(self, item: str) -> None: ...

  def setCustomSettingsToItem(self, item: InventoryItem) -> None: ...

  def setDelta(self, delta: float) -> None: ...

  def setHasBatteryRaw(self, b: bool) -> None: ...

  def setPower(self, power: float) -> None: ...

  def setPrimaryB(self, b: float) -> None: ...

  def setPrimaryG(self, g: float) -> None: ...

  def setPrimaryR(self, r: float) -> None: ...

  def setUseBattery(self, b: bool) -> None: ...

  def switchLight(self, Activated: bool) -> None: ...

  def syncCustomizedSettings(self, source: UdpConnection) -> None: ...

  @overload
  def syncIsoObject(self, bRemote: bool, val: int, source: UdpConnection) -> None: ...

  @overload
  def syncIsoObject(self, bRemote: bool, val: int, source: UdpConnection, bb: ByteBuffer) -> None: ...

  def syncIsoObjectSend(self, b: ByteBufferWriter) -> None: ...

  def toggle(self) -> bool: ...

  def update(self) -> None: ...

  @staticmethod
  def chunkLoaded(chunk: IsoChunk) -> None: ...

  @overload
  def __init__(self, cell: IsoCell):
    self.bstreetlight: bool

    self.lightroom: bool

    self.lights: ArrayList[IsoLightSource]

    self.roomid: int

  @overload
  def __init__(self, cell: IsoCell, sq: IsoGridSquare, gid: IsoSprite, RoomID: int): ...


class IsoMannequin(IsoObject):

  def addToWorld(self) -> None: ...

  def checkClothing(self, removedItem: InventoryItem) -> None: ...

  def getAnimSetName(self) -> str: ...

  def getAnimStateName(self) -> str: ...

  def getCustomSettingsFromItem(self, item: InventoryItem) -> None: ...

  @overload
  def getHumanVisual(self) -> HumanVisual: ...

  @overload
  def getHumanVisual(self) -> HumanVisual: ...

  @overload
  def getItemVisuals(self, itemVisuals: ItemVisuals) -> None: ...

  @overload
  def getItemVisuals(self, itemVisuals: ItemVisuals) -> None: ...

  def getMannequinScriptName(self) -> str: ...

  def getObjectName(self) -> str: ...

  def getPose(self) -> str: ...

  def getVariables(self, vars: Map[str, str]) -> None: ...

  @overload
  def isFemale(self) -> bool: ...

  @overload
  def isFemale(self) -> bool: ...

  def isItemAllowedInContainer(self, container: ItemContainer, item: InventoryItem) -> bool: ...

  @overload
  def isSkeleton(self) -> bool: ...

  @overload
  def isSkeleton(self) -> bool: ...

  @overload
  def isZombie(self) -> bool: ...

  @overload
  def isZombie(self) -> bool: ...

  def load(self, input: ByteBuffer, WorldVersion: int, IS_DEBUG_SAVE: bool) -> None: ...

  def loadChange(self, change: str, bb: ByteBuffer) -> None: ...

  def loadState(self, input: ByteBuffer) -> None: ...

  def render(self, x: float, y: float, z: float, col: ColorInfo, bDoChild: bool, bWallLightingPass: bool, shader: Shader) -> None: ...

  def renderFxMask(self, x: float, y: float, z: float, bDoAttached: bool) -> None: ...

  def rotate(self, newDir: IsoDirections) -> None: ...

  def save(self, output: ByteBuffer, IS_DEBUG_SAVE: bool) -> None: ...

  def saveChange(self, change: str, tbl: KahluaTable, bb: ByteBuffer) -> None: ...

  def saveState(self, output: ByteBuffer) -> None: ...

  def setCustomSettingsToItem(self, item: InventoryItem) -> None: ...

  def setMannequinScriptName(self, name: str) -> None: ...

  def setRenderDirection(self, newDir: IsoDirections) -> None: ...

  def wearItem(self, item: InventoryItem, chr: IsoGameCharacter) -> None: ...

  @staticmethod
  def getDirectionFromItem(item: Moveable, playerIndex: int) -> IsoDirections: ...

  @staticmethod
  def isMannequinSprite(sprite: IsoSprite) -> bool: ...

  @staticmethod
  def renderMoveableItem(item: Moveable, x: int, y: int, z: int, dir: IsoDirections) -> None: ...

  @staticmethod
  def renderMoveableObject(mannequin: IsoMannequin, x: int, y: int, z: int, dir: IsoDirections) -> None: ...

  @overload
  def __init__(self, cell: IsoCell): ...
  @overload
  def __init__(self, cell: IsoCell, square: IsoGridSquare, sprite: IsoSprite): ...

  class PerPlayer: ...

  class Drawer(TextureDraw.GenericDrawer):

    def init(self, arg0: float, arg1: float, arg2: float) -> None: ...

    def postRender(self) -> None: ...

    def render(self) -> None: ...

  class MannequinZone(IsoMetaGrid.Zone):

    def __init__(self, name: str, type: str, x: int, y: int, z: int, w: int, h: int, properties: KahluaTable):
      self.bfemale: int
      self.dir: IsoDirections
      self.mannequinscript: str
      self.outfit: str
      self.pose: str
      self.skin: str

  class StaticPerPlayer: ...


class IsoMolotovCocktail(IsoPhysicsObject):

  def collideCharacter(self) -> None: ...

  def collideGround(self) -> None: ...

  def collideWall(self) -> None: ...

  def getObjectName(self) -> str: ...

  def render(self, x: float, y: float, z: float, info: ColorInfo, bDoAttached: bool, bWallLightingPass: bool, shader: Shader) -> None: ...

  def update(self) -> None: ...

  @overload
  def __init__(self, cell: IsoCell): ...
  @overload
  def __init__(self, cell: IsoCell, x: float, y: float, z: float, xvel: float, yvel: float, weapon: HandWeapon, character: IsoGameCharacter): ...


class IsoRadio(IsoWaveSignal):

  def getObjectName(self) -> str: ...

  @overload
  def __init__(self, cell: IsoCell): ...
  @overload
  def __init__(self, cell: IsoCell, sq: IsoGridSquare, spr: IsoSprite): ...


class IsoRainSplash(IsoObject):

  def ChangeTintMod(self, NewTintMod: ColorInfo) -> None: ...

  def HasTooltip(self) -> bool: ...

  def Serialize(self) -> bool: ...

  def TestCollide(self, obj: IsoMovingObject, PassedObjectSquare: IsoGridSquare) -> bool: ...

  def TestVision(self, arg0: IsoGridSquare, to: IsoGridSquare) -> IsoObject.VisionResult: ...

  def getObjectName(self) -> str: ...

  def update(self) -> None: ...

  def __init__(self, cell: IsoCell, gridSquare: IsoGridSquare):
    self.age: int


class IsoRaindrop(IsoObject):

  def ChangeTintMod(self, NewTintMod: ColorInfo) -> None: ...

  def HasTooltip(self) -> bool: ...

  def Serialize(self) -> bool: ...

  def TestCollide(self, obj: IsoMovingObject, PassedObjectSquare: IsoGridSquare) -> bool: ...

  def TestVision(self, arg0: IsoGridSquare, to: IsoGridSquare) -> IsoObject.VisionResult: ...

  def getObjectName(self) -> str: ...

  def update(self) -> None: ...

  def __init__(self, cell: IsoCell, gridSquare: IsoGridSquare, CanSee: bool):
    self.animspriteindex: int
    self.gravmod: float
    self.life: int
    self.offsety: float
    self.splashy: float
    self.vel_y: float


class IsoStackedWasherDryer(IsoObject):

  def addToWorld(self) -> None: ...

  def createContainersFromSpriteProperties(self) -> None: ...

  def getObjectName(self) -> str: ...

  def isDryerActivated(self) -> bool: ...

  def isItemAllowedInContainer(self, container: ItemContainer, item: InventoryItem) -> bool: ...

  def isRemoveItemAllowedFromContainer(self, container: ItemContainer, item: InventoryItem) -> bool: ...

  def isWasherActivated(self) -> bool: ...

  def load(self, input: ByteBuffer, WorldVersion: int, IS_DEBUG_SAVE: bool) -> None: ...

  def loadChange(self, change: str, bb: ByteBuffer) -> None: ...

  def removeFromWorld(self) -> None: ...

  def save(self, output: ByteBuffer, IS_DEBUG_SAVE: bool) -> None: ...

  def saveChange(self, change: str, tbl: KahluaTable, bb: ByteBuffer) -> None: ...

  def setDryerActivated(self, activated: bool) -> None: ...

  def setWasherActivated(self, activated: bool) -> None: ...

  def update(self) -> None: ...

  @overload
  def __init__(self, cell: IsoCell): ...
  @overload
  def __init__(self, cell: IsoCell, sq: IsoGridSquare, gid: IsoSprite): ...


class IsoStove(IsoObject):

  @overload
  def Activated(self) -> bool: ...

  @overload
  def Activated(self) -> bool: ...

  @overload
  def Toggle(self) -> None: ...

  @overload
  def Toggle(self) -> None: ...

  def addToWorld(self) -> None: ...

  @overload
  def getActivatableType(self) -> str: ...

  @overload
  def getActivatableType(self) -> str: ...

  def getCurrentTemperature(self) -> float: ...

  def getMaxTemperature(self) -> float: ...

  def getObjectName(self) -> str: ...

  def getTimer(self) -> int: ...

  def isBroken(self) -> bool: ...

  def isMicrowave(self) -> bool: ...

  def isRunningFor(self) -> int: ...

  def isTemperatureChanging(self) -> bool: ...

  def load(self, input: ByteBuffer, WorldVersion: int, IS_DEBUG_SAVE: bool) -> None: ...

  def save(self, output: ByteBuffer, IS_DEBUG_SAVE: bool) -> None: ...

  def setActivated(self, b: bool) -> None: ...

  def setBroken(self, broken: bool) -> None: ...

  def setMaxTemperature(self, maxTemperature: float) -> None: ...

  def setTimer(self, seconds: int) -> None: ...

  def sync(self) -> None: ...

  def syncIsoObject(self, bRemote: bool, val: int, source: UdpConnection, bb: ByteBuffer) -> None: ...

  def syncIsoObjectSend(self, b: ByteBufferWriter) -> None: ...

  def syncSpriteGridObjects(self, toggle: bool, network: bool) -> None: ...

  def update(self) -> None: ...

  @overload
  def __init__(self, cell: IsoCell): ...
  @overload
  def __init__(self, cell: IsoCell, sq: IsoGridSquare, gid: IsoSprite): ...


class IsoTelevision(IsoWaveSignal):

  def addTvScreenSprite(self, sprite: IsoSprite) -> None: ...

  def clearTvScreenSprites(self) -> None: ...

  def getObjectName(self) -> str: ...

  def isFacing(self, player: IsoPlayer) -> bool: ...

  def load(self, input: ByteBuffer, WorldVersion: int, IS_DEBUG_SAVE: bool) -> None: ...

  def removeTvScreenSprite(self, sprite: IsoSprite) -> None: ...

  def renderlast(self) -> None: ...

  def save(self, output: ByteBuffer, IS_DEBUG_SAVE: bool) -> None: ...

  def update(self) -> None: ...

  @overload
  def __init__(self, cell: IsoCell): ...
  @overload
  def __init__(self, cell: IsoCell, sq: IsoGridSquare, spr: IsoSprite): ...

  class Screens(Enum):

    ALTERNATESCREEN: IsoTelevision.Screens

    DEFAULTSCREEN: IsoTelevision.Screens

    OFFSCREEN: IsoTelevision.Screens

    TESTSCREEN: IsoTelevision.Screens

    @staticmethod
    def valueOf(arg0: str) -> IsoTelevision.Screens: ...

    @staticmethod
    def values() -> list[IsoTelevision.Screens]: ...


class IsoThumpable(IsoObject):

  tempo: Vector2

  def HasCurtains(self) -> IsoCurtain: ...

  def IsOpen(self) -> bool: ...

  def IsStrengthenedByPushedItems(self) -> bool: ...

  def TestCollide(self, obj: IsoMovingObject, arg1: IsoGridSquare, to: IsoGridSquare) -> bool: ...

  def TestPathfindCollide(self, obj: IsoMovingObject, arg1: IsoGridSquare, to: IsoGridSquare) -> bool: ...

  def TestVision(self, arg0: IsoGridSquare, to: IsoGridSquare) -> IsoObject.VisionResult: ...

  @overload
  def Thump(self, thumper: IsoMovingObject) -> None: ...

  @overload
  def Thump(self, thumper: IsoMovingObject) -> None: ...

  def ToggleDoor(self, chr: IsoGameCharacter) -> None: ...

  def ToggleDoorActual(self, chr: IsoGameCharacter) -> None: ...

  def ToggleDoorSilent(self) -> None: ...

  @overload
  def WeaponHit(self, owner: IsoGameCharacter, weapon: HandWeapon) -> None: ...

  @overload
  def WeaponHit(self, owner: IsoGameCharacter, weapon: HandWeapon) -> None: ...

  def addSheet(self, chr: IsoGameCharacter) -> None: ...

  def addSheetRope(self, player: IsoPlayer, itemType: str) -> bool: ...

  def addToWorld(self) -> None: ...

  def canAddSheetRope(self) -> bool: ...

  def canBeLockByPadlock(self) -> bool: ...

  def canBePlastered(self) -> bool: ...

  def canClimbOver(self, chr: IsoGameCharacter) -> bool: ...

  def canClimbThrough(self, chr: IsoGameCharacter) -> bool: ...

  def countAddSheetRope(self) -> int: ...

  def createLightSource(self, radius: int, offsetX: int, offsetY: int, offsetZ: int, life: int, lightSourceFuel: str, baseItem: InventoryItem, chr: IsoGameCharacter) -> None: ...

  def destroy(self) -> None: ...

  def getAddSheetSquare(self, chr: IsoGameCharacter) -> IsoGridSquare: ...

  @overload
  def getBarricadeForCharacter(self, chr: IsoGameCharacter) -> IsoBarricade: ...

  @overload
  def getBarricadeForCharacter(self, chr: IsoGameCharacter) -> IsoBarricade: ...

  @overload
  def getBarricadeOnOppositeSquare(self) -> IsoBarricade: ...

  @overload
  def getBarricadeOnOppositeSquare(self) -> IsoBarricade: ...

  @overload
  def getBarricadeOnSameSquare(self) -> IsoBarricade: ...

  @overload
  def getBarricadeOnSameSquare(self) -> IsoBarricade: ...

  @overload
  def getBarricadeOppositeCharacter(self, chr: IsoGameCharacter) -> IsoBarricade: ...

  @overload
  def getBarricadeOppositeCharacter(self, chr: IsoGameCharacter) -> IsoBarricade: ...

  def getBreakSound(self) -> str: ...

  def getCanBarricade(self) -> bool: ...

  def getCrossSpeed(self) -> float: ...

  def getFacingPosition(self, pos: Vector2) -> Vector2: ...

  def getHealth(self) -> int: ...

  def getIndoorSquare(self) -> IsoGridSquare: ...

  def getInsideSquare(self) -> IsoGridSquare: ...

  def getKeyId(self) -> int: ...

  def getLifeDelta(self) -> float: ...

  def getLifeLeft(self) -> float: ...

  def getLightSource(self) -> IsoLightSource: ...

  def getLightSourceFuel(self) -> str: ...

  def getLightSourceLife(self) -> int: ...

  def getLightSourceRadius(self) -> int: ...

  def getLightSourceXOffset(self) -> int: ...

  def getLightSourceYOffset(self) -> int: ...

  def getLockedByCode(self) -> int: ...

  def getMaxHealth(self) -> int: ...

  def getModData(self) -> KahluaTable: ...

  @overload
  def getNorth(self) -> bool: ...

  @overload
  def getNorth(self) -> bool: ...

  def getObjectName(self) -> str: ...

  def getOpenSprite(self) -> IsoSprite: ...

  @overload
  def getOppositeSquare(self) -> IsoGridSquare: ...

  @overload
  def getOppositeSquare(self) -> IsoGridSquare: ...

  def getOtherSideOfDoor(self, chr: IsoGameCharacter) -> IsoGridSquare: ...

  def getRenderEffectMaster(self) -> IsoObject: ...

  def getSpriteEdge(self, ignoreOpen: bool) -> IsoDirections: ...

  def getSquare(self) -> IsoGridSquare: ...

  def getTable(self) -> KahluaTable: ...

  @overload
  def getThumpCondition(self) -> float: ...

  @overload
  def getThumpCondition(self) -> float: ...

  def getThumpDmg(self) -> int: ...

  def getThumpSound(self) -> str: ...

  @overload
  def getThumpableFor(self, chr: IsoGameCharacter) -> Thumpable: ...

  @overload
  def getThumpableFor(self, chr: IsoGameCharacter) -> Thumpable: ...

  def hasModData(self) -> bool: ...

  def haveFuel(self) -> bool: ...

  def haveSheetRope(self) -> bool: ...

  def insertNewFuel(self, item: InventoryItem, chr: IsoGameCharacter) -> InventoryItem: ...

  def isAdjacentToSquare(self, square2: IsoGridSquare) -> bool: ...

  @overload
  def isBarricadeAllowed(self) -> bool: ...

  @overload
  def isBarricadeAllowed(self) -> bool: ...

  @overload
  def isBarricaded(self) -> bool: ...

  @overload
  def isBarricaded(self) -> bool: ...

  def isBlockAllTheSquare(self) -> bool: ...

  def isCanPassThrough(self) -> bool: ...

  def isCorner(self) -> bool: ...

  @overload
  def isDestroyed(self) -> bool: ...

  @overload
  def isDestroyed(self) -> bool: ...

  def isDismantable(self) -> bool: ...

  def isDoor(self) -> bool: ...

  def isDoorFrame(self) -> bool: ...

  def isFloor(self) -> bool: ...

  def isHoppable(self) -> bool: ...

  def isLightSourceOn(self) -> bool: ...

  def isLocked(self) -> bool: ...

  def isLockedByKey(self) -> bool: ...

  def isLockedByPadlock(self) -> bool: ...

  def isLockedToCharacter(self, chr: IsoGameCharacter) -> bool: ...

  def isObstructed(self) -> bool: ...

  def isPaintable(self) -> bool: ...

  def isStairs(self) -> bool: ...

  def isThumpable(self) -> bool: ...

  def isWindow(self) -> bool: ...

  def load(self, input: ByteBuffer, WorldVersion: int, IS_DEBUG_SAVE: bool) -> None: ...

  def loadChange(self, change: str, bb: ByteBuffer) -> None: ...

  def onMouseLeftClick(self, x: int, y: int) -> bool: ...

  def removeCurrentFuel(self, chr: IsoGameCharacter) -> InventoryItem: ...

  def removeFromWorld(self) -> None: ...

  def removeSheetRope(self, player: IsoPlayer) -> bool: ...

  def save(self, output: ByteBuffer, IS_DEBUG_SAVE: bool) -> None: ...

  def saveChange(self, change: str, tbl: KahluaTable, bb: ByteBuffer) -> None: ...

  def setBlockAllTheSquare(self, blockAllTheSquare: bool) -> None: ...

  def setBreakSound(self, pBreakSound: str) -> None: ...

  def setCanBarricade(self, pCanBarricade: bool) -> None: ...

  def setCanBeLockByPadlock(self, canBeLockByPadlock: bool) -> None: ...

  def setCanBePlastered(self, canBePlastered: bool) -> None: ...

  def setCanPassThrough(self, pCanPassThrough: bool) -> None: ...

  def setClosedSprite(self, sprite: IsoSprite) -> None: ...

  def setCorner(self, pCorner: bool) -> None: ...

  def setCrossSpeed(self, pCrossSpeed: float) -> None: ...

  def setHaveFuel(self, haveFuel: bool) -> None: ...

  def setHealth(self, health: int) -> None: ...

  def setHoppable(self, isHoppable: bool) -> None: ...

  def setIsContainer(self, pIsContainer: bool) -> None: ...

  def setIsDismantable(self, dismantable: bool) -> None: ...

  @overload
  def setIsDoor(self, pIsDoor: bool) -> None: ...

  @overload
  def setIsDoor(self, pIsDoor: Boolean) -> None: ...

  def setIsDoorFrame(self, pIsDoorFrame: bool) -> None: ...

  def setIsFloor(self, pIsFloor: bool) -> None: ...

  def setIsHoppable(self, isHoppable: bool) -> None: ...

  def setIsLocked(self, lock: bool) -> None: ...

  def setIsStairs(self, pStairs: bool) -> None: ...

  def setIsThumpable(self, thumpable: bool) -> None: ...

  @overload
  def setKeyId(self, keyId: int) -> None: ...

  @overload
  def setKeyId(self, keyId: int, doNetwork: bool) -> None: ...

  def setLifeDelta(self, lifeDelta: float) -> None: ...

  def setLifeLeft(self, lifeLeft: float) -> None: ...

  def setLightSource(self, lightSource: IsoLightSource) -> None: ...

  def setLightSourceFuel(self, lightSourceFuel: str) -> None: ...

  def setLightSourceLife(self, lightSourceLife: int) -> None: ...

  def setLightSourceOn(self, lightSourceOn: bool) -> None: ...

  def setLightSourceRadius(self, lightSourceRadius: int) -> None: ...

  def setLightSourceXOffset(self, lightSourceXOffset: int) -> None: ...

  def setLightSourceYOffset(self, lightSourceYOffset: int) -> None: ...

  def setLockedByCode(self, lockedByCode: int) -> None: ...

  def setLockedByKey(self, lockedByKey: bool) -> None: ...

  def setLockedByPadlock(self, lockedByPadlock: bool) -> None: ...

  def setMaxHealth(self, maxHealth: int) -> None: ...

  def setModData(self, modData: KahluaTable) -> None: ...

  def setOpenSprite(self, sprite: IsoSprite) -> None: ...

  def setPaintable(self, paintable: bool) -> None: ...

  def setSprite(self, sprite: str) -> None: ...

  def setSpriteFromName(self, name: str) -> None: ...

  def setTable(self, table: KahluaTable) -> None: ...

  def setThumpDmg(self, pThumpDmg: Integer) -> None: ...

  def setThumpSound(self, thumpSound: str) -> None: ...

  def syncIsoObject(self, bRemote: bool, val: int, source: UdpConnection, bb: ByteBuffer) -> None: ...

  def syncIsoObjectSend(self, b: ByteBufferWriter) -> None: ...

  def syncIsoThumpable(self) -> None: ...

  def toggleLightSource(self, toggle: bool) -> None: ...

  def update(self) -> None: ...

  @overload
  def __init__(self, cell: IsoCell):
    self.breaksound: str

    self.canpassthrough: bool

    self.health: int

    self.isdoor: Boolean

    self.isdoorframe: Boolean

    self.keyid: int

    self.locked: bool

    self.lockedbycode: int

    self.lockedbypadlock: bool

    self.maxhealth: int

    self.north: bool

    self.oldnumplanks: int

    self.open: bool

    self.pushedmaxstrength: int

    self.pushedstrength: int

    self.thumpsound: str

  @overload
  def __init__(self, cell: IsoCell, gridSquare: IsoGridSquare, sprite: str, north: bool, table: KahluaTable): ...
  @overload
  def __init__(self, cell: IsoCell, gridSquare: IsoGridSquare, closedSprite: str, openSprite: str, north: bool, table: KahluaTable): ...


class IsoTrap(IsoObject):

  def addToWorld(self) -> None: ...

  def getCountDownSound(self) -> str: ...

  def getExplosionPower(self) -> int: ...

  def getExplosionRange(self) -> int: ...

  def getExplosionSound(self) -> str: ...

  def getExtraDamage(self) -> float: ...

  def getFirePower(self) -> int: ...

  def getFireRange(self) -> int: ...

  def getItem(self) -> InventoryItem: ...

  def getNoiseDuration(self) -> int: ...

  def getNoiseRange(self) -> int: ...

  def getObjectName(self) -> str: ...

  def getRemoteControlID(self) -> int: ...

  def getSensorRange(self) -> int: ...

  def getSmokeRange(self) -> int: ...

  def getTimerBeforeExplosion(self) -> int: ...

  def isInstantExplosion(self) -> bool: ...

  def load(self, input: ByteBuffer, WorldVersion: int, IS_DEBUG_SAVE: bool) -> None: ...

  def playExplosionSound(self) -> None: ...

  def removeFromWorld(self) -> None: ...

  def render(self, x: float, y: float, z: float, col: ColorInfo, bDoChild: bool, bWallLightingPass: bool, shader: Shader) -> None: ...

  def save(self, output: ByteBuffer, IS_DEBUG_SAVE: bool) -> None: ...

  def setCountDownSound(self, sound: str) -> None: ...

  def setExplosionPower(self, explosionPower: int) -> None: ...

  def setExplosionRange(self, explosionRange: int) -> None: ...

  def setExplosionSound(self, explosionSound: str) -> None: ...

  def setExtraDamage(self, extraDamage: float) -> None: ...

  def setFirePower(self, firePower: int) -> None: ...

  def setFireRange(self, fireRange: int) -> None: ...

  def setNoiseDuration(self, noiseDuration: int) -> None: ...

  def setNoiseRange(self, noiseRange: int) -> None: ...

  def setRemoteControlID(self, remoteControlID: int) -> None: ...

  def setSensorRange(self, sensorRange: int) -> None: ...

  def setSmokeRange(self, smokeRange: int) -> None: ...

  def setTimerBeforeExplosion(self, timerBeforeExplosion: int) -> None: ...

  def triggerExplosion(self, sensor: bool) -> None: ...

  def update(self) -> None: ...

  @staticmethod
  def triggerRemote(player: IsoPlayer, remoteID: int, range: int) -> None: ...

  @overload
  def __init__(self, cell: IsoCell): ...
  @overload
  def __init__(self, weapon: HandWeapon, cell: IsoCell, sq: IsoGridSquare): ...

  class ExplosionMode(Enum):

    Explosion: IsoTrap.ExplosionMode

    Fire: IsoTrap.ExplosionMode

    Sensor: IsoTrap.ExplosionMode

    Smoke: IsoTrap.ExplosionMode

    @staticmethod
    def valueOf(arg0: str) -> IsoTrap.ExplosionMode: ...

    @staticmethod
    def values() -> list[IsoTrap.ExplosionMode]: ...


class IsoTree(IsoObject):

  MAX_SIZE: int

  def Damage(self, amount: float) -> None: ...

  def HitByVehicle(self, vehicle: BaseVehicle, amount: float) -> None: ...

  def WeaponHit(self, owner: IsoGameCharacter, weapon: HandWeapon) -> None: ...

  def getHealth(self) -> int: ...

  def getMaxHealth(self) -> int: ...

  def getObjectName(self) -> str: ...

  def getSize(self) -> int: ...

  def getSlowFactor(self, chr: IsoMovingObject) -> float: ...

  def initTree(self) -> None: ...

  def isMaskClicked(self, x: int, y: int, flip: bool) -> bool: ...

  def load(self, input: ByteBuffer, WorldVersion: int, IS_DEBUG_SAVE: bool) -> None: ...

  def render(self, x: float, y: float, z: float, col: ColorInfo, bDoAttached: bool, bWallLightingPass: bool, shader: Shader) -> None: ...

  def reset(self) -> None: ...

  def save(self, output: ByteBuffer, IS_DEBUG_SAVE: bool) -> None: ...

  def setHealth(self, health: int) -> None: ...

  def setSprite(self, sprite: IsoSprite) -> None: ...

  @staticmethod
  def getNew() -> IsoTree: ...

  @staticmethod
  def renderChopTreeIndicators() -> None: ...

  @staticmethod
  def setChopTreeCursorLocation(playerIndex: int, x: int, y: int, z: int) -> None: ...

  @overload
  def __init__(self):
    self.brenderflag: bool

    self.damage: int

    self.fadealpha: float

    self.logyield: int

    self.size: int

  @overload
  def __init__(self, cell: IsoCell): ...
  @overload
  def __init__(self, sq: IsoGridSquare, gid: str): ...
  @overload
  def __init__(self, sq: IsoGridSquare, gid: IsoSprite): ...

  class TreeShader:

    instance: IsoTree.TreeShader

    def StartShader(self) -> bool: ...

    def initShader(self) -> None: ...

    def setOutlineColor(self, r: float, g: float, b: float, a: float) -> None: ...

    def setStepSize(self, stepSize: float, texWidth: int, texHeight: int) -> None: ...

    def __init__(self): ...


class IsoWaveSignal(IsoObject):

  @overload
  def AddDeviceText(self, line: str, r: float, g: float, b: float, guid: str, codes: str, distance: int) -> None: ...

  @overload
  def AddDeviceText(self, line: str, r: float, g: float, b: float, guid: str, codes: str, distance: int) -> None: ...

  @overload
  def AddDeviceText(self, line: str, r: int, g: int, b: int, guid: str, codes: str, distance: int) -> None: ...

  @overload
  def AddDeviceText(self, line: str, r: float, g: float, b: float, guid: str, codes: str, distance: int, attractZombies: bool) -> None: ...

  @overload
  def AddDeviceText(self, line: str, r: int, g: int, b: int, guid: str, codes: str, distance: int, attractZombies: bool) -> None: ...

  @overload
  def AddDeviceText(self, arg0: IsoPlayer, arg1: str, arg2: float, arg3: float, arg4: float, arg5: str, arg6: str, arg7: int) -> None: ...

  @overload
  def HasPlayerInRange(self) -> bool: ...

  @overload
  def HasPlayerInRange(self) -> bool: ...

  @overload
  def IsSpeaking(self) -> bool: ...

  @overload
  def IsSpeaking(self) -> bool: ...

  @overload
  def Say(self, line: str) -> None: ...

  @overload
  def Say(self, line: str) -> None: ...

  def addToWorld(self) -> None: ...

  def cloneDeviceDataFromItem(self, itemfull: str) -> DeviceData: ...

  def getChatElement(self) -> ChatElement: ...

  @overload
  def getDelta(self) -> float: ...

  @overload
  def getDelta(self) -> float: ...

  @overload
  def getDeviceData(self) -> DeviceData: ...

  @overload
  def getDeviceData(self) -> DeviceData: ...

  @overload
  def getSayLine(self) -> str: ...

  @overload
  def getSayLine(self) -> str: ...

  @overload
  def getSquare(self) -> IsoGridSquare: ...

  @overload
  def getSquare(self) -> IsoGridSquare: ...

  @overload
  def getTalkerType(self) -> str: ...

  @overload
  def getTalkerType(self) -> str: ...

  @overload
  def getX(self) -> float: ...

  @overload
  def getX(self) -> float: ...

  @overload
  def getY(self) -> float: ...

  @overload
  def getY(self) -> float: ...

  @overload
  def getZ(self) -> float: ...

  @overload
  def getZ(self) -> float: ...

  def hasChatToDisplay(self) -> bool: ...

  def load(self, input: ByteBuffer, WorldVersion: int, IS_DEBUG_SAVE: bool) -> None: ...

  def loadState(self, bb: ByteBuffer) -> None: ...

  def removeFromSquare(self) -> None: ...

  def removeFromWorld(self) -> None: ...

  def renderlast(self) -> None: ...

  def renderlastold2(self) -> None: ...

  def save(self, output: ByteBuffer, IS_DEBUG_SAVE: bool) -> None: ...

  def saveState(self, bb: ByteBuffer) -> None: ...

  @overload
  def setDelta(self, delta: float) -> None: ...

  @overload
  def setDelta(self, delta: float) -> None: ...

  @overload
  def setDeviceData(self, data: DeviceData) -> None: ...

  @overload
  def setDeviceData(self, data: DeviceData) -> None: ...

  def setTalkerType(self, type: str) -> None: ...

  def update(self) -> None: ...

  @staticmethod
  def Reset() -> None: ...

  @overload
  def __init__(self, cell: IsoCell): ...
  @overload
  def __init__(self, cell: IsoCell, sq: IsoGridSquare, spr: IsoSprite): ...


class IsoWheelieBin(IsoPushableObject):

  def getObjectName(self) -> str: ...

  def getWeight(self, x: float, y: float) -> float: ...

  def update(self) -> None: ...

  @overload
  def __init__(self, cell: IsoCell): ...
  @overload
  def __init__(self, cell: IsoCell, x: int, y: int, z: int): ...


class IsoWindow(IsoObject):

  def AttackObject(self, owner: IsoGameCharacter) -> None: ...

  @overload
  def Damage(self, amount: float) -> None: ...

  @overload
  def Damage(self, amount: float, isZombie: bool) -> None: ...

  @overload
  def Damage(self, amount: float, chr: IsoMovingObject) -> None: ...

  def HasCurtains(self) -> IsoCurtain: ...

  def IsOpen(self) -> bool: ...

  def TestCollide(self, obj: IsoMovingObject, arg1: IsoGridSquare, to: IsoGridSquare) -> bool: ...

  def TestVision(self, arg0: IsoGridSquare, to: IsoGridSquare) -> IsoObject.VisionResult: ...

  @overload
  def Thump(self, thumper: IsoMovingObject) -> None: ...

  @overload
  def Thump(self, thumper: IsoMovingObject) -> None: ...

  def ToggleWindow(self, chr: IsoGameCharacter) -> None: ...

  @overload
  def WeaponHit(self, owner: IsoGameCharacter, weapon: HandWeapon) -> None: ...

  @overload
  def WeaponHit(self, owner: IsoGameCharacter, weapon: HandWeapon) -> None: ...

  def addBarricadesDebug(self, numPlanks: int, metal: bool) -> IsoBarricade: ...

  @overload
  def addBrokenGlass(self, onOppositeSquare: bool) -> None: ...

  @overload
  def addBrokenGlass(self, chr: IsoMovingObject) -> None: ...

  def addRandomBarricades(self) -> None: ...

  def addSheet(self, chr: IsoGameCharacter) -> None: ...

  def addSheetRope(self, player: IsoPlayer, itemType: str) -> bool: ...

  def addToWorld(self) -> None: ...

  def canAddSheetRope(self) -> bool: ...

  def canClimbThrough(self, chr: IsoGameCharacter) -> bool: ...

  def countAddSheetRope(self) -> int: ...

  def getAddSheetSquare(self, chr: IsoGameCharacter) -> IsoGridSquare: ...

  @overload
  def getBarricadeForCharacter(self, chr: IsoGameCharacter) -> IsoBarricade: ...

  @overload
  def getBarricadeForCharacter(self, chr: IsoGameCharacter) -> IsoBarricade: ...

  @overload
  def getBarricadeOnOppositeSquare(self) -> IsoBarricade: ...

  @overload
  def getBarricadeOnOppositeSquare(self) -> IsoBarricade: ...

  @overload
  def getBarricadeOnSameSquare(self) -> IsoBarricade: ...

  @overload
  def getBarricadeOnSameSquare(self) -> IsoBarricade: ...

  @overload
  def getBarricadeOppositeCharacter(self, chr: IsoGameCharacter) -> IsoBarricade: ...

  @overload
  def getBarricadeOppositeCharacter(self, chr: IsoGameCharacter) -> IsoBarricade: ...

  def getFacingPosition(self, pos: Vector2) -> Vector2: ...

  @overload
  def getFirstCharacterClimbingThrough(self) -> IsoGameCharacter: ...

  @overload
  def getFirstCharacterClimbingThrough(self, square: IsoGridSquare) -> IsoGameCharacter: ...

  @overload
  def getFirstCharacterClosing(self) -> IsoGameCharacter: ...

  @overload
  def getFirstCharacterClosing(self, square: IsoGridSquare) -> IsoGameCharacter: ...

  def getIndoorSquare(self) -> IsoGridSquare: ...

  def getInsideSquare(self) -> IsoGridSquare: ...

  @overload
  def getNorth(self) -> bool: ...

  @overload
  def getNorth(self) -> bool: ...

  def getObjectName(self) -> str: ...

  def getOpenSprite(self) -> IsoSprite: ...

  @overload
  def getOppositeSquare(self) -> IsoGridSquare: ...

  @overload
  def getOppositeSquare(self) -> IsoGridSquare: ...

  def getSmashedSprite(self) -> IsoSprite: ...

  def getSquare(self) -> IsoGridSquare: ...

  @overload
  def getThumpCondition(self) -> float: ...

  @overload
  def getThumpCondition(self) -> float: ...

  @overload
  def getThumpableFor(self, chr: IsoGameCharacter) -> Thumpable: ...

  @overload
  def getThumpableFor(self, chr: IsoGameCharacter) -> Thumpable: ...

  def haveSheetRope(self) -> bool: ...

  @overload
  def isBarricadeAllowed(self) -> bool: ...

  @overload
  def isBarricadeAllowed(self) -> bool: ...

  @overload
  def isBarricaded(self) -> bool: ...

  @overload
  def isBarricaded(self) -> bool: ...

  @overload
  def isDestroyed(self) -> bool: ...

  @overload
  def isDestroyed(self) -> bool: ...

  def isExterior(self) -> bool: ...

  def isGlassRemoved(self) -> bool: ...

  def isInvincible(self) -> bool: ...

  def isLocked(self) -> bool: ...

  def isPermaLocked(self) -> bool: ...

  def isSmashed(self) -> bool: ...

  def load(self, input: ByteBuffer, WorldVersion: int, IS_DEBUG_SAVE: bool) -> None: ...

  def loadState(self, bb: ByteBuffer) -> None: ...

  def onMouseLeftClick(self, x: int, y: int) -> bool: ...

  def openCloseCurtain(self, chr: IsoGameCharacter) -> None: ...

  def removeBrokenGlass(self) -> None: ...

  def removeFromWorld(self) -> None: ...

  def removeSheet(self, chr: IsoGameCharacter) -> None: ...

  def removeSheetRope(self, player: IsoPlayer) -> bool: ...

  def render(self, x: float, y: float, z: float, col: ColorInfo, bDoAttached: bool, bWallLightingPass: bool, shader: Shader) -> None: ...

  def save(self, output: ByteBuffer, IS_DEBUG_SAVE: bool) -> None: ...

  def saveState(self, bb: ByteBuffer) -> None: ...

  def setGlassRemoved(self, removed: bool) -> None: ...

  def setIsLocked(self, lock: bool) -> None: ...

  def setOpenSprite(self, sprite: IsoSprite) -> None: ...

  def setPermaLocked(self, permaLock: Boolean) -> None: ...

  def setSmashed(self, destroyed: bool) -> None: ...

  def setSmashedSprite(self, sprite: IsoSprite) -> None: ...

  @overload
  def smashWindow(self) -> None: ...

  @overload
  def smashWindow(self, bRemote: bool) -> None: ...

  @overload
  def smashWindow(self, bRemote: bool, doAlarm: bool) -> None: ...

  def syncIsoObject(self, bRemote: bool, val: int, source: UdpConnection, bb: ByteBuffer) -> None: ...

  def syncIsoObjectSend(self, b: ByteBufferWriter) -> None: ...

  @staticmethod
  def canClimbHere(sq: IsoGridSquare) -> bool: ...

  @staticmethod
  def canClimbThroughHelper(chr: IsoGameCharacter, sq: IsoGridSquare, oppositeSq: IsoGridSquare, north: bool) -> bool: ...

  @staticmethod
  def isSheetRopeHere(sq: IsoGridSquare) -> bool: ...

  @staticmethod
  @overload
  def isTopOfSheetRopeHere(sq: IsoGridSquare) -> bool: ...

  @staticmethod
  @overload
  def isTopOfSheetRopeHere(sq: IsoGridSquare, north: bool) -> bool: ...

  @overload
  def __init__(self, cell: IsoCell):
    self.health: int

    self.locked: bool

    self.maxhealth: int

    self.north: bool

    self.oldnumplanks: int

    self.open: bool

    self.permalocked: bool

    self.type: IsoWindow.WindowType

  @overload
  def __init__(self, cell: IsoCell, gridSquare: IsoGridSquare, gid: IsoSprite, north: bool): ...

  class WindowType(Enum):

    DoublePane: IsoWindow.WindowType

    SinglePane: IsoWindow.WindowType

    @staticmethod
    def valueOf(arg0: str) -> IsoWindow.WindowType: ...

    @staticmethod
    def values() -> list[IsoWindow.WindowType]: ...


class IsoWindowFrame:

  @staticmethod
  def addSheet(o: IsoObject, chr: IsoGameCharacter) -> None: ...

  @staticmethod
  def addSheetRope(o: IsoObject, player: IsoPlayer, itemType: str) -> bool: ...

  @staticmethod
  def canAddSheetRope(o: IsoObject) -> bool: ...

  @staticmethod
  def canClimbThrough(o: IsoObject, chr: IsoGameCharacter) -> bool: ...

  @staticmethod
  def countAddSheetRope(o: IsoObject) -> int: ...

  @staticmethod
  def getAddSheetSquare(o: IsoObject, chr: IsoGameCharacter) -> IsoGridSquare: ...

  @staticmethod
  def getCurtain(o: IsoObject) -> IsoCurtain: ...

  @staticmethod
  def getIndoorSquare(o: IsoObject) -> IsoGridSquare: ...

  @staticmethod
  def getOppositeSquare(o: IsoObject) -> IsoGridSquare: ...

  @staticmethod
  def haveSheetRope(o: IsoObject) -> bool: ...

  @staticmethod
  @overload
  def isWindowFrame(o: IsoObject) -> bool: ...

  @staticmethod
  @overload
  def isWindowFrame(o: IsoObject, north: bool) -> bool: ...

  @staticmethod
  def removeSheetRope(o: IsoObject, player: IsoPlayer) -> bool: ...

  def __init__(self): ...

  class Direction(Enum):

    INVALID: IsoWindowFrame.Direction

    NORTH: IsoWindowFrame.Direction

    WEST: IsoWindowFrame.Direction

    def isValid(self) -> bool: ...

    @staticmethod
    def valueOf(arg0: str) -> IsoWindowFrame.Direction: ...

    @staticmethod
    def values() -> list[IsoWindowFrame.Direction]: ...


class IsoWorldInventoryObject(IsoObject):

  def DoTooltip(self, tooltipUI: ObjectTooltip) -> None: ...

  def HasTooltip(self) -> bool: ...

  def Serialize(self) -> bool: ...

  def addToWorld(self) -> None: ...

  def finishupdate(self) -> bool: ...

  def getItem(self) -> InventoryItem: ...

  def getObjectName(self) -> str: ...

  def getScreenPosX(self, playerIndex: int) -> float: ...

  def getScreenPosY(self, playerIndex: int) -> float: ...

  def getWaterAmount(self) -> int: ...

  def getWaterMax(self) -> int: ...

  def getWorldPosX(self) -> float: ...

  def getWorldPosY(self) -> float: ...

  def getWorldPosZ(self) -> float: ...

  def isIgnoreRemoveSandbox(self) -> bool: ...

  def isTaintedWater(self) -> bool: ...

  def load(self, input: ByteBuffer, WorldVersion: int, IS_DEBUG_SAVE: bool) -> None: ...

  def loadChange(self, change: str, bb: ByteBuffer) -> None: ...

  def onMouseLeftClick(self, x: int, y: int) -> bool: ...

  def removeFromSquare(self) -> None: ...

  def removeFromWorld(self) -> None: ...

  def render(self, x: float, y: float, z: float, col: ColorInfo, bDoChild: bool, bWallLightingPass: bool, shader: Shader) -> None: ...

  def renderObjectPicker(self, x: float, y: float, z: float, lightInfo: ColorInfo) -> None: ...

  def save(self, output: ByteBuffer, IS_DEBUG_SAVE: bool) -> None: ...

  def saveChange(self, change: str, tbl: KahluaTable, bb: ByteBuffer) -> None: ...

  def setIgnoreRemoveSandbox(self, b: bool) -> None: ...

  def setTaintedWater(self, tainted: bool) -> None: ...

  def setWaterAmount(self, units: int) -> None: ...

  def softReset(self) -> None: ...

  def swapItem(self, newItem: InventoryItem) -> None: ...

  def update(self) -> None: ...

  def updateSprite(self) -> None: ...

  @staticmethod
  def getSurfaceAlpha(square: IsoGridSquare, zoff: float) -> float: ...

  @overload
  def __init__(self, cell: IsoCell):
    self.droptime: float

    self.ignoreremovesandbox: bool

    self.item: InventoryItem

    self.removeprocess: bool

    self.xoff: float

    self.yoff: float

    self.zoff: float

  @overload
  def __init__(self, item: InventoryItem, sq: IsoGridSquare, xoff: float, yoff: float, zoff: float): ...


class IsoZombieGiblets(IsoPhysicsObject):

  def Serialize(self) -> bool: ...

  def getObjectName(self) -> str: ...

  def render(self, x: float, y: float, z: float, info: ColorInfo, bDoAttached: bool, bWallLightingPass: bool, shader: Shader) -> None: ...

  def update(self) -> None: ...

  @overload
  def __init__(self, cell: IsoCell):
    self.time: float

    self.tintb: float

    self.tintg: float

    self.tintr: float

  @overload
  def __init__(self, type: IsoZombieGiblets.GibletType, cell: IsoCell, x: float, y: float, z: float, xvel: float, yvel: float): ...

  class GibletType(Enum):

    A: IsoZombieGiblets.GibletType

    B: IsoZombieGiblets.GibletType

    Eye: IsoZombieGiblets.GibletType

    @staticmethod
    def valueOf(arg0: str) -> IsoZombieGiblets.GibletType: ...

    @staticmethod
    def values() -> list[IsoZombieGiblets.GibletType]: ...


class IsoZombieHead(IsoMovingObject):

  def Serialize(self) -> bool: ...

  def getObjectName(self) -> str: ...

  def render(self, x: float, y: float, z: float, info: ColorInfo, bDoAttached: bool, bWallLightingPass: bool, shader: Shader) -> None: ...

  def update(self) -> None: ...

  @overload
  def __init__(self, cell: IsoCell):
    self.time: float

    self.tintb: float

    self.tintg: float

    self.tintr: float

  @overload
  def __init__(self, type: IsoZombieHead.GibletType, cell: IsoCell, x: float, y: float, z: float): ...

  class GibletType(Enum):

    A: IsoZombieHead.GibletType

    B: IsoZombieHead.GibletType

    Eye: IsoZombieHead.GibletType

    @staticmethod
    def valueOf(arg0: str) -> IsoZombieHead.GibletType: ...

    @staticmethod
    def values() -> list[IsoZombieHead.GibletType]: ...


class ObjectRenderEffects:

  ENABLED: bool

  def add(self, other: ObjectRenderEffects) -> None: ...

  def copyMainFromOther(self, other: ObjectRenderEffects) -> None: ...

  def update(self) -> bool: ...

  @staticmethod
  def alloc() -> ObjectRenderEffects: ...

  @staticmethod
  @overload
  def getNew(parent: IsoObject, t: RenderEffectType, reuseEqualType: bool) -> ObjectRenderEffects: ...

  @staticmethod
  @overload
  def getNew(parent: IsoObject, t: RenderEffectType, reuseEqualType: bool, dontAdd: bool) -> ObjectRenderEffects: ...

  @staticmethod
  def getNextWindEffect(windType: int, isTreeLike: bool) -> ObjectRenderEffects: ...

  @staticmethod
  def init() -> None: ...

  @staticmethod
  def release(o: ObjectRenderEffects) -> None: ...

  @staticmethod
  def updateStatic() -> None: ...


class RainManager:

  AddNewSplashesDelay: int

  AddNewSplashesTimer: int

  DarkRaindropTintMod: ColorInfo

  GravModMax: float

  GravModMin: float

  IsRaining: bool

  MaxRaindropObjects: int

  MaxRainSplashObjects: int

  NumActiveRaindrops: int

  NumActiveRainSplashes: int

  PlayerLocation: list[IsoGridSquare]

  PlayerMoved: bool

  PlayerOldLocation: list[IsoGridSquare]

  RainAmbient: Audio

  RainDesiredIntensity: float

  RaindropGravity: float

  RaindropReuseStack: Stack[IsoRaindrop]

  RaindropStack: ArrayList[IsoRaindrop]

  RaindropStartDistance: float

  RaindropTintMod: ColorInfo

  RainIntensity: float

  RainRadius: int

  RainSplashAnimDelay: float

  RainSplashReuseStack: Stack[IsoRainSplash]

  RainSplashStack: ArrayList[IsoRainSplash]

  RainSplashTintMod: ColorInfo

  randRainMax: int

  randRainMin: int

  ThunderAmbient: Audio

  @staticmethod
  def AddRainSplash(NewRainSplash: IsoRainSplash) -> None: ...

  @staticmethod
  def AddRaindrop(NewRaindrop: IsoRaindrop) -> None: ...

  @staticmethod
  def AddSplashes() -> None: ...

  @staticmethod
  def RemoveAllOn(sq: IsoGridSquare) -> None: ...

  @staticmethod
  def RemoveRainSplash(DyingRainSplash: IsoRainSplash) -> None: ...

  @staticmethod
  def RemoveRaindrop(DyingRaindrop: IsoRaindrop) -> None: ...

  @staticmethod
  def SetPlayerLocation(playerIndex: int, PlayerCurrentSquare: IsoGridSquare) -> None: ...

  @staticmethod
  def StartRainSplash(cell: IsoCell, gridSquare: IsoGridSquare, CanSee: bool) -> None: ...

  @staticmethod
  def StartRaindrop(cell: IsoCell, gridSquare: IsoGridSquare, CanSee: bool) -> None: ...

  @staticmethod
  def Update() -> None: ...

  @staticmethod
  def UpdateServer() -> None: ...

  @staticmethod
  def getRainIntensity() -> float: ...

  @staticmethod
  def inBounds(sq: IsoGridSquare) -> bool: ...

  @staticmethod
  def isRaining() -> Boolean: ...

  @staticmethod
  def reset() -> None: ...

  @staticmethod
  def setRandRainMax(pRandRainMax: int) -> None: ...

  @staticmethod
  def setRandRainMin(pRandRainMin: int) -> None: ...

  @staticmethod
  def startRaining() -> None: ...

  @staticmethod
  def stopRaining() -> None: ...

  def __init__(self): ...


class RenderEffectType(Enum):

  Hit_Door: RenderEffectType

  Hit_Tree_Shudder: RenderEffectType

  Vegetation_Rustle: RenderEffectType

  @staticmethod
  def valueOf(arg0: str) -> RenderEffectType: ...

  @staticmethod
  def values() -> list[RenderEffectType]: ...

