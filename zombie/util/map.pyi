from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.lang import RuntimeException
from java.util import Collection, AbstractCollection, Iterator
from zombie.util import IntIterator
from zombie.util.hash import IntHashFunction
from zombie.util.set import IntSet, AbstractIntSet

V = TypeVar('V', default=Any)

class AbstractIntKeyMap[V]:

  @overload
  def clear(self) -> None: ...

  @overload
  def clear(self) -> None: ...

  @overload
  def containsKey(self, key: int) -> bool: ...

  @overload
  def containsKey(self, key: int) -> bool: ...

  @overload
  def containsValue(self, value: object) -> bool: ...

  @overload
  def containsValue(self, value: object) -> bool: ...

  def entries(self) -> IntKeyMapIterator[V]: ...

  @overload
  def equals(self, obj: object) -> bool: ...

  @overload
  def equals(self, obj: object) -> bool: ...

  @overload
  def get(self, key: int) -> object: ...

  @overload
  def get(self, key: int) -> object: ...

  @overload
  def hashCode(self) -> int: ...

  @overload
  def hashCode(self) -> int: ...

  @overload
  def isEmpty(self) -> bool: ...

  @overload
  def isEmpty(self) -> bool: ...

  def keySet(self) -> IntSet: ...

  def put(self, arg0: int, arg1: object) -> object: ...

  @overload
  def putAll(self, map: IntKeyMap[V]) -> None: ...

  @overload
  def putAll(self, map: IntKeyMap[V]) -> None: ...

  @overload
  def remove(self, key: int) -> object: ...

  @overload
  def remove(self, key: int) -> object: ...

  @overload
  def size(self) -> int: ...

  @overload
  def size(self) -> int: ...

  def toString(self) -> str: ...

  def trimToSize(self) -> None: ...

  def values(self) -> Collection[V]: ...


class IntKeyMap[V]:

  def clear(self) -> None: ...

  def containsKey(self, key: int) -> bool: ...

  def containsValue(self, value: object) -> bool: ...

  def entries(self) -> IntKeyMapIterator[V]: ...

  def equals(self, obj: object) -> bool: ...

  def get(self, key: int) -> object: ...

  def hashCode(self) -> int: ...

  def isEmpty(self) -> bool: ...

  def keySet(self) -> IntSet: ...

  def put(self, arg0: int, arg1: object) -> object: ...

  def putAll(self, map: IntKeyMap[V]) -> None: ...

  def remove(self, key: int) -> object: ...

  def size(self) -> int: ...

  def values(self) -> Collection[V]: ...


class IntKeyMapIterator[V]:

  def getKey(self) -> int: ...

  def getValue(self) -> object: ...

  def hasNext(self) -> bool: ...

  def next(self) -> None: ...

  def remove(self) -> None: ...


class IntKeyOpenHashMap[V](AbstractIntKeyMap):

  DEFAULT_CAPACITY: int

  DEFAULT_GROWTH_CHUNK: int

  DEFAULT_GROWTH_FACTOR: float

  DEFAULT_LOAD_FACTOR: float

  @overload
  def clear(self) -> None: ...

  @overload
  def clear(self) -> None: ...

  def clone(self) -> object: ...

  @overload
  def containsKey(self, key: int) -> bool: ...

  @overload
  def containsKey(self, key: int) -> bool: ...

  @overload
  def containsValue(self, value: object) -> bool: ...

  @overload
  def containsValue(self, value: object) -> bool: ...

  @overload
  def entries(self) -> IntKeyMapIterator[V]: ...

  @overload
  def entries(self) -> IntKeyMapIterator[V]: ...

  def equals(self, arg0: object) -> bool: ...

  @overload
  def get(self, key: int) -> object: ...

  @overload
  def get(self, key: int) -> object: ...

  def hashCode(self) -> int: ...

  @overload
  def isEmpty(self) -> bool: ...

  @overload
  def isEmpty(self) -> bool: ...

  @overload
  def keySet(self) -> IntSet: ...

  @overload
  def keySet(self) -> IntSet: ...

  @overload
  def put(self, arg0: int, arg1: object) -> object: ...

  @overload
  def put(self, arg0: int, arg1: object) -> object: ...

  def putAll(self, arg0: IntKeyMap[V]) -> None: ...

  @overload
  def remove(self, key: int) -> object: ...

  @overload
  def remove(self, key: int) -> object: ...

  @overload
  def size(self) -> int: ...

  @overload
  def size(self) -> int: ...

  @overload
  def values(self) -> Collection[V]: ...

  @overload
  def values(self) -> Collection[V]: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, loadFactor: float): ...
  @overload
  def __init__(self, capacity: int): ...
  @overload
  def __init__(self, keyhash: IntHashFunction): ...
  @overload
  def __init__(self, map: IntKeyMap[V]): ...
  @overload
  def __init__(self, capacity: int, loadFactor: float): ...
  @overload
  def __init__(self, keyhash: IntHashFunction, loadFactor: float): ...
  @overload
  def __init__(self, keyhash: IntHashFunction, capacity: int): ...
  @overload
  def __init__(self, capacity: int, loadFactor: float, growthFactor: float): ...
  @overload
  def __init__(self, capacity: int, loadFactor: float, growthChunk: int): ...
  @overload
  def __init__(self, keyhash: IntHashFunction, capacity: int, loadFactor: float): ...
  @overload
  def __init__(self, keyhash: IntHashFunction, capacity: int, loadFactor: float, growthFactor: float): ...
  @overload
  def __init__(self, keyhash: IntHashFunction, capacity: int, loadFactor: float, growthChunk: int): ...

  class KeySet(AbstractIntSet):

    def clear(self) -> None: ...

    def contains(self, arg0: int) -> bool: ...

    def iterator(self) -> IntIterator: ...

    def remove(self, arg0: int) -> bool: ...

    def size(self) -> int: ...

  class ValueCollection(AbstractCollection):

    def clear(self) -> None: ...

    def contains(self, arg0: object) -> bool: ...

    def iterator(self) -> Iterator[V]: ...

    def size(self) -> int: ...


class MapDefaults:

  @staticmethod
  def defaultInt() -> int: ...

  def __init__(self): ...


class NoSuchMappingException(RuntimeException):

  def __init__(self, s: str): ...

