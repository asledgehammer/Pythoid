from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from zombie.util import AbstractIntCollection, IntIterator, IntCollection
from zombie.util.hash import IntHashFunction

class AbstractIntSet(AbstractIntCollection):

  def equals(self, obj: object) -> bool: ...

  def hashCode(self) -> int: ...


class IntOpenHashSet(AbstractIntSet):

  DEFAULT_CAPACITY: int

  DEFAULT_GROWTH_CHUNK: int

  DEFAULT_GROWTH_FACTOR: float

  DEFAULT_LOAD_FACTOR: float

  def add(self, v: int) -> bool: ...

  def clear(self) -> None: ...

  def clone(self) -> object: ...

  def contains(self, v: int) -> bool: ...

  def hashCode(self) -> int: ...

  def iterator(self) -> IntIterator: ...

  def remove(self, v: int) -> bool: ...

  def size(self) -> int: ...

  def toArray(self, a: list[int]) -> list[int]: ...

  def trimToSize(self) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: list[int]): ...
  @overload
  def __init__(self, arg0: float): ...
  @overload
  def __init__(self, arg0: int): ...
  @overload
  def __init__(self, arg0: IntCollection): ...
  @overload
  def __init__(self, arg0: IntHashFunction): ...
  @overload
  def __init__(self, arg0: int, arg1: float): ...
  @overload
  def __init__(self, arg0: IntHashFunction, arg1: float): ...
  @overload
  def __init__(self, arg0: IntHashFunction, arg1: int): ...
  @overload
  def __init__(self, arg0: int, arg1: float, arg2: float): ...
  @overload
  def __init__(self, arg0: int, arg1: float, arg2: int): ...
  @overload
  def __init__(self, arg0: IntHashFunction, arg1: int, arg2: float): ...
  @overload
  def __init__(self, arg0: IntHashFunction, arg1: int, arg2: float, arg3: float): ...
  @overload
  def __init__(self, arg0: IntHashFunction, arg1: int, arg2: float, arg3: int): ...


class IntSet:

  def add(self, arg0: int) -> bool: ...

  def addAll(self, arg0: IntCollection) -> bool: ...

  def clear(self) -> None: ...

  def contains(self, arg0: int) -> bool: ...

  def containsAll(self, arg0: IntCollection) -> bool: ...

  def equals(self, arg0: object) -> bool: ...

  def hashCode(self) -> int: ...

  def isEmpty(self) -> bool: ...

  def iterator(self) -> IntIterator: ...

  def remove(self, arg0: int) -> bool: ...

  def removeAll(self, arg0: IntCollection) -> bool: ...

  def retainAll(self, arg0: IntCollection) -> bool: ...

  def size(self) -> int: ...

  @overload
  def toArray(self) -> list[int]: ...

  @overload
  def toArray(self, arg0: list[int]) -> list[int]: ...

  def trimToSize(self) -> None: ...

