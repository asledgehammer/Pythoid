from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.lang import Integer
from java.util import ArrayList
from zombie.characters import IsoZombie, IsoGameCharacter
from zombie.inventory import InventoryItem
from zombie.inventory.types import HandWeapon
from zombie.iso import IsoGridSquare, RoomDef, IsoObject, IsoMetaGrid, IsoChunk, IsoDirections, BuildingDef
from zombie.iso.objects import IsoDeadBody
from zombie.vehicles import BaseVehicle

class RandomizedWorldBase:

  def addBloodSplat(self, sq: IsoGridSquare, nbr: int) -> None: ...

  @overload
  def addItemOnGround(self, square: IsoGridSquare, type: str) -> InventoryItem: ...

  @overload
  def addItemOnGround(self, square: IsoGridSquare, item: InventoryItem) -> InventoryItem: ...

  def addRandomItemOnGround(self, square: IsoGridSquare, types: ArrayList[str]) -> InventoryItem: ...

  @overload
  def addRandomItemsOnGround(self, room: RoomDef, type: str, count: int) -> None: ...

  @overload
  def addRandomItemsOnGround(self, room: RoomDef, types: ArrayList[str], count: int) -> None: ...

  def addTentNorthSouth(self, x: int, y: int, z: int) -> IsoObject: ...

  def addTentWestEast(self, x: int, y: int, z: int) -> IsoObject: ...

  @overload
  def addTileObject(self, sq: IsoGridSquare, spriteName: str) -> IsoObject: ...

  @overload
  def addTileObject(self, x: int, y: int, z: int, spriteName: str) -> IsoObject: ...

  def addTrailOfBlood(self, x: float, y: float, z: float, direction: float, count: int) -> None: ...

  def addTrailer(self, v: BaseVehicle, zone: IsoMetaGrid.Zone, chunk: IsoChunk, zoneName: str, vehicleDistrib: str, trailerName: str) -> BaseVehicle: ...

  def addTraitOfBlood(self, dir: IsoDirections, time: int, x: int, y: int, z: int) -> None: ...

  @overload
  def addVehicle(self, zone: IsoMetaGrid.Zone, sq: IsoGridSquare, chunk: IsoChunk, zoneName: str, scriptName: str, dir: IsoDirections) -> BaseVehicle: ...

  @overload
  def addVehicle(self, zone: IsoMetaGrid.Zone, sq: IsoGridSquare, chunk: IsoChunk, zoneName: str, scriptName: str, skinIndex: Integer, dir: IsoDirections, specificContainer: str) -> BaseVehicle: ...

  @overload
  def addVehicle(self, zone: IsoMetaGrid.Zone, vehicleX: float, vehicleY: float, vehicleZ: float, direction: float, zoneName: str, scriptName: str, skinIndex: Integer, specificContainer: str) -> BaseVehicle: ...

  @overload
  def addVehicleFlipped(self, zone: IsoMetaGrid.Zone, sq: IsoGridSquare, chunk: IsoChunk, zoneName: str, scriptName: str, skinIndex: Integer, dir: IsoDirections, specificContainer: str) -> BaseVehicle: ...

  @overload
  def addVehicleFlipped(self, zone: IsoMetaGrid.Zone, vehicleX: float, vehicleY: float, vehicleZ: float, direction: float, zoneName: str, scriptName: str, skinIndex: Integer, specificContainer: str) -> BaseVehicle: ...

  def addWeapon(self, type: str, addRandomBullets: bool) -> HandWeapon: ...

  def addZombiesOnSquare(self, totalZombies: int, outfit: str, femaleChance: Integer, square: IsoGridSquare) -> ArrayList[IsoZombie]: ...

  def addZombiesOnVehicle(self, totalZombies: int, outfit: str, femaleChance: Integer, vehicle: BaseVehicle) -> ArrayList[IsoZombie]: ...

  def createSkeletonCorpse(self, room: RoomDef) -> IsoDeadBody: ...

  def getDebugLine(self) -> str: ...

  def getLivingRoomOrKitchen(self, bDef: BuildingDef) -> RoomDef: ...

  def getMaximumDays(self) -> int: ...

  def getName(self) -> str: ...

  def getRandomRoom(self, bDef: BuildingDef, minArea: int) -> RoomDef: ...

  def getRoom(self, bDef: BuildingDef, roomName: str) -> RoomDef: ...

  def getSq(self, x: int, y: int, z: int) -> IsoGridSquare: ...

  def isTimeValid(self, force: bool) -> bool: ...

  def isUnique(self) -> bool: ...

  def setAttachedItem(self, zombie: IsoZombie, location: str, item: str, ensureItem: str) -> None: ...

  def setDebugLine(self, debugLine: str) -> None: ...

  def setMaximumDays(self, maximumDays: int) -> None: ...

  def setUnique(self, unique: bool) -> None: ...

  def spawnCarOnNearestNav(self, carName: str, arg1: BuildingDef) -> BaseVehicle: ...

  @staticmethod
  def alignCorpseToSquare(chr: IsoGameCharacter, square: IsoGridSquare) -> None: ...

  @staticmethod
  def createBodyFromZombie(chr: IsoGameCharacter) -> IsoDeadBody: ...

  @staticmethod
  @overload
  def createRandomDeadBody(room: RoomDef, blood: int) -> IsoDeadBody: ...

  @staticmethod
  @overload
  def createRandomDeadBody(x: int, y: int, z: int, dir: IsoDirections, blood: int) -> IsoDeadBody: ...

  @staticmethod
  @overload
  def createRandomDeadBody(sq: IsoGridSquare, dir: IsoDirections, blood: int, crawlerChance: int, outfit: str) -> IsoDeadBody: ...

  @staticmethod
  @overload
  def createRandomDeadBody(x: int, y: int, z: int, dir: IsoDirections, blood: int, crawlerChance: int) -> IsoDeadBody: ...

  @staticmethod
  @overload
  def createRandomDeadBody(x: float, y: float, z: float, direction: float, alignToSquare: bool, blood: int, crawlerChance: int, outfit: str) -> IsoDeadBody: ...

  @staticmethod
  @overload
  def createRandomZombie(room: RoomDef) -> IsoGameCharacter: ...

  @staticmethod
  @overload
  def createRandomZombie(x: int, y: int, z: int) -> IsoGameCharacter: ...

  @staticmethod
  def createRandomZombieForCorpse(room: RoomDef) -> IsoGameCharacter: ...

  @staticmethod
  def getRandomSpawnSquare(roomDef: RoomDef) -> IsoGridSquare: ...

  @staticmethod
  def getRandomSquareForCorpse(roomDef: RoomDef) -> IsoGridSquare: ...

  @staticmethod
  def is1x2AreaClear(square: IsoGridSquare) -> bool: ...

  @staticmethod
  def is2x1AreaClear(square: IsoGridSquare) -> bool: ...

  @staticmethod
  def is2x1or1x2AreaClear(square: IsoGridSquare) -> bool: ...

  @staticmethod
  def is2x2AreaClear(square: IsoGridSquare) -> bool: ...

  @staticmethod
  def removeAllVehiclesOnZone(zone: IsoMetaGrid.Zone) -> None: ...

  def __init__(self): ...

