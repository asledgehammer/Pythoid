from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.io import Writer
from java.lang import Integer
from java.util import ArrayList, List, Map
from zombie.radio import ChannelCategory, RadioData

class DynamicRadioChannel(RadioChannel):

  def LoadAiringBroadcast(self, guid: str, line: int) -> None: ...

  @overload
  def __init__(self, n: str, freq: int, c: ChannelCategory): ...
  @overload
  def __init__(self, n: str, freq: int, c: ChannelCategory, guid: str): ...


class RadioBroadCast:

  def AddRadioLine(self, radioLine: RadioLine) -> None: ...

  def PeekNextLineText(self) -> str: ...

  def getCurrentLine(self) -> RadioLine: ...

  def getCurrentLineNumber(self) -> int: ...

  def getEndStamp(self) -> int: ...

  def getID(self) -> str: ...

  def getLines(self) -> ArrayList[RadioLine]: ...

  @overload
  def getNextLine(self) -> RadioLine: ...

  @overload
  def getNextLine(self, doChildren: bool) -> RadioLine: ...

  def getStartStamp(self) -> int: ...

  @overload
  def resetLineCounter(self) -> None: ...

  @overload
  def resetLineCounter(self, doChildren: bool) -> None: ...

  def setCurrentLineNumber(self, n: int) -> None: ...

  def setPostSegment(self, broadCast: RadioBroadCast) -> None: ...

  def setPreSegment(self, broadCast: RadioBroadCast) -> None: ...

  def __init__(self, id: str, startstamp: int, endstamp: int): ...


class RadioChannel:

  def AddRadioScript(self, script: RadioScript) -> None: ...

  def GetCategory(self) -> ChannelCategory: ...

  def GetFrequency(self) -> int: ...

  def GetName(self) -> str: ...

  def GetPlayerIsListening(self) -> bool: ...

  def IsTv(self) -> bool: ...

  def LoadAiringBroadcast(self, guid: str, line: int) -> None: ...

  def SetPlayerIsListening(self, isListening: bool) -> None: ...

  def UpdateScripts(self, timestamp: int, day: int) -> None: ...

  def getAirCounterMultiplier(self) -> float: ...

  def getAiringBroadcast(self) -> RadioBroadCast: ...

  def getCurrentScript(self) -> RadioScript: ...

  def getCurrentScriptLoop(self) -> int: ...

  def getCurrentScriptMaxLoops(self) -> int: ...

  def getGUID(self) -> str: ...

  def getLastAiredLine(self) -> str: ...

  def getLastBroadcastID(self) -> str: ...

  def getRadioData(self) -> RadioData: ...

  def getRadioScript(self, script: str) -> RadioScript: ...

  def isTimeSynced(self) -> bool: ...

  def isVanilla(self) -> bool: ...

  @overload
  def setActiveScript(self, scriptName: str, day: int) -> None: ...

  @overload
  def setActiveScript(self, scriptName: str, day: int, loop: int, maxloops: int) -> None: ...

  def setActiveScriptNull(self) -> None: ...

  def setAirCounterMultiplier(self, airCounterMultiplier: float) -> None: ...

  def setAiringBroadcast(self, bc: RadioBroadCast) -> None: ...

  def setLouisvilleObfuscate(self, b: bool) -> None: ...

  def setRadioData(self, radioData: RadioData) -> None: ...

  def setTimeSynced(self, isTimeSynced: bool) -> None: ...

  def update(self) -> None: ...

  @overload
  def __init__(self, n: str, freq: int, c: ChannelCategory): ...
  @overload
  def __init__(self, n: str, freq: int, c: ChannelCategory, guid: str): ...


class RadioLine:

  def getAirTime(self) -> float: ...

  def getB(self) -> float: ...

  def getEffectsString(self) -> str: ...

  def getG(self) -> float: ...

  def getR(self) -> float: ...

  def getText(self) -> str: ...

  def isCustomAirTime(self) -> bool: ...

  def setAirTime(self, airTime: float) -> None: ...

  def setText(self, text: str) -> None: ...

  @overload
  def __init__(self, txt: str, red: float, green: float, blue: float): ...
  @overload
  def __init__(self, txt: str, red: float, green: float, blue: float, fx: str): ...


class RadioScript:

  @overload
  def AddBroadcast(self, broadcast: RadioBroadCast) -> None: ...

  @overload
  def AddBroadcast(self, broadcast: RadioBroadCast, ignoreTimestamps: bool) -> None: ...

  def AddExitOption(self, scriptname: str, chance: int, startdelay: int) -> None: ...

  def GetGUID(self) -> str: ...

  def GetName(self) -> str: ...

  def Reset(self) -> None: ...

  def UpdateScript(self, timeStamp: int) -> bool: ...

  def clearExitOptions(self) -> None: ...

  def getBroadcastList(self) -> ArrayList[RadioBroadCast]: ...

  def getBroadcastWithID(self, guid: str) -> RadioBroadCast: ...

  def getCurrentBroadcast(self) -> RadioBroadCast: ...

  def getExitOptions(self) -> ArrayList[RadioScript.ExitOption]: ...

  def getLoopMax(self) -> int: ...

  def getLoopMin(self) -> int: ...

  def getNextScript(self) -> RadioScript.ExitOption: ...

  def getStartDay(self) -> int: ...

  def getStartDayStamp(self) -> int: ...

  def getValidAirBroadcast(self) -> RadioBroadCast: ...

  def getValidAirBroadcastDebug(self) -> RadioBroadCast: ...

  def setStartDayStamp(self, day: int) -> None: ...

  @overload
  def __init__(self, n: str, loopmin: int, loopmax: int): ...
  @overload
  def __init__(self, n: str, loopmin: int, loopmax: int, guid: str): ...

  class ExitOption:

    def getChance(self) -> int: ...

    def getScriptname(self) -> str: ...

    def getStartDelay(self) -> int: ...

    def __init__(self, name: str, rollchance: int, startdelay: int): ...


class RadioScriptManager:

  def AddChannel(self, channel: RadioChannel, overwrite: bool) -> None: ...

  def Load(self, channelLines: List[str]) -> None: ...

  def PlayerListensChannel(self, chanfrequency: int, mode: bool, sourceIsTV: bool) -> None: ...

  def RemoveChannel(self, frequency: int) -> None: ...

  def Save(self, w: Writer) -> None: ...

  def UpdateScripts(self, day: int, hour: int, mins: int) -> None: ...

  def getChannels(self) -> Map[Integer, RadioChannel]: ...

  def getChannelsList(self) -> ArrayList: ...

  def getCurrentTimeStamp(self) -> int: ...

  def getRadioChannel(self, uuid: str) -> RadioChannel: ...

  def init(self, savedWorldVersion: int) -> None: ...

  def reset(self) -> None: ...

  def simulateChannelUntil(self, frequency: int, days: int, force: bool) -> None: ...

  def simulateScriptsUntil(self, days: int, force: bool) -> None: ...

  def update(self) -> None: ...

  @staticmethod
  def getInstance() -> RadioScriptManager: ...

  @staticmethod
  def hasInstance() -> bool: ...

