from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.nio import ByteBuffer
from java.util import ArrayList, Comparator
from java.util.function import Function, ToDoubleFunction, ToIntFunction, ToLongFunction
from zombie.characters import IsoPlayer
from zombie.core import Color

U = TypeVar('U', default=Any)
T = TypeVar('T', default=Any)

class MediaData:

  def addLine(self, text: str, r: float, g: float, b: float, codes: str) -> None: ...

  def getAuthorEN(self) -> str: ...

  def getCategory(self) -> str: ...

  def getExtraEN(self) -> str: ...

  def getId(self) -> str: ...

  def getIndex(self) -> int: ...

  def getLine(self, index: int) -> MediaData.MediaLineData: ...

  def getLineCount(self) -> int: ...

  def getMediaType(self) -> int: ...

  def getSpawning(self) -> int: ...

  def getSubtitleEN(self) -> str: ...

  def getTitleEN(self) -> str: ...

  def getTranslatedAuthor(self) -> str: ...

  def getTranslatedExtra(self) -> str: ...

  def getTranslatedItemDisplayName(self) -> str: ...

  def getTranslatedSubTitle(self) -> str: ...

  def getTranslatedTitle(self) -> str: ...

  def hasAuthor(self) -> bool: ...

  def hasExtra(self) -> bool: ...

  def hasSubTitle(self) -> bool: ...

  def hasTitle(self) -> bool: ...

  def setAuthor(self, author: str) -> None: ...

  def setExtra(self, extra: str) -> None: ...

  def setSubtitle(self, subtitle: str) -> None: ...

  def setTitle(self, title: str) -> None: ...

  def __init__(self, id: str, itemDisplayName: str, spawning: int): ...

  class MediaLineData:

    def getB(self) -> float: ...

    def getCodes(self) -> str: ...

    def getColor(self) -> Color: ...

    def getG(self) -> float: ...

    def getR(self) -> float: ...

    def getTextGuid(self) -> str: ...

    def getTranslatedText(self) -> str: ...

    def __init__(self, text: str, r: float, g: float, b: float, codes: str): ...


class RecordedMedia:

  DISABLE_LINE_LEARNING: bool

  SAVE_FILE: str

  VERSION: int

  VERSION1: int

  VERSION2: int

  def getAllMediaForCategory(self, category: str) -> ArrayList[MediaData]: ...

  def getAllMediaForType(self, type: int) -> ArrayList[MediaData]: ...

  def getCategories(self) -> ArrayList[str]: ...

  def getIndexForMediaData(self, data: MediaData) -> int: ...

  def getMediaData(self, id: str) -> MediaData: ...

  def getMediaDataFromIndex(self, index: int) -> MediaData: ...

  def getRandomFromCategory(self, cat: str) -> MediaData: ...

  def handleLegacyListenedLines(self, player: IsoPlayer) -> None: ...

  def hasListenedToAll(self, player: IsoPlayer, mediaData: MediaData) -> bool: ...

  def hasListenedToLine(self, player: IsoPlayer, guid: str) -> bool: ...

  def init(self) -> None: ...

  def load(self) -> None: ...

  def register(self, category: str, id: str, itemDisplayName: str, spawning: int) -> MediaData: ...

  def save(self) -> None: ...

  def sendRequestData(self, bb: ByteBuffer) -> None: ...

  @staticmethod
  def getMediaTypeForCategory(category: str) -> int: ...

  @staticmethod
  def receiveRequestData(bb: ByteBuffer) -> None: ...

  @staticmethod
  def toAscii(string: str) -> str: ...

  def __init__(self): ...

  class MediaNameSorter:

    @overload
    def compare(self, arg0: object, arg1: object) -> int: ...

    @overload
    def compare(self, arg0: object, arg1: object) -> int: ...

    @overload
    def compare(self, o1: MediaData, o2: MediaData) -> int: ...

    def equals(self, arg0: object) -> bool: ...

    def reversed(self) -> Comparator[T]: ...

    @overload
    def thenComparing(self, arg0: Comparator[T]) -> Comparator[T]: ...

    @overload
    def thenComparing(self, arg0: Function[T, U]) -> Comparator[T]: ...

    @overload
    def thenComparing(self, arg0: Function[T, U], arg1: Comparator[U]) -> Comparator[T]: ...

    def thenComparingDouble(self, arg0: ToDoubleFunction[T]) -> Comparator[T]: ...

    def thenComparingInt(self, arg0: ToIntFunction[T]) -> Comparator[T]: ...

    def thenComparingLong(self, arg0: ToLongFunction[T]) -> Comparator[T]: ...

    @staticmethod
    @overload
    def comparing(arg0: Function[T, U]) -> Comparator[T]: ...

    @staticmethod
    @overload
    def comparing(arg0: Function[T, U], arg1: Comparator[U]) -> Comparator[T]: ...

    @staticmethod
    def comparingDouble(arg0: ToDoubleFunction[T]) -> Comparator[T]: ...

    @staticmethod
    def comparingInt(arg0: ToIntFunction[T]) -> Comparator[T]: ...

    @staticmethod
    def comparingLong(arg0: ToLongFunction[T]) -> Comparator[T]: ...

    @staticmethod
    def naturalOrder() -> Comparator[T]: ...

    @staticmethod
    def nullsFirst(arg0: Comparator[T]) -> Comparator[T]: ...

    @staticmethod
    def nullsLast(arg0: Comparator[T]) -> Comparator[T]: ...

    @staticmethod
    def reverseOrder() -> Comparator[T]: ...

    def __init__(self): ...

