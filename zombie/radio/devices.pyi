from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.nio import ByteBuffer
from java.util import ArrayList
from se.krka.kahlua.vm import KahluaTable
from zombie.audio import BaseSoundEmitter
from zombie.characters import IsoPlayer
from zombie.core.raknet import UdpConnection
from zombie.inventory import InventoryItem, ItemContainer
from zombie.inventory.types import DrainableComboItem
from zombie.iso import IsoGridSquare
from zombie.radio.media import MediaData

class DeviceData:

  def StartPlayMedia(self) -> None: ...

  def StopPlayMedia(self) -> None: ...

  def TriggerPlayerListening(self, listening: bool) -> None: ...

  def addBattery(self, bat: DrainableComboItem) -> None: ...

  def addHeadphones(self, headphones: InventoryItem) -> None: ...

  def addMediaItem(self, media: InventoryItem) -> None: ...

  def canBePoweredHere(self) -> bool: ...

  def cleanSoundsAndEmitter(self) -> None: ...

  def cloneDevicePresets(self, p: DevicePresets) -> None: ...

  def doReceiveMPSignal(self, distance: float) -> None: ...

  def doReceiveSignal(self, distance: int) -> None: ...

  def generatePresets(self) -> None: ...

  def getBaseVolumeRange(self) -> float: ...

  def getBattery(self, inventory: ItemContainer) -> InventoryItem: ...

  def getChannel(self) -> int: ...

  def getClone(self) -> DeviceData: ...

  def getDeviceName(self) -> str: ...

  def getDevicePresets(self) -> DevicePresets: ...

  def getDeviceSoundVolumeRange(self) -> int: ...

  def getDeviceVolume(self) -> float: ...

  def getDeviceVolumeRange(self) -> int: ...

  def getEmitter(self) -> BaseSoundEmitter: ...

  def getHasBattery(self) -> bool: ...

  def getHeadphoneType(self) -> int: ...

  def getHeadphones(self, inventory: ItemContainer) -> InventoryItem: ...

  def getIsBatteryPowered(self) -> bool: ...

  def getIsHighTier(self) -> bool: ...

  def getIsPortable(self) -> bool: ...

  def getIsTelevision(self) -> bool: ...

  def getIsTurnedOn(self) -> bool: ...

  def getIsTwoWay(self) -> bool: ...

  def getLastRecordedDistance(self) -> int: ...

  def getMaxChannelRange(self) -> int: ...

  def getMediaData(self) -> MediaData: ...

  def getMediaIndex(self) -> int: ...

  def getMediaType(self) -> int: ...

  def getMicIsMuted(self) -> bool: ...

  def getMicRange(self) -> int: ...

  def getMinChannelRange(self) -> int: ...

  def getParent(self) -> WaveSignalDevice: ...

  def getPower(self) -> float: ...

  def getTransmitRange(self) -> int: ...

  def getUseDelta(self) -> float: ...

  def hasMedia(self) -> bool: ...

  def isInventoryDevice(self) -> bool: ...

  def isIsoDevice(self) -> bool: ...

  def isNoTransmit(self) -> bool: ...

  def isPlayingMedia(self) -> bool: ...

  def isReceivingSignal(self) -> bool: ...

  def isVehicleDevice(self) -> bool: ...

  def load(self, input: ByteBuffer, WorldVersion: int, net: bool) -> None: ...

  def playSound(self, soundname: str, volume: float, transmit: bool) -> None: ...

  def playSoundLocal(self, soundname: str, useDeviceVolume: bool) -> None: ...

  def playSoundSend(self, soundname: str, useDeviceVolume: bool) -> None: ...

  def receiveDeviceDataStatePacket(self, bb: ByteBuffer, ignoreConnection: UdpConnection) -> None: ...

  def removeMediaItem(self, inventory: ItemContainer) -> InventoryItem: ...

  def save(self, output: ByteBuffer, net: bool) -> None: ...

  def setBaseVolumeRange(self, f: float) -> None: ...

  @overload
  def setChannel(self, c: int) -> None: ...

  @overload
  def setChannel(self, chan: int, setislistening: bool) -> None: ...

  def setChannelRaw(self, chan: int) -> None: ...

  def setDeviceName(self, name: str) -> None: ...

  def setDevicePresets(self, p: DevicePresets) -> None: ...

  def setDeviceVolume(self, f: float) -> None: ...

  def setDeviceVolumeRaw(self, f: float) -> None: ...

  def setHasBattery(self, b: bool) -> None: ...

  def setHeadphoneType(self, i: int) -> None: ...

  def setInitialPower(self) -> None: ...

  def setIsBatteryPowered(self, b: bool) -> None: ...

  def setIsHighTier(self, b: bool) -> None: ...

  def setIsPortable(self, b: bool) -> None: ...

  def setIsTelevision(self, b: bool) -> None: ...

  def setIsTurnedOn(self, b: bool) -> None: ...

  def setIsTwoWay(self, b: bool) -> None: ...

  def setMaxChannelRange(self, i: int) -> None: ...

  def setMediaIndex(self, mediaIndex: int) -> None: ...

  def setMediaType(self, mediaType: int) -> None: ...

  def setMicIsMuted(self, b: bool) -> None: ...

  def setMicRange(self, i: int) -> None: ...

  def setMinChannelRange(self, i: int) -> None: ...

  def setNoTransmit(self, noTransmit: bool) -> None: ...

  def setParent(self, p: WaveSignalDevice) -> None: ...

  def setPower(self, p: float) -> None: ...

  def setRandomChannel(self) -> None: ...

  def setTransmitRange(self, range: int) -> None: ...

  def setTurnedOnRaw(self, b: bool) -> None: ...

  def setUseDelta(self, f: float) -> None: ...

  def transmitBattryChange(self) -> None: ...

  def transmitPresets(self) -> None: ...

  def update(self, isIso: bool, playerInRange: bool) -> None: ...

  def updateMediaPlaying(self) -> None: ...

  def updateSimple(self) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, parent: WaveSignalDevice): ...


class DeviceDataNetTypes:

  BatteryChange: int

  ChannelChange: int

  HeadPhoneChange: int

  MediaChange: int

  PowerChange: int

  PresetsChange: int

  StartPlayMedia: int

  StopPlayMedia: int

  TransmitMediaLine: int

  TurnedOnStateChange: int

  VolumeChange: int

  def __init__(self): ...


class DeviceEmitter:

  def __init__(self): ...


class DevicePresets:

  def addPreset(self, name: str, frequency: int) -> None: ...

  def clearPresets(self) -> None: ...

  def getMaxPresets(self) -> int: ...

  def getPresetFreq(self, id: int) -> int: ...

  def getPresetName(self, id: int) -> str: ...

  def getPresets(self) -> ArrayList[PresetEntry]: ...

  def getPresetsLua(self) -> KahluaTable: ...

  def load(self, input: ByteBuffer, WorldVersion: int, net: bool) -> None: ...

  def removePreset(self, id: int) -> None: ...

  def save(self, output: ByteBuffer, net: bool) -> None: ...

  def setMaxPresets(self, m: int) -> None: ...

  def setPreset(self, id: int, name: str, frequency: int) -> None: ...

  def setPresetFreq(self, id: int, frequency: int) -> None: ...

  def setPresetName(self, id: int, name: str) -> None: ...

  def setPresets(self, p: ArrayList[PresetEntry]) -> None: ...

  def __init__(self): ...


class PresetEntry:

  def getFrequency(self) -> int: ...

  def getName(self) -> str: ...

  def setFrequency(self, f: int) -> None: ...

  def setName(self, n: str) -> None: ...

  @overload
  def __init__(self):
    self.frequency: int

    self.name: str

  @overload
  def __init__(self, n: str, f: int): ...


class WaveSignalDevice:

  @overload
  def AddDeviceText(self, line: str, r: float, g: float, b: float, guid: str, codes: str, distance: int) -> None: ...

  @overload
  def AddDeviceText(self, player: IsoPlayer, line: str, r: float, g: float, b: float, guid: str, codes: str, distance: int) -> None: ...

  def HasPlayerInRange(self) -> bool: ...

  def getDelta(self) -> float: ...

  def getDeviceData(self) -> DeviceData: ...

  def getSquare(self) -> IsoGridSquare: ...

  def getX(self) -> float: ...

  def getY(self) -> float: ...

  def getZ(self) -> float: ...

  def setDelta(self, d: float) -> None: ...

  def setDeviceData(self, data: DeviceData) -> None: ...

