from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.util import ArrayList, Stack
from zombie.core import Color
from zombie.iso import Vector2

class DataPoint:

  def getIntensity(self) -> float: ...

  def getTime(self) -> float: ...

  def setIntensity(self, intensity: float) -> None: ...

  def setTime(self, time: float) -> None: ...

  def __init__(self, time: float, intensity: float): ...


class EventSound:

  def getColor(self) -> Color: ...

  def getDataPoints(self) -> ArrayList[DataPoint]: ...

  def getName(self) -> str: ...

  def getStorySounds(self) -> ArrayList[StorySound]: ...

  def setColor(self, color: Color) -> None: ...

  def setDataPoints(self, dataPoints: ArrayList[DataPoint]) -> None: ...

  def setName(self, name: str) -> None: ...

  def setStorySounds(self, storySounds: ArrayList[StorySound]) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, name: str): ...


class SLSoundManager:

  DEBUG: bool

  Emitter: StoryEmitter

  ENABLED: bool

  LUA_DEBUG: bool

  def getDebug(self) -> bool: ...

  def getLuaDebug(self) -> bool: ...

  def getRandomBorderPosition(self) -> Vector2: ...

  def getRandomBorderRange(self) -> float: ...

  def getStorySounds(self) -> ArrayList[StorySound]: ...

  def init(self) -> None: ...

  def loadSounds(self) -> None: ...

  def print(self, line: str) -> None: ...

  def render(self) -> None: ...

  def renderDebug(self) -> None: ...

  def thunderTest(self) -> None: ...

  def update(self, storylineDay: int, hour: int, min: int) -> None: ...

  def updateKeys(self) -> None: ...

  @staticmethod
  def getInstance() -> SLSoundManager: ...


class StoryEmitter:

  def playSound(self, file: str, baseVolume: float, x: float, y: float, z: float, minRange: float, maxRange: float) -> int: ...

  def stopSound(self, channel: int) -> int: ...

  def tick(self) -> None: ...

  def __init__(self):
    self.coordinate3d: bool
    self.instances: ArrayList[StoryEmitter.Sound]
    self.max: int
    self.soundstack: Stack[StoryEmitter.Sound]
    self.tostart: ArrayList[StoryEmitter.Sound]
    self.volumemod: float

  class Sound:

    def __init__(self):
      self.channel: int
      self.maxrange: float
      self.minrange: float
      self.sound: int
      self.volume: float
      self.x: float
      self.y: float
      self.z: float


class StorySound:

  def getBaseVolume(self) -> float: ...

  def getClone(self) -> StorySound: ...

  def getName(self) -> str: ...

  @overload
  def playSound(self) -> int: ...

  @overload
  def playSound(self, volumeOverride: float) -> int: ...

  @overload
  def playSound(self, x: float, y: float, z: float, minRange: float, maxRange: float) -> int: ...

  @overload
  def playSound(self, volumeMod: float, x: float, y: float, z: float, minRange: float, maxRange: float) -> int: ...

  def setBaseVolume(self, baseVolume: float) -> None: ...

  def setName(self, name: str) -> None: ...

  def __init__(self, name: str, baseVol: float): ...


class StorySoundEvent:

  def getEventSounds(self) -> ArrayList[EventSound]: ...

  def getName(self) -> str: ...

  def setEventSounds(self, eventSounds: ArrayList[EventSound]) -> None: ...

  def setName(self, name: str) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, name: str): ...

