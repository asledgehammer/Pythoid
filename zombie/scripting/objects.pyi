from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from gnu.trove.list.array import TFloatArrayList
from java.lang import Integer, Boolean, Enum, Double
from java.util import ArrayList, Map, LinkedList, HashMap, Stack, List, TreeMap
from java.util.function import Predicate
from org.joml import Vector3f, Vector2f
from se.krka.kahlua.vm import KahluaTable
from zombie.audio import GameSound
from zombie.characterTextures import BloodClothingType
from zombie.characters import IsoGameCharacter
from zombie.characters.skills import PerkFactory
from zombie.core import ImmutableColor
from zombie.core.skinnedmodel.advancedanimation import AnimBoneWeight
from zombie.core.skinnedmodel.model import ModelMesh, Model
from zombie.core.skinnedmodel.population import ClothingItem
from zombie.core.skinnedmodel.runtime import RuntimeAnimationScript
from zombie.core.textures import Texture
from zombie.inventory import InventoryItem, ItemContainer
from zombie.vehicles import VehicleEngineRPM

T = TypeVar('T', default=Any)

class AnimationsMesh(BaseScriptObject):

  def Load(self, name: str, totalFile: str) -> None: ...

  def reset(self) -> None: ...

  def __init__(self):
    self.animationdirectories: ArrayList[str]
    self.meshfile: str
    self.modelmesh: ModelMesh
    self.name: str


class BaseScriptObject:

  def Load(self, name: str, strArray: list[str]) -> None: ...

  def getModule(self) -> ScriptModule: ...

  def __init__(self):
    self.module: ScriptModule


class EvolvedRecipe(BaseScriptObject):

  def Load(self, name: str, strArray: list[str]) -> None: ...

  def addItem(self, baseItem: InventoryItem, usedItem: InventoryItem, chr: IsoGameCharacter) -> InventoryItem: ...

  def getAddIngredientSound(self) -> str: ...

  def getBaseItem(self) -> str: ...

  def getFullResultItem(self) -> str: ...

  def getItemRecipe(self, usedItem: InventoryItem) -> ItemRecipe: ...

  def getItemsCanBeUse(self, chr: IsoGameCharacter, baseItem: InventoryItem, containers: ArrayList[ItemContainer]) -> ArrayList[InventoryItem]: ...

  def getItemsList(self) -> Map[str, ItemRecipe]: ...

  def getMaxItems(self) -> int: ...

  def getName(self) -> str: ...

  def getOriginalname(self) -> str: ...

  def getPossibleItems(self) -> ArrayList[ItemRecipe]: ...

  def getResultItem(self) -> str: ...

  def getUntranslatedName(self) -> str: ...

  def isAllowFrozenItem(self) -> bool: ...

  def isCookable(self) -> bool: ...

  def isHidden(self) -> bool: ...

  def isResultItem(self, item: InventoryItem) -> bool: ...

  def isSpiceAdded(self, baseItem: InventoryItem, spiceItem: InventoryItem) -> bool: ...

  def needToBeCooked(self, itemTest: InventoryItem) -> bool: ...

  def setAllowFrozenItem(self, allow: bool) -> None: ...

  def setIsHidden(self, hide: bool) -> None: ...

  def __init__(self, name: str):
    self.addingredientifcooked: bool
    self.addingredientsound: str
    self.allowfrozenitem: bool
    self.baseitem: str
    self.canaddspicesempty: bool
    self.cookable: bool
    self.displayname: str
    self.hidden: bool
    self.itemslist: Map[str, ItemRecipe]
    self.maxitems: int
    self.name: str
    self.resultitem: str


class Fixing(BaseScriptObject):

  def Load(self, name: str, strArray: list[str]) -> None: ...

  def addRequiredItem(self, require: str) -> None: ...

  def countUses(self, chr: IsoGameCharacter, fixer: Fixing.Fixer, brokenObject: InventoryItem) -> int: ...

  def getConditionModifier(self) -> float: ...

  def getFixers(self) -> LinkedList[Fixing.Fixer]: ...

  def getGlobalItem(self) -> Fixing.Fixer: ...

  def getName(self) -> str: ...

  def getRequiredFixerItems(self, chr: IsoGameCharacter, fixer: Fixing.Fixer, brokenItem: InventoryItem, items: ArrayList[InventoryItem]) -> ArrayList[InventoryItem]: ...

  def getRequiredItem(self) -> ArrayList[str]: ...

  def getRequiredItems(self, chr: IsoGameCharacter, fixer: Fixing.Fixer, brokenItem: InventoryItem) -> ArrayList[InventoryItem]: ...

  def haveGlobalItem(self, chr: IsoGameCharacter) -> InventoryItem: ...

  def haveThisFixer(self, chr: IsoGameCharacter, fixer: Fixing.Fixer, brokenObject: InventoryItem) -> InventoryItem: ...

  def setConditionModifier(self, conditionModifier: float) -> None: ...

  def setGlobalItem(self, globalItem: Fixing.Fixer) -> None: ...

  def setName(self, name: str) -> None: ...

  def usedInFixer(self, itemType: InventoryItem, chr: IsoGameCharacter) -> Fixing.Fixer: ...

  def __init__(self): ...

  class Fixer:

    def getFixerName(self) -> str: ...

    def getFixerSkills(self) -> LinkedList[Fixing.FixerSkill]: ...

    def getNumberOfUse(self) -> int: ...

    def __init__(self, name: str, skills: LinkedList[Fixing.FixerSkill], numberOfUse: int): ...

  class FixerSkill:

    def getSkillLevel(self) -> int: ...

    def getSkillName(self) -> str: ...

    def __init__(self, skillName: str, skillLvl: int): ...

  class PredicateRequired:

    def negate(self) -> Predicate[T]: ...

    @overload
    def test(self, arg0: object) -> bool: ...

    @overload
    def test(self, arg0: object) -> bool: ...

    @overload
    def test(self, arg0: InventoryItem) -> bool: ...

    @staticmethod
    def isEqual(arg0: object) -> Predicate[T]: ...


class GameSoundScript(BaseScriptObject):

  def Load(self, name: str, totalFile: str) -> None: ...

  def reset(self) -> None: ...

  def __init__(self):
    self.gamesound: GameSound


class Item(BaseScriptObject):

  NetIDToItem: HashMap[Integer, str]

  NetItemToID: HashMap[str, Integer]

  def DoParam(self, str: str) -> None: ...

  def InstanceItem(self, param: str) -> InventoryItem: ...

  def Load(self, name: str, strArray: list[str]) -> None: ...

  def getAcceptItemFunction(self) -> str: ...

  def getActualWeight(self) -> float: ...

  def getAmmoType(self) -> str: ...

  def getBloodClothingType(self) -> ArrayList[BloodClothingType]: ...

  def getBodyLocation(self) -> str: ...

  def getBoredomChange(self) -> float: ...

  def getBreakSound(self) -> str: ...

  def getBringToBearSound(self) -> str: ...

  def getBulletOutSound(self) -> str: ...

  def getCanStoreWater(self) -> bool: ...

  def getCategories(self) -> ArrayList[str]: ...

  def getChanceToFall(self) -> int: ...

  def getCloseSound(self) -> str: ...

  def getClothingItem(self) -> str: ...

  def getClothingItemAsset(self) -> ClothingItem: ...

  def getClothingItemExtra(self) -> ArrayList[str]: ...

  def getClothingItemExtraOption(self) -> ArrayList[str]: ...

  def getConditionLowerChance(self) -> int: ...

  def getConditionMax(self) -> int: ...

  def getCookingSound(self) -> str: ...

  def getCount(self) -> int: ...

  def getCountDownSound(self) -> str: ...

  def getCustomEatSound(self) -> str: ...

  def getDaysFresh(self) -> int: ...

  def getDaysTotallyRotten(self) -> int: ...

  def getDisplayCategory(self) -> str: ...

  def getDisplayName(self) -> str: ...

  def getDoorDamage(self) -> int: ...

  def getDoorHitSound(self) -> str: ...

  def getEatType(self) -> str: ...

  def getEjectAmmoSound(self) -> str: ...

  def getEjectAmmoStartSound(self) -> str: ...

  def getEjectAmmoStopSound(self) -> str: ...

  def getEnduranceChange(self) -> float: ...

  def getEnduranceMod(self) -> float: ...

  def getEquipSound(self) -> str: ...

  def getExistsAsVanilla(self) -> bool: ...

  def getExplosionSound(self) -> str: ...

  def getFabricType(self) -> str: ...

  def getFileAbsPath(self) -> str: ...

  def getFillFromDispenserSound(self) -> str: ...

  def getFillFromTapSound(self) -> str: ...

  def getFullName(self) -> str: ...

  def getHungerChange(self) -> float: ...

  def getIcon(self) -> str: ...

  def getIconsForTexture(self) -> ArrayList[str]: ...

  def getImpactSound(self) -> str: ...

  def getInsertAmmoSound(self) -> str: ...

  def getInsertAmmoStartSound(self) -> str: ...

  def getInsertAmmoStopSound(self) -> str: ...

  def getInsulation(self) -> float: ...

  def getKnockdownMod(self) -> float: ...

  def getLevelSkillTrained(self) -> int: ...

  def getLuaCreate(self) -> str: ...

  def getMapID(self) -> str: ...

  def getMaxDamage(self) -> float: ...

  def getMaxHitCount(self) -> int: ...

  def getMaxLevelTrained(self) -> int: ...

  def getMaxRange(self) -> float: ...

  def getMinAngle(self) -> float: ...

  def getMinDamage(self) -> float: ...

  def getMinimumSwingTime(self) -> float: ...

  def getMinutesToBurn(self) -> int: ...

  def getMinutesToCook(self) -> int: ...

  def getModID(self) -> str: ...

  def getModuleName(self) -> str: ...

  def getNPCSoundBoost(self) -> float: ...

  def getName(self) -> str: ...

  def getNoiseDuration(self) -> int: ...

  def getNormalTexture(self) -> Texture: ...

  def getNumLevelsTrained(self) -> int: ...

  def getNumberOfPages(self) -> int: ...

  def getObsolete(self) -> bool: ...

  def getOpenSound(self) -> str: ...

  def getOtherCharacterVolumeBoost(self) -> float: ...

  def getOtherHandRequire(self) -> str: ...

  def getPaletteChoices(self) -> Stack[str]: ...

  def getPalettesStart(self) -> str: ...

  def getPhysicsObject(self) -> str: ...

  def getPlaceMultipleSound(self) -> str: ...

  def getPlaceOneSound(self) -> str: ...

  def getPushBackMod(self) -> float: ...

  def getPutInSound(self) -> str: ...

  def getRainFactor(self) -> float: ...

  def getRecordedMediaCat(self) -> str: ...

  def getRegistry_id(self) -> int: ...

  def getReplaceOnDeplete(self) -> str: ...

  def getReplaceOnUse(self) -> str: ...

  def getReplaceType(self, key: str) -> str: ...

  def getReplaceTypes(self) -> str: ...

  def getReplaceTypesMap(self) -> HashMap[str, str]: ...

  def getReplaceWhenUnequip(self) -> str: ...

  def getShellFallSound(self) -> str: ...

  def getSkillTrained(self) -> str: ...

  def getSoundByID(self, ID: str) -> str: ...

  def getSoundParameter(self, parameterName: str) -> str: ...

  def getSoundRadius(self) -> int: ...

  def getSoundVolume(self) -> int: ...

  def getSplatNumber(self) -> int: ...

  def getSpriteName(self) -> str: ...

  def getStaticModel(self) -> str: ...

  def getStressChange(self) -> float: ...

  def getSwingAmountBeforeImpact(self) -> float: ...

  def getSwingAnim(self) -> str: ...

  def getSwingSound(self) -> str: ...

  def getSwingTime(self) -> float: ...

  def getTags(self) -> ArrayList[str]: ...

  def getTeachedRecipes(self) -> List[str]: ...

  def getTemperature(self) -> float: ...

  def getThirstChange(self) -> float: ...

  def getTicksPerEquipUse(self) -> float: ...

  def getToHitModifier(self) -> float: ...

  def getType(self) -> Item.Type: ...

  def getTypeString(self) -> str: ...

  def getUnequipSound(self) -> str: ...

  def getUnhappyChange(self) -> float: ...

  def getUseDelta(self) -> float: ...

  def getWaterresist(self) -> float: ...

  def getWeaponSprite(self) -> str: ...

  def getWeaponWeight(self) -> float: ...

  def getWeightEmpty(self) -> float: ...

  def getWeightWet(self) -> float: ...

  def getWindresist(self) -> float: ...

  def hasReplaceType(self, key: str) -> bool: ...

  def isAlcoholic(self) -> bool: ...

  def isAlwaysKnockdown(self) -> bool: ...

  def isAlwaysWelcomeGift(self) -> bool: ...

  def isAngleFalloff(self) -> bool: ...

  def isCanBandage(self) -> bool: ...

  def isCanBarricade(self) -> bool: ...

  def isCantAttackWithLowestEndurance(self) -> bool: ...

  def isCantEat(self) -> Boolean: ...

  def isConditionAffectsCapacity(self) -> bool: ...

  def isCosmetic(self) -> bool: ...

  def isDangerousUncooked(self) -> bool: ...

  def isDisappearOnUse(self) -> bool: ...

  def isHidden(self) -> bool: ...

  def isIsCookable(self) -> bool: ...

  def isKnockBackOnNoDeath(self) -> bool: ...

  def isManuallyRemoveSpentRounds(self) -> bool: ...

  def isMultipleHitConditionAffected(self) -> bool: ...

  def isOtherHandUse(self) -> bool: ...

  def isRangeFalloff(self) -> bool: ...

  def isRanged(self) -> bool: ...

  def isShareDamage(self) -> bool: ...

  def isShareEndurance(self) -> bool: ...

  def isSplatBloodOnNoDeath(self) -> bool: ...

  def isUseEndurance(self) -> bool: ...

  def isUseSelf(self) -> bool: ...

  def isUseWhileEquipped(self) -> bool: ...

  def isUseWhileUnequipped(self) -> bool: ...

  def isWorldRender(self) -> Boolean: ...

  def resolveItemTypes(self) -> None: ...

  def resolveModelScripts(self) -> None: ...

  def setActualWeight(self, ActualWeight: float) -> None: ...

  def setAlcoholic(self, Alcoholic: bool) -> None: ...

  def setAlwaysKnockdown(self, AlwaysKnockdown: bool) -> None: ...

  def setAlwaysWelcomeGift(self, AlwaysWelcomeGift: bool) -> None: ...

  def setAmmoType(self, AmmoType: str) -> None: ...

  def setAngleFalloff(self, AngleFalloff: bool) -> None: ...

  def setBodyLocation(self, bodyLocation: str) -> None: ...

  def setBoredomChange(self, BoredomChange: float) -> None: ...

  def setCanBandage(self, CanBandage: bool) -> None: ...

  def setCanBarricade(self, CanBarricade: bool) -> None: ...

  def setCantAttackWithLowestEndurance(self, CantAttackWithLowestEndurance: bool) -> None: ...

  def setCategories(self, Categories: ArrayList[str]) -> None: ...

  def setClothingItemAsset(self, asset: ClothingItem) -> None: ...

  def setConditionLowerChance(self, ConditionLowerChance: int) -> None: ...

  def setConditionMax(self, ConditionMax: int) -> None: ...

  def setCount(self, Count: int) -> None: ...

  def setDangerousUncooked(self, DangerousUncooked: bool) -> None: ...

  def setDaysFresh(self, DaysFresh: int) -> None: ...

  def setDaysTotallyRotten(self, DaysTotallyRotten: int) -> None: ...

  def setDisappearOnUse(self, DisappearOnUse: bool) -> None: ...

  def setDisplayName(self, DisplayName: str) -> None: ...

  def setDoorDamage(self, DoorDamage: int) -> None: ...

  def setDoorHitSound(self, DoorHitSound: str) -> None: ...

  def setEnduranceChange(self, EnduranceChange: float) -> None: ...

  def setEnduranceMod(self, EnduranceMod: float) -> None: ...

  def setHungerChange(self, HungerChange: float) -> None: ...

  def setIcon(self, Icon: str) -> None: ...

  def setImpactSound(self, ImpactSound: str) -> None: ...

  def setInsulation(self, f: float) -> None: ...

  def setIsCookable(self, IsCookable: bool) -> None: ...

  def setKnockBackOnNoDeath(self, KnockBackOnNoDeath: bool) -> None: ...

  def setKnockdownMod(self, KnockdownMod: float) -> None: ...

  def setLuaCreate(self, functionName: str) -> None: ...

  def setMaxDamage(self, MaxDamage: float) -> None: ...

  def setMaxHitCount(self, MaxHitCount: int) -> None: ...

  def setMaxRange(self, MaxRange: float) -> None: ...

  def setMinAngle(self, MinAngle: float) -> None: ...

  def setMinDamage(self, MinDamage: float) -> None: ...

  def setMinimumSwingTime(self, MinimumSwingTime: float) -> None: ...

  def setMinutesToBurn(self, MinutesToBurn: int) -> None: ...

  def setMinutesToCook(self, MinutesToCook: int) -> None: ...

  def setModID(self, modid: str) -> None: ...

  def setMultipleHitConditionAffected(self, MultipleHitConditionAffected: bool) -> None: ...

  def setNPCSoundBoost(self, NPCSoundBoost: float) -> None: ...

  def setName(self, name: str) -> None: ...

  def setOtherCharacterVolumeBoost(self, OtherCharacterVolumeBoost: float) -> None: ...

  def setOtherHandRequire(self, OtherHandRequire: str) -> None: ...

  def setOtherHandUse(self, OtherHandUse: bool) -> None: ...

  def setPaletteChoices(self, PaletteChoices: Stack[str]) -> None: ...

  def setPalettesStart(self, PalettesStart: str) -> None: ...

  def setPhysicsObject(self, PhysicsObject: str) -> None: ...

  def setPushBackMod(self, PushBackMod: float) -> None: ...

  def setRangeFalloff(self, RangeFalloff: bool) -> None: ...

  def setRanged(self, Ranged: bool) -> None: ...

  def setRegistry_id(self, id: int) -> None: ...

  def setReplaceOnDeplete(self, ReplaceOnDeplete: str) -> None: ...

  def setReplaceOnUse(self, ReplaceOnUse: str) -> None: ...

  def setShareDamage(self, ShareDamage: bool) -> None: ...

  def setShareEndurance(self, ShareEndurance: bool) -> None: ...

  def setSoundRadius(self, SoundRadius: int) -> None: ...

  def setSoundVolume(self, SoundVolume: int) -> None: ...

  def setSplatBloodOnNoDeath(self, SplatBloodOnNoDeath: bool) -> None: ...

  def setSplatNumber(self, SplatNumber: int) -> None: ...

  def setSpriteName(self, SpriteName: str) -> None: ...

  def setStressChange(self, StressChange: float) -> None: ...

  def setSwingAmountBeforeImpact(self, SwingAmountBeforeImpact: float) -> None: ...

  def setSwingAnim(self, SwingAnim: str) -> None: ...

  def setSwingSound(self, SwingSound: str) -> None: ...

  def setSwingTime(self, SwingTime: float) -> None: ...

  def setTemperature(self, temperature: float) -> None: ...

  def setThirstChange(self, ThirstChange: float) -> None: ...

  def setTicksPerEquipUse(self, TicksPerEquipUse: int) -> None: ...

  def setToHitModifier(self, ToHitModifier: float) -> None: ...

  def setType(self, type: Item.Type) -> None: ...

  def setUnhappyChange(self, UnhappyChange: float) -> None: ...

  def setUseDelta(self, UseDelta: float) -> None: ...

  def setUseEndurance(self, UseEndurance: bool) -> None: ...

  def setUseSelf(self, UseSelf: bool) -> None: ...

  def setUseWhileEquipped(self, UseWhileEquipped: bool) -> None: ...

  def setUseWhileUnequipped(self, UseWhileUnequipped: bool) -> None: ...

  def setWaterresist(self, w: float) -> None: ...

  def setWeaponSprite(self, WeaponSprite: str) -> None: ...

  def setWeaponWeight(self, WeaponWeight: float) -> None: ...

  def setWeightEmpty(self, weight: float) -> None: ...

  def setWeightWet(self, weight: float) -> None: ...

  def setWindresist(self, w: float) -> None: ...

  def toString(self) -> str: ...

  def __init__(self):
    self.activateditem: bool
    self.actualweight: float
    self.aimingmod: float
    self.aimingperkcritmodifier: int
    self.aimingperkhitchancemodifier: float
    self.aimingperkminanglemodifier: float
    self.aimingperkrangemodifier: float
    self.alcoholic: bool
    self.alwaysknockdown: bool
    self.alwayswelcomegift: bool
    self.ammotype: str
    self.anglefalloff: bool
    self.attachmentsprovided: ArrayList[str]
    self.attachmenttype: str
    self.basevolumerange: float
    self.bodylocation: str
    self.boredomchange: float
    self.canbandage: bool
    self.canbarricade: bool
    self.canbeequipped: str
    self.canbewrite: bool
    self.canhaveholes: Boolean
    self.cannedfood: bool
    self.canstack: bool
    self.canstorewater: bool
    self.cantattackwithlowestendurance: bool
    self.canteat: bool
    self.capacity: int
    self.categories: ArrayList[str]
    self.closekillmove: str
    self.clothingextrasubmenu: str
    self.clothingitem: str
    self.clothingitemextra: ArrayList[str]
    self.clothingitemextraoption: ArrayList[str]
    self.colorblue: int
    self.colorgreen: int
    self.colorred: int
    self.combatspeedmodifier: float
    self.conditionlowerchance: int
    self.conditionmax: int
    self.consolidateoption: str
    self.count: int
    self.criticalchance: float
    self.customcontextmenu: str
    self.dangerousuncooked: bool
    self.daysfresh: int
    self.daystotallyrotten: int
    self.defaultmoddata: KahluaTable
    self.disappearonuse: bool
    self.displaycategory: str
    self.displayname: str
    self.doordamage: int
    self.doorhitsound: str
    self.eattype: str
    self.endurancechange: float
    self.endurancemod: float
    self.equippednosprint: bool
    self.fabrictype: str
    self.fatiguechange: float
    self.fishinglure: bool
    self.foodtype: str
    self.guntype: str
    self.hairdye: bool
    self.herbalisttype: str
    self.hidden: bool
    self.hitanglemod: float
    self.hitchance: int
    self.hitfloorsound: str
    self.hitsound: str
    self.hungerchange: float
    self.icon: str
    self.idleanim: str
    self.impactsound: str
    self.isaimedfirearm: bool
    self.isaimedhandweapon: bool
    self.iscookable: bool
    self.ishightier: bool
    self.isportable: bool
    self.istelevision: bool
    self.iswatersource: bool
    self.itemname: str
    self.knockbackonnodeath: bool
    self.knockdownmod: float
    self.lightdistance: int
    self.lightstrength: float
    self.lvlskilltrained: int
    self.makeuptype: str
    self.map: str
    self.maxammo: int
    self.maxchannel: int
    self.maxdamage: float
    self.maxhitcount: int
    self.maxrange: float
    self.mechanicsitem: bool
    self.medical: bool
    self.micrange: int
    self.minangle: float
    self.minchannel: int
    self.mindamage: float
    self.minimumswingtime: float
    self.minrange: float
    self.minutestoburn: int
    self.minutestocook: int
    self.moduledottype: str
    self.multiplehitconditionaffected: bool
    self.name: str
    self.neckprotectionmodifier: float
    self.normaltexture: Texture
    self.npcsoundboost: float
    self.numberofpages: int
    self.numlevelstrained: int
    self.obsolete: bool
    self.othercharactervolumeboost: float
    self.otherhandrequire: str
    self.otherhanduse: bool
    self.palettechoices: Stack[str]
    self.palettesstart: str
    self.physicsobject: str
    self.piercingbullets: bool
    self.poison: bool
    self.poisondetectionlevel: Integer
    self.poisonpower: int
    self.primaryanimmask: str
    self.primaryanimmaskattachment: str
    self.projectilecount: int
    self.protectfromrainwhenequipped: bool
    self.pushbackmod: float
    self.ranged: bool
    self.rangefalloff: bool
    self.recoildelay: int
    self.removeunhappinesswhencooked: bool
    self.replaceinprimaryhand: str
    self.replaceinsecondhand: str
    self.replaceoncooked: List[str]
    self.replaceondeplete: str
    self.replaceonuse: str
    self.replaceonuseon: str
    self.replaceprimaryhand: ItemReplacement
    self.replacesecondhand: ItemReplacement
    self.replacewhenunequip: str
    self.requireinhandorinventory: ArrayList[str]
    self.requiresequippedbothhands: bool
    self.runanim: str
    self.runspeedmodifier: float
    self.scaleworldicon: float
    self.secondaryanimmask: str
    self.secondaryanimmaskattachment: str
    self.sharedamage: bool
    self.shareendurance: bool
    self.skilltrained: str
    self.soundgain: float
    self.soundradius: int
    self.soundvolume: int
    self.specialtextures: List[Texture]
    self.specialworldtexturenames: List[str]
    self.splatbloodonnodeath: bool
    self.splatnumber: int
    self.splatsize: float
    self.spritename: str
    self.stoppower: float
    self.stresschange: float
    self.subcategory: str
    self.survivalgear: bool
    self.swingamountbeforeimpact: float
    self.swinganim: str
    self.swingsound: str
    self.swingtime: float
    self.tags: ArrayList[str]
    self.temperature: float
    self.thirstchange: float
    self.ticksperequipuse: int
    self.tohitmodifier: float
    self.tooltip: str
    self.torchcone: bool
    self.torchdot: float
    self.transmitrange: int
    self.trap: Boolean
    self.twohandweapon: bool
    self.twoway: bool
    self.type: Item.Type
    self.unhappychange: float
    self.usedelta: float
    self.useendurance: bool
    self.usesbattery: bool
    self.useself: bool
    self.usewhileequipped: bool
    self.usewhileunequipped: bool
    self.useworlditem: bool
    self.vehicletype: int
    self.weaponlength: float
    self.weaponsprite: str
    self.weaponweight: float
    self.weightempty: float
    self.weightreduction: int
    self.weightwet: float
    self.worldobjectsprite: str
    self.worldstaticmodel: str
    self.worldtexture: Texture
    self.worldtexturename: str

  class Type(Enum):

    AlarmClock: Item.Type

    AlarmClockClothing: Item.Type

    Clothing: Item.Type

    Container: Item.Type

    Drainable: Item.Type

    Food: Item.Type

    Key: Item.Type

    KeyRing: Item.Type

    Literature: Item.Type

    Map: Item.Type

    Moveable: Item.Type

    Normal: Item.Type

    Radio: Item.Type

    Weapon: Item.Type

    WeaponPart: Item.Type

    @staticmethod
    def valueOf(arg0: str) -> Item.Type: ...

    @staticmethod
    def values() -> list[Item.Type]: ...


class ItemRecipe:

  def getFullType(self) -> str: ...

  def getModule(self) -> str: ...

  def getName(self) -> str: ...

  def getUse(self) -> Integer: ...

  def setModule(self, module: str) -> None: ...

  def __init__(self, name: str, module: str, use: Integer):
    self.cooked: Boolean
    self.name: str
    self.use: Integer


class ItemReplacement:

  def __init__(self):
    self.attachment: str
    self.clothingitem: ClothingItem
    self.clothingitemname: str
    self.maskvariablename: str
    self.maskvariablevalue: str


class MannequinScript(BaseScriptObject):

  def Load(self, name: str, totalFile: str) -> None: ...

  def getAnimSet(self) -> str: ...

  def getAnimState(self) -> str: ...

  def getModelScriptName(self) -> str: ...

  def getName(self) -> str: ...

  def getOutfit(self) -> str: ...

  def getPose(self) -> str: ...

  def getTexture(self) -> str: ...

  def isFemale(self) -> bool: ...

  def reset(self) -> None: ...

  def setAnimSet(self, str: str) -> None: ...

  def setAnimState(self, str: str) -> None: ...

  def setFemale(self, b: bool) -> None: ...

  def setModelScriptName(self, str: str) -> None: ...

  def setOutfit(self, str: str) -> None: ...

  def setPose(self, str: str) -> None: ...

  def setTexture(self, str: str) -> None: ...

  def __init__(self): ...


class ModelAttachment:

  def getBone(self) -> str: ...

  def getCanAttach(self) -> ArrayList[str]: ...

  def getId(self) -> str: ...

  def getOffset(self) -> Vector3f: ...

  def getRotate(self) -> Vector3f: ...

  def getZOffset(self) -> float: ...

  def isUpdateConstraint(self) -> bool: ...

  def setBone(self, bone: str) -> None: ...

  def setCanAttach(self, canAttach: ArrayList[str]) -> None: ...

  def setId(self, id: str) -> None: ...

  def setUpdateConstraint(self, updateConstraint: bool) -> None: ...

  def setZOffset(self, zoffset: float) -> None: ...

  def __init__(self, id: str): ...


class ModelScript(BaseScriptObject):

  DEFAULT_SHADER_NAME: str

  def Load(self, name: str, totalFile: str) -> None: ...

  def addAttachment(self, attach: ModelAttachment) -> ModelAttachment: ...

  def addAttachmentAt(self, index: int, attach: ModelAttachment) -> ModelAttachment: ...

  def getAttachment(self, index: int) -> ModelAttachment: ...

  def getAttachmentById(self, id: str) -> ModelAttachment: ...

  def getAttachmentCount(self) -> int: ...

  def getFileName(self) -> str: ...

  def getFullType(self) -> str: ...

  def getMeshName(self) -> str: ...

  def getName(self) -> str: ...

  def getShaderName(self) -> str: ...

  @overload
  def getTextureName(self) -> str: ...

  @overload
  def getTextureName(self, allowNull: bool) -> str: ...

  @overload
  def removeAttachment(self, index: int) -> ModelAttachment: ...

  @overload
  def removeAttachment(self, attach: ModelAttachment) -> ModelAttachment: ...

  def reset(self) -> None: ...

  @staticmethod
  def ScriptsLoaded() -> None: ...

  def __init__(self):
    self.animationsmesh: str
    self.boneweights: ArrayList[AnimBoneWeight]
    self.bstatic: bool
    self.filename: str
    self.invertx: bool
    self.loadedmodel: Model
    self.m_attachments: ArrayList[ModelAttachment]
    self.meshname: str
    self.name: str
    self.scale: float
    self.shadername: str
    self.texturename: str


class ModelWeaponPart:

  def __init__(self):
    self.attachmentnameself: str
    self.attachmentparent: str
    self.modelname: str
    self.parttype: str


class MovableRecipe(Recipe):

  def getPrimaryTools(self) -> Recipe.Source: ...

  def getSecondaryTools(self) -> Recipe.Source: ...

  def getWorldSprite(self) -> str: ...

  def getXpPerk(self) -> PerkFactory.Perk: ...

  def hasXpPerk(self) -> bool: ...

  def isValid(self) -> bool: ...

  def setName(self, name: str) -> None: ...

  def setOnCreate(self, onCreate: str) -> None: ...

  def setOnXP(self, onXP: str) -> None: ...

  def setRequiredSkill(self, perk: PerkFactory.Perk, level: int) -> None: ...

  def setResult(self, resultItem: str, count: int) -> None: ...

  def setSource(self, sourceItem: str) -> None: ...

  def setTime(self, time: float) -> None: ...

  def setTool(self, tools: str, isPrimary: bool) -> None: ...

  def setValid(self, valid: bool) -> None: ...

  def setWorldSprite(self, worldSprite: str) -> None: ...

  def setXpPerk(self, perk: PerkFactory.Perk) -> None: ...

  def __init__(self): ...


class Recipe(BaseScriptObject):

  def DoResult(self, type: str) -> None: ...

  def DoSource(self, type: str) -> None: ...

  def FindIndexOf(self, a: InventoryItem) -> int: ...

  def Load(self, name: str, strArray: list[str]) -> None: ...

  def addRequiredSkill(self, perk: PerkFactory.Perk, level: int) -> None: ...

  def clearRequiredSkills(self) -> None: ...

  def findSource(self, sourceFullType: str) -> Recipe.Source: ...

  def getAnimNode(self) -> str: ...

  def getCanPerform(self) -> str: ...

  def getCategory(self) -> str: ...

  def getFullType(self) -> str: ...

  def getHeat(self) -> float: ...

  def getLuaCreate(self) -> str: ...

  def getLuaGiveXP(self) -> str: ...

  def getLuaGrab(self) -> str: ...

  def getLuaTest(self) -> str: ...

  def getName(self) -> str: ...

  def getNearItem(self) -> str: ...

  def getNumberOfNeededItem(self) -> int: ...

  def getOriginalname(self) -> str: ...

  def getProp1(self) -> str: ...

  def getProp2(self) -> str: ...

  def getRequiredSkill(self, index: int) -> Recipe.RequiredSkill: ...

  def getRequiredSkillCount(self) -> int: ...

  def getRequiredSkills(self) -> ArrayList[str]: ...

  def getResult(self) -> Recipe.Result: ...

  def getSound(self) -> str: ...

  def getSource(self) -> ArrayList[Recipe.Source]: ...

  def getTimeToMake(self) -> float: ...

  def getTooltip(self) -> str: ...

  def getWaterAmountNeeded(self) -> int: ...

  def isAllowDestroyedItem(self) -> bool: ...

  def isAllowFrozenItem(self) -> bool: ...

  def isAllowRottenItem(self) -> bool: ...

  def isCanBeDoneFromFloor(self) -> bool: ...

  def isDestroy(self, sourceFullType: str) -> bool: ...

  def isHidden(self) -> bool: ...

  def isInSameInventory(self) -> bool: ...

  def isKeep(self, sourceFullType: str) -> bool: ...

  def isRemoveResultItem(self) -> bool: ...

  def isStopOnRun(self) -> bool: ...

  def isStopOnWalk(self) -> bool: ...

  def needToBeLearn(self) -> bool: ...

  def noBrokenItems(self) -> bool: ...

  def setAllowDestroyedItem(self, allow: bool) -> None: ...

  def setAllowFrozenItem(self, allow: bool) -> None: ...

  def setAllowRottenItem(self, arg0: bool) -> None: ...

  def setAnimNode(self, animNode: str) -> None: ...

  def setCanBeDoneFromFloor(self, canBeDoneFromFloor: bool) -> None: ...

  def setCanPerform(self, functionName: str) -> None: ...

  def setCategory(self, category: str) -> None: ...

  def setIsHidden(self, hide: bool) -> None: ...

  def setLuaCreate(self, functionName: str) -> None: ...

  def setLuaGiveXP(self, functionName: str) -> None: ...

  def setLuaGrab(self, functionName: str) -> None: ...

  def setLuaTest(self, functionName: str) -> None: ...

  def setNearItem(self, nearItem: str) -> None: ...

  def setNeedToBeLearn(self, needToBeLearn: bool) -> None: ...

  def setOriginalname(self, originalname: str) -> None: ...

  def setProp1(self, prop1: str) -> None: ...

  def setProp2(self, prop2: str) -> None: ...

  def setRemoveResultItem(self, removeResultItem: bool) -> None: ...

  def setSound(self, sound: str) -> None: ...

  def setStopOnRun(self, stop: bool) -> None: ...

  def setStopOnWalk(self, stop: bool) -> None: ...

  def __init__(self):
    self.allowdestroyeditem: bool
    self.allowfrozenitem: bool
    self.allowrottenitem: bool
    self.hidden: bool
    self.insameinventory: bool
    self.luacreate: str
    self.luagivexp: str
    self.luagrab: str
    self.luatest: str
    self.name: str
    self.result: Recipe.Result
    self.skillrequired: ArrayList[Recipe.RequiredSkill]
    self.sound: str
    self.source: ArrayList[Recipe.Source]
    self.timetomake: float

  class Result:

    def getCount(self) -> int: ...

    def getDrainableCount(self) -> int: ...

    def getFullType(self) -> str: ...

    def getModule(self) -> str: ...

    def getType(self) -> str: ...

    def setCount(self, count: int) -> None: ...

    def setDrainableCount(self, count: int) -> None: ...

    def setModule(self, module: str) -> None: ...

    def setType(self, type: str) -> None: ...

    def __init__(self):
      self.count: int
      self.drainablecount: int
      self.module: str
      self.type: str

  class Source:

    def getCount(self) -> float: ...

    def getItems(self) -> ArrayList[str]: ...

    def getOnlyItem(self) -> str: ...

    def getUse(self) -> float: ...

    def isDestroy(self) -> bool: ...

    def isKeep(self) -> bool: ...

    def setCount(self, count: float) -> None: ...

    def setDestroy(self, destroy: bool) -> None: ...

    def setKeep(self, keep: bool) -> None: ...

    def setUse(self, use: float) -> None: ...

    def __init__(self):
      self.count: float
      self.destroy: bool
      self.keep: bool
      self.use: float

  class RequiredSkill:

    def getLevel(self) -> int: ...

    def getPerk(self) -> PerkFactory.Perk: ...

    def __init__(self, perk: PerkFactory.Perk, level: int): ...


class ScriptModule(BaseScriptObject):

  def CheckExitPoints(self) -> bool: ...

  def Load(self, name: str, strArray: str) -> None: ...

  def ParseScript(self, totalFile: str) -> None: ...

  def ParseScriptPP(self, totalFile: str) -> None: ...

  def Reset(self) -> None: ...

  @overload
  def getItem(self, name: str) -> Item: ...

  @overload
  def getItem(self, name: str) -> Item: ...

  def getModelScript(self, name: str) -> ModelScript: ...

  def getName(self) -> str: ...

  @overload
  def getRecipe(self, name: str) -> Recipe: ...

  @overload
  def getRecipe(self, name: str) -> Recipe: ...

  def getSpecificItem(self, name: str) -> Item: ...

  def getVehicle(self, name: str) -> VehicleScript: ...

  def getVehicleEngineRPM(self, name: str) -> VehicleEngineRPM: ...

  def getVehicleTemplate(self, name: str) -> VehicleTemplate: ...

  def __init__(self):
    self.animationsmeshmap: HashMap[str, AnimationsMesh]
    self.disabled: bool
    self.evolvedrecipemap: ArrayList[EvolvedRecipe]
    self.fixingmap: HashMap[str, Fixing]
    self.gamesoundlist: ArrayList[GameSoundScript]
    self.gamesoundmap: HashMap[str, GameSoundScript]
    self.imports: ArrayList[str]
    self.itemmap: HashMap[str, Item]
    self.mannequinscriptmap: HashMap[str, MannequinScript]
    self.modelscriptmap: TreeMap[str, ModelScript]
    self.name: str
    self.recipebyname: HashMap[str, Recipe]
    self.recipemap: ArrayList[Recipe]
    self.recipeswithdotinname: HashMap[str, Recipe]
    self.runtimeanimationscriptmap: HashMap[str, RuntimeAnimationScript]
    self.soundtimelinemap: HashMap[str, SoundTimelineScript]
    self.uniquerecipemap: ArrayList[UniqueRecipe]
    self.value: str
    self.vehicleenginerpmmap: HashMap[str, VehicleEngineRPM]
    self.vehiclemap: HashMap[str, VehicleScript]
    self.vehicletemplatemap: HashMap[str, VehicleTemplate]


class SoundTimelineScript(BaseScriptObject):

  def Load(self, name: str, totalFile: str) -> None: ...

  def getEventName(self) -> str: ...

  def getPosition(self, id: str) -> int: ...

  def reset(self) -> None: ...

  def __init__(self): ...


class UniqueRecipe(BaseScriptObject):

  def Load(self, name: str, strArray: list[str]) -> None: ...

  def getBaseRecipe(self) -> str: ...

  def getBoredomBonus(self) -> int: ...

  def getHapinessBonus(self) -> int: ...

  def getHungerBonus(self) -> int: ...

  def getItems(self) -> ArrayList[str]: ...

  def getName(self) -> str: ...

  def setBaseRecipe(self, baseRecipe: str) -> None: ...

  def setBoredomBonus(self, boredomBonus: int) -> None: ...

  def setHapinessBonus(self, hapinessBonus: int) -> None: ...

  def setHungerBonus(self, hungerBonus: int) -> None: ...

  def setName(self, name: str) -> None: ...

  def __init__(self, name: str): ...


class VehicleScript(BaseScriptObject):

  def Load(self, name: str, totalFile: str) -> None: ...

  def Loaded(self) -> None: ...

  def addAttachment(self, attach: ModelAttachment) -> ModelAttachment: ...

  def addAttachmentAt(self, index: int, attach: ModelAttachment) -> ModelAttachment: ...

  def copyAreasFrom(self, other: VehicleScript, spec: str) -> None: ...

  def copyPartsFrom(self, other: VehicleScript, spec: str) -> None: ...

  def copyPassengersFrom(self, other: VehicleScript, spec: str) -> None: ...

  def copyWheelsFrom(self, other: VehicleScript, spec: str) -> None: ...

  def getArea(self, index: int) -> VehicleScript.Area: ...

  def getAreaById(self, id: str) -> VehicleScript.Area: ...

  def getAreaCount(self) -> int: ...

  def getAttachment(self, index: int) -> ModelAttachment: ...

  def getAttachmentById(self, id: str) -> ModelAttachment: ...

  def getAttachmentCount(self) -> int: ...

  def getCenterOfMassOffset(self) -> Vector3f: ...

  def getCrawlOffsets(self) -> TFloatArrayList: ...

  def getEngineForce(self) -> float: ...

  def getEngineIdleSpeed(self) -> float: ...

  def getEngineLoudness(self) -> int: ...

  def getEngineQuality(self) -> int: ...

  def getEngineRPMType(self) -> str: ...

  def getEngineRepairLevel(self) -> int: ...

  def getExtents(self) -> Vector3f: ...

  def getExtentsOffset(self) -> Vector2f: ...

  def getFileName(self) -> str: ...

  def getForcedHue(self) -> float: ...

  def getForcedSat(self) -> float: ...

  def getForcedVal(self) -> float: ...

  def getFrontEndHealth(self) -> int: ...

  def getFullName(self) -> str: ...

  def getGearRatioCount(self) -> int: ...

  def getHasSiren(self) -> bool: ...

  def getHeadlightConfigLevel(self) -> int: ...

  def getIndexOfAreaById(self, id: str) -> int: ...

  def getIndexOfPartById(self, id: str) -> int: ...

  def getIndexOfWheelById(self, id: str) -> int: ...

  def getLightbar(self) -> VehicleScript.LightBar: ...

  def getMass(self) -> float: ...

  def getMechanicType(self) -> int: ...

  def getModel(self) -> VehicleScript.Model: ...

  @overload
  def getModelById(self, id: str) -> VehicleScript.Model: ...

  @overload
  def getModelById(self, id: str, models: ArrayList[VehicleScript.Model]) -> VehicleScript.Model: ...

  def getModelByIndex(self, index: int) -> VehicleScript.Model: ...

  def getModelCount(self) -> int: ...

  def getModelOffset(self) -> Vector3f: ...

  def getModelScale(self) -> float: ...

  def getName(self) -> str: ...

  def getOffroadEfficiency(self) -> float: ...

  def getPart(self, index: int) -> VehicleScript.Part: ...

  def getPartById(self, id: str) -> VehicleScript.Part: ...

  def getPartCount(self) -> int: ...

  def getPassenger(self, index: int) -> VehicleScript.Passenger: ...

  def getPassengerById(self, id: str) -> VehicleScript.Passenger: ...

  def getPassengerCount(self) -> int: ...

  def getPassengerIndex(self, id: str) -> int: ...

  def getPhysicsChassisShape(self) -> Vector3f: ...

  def getPhysicsShape(self, index: int) -> VehicleScript.PhysicsShape: ...

  def getPhysicsShapeCount(self) -> int: ...

  def getPlayerDamageProtection(self) -> float: ...

  def getRearEndHealth(self) -> int: ...

  def getRollInfluence(self) -> float: ...

  def getSeats(self) -> int: ...

  def getShadowExtents(self) -> Vector2f: ...

  def getShadowOffset(self) -> Vector2f: ...

  def getSkin(self, index: int) -> VehicleScript.Skin: ...

  def getSkinCount(self) -> int: ...

  def getSounds(self) -> VehicleScript.Sounds: ...

  def getSteeringClamp(self, speed: float) -> float: ...

  def getSteeringIncrement(self) -> float: ...

  def getStorageCapacity(self) -> int: ...

  def getSuspensionCompression(self) -> float: ...

  def getSuspensionDamping(self) -> float: ...

  def getSuspensionRestLength(self) -> float: ...

  def getSuspensionStiffness(self) -> float: ...

  def getSuspensionTravel(self) -> float: ...

  def getTextures(self) -> VehicleScript.Skin: ...

  def getWheel(self, index: int) -> VehicleScript.Wheel: ...

  def getWheelById(self, id: str) -> VehicleScript.Wheel: ...

  def getWheelCount(self) -> int: ...

  def getWheelFriction(self) -> float: ...

  def globMatch(self, pattern: str, str: str) -> bool: ...

  @overload
  def removeAttachment(self, index: int) -> ModelAttachment: ...

  @overload
  def removeAttachment(self, attach: ModelAttachment) -> ModelAttachment: ...

  def setEngineRPMType(self, engineRPMType: str) -> None: ...

  def setEngineRepairLevel(self, engineRepairLevel: int) -> None: ...

  def setForcedHue(self, forcedHue: float) -> None: ...

  def setForcedSat(self, forcedSat: float) -> None: ...

  def setForcedVal(self, forcedVal: float) -> None: ...

  def setMechanicType(self, mechanicType: int) -> None: ...

  def setModelScale(self, scale: float) -> None: ...

  def setOffroadEfficiency(self, offroadEfficiency: float) -> None: ...

  def setPlayerDamageProtection(self, playerDamageProtection: float) -> None: ...

  def setSeats(self, seats: int) -> None: ...

  def toBullet(self) -> None: ...

  def __init__(self):
    self.gearratio: list[float]
    self.gearratiocount: int
    self.issmallvehicle: bool
    self.leftsirencol: ImmutableColor
    self.m_attachments: ArrayList[ModelAttachment]
    self.maxspeed: float
    self.rightsirencol: ImmutableColor
    self.spawnoffsety: float
    self.texturemaskenable: bool

  class Skin:

    def copyMissingFrom(self, other: VehicleScript.Skin) -> None: ...

    def __init__(self):
      self.texture: str
      self.texturedamage1overlay: str
      self.texturedamage1shell: str
      self.texturedamage2overlay: str
      self.texturedamage2shell: str
      self.texturedata: Texture
      self.texturedatadamage1overlay: Texture
      self.texturedatadamage1shell: Texture
      self.texturedatadamage2overlay: Texture
      self.texturedatadamage2shell: Texture
      self.texturedatalights: Texture
      self.texturedatamask: Texture
      self.texturedatarust: Texture
      self.texturedatashadow: Texture
      self.texturelights: str
      self.texturemask: str
      self.texturerust: str
      self.textureshadow: str

  class LightBar:

    def __init__(self):
      self.enable: bool
      self.soundsiren0: str
      self.soundsiren1: str
      self.soundsiren2: str

  class Sounds:

    def __init__(self):
      self.backsignal: str
      self.backsignalenable: bool
      self.engine: str
      self.enginestart: str
      self.engineturnoff: str
      self.horn: str
      self.hornenable: bool
      self.ignitionfail: str
      self.ignitionfailnopower: str

  class Area:

    def getH(self) -> Double: ...

    def getId(self) -> str: ...

    def getW(self) -> Double: ...

    def getX(self) -> Double: ...

    def getY(self) -> Double: ...

    def setH(self, d: Double) -> None: ...

    def setW(self, d: Double) -> None: ...

    def setX(self, d: Double) -> None: ...

    def setY(self, d: Double) -> None: ...

    def __init__(self):
      self.h: float
      self.id: str
      self.w: float
      self.x: float
      self.y: float

  class Model:

    def getId(self) -> str: ...

    def getOffset(self) -> Vector3f: ...

    def getRotate(self) -> Vector3f: ...

    def __init__(self):
      self.file: str
      self.id: str
      self.offset: Vector3f
      self.rotate: Vector3f
      self.scale: float

  class Part:

    def isMechanicRequireKey(self) -> bool: ...

    def isRepairMechanic(self) -> bool: ...

    def setMechanicRequireKey(self, mechanicRequireKey: bool) -> None: ...

    def setRepairMechanic(self, repairMechanic: bool) -> None: ...

    def __init__(self):
      self.anims: ArrayList[VehicleScript.Anim]
      self.area: str
      self.bsetallmodelsvisible: bool
      self.category: str
      self.container: VehicleScript.Container
      self.door: VehicleScript.Door
      self.haslightsrear: bool
      self.id: str
      self.itemtype: ArrayList[str]
      self.luafunctions: HashMap[str, str]
      self.mechanicrequirekey: bool
      self.models: ArrayList[VehicleScript.Model]
      self.parent: str
      self.repairmechanic: bool
      self.specificitem: bool
      self.tables: HashMap[str, KahluaTable]
      self.wheel: str
      self.window: VehicleScript.Window

  class Passenger:

    def getId(self) -> str: ...

    def getPosition(self, index: int) -> VehicleScript.Position: ...

    def getPositionById(self, id: str) -> VehicleScript.Position: ...

    def getPositionCount(self) -> int: ...

    def getSwitchSeatById(self, id: str) -> VehicleScript.Passenger.SwitchSeat: ...

    def makeCopy(self) -> VehicleScript.Passenger: ...

    def __init__(self):
      self.anims: ArrayList[VehicleScript.Anim]
      self.area: str
      self.door: str
      self.door2: str
      self.hasroof: bool
      self.id: str
      self.positions: ArrayList[VehicleScript.Position]
      self.showpassenger: bool
      self.switchseats: ArrayList[VehicleScript.Passenger.SwitchSeat]

    class SwitchSeat:

      def getId(self) -> str: ...

      def makeCopy(self) -> VehicleScript.Passenger.SwitchSeat: ...

      def __init__(self):
        self.anim: str
        self.id: str
        self.rate: float
        self.seat: int
        self.sound: str

  class PhysicsShape:

    def getExtents(self) -> Vector3f: ...

    def getOffset(self) -> Vector3f: ...

    def getRadius(self) -> float: ...

    def getRotate(self) -> Vector3f: ...

    def getTypeString(self) -> str: ...

    def setRadius(self, radius: float) -> None: ...

    def __init__(self):
      self.extents: Vector3f
      self.offset: Vector3f
      self.radius: float
      self.rotate: Vector3f
      self.type: int

  class Wheel:

    def getId(self) -> str: ...

    def getOffset(self) -> Vector3f: ...

    def __init__(self):
      self.front: bool
      self.id: str
      self.model: str
      self.offset: Vector3f
      self.radius: float
      self.width: float

  class Position:

    def getArea(self) -> str: ...

    def getId(self) -> str: ...

    def getOffset(self) -> Vector3f: ...

    def getRotate(self) -> Vector3f: ...

    def __init__(self):
      self.area: str
      self.id: str
      self.offset: Vector3f
      self.rotate: Vector3f

  class Container:

    def __init__(self):
      self.capacity: int
      self.conditionaffectscapacity: bool
      self.contenttype: str
      self.luatest: str
      self.seat: int
      self.seatid: str

  class Anim:

    def __init__(self):
      self.angle: Vector3f
      self.anim: str
      self.banimate: bool
      self.bloop: bool
      self.breverse: bool
      self.id: str
      self.offset: Vector3f
      self.rate: float
      self.sound: str

  class Door:

    def __init__(self): ...

  class Window:

    def __init__(self):
      self.openable: bool


class VehicleTemplate(BaseScriptObject):

  def getScript(self) -> VehicleScript: ...

  def __init__(self, module: ScriptModule, name: str, body: str):
    self.body: str
    self.name: str
    self.script: VehicleScript

