from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.lang import Enum
from java.nio import ByteBuffer
from java.util import ArrayList
from zombie.characters import IsoLivingCharacter, IsoZombie, IsoGameCharacter, HitReactionNetworkAI, IsoPlayer
from zombie.characters.BodyDamage import BodyPart
from zombie.characters.skills import PerkFactory
from zombie.core.network import ByteBufferWriter
from zombie.core.raknet import UdpConnection
from zombie.inventory import InventoryItem
from zombie.inventory.types import HandWeapon
from zombie.iso import IsoMovingObject, IsoObject, IsoGridSquare
from zombie.iso.objects import IsoWindow
from zombie.vehicles import BaseVehicle

class AttackVars:

  def clear(self) -> None: ...

  def copy(self, original: AttackVars) -> None: ...

  @overload
  def getDescription(self) -> str: ...

  @overload
  def getDescription(self) -> str: ...

  @overload
  def getPacketSizeBytes(self) -> int: ...

  @overload
  def getPacketSizeBytes(self) -> int: ...

  def getWeapon(self, owner: IsoLivingCharacter) -> HandWeapon: ...

  def isConsistent(self) -> bool: ...

  def log(self, arg0: UdpConnection, arg1: str) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  def setWeapon(self, weapon: HandWeapon) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  def __init__(self):
    self.baimatfloor: bool
    self.bclosekill: bool
    self.bdoshove: bool
    self.recoildelay: int
    self.targetonground: MovingObject
    self.targetsprone: ArrayList[HitInfo]
    self.targetsstanding: ArrayList[HitInfo]
    self.usechargedelta: float


class Bite:

  @overload
  def getDescription(self) -> str: ...

  @overload
  def getDescription(self) -> str: ...

  def getPacketSizeBytes(self) -> int: ...

  def isConsistent(self) -> bool: ...

  def log(self, arg0: UdpConnection, arg1: str) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  def set(self, wielder: IsoZombie) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  def __init__(self): ...


class Character(Instance):

  def getCharacter(self) -> IsoGameCharacter: ...

  @overload
  def getDescription(self) -> str: ...

  @overload
  def getDescription(self) -> str: ...

  def getPacketSizeBytes(self) -> int: ...

  @overload
  def getX(self) -> float: ...

  @overload
  def getX(self) -> float: ...

  @overload
  def getY(self) -> float: ...

  @overload
  def getY(self) -> float: ...

  @overload
  def isConsistent(self) -> bool: ...

  @overload
  def isConsistent(self) -> bool: ...

  def log(self, arg0: UdpConnection, arg1: str) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  def set(self, character: IsoGameCharacter) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  def __init__(self): ...


class Fall:

  @overload
  def getDescription(self) -> str: ...

  @overload
  def getDescription(self) -> str: ...

  def getPacketSizeBytes(self) -> int: ...

  def isConsistent(self) -> bool: ...

  def log(self, arg0: UdpConnection, arg1: str) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  def process(self, character: IsoGameCharacter) -> None: ...

  @overload
  def set(self, hitReaction: HitReactionNetworkAI) -> None: ...

  @overload
  def set(self, dropPositionX: float, dropPositionY: float, dropPositionZ: int, dropDirection: float) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  def __init__(self): ...


class Hit:

  def getDamage(self) -> float: ...

  @overload
  def getDescription(self) -> str: ...

  @overload
  def getDescription(self) -> str: ...

  def getPacketSizeBytes(self) -> int: ...

  def isConsistent(self) -> bool: ...

  def log(self, arg0: UdpConnection, arg1: str) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  def set(self, ignore: bool, damage: float, hitForce: float, hitDirectionX: float, hitDirectionY: float) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  def __init__(self): ...


class HitCharacterPacket:

  @overload
  def getDescription(self) -> str: ...

  @overload
  def getDescription(self) -> str: ...

  def getPacketSizeBytes(self) -> int: ...

  def isConsistent(self) -> bool: ...

  def isRelevant(self, connection: UdpConnection) -> bool: ...

  def log(self, arg0: UdpConnection, arg1: str) -> None: ...

  def parse(self, arg0: ByteBuffer, arg1: UdpConnection) -> None: ...

  def tryProcess(self) -> None: ...

  def tryProcessInternal(self) -> None: ...

  def validate(self, connection: UdpConnection) -> bool: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  @staticmethod
  def process(b: ByteBuffer) -> HitCharacterPacket: ...

  def __init__(self, hitType: HitCharacterPacket.HitType): ...

  class HitType(Enum):

    Max: HitCharacterPacket.HitType

    Min: HitCharacterPacket.HitType

    PlayerHitPlayer: HitCharacterPacket.HitType

    PlayerHitSquare: HitCharacterPacket.HitType

    PlayerHitVehicle: HitCharacterPacket.HitType

    PlayerHitZombie: HitCharacterPacket.HitType

    VehicleHitPlayer: HitCharacterPacket.HitType

    VehicleHitZombie: HitCharacterPacket.HitType

    ZombieHitPlayer: HitCharacterPacket.HitType

    @staticmethod
    def valueOf(arg0: str) -> HitCharacterPacket.HitType: ...

    @staticmethod
    def values() -> list[HitCharacterPacket.HitType]: ...


class HitInfo:

  @overload
  def getDescription(self) -> str: ...

  @overload
  def getDescription(self) -> str: ...

  def getObject(self) -> IsoMovingObject: ...

  @overload
  def getPacketSizeBytes(self) -> int: ...

  @overload
  def getPacketSizeBytes(self) -> int: ...

  @overload
  def init(self, obj: IsoWindow, dot: float, distSq: float) -> HitInfo: ...

  @overload
  def init(self, obj: IsoMovingObject, dot: float, distSq: float, x: float, y: float, z: float) -> HitInfo: ...

  def isConsistent(self) -> bool: ...

  def log(self, arg0: UdpConnection, arg1: str) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  def __init__(self):
    self.chance: int
    self.distsq: float
    self.dot: float
    self.object: MovingObject
    self.window: NetObject
    self.x: float
    self.y: float
    self.z: float


class IMovable:

  def getSpeed(self) -> float: ...

  def isVehicle(self) -> bool: ...


class IPositional:

  def getX(self) -> float: ...

  def getY(self) -> float: ...


class Instance:

  @overload
  def getDescription(self) -> str: ...

  @overload
  def getDescription(self) -> str: ...

  def getPacketSizeBytes(self) -> int: ...

  @overload
  def isConsistent(self) -> bool: ...

  @overload
  def isConsistent(self) -> bool: ...

  def log(self, arg0: UdpConnection, arg1: str) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  def set(self, ID: int) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  def __init__(self): ...


class MovingObject:

  @overload
  def getDescription(self) -> str: ...

  @overload
  def getDescription(self) -> str: ...

  def getMovingObject(self) -> IsoMovingObject: ...

  @overload
  def getPacketSizeBytes(self) -> int: ...

  @overload
  def getPacketSizeBytes(self) -> int: ...

  def isConsistent(self) -> bool: ...

  def log(self, arg0: UdpConnection, arg1: str) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  def setMovingObject(self, value: IsoMovingObject) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  def __init__(self):
    self.objecttypenone: int
    self.objecttypeobject: int
    self.objecttypeplayer: int
    self.objecttypevehicle: int
    self.objecttypezombie: int


class NetObject:

  @overload
  def getDescription(self) -> str: ...

  @overload
  def getDescription(self) -> str: ...

  def getObject(self) -> IsoObject: ...

  @overload
  def getPacketSizeBytes(self) -> int: ...

  @overload
  def getPacketSizeBytes(self) -> int: ...

  def isConsistent(self) -> bool: ...

  def log(self, arg0: UdpConnection, arg1: str) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  def setObject(self, value: IsoObject) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  def __init__(self):
    self.objecttypenone: int
    self.objecttypeobject: int


class Perk:

  @overload
  def getDescription(self) -> str: ...

  @overload
  def getDescription(self) -> str: ...

  def getPacketSizeBytes(self) -> int: ...

  def getPerk(self) -> PerkFactory.Perk: ...

  @overload
  def isConsistent(self) -> bool: ...

  @overload
  def isConsistent(self) -> bool: ...

  def log(self, arg0: UdpConnection, arg1: str) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  def set(self, _perk: PerkFactory.Perk) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  def __init__(self): ...


class Player(Character):

  def getCharacter(self) -> IsoGameCharacter: ...

  @overload
  def getDescription(self) -> str: ...

  @overload
  def getDescription(self) -> str: ...

  def getPacketSizeBytes(self) -> int: ...

  def getPlayer(self) -> IsoPlayer: ...

  @overload
  def isConsistent(self) -> bool: ...

  @overload
  def isConsistent(self) -> bool: ...

  def log(self, arg0: UdpConnection, arg1: str) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  def parsePlayer(self, connection: UdpConnection) -> None: ...

  def set(self, player: IsoPlayer, isCriticalHit: bool) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  def __init__(self): ...


class PlayerBodyPart:

  def getBodyPart(self) -> BodyPart: ...

  @overload
  def getDescription(self) -> str: ...

  @overload
  def getDescription(self) -> str: ...

  def getPacketSizeBytes(self) -> int: ...

  def isConsistent(self) -> bool: ...

  def log(self, arg0: UdpConnection, arg1: str) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, character: IsoGameCharacter) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  def set(self, _bodyPart: BodyPart) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  def __init__(self): ...


class PlayerHitPacket(HitCharacterPacket):

  @overload
  def getDescription(self) -> str: ...

  @overload
  def getDescription(self) -> str: ...

  def getPacketSizeBytes(self) -> int: ...

  @overload
  def isConsistent(self) -> bool: ...

  @overload
  def isConsistent(self) -> bool: ...

  def isRelevant(self, connection: UdpConnection) -> bool: ...

  def log(self, arg0: UdpConnection, arg1: str) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  def set(self, wielder: IsoPlayer, weapon: HandWeapon, isCriticalHit: bool) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  def __init__(self, hitType: HitCharacterPacket.HitType): ...


class PlayerHitPlayerPacket(PlayerHitPacket):

  @overload
  def getDescription(self) -> str: ...

  @overload
  def getDescription(self) -> str: ...

  def getPacketSizeBytes(self) -> int: ...

  @overload
  def isConsistent(self) -> bool: ...

  @overload
  def isConsistent(self) -> bool: ...

  def log(self, arg0: UdpConnection, arg1: str) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  def set(self, wielder: IsoPlayer, target: IsoPlayer, weapon: HandWeapon, damage: float, ignore: bool, range: float, isCriticalHit: bool, hitHead: bool) -> None: ...

  def validate(self, connection: UdpConnection) -> bool: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  def __init__(self): ...


class PlayerHitSquarePacket(PlayerHitPacket):

  @overload
  def getDescription(self) -> str: ...

  @overload
  def getDescription(self) -> str: ...

  def getPacketSizeBytes(self) -> int: ...

  @overload
  def isConsistent(self) -> bool: ...

  @overload
  def isConsistent(self) -> bool: ...

  def isRelevant(self, connection: UdpConnection) -> bool: ...

  def log(self, arg0: UdpConnection, arg1: str) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  def set(self, wielder: IsoPlayer, weapon: HandWeapon, isCriticalHit: bool) -> None: ...

  def validate(self, connection: UdpConnection) -> bool: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  def __init__(self): ...


class PlayerHitVehiclePacket(PlayerHitPacket):

  @overload
  def getDescription(self) -> str: ...

  @overload
  def getDescription(self) -> str: ...

  def getPacketSizeBytes(self) -> int: ...

  @overload
  def isConsistent(self) -> bool: ...

  @overload
  def isConsistent(self) -> bool: ...

  def log(self, arg0: UdpConnection, arg1: str) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  def set(self, wielder: IsoPlayer, vehicle: BaseVehicle, weapon: HandWeapon, isCriticalHit: bool) -> None: ...

  def validate(self, connection: UdpConnection) -> bool: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  def __init__(self): ...


class PlayerHitZombiePacket(PlayerHitPacket):

  @overload
  def getDescription(self) -> str: ...

  @overload
  def getDescription(self) -> str: ...

  def getPacketSizeBytes(self) -> int: ...

  @overload
  def isConsistent(self) -> bool: ...

  @overload
  def isConsistent(self) -> bool: ...

  def log(self, arg0: UdpConnection, arg1: str) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  def set(self, wielder: IsoPlayer, target: IsoZombie, weapon: HandWeapon, damage: float, ignore: bool, range: float, isCriticalHit: bool, helmetFall: bool, hitHead: bool) -> None: ...

  def validate(self, connection: UdpConnection) -> bool: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  def __init__(self): ...


class PlayerItem(Instance):

  @overload
  def getDescription(self) -> str: ...

  @overload
  def getDescription(self) -> str: ...

  def getItem(self) -> InventoryItem: ...

  def getPacketSizeBytes(self) -> int: ...

  @overload
  def isConsistent(self) -> bool: ...

  @overload
  def isConsistent(self) -> bool: ...

  def log(self, arg0: UdpConnection, arg1: str) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  def set(self, _item: InventoryItem) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  def __init__(self): ...


class Square:

  @overload
  def getDescription(self) -> str: ...

  @overload
  def getDescription(self) -> str: ...

  def getPacketSizeBytes(self) -> int: ...

  def getSquare(self) -> IsoGridSquare: ...

  @overload
  def getX(self) -> float: ...

  @overload
  def getX(self) -> float: ...

  @overload
  def getY(self) -> float: ...

  @overload
  def getY(self) -> float: ...

  def getZ(self) -> float: ...

  @overload
  def isConsistent(self) -> bool: ...

  @overload
  def isConsistent(self) -> bool: ...

  def log(self, arg0: UdpConnection, arg1: str) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  @overload
  def set(self, character: IsoGameCharacter) -> None: ...

  @overload
  def set(self, _square: IsoGridSquare) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  def __init__(self): ...


class Vehicle(Instance):

  @overload
  def getDescription(self) -> str: ...

  @overload
  def getDescription(self) -> str: ...

  def getPacketSizeBytes(self) -> int: ...

  @overload
  def getX(self) -> float: ...

  @overload
  def getX(self) -> float: ...

  @overload
  def getY(self) -> float: ...

  @overload
  def getY(self) -> float: ...

  @overload
  def isConsistent(self) -> bool: ...

  @overload
  def isConsistent(self) -> bool: ...

  def log(self, arg0: UdpConnection, arg1: str) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  def set(self, vehicle: BaseVehicle) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  def __init__(self): ...


class VehicleHit(Hit):

  @overload
  def getDescription(self) -> str: ...

  @overload
  def getDescription(self) -> str: ...

  def getPacketSizeBytes(self) -> int: ...

  @overload
  def getSpeed(self) -> float: ...

  @overload
  def getSpeed(self) -> float: ...

  def isConsistent(self) -> bool: ...

  @overload
  def isVehicle(self) -> bool: ...

  @overload
  def isVehicle(self) -> bool: ...

  def log(self, arg0: UdpConnection, arg1: str) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  def set(self, ignore: bool, damage: float, hitForce: float, hitDirectionX: float, hitDirectionY: float, vehicleDamage: int, vehicleSpeed: float, isVehicleHitFromBehind: bool, isTargetHitFromBehind: bool) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  def __init__(self):
    self.istargethitfrombehind: bool
    self.isvehiclehitfrombehind: bool
    self.vehicledamage: int
    self.vehiclespeed: float


class VehicleHitPacket(HitCharacterPacket):

  @overload
  def getDescription(self) -> str: ...

  @overload
  def getDescription(self) -> str: ...

  def getPacketSizeBytes(self) -> int: ...

  @overload
  def isConsistent(self) -> bool: ...

  @overload
  def isConsistent(self) -> bool: ...

  def isRelevant(self, connection: UdpConnection) -> bool: ...

  def log(self, arg0: UdpConnection, arg1: str) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  def set(self, wielder: IsoPlayer, vehicle: BaseVehicle, isCriticalHit: bool) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  def __init__(self, hitType: HitCharacterPacket.HitType): ...


class VehicleHitPlayerPacket(VehicleHitPacket):

  @overload
  def getDescription(self) -> str: ...

  @overload
  def getDescription(self) -> str: ...

  def getPacketSizeBytes(self) -> int: ...

  @overload
  def isConsistent(self) -> bool: ...

  @overload
  def isConsistent(self) -> bool: ...

  def log(self, arg0: UdpConnection, arg1: str) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  def set(self, wielder: IsoPlayer, target: IsoPlayer, vehicle: BaseVehicle, damage: float, isTargetHitFromBehind: bool, vehicleDamage: int, vehicleSpeed: float, isVehicleHitFromBehind: bool) -> None: ...

  def validate(self, connection: UdpConnection) -> bool: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  def __init__(self): ...


class VehicleHitZombiePacket(VehicleHitPacket):

  @overload
  def getDescription(self) -> str: ...

  @overload
  def getDescription(self) -> str: ...

  def getPacketSizeBytes(self) -> int: ...

  @overload
  def isConsistent(self) -> bool: ...

  @overload
  def isConsistent(self) -> bool: ...

  def log(self, arg0: UdpConnection, arg1: str) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  def set(self, wielder: IsoPlayer, target: IsoZombie, vehicle: BaseVehicle, damage: float, isTargetHitFromBehind: bool, vehicleDamage: int, vehicleSpeed: float, isVehicleHitFromBehind: bool) -> None: ...

  def validate(self, connection: UdpConnection) -> bool: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  def __init__(self): ...


class Weapon(Instance):

  @overload
  def getDescription(self) -> str: ...

  @overload
  def getDescription(self) -> str: ...

  def getPacketSizeBytes(self) -> int: ...

  @overload
  def isConsistent(self) -> bool: ...

  @overload
  def isConsistent(self) -> bool: ...

  def log(self, arg0: UdpConnection, arg1: str) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, character: IsoLivingCharacter) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  def set(self, weapon: HandWeapon) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  def __init__(self): ...


class WeaponHit(Hit):

  @overload
  def getDescription(self) -> str: ...

  @overload
  def getDescription(self) -> str: ...

  def getPacketSizeBytes(self) -> int: ...

  def isConsistent(self) -> bool: ...

  def log(self, arg0: UdpConnection, arg1: str) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  def set(self, ignore: bool, damage: float, range: float, hitForce: float, hitDirectionX: float, hitDirectionY: float, hitHead: bool) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  def __init__(self): ...


class Zombie(Character):

  def getCharacter(self) -> IsoGameCharacter: ...

  @overload
  def getDescription(self) -> str: ...

  @overload
  def getDescription(self) -> str: ...

  def getPacketSizeBytes(self) -> int: ...

  @overload
  def isConsistent(self) -> bool: ...

  @overload
  def isConsistent(self) -> bool: ...

  def log(self, arg0: UdpConnection, arg1: str) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  def set(self, zombie: IsoZombie, isHelmetFall: bool) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  def __init__(self): ...


class ZombieHitPlayerPacket(HitCharacterPacket):

  @overload
  def getDescription(self) -> str: ...

  @overload
  def getDescription(self) -> str: ...

  def getPacketSizeBytes(self) -> int: ...

  @overload
  def isConsistent(self) -> bool: ...

  @overload
  def isConsistent(self) -> bool: ...

  def isRelevant(self, connection: UdpConnection) -> bool: ...

  def log(self, arg0: UdpConnection, arg1: str) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  def set(self, wielder: IsoZombie, target: IsoPlayer) -> None: ...

  def validate(self, connection: UdpConnection) -> bool: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  def __init__(self): ...

