from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.nio import ByteBuffer
from zombie.core.network import ByteBufferWriter
from zombie.core.raknet import UdpConnection
from zombie.vehicles import VehicleInterpolationData, BaseVehicle

class Physics(VehicleInterpolationData):

  def getDescription(self) -> str: ...

  def getPacketSizeBytes(self) -> int: ...

  @overload
  def isConsistent(self) -> bool: ...

  @overload
  def isConsistent(self) -> bool: ...

  def isRelevant(self, connection: UdpConnection) -> bool: ...

  def log(self, arg0: UdpConnection, arg1: str) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  def process(self) -> None: ...

  def set(self, vehicle: BaseVehicle) -> bool: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  def __init__(self): ...

