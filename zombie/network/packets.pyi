from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.lang import Enum
from java.nio import ByteBuffer
from zombie.characters import IsoPlayer, IsoGameCharacter, IsoZombie, Safety
from zombie.characters.BodyDamage import BodyPart
from zombie.characters.CharacterTimedActions import BaseAction
from zombie.characters.skills import PerkFactory
from zombie.core.network import ByteBufferWriter
from zombie.core.raknet import UdpConnection
from zombie.inventory import InventoryItem
from zombie.iso import IsoMovingObject, IsoGridSquare
from zombie.iso.areas import NonPvpZone, SafeHouse
from zombie.iso.objects import IsoDeadBody
from zombie.network import NetworkVariables, PacketTypes, ServerWorldDatabase
from zombie.network.packets.hit import Instance
from zombie.vehicles import BaseVehicle

class ActionPacket:

  @overload
  def getDescription(self) -> str: ...

  @overload
  def getDescription(self) -> str: ...

  def getPacketSizeBytes(self) -> int: ...

  @overload
  def isConsistent(self) -> bool: ...

  @overload
  def isConsistent(self) -> bool: ...

  def isRelevant(self, connection: UdpConnection) -> bool: ...

  def log(self, arg0: UdpConnection, arg1: str) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  def process(self) -> None: ...

  def set(self, operation: bool, action: BaseAction) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  def __init__(self): ...


class AddXp:

  @overload
  def getDescription(self) -> str: ...

  @overload
  def getDescription(self) -> str: ...

  def getPacketSizeBytes(self) -> int: ...

  @overload
  def isConsistent(self) -> bool: ...

  @overload
  def isConsistent(self) -> bool: ...

  def log(self, arg0: UdpConnection, arg1: str) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  def process(self) -> None: ...

  def set(self, _target: IsoPlayer, _perk: PerkFactory.Perk, _amount: int) -> None: ...

  def validate(self, connection: UdpConnection) -> bool: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  def __init__(self):
    self.target: PlayerID


class CleanBurn:

  @overload
  def getDescription(self) -> str: ...

  @overload
  def getDescription(self) -> str: ...

  def getPacketSizeBytes(self) -> int: ...

  @overload
  def isConsistent(self) -> bool: ...

  @overload
  def isConsistent(self) -> bool: ...

  def log(self, arg0: UdpConnection, arg1: str) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  def process(self) -> None: ...

  def set(self, _wielder: IsoGameCharacter, _target: IsoGameCharacter, _bodyPart: BodyPart, _bandage: InventoryItem) -> None: ...

  def validate(self, connection: UdpConnection) -> bool: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  def __init__(self): ...


class DeadCharacterPacket:

  def getDeathDescription(self) -> str: ...

  @overload
  def getDescription(self) -> str: ...

  @overload
  def getDescription(self) -> str: ...

  def getPacketSizeBytes(self) -> int: ...

  @overload
  def isConsistent(self) -> bool: ...

  @overload
  def isConsistent(self) -> bool: ...

  def log(self, arg0: UdpConnection, arg1: str) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  def process(self) -> None: ...

  def set(self, character: IsoGameCharacter) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  def __init__(self):
    self.id: int


class DeadPlayerPacket(DeadCharacterPacket):

  @overload
  def getDescription(self) -> str: ...

  @overload
  def getDescription(self) -> str: ...

  def getPacketSizeBytes(self) -> int: ...

  def getPlayer(self) -> IsoPlayer: ...

  def isConsistent(self) -> bool: ...

  def log(self, arg0: UdpConnection, arg1: str) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  def process(self) -> None: ...

  def set(self, character: IsoGameCharacter) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  def __init__(self): ...


class DeadZombiePacket(DeadCharacterPacket):

  @overload
  def getDescription(self) -> str: ...

  @overload
  def getDescription(self) -> str: ...

  def getPacketSizeBytes(self) -> int: ...

  def getZombie(self) -> IsoZombie: ...

  def isConsistent(self) -> bool: ...

  def log(self, arg0: UdpConnection, arg1: str) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  def process(self) -> None: ...

  def set(self, character: IsoGameCharacter) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  def __init__(self): ...


class Disinfect:

  @overload
  def getDescription(self) -> str: ...

  @overload
  def getDescription(self) -> str: ...

  def getPacketSizeBytes(self) -> int: ...

  @overload
  def isConsistent(self) -> bool: ...

  @overload
  def isConsistent(self) -> bool: ...

  def log(self, arg0: UdpConnection, arg1: str) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  def process(self) -> None: ...

  def set(self, _wielder: IsoGameCharacter, _target: IsoGameCharacter, _bodyPart: BodyPart, _alcohol: InventoryItem) -> None: ...

  def validate(self, connection: UdpConnection) -> bool: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  def __init__(self): ...


class EventPacket:

  MAX_PLAYER_EVENTS: int

  @overload
  def getDescription(self) -> str: ...

  @overload
  def getDescription(self) -> str: ...

  def getPacketSizeBytes(self) -> int: ...

  @overload
  def isConsistent(self) -> bool: ...

  @overload
  def isConsistent(self) -> bool: ...

  def isMovableEvent(self) -> bool: ...

  def isRelevant(self, connection: UdpConnection) -> bool: ...

  def isTimeout(self) -> bool: ...

  def log(self, arg0: UdpConnection, arg1: str) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  def process(self, player: IsoPlayer) -> bool: ...

  def set(self, player: IsoPlayer, eventName: str) -> bool: ...

  def tryProcess(self) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  def __init__(self):
    self.x: float
    self.y: float
    self.z: float

  class EventType(Enum):

    ChargeSpearConnect: EventPacket.EventType

    collideWithWall: EventPacket.EventType

    EventClimbDownRope: EventPacket.EventType

    EventClimbFence: EventPacket.EventType

    EventClimbRope: EventPacket.EventType

    EventClimbWall: EventPacket.EventType

    EventClimbWindow: EventPacket.EventType

    EventCloseWindow: EventPacket.EventType

    EventEmote: EventPacket.EventType

    EventFallClimb: EventPacket.EventType

    EventFishing: EventPacket.EventType

    EventFitness: EventPacket.EventType

    EventOpenWindow: EventPacket.EventType

    EventOverrideItem: EventPacket.EventType

    EventSetActivatedPrimary: EventPacket.EventType

    EventSetActivatedSecondary: EventPacket.EventType

    EventSitOnGround: EventPacket.EventType

    EventSmashWindow: EventPacket.EventType

    EventUpdateFitness: EventPacket.EventType

    Unknown: EventPacket.EventType

    Update: EventPacket.EventType

    wasBumped: EventPacket.EventType

    @staticmethod
    def valueOf(arg0: str) -> EventPacket.EventType: ...

    @staticmethod
    def values() -> list[EventPacket.EventType]: ...


class INetworkPacket:

  def getDescription(self) -> str: ...

  def getPacketSizeBytes(self) -> int: ...

  def isConsistent(self) -> bool: ...

  def log(self, connection: UdpConnection, tag: str) -> None: ...

  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  def write(self, b: ByteBufferWriter) -> None: ...


class PlaySoundPacket:

  @overload
  def getDescription(self) -> str: ...

  @overload
  def getDescription(self) -> str: ...

  def getMovingObject(self) -> IsoMovingObject: ...

  def getName(self) -> str: ...

  @overload
  def getPacketSizeBytes(self) -> int: ...

  @overload
  def getPacketSizeBytes(self) -> int: ...

  @overload
  def isConsistent(self) -> bool: ...

  @overload
  def isConsistent(self) -> bool: ...

  def log(self, arg0: UdpConnection, arg1: str) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  def process(self) -> None: ...

  def set(self, name: str, loop: bool, source: IsoMovingObject) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  def __init__(self): ...


class PlayWorldSoundPacket:

  @overload
  def getDescription(self) -> str: ...

  @overload
  def getDescription(self) -> str: ...

  def getName(self) -> str: ...

  @overload
  def getPacketSizeBytes(self) -> int: ...

  @overload
  def getPacketSizeBytes(self) -> int: ...

  def getX(self) -> int: ...

  def getY(self) -> int: ...

  @overload
  def isConsistent(self) -> bool: ...

  @overload
  def isConsistent(self) -> bool: ...

  def log(self, arg0: UdpConnection, arg1: str) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  def process(self) -> None: ...

  def set(self, name: str, x: int, y: int, z: int) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  def __init__(self): ...


class PlayerDataRequestPacket:

  def getDescription(self) -> str: ...

  def getPacketSizeBytes(self) -> int: ...

  def isConsistent(self) -> bool: ...

  def log(self, arg0: UdpConnection, arg1: str) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  def process(self, connection: UdpConnection) -> None: ...

  def set(self, _playerId: int) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  def __init__(self): ...


class PlayerID(Instance):

  def getCharacter(self) -> IsoPlayer: ...

  @overload
  def getDescription(self) -> str: ...

  @overload
  def getDescription(self) -> str: ...

  def getPacketSizeBytes(self) -> int: ...

  @overload
  def isConsistent(self) -> bool: ...

  @overload
  def isConsistent(self) -> bool: ...

  def log(self, arg0: UdpConnection, arg1: str) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  def parsePlayer(self, connection: UdpConnection) -> None: ...

  def set(self, player: IsoPlayer) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  def __init__(self): ...


class PlayerPacket:

  PACKET_SIZE_BYTES: int

  def copy(self, packet: PlayerPacket) -> None: ...

  def getDescription(self) -> str: ...

  @overload
  def getPacketSizeBytes(self) -> int: ...

  @overload
  def getPacketSizeBytes(self) -> int: ...

  def isConsistent(self) -> bool: ...

  def log(self, arg0: UdpConnection, arg1: str) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  def set(self, chr: IsoPlayer) -> bool: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  def __init__(self):
    self.bleedinglevel: int
    self.booleanvariables: int
    self.collidepointx: float
    self.collidepointy: float
    self.direction: float
    self.footstepsoundradius: int
    self.id: int
    self.movetype: NetworkVariables.PredictionTypes
    self.realdir: int
    self.realt: int
    self.realx: float
    self.realy: float
    self.realz: int
    self.usepathfinder: bool
    self.variables: PlayerVariables
    self.vehicleid: int
    self.vehicleseat: int
    self.x: float
    self.y: float
    self.z: int

  class l_send:

    playerPacket: PlayerPacket

    def __init__(self): ...

  class l_receive:

    playerPacket: PlayerPacket

    def __init__(self): ...


class PlayerVariables:

  def apply(self, player: IsoPlayer) -> None: ...

  def copy(self, vars: PlayerVariables) -> None: ...

  @overload
  def getDescription(self) -> str: ...

  @overload
  def getDescription(self) -> str: ...

  @overload
  def getPacketSizeBytes(self) -> int: ...

  @overload
  def getPacketSizeBytes(self) -> int: ...

  def isConsistent(self) -> bool: ...

  def log(self, arg0: UdpConnection, arg1: str) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  def set(self, player: IsoPlayer) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  def __init__(self): ...

  class NetworkPlayerVariable:

    def set(self, arg0: IsoPlayer, arg1: PlayerVariables.NetworkPlayerVariableIDs) -> None: ...

  class NetworkPlayerVariableIDs(Enum):

    AttackVariationX: PlayerVariables.NetworkPlayerVariableIDs

    AttackVariationY: PlayerVariables.NetworkPlayerVariableIDs

    autoShootVarX: PlayerVariables.NetworkPlayerVariableIDs

    autoShootVarY: PlayerVariables.NetworkPlayerVariableIDs

    DeltaX: PlayerVariables.NetworkPlayerVariableIDs

    DeltaY: PlayerVariables.NetworkPlayerVariableIDs

    IdleSpeed: PlayerVariables.NetworkPlayerVariableIDs

    recoilVarX: PlayerVariables.NetworkPlayerVariableIDs

    recoilVarY: PlayerVariables.NetworkPlayerVariableIDs

    ShoveAimX: PlayerVariables.NetworkPlayerVariableIDs

    ShoveAimY: PlayerVariables.NetworkPlayerVariableIDs

    targetDist: PlayerVariables.NetworkPlayerVariableIDs

    WalkInjury: PlayerVariables.NetworkPlayerVariableIDs

    WalkSpeed: PlayerVariables.NetworkPlayerVariableIDs

    @staticmethod
    def valueOf(arg0: str) -> PlayerVariables.NetworkPlayerVariableIDs: ...

    @staticmethod
    def values() -> list[PlayerVariables.NetworkPlayerVariableIDs]: ...


class RemoveBullet:

  @overload
  def getDescription(self) -> str: ...

  @overload
  def getDescription(self) -> str: ...

  def getPacketSizeBytes(self) -> int: ...

  @overload
  def isConsistent(self) -> bool: ...

  @overload
  def isConsistent(self) -> bool: ...

  def log(self, arg0: UdpConnection, arg1: str) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  def process(self) -> None: ...

  def set(self, _wielder: IsoGameCharacter, _target: IsoGameCharacter, _bodyPart: BodyPart) -> None: ...

  def validate(self, connection: UdpConnection) -> bool: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  def __init__(self): ...


class RemoveCorpseFromMap:

  @overload
  def getDescription(self) -> str: ...

  @overload
  def getDescription(self) -> str: ...

  def getPacketSizeBytes(self) -> int: ...

  @overload
  def isConsistent(self) -> bool: ...

  @overload
  def isConsistent(self) -> bool: ...

  def isRelevant(self, connection: UdpConnection) -> bool: ...

  def log(self, arg0: UdpConnection, arg1: str) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  def process(self) -> None: ...

  def set(self, deadBody: IsoDeadBody) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  def __init__(self): ...


class RemoveGlass:

  @overload
  def getDescription(self) -> str: ...

  @overload
  def getDescription(self) -> str: ...

  def getPacketSizeBytes(self) -> int: ...

  @overload
  def isConsistent(self) -> bool: ...

  @overload
  def isConsistent(self) -> bool: ...

  def log(self, arg0: UdpConnection, arg1: str) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  def process(self) -> None: ...

  def set(self, _wielder: IsoGameCharacter, _target: IsoGameCharacter, _bodyPart: BodyPart, _handPain: bool) -> None: ...

  def validate(self, connection: UdpConnection) -> bool: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  def __init__(self): ...


class RequestDataPacket:

  large_file_bb: ByteBuffer

  @overload
  def getDescription(self) -> str: ...

  @overload
  def getDescription(self) -> str: ...

  def getPacketSizeBytes(self) -> int: ...

  @overload
  def isConsistent(self) -> bool: ...

  @overload
  def isConsistent(self) -> bool: ...

  def log(self, arg0: UdpConnection, arg1: str) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  def process(self, connection: UdpConnection) -> None: ...

  def processServer(self, packetType: PacketTypes.PacketType, connection: UdpConnection) -> None: ...

  def sendConnectingDetails(self, connection: UdpConnection, logonResult: ServerWorldDatabase.LogonResult) -> None: ...

  def setACK(self, id: RequestDataPacket.RequestID) -> None: ...

  def setPartData(self, id: RequestDataPacket.RequestID, bb: ByteBuffer) -> None: ...

  def setPartDataParameters(self, bytesSent: int, partSize: int) -> None: ...

  @overload
  def setRequest(self) -> None: ...

  @overload
  def setRequest(self, id: RequestDataPacket.RequestID) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  def __init__(self): ...

  class RequestType(Enum):

    FullData: RequestDataPacket.RequestType

    # None: RequestDataPacket.RequestType

    PartData: RequestDataPacket.RequestType

    PartDataACK: RequestDataPacket.RequestType

    Request: RequestDataPacket.RequestType

    @staticmethod
    def valueOf(arg0: str) -> RequestDataPacket.RequestType: ...

    @staticmethod
    def values() -> list[RequestDataPacket.RequestType]: ...

  class RequestID(Enum):

    ConnectionDetails: RequestDataPacket.RequestID

    Descriptors: RequestDataPacket.RequestID

    MapZone: RequestDataPacket.RequestID

    MetaGrid: RequestDataPacket.RequestID

    PlayerZombieDescriptors: RequestDataPacket.RequestID

    RadioData: RequestDataPacket.RequestID

    def getDescriptor(self) -> str: ...

    @staticmethod
    def valueOf(arg0: str) -> RequestDataPacket.RequestID: ...

    @staticmethod
    def values() -> list[RequestDataPacket.RequestID]: ...


class SafetyPacket(Safety):

  @overload
  def getDescription(self) -> str: ...

  @overload
  def getDescription(self) -> str: ...

  @overload
  def getPacketSizeBytes(self) -> int: ...

  @overload
  def getPacketSizeBytes(self) -> int: ...

  @overload
  def isConsistent(self) -> bool: ...

  @overload
  def isConsistent(self) -> bool: ...

  @overload
  def log(self, connection: UdpConnection, tag: str) -> None: ...

  @overload
  def log(self, connection: UdpConnection, tag: str) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  def process(self) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, safety: Safety): ...


class StartFire:

  @overload
  def getDescription(self) -> str: ...

  @overload
  def getDescription(self) -> str: ...

  def getPacketSizeBytes(self) -> int: ...

  @overload
  def isConsistent(self) -> bool: ...

  @overload
  def isConsistent(self) -> bool: ...

  def log(self, arg0: UdpConnection, arg1: str) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  def process(self) -> None: ...

  def set(self, gridSquare: IsoGridSquare, _ignite: bool, _fireEnergy: int, Life: int, _smoke: bool) -> None: ...

  def validate(self, connection: UdpConnection) -> bool: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  def __init__(self): ...


class Stitch:

  @overload
  def getDescription(self) -> str: ...

  @overload
  def getDescription(self) -> str: ...

  def getPacketSizeBytes(self) -> int: ...

  @overload
  def isConsistent(self) -> bool: ...

  @overload
  def isConsistent(self) -> bool: ...

  def log(self, arg0: UdpConnection, arg1: str) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  def process(self) -> None: ...

  def set(self, _wielder: IsoGameCharacter, _target: IsoGameCharacter, _bodyPart: BodyPart, _item: InventoryItem, _doIt: bool) -> None: ...

  def validate(self, connection: UdpConnection) -> bool: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  def __init__(self): ...


class StopSoundPacket:

  @overload
  def getDescription(self) -> str: ...

  @overload
  def getDescription(self) -> str: ...

  @overload
  def getPacketSizeBytes(self) -> int: ...

  @overload
  def getPacketSizeBytes(self) -> int: ...

  def isConsistent(self) -> bool: ...

  def log(self, arg0: UdpConnection, arg1: str) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  def process(self) -> None: ...

  def set(self, obj: IsoMovingObject, name: str, trigger: bool) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  def __init__(self): ...


class SyncClothingPacket:

  @overload
  def getDescription(self) -> str: ...

  @overload
  def getDescription(self) -> str: ...

  def getPacketSizeBytes(self) -> int: ...

  @overload
  def isConsistent(self) -> bool: ...

  @overload
  def isConsistent(self) -> bool: ...

  def isEquals(self, player: IsoPlayer, location: str, item: InventoryItem) -> bool: ...

  def log(self, arg0: UdpConnection, arg1: str) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  def set(self, player: IsoPlayer, location: str, item: InventoryItem) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  def __init__(self): ...


class SyncInjuriesPacket:

  @overload
  def getDescription(self) -> str: ...

  @overload
  def getDescription(self) -> str: ...

  @overload
  def getPacketSizeBytes(self) -> int: ...

  @overload
  def getPacketSizeBytes(self) -> int: ...

  def isConsistent(self) -> bool: ...

  def log(self, arg0: UdpConnection, arg1: str) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  def process(self) -> bool: ...

  def set(self, player: IsoPlayer) -> bool: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  def __init__(self):
    self.id: int
    self.player: IsoPlayer
    self.strafespeed: float
    self.walkinjury: float
    self.walkspeed: float


class SyncNonPvpZonePacket:

  @overload
  def getDescription(self) -> str: ...

  @overload
  def getDescription(self) -> str: ...

  def getPacketSizeBytes(self) -> int: ...

  @overload
  def isConsistent(self) -> bool: ...

  @overload
  def isConsistent(self) -> bool: ...

  def log(self, arg0: UdpConnection, arg1: str) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  def process(self) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  def __init__(self):
    self.doremove: bool
    self.zone: NonPvpZone


class SyncSafehousePacket:

  @overload
  def getDescription(self) -> str: ...

  @overload
  def getDescription(self) -> str: ...

  def getPacketSizeBytes(self) -> int: ...

  def isConsistent(self) -> bool: ...

  def log(self, arg0: UdpConnection, arg1: str) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  def process(self) -> None: ...

  def set(self, safehouse: SafeHouse, doRemove: bool) -> None: ...

  def validate(self, connection: UdpConnection) -> bool: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  def __init__(self):
    self.ownerusername: str
    self.remove: bool
    self.safehouse: SafeHouse
    self.shouldcreatechat: bool


class ValidatePacket:

  def getDescription(self) -> str: ...

  def getPacketSizeBytes(self) -> int: ...

  def isConsistent(self) -> bool: ...

  @overload
  def log(self, connection: UdpConnection, tag: str) -> None: ...

  @overload
  def log(self, connection: UdpConnection, tag: str) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  def process(self, connection: UdpConnection) -> None: ...

  def setSalt(self, salt: int, queued: bool, done: bool, details: bool) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  def __init__(self): ...

  class ValidateState(Enum):

    Request: ValidatePacket.ValidateState

    Success: ValidatePacket.ValidateState

    @staticmethod
    def valueOf(arg0: str) -> ValidatePacket.ValidateState: ...

    @staticmethod
    def values() -> list[ValidatePacket.ValidateState]: ...


class VehicleAuthorizationPacket:

  @overload
  def getDescription(self) -> str: ...

  @overload
  def getDescription(self) -> str: ...

  def getPacketSizeBytes(self) -> int: ...

  def isConsistent(self) -> bool: ...

  def log(self, arg0: UdpConnection, arg1: str) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  def process(self) -> None: ...

  def set(self, vehicle: BaseVehicle, connection: UdpConnection) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  def __init__(self): ...


class WaveSignal:

  def getDescription(self) -> str: ...

  def getPacketSizeBytes(self) -> int: ...

  def isConsistent(self) -> bool: ...

  def log(self, arg0: UdpConnection, arg1: str) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  def process(self, connection: UdpConnection) -> None: ...

  def set(self, sourceX: int, sourceY: int, channel: int, msg: str, guid: str, codes: str, r: float, g: float, b: float, signalStrength: int, isTV: bool) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  def __init__(self): ...


class ZombiePacket:

  def copy(self, packet: ZombiePacket) -> None: ...

  def getDescription(self) -> str: ...

  @overload
  def getPacketSizeBytes(self) -> int: ...

  @overload
  def getPacketSizeBytes(self) -> int: ...

  def isConsistent(self) -> bool: ...

  def log(self, arg0: UdpConnection, arg1: str) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  @overload
  def parse(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  def set(self, chr: IsoZombie) -> None: ...

  @overload
  def write(self, bb: ByteBuffer) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  @overload
  def write(self, b: ByteBufferWriter) -> None: ...

  def __init__(self):
    self.booleanvariables: int
    self.descriptorid: int
    self.id: int
    self.movetype: NetworkVariables.PredictionTypes
    self.pfbtarget: int
    self.pfbtargetx: float
    self.pfbtargety: float
    self.pfbtargetz: int
    self.pfbtype: int
    self.realhealth: int
    self.realstate: NetworkVariables.ZombieState
    self.realx: float
    self.realy: float
    self.realz: int
    self.reanimatedbodyid: int
    self.smparamtargetangle: int
    self.speedmod: int
    self.target: int
    self.timesinceseenflesh: int
    self.walktype: NetworkVariables.WalkType
    self.x: float
    self.y: float
    self.z: int

