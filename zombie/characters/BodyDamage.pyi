from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.lang import Enum, Float
from java.nio import ByteBuffer
from java.util import ArrayList, HashMap
from se.krka.kahlua.j2se import KahluaTableImpl
from zombie.characterTextures import BloodBodyPartType
from zombie.characters import IsoZombie, IsoGameCharacter, IsoPlayer
from zombie.inventory import InventoryItem
from zombie.inventory.types import HandWeapon, Food, Literature
from zombie.network import BodyDamageSync

class BodyDamage:

  InfectionLevelToZombify: float

  @overload
  def AddDamage(self, BodyPartIndex: int, val: float) -> None: ...

  @overload
  def AddDamage(self, BodyPart: BodyPartType, Val: float) -> None: ...

  def AddGeneralHealth(self, Val: float) -> None: ...

  def AddRandomDamage(self) -> None: ...

  def AddRandomDamageFromZombie(self, zombie: IsoZombie, hitReaction: str) -> bool: ...

  def DamageFromWeapon(self, weapon: HandWeapon) -> None: ...

  def DisableFakeInfection(self, BodyPartIndex: int) -> None: ...

  def DrawUntexturedQuad(self, X: int, Y: int, Width: int, Height: int, r: float, g: float, b: float, a: float) -> None: ...

  def HasInjury(self) -> bool: ...

  def IncreasePanic(self, NumNewZombiesSeen: int) -> None: ...

  def IncreasePanicFloat(self, delta: float) -> None: ...

  @overload
  def IsBandaged(self, BodyPartIndex: int) -> bool: ...

  @overload
  def IsBandaged(self, BodyPart: BodyPartType) -> bool: ...

  @overload
  def IsBitten(self, BodyPartIndex: int) -> bool: ...

  @overload
  def IsBitten(self, BodyPart: BodyPartType) -> bool: ...

  @overload
  def IsBleeding(self, BodyPartIndex: int) -> bool: ...

  @overload
  def IsBleeding(self, BodyPart: BodyPartType) -> bool: ...

  @overload
  def IsBleedingStemmed(self, BodyPartIndex: int) -> bool: ...

  @overload
  def IsBleedingStemmed(self, BodyPart: BodyPartType) -> bool: ...

  @overload
  def IsCortorised(self, BodyPartIndex: int) -> bool: ...

  @overload
  def IsCortorised(self, BodyPart: BodyPartType) -> bool: ...

  def IsCut(self, BodyPart: BodyPartType) -> bool: ...

  def IsDeepWounded(self, BodyPart: BodyPartType) -> bool: ...

  @overload
  def IsFakeInfected(self) -> bool: ...

  @overload
  def IsFakeInfected(self, BodyPartIndex: int) -> bool: ...

  @overload
  def IsInfected(self) -> bool: ...

  @overload
  def IsInfected(self, BodyPartIndex: int) -> bool: ...

  @overload
  def IsInfected(self, BodyPart: BodyPartType) -> bool: ...

  def IsOnFire(self) -> bool: ...

  @overload
  def IsScratched(self, BodyPartIndex: int) -> bool: ...

  @overload
  def IsScratched(self, BodyPart: BodyPartType) -> bool: ...

  def IsSneezingCoughing(self) -> int: ...

  @overload
  def IsStitched(self, BodyPartIndex: int) -> bool: ...

  @overload
  def IsStitched(self, BodyPart: BodyPartType) -> bool: ...

  @overload
  def IsWounded(self, BodyPartIndex: int) -> bool: ...

  @overload
  def IsWounded(self, BodyPart: BodyPartType) -> bool: ...

  @overload
  def JustAteFood(self, NewFood: Food) -> None: ...

  @overload
  def JustAteFood(self, NewFood: Food, percentage: float) -> None: ...

  def JustDrankBooze(self, food: Food, percentage: float) -> None: ...

  def JustReadSomething(self, lit: Literature) -> None: ...

  def JustTookPainMeds(self) -> None: ...

  def JustTookPill(self, Pill: InventoryItem) -> None: ...

  def OnFire(self, OnFire: bool) -> None: ...

  def ReduceGeneralHealth(self, Val: float) -> None: ...

  def ReducePanic(self) -> None: ...

  def RestoreToFullHealth(self) -> None: ...

  def SetBandaged(self, BodyPartIndex: int, Bandaged: bool, bandageLife: float, isAlcoholic: bool, bandageType: str) -> None: ...

  @overload
  def SetBitten(self, BodyPartIndex: int, Bitten: bool) -> None: ...

  @overload
  def SetBitten(self, BodyPart: BodyPartType, Bitten: bool) -> None: ...

  @overload
  def SetBitten(self, BodyPartIndex: int, Bitten: bool, Infected: bool) -> None: ...

  @overload
  def SetBleeding(self, BodyPartIndex: int, Bleeding: bool) -> None: ...

  @overload
  def SetBleeding(self, BodyPart: BodyPartType, Bleeding: bool) -> None: ...

  @overload
  def SetBleedingStemmed(self, BodyPartIndex: int, BleedingStemmed: bool) -> None: ...

  @overload
  def SetBleedingStemmed(self, BodyPart: BodyPartType, BleedingStemmed: bool) -> None: ...

  @overload
  def SetCortorised(self, BodyPartIndex: int, Cortorised: bool) -> None: ...

  @overload
  def SetCortorised(self, BodyPart: BodyPartType, Cortorised: bool) -> None: ...

  def SetCut(self, BodyPartIndex: int, Cut: bool) -> None: ...

  @overload
  def SetScratched(self, BodyPartIndex: int, Scratched: bool) -> None: ...

  @overload
  def SetScratched(self, BodyPart: BodyPartType, Scratched: bool) -> None: ...

  def SetScratchedFromWeapon(self, BodyPartIndex: int, Scratched: bool) -> None: ...

  @overload
  def SetWounded(self, BodyPartIndex: int, Wounded: bool) -> None: ...

  @overload
  def SetWounded(self, BodyPart: BodyPartType, Wounded: bool) -> None: ...

  def ShowDebugInfo(self) -> None: ...

  def TriggerSneezeCough(self) -> None: ...

  def Update(self) -> None: ...

  def UpdateBoredom(self) -> None: ...

  def UpdateCold(self) -> None: ...

  def UpdatePanicState(self) -> None: ...

  def UpdateStrength(self) -> None: ...

  def UpdateWetness(self) -> None: ...

  def UseBandageOnMostNeededPart(self) -> bool: ...

  def WasBurntToDeath(self) -> bool: ...

  def areBodyPartsBleeding(self, partA: BodyPartType, partB: BodyPartType) -> bool: ...

  def decreaseBodyWetness(self, amount: float) -> None: ...

  def doBodyPartsHaveInjuries(self, partA: BodyPartType, partB: BodyPartType) -> bool: ...

  def doesBodyPartHaveInjury(self, part: BodyPartType) -> bool: ...

  def getApparentInfectionLevel(self) -> float: ...

  def getBodyPart(self, type: BodyPartType) -> BodyPart: ...

  @overload
  def getBodyPartHealth(self, BodyPartIndex: int) -> float: ...

  @overload
  def getBodyPartHealth(self, BodyPart: BodyPartType) -> float: ...

  @overload
  def getBodyPartName(self, BodyPartIndex: int) -> str: ...

  @overload
  def getBodyPartName(self, BodyPart: BodyPartType) -> str: ...

  def getBodyParts(self) -> ArrayList[BodyPart]: ...

  def getBodyPartsLastState(self, type: BodyPartType) -> BodyPartLast: ...

  def getBoredomDecreaseFromReading(self) -> float: ...

  def getBoredomLevel(self) -> float: ...

  def getCatchACold(self) -> float: ...

  def getColdDamageStage(self) -> float: ...

  def getColdProgressionRate(self) -> float: ...

  def getColdReduction(self) -> float: ...

  def getColdSneezeTimerMax(self) -> int: ...

  def getColdSneezeTimerMin(self) -> int: ...

  def getColdStrength(self) -> float: ...

  def getContinualPainIncrease(self) -> float: ...

  def getCurrentNumZombiesVisible(self) -> int: ...

  def getDamageModCount(self) -> int: ...

  def getDrunkIncreaseValue(self) -> float: ...

  def getDrunkReductionValue(self) -> float: ...

  def getFakeInfectionLevel(self) -> float: ...

  def getFoodSicknessLevel(self) -> float: ...

  def getHealth(self) -> float: ...

  def getHealthFromFood(self) -> float: ...

  def getHealthFromFoodTimer(self) -> float: ...

  def getHealthReductionFromSevereBadMoodles(self) -> float: ...

  def getInfectionGrowthRate(self) -> float: ...

  def getInfectionLevel(self) -> float: ...

  def getInfectionMortalityDuration(self) -> float: ...

  def getInfectionTime(self) -> float: ...

  def getInitialBitePain(self) -> float: ...

  def getInitialScratchPain(self) -> float: ...

  def getInitialThumpPain(self) -> float: ...

  def getInitialWoundPain(self) -> float: ...

  def getMildColdSneezeTimerMax(self) -> int: ...

  def getMildColdSneezeTimerMin(self) -> int: ...

  def getNastyColdSneezeTimerMax(self) -> int: ...

  def getNastyColdSneezeTimerMin(self) -> int: ...

  def getNumPartsBitten(self) -> int: ...

  def getNumPartsBleeding(self) -> int: ...

  def getNumPartsScratched(self) -> int: ...

  def getOldNumZombiesVisible(self) -> int: ...

  def getOverallBodyHealth(self) -> float: ...

  def getPainReduction(self) -> float: ...

  def getPainReductionFromMeds(self) -> float: ...

  def getPanicIncreaseValue(self) -> float: ...

  def getPanicIncreaseValueFrame(self) -> float: ...

  def getPanicReductionValue(self) -> float: ...

  def getParentChar(self) -> IsoGameCharacter: ...

  def getPoisonLevel(self) -> float: ...

  def getReducedHealthAddition(self) -> float: ...

  def getRemotePainLevel(self) -> int: ...

  def getSeverlyReducedHealthAddition(self) -> float: ...

  def getSleepingHealthAddition(self) -> float: ...

  def getSneezeCoughActive(self) -> int: ...

  def getSneezeCoughDelay(self) -> int: ...

  def getSneezeCoughTime(self) -> int: ...

  def getStandardHealthAddition(self) -> float: ...

  def getStandardHealthFromFoodTime(self) -> int: ...

  def getStandardPainReductionWhenWell(self) -> float: ...

  def getTemperature(self) -> float: ...

  def getTemperatureChangeTick(self) -> float: ...

  def getThermoregulator(self) -> Thermoregulator: ...

  def getTimeToSneezeOrCough(self) -> int: ...

  def getUnhappynessLevel(self) -> float: ...

  def getWetness(self) -> float: ...

  def increaseBodyWetness(self, amount: float) -> None: ...

  def isBodyPartBleeding(self, part: BodyPartType) -> bool: ...

  def isBurntToDeath(self) -> bool: ...

  def isHasACold(self) -> bool: ...

  def isInf(self) -> bool: ...

  def isInfected(self) -> bool: ...

  def isIsFakeInfected(self) -> bool: ...

  def isIsOnFire(self) -> bool: ...

  def isReduceFakeInfection(self) -> bool: ...

  def load(self, input: ByteBuffer, WorldVersion: int) -> None: ...

  def pickMortalityDuration(self) -> float: ...

  def save(self, output: ByteBuffer) -> None: ...

  def setBodyPartsLastState(self) -> None: ...

  def setBoredomDecreaseFromReading(self, BoredomDecreaseFromReading: float) -> None: ...

  def setBoredomLevel(self, BoredomLevel: float) -> None: ...

  def setBurntToDeath(self, BurntToDeath: bool) -> None: ...

  def setCatchACold(self, CatchACold: float) -> None: ...

  def setColdDamageStage(self, coldDamageStage: float) -> None: ...

  def setColdProgressionRate(self, ColdProgressionRate: float) -> None: ...

  def setColdReduction(self, coldReduction: float) -> None: ...

  def setColdSneezeTimerMax(self, ColdSneezeTimerMax: int) -> None: ...

  def setColdSneezeTimerMin(self, ColdSneezeTimerMin: int) -> None: ...

  def setColdStrength(self, ColdStrength: float) -> None: ...

  def setContinualPainIncrease(self, ContinualPainIncrease: float) -> None: ...

  def setCurrentNumZombiesVisible(self, CurrentNumZombiesVisible: int) -> None: ...

  def setDamageModCount(self, DamageModCount: int) -> None: ...

  def setDrunkIncreaseValue(self, DrunkIncreaseValue: float) -> None: ...

  def setDrunkReductionValue(self, DrunkReductionValue: float) -> None: ...

  def setFakeInfectionLevel(self, FakeInfectionLevel: float) -> None: ...

  def setFoodSicknessLevel(self, foodSicknessLevel: float) -> None: ...

  def setHasACold(self, HasACold: bool) -> None: ...

  def setHealthFromFood(self, HealthFromFood: float) -> None: ...

  def setHealthFromFoodTimer(self, HealthFromFoodTimer: float) -> None: ...

  def setHealthReductionFromSevereBadMoodles(self, HealthReductionFromSevereBadMoodles: float) -> None: ...

  def setInf(self, inf: bool) -> None: ...

  def setInfected(self, infected: bool) -> None: ...

  def setInfectionGrowthRate(self, InfectionGrowthRate: float) -> None: ...

  def setInfectionLevel(self, InfectionLevel: float) -> None: ...

  def setInfectionMortalityDuration(self, worldHours: float) -> None: ...

  def setInfectionTime(self, worldHours: float) -> None: ...

  def setInitialBitePain(self, InitialBitePain: float) -> None: ...

  def setInitialScratchPain(self, InitialScratchPain: float) -> None: ...

  def setInitialThumpPain(self, InitialThumpPain: float) -> None: ...

  def setInitialWoundPain(self, InitialWoundPain: float) -> None: ...

  def setIsFakeInfected(self, IsFakeInfected: bool) -> None: ...

  def setIsOnFire(self, IsOnFire: bool) -> None: ...

  def setMildColdSneezeTimerMax(self, MildColdSneezeTimerMax: int) -> None: ...

  def setMildColdSneezeTimerMin(self, MildColdSneezeTimerMin: int) -> None: ...

  def setNastyColdSneezeTimerMax(self, NastyColdSneezeTimerMax: int) -> None: ...

  def setNastyColdSneezeTimerMin(self, NastyColdSneezeTimerMin: int) -> None: ...

  def setOldNumZombiesVisible(self, OldNumZombiesVisible: int) -> None: ...

  def setOverallBodyHealth(self, OverallBodyHealth: float) -> None: ...

  def setPainReduction(self, painReduction: float) -> None: ...

  def setPainReductionFromMeds(self, PainReductionFromMeds: float) -> None: ...

  def setPanicIncreaseValue(self, PanicIncreaseValue: float) -> None: ...

  def setPanicReductionValue(self, PanicReductionValue: float) -> None: ...

  def setParentChar(self, ParentChar: IsoGameCharacter) -> None: ...

  def setPoisonLevel(self, poisonLevel: float) -> None: ...

  def setReduceFakeInfection(self, reduceFakeInfection: bool) -> None: ...

  def setReducedHealthAddition(self, ReducedHealthAddition: float) -> None: ...

  def setRemotePainLevel(self, painLevel: int) -> None: ...

  def setScratchedWindow(self) -> BodyPart: ...

  def setSeverlyReducedHealthAddition(self, SeverlyReducedHealthAddition: float) -> None: ...

  def setSleepingHealthAddition(self, SleepingHealthAddition: float) -> None: ...

  def setSneezeCoughActive(self, SneezeCoughActive: int) -> None: ...

  def setSneezeCoughDelay(self, SneezeCoughDelay: int) -> None: ...

  def setSneezeCoughTime(self, SneezeCoughTime: int) -> None: ...

  def setStandardHealthAddition(self, StandardHealthAddition: float) -> None: ...

  def setStandardHealthFromFoodTime(self, StandardHealthFromFoodTime: int) -> None: ...

  def setStandardPainReductionWhenWell(self, StandardPainReductionWhenWell: float) -> None: ...

  def setTemperature(self, t: float) -> None: ...

  def setTimeToSneezeOrCough(self, TimeToSneezeOrCough: int) -> None: ...

  def setUnhappynessLevel(self, UnhappynessLevel: float) -> None: ...

  def setWetness(self, Wetness: float) -> None: ...

  def splatBloodFloorBig(self) -> None: ...

  @staticmethod
  def getSicknessFromCorpsesRate(corpseCount: int) -> float: ...

  def __init__(self, ParentCharacter: IsoGameCharacter):
    self.bodyparts: ArrayList[BodyPart]
    self.bodypartslaststate: ArrayList[BodyPartLast]
    self.boredomdecreasefromreading: float
    self.boredomlevel: float
    self.burnttodeath: bool
    self.catchacold: float
    self.colddamagestage: float
    self.coldprogressionrate: float
    self.coldsneezetimermax: int
    self.coldsneezetimermin: int
    self.coldstrength: float
    self.continualpainincrease: float
    self.currentnumzombiesvisible: int
    self.damagemodcount: int
    self.drunkincreasevalue: float
    self.drunkreductionvalue: float
    self.fakeinfectionlevel: float
    self.hasacold: bool
    self.healthfromfood: float
    self.healthfromfoodtimer: float
    self.healthreductionfromseverebadmoodles: float
    self.infectiongrowthrate: float
    self.infectionlevel: float
    self.infectionmortalityduration: float
    self.infectiontime: float
    self.initialbitepain: float
    self.initialscratchpain: float
    self.initialthumppain: float
    self.initialwoundpain: float
    self.isfakeinfected: bool
    self.isinfected: bool
    self.isonfire: bool
    self.mildcoldsneezetimermax: int
    self.mildcoldsneezetimermin: int
    self.nastycoldsneezetimermax: int
    self.nastycoldsneezetimermin: int
    self.oldnumzombiesvisible: int
    self.overallbodyhealth: float
    self.painreductionfrommeds: float
    self.panicincreasevalue: float
    self.panicincreasevalueframe: float
    self.panicreductionvalue: float
    self.parentchar: IsoGameCharacter
    self.reducedhealthaddition: float
    self.severlyreducedhealthaddition: float
    self.sleepinghealthaddition: float
    self.sneezecoughactive: int
    self.sneezecoughdelay: int
    self.sneezecoughtime: int
    self.standardhealthaddition: float
    self.standardhealthfromfoodtime: int
    self.standardpainreductionwhenwell: float
    self.timetosneezeorcough: int
    self.unhappynesslevel: float
    self.wetness: float


class BodyPart:

  def AddDamage(self, Val: float) -> None: ...

  def AddHealth(self, Val: float) -> None: ...

  def DamageUpdate(self) -> None: ...

  def DisableFakeInfection(self) -> None: ...

  def HasInjury(self) -> bool: ...

  def IsBleedingStemmed(self) -> bool: ...

  def IsCortorised(self) -> bool: ...

  def IsFakeInfected(self) -> bool: ...

  def IsInfected(self) -> bool: ...

  def ReduceHealth(self, Val: float) -> None: ...

  def RestoreToFullHealth(self) -> None: ...

  @overload
  def SetBitten(self, Bitten: bool) -> None: ...

  @overload
  def SetBitten(self, Bitten: bool, Infected: bool) -> None: ...

  def SetBleedingStemmed(self, BleedingStemmed: bool) -> None: ...

  def SetCortorised(self, Cortorised: bool) -> None: ...

  def SetFakeInfected(self, inf: bool) -> None: ...

  def SetHealth(self, NewHealth: float) -> None: ...

  def SetInfected(self, inf: bool) -> None: ...

  def SetScratchedWeapon(self, Scratched: bool) -> None: ...

  def SetScratchedWindow(self, Scratched: bool) -> None: ...

  def bandaged(self) -> bool: ...

  def bitten(self) -> bool: ...

  def bleeding(self) -> bool: ...

  def damageFromFirearm(self, damage: float) -> None: ...

  def deepWounded(self) -> bool: ...

  def generateBleeding(self) -> None: ...

  def generateDeepShardWound(self) -> None: ...

  def generateDeepWound(self) -> None: ...

  def generateZombieInfection(self, baseChance: int) -> None: ...

  @overload
  def getAdditionalPain(self) -> float: ...

  @overload
  def getAdditionalPain(self, includeStiffness: bool) -> float: ...

  def getAlcoholLevel(self) -> float: ...

  def getBandageLife(self) -> float: ...

  def getBandageType(self) -> str: ...

  def getBiteTime(self) -> float: ...

  def getBleedingTime(self) -> float: ...

  def getBurnSpeedModifier(self) -> float: ...

  def getBurnTime(self) -> float: ...

  def getComfreyFactor(self) -> float: ...

  def getCutSpeedModifier(self) -> float: ...

  def getCutTime(self) -> float: ...

  def getDeepWoundSpeedModifier(self) -> float: ...

  def getDeepWoundTime(self) -> float: ...

  def getDistToCore(self) -> float: ...

  def getFractureTime(self) -> float: ...

  def getGarlicFactor(self) -> float: ...

  def getHealth(self) -> float: ...

  def getIndex(self) -> int: ...

  def getInnerTemperature(self) -> float: ...

  def getLastTimeBurnWash(self) -> float: ...

  def getPain(self) -> float: ...

  def getPlantainFactor(self) -> float: ...

  def getScratchSpeedModifier(self) -> float: ...

  def getScratchTime(self) -> float: ...

  def getSkinSurface(self) -> float: ...

  def getSkinTemperature(self) -> float: ...

  def getSplintFactor(self) -> float: ...

  def getSplintItem(self) -> str: ...

  def getStiffness(self) -> float: ...

  def getStitchTime(self) -> float: ...

  def getThermalNode(self) -> Thermoregulator.ThermalNode: ...

  def getType(self) -> BodyPartType: ...

  def getWetness(self) -> float: ...

  def getWoundInfectionLevel(self) -> float: ...

  def haveBullet(self) -> bool: ...

  def haveGlass(self) -> bool: ...

  def isBandageDirty(self) -> bool: ...

  def isBurnt(self) -> bool: ...

  def isCut(self) -> bool: ...

  def isDeepWounded(self) -> bool: ...

  def isGetBandageXp(self) -> bool: ...

  def isGetSplintXp(self) -> bool: ...

  def isGetStitchXp(self) -> bool: ...

  def isInfectedWound(self) -> bool: ...

  def isNeedBurnWash(self) -> bool: ...

  def isSplint(self) -> bool: ...

  def scratched(self) -> bool: ...

  def setAdditionalPain(self, additionalPain: float) -> None: ...

  def setAlcoholLevel(self, alcoholLevel: float) -> None: ...

  def setBandageLife(self, bandageLife: float) -> None: ...

  def setBandageType(self, bandageType: str) -> None: ...

  @overload
  def setBandaged(self, Bandaged: bool, bandageLife: float) -> None: ...

  @overload
  def setBandaged(self, Bandaged: bool, bandageLife: float, isAlcoholic: bool, bandageType: str) -> None: ...

  def setBiteTime(self, biteTime: float) -> None: ...

  def setBleeding(self, Bleeding: bool) -> None: ...

  def setBleedingTime(self, bleedingTime: float) -> None: ...

  def setBurnSpeedModifier(self, burnSpeedModifier: float) -> None: ...

  def setBurnTime(self, burnTime: float) -> None: ...

  def setBurned(self) -> None: ...

  def setComfreyFactor(self, comfreyFactor: float) -> None: ...

  @overload
  def setCut(self, cut: bool) -> None: ...

  @overload
  def setCut(self, cut: bool, forceNoInfection: bool) -> None: ...

  def setCutSpeedModifier(self, cutSpeedModifier: float) -> None: ...

  def setCutTime(self, cutTime: float) -> None: ...

  def setDeepWoundSpeedModifier(self, deepWoundSpeedModifier: float) -> None: ...

  def setDeepWoundTime(self, deepWoundTime: float) -> None: ...

  def setDeepWounded(self, Wounded: bool) -> None: ...

  def setFractureTime(self, fractureTime: float) -> None: ...

  def setGarlicFactor(self, garlicFactor: float) -> None: ...

  def setGetBandageXp(self, getBandageXp: bool) -> None: ...

  def setGetSplintXp(self, getSplintXp: bool) -> None: ...

  def setGetStitchXp(self, getStitchXp: bool) -> None: ...

  def setHaveBullet(self, haveBullet: bool, doctorLevel: int) -> None: ...

  def setHaveGlass(self, haveGlass: bool) -> None: ...

  def setInfectedWound(self, infectedWound: bool) -> None: ...

  def setLastTimeBurnWash(self, lastTimeBurnWash: float) -> None: ...

  def setNeedBurnWash(self, needBurnWash: bool) -> None: ...

  def setPlantainFactor(self, plantainFactor: float) -> None: ...

  def setScratchSpeedModifier(self, scratchSpeedModifier: float) -> None: ...

  def setScratchTime(self, scratchTime: float) -> None: ...

  def setScratched(self, Scratched: bool, forceNoInfection: bool) -> None: ...

  def setSplint(self, splint: bool, splintFactor: float) -> None: ...

  def setSplintFactor(self, splintFactor: float) -> None: ...

  def setSplintItem(self, splintItem: str) -> None: ...

  def setStiffness(self, stiffness: float) -> None: ...

  def setStitchTime(self, stitchTime: float) -> None: ...

  def setStitched(self, Stitched: bool) -> None: ...

  def setWetness(self, wetness: float) -> None: ...

  def setWoundInfectionLevel(self, infectedWound: float) -> None: ...

  def stitched(self) -> bool: ...

  @overload
  def sync(self, bb: ByteBuffer, id: int) -> None: ...

  @overload
  def sync(self, other: BodyPart, updater: BodyDamageSync.Updater) -> None: ...

  def __init__(self, ChosenType: BodyPartType, PC: IsoGameCharacter): ...


class BodyPartContacts:

  @staticmethod
  def getAllContacts(bodyPartType: BodyPartType) -> list[BodyPartType]: ...

  @staticmethod
  def getChildren(bodyPartType: BodyPartType) -> list[BodyPartType]: ...

  @staticmethod
  def getNodeDepth(bodyPartType: BodyPartType) -> int: ...

  @staticmethod
  def getParent(bodyPartType: BodyPartType) -> BodyPartType: ...

  def __init__(self): ...

  class ContactNode:

    def __init__(self, arg0: BodyPartType): ...


class BodyPartLast:

  def bandaged(self) -> bool: ...

  def bitten(self) -> bool: ...

  def copy(self, other: BodyPart) -> None: ...

  def isCut(self) -> bool: ...

  def scratched(self) -> bool: ...

  def __init__(self): ...


class BodyPartType(Enum):

  Foot_L: BodyPartType

  Foot_R: BodyPartType

  ForeArm_L: BodyPartType

  ForeArm_R: BodyPartType

  Groin: BodyPartType

  Hand_L: BodyPartType

  Hand_R: BodyPartType

  Head: BodyPartType

  LowerLeg_L: BodyPartType

  LowerLeg_R: BodyPartType

  MAX: BodyPartType

  Neck: BodyPartType

  Torso_Lower: BodyPartType

  Torso_Upper: BodyPartType

  UpperArm_L: BodyPartType

  UpperArm_R: BodyPartType

  UpperLeg_L: BodyPartType

  UpperLeg_R: BodyPartType

  def getBandageModel(self) -> str: ...

  def getBiteWoundModel(self, female: bool) -> str: ...

  def getCutWoundModel(self, female: bool) -> str: ...

  def getScratchWoundModel(self, female: bool) -> str: ...

  def index(self) -> int: ...

  @staticmethod
  def FromIndex(index: int) -> BodyPartType: ...

  @staticmethod
  def FromString(str: str) -> BodyPartType: ...

  @staticmethod
  def GetDistToCore(bodyPartType: BodyPartType) -> float: ...

  @staticmethod
  def GetMaxActionPenalty(bodyPartType: BodyPartType) -> float: ...

  @staticmethod
  def GetMaxMovementPenalty(bodyPartType: BodyPartType) -> float: ...

  @staticmethod
  def GetSkinSurface(bodyPartType: BodyPartType) -> float: ...

  @staticmethod
  def GetUmbrellaMod(bodyPartType: BodyPartType) -> float: ...

  @staticmethod
  def ToIndex(BPT: BodyPartType) -> int: ...

  @staticmethod
  def ToString(BPT: BodyPartType) -> str: ...

  @staticmethod
  def getBleedingTimeModifyer(index: int) -> float: ...

  @staticmethod
  def getDamageModifyer(index: int) -> float: ...

  @staticmethod
  def getDisplayName(BPT: BodyPartType) -> str: ...

  @staticmethod
  def getPainModifyer(index: int) -> float: ...

  @staticmethod
  def getRandom() -> BodyPartType: ...

  @staticmethod
  def valueOf(arg0: str) -> BodyPartType: ...

  @staticmethod
  def values() -> list[BodyPartType]: ...


class Fitness:

  def exerciseRepeat(self) -> None: ...

  def getCurrentExeStiffnessInc(self, type: str) -> float: ...

  def getCurrentExeStiffnessTimer(self, type: str) -> int: ...

  def getParent(self) -> IsoGameCharacter: ...

  def getRegularity(self, type: str) -> float: ...

  def getRegularityMap(self) -> HashMap[str, Float]: ...

  def incFutureStiffness(self) -> None: ...

  def incRegularity(self) -> None: ...

  def incStats(self) -> None: ...

  def init(self) -> None: ...

  def initRegularityMapProfession(self) -> None: ...

  def load(self, input: ByteBuffer, WorldVersion: int) -> None: ...

  def onGoingStiffness(self) -> bool: ...

  def reduceEndurance(self) -> None: ...

  def removeStiffnessValue(self, type: str) -> None: ...

  def resetValues(self) -> None: ...

  def save(self, output: ByteBuffer) -> None: ...

  def setCurrentExercise(self, type: str) -> None: ...

  def setParent(self, parent: IsoGameCharacter) -> None: ...

  def setRegularityMap(self, regularityMap: HashMap[str, Float]) -> None: ...

  def update(self) -> None: ...

  def __init__(self, parent: IsoGameCharacter): ...

  class FitnessExercise:

    def __init__(self, exeDatas: KahluaTableImpl): ...


class Metabolics(Enum):

  ClimbRope: Metabolics

  Default: Metabolics

  DefaultExercise: Metabolics

  DiggingSpade: Metabolics

  DrivingCar: Metabolics

  Fitness: Metabolics

  FitnessHeavy: Metabolics

  ForestryAxe: Metabolics

  HeavyDomestic: Metabolics

  HeavyWork: Metabolics

  JumpFence: Metabolics

  LightDomestic: Metabolics

  LightWork: Metabolics

  MAX: Metabolics

  MediumWork: Metabolics

  Running10kmh: Metabolics

  Running15kmh: Metabolics

  SeatedResting: Metabolics

  SedentaryActivity: Metabolics

  Sleeping: Metabolics

  StandingAtRest: Metabolics

  UsingTools: Metabolics

  Walking2kmh: Metabolics

  Walking5kmh: Metabolics

  def getBtuHr(self) -> float: ...

  def getMet(self) -> float: ...

  def getW(self) -> float: ...

  def getWm2(self) -> float: ...

  @staticmethod
  def MetToBtuHr(met: float) -> float: ...

  @staticmethod
  def MetToW(met: float) -> float: ...

  @staticmethod
  def MetToWm2(met: float) -> float: ...

  @staticmethod
  def valueOf(arg0: str) -> Metabolics: ...

  @staticmethod
  def values() -> list[Metabolics]: ...


class Nutrition:

  def applyTraitFromWeight(self) -> None: ...

  def applyWeightFromTraits(self) -> None: ...

  def canAddFitnessXp(self) -> bool: ...

  def characterHaveWeightTrouble(self) -> bool: ...

  def getCalories(self) -> float: ...

  def getCarbohydrates(self) -> float: ...

  def getLipids(self) -> float: ...

  def getProteins(self) -> float: ...

  def getWeight(self) -> float: ...

  def isDecWeight(self) -> bool: ...

  def isIncWeight(self) -> bool: ...

  def isIncWeightLot(self) -> bool: ...

  def load(self, input: ByteBuffer) -> None: ...

  def save(self, output: ByteBuffer) -> None: ...

  def setCalories(self, calories: float) -> None: ...

  def setCarbohydrates(self, carbohydrates: float) -> None: ...

  def setDecWeight(self, decWeight: bool) -> None: ...

  def setIncWeight(self, incWeight: bool) -> None: ...

  def setIncWeightLot(self, incWeightLot: bool) -> None: ...

  def setLipids(self, lipids: float) -> None: ...

  def setProteins(self, proteins: float) -> None: ...

  def setWeight(self, weight: float) -> None: ...

  def syncWeight(self) -> None: ...

  def update(self) -> None: ...

  def __init__(self, parent: IsoPlayer): ...


class Thermoregulator:

  def getBodyFluids(self) -> float: ...

  def getBodyHeatDelta(self) -> float: ...

  def getBodyHeatMultiplier(self) -> float: ...

  def getCatchAColdDelta(self) -> float: ...

  def getCombatModifier(self) -> float: ...

  def getCoreCelcius(self) -> float: ...

  def getCoreHeatContractMultiplier(self) -> float: ...

  def getCoreHeatDelta(self) -> float: ...

  def getCoreHeatExpandMultiplier(self) -> float: ...

  def getCoreRateOfChange(self) -> float: ...

  def getCoreTemperature(self) -> float: ...

  def getCoreTemperatureUI(self) -> float: ...

  def getDbg_primTotal(self) -> float: ...

  def getDbg_secTotal(self) -> float: ...

  def getDbg_totalHeat(self) -> float: ...

  def getDbg_totalHeatRaw(self) -> float: ...

  def getDefaultMultiplier(self) -> float: ...

  def getEnergy(self) -> float: ...

  def getEnergyMultiplier(self) -> float: ...

  def getExternalAirTemperature(self) -> float: ...

  def getFatigueMultiplier(self) -> float: ...

  def getFluidsMultiplier(self) -> float: ...

  def getHeatGeneration(self) -> float: ...

  def getHeatGenerationUI(self) -> float: ...

  def getMetabolicRate(self) -> float: ...

  def getMetabolicRateDecMultiplier(self) -> float: ...

  def getMetabolicRateIncMultiplier(self) -> float: ...

  def getMetabolicRateReal(self) -> float: ...

  def getMetabolicTarget(self) -> float: ...

  def getMovementModifier(self) -> float: ...

  def getNode(self, index: int) -> Thermoregulator.ThermalNode: ...

  def getNodeForBloodType(self, type: BloodBodyPartType) -> Thermoregulator.ThermalNode: ...

  def getNodeForType(self, type: BodyPartType) -> Thermoregulator.ThermalNode: ...

  def getNodeSize(self) -> int: ...

  def getSetPoint(self) -> float: ...

  def getSimulationMultiplier(self) -> float: ...

  def getSkinCelciusMultiplier(self) -> float: ...

  def getTemperatureAir(self) -> float: ...

  def getTemperatureAirAndWind(self) -> float: ...

  def getThermalDamage(self) -> float: ...

  def getTimedActionTimeModifier(self) -> float: ...

  def load(self, input: ByteBuffer, WorldVersion: int) -> None: ...

  def reset(self) -> None: ...

  def save(self, output: ByteBuffer) -> None: ...

  @overload
  def setMetabolicTarget(self, target: float) -> None: ...

  @overload
  def setMetabolicTarget(self, meta: Metabolics) -> None: ...

  def thermalChevronCount(self) -> int: ...

  def thermalChevronUp(self) -> bool: ...

  def update(self) -> None: ...

  @staticmethod
  def getSkinCelciusFavorable() -> float: ...

  @staticmethod
  def getSkinCelciusMax() -> float: ...

  @staticmethod
  def getSkinCelciusMin() -> float: ...

  @staticmethod
  def setSimulationMultiplier(multiplier: float) -> None: ...

  def __init__(self, parent: BodyDamage): ...

  class ThermalNode:

    def getBodyResponse(self) -> float: ...

    def getBodyResponseUI(self) -> float: ...

    def getBodyWetness(self) -> float: ...

    def getBodyWetnessUI(self) -> float: ...

    def getCelcius(self) -> float: ...

    def getClothingWetness(self) -> float: ...

    def getClothingWetnessUI(self) -> float: ...

    def getDistToCore(self) -> float: ...

    def getHeatDelta(self) -> float: ...

    def getHeatDeltaUI(self) -> float: ...

    def getInsulation(self) -> float: ...

    def getInsulationUI(self) -> float: ...

    def getName(self) -> str: ...

    def getPrimaryDelta(self) -> float: ...

    def getPrimaryDeltaUI(self) -> float: ...

    def getSecondaryDelta(self) -> float: ...

    def getSecondaryDeltaUI(self) -> float: ...

    def getSkinCelcius(self) -> float: ...

    def getSkinCelciusUI(self) -> float: ...

    def getSkinSurface(self) -> float: ...

    def getWindresist(self) -> float: ...

    def getWindresistUI(self) -> float: ...

    def hasDownstream(self) -> bool: ...

    def hasUpstream(self) -> bool: ...

    def isCore(self) -> bool: ...

    @overload
    def __init__(self, arg0: Thermoregulator, arg1: float, arg2: BodyPart, arg3: float): ...
    @overload
    def __init__(self, arg0: Thermoregulator, arg1: bool, arg2: float, arg3: BodyPart, arg4: float): ...

  class Multiplier(Enum):

    BodyHeat: Thermoregulator.Multiplier

    CoreHeatContract: Thermoregulator.Multiplier

    CoreHeatExpand: Thermoregulator.Multiplier

    Default: Thermoregulator.Multiplier

    MetabolicRateDec: Thermoregulator.Multiplier

    MetabolicRateInc: Thermoregulator.Multiplier

    PrimaryDelta: Thermoregulator.Multiplier

    SecondaryDelta: Thermoregulator.Multiplier

    SkinCelcius: Thermoregulator.Multiplier

    SkinCelciusContract: Thermoregulator.Multiplier

    SkinCelciusExpand: Thermoregulator.Multiplier

    @staticmethod
    def valueOf(arg0: str) -> Thermoregulator.Multiplier: ...

    @staticmethod
    def values() -> list[Thermoregulator.Multiplier]: ...


class Thermoregulator_tryouts:

  def getBodyFluids(self) -> float: ...

  def getBodyHeatDelta(self) -> float: ...

  def getBodyHeatMultiplier(self) -> float: ...

  def getCatchAColdDelta(self) -> float: ...

  def getCombatModifier(self) -> float: ...

  def getCoreCelcius(self) -> float: ...

  def getCoreHeatContractMultiplier(self) -> float: ...

  def getCoreHeatDelta(self) -> float: ...

  def getCoreHeatExpandMultiplier(self) -> float: ...

  def getCoreRateOfChange(self) -> float: ...

  def getCoreTemperature(self) -> float: ...

  def getCoreTemperatureUI(self) -> float: ...

  def getDbg_primTotal(self) -> float: ...

  def getDbg_secTotal(self) -> float: ...

  def getDbg_totalHeat(self) -> float: ...

  def getDbg_totalHeatRaw(self) -> float: ...

  def getDefaultMultiplier(self) -> float: ...

  def getEnergy(self) -> float: ...

  def getEnergyMultiplier(self) -> float: ...

  def getExternalAirTemperature(self) -> float: ...

  def getFatigueMultiplier(self) -> float: ...

  def getFluidsMultiplier(self) -> float: ...

  def getHeatGeneration(self) -> float: ...

  def getHeatGenerationUI(self) -> float: ...

  def getMetabolicRate(self) -> float: ...

  def getMetabolicRateDecMultiplier(self) -> float: ...

  def getMetabolicRateIncMultiplier(self) -> float: ...

  def getMetabolicRateReal(self) -> float: ...

  def getMetabolicTarget(self) -> float: ...

  def getMovementModifier(self) -> float: ...

  def getNodeForBloodType(self, type: BloodBodyPartType) -> Thermoregulator_tryouts.ThermalNode: ...

  def getNodeForType(self, type: BodyPartType) -> Thermoregulator_tryouts.ThermalNode: ...

  def getSetPoint(self) -> float: ...

  def getSimulationMultiplier(self) -> float: ...

  def getSkinCelciusMultiplier(self) -> float: ...

  def getTemperatureAir(self) -> float: ...

  def getTemperatureAirAndWind(self) -> float: ...

  def getThermalDamage(self) -> float: ...

  def getTimedActionTimeModifier(self) -> float: ...

  def load(self, input: ByteBuffer, WorldVersion: int) -> None: ...

  def reset(self) -> None: ...

  def save(self, output: ByteBuffer) -> None: ...

  @overload
  def setMetabolicTarget(self, target: float) -> None: ...

  @overload
  def setMetabolicTarget(self, meta: Metabolics) -> None: ...

  def thermalChevronCount(self) -> int: ...

  def thermalChevronUp(self) -> bool: ...

  def update(self) -> None: ...

  @staticmethod
  def getSkinCelciusFavorable() -> float: ...

  @staticmethod
  def getSkinCelciusMax() -> float: ...

  @staticmethod
  def getSkinCelciusMin() -> float: ...

  @staticmethod
  def setSimulationMultiplier(multiplier: float) -> None: ...

  def __init__(self, parent: BodyDamage): ...

  class ThermalNode:

    def getBodyResponse(self) -> float: ...

    def getBodyResponseUI(self) -> float: ...

    def getBodyWetness(self) -> float: ...

    def getBodyWetnessUI(self) -> float: ...

    def getCelcius(self) -> float: ...

    def getClothingWetness(self) -> float: ...

    def getClothingWetnessUI(self) -> float: ...

    def getDistToCore(self) -> float: ...

    def getHeatDelta(self) -> float: ...

    def getHeatDeltaUI(self) -> float: ...

    def getInsulation(self) -> float: ...

    def getInsulationUI(self) -> float: ...

    def getPrimaryDelta(self) -> float: ...

    def getPrimaryDeltaUI(self) -> float: ...

    def getSecondaryDelta(self) -> float: ...

    def getSecondaryDeltaUI(self) -> float: ...

    def getSkinCelcius(self) -> float: ...

    def getSkinCelciusUI(self) -> float: ...

    def getSkinSurface(self) -> float: ...

    def getWindresist(self) -> float: ...

    def getWindresistUI(self) -> float: ...

    def hasDownstream(self) -> bool: ...

    def hasUpstream(self) -> bool: ...

    def isCore(self) -> bool: ...

    @overload
    def __init__(self, arg0: Thermoregulator_tryouts, arg1: float, arg2: BodyPart, arg3: float): ...
    @overload
    def __init__(self, arg0: Thermoregulator_tryouts, arg1: bool, arg2: float, arg3: BodyPart, arg4: float): ...

  class Multiplier(Enum):

    BodyHeat: Thermoregulator_tryouts.Multiplier

    CoreHeatContract: Thermoregulator_tryouts.Multiplier

    CoreHeatExpand: Thermoregulator_tryouts.Multiplier

    Default: Thermoregulator_tryouts.Multiplier

    MetabolicRateDec: Thermoregulator_tryouts.Multiplier

    MetabolicRateInc: Thermoregulator_tryouts.Multiplier

    PrimaryDelta: Thermoregulator_tryouts.Multiplier

    SecondaryDelta: Thermoregulator_tryouts.Multiplier

    SkinCelcius: Thermoregulator_tryouts.Multiplier

    SkinCelciusContract: Thermoregulator_tryouts.Multiplier

    SkinCelciusExpand: Thermoregulator_tryouts.Multiplier

    @staticmethod
    def valueOf(arg0: str) -> Thermoregulator_tryouts.Multiplier: ...

    @staticmethod
    def values() -> list[Thermoregulator_tryouts.Multiplier]: ...

