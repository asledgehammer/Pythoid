from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.io import File
from java.util import List, ArrayList, HashMap
from java.util.function import Consumer, Predicate
from org.w3c.dom import Element
from zombie.core.skinnedmodel.advancedanimation import IAnimatable

class ActionContext:

  def childStateCount(self) -> int: ...

  def clearEvent(self, eventName: str) -> None: ...

  def foreachChildState(self, consumer: Consumer[ActionState]) -> None: ...

  def getChildStateAt(self, idx: int) -> ActionState: ...

  def getChildStates(self) -> List[ActionState]: ...

  def getCurrentState(self) -> ActionState: ...

  def getCurrentStateName(self) -> str: ...

  def getGroup(self) -> ActionGroup: ...

  def getNextState(self) -> ActionState: ...

  def getOwner(self) -> IAnimatable: ...

  def getPlaybackStateSnapshot(self) -> ActionStateSnapshot: ...

  def getPreviousStateName(self) -> str: ...

  def hasChildStates(self) -> bool: ...

  @overload
  def hasEventOccurred(self, eventName: str) -> bool: ...

  @overload
  def hasEventOccurred(self, eventName: str, layerIdx: int) -> bool: ...

  def indexOfChildState(self, predicate: Predicate[ActionState]) -> int: ...

  def logCurrentState(self) -> None: ...

  @overload
  def reportEvent(self, event: str) -> None: ...

  @overload
  def reportEvent(self, animLayer: int, event: str) -> None: ...

  def setGroup(self, group: ActionGroup) -> None: ...

  def setPlaybackStateSnapshot(self, snapshot: ActionStateSnapshot) -> None: ...

  def update(self) -> None: ...

  def __init__(self, owner: IAnimatable):
    self.onstatechanged: ArrayList[IActionStateChanged]

  class s_performance: ...


class ActionContextEvents:

  def add(self, name: str, layer: int) -> None: ...

  def clear(self) -> None: ...

  def clearEvent(self, name: str) -> None: ...

  @overload
  def contains(self, name: str, layer: int) -> bool: ...

  @overload
  def contains(self, name: str, layer: int, bAgnosticLayer: bool) -> bool: ...

  def __init__(self): ...

  class Event: ...


class ActionGroup:

  def addState(self, state: ActionState) -> None: ...

  def get(self, state: str) -> ActionState: ...

  def getDefaultState(self) -> ActionState: ...

  def getInitialState(self) -> ActionState: ...

  @staticmethod
  def getActionGroup(name: str) -> ActionGroup: ...

  @staticmethod
  def reloadAll() -> None: ...

  def __init__(self): ...


class ActionState:

  def canBeSubstate(self) -> bool: ...

  def canHaveSubState(self, child: ActionState) -> bool: ...

  def canHaveSubStates(self) -> bool: ...

  def getName(self) -> str: ...

  def load(self, stateFolderPath: str) -> None: ...

  def parse(self, file: File) -> None: ...

  def resetForReload(self) -> None: ...

  def sortTransitions(self) -> None: ...

  @staticmethod
  def tagsOverlap(parentTags: list[str], childTags: list[str]) -> bool: ...

  def __init__(self, name: str):
    self.name: str
    self.transitions: ArrayList[ActionTransition]


class ActionStateSnapshot:

  def __init__(self):
    self.childstatenames: list[str]
    self.statename: str


class ActionTransition:

  @overload
  def clone(self) -> ActionTransition: ...

  @overload
  def clone(self) -> object: ...

  def getTransitionTo(self) -> str: ...

  def passes(self, context: ActionContext, layerIdx: int) -> bool: ...

  @staticmethod
  def parse(root: Element, srcInfo: str, out_transitions: List[ActionTransition]) -> bool: ...

  @staticmethod
  def parseTransition(root: Element, out_transitions: List[ActionTransition]) -> None: ...

  @staticmethod
  def parseTransitions(root: Element, srcInfo: str, out_transitions: List[ActionTransition]) -> None: ...

  def __init__(self): ...


class IActionCondition:

  s_factoryMap: HashMap[str, IActionCondition.IFactory]

  def clone(self) -> IActionCondition: ...

  def getDescription(self) -> str: ...

  def passes(self, context: ActionContext, layerIdx: int) -> bool: ...

  @staticmethod
  def createInstance(conditionNode: Element) -> IActionCondition: ...

  @staticmethod
  def registerFactory(elementName: str, factory: IActionCondition.IFactory) -> None: ...

  class IFactory:

    def create(self, conditionNode: Element) -> IActionCondition: ...


class IActionStateChanged:

  def actionStateChanged(self, sender: ActionContext) -> None: ...

