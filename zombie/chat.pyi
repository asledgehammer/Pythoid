from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.lang import Short, Boolean, Enum
from java.nio import ByteBuffer
from java.time import LocalDateTime
from java.util import ArrayList
from zombie.characters import IsoPlayer
from zombie.core import Color
from zombie.core.network import ByteBufferWriter
from zombie.core.raknet import UdpConnection
from zombie.iso import IsoGridSquare, IsoObject
from zombie.network.chat import ChatType
from zombie.radio.devices import DeviceData
from zombie.ui import UIFont, TextDrawObject

class ChatBase:

  def addMember(self, playerID: int) -> None: ...

  def close(self) -> None: ...

  def createMessage(self, text: str) -> ChatMessage: ...

  def createServerMessage(self, text: str) -> ServerChatMessage: ...

  def getColor(self) -> Color: ...

  def getID(self) -> int: ...

  def getJustAddedMembers(self) -> ArrayList[Short]: ...

  def getJustRemovedMembers(self) -> ArrayList[Short]: ...

  def getMessagePrefix(self, msg: ChatMessage) -> str: ...

  def getMessageTextWithPrefix(self, msg: ChatMessage) -> str: ...

  def getMode(self) -> ChatMode: ...

  def getRange(self) -> float: ...

  def getTabID(self) -> int: ...

  def getTitleID(self) -> str: ...

  def getType(self) -> ChatType: ...

  def getZombieAttractionRange(self) -> float: ...

  def isEnabled(self) -> bool: ...

  def isSendingToRadio(self) -> bool: ...

  def leaveMember(self, playerID: Short) -> None: ...

  def packMessage(self, b: ByteBufferWriter, msg: ChatMessage) -> None: ...

  def removeMember(self, playerID: Short) -> None: ...

  @overload
  def sendMessageToChatMembers(self, msg: ChatMessage) -> None: ...

  @overload
  def sendMessageToChatMembers(self, msg: ServerChatMessage) -> None: ...

  @overload
  def sendMessageToPlayer(self, playerID: int, msg: ChatMessage) -> None: ...

  @overload
  def sendMessageToPlayer(self, connection: UdpConnection, msg: ChatMessage) -> None: ...

  def sendPlayerJoinChatPacket(self, playerConnection: UdpConnection) -> None: ...

  @overload
  def sendPlayerLeaveChatPacket(self, playerID: int) -> None: ...

  @overload
  def sendPlayerLeaveChatPacket(self, connection: UdpConnection) -> None: ...

  def sendToServer(self, msg: ChatMessage, deviceData: DeviceData) -> None: ...

  def setFontSize(self, fontSize: str) -> None: ...

  def setSettings(self, settings: ChatSettings) -> None: ...

  def setShowTimestamp(self, showTimestamp: bool) -> None: ...

  def setShowTitle(self, showTitle: bool) -> None: ...

  @overload
  def showMessage(self, msg: ChatMessage) -> None: ...

  @overload
  def showMessage(self, text: str, author: str) -> None: ...

  def syncMembersByUsernames(self, players: ArrayList[str]) -> None: ...

  def unpackMessage(self, bb: ByteBuffer) -> ChatMessage: ...

  @overload
  def __init__(self, id: int, type: ChatType, tab: ChatTab): ...
  @overload
  def __init__(self, bb: ByteBuffer, type: ChatType, tab: ChatTab, owner: IsoPlayer): ...


class ChatElement:

  backdropTexture: NineGridTexture

  doBackDrop: bool

  @overload
  def IsSpeaking(self) -> bool: ...

  @overload
  def IsSpeaking(self) -> bool: ...

  @overload
  def Say(self, line: str) -> None: ...

  @overload
  def Say(self, line: str) -> None: ...

  def SayDebug(self, n: int, text: str) -> None: ...

  @overload
  def addChatLine(self, msg: str, r: float, g: float, b: float) -> None: ...

  @overload
  def addChatLine(self, msg: str, r: float, g: float, b: float, baseRange: float) -> None: ...

  @overload
  def addChatLine(self, msg: str, r: float, g: float, b: float, font: UIFont, baseRange: float, customTag: str, bbcode: bool, img: bool, icons: bool, colors: bool, fonts: bool, equalizeHeights: bool) -> None: ...

  def clear(self, playerIndex: int) -> None: ...

  def getHasChatToDisplay(self) -> bool: ...

  def getMaxChatLines(self) -> int: ...

  @overload
  def getSayLine(self) -> str: ...

  @overload
  def getSayLine(self) -> str: ...

  def getSayLineTag(self) -> str: ...

  @overload
  def getTalkerType(self) -> str: ...

  @overload
  def getTalkerType(self) -> str: ...

  @overload
  def renderBatched(self, playerNum: int, x: int, y: int) -> None: ...

  @overload
  def renderBatched(self, playerNum: int, x: int, y: int, ignoreRadioLines: bool) -> None: ...

  def setHistoryRange(self, range: float) -> None: ...

  def setMaxCharsPerLine(self, maxChars: int) -> None: ...

  def setMaxChatLines(self, num: int) -> None: ...

  def setTalkerType(self, type: str) -> None: ...

  def setUseEuclidean(self, b: bool) -> None: ...

  def update(self) -> None: ...

  @staticmethod
  def NoRender(playerNum: int) -> None: ...

  @staticmethod
  def RenderBatch(playerNum: int) -> None: ...

  @staticmethod
  def addNoLogText(text: str) -> None: ...

  def __init__(self, chatowner: ChatElementOwner, numberoflines: int, talkertype: str): ...

  class PlayerLines:

    def getNewLineObject(self) -> TextDrawObject: ...

    def render(self) -> None: ...

    def setMaxCharsPerLine(self, arg0: int) -> None: ...

    def __init__(self, arg0: ChatElement, arg1: int): ...

  class PlayerLinesList(ArrayList): ...


class ChatElementOwner:

  def getSquare(self) -> IsoGridSquare: ...

  def getX(self) -> float: ...

  def getY(self) -> float: ...

  def getZ(self) -> float: ...


class ChatManager:

  def addMessage(self, msgAuthor: str, msg: str) -> None: ...

  def createRadiostationMessage(self, text: str, channel: int) -> ChatMessage: ...

  def focusOnTab(self, id: Short) -> None: ...

  def getFocusTab(self) -> ChatTab: ...

  def getTabName(self, tabID: int) -> str: ...

  def init(self, isSinglePlayer: bool, owner: IsoPlayer) -> None: ...

  def isPlayerCanUseChat(self, chat: ChatType) -> Boolean: ...

  def isSinglePlayerMode(self) -> bool: ...

  def isWorking(self) -> bool: ...

  def processAddTabPacket(self, bb: ByteBuffer) -> None: ...

  def processChatMessagePacket(self, bb: ByteBuffer) -> None: ...

  def processInitPlayerChatPacket(self, bb: ByteBuffer) -> None: ...

  def processJoinChatPacket(self, bb: ByteBuffer) -> None: ...

  def processLeaveChatPacket(self, bb: ByteBuffer) -> None: ...

  def processPlayerNotFound(self, arg0: str) -> None: ...

  def processRemoveTabPacket(self, bb: ByteBuffer) -> None: ...

  @overload
  def sendMessageToChat(self, type: ChatType, msg: str) -> None: ...

  @overload
  def sendMessageToChat(self, author: str, type: ChatType, msg: str) -> None: ...

  def sendWhisperMessage(self, destPlayerName: str, msg: str) -> None: ...

  def setFullyConnected(self) -> None: ...

  @overload
  def showInfoMessage(self, msg: str) -> None: ...

  @overload
  def showInfoMessage(self, author: str, msg: str) -> None: ...

  @overload
  def showRadioMessage(self, msg: ChatMessage) -> None: ...

  @overload
  def showRadioMessage(self, text: str, channel: int) -> None: ...

  def showServerChatMessage(self, msg: str) -> None: ...

  def showStaticRadioSound(self, text: str) -> None: ...

  def unpackMessage(self, bb: ByteBuffer) -> ChatMessage: ...

  def updateChatSettings(self, fontSize: str, showTimestamp: bool, showTitle: bool) -> None: ...

  @staticmethod
  def UpdateClient() -> None: ...

  @staticmethod
  def getInstance() -> ChatManager: ...

  class Stage(Enum):

    notStarted: ChatManager.Stage

    starting: ChatManager.Stage

    working: ChatManager.Stage

    @staticmethod
    def valueOf(arg0: str) -> ChatManager.Stage: ...

    @staticmethod
    def values() -> list[ChatManager.Stage]: ...


class ChatMessage:

  @overload
  def clone(self) -> ChatMessage: ...

  @overload
  def clone(self) -> object: ...

  def getAuthor(self) -> str: ...

  def getChat(self) -> ChatBase: ...

  def getChatID(self) -> int: ...

  def getCustomTag(self) -> str: ...

  def getDatetime(self) -> LocalDateTime: ...

  def getDatetimeStr(self) -> str: ...

  def getRadioChannel(self) -> int: ...

  def getText(self) -> str: ...

  def getTextColor(self) -> Color: ...

  def getTextWithPrefix(self) -> str: ...

  def getTextWithReplacedParentheses(self) -> str: ...

  def isCustomColor(self) -> bool: ...

  def isFromDiscord(self) -> bool: ...

  def isLocal(self) -> bool: ...

  def isOverHeadSpeech(self) -> bool: ...

  def isScramble(self) -> bool: ...

  def isServerAlert(self) -> bool: ...

  def isServerAuthor(self) -> bool: ...

  def isShouldAttractZombies(self) -> bool: ...

  def isShowAuthor(self) -> bool: ...

  def isShowInChat(self) -> bool: ...

  def makeFromDiscord(self) -> None: ...

  def pack(self, b: ByteBufferWriter) -> None: ...

  def setAuthor(self, author: str) -> None: ...

  def setCustomTag(self, customTag: str) -> None: ...

  def setDatetime(self, datetime: LocalDateTime) -> None: ...

  def setLocal(self, __local__: bool) -> None: ...

  def setOverHeadSpeech(self, overHeadSpeech: bool) -> None: ...

  def setRadioChannel(self, radioChannel: int) -> None: ...

  def setScrambledText(self, text: str) -> None: ...

  def setServerAlert(self, serverAlert: bool) -> None: ...

  def setServerAuthor(self, serverAuthor: bool) -> None: ...

  def setShouldAttractZombies(self, shouldAttractZombies: bool) -> None: ...

  def setShowInChat(self, showInChat: bool) -> None: ...

  def setText(self, text: str) -> None: ...

  def setTextColor(self, textColor: Color) -> None: ...

  def toString(self) -> str: ...

  @overload
  def __init__(self, chat: ChatBase, text: str): ...
  @overload
  def __init__(self, chat: ChatBase, datetime: LocalDateTime, text: str): ...


class ChatMode(Enum):

  ClientMultiPlayer: ChatMode

  ServerMultiPlayer: ChatMode

  SinglePlayer: ChatMode

  @staticmethod
  def valueOf(arg0: str) -> ChatMode: ...

  @staticmethod
  def values() -> list[ChatMode]: ...


class ChatSettings:

  infinityRange: float

  def getFont(self) -> UIFont: ...

  def getFontColor(self) -> Color: ...

  def getFontSize(self) -> str: ...

  def getRange(self) -> float: ...

  def getZombieAttractionRange(self) -> float: ...

  def isAllowBBcode(self) -> bool: ...

  def isAllowChatIcons(self) -> bool: ...

  def isAllowColors(self) -> bool: ...

  def isAllowFonts(self) -> bool: ...

  def isAllowImages(self) -> bool: ...

  def isBold(self) -> bool: ...

  def isEqualizeLineHeights(self) -> bool: ...

  def isShowAuthor(self) -> bool: ...

  def isShowChatTitle(self) -> bool: ...

  def isShowTimestamp(self) -> bool: ...

  def isUnique(self) -> bool: ...

  def isUseOnlyActiveTab(self) -> bool: ...

  def pack(self, bb: ByteBufferWriter) -> None: ...

  def setAllowBBcode(self, allowBBcode: bool) -> None: ...

  def setAllowChatIcons(self, allowChatIcons: bool) -> None: ...

  def setAllowColors(self, allowColors: bool) -> None: ...

  def setAllowFonts(self, allowFonts: bool) -> None: ...

  def setAllowImages(self, allowImages: bool) -> None: ...

  def setBold(self, bold: bool) -> None: ...

  def setEqualizeLineHeights(self, equalizeLineHeights: bool) -> None: ...

  def setFont(self, font: UIFont) -> None: ...

  @overload
  def setFontColor(self, fontColor: Color) -> None: ...

  @overload
  def setFontColor(self, r: float, g: float, b: float, a: float) -> None: ...

  def setFontSize(self, fontSize: str) -> None: ...

  def setRange(self, range: float) -> None: ...

  def setShowAuthor(self, showAuthor: bool) -> None: ...

  def setShowChatTitle(self, showChatTitle: bool) -> None: ...

  def setShowTimestamp(self, showTimestamp: bool) -> None: ...

  def setUnique(self, unique: bool) -> None: ...

  def setUseOnlyActiveTab(self, useOnlyActiveTab: bool) -> None: ...

  def setZombieAttractionRange(self, zombieAttractionRange: float) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, bb: ByteBuffer): ...

  class FontSize(Enum):

    Large: ChatSettings.FontSize

    Medium: ChatSettings.FontSize

    NotDefine: ChatSettings.FontSize

    Small: ChatSettings.FontSize

    @staticmethod
    def valueOf(arg0: str) -> ChatSettings.FontSize: ...

    @staticmethod
    def values() -> list[ChatSettings.FontSize]: ...


class ChatTab:

  def RemoveChat(self, chatID: int) -> None: ...

  def getID(self) -> int: ...

  def getTitle(self) -> str: ...

  def getTitleID(self) -> str: ...

  def isEnabled(self) -> bool: ...

  def sendAddTabPacket(self, connection: UdpConnection) -> None: ...

  def sendRemoveTabPacket(self, connection: UdpConnection) -> None: ...

  def setEnabled(self, enabled: bool) -> None: ...

  @overload
  def __init__(self, tabID: int, titleID: str): ...
  @overload
  def __init__(self, tabID: int, titleID: str, chatID: int): ...


class ChatUtility:

  @staticmethod
  def InitAllowedChatIcons() -> None: ...

  @staticmethod
  def chatStreamEnabled(type: ChatType) -> bool: ...

  @staticmethod
  @overload
  def findConnection(playerName: str) -> UdpConnection: ...

  @staticmethod
  @overload
  def findConnection(playerOnlineID: int) -> UdpConnection: ...

  @staticmethod
  @overload
  def findPlayer(playerOnlineID: int) -> IsoPlayer: ...

  @staticmethod
  @overload
  def findPlayer(playerNickname: str) -> IsoPlayer: ...

  @staticmethod
  def findPlayerName(playerOnlineID: int) -> str: ...

  @staticmethod
  def getAllowedChatStreams() -> ArrayList[ChatType]: ...

  @staticmethod
  @overload
  def getDistance(source: IsoObject, dest: IsoPlayer) -> float: ...

  @staticmethod
  @overload
  def getDistance(srcX: float, srcY: float, dest: IsoPlayer) -> float: ...

  @staticmethod
  @overload
  def getScrambleValue(src: IsoObject, dest: IsoPlayer, baseRange: float) -> float: ...

  @staticmethod
  @overload
  def getScrambleValue(srcX: float, srcY: float, srcZ: float, srcSquare: IsoGridSquare, dest: IsoPlayer, baseRange: float) -> float: ...

  @staticmethod
  def parseStringForChatBubble(str: str) -> str: ...

  @staticmethod
  def parseStringForChatLog(str: str) -> str: ...

  @staticmethod
  @overload
  def playerWithinBounds(source: IsoObject, dest: IsoObject, dist: float) -> bool: ...

  @staticmethod
  @overload
  def playerWithinBounds(srcX: float, srcY: float, dest: IsoObject, dist: float) -> bool: ...


class NineGridTexture:

  def renderInnerBased(self, x: int, y: int, w: int, h: int, r: float, g: float, b: float, a: float) -> None: ...

  def __init__(self, base: str, outer: int): ...


class ServerChatMessage(ChatMessage):

  def getAuthor(self) -> str: ...

  def setAuthor(self, author: str) -> None: ...

  def __init__(self, chat: ChatBase, text: str): ...


class WhisperChatCreation:

  def __init__(self): ...

