from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.lang import Short, Iterable
from java.nio import ByteBuffer
from java.util import LinkedList, List, ArrayList
from java.util.function import Consumer
from se.krka.kahlua.vm import KahluaTable
from zombie import WorldSoundManager
from zombie.characters import IsoPlayer, IsoZombie
from zombie.config import ConfigOption, BooleanConfigOption
from zombie.core.raknet import UdpConnection
from zombie.iso import IsoGridSquare, BuildingDef, IsoChunk, IsoMetaGrid
from zombie.ui import UIElement

T = TypeVar('T', default=Any)
Allocator_T = TypeVar('Allocator_T', default=Any)

class DebugCommands:

  def ClearZombies(self, arg0: int, arg1: int) -> None: ...

  def SpawnNow(self, arg0: int, arg1: int) -> None: ...

  def SpawnTimeToZero(self, arg0: int, arg1: int) -> None: ...


class LoadedAreas:

  MAX_AREAS: int

  def add(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...

  def clear(self) -> None: ...

  def copy(self, arg0: LoadedAreas) -> None: ...

  def isOnEdge(self, arg0: int, arg1: int) -> bool: ...

  def set(self) -> bool: ...

  def __init__(self, arg0: bool):
    self.areas: list[int]
    self.changed: bool
    self.count: int
    self.prevareas: list[int]
    self.prevcount: int


class MPDebugInfo:

  instance: MPDebugInfo

  def clientPacket(self, bb: ByteBuffer) -> None: ...

  def render(self, renderer: ZombiePopulationRenderer, zoom: float) -> None: ...

  def request(self) -> None: ...

  def serverPacket(self, bb: ByteBuffer, connection: UdpConnection) -> None: ...

  def serverUpdate(self) -> None: ...

  @staticmethod
  def AddDebugSound(sound: WorldSoundManager.WorldSound) -> None: ...

  def __init__(self): ...

  class MPCell: ...

  class MPRepopEvent:

    def init(self, arg0: int, arg1: int, arg2: float) -> MPDebugInfo.MPRepopEvent: ...

  class MPSoundDebugInfo: ...


class NetworkZombieList:

  def getNetworkZombie(self, connection: UdpConnection) -> NetworkZombieList.NetworkZombie: ...

  def __init__(self):
    self.lock: object

  class NetworkZombie:

    def __init__(self, _connection: UdpConnection): ...


class NetworkZombieManager:

  def clearTargetAuth(self, connection: UdpConnection, player: IsoPlayer) -> None: ...

  def getAuthorizedZombieCount(self, con: UdpConnection) -> int: ...

  def getUnauthorizedZombieCount(self) -> int: ...

  def getZombieAuth(self, connection: UdpConnection, bb: ByteBuffer) -> None: ...

  def getZombieList(self, connection: UdpConnection) -> LinkedList[IsoZombie]: ...

  def moveZombie(self, zombie: IsoZombie, to: UdpConnection, player: IsoPlayer) -> None: ...

  def recheck(self, connection: UdpConnection) -> None: ...

  def updateAuth(self, zombie: IsoZombie) -> None: ...

  @staticmethod
  def canSpotted(zombie: IsoZombie) -> bool: ...

  @staticmethod
  def getInstance() -> NetworkZombieManager: ...

  @staticmethod
  def removeZombies(connection: UdpConnection) -> None: ...

  def __init__(self): ...


class NetworkZombiePacker:

  def deleteZombie(self, z: IsoZombie) -> None: ...

  def getZombieData(self, connection: UdpConnection, bb: ByteBuffer) -> int: ...

  def parseZombie(self, bb: ByteBuffer, connection: UdpConnection) -> None: ...

  def postupdate(self) -> None: ...

  def receivePacket(self, bb: ByteBuffer, connection: UdpConnection) -> None: ...

  def send(self, connection: UdpConnection) -> None: ...

  def setExtraUpdate(self) -> None: ...

  @staticmethod
  def getInstance() -> NetworkZombiePacker: ...

  def __init__(self): ...

  class DeletedZombie:

    def __init__(self, arg0: NetworkZombiePacker, arg1: int, arg2: float, arg3: float): ...


class NetworkZombieSimulator:

  MAX_ZOMBIES_PER_UPDATE: int

  def add(self, onlineId: int) -> None: ...

  def addExtraUpdate(self, zombie: IsoZombie) -> None: ...

  def added(self) -> None: ...

  def anyUnknownZombies(self) -> bool: ...

  def becomeLocal(self, z: IsoZombie) -> None: ...

  def becomeRemote(self, z: IsoZombie) -> None: ...

  def clear(self) -> None: ...

  def clearTargetAuth(self, player: IsoPlayer) -> None: ...

  def getAuthorizedZombieCount(self) -> int: ...

  def getUnauthorizedZombieCount(self) -> int: ...

  def isZombieSimulated(self, zombieId: Short) -> bool: ...

  def receivePacket(self, b: ByteBuffer, connection: UdpConnection) -> None: ...

  def remove(self, zombie: IsoZombie) -> None: ...

  def send(self) -> None: ...

  @staticmethod
  def getInstance() -> NetworkZombieSimulator: ...

  def __init__(self): ...


class ObjectPool[T]:

  def alloc(self) -> object: ...

  def clear(self) -> None: ...

  def forEach(self, consumer: Consumer[T]) -> None: ...

  @overload
  def release(self, arg0: list[object]) -> None: ...

  @overload
  def release(self, objs: Iterable[T]) -> None: ...

  @overload
  def release(self, arg0: object) -> None: ...

  @overload
  def release(self, objs: List[T]) -> None: ...

  def releaseAll(self, objs: List[T]) -> None: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, alloc: ObjectPool.Allocator): ...

  class Allocator[Allocator_T]:

    def allocate(self) -> object: ...


class PlayerSpawns:

  def addSpawn(self, arg0: int, arg1: int, arg2: int) -> None: ...

  def allowZombie(self, arg0: IsoGridSquare) -> bool: ...

  def update(self) -> None: ...

  class PlayerSpawn:

    def allowZombie(self, arg0: IsoGridSquare) -> bool: ...

    def __init__(self, arg0: int, arg1: int, arg2: int):
      self.building: BuildingDef
      self.counter: int
      self.x: int
      self.y: int


class ZombieCountOptimiser:

  maxZombieCount: int

  minZombieDistance: int

  zombiesForDelete: ArrayList[IsoZombie]

  @staticmethod
  def incrementZombie(zombie: IsoZombie) -> None: ...

  @staticmethod
  def startCount() -> None: ...

  def __init__(self): ...


class ZombiePopulationManager:

  bDebugLoggingEnabled: bool

  instance: ZombiePopulationManager

  def addChunkToWorld(self, chunk: IsoChunk) -> None: ...

  def addWorldSound(self, sound: WorldSoundManager.WorldSound, doSend: bool) -> None: ...

  def beginSaveRealZombies(self) -> None: ...

  def createHordeFromTo(self, spawnX: int, spawnY: int, targetX: int, targetY: int, count: int) -> None: ...

  def createHordeInAreaTo(self, spawnX: int, spawnY: int, spawnW: int, spawnH: int, targetX: int, targetY: int, count: int) -> None: ...

  def dbgClearZombies(self, cellX: int, cellY: int) -> None: ...

  def dbgSpawnNow(self, cellX: int, cellY: int) -> None: ...

  def dbgSpawnTimeToZero(self, cellX: int, cellY: int) -> None: ...

  def endSaveRealZombies(self) -> None: ...

  def init(self, metaGrid: IsoMetaGrid) -> None: ...

  def onConfigReloaded(self) -> None: ...

  def playerSpawnedAt(self, x: int, y: int, z: int) -> None: ...

  def registerSpawnOrigin(self, x: int, y: int, width: int, height: int, properties: KahluaTable) -> None: ...

  def removeChunkFromWorld(self, chunk: IsoChunk) -> None: ...

  def save(self) -> None: ...

  def setAggroTarget(self, id: int, x: int, y: int) -> None: ...

  def shouldWait(self) -> bool: ...

  def sitAgainstWall(self, zombie: IsoZombie, square: IsoGridSquare) -> None: ...

  def stop(self) -> None: ...

  def updateLoadedAreas(self) -> None: ...

  def updateMain(self) -> None: ...

  def updateThread(self) -> None: ...

  def virtualizeZombie(self, realZombie: IsoZombie) -> None: ...


class ZombiePopulationRenderer:

  def getBoolean(self, name: str) -> bool: ...

  def getOptionByIndex(self, index: int) -> ConfigOption: ...

  def getOptionByName(self, name: str) -> ConfigOption: ...

  def getOptionCount(self) -> int: ...

  def load(self) -> None: ...

  def outlineRect(self, x: float, y: float, w: float, h: float, r: float, g: float, b: float, a: float) -> None: ...

  def render(self, ui: UIElement, zoom: float, xPos: float, yPos: float) -> None: ...

  def renderCellInfo(self, cellX: int, cellY: int, effectivePopulation: int, targetPopulation: int, lastRepopTime: float) -> None: ...

  def renderCircle(self, x: float, y: float, radius: float, r: float, g: float, b: float, a: float) -> None: ...

  def renderLine(self, x1: float, y1: float, x2: float, y2: float, r: float, g: float, b: float, a: float) -> None: ...

  def renderRect(self, x: float, y: float, w: float, h: float, r: float, g: float, b: float, a: float) -> None: ...

  def renderString(self, x: float, y: float, str: str, r: float, g: float, b: float, a: float) -> None: ...

  def renderVehicle(self, sqlid: int, x: float, y: float, r: float, g: float, b: float) -> None: ...

  def renderZombie(self, x: float, y: float, r: float, g: float, b: float) -> None: ...

  def save(self) -> None: ...

  def setBoolean(self, name: str, value: bool) -> None: ...

  def setWallFollowerEnd(self, x: int, y: int) -> None: ...

  def setWallFollowerStart(self, x: int, y: int) -> None: ...

  def uiToWorldX(self, x: float) -> float: ...

  def uiToWorldY(self, y: float) -> float: ...

  def wallFollowerMouseMove(self, x: int, y: int) -> None: ...

  def worldToScreenX(self, x: float) -> float: ...

  def worldToScreenY(self, y: float) -> float: ...

  def __init__(self): ...

  class BooleanDebugOption(BooleanConfigOption):

    def __init__(self, arg0: ZombiePopulationRenderer, arg1: str, arg2: bool): ...


class ZombieTriggerXmlFile:

  def __init__(self):
    self.bdebugloggingenabled: bool
    self.setdebugloggingenabled: bool
    self.spawnhorde: int

