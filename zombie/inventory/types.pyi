from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.lang import Boolean, Enum, Integer
from java.nio import ByteBuffer
from java.util import ArrayList, List, HashMap
from zombie.audio import BaseSoundEmitter
from zombie.characterTextures import BloodBodyPartType
from zombie.characters import IsoPlayer, IsoGameCharacter, SurvivorDesc
from zombie.chat import ChatMessage
from zombie.core.textures import Texture
from zombie.inventory import InventoryItem, ItemContainer
from zombie.iso import IsoGridSquare
from zombie.iso.sprite import IsoSpriteGrid
from zombie.radio.devices import DeviceData
from zombie.scripting.objects import Item, ModelWeaponPart
from zombie.ui import ObjectTooltip
from zombie.worldMap.symbols import WorldMapSymbols

class AlarmClock(InventoryItem):

  PacketPlayer: int

  PacketWorld: int

  def DoTooltip(self, tooltipUI: ObjectTooltip, layout: ObjectTooltip.Layout) -> None: ...

  def finishupdate(self) -> bool: ...

  def getAlarmSound(self) -> str: ...

  def getAlarmSquare(self) -> IsoGridSquare: ...

  def getCategory(self) -> str: ...

  def getHour(self) -> int: ...

  def getMinute(self) -> int: ...

  def getSaveType(self) -> int: ...

  def getSoundRadius(self) -> int: ...

  def isAlarmSet(self) -> bool: ...

  def isDigital(self) -> bool: ...

  def isRinging(self) -> bool: ...

  def load(self, input: ByteBuffer, WorldVersion: int) -> None: ...

  def save(self, output: ByteBuffer, net: bool) -> None: ...

  def setAlarmSet(self, alarmSet: bool) -> None: ...

  def setAlarmSound(self, alarmSound: str) -> None: ...

  def setHour(self, hour: int) -> None: ...

  def setMinute(self, min: int) -> None: ...

  def setSoundRadius(self, soundRadius: int) -> None: ...

  def shouldUpdateInWorld(self) -> bool: ...

  def stopRinging(self) -> None: ...

  def syncAlarmClock(self) -> None: ...

  def syncAlarmClock_Player(self, player: IsoPlayer) -> None: ...

  def syncAlarmClock_World(self) -> None: ...

  def syncStopRinging(self) -> None: ...

  def update(self) -> None: ...

  def updateSound(self, emitter: BaseSoundEmitter) -> None: ...

  @overload
  def __init__(self, module: str, name: str, itemType: str, texName: str): ...
  @overload
  def __init__(self, module: str, name: str, itemType: str, item: Item): ...


class AlarmClockClothing(Clothing):

  PacketPlayer: int

  PacketWorld: int

  def DoTooltip(self, tooltipUI: ObjectTooltip, layout: ObjectTooltip.Layout) -> None: ...

  def finishupdate(self) -> bool: ...

  def getAlarmSound(self) -> str: ...

  def getAlarmSquare(self) -> IsoGridSquare: ...

  def getCategory(self) -> str: ...

  def getHour(self) -> int: ...

  def getMinute(self) -> int: ...

  def getSaveType(self) -> int: ...

  def getSoundRadius(self) -> int: ...

  def isAlarmSet(self) -> bool: ...

  def isDigital(self) -> bool: ...

  def isRinging(self) -> bool: ...

  def load(self, input: ByteBuffer, WorldVersion: int) -> None: ...

  def save(self, output: ByteBuffer, net: bool) -> None: ...

  def setAlarmSet(self, alarmSet: bool) -> None: ...

  def setAlarmSound(self, alarmSound: str) -> None: ...

  def setHour(self, hour: int) -> None: ...

  def setMinute(self, min: int) -> None: ...

  def setSoundRadius(self, soundRadius: int) -> None: ...

  def shouldUpdateInWorld(self) -> bool: ...

  def stopRinging(self) -> None: ...

  def syncAlarmClock(self) -> None: ...

  def syncAlarmClock_Player(self, player: IsoPlayer) -> None: ...

  def syncAlarmClock_World(self) -> None: ...

  def syncStopRinging(self) -> None: ...

  def update(self) -> None: ...

  def updateSound(self, emitter: BaseSoundEmitter) -> None: ...

  @overload
  def __init__(self, module: str, name: str, itemType: str, texName: str, palette: str, SpriteName: str): ...
  @overload
  def __init__(self, module: str, name: str, itemType: str, item: Item, palette: str, SpriteName: str): ...


class Clothing(InventoryItem):

  CONDITION_PER_HOLES: int

  def CanStack(self, item: InventoryItem) -> bool: ...

  def DoTooltip(self, tooltipUI: ObjectTooltip, layout: ObjectTooltip.Layout) -> None: ...

  def IsClothing(self) -> bool: ...

  def Unwear(self) -> None: ...

  def Use(self, bCrafting: bool, bInContainer: bool) -> None: ...

  def addPatch(self, chr: IsoGameCharacter, part: BloodBodyPartType, fabric: InventoryItem) -> None: ...

  def canBe3DRender(self) -> bool: ...

  def canFullyRestore(self, chr: IsoGameCharacter, part: BloodBodyPartType, fabric: InventoryItem) -> bool: ...

  def copyPatchesTo(self, newClothing: Clothing) -> None: ...

  def finishupdate(self) -> bool: ...

  def flushWetness(self) -> None: ...

  def getBiteDefense(self) -> float: ...

  def getBloodLevel(self) -> float: ...

  def getBloodLevelForPart(self, part: BloodBodyPartType) -> float: ...

  def getBloodlevel(self) -> float: ...

  def getBloodlevelForPart(self, part: BloodBodyPartType) -> float: ...

  def getBulletDefense(self) -> float: ...

  def getCanHaveHoles(self) -> Boolean: ...

  def getCategory(self) -> str: ...

  def getChanceToFall(self) -> int: ...

  def getClothingDirtynessIncreaseLevel(self) -> float: ...

  def getClothingExtraSubmenu(self) -> str: ...

  def getCombatSpeedModifier(self) -> float: ...

  def getCondLossPerHole(self) -> int: ...

  def getConditionLowerChance(self) -> int: ...

  def getCoveredParts(self) -> ArrayList[BloodBodyPartType]: ...

  def getDefForPart(self, part: BloodBodyPartType, bite: bool, bullet: bool) -> float: ...

  def getDirtyness(self) -> float: ...

  def getHolesNumber(self) -> int: ...

  def getInsulation(self) -> float: ...

  def getName(self) -> str: ...

  def getNbrOfCoveredParts(self) -> int: ...

  def getNeckProtectionModifier(self) -> float: ...

  def getPalette(self) -> str: ...

  def getPatchType(self, part: BloodBodyPartType) -> Clothing.ClothingPatch: ...

  def getPatchesNumber(self) -> int: ...

  def getRunSpeedModifier(self) -> float: ...

  def getSaveType(self) -> int: ...

  def getScratchDefense(self) -> float: ...

  def getSpriteName(self) -> str: ...

  def getStompPower(self) -> float: ...

  def getTemperature(self) -> float: ...

  def getWaterResistance(self) -> float: ...

  def getWeight(self) -> float: ...

  def getWeightWet(self) -> float: ...

  def getWetness(self) -> float: ...

  def getWindresistance(self) -> float: ...

  def isBloody(self) -> bool: ...

  def isCosmetic(self) -> bool: ...

  def isDirty(self) -> bool: ...

  def isRemoveOnBroken(self) -> Boolean: ...

  def isWorn(self) -> bool: ...

  def load(self, input: ByteBuffer, WorldVersion: int) -> None: ...

  def removePatch(self, part: BloodBodyPartType) -> None: ...

  def save(self, output: ByteBuffer, net: bool) -> None: ...

  def setBiteDefense(self, biteDefense: float) -> None: ...

  def setBloodLevel(self, delta: float) -> None: ...

  def setBulletDefense(self, bulletDefense: float) -> None: ...

  def setCanHaveHoles(self, canHaveHoles: Boolean) -> None: ...

  def setChanceToFall(self, chanceToFall: int) -> None: ...

  def setCombatSpeedModifier(self, combatSpeedModifier: float) -> None: ...

  def setCondition(self, Condition: int) -> None: ...

  def setConditionLowerChance(self, conditionLowerChance: int) -> None: ...

  def setDirtyness(self, delta: float) -> None: ...

  def setInsulation(self, insulation: float) -> None: ...

  def setNeckProtectionModifier(self, neckProtectionModifier: float) -> None: ...

  def setPalette(self, palette: str) -> None: ...

  def setRemoveOnBroken(self, removeOnBroken: Boolean) -> None: ...

  def setRunSpeedModifier(self, runSpeedModifier: float) -> None: ...

  def setScratchDefense(self, scratchDefense: float) -> None: ...

  def setSpriteName(self, SpriteName: str) -> None: ...

  def setStompPower(self, stompPower: float) -> None: ...

  def setTemperature(self, temperature: float) -> None: ...

  def setWaterResistance(self, waterResistance: float) -> None: ...

  def setWeightWet(self, weight: float) -> None: ...

  def setWetness(self, percent: float) -> None: ...

  def setWindresistance(self, windresistance: float) -> None: ...

  def toString(self) -> str: ...

  def update(self) -> None: ...

  @overload
  def updateWetness(self) -> None: ...

  @overload
  def updateWetness(self, bIgnoreEquipped: bool) -> None: ...

  @staticmethod
  def CreateFromSprite(Sprite: str) -> Clothing: ...

  @staticmethod
  def getBiteDefenseFromItem(chr: IsoGameCharacter, fabric: InventoryItem) -> int: ...

  @staticmethod
  def getScratchDefenseFromItem(chr: IsoGameCharacter, fabric: InventoryItem) -> int: ...

  @overload
  def __init__(self, module: str, name: str, itemType: str, texName: str, palette: str, SpriteName: str):
    self.bloodlevel: float

  @overload
  def __init__(self, module: str, name: str, itemType: str, item: Item, palette: str, SpriteName: str): ...

  class WetDryState(Enum):

    Dryer: Clothing.WetDryState

    Invalid: Clothing.WetDryState

    Wetter: Clothing.WetDryState

    @staticmethod
    def valueOf(arg0: str) -> Clothing.WetDryState: ...

    @staticmethod
    def values() -> list[Clothing.WetDryState]: ...

  class ClothingPatch:

    def getBiteDefense(self) -> int: ...

    def getFabricType(self) -> int: ...

    def getFabricTypeName(self) -> str: ...

    def getScratchDefense(self) -> int: ...

    def load(self, arg0: ByteBuffer, arg1: int) -> None: ...

    def load_old(self, arg0: ByteBuffer, arg1: int, arg2: bool) -> None: ...

    def save(self, arg0: ByteBuffer, arg1: bool) -> None: ...

    def save_old(self, arg0: ByteBuffer, arg1: bool) -> None: ...

    @overload
    def __init__(self, arg0: Clothing):
      self.bitedefense: int

      self.conditiongain: int

      self.fabrictype: int

      self.hashole: bool

      self.scratchdefense: int

      self.tailorlvl: int

    @overload
    def __init__(self, arg0: Clothing, arg1: int, arg2: int, arg3: bool): ...

  class ClothingPatchFabricType(Enum):

    Cotton: Clothing.ClothingPatchFabricType

    Denim: Clothing.ClothingPatchFabricType

    Leather: Clothing.ClothingPatchFabricType

    def getType(self) -> str: ...

    @staticmethod
    def fromIndex(index: int) -> Clothing.ClothingPatchFabricType: ...

    @staticmethod
    def fromType(type: str) -> Clothing.ClothingPatchFabricType: ...

    @staticmethod
    def valueOf(arg0: str) -> Clothing.ClothingPatchFabricType: ...

    @staticmethod
    def values() -> list[Clothing.ClothingPatchFabricType]: ...


class ComboItem(InventoryItem):

  def getSaveType(self) -> int: ...

  @overload
  def __init__(self, module: str, name: str, itemType: str, texName: str): ...
  @overload
  def __init__(self, module: str, name: str, itemType: str, item: Item): ...


class Drainable:

  def getUsedDelta(self) -> float: ...

  def setUsedDelta(self, usedDelta: float) -> None: ...


class DrainableComboItem(InventoryItem):

  def CanStack(self, item: InventoryItem) -> bool: ...

  def IsDrainable(self) -> bool: ...

  def Use(self) -> None: ...

  def canConsolidate(self) -> bool: ...

  def finishupdate(self) -> bool: ...

  def getDelta(self) -> float: ...

  def getDrainableUsesFloat(self) -> float: ...

  def getDrainableUsesInt(self) -> int: ...

  def getHeat(self) -> float: ...

  def getInvHeat(self) -> float: ...

  def getOnCooked(self) -> str: ...

  def getRainFactor(self) -> float: ...

  def getRemainingUses(self) -> int: ...

  def getReplaceOnCooked(self) -> List[str]: ...

  def getReplaceOnDeplete(self) -> str: ...

  def getReplaceOnDepleteFullType(self) -> str: ...

  def getSaveType(self) -> int: ...

  def getTicks(self) -> float: ...

  def getTicksPerEquipUse(self) -> int: ...

  def getUseDelta(self) -> float: ...

  @overload
  def getUsedDelta(self) -> float: ...

  @overload
  def getUsedDelta(self) -> float: ...

  def getWeightEmpty(self) -> float: ...

  def isUseWhileEquiped(self) -> bool: ...

  def isUseWhileUnequiped(self) -> bool: ...

  @overload
  def render(self) -> None: ...

  @overload
  def render(self) -> None: ...

  @overload
  def renderlast(self) -> None: ...

  @overload
  def renderlast(self) -> None: ...

  def setCanConsolidate(self, canConsolidate: bool) -> None: ...

  def setDelta(self, delta: float) -> None: ...

  def setHeat(self, heat: float) -> None: ...

  def setOnCooked(self, onCooked: str) -> None: ...

  def setRainFactor(self, rainFactor: float) -> None: ...

  def setReplaceOnCooked(self, replaceOnCooked: List[str]) -> None: ...

  def setReplaceOnDeplete(self, ReplaceOnDeplete: str) -> None: ...

  def setTicks(self, ticks: float) -> None: ...

  def setTicksPerEquipUse(self, ticksPerEquipUse: int) -> None: ...

  def setUseDelta(self, useDelta: float) -> None: ...

  def setUseWhileEquiped(self, bUseWhileEquiped: bool) -> None: ...

  def setUseWhileUnequiped(self, bUseWhileUnequiped: bool) -> None: ...

  @overload
  def setUsedDelta(self, usedDelta: float) -> None: ...

  @overload
  def setUsedDelta(self, usedDelta: float) -> None: ...

  def setWeightEmpty(self, weight: float) -> None: ...

  def shouldUpdateInWorld(self) -> bool: ...

  @overload
  def update(self) -> None: ...

  @overload
  def update(self) -> None: ...

  def updateWeight(self) -> None: ...

  @overload
  def __init__(self, module: str, name: str, itemType: str, texName: str):
    self.replaceoncooked: List[str]

  @overload
  def __init__(self, module: str, name: str, itemType: str, item: Item): ...


class Food(InventoryItem):

  FreezerAgeMultiplier: float

  def CanStack(self, item: InventoryItem) -> bool: ...

  def DoTooltip(self, tooltipUI: ObjectTooltip, layout: ObjectTooltip.Layout) -> None: ...

  def IsFood(self) -> bool: ...

  def canBeFrozen(self) -> bool: ...

  def finishupdate(self) -> bool: ...

  def freeze(self) -> None: ...

  def getActualWeight(self) -> float: ...

  def getBaseHungChange(self) -> float: ...

  def getBaseHunger(self) -> float: ...

  def getBoredomChange(self) -> float: ...

  def getBoredomChangeUnmodified(self) -> float: ...

  def getCalories(self) -> float: ...

  def getCarbohydrates(self) -> float: ...

  def getCategory(self) -> str: ...

  def getChef(self) -> str: ...

  def getCompostTime(self) -> float: ...

  def getCookingSound(self) -> str: ...

  def getCustomEatSound(self) -> str: ...

  def getEndChange(self) -> float: ...

  def getEnduranceChange(self) -> float: ...

  def getEnduranceChangeUnmodified(self) -> float: ...

  def getFluReduction(self) -> int: ...

  def getFoodType(self) -> str: ...

  def getFreezingTime(self) -> float: ...

  def getHeat(self) -> float: ...

  def getHerbalistType(self) -> str: ...

  def getHungChange(self) -> float: ...

  def getHungerChange(self) -> float: ...

  def getInvHeat(self) -> float: ...

  def getLastCookMinute(self) -> int: ...

  def getLipids(self) -> float: ...

  def getName(self) -> str: ...

  def getOnCooked(self) -> str: ...

  def getOnEat(self) -> str: ...

  def getPainReduction(self) -> float: ...

  def getPoisonDetectionLevel(self) -> int: ...

  def getPoisonLevelForRecipe(self) -> Integer: ...

  def getPoisonPower(self) -> int: ...

  def getProteins(self) -> float: ...

  def getReduceFoodSickness(self) -> int: ...

  def getReplaceOnCooked(self) -> List[str]: ...

  def getReplaceOnRotten(self) -> str: ...

  def getRottenTime(self) -> float: ...

  def getSaveType(self) -> int: ...

  def getScore(self, desc: SurvivorDesc) -> float: ...

  def getSpices(self) -> ArrayList[str]: ...

  def getStressChange(self) -> float: ...

  def getStressChangeUnmodified(self) -> float: ...

  def getTex(self) -> Texture: ...

  def getThirstChange(self) -> float: ...

  def getThirstChangeUnmodified(self) -> float: ...

  def getUnhappyChange(self) -> float: ...

  def getUnhappyChangeUnmodified(self) -> float: ...

  def getUseForPoison(self) -> int: ...

  def getUseOnConsume(self) -> str: ...

  def getWeight(self) -> float: ...

  def getWorldTexture(self) -> str: ...

  def isBadCold(self) -> bool: ...

  def isBadInMicrowave(self) -> bool: ...

  def isCookedInMicrowave(self) -> bool: ...

  def isFreezing(self) -> bool: ...

  def isFresh(self) -> bool: ...

  def isFrozen(self) -> bool: ...

  def isGoodHot(self) -> bool: ...

  def isPackaged(self) -> bool: ...

  def isPoison(self) -> bool: ...

  def isRemoveNegativeEffectOnCooked(self) -> bool: ...

  def isRotten(self) -> bool: ...

  def isSpice(self) -> bool: ...

  def isThawing(self) -> bool: ...

  def isbDangerousUncooked(self) -> bool: ...

  def load(self, input: ByteBuffer, WorldVersion: int) -> None: ...

  def multiplyFoodValues(self, percentage: float) -> None: ...

  def save(self, output: ByteBuffer, net: bool) -> None: ...

  def setAutoAge(self) -> None: ...

  def setBadCold(self, bBadCold: bool) -> None: ...

  def setBadInMicrowave(self, badInMicrowave: bool) -> None: ...

  def setBaseHunger(self, baseHunger: float) -> None: ...

  def setCalories(self, calories: float) -> None: ...

  def setCanBeFrozen(self, canBeFrozen: bool) -> None: ...

  def setCarbohydrates(self, carbohydrates: float) -> None: ...

  def setChef(self, chef: str) -> None: ...

  def setCompostTime(self, compostTime: float) -> None: ...

  def setCookedInMicrowave(self, b: bool) -> None: ...

  def setCustomEatSound(self, customEatSound: str) -> None: ...

  def setEndChange(self, endChange: float) -> None: ...

  def setEnduranceChange(self, endChange: float) -> None: ...

  def setFluReduction(self, fluReduction: int) -> None: ...

  def setFoodType(self, foodType: str) -> None: ...

  def setFreezingTime(self, freezingTime: float) -> None: ...

  def setFrozen(self, frozen: bool) -> None: ...

  def setGoodHot(self, bGoodHot: bool) -> None: ...

  def setHeat(self, Heat: float) -> None: ...

  def setHerbalistType(self, type: str) -> None: ...

  def setHungChange(self, hungChange: float) -> None: ...

  def setLastCookMinute(self, LastCookMinute: int) -> None: ...

  def setLipids(self, lipids: float) -> None: ...

  def setOnCooked(self, onCooked: str) -> None: ...

  def setOnEat(self, onEat: str) -> None: ...

  def setPackaged(self, packaged: bool) -> None: ...

  def setPainReduction(self, painReduction: float) -> None: ...

  def setPoisonDetectionLevel(self, poisonDetectionLevel: int) -> None: ...

  def setPoisonLevelForRecipe(self, poisonLevelForRecipe: Integer) -> None: ...

  def setPoisonPower(self, poisonPower: int) -> None: ...

  def setProteins(self, proteins: float) -> None: ...

  def setReduceFoodSickness(self, ReduceFoodSickness: int) -> None: ...

  def setRemoveNegativeEffectOnCooked(self, removeNegativeEffectOnCooked: bool) -> None: ...

  def setReplaceOnCooked(self, replaceOnCooked: List[str]) -> None: ...

  def setReplaceOnRotten(self, replaceOnRotten: str) -> None: ...

  def setRotten(self, rotten: bool) -> None: ...

  def setRottenTime(self, time: float) -> None: ...

  def setSpice(self, isSpice: bool) -> None: ...

  def setSpices(self, spices: ArrayList[str]) -> None: ...

  def setThirstChange(self, thirstChange: float) -> None: ...

  def setUseForPoison(self, useForPoison: int) -> None: ...

  def setUseOnConsume(self, useOnConsume: str) -> None: ...

  def setbDangerousUncooked(self, bDangerousUncooked: bool) -> None: ...

  def shouldUpdateInWorld(self) -> bool: ...

  def update(self) -> None: ...

  def updateAge(self) -> None: ...

  def updateFreezing(self, outermostContainer: ItemContainer) -> None: ...

  def updateSound(self, emitter: BaseSoundEmitter) -> None: ...

  @overload
  def __init__(self, module: str, name: str, itemType: str, texName: str):
    self.poison: bool

    self.spices: ArrayList[str]

    self.thirstchange: float

  @overload
  def __init__(self, module: str, name: str, itemType: str, item: Item): ...


class HandWeapon(InventoryItem):

  def CanStack(self, item: InventoryItem) -> bool: ...

  def DoTooltip(self, tooltipUI: ObjectTooltip, layout: ObjectTooltip.Layout) -> None: ...

  def IsWeapon(self) -> bool: ...

  @overload
  def attachWeaponPart(self, part: WeaponPart) -> None: ...

  @overload
  def attachWeaponPart(self, part: WeaponPart, doChange: bool) -> None: ...

  def canBePlaced(self) -> bool: ...

  def canBeReused(self) -> bool: ...

  def detachWeaponPart(self, part: WeaponPart) -> None: ...

  def getActualWeight(self) -> float: ...

  def getAimingMod(self) -> float: ...

  def getAimingPerkCritModifier(self) -> int: ...

  def getAimingPerkHitChanceModifier(self) -> float: ...

  def getAimingPerkMinAngleModifier(self) -> float: ...

  def getAimingPerkRangeModifier(self) -> float: ...

  def getAimingTime(self) -> int: ...

  @overload
  def getAllWeaponParts(self) -> ArrayList[WeaponPart]: ...

  @overload
  def getAllWeaponParts(self, result: ArrayList[WeaponPart]) -> ArrayList[WeaponPart]: ...

  def getAmmoBox(self) -> str: ...

  def getAmmoPerShoot(self) -> int: ...

  def getBaseSpeed(self) -> float: ...

  def getBestMagazine(self, owner: IsoGameCharacter) -> InventoryItem: ...

  def getBloodLevel(self) -> float: ...

  def getBulletOutSound(self) -> str: ...

  def getCanon(self) -> WeaponPart: ...

  def getCategories(self) -> ArrayList[str]: ...

  def getCategory(self) -> str: ...

  def getClickSound(self) -> str: ...

  def getClip(self) -> WeaponPart: ...

  def getClipSize(self) -> int: ...

  def getConditionLowerChance(self) -> int: ...

  def getContentsWeight(self) -> float: ...

  def getCritDmgMultiplier(self) -> float: ...

  def getCriticalChance(self) -> float: ...

  def getDamageCategory(self) -> str: ...

  def getDamageMod(self, chr: IsoGameCharacter) -> float: ...

  def getDoSwingBeforeImpact(self) -> float: ...

  def getDoorDamage(self) -> int: ...

  def getDoorHitSound(self) -> str: ...

  def getEjectAmmoSound(self) -> str: ...

  def getEjectAmmoStartSound(self) -> str: ...

  def getEjectAmmoStopSound(self) -> str: ...

  def getEnduranceMod(self) -> float: ...

  def getExplosionPower(self) -> int: ...

  def getExplosionRange(self) -> int: ...

  def getExplosionTimer(self) -> int: ...

  def getExtraDamage(self) -> float: ...

  def getFatigueMod(self, chr: IsoGameCharacter) -> float: ...

  def getFireMode(self) -> str: ...

  def getFireModePossibilities(self) -> ArrayList[str]: ...

  def getFirePower(self) -> int: ...

  def getFireRange(self) -> int: ...

  def getHitChance(self) -> int: ...

  def getHitFloorSound(self) -> str: ...

  def getImpactSound(self) -> str: ...

  def getInsertAmmoSound(self) -> str: ...

  def getInsertAmmoStartSound(self) -> str: ...

  def getInsertAmmoStopSound(self) -> str: ...

  def getJamGunChance(self) -> float: ...

  def getKnockbackMod(self, chr: IsoGameCharacter) -> float: ...

  def getKnockdownMod(self) -> float: ...

  def getMagazineType(self) -> str: ...

  def getMaxAngle(self) -> float: ...

  def getMaxDamage(self) -> float: ...

  def getMaxHitCount(self) -> int: ...

  @overload
  def getMaxRange(self) -> float: ...

  @overload
  def getMaxRange(self, owner: IsoGameCharacter) -> float: ...

  def getMinAngle(self) -> float: ...

  def getMinDamage(self) -> float: ...

  def getMinRange(self) -> float: ...

  def getMinRangeRanged(self) -> float: ...

  def getMinimumSwingTime(self) -> float: ...

  def getModelWeaponPart(self) -> ArrayList[ModelWeaponPart]: ...

  def getNoiseDuration(self) -> int: ...

  def getNoiseFactor(self) -> float: ...

  def getNoiseRange(self) -> int: ...

  def getOriginalWeaponSprite(self) -> str: ...

  def getOtherBoost(self) -> float: ...

  def getOtherHandRequire(self) -> str: ...

  def getPhysicsObject(self) -> str: ...

  def getPlacedSprite(self) -> str: ...

  def getProjectileCount(self) -> int: ...

  def getPushBackMod(self) -> float: ...

  def getRackSound(self) -> str: ...

  def getRangeMod(self, chr: IsoGameCharacter) -> float: ...

  def getRecoilDelay(self) -> int: ...

  def getRecoilpad(self) -> WeaponPart: ...

  def getReloadTime(self) -> int: ...

  def getRunAnim(self) -> str: ...

  def getSaveType(self) -> int: ...

  def getScope(self) -> WeaponPart: ...

  def getScore(self, desc: SurvivorDesc) -> float: ...

  def getSensorRange(self) -> int: ...

  def getShellFallSound(self) -> str: ...

  def getSling(self) -> WeaponPart: ...

  def getSmokeRange(self) -> int: ...

  def getSoundGain(self) -> float: ...

  def getSoundRadius(self) -> int: ...

  def getSoundVolume(self) -> int: ...

  def getSpeedMod(self, chr: IsoGameCharacter) -> float: ...

  def getSpentRoundCount(self) -> int: ...

  def getSplatNumber(self) -> int: ...

  def getSplatSize(self) -> float: ...

  def getStaticModel(self) -> str: ...

  def getStock(self) -> WeaponPart: ...

  def getStopPower(self) -> float: ...

  def getSubCategory(self) -> str: ...

  def getSwingSound(self) -> str: ...

  def getSwingTime(self) -> float: ...

  def getToHitMod(self, chr: IsoGameCharacter) -> float: ...

  def getToHitModifier(self) -> float: ...

  def getTreeDamage(self) -> int: ...

  def getTriggerExplosionTimer(self) -> int: ...

  def getWeaponPart(self, type: str) -> WeaponPart: ...

  @overload
  def getWeaponPartWeightModifier(self, type: str) -> float: ...

  @overload
  def getWeaponPartWeightModifier(self, part: WeaponPart) -> float: ...

  def getWeaponReloadType(self) -> str: ...

  def getWeaponSprite(self) -> str: ...

  def getWeight(self) -> float: ...

  def getZombieHitSound(self) -> str: ...

  def haveChamber(self) -> bool: ...

  def isAimed(self) -> bool: ...

  def isAimedFirearm(self) -> bool: ...

  def isAimedHandWeapon(self) -> bool: ...

  def isAlwaysKnockdown(self) -> bool: ...

  def isAngleFalloff(self) -> bool: ...

  def isCanBarracade(self) -> bool: ...

  def isCantAttackWithLowestEndurance(self) -> bool: ...

  def isContainsClip(self) -> bool: ...

  def isDamageMakeHole(self) -> bool: ...

  def isInsertAllBulletsReload(self) -> bool: ...

  def isInstantExplosion(self) -> bool: ...

  def isJammed(self) -> bool: ...

  def isKnockBackOnNoDeath(self) -> bool: ...

  def isManuallyRemoveSpentRounds(self) -> bool: ...

  def isMultipleHitConditionAffected(self) -> bool: ...

  def isOtherHandUse(self) -> bool: ...

  def isPiercingBullets(self) -> bool: ...

  def isRackAfterShoot(self) -> bool: ...

  def isRangeFalloff(self) -> bool: ...

  def isRanged(self) -> bool: ...

  def isReloadable(self, owner: IsoGameCharacter) -> bool: ...

  def isRoundChambered(self) -> bool: ...

  def isShareDamage(self) -> bool: ...

  def isShareEndurance(self) -> bool: ...

  def isSpentRoundChambered(self) -> bool: ...

  def isSplatBloodOnNoDeath(self) -> bool: ...

  def isUseEndurance(self) -> bool: ...

  def isUseSelf(self) -> bool: ...

  def load(self, input: ByteBuffer, WorldVersion: int) -> None: ...

  def randomizeBullets(self) -> None: ...

  def save(self, output: ByteBuffer, net: bool) -> None: ...

  def setAimingPerkCritModifier(self, aimingPerkCritModifier: int) -> None: ...

  def setAimingPerkHitChanceModifier(self, aimingPerkHitChanceModifier: float) -> None: ...

  def setAimingPerkMinAngleModifier(self, aimingPerkMinAngleModifier: float) -> None: ...

  def setAimingPerkRangeModifier(self, aimingPerkRangeModifier: float) -> None: ...

  def setAimingTime(self, aimingTime: int) -> None: ...

  def setAlwaysKnockdown(self, AlwaysKnockdown: bool) -> None: ...

  def setAmmoBox(self, ammoBox: str) -> None: ...

  def setAmmoPerShoot(self, ammoPerShoot: int) -> None: ...

  def setAngleFalloff(self, angleFalloff: bool) -> None: ...

  def setBaseSpeed(self, baseSpeed: float) -> None: ...

  def setBloodLevel(self, level: float) -> None: ...

  def setBulletOutSound(self, bulletOutSound: str) -> None: ...

  def setCanBarracade(self, bCanBarracade: bool) -> None: ...

  def setCanBePlaced(self, canBePlaced: bool) -> None: ...

  def setCanBeReused(self, canBeReused: bool) -> None: ...

  def setCanon(self, canon: WeaponPart) -> None: ...

  def setCantAttackWithLowestEndurance(self, CantAttackWithLowestEndurance: bool) -> None: ...

  def setCategories(self, categories: ArrayList[str]) -> None: ...

  def setClickSound(self, clickSound: str) -> None: ...

  def setClip(self, clip: WeaponPart) -> None: ...

  def setClipSize(self, capacity: int) -> None: ...

  def setConditionLowerChance(self, ConditionLowerChance: int) -> None: ...

  def setContainsClip(self, containsClip: bool) -> None: ...

  def setCritDmgMultiplier(self, critDmgMultiplier: float) -> None: ...

  def setCriticalChance(self, criticalChance: float) -> None: ...

  def setDamageCategory(self, damageCategory: str) -> None: ...

  def setDamageMakeHole(self, damageMakeHole: bool) -> None: ...

  def setDoSwingBeforeImpact(self, doSwingBeforeImpact: float) -> None: ...

  def setDoorDamage(self, DoorDamage: int) -> None: ...

  def setDoorHitSound(self, doorHitSound: str) -> None: ...

  def setEnduranceMod(self, EnduranceMod: float) -> None: ...

  def setExplosionPower(self, explosionPower: int) -> None: ...

  def setExplosionRange(self, explosionRange: int) -> None: ...

  def setExplosionTimer(self, explosionTimer: int) -> None: ...

  def setExtraDamage(self, extraDamage: float) -> None: ...

  def setFireMode(self, fireMode: str) -> None: ...

  def setFireModePossibilities(self, fireModePossibilities: ArrayList[str]) -> None: ...

  def setFirePower(self, firePower: int) -> None: ...

  def setFireRange(self, fireRange: int) -> None: ...

  def setHaveChamber(self, haveChamber: bool) -> None: ...

  def setHitChance(self, hitChance: int) -> None: ...

  def setHitFloorSound(self, hitFloorSound: str) -> None: ...

  def setImpactSound(self, impactSound: str) -> None: ...

  def setInsertAllBulletsReload(self, insertAllBulletsReload: bool) -> None: ...

  def setJamGunChance(self, jamGunChance: float) -> None: ...

  def setJammed(self, isJammed: bool) -> None: ...

  def setKnockBackOnNoDeath(self, knockBackOnNoDeath: bool) -> None: ...

  def setKnockdownMod(self, KnockdownMod: float) -> None: ...

  def setMagazineType(self, magazineType: str) -> None: ...

  def setMaxAngle(self, maxAngle: float) -> None: ...

  def setMaxDamage(self, maxDamage: float) -> None: ...

  def setMaxHitCount(self, maxHitCount: int) -> None: ...

  def setMaxRange(self, maxRange: float) -> None: ...

  def setMinAngle(self, minAngle: float) -> None: ...

  def setMinDamage(self, minDamage: float) -> None: ...

  def setMinRange(self, minRange: float) -> None: ...

  def setMinRangeRanged(self, minRangeRanged: float) -> None: ...

  def setMinimumSwingTime(self, minimumSwingTime: float) -> None: ...

  def setModelWeaponPart(self, modelWeaponPart: ArrayList[ModelWeaponPart]) -> None: ...

  def setMultipleHitConditionAffected(self, MultipleHitConditionAffected: bool) -> None: ...

  def setNoiseFactor(self, noiseFactor: float) -> None: ...

  def setNoiseRange(self, noiseRange: int) -> None: ...

  def setOriginalWeaponSprite(self, originalWeaponSprite: str) -> None: ...

  def setOtherBoost(self, otherBoost: float) -> None: ...

  def setOtherHandRequire(self, otherHandRequire: str) -> None: ...

  def setOtherHandUse(self, otherHandUse: bool) -> None: ...

  def setPhysicsObject(self, physicsObject: str) -> None: ...

  def setPiercingBullets(self, piercingBullets: bool) -> None: ...

  def setPlacedSprite(self, placedSprite: str) -> None: ...

  def setProjectileCount(self, count: int) -> None: ...

  def setPushBackMod(self, pushBackMod: float) -> None: ...

  def setRackAfterShoot(self, rackAfterShoot: bool) -> None: ...

  def setRackSound(self, rackSound: str) -> None: ...

  def setRangeFalloff(self, rangeFalloff: bool) -> None: ...

  def setRanged(self, ranged: bool) -> None: ...

  def setRecoilDelay(self, recoilDelay: int) -> None: ...

  def setRecoilpad(self, recoilpad: WeaponPart) -> None: ...

  def setReloadTime(self, reloadTime: int) -> None: ...

  def setRoundChambered(self, roundChambered: bool) -> None: ...

  def setScope(self, scope: WeaponPart) -> None: ...

  def setSensorRange(self, sensorRange: int) -> None: ...

  def setShareDamage(self, shareDamage: bool) -> None: ...

  def setShareEndurance(self, shareEndurance: bool) -> None: ...

  def setShellFallSound(self, shellFallSound: str) -> None: ...

  def setSling(self, sling: WeaponPart) -> None: ...

  def setSmokeRange(self, smokeRange: int) -> None: ...

  def setSoundGain(self, soundGain: float) -> None: ...

  def setSoundRadius(self, soundRadius: int) -> None: ...

  def setSoundVolume(self, soundVolume: int) -> None: ...

  def setSpentRoundChambered(self, roundChambered: bool) -> None: ...

  def setSpentRoundCount(self, count: int) -> None: ...

  def setSplatBloodOnNoDeath(self, splatBloodOnNoDeath: bool) -> None: ...

  def setSplatNumber(self, splatNumber: int) -> None: ...

  def setStock(self, stock: WeaponPart) -> None: ...

  def setSubCategory(self, subcategory: str) -> None: ...

  def setSwingSound(self, swingSound: str) -> None: ...

  def setSwingTime(self, swingTime: float) -> None: ...

  def setToHitModifier(self, toHitModifier: float) -> None: ...

  def setTreeDamage(self, treeDamage: int) -> None: ...

  def setTriggerExplosionTimer(self, triggerExplosionTimer: int) -> None: ...

  def setUseEndurance(self, useEndurance: bool) -> None: ...

  def setUseSelf(self, useSelf: bool) -> None: ...

  def setWeaponLength(self, weaponLength: float) -> None: ...

  def setWeaponPart(self, type: str, part: WeaponPart) -> None: ...

  def setWeaponReloadType(self, weaponReloadType: str) -> None: ...

  def setWeaponSprite(self, weaponSprite: str) -> None: ...

  def setZombieHitSound(self, hitSound: str) -> None: ...

  @overload
  def __init__(self, module: str, name: str, itemType: str, texName: str):
    self.aimingmod: float

    self.bisaimedfirearm: bool

    self.bisaimedhandweapon: bool

    self.criticalchance: float

    self.hitanglemod: float

    self.idleanim: str

    self.projectilecount: int

    self.runanim: str

    self.splatsize: float

    self.weaponlength: float

  @overload
  def __init__(self, module: str, name: str, itemType: str, item: Item): ...


class InventoryContainer(InventoryItem):

  @overload
  def DoTooltip(self, tooltipUI: ObjectTooltip) -> None: ...

  @overload
  def DoTooltip(self, tooltipUI: ObjectTooltip, layout: ObjectTooltip.Layout) -> None: ...

  def IsInventoryContainer(self) -> bool: ...

  def canBeEquipped(self) -> str: ...

  def getBloodLevel(self) -> float: ...

  def getCapacity(self) -> int: ...

  def getCategory(self) -> str: ...

  def getClothingExtraSubmenu(self) -> str: ...

  def getContentsWeight(self) -> float: ...

  def getEffectiveCapacity(self, chr: IsoGameCharacter) -> int: ...

  def getEquippedWeight(self) -> float: ...

  def getInventory(self) -> ItemContainer: ...

  def getInventoryWeight(self) -> float: ...

  def getItemContainer(self) -> ItemContainer: ...

  def getSaveType(self) -> int: ...

  def getWeightReduction(self) -> int: ...

  def load(self, input: ByteBuffer, WorldVersion: int) -> None: ...

  def save(self, output: ByteBuffer, net: bool) -> None: ...

  def setBloodLevel(self, delta: float) -> None: ...

  def setCanBeEquipped(self, canBeEquipped: str) -> None: ...

  def setCapacity(self, capacity: int) -> None: ...

  def setItemContainer(self, cont: ItemContainer) -> None: ...

  def setWeightReduction(self, weightReduction: int) -> None: ...

  def updateAge(self) -> None: ...

  def __init__(self, module: str, name: str, itemType: str, texName: str): ...


class Key(InventoryItem):

  highlightDoor: list[Key]

  def getCategory(self) -> str: ...

  def getKeyId(self) -> int: ...

  def getNumberOfKey(self) -> int: ...

  def getSaveType(self) -> int: ...

  def isDigitalPadlock(self) -> bool: ...

  def isPadlock(self) -> bool: ...

  def load(self, input: ByteBuffer, WorldVersion: int) -> None: ...

  def save(self, output: ByteBuffer, net: bool) -> None: ...

  def setDigitalPadlock(self, digitalPadlock: bool) -> None: ...

  def setKeyId(self, keyId: int) -> None: ...

  def setNumberOfKey(self, numberOfKey: int) -> None: ...

  def setPadlock(self, padlock: bool) -> None: ...

  def takeKeyId(self) -> None: ...

  @staticmethod
  def setHighlightDoors(playerNum: int, item: InventoryItem) -> None: ...

  def __init__(self, module: str, name: str, type: str, tex: str): ...


class KeyRing(InventoryItem):

  def addKey(self, key: Key) -> None: ...

  def containsKeyId(self, keyId: int) -> bool: ...

  def getCategory(self) -> str: ...

  def getKeys(self) -> ArrayList[Key]: ...

  def getSaveType(self) -> int: ...

  def setKeys(self, keys: ArrayList[Key]) -> None: ...

  def __init__(self, module: str, name: str, type: str, tex: str): ...


class Literature(InventoryItem):

  def DoTooltip(self, tooltipUI: ObjectTooltip, layout: ObjectTooltip.Layout) -> None: ...

  def IsLiterature(self) -> bool: ...

  def addPage(self, index: Integer, text: str) -> None: ...

  def canBeWrite(self) -> bool: ...

  def finishupdate(self) -> bool: ...

  def getAlreadyReadPages(self) -> int: ...

  def getBookName(self) -> str: ...

  def getBoredomChange(self) -> float: ...

  def getCategory(self) -> str: ...

  def getCustomPages(self) -> HashMap[Integer, str]: ...

  def getLockedBy(self) -> str: ...

  def getLvlSkillTrained(self) -> int: ...

  def getMaxLevelTrained(self) -> int: ...

  def getNumLevelsTrained(self) -> int: ...

  def getNumberOfPages(self) -> int: ...

  def getPageToWrite(self) -> int: ...

  def getSaveType(self) -> int: ...

  def getSkillTrained(self) -> str: ...

  def getStressChange(self) -> float: ...

  def getTeachedRecipes(self) -> List[str]: ...

  def getUnhappyChange(self) -> float: ...

  def load(self, input: ByteBuffer, WorldVersion: int) -> None: ...

  def save(self, output: ByteBuffer, net: bool) -> None: ...

  def seePage(self, index: Integer) -> str: ...

  def setAlreadyReadPages(self, alreadyReadPages: int) -> None: ...

  def setBookName(self, bookName: str) -> None: ...

  def setCanBeWrite(self, canBeWrite: bool) -> None: ...

  def setCustomPages(self, customPages: HashMap[Integer, str]) -> None: ...

  def setLockedBy(self, lockedBy: str) -> None: ...

  def setLvlSkillTrained(self, lvlSkillTrained: int) -> None: ...

  def setNumLevelsTrained(self, numLevelsTrained: int) -> None: ...

  def setNumberOfPages(self, numberOfPages: int) -> None: ...

  def setPageToWrite(self, pageToWrite: int) -> None: ...

  def setSkillTrained(self, skillTrained: str) -> None: ...

  def setTeachedRecipes(self, teachedRecipes: List[str]) -> None: ...

  def update(self) -> None: ...

  @overload
  def __init__(self, module: str, name: str, itemType: str, texName: str):
    self.balreadyread: bool

    self.requireinhandorinventory: str

    self.useonconsume: str

  @overload
  def __init__(self, module: str, name: str, itemType: str, item: Item): ...


class MapItem(InventoryItem):

  WORLD_MAP_INSTANCE: MapItem

  def IsMap(self) -> bool: ...

  def getMapID(self) -> str: ...

  def getSaveType(self) -> int: ...

  def getSymbols(self) -> WorldMapSymbols: ...

  def load(self, input: ByteBuffer, WorldVersion: int) -> None: ...

  def save(self, output: ByteBuffer, net: bool) -> None: ...

  def setMapID(self, mapID: str) -> None: ...

  @staticmethod
  def LoadWorldMap() -> None: ...

  @staticmethod
  def Reset() -> None: ...

  @staticmethod
  def SaveWorldMap() -> None: ...

  @staticmethod
  def getSingleton() -> MapItem: ...

  @overload
  def __init__(self, module: str, name: str, type: str, tex: str): ...
  @overload
  def __init__(self, module: str, name: str, type: str, item: Item): ...


class Moveable(InventoryItem):

  def CanBeDroppedOnFloor(self) -> bool: ...

  def ReadFromWorldSprite(self, sprite: str) -> bool: ...

  def getCustomNameFull(self) -> str: ...

  def getDisplayName(self) -> str: ...

  def getLightB(self) -> float: ...

  def getLightBulbItem(self) -> str: ...

  def getLightDelta(self) -> float: ...

  def getLightG(self) -> float: ...

  def getLightPower(self) -> float: ...

  def getLightR(self) -> float: ...

  def getMovableFullName(self) -> str: ...

  def getName(self) -> str: ...

  def getSaveType(self) -> int: ...

  def getSpriteGrid(self) -> IsoSpriteGrid: ...

  def getWorldSprite(self) -> str: ...

  def isLight(self) -> bool: ...

  def isLightHasBattery(self) -> bool: ...

  def isLightUseBattery(self) -> bool: ...

  def isMultiGridAnchor(self) -> bool: ...

  def load(self, input: ByteBuffer, WorldVersion: int) -> None: ...

  def save(self, output: ByteBuffer, net: bool) -> None: ...

  def setLight(self, isLight: bool) -> None: ...

  def setLightB(self, lightB: float) -> None: ...

  def setLightBulbItem(self, lightBulbItem: str) -> None: ...

  def setLightDelta(self, lightDelta: float) -> None: ...

  def setLightG(self, lightG: float) -> None: ...

  def setLightHasBattery(self, lightHasBattery: bool) -> None: ...

  def setLightPower(self, lightPower: float) -> None: ...

  def setLightR(self, lightR: float) -> None: ...

  def setLightUseBattery(self, lightUseBattery: bool) -> None: ...

  def setWorldSprite(self, WorldSprite: str) -> None: ...

  @overload
  def __init__(self, module: str, name: str, type: str, tex: str): ...
  @overload
  def __init__(self, module: str, name: str, type: str, item: Item): ...


class Radio(Moveable):

  @overload
  def AddDeviceText(self, line: str, r: float, g: float, b: float, guid: str, codes: str, distance: int) -> None: ...

  @overload
  def AddDeviceText(self, line: str, r: float, g: float, b: float, guid: str, codes: str, distance: int) -> None: ...

  @overload
  def AddDeviceText(self, msg: ChatMessage, r: float, g: float, b: float, guid: str, codes: str, distance: int) -> None: ...

  @overload
  def AddDeviceText(self, arg0: IsoPlayer, arg1: str, arg2: float, arg3: float, arg4: float, arg5: str, arg6: str, arg7: int) -> None: ...

  @overload
  def HasPlayerInRange(self) -> bool: ...

  @overload
  def HasPlayerInRange(self) -> bool: ...

  @overload
  def IsSpeaking(self) -> bool: ...

  @overload
  def IsSpeaking(self) -> bool: ...

  def ReadFromWorldSprite(self, sprite: str) -> bool: ...

  @overload
  def Say(self, line: str) -> None: ...

  @overload
  def Say(self, line: str) -> None: ...

  def doReceiveSignal(self, distance: int) -> None: ...

  @overload
  def getDelta(self) -> float: ...

  @overload
  def getDelta(self) -> float: ...

  @overload
  def getDeviceData(self) -> DeviceData: ...

  @overload
  def getDeviceData(self) -> DeviceData: ...

  def getPlayer(self) -> IsoPlayer: ...

  def getSaveType(self) -> int: ...

  @overload
  def getSayLine(self) -> str: ...

  @overload
  def getSayLine(self) -> str: ...

  @overload
  def getSquare(self) -> IsoGridSquare: ...

  @overload
  def getSquare(self) -> IsoGridSquare: ...

  @overload
  def getTalkerType(self) -> str: ...

  @overload
  def getTalkerType(self) -> str: ...

  @overload
  def getX(self) -> float: ...

  @overload
  def getX(self) -> float: ...

  @overload
  def getY(self) -> float: ...

  @overload
  def getY(self) -> float: ...

  @overload
  def getZ(self) -> float: ...

  @overload
  def getZ(self) -> float: ...

  def load(self, input: ByteBuffer, WorldVersion: int) -> None: ...

  @overload
  def render(self) -> None: ...

  @overload
  def render(self) -> None: ...

  @overload
  def renderlast(self) -> None: ...

  @overload
  def renderlast(self) -> None: ...

  def save(self, output: ByteBuffer, net: bool) -> None: ...

  @overload
  def setDelta(self, delta: float) -> None: ...

  @overload
  def setDelta(self, delta: float) -> None: ...

  @overload
  def setDeviceData(self, data: DeviceData) -> None: ...

  @overload
  def setDeviceData(self, data: DeviceData) -> None: ...

  @overload
  def update(self) -> None: ...

  @overload
  def update(self) -> None: ...

  def __init__(self, module: str, name: str, itemType: str, texName: str): ...


class WeaponPart(InventoryItem):

  TYPE_CANON: str

  TYPE_CLIP: str

  TYPE_RECOILPAD: str

  TYPE_SCOPE: str

  TYPE_SLING: str

  TYPE_STOCK: str

  def DoTooltip(self, tooltipUI: ObjectTooltip, layout: ObjectTooltip.Layout) -> None: ...

  def getAimingTime(self) -> int: ...

  def getAngle(self) -> float: ...

  def getCategory(self) -> str: ...

  def getClipSize(self) -> int: ...

  def getDamage(self) -> float: ...

  def getHitChance(self) -> int: ...

  def getMaxRange(self) -> float: ...

  def getMinRangeRanged(self) -> float: ...

  def getMountOn(self) -> ArrayList[str]: ...

  def getPartType(self) -> str: ...

  def getRecoilDelay(self) -> float: ...

  def getReloadTime(self) -> int: ...

  def getSaveType(self) -> int: ...

  def getWeightModifier(self) -> float: ...

  def setAimingTime(self, aimingTime: int) -> None: ...

  def setAngle(self, angle: float) -> None: ...

  def setClipSize(self, clipSize: int) -> None: ...

  def setDamage(self, damage: float) -> None: ...

  def setHitChance(self, hitChance: int) -> None: ...

  def setMaxRange(self, maxRange: float) -> None: ...

  def setMinRangeRanged(self, minRangeRanged: float) -> None: ...

  def setMountOn(self, mountOn: ArrayList[str]) -> None: ...

  def setPartType(self, partType: str) -> None: ...

  def setRecoilDelay(self, recoilDelay: float) -> None: ...

  def setReloadTime(self, reloadTime: int) -> None: ...

  def setWeightModifier(self, weightModifier: float) -> None: ...

  def __init__(self, module: str, name: str, itemType: str, texName: str): ...


class WeaponType(Enum):

  barehand: WeaponType

  chainsaw: WeaponType

  firearm: WeaponType

  handgun: WeaponType

  heavy: WeaponType

  knife: WeaponType

  onehanded: WeaponType

  spear: WeaponType

  throwing: WeaponType

  twohanded: WeaponType

  def getType(self) -> str: ...

  @staticmethod
  @overload
  def getWeaponType(chr: IsoGameCharacter) -> WeaponType: ...

  @staticmethod
  @overload
  def getWeaponType(weapon: HandWeapon) -> WeaponType: ...

  @staticmethod
  def valueOf(arg0: str) -> WeaponType: ...

  @staticmethod
  def values() -> list[WeaponType]: ...

