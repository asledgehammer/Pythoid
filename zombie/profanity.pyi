from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.lang import StringBuffer
from java.util.regex import Matcher
from zombie.profanity.locales import Locale

class Phonizer:

  def execute(self, m: Matcher, s: StringBuffer) -> None: ...

  def getName(self) -> str: ...

  def getRegex(self) -> str: ...

  def __init__(self, name: str, regex: str): ...


class ProfanityFilter:

  DEBUG: bool

  LOCALES_DIR: str

  def addFilterWord(self, word: str) -> None: ...

  @overload
  def addLocale(self, l: Locale) -> None: ...

  @overload
  def addLocale(self, l: Locale, setDefault: bool) -> None: ...

  def addWhiteListWord(self, word: str) -> None: ...

  def enable(self, b: bool) -> None: ...

  def filterString(self, str: str) -> str: ...

  def getFilterWordsCount(self) -> int: ...

  def getLocale(self) -> Locale: ...

  def isEnabled(self) -> bool: ...

  def removeFilterWord(self, word: str) -> None: ...

  def removeWhiteListWord(self, word: str) -> None: ...

  def setLocale(self, locale: str) -> None: ...

  @overload
  def validateString(self, str: str) -> str: ...

  @overload
  def validateString(self, str: str, includePhonetics: bool, includeContains: bool, includeSpacedWords: bool) -> str: ...

  @staticmethod
  def getInstance() -> ProfanityFilter: ...

  @staticmethod
  def printDebug(str: str) -> None: ...


class ProfanityTest:

  @staticmethod
  def loadDictionary() -> None: ...

  @staticmethod
  def runTest() -> None: ...

  @staticmethod
  def testString(times: int, str: str) -> None: ...

  def __init__(self): ...

