from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from gnu.trove.set.hash import TIntHashSet
from java.nio import ByteBuffer
from java.sql import Connection
from java.util import ArrayList
from zombie.characters import IsoPlayer
from zombie.core.raknet import UdpConnection
from zombie.core.textures import TextureDraw

class ClientPlayerDB:

  def clientLoadNetworkCharacter(self, bb: ByteBuffer, connection: UdpConnection) -> None: ...

  def clientLoadNetworkPlayer(self) -> bool: ...

  def clientSendNetworkPlayerInt(self, player: IsoPlayer) -> None: ...

  def close(self) -> None: ...

  def forgetPlayer(self, serverPlayerIndex: int) -> None: ...

  def getAllNetworkPlayers(self) -> ArrayList[IsoPlayer]: ...

  def getClientLoadNetworkPlayerData(self, playerIndex: int) -> list[int]: ...

  def getNextServerPlayerIndex(self) -> int: ...

  def isAliveMainNetworkPlayer(self) -> bool: ...

  def loadNetworkPlayer(self) -> bool: ...

  def loadNetworkPlayerInfo(self, playerIndex: int) -> bool: ...

  def updateMain(self) -> None: ...

  @staticmethod
  def getInstance() -> ClientPlayerDB: ...

  @staticmethod
  def isAllow() -> bool: ...

  @staticmethod
  def isAvailable() -> bool: ...

  @staticmethod
  def setAllow(en: bool) -> None: ...

  def __init__(self):
    self.cansaveplayers: bool

  class NetworkCharacterProfile:

    def __init__(self, arg0: ClientPlayerDB): ...


class PlayerDB:

  INVALID_ID: int

  def close(self) -> None: ...

  def getAllLocalPlayers(self) -> ArrayList[IsoPlayer]: ...

  def importPlayersFromVehiclesDB(self) -> None: ...

  def loadLocalPlayer(self, sqlId: int) -> bool: ...

  def loadLocalPlayerInfo(self, sqlId: int) -> bool: ...

  def saveLocalPlayersForce(self) -> None: ...

  def savePlayers(self) -> None: ...

  def updateMain(self) -> None: ...

  def updateWorldStreamer(self) -> None: ...

  def uploadLocalPlayers2DB(self) -> None: ...

  @staticmethod
  def getInstance() -> PlayerDB: ...

  @staticmethod
  def isAllow() -> bool: ...

  @staticmethod
  def isAvailable() -> bool: ...

  @staticmethod
  def setAllow(en: bool) -> None: ...

  def __init__(self):
    self.m_cansaveplayers: bool

  class SQLPlayerStore:

    @overload
    def Reset(self) -> None: ...

    @overload
    def Reset(self) -> None: ...

    @overload
    def init(self, arg0: TIntHashSet) -> None: ...

    @overload
    def init(self, arg0: TIntHashSet) -> None: ...

    @overload
    def load(self, arg0: PlayerDB.PlayerData) -> bool: ...

    @overload
    def load(self, arg0: PlayerDB.PlayerData) -> bool: ...

    @overload
    def loadEverythingExceptBytes(self, arg0: PlayerDB.PlayerData) -> bool: ...

    @overload
    def loadEverythingExceptBytes(self, arg0: PlayerDB.PlayerData) -> bool: ...

    @overload
    def save(self, arg0: PlayerDB.PlayerData) -> None: ...

    @overload
    def save(self, arg0: PlayerDB.PlayerData) -> None: ...

    def update(self, arg0: PlayerDB.PlayerData) -> None: ...

  class IPlayerStore:

    def Reset(self) -> None: ...

    def init(self, arg0: TIntHashSet) -> None: ...

    def load(self, arg0: PlayerDB.PlayerData) -> bool: ...

    def loadEverythingExceptBytes(self, arg0: PlayerDB.PlayerData) -> bool: ...

    def save(self, arg0: PlayerDB.PlayerData) -> None: ...

  class PlayerData: ...


class PlayerDBHelper:

  @staticmethod
  def create() -> Connection: ...

  @staticmethod
  def getPlayers(saveDir: str) -> ArrayList[object]: ...

  @staticmethod
  def isPlayerAlive(saveDir: str, playerSqlId: int) -> bool: ...

  @staticmethod
  def rollback(conn: Connection) -> None: ...

  @staticmethod
  def setPlayer1(saveDir: str, sqlID: int) -> None: ...

  def __init__(self): ...


class SavefileThumbnail:

  @staticmethod
  @overload
  def create() -> None: ...

  @staticmethod
  @overload
  def create(playerIndex: int) -> None: ...

  def __init__(self): ...

  class TakeScreenShotDrawer(TextureDraw.GenericDrawer):

    def render(self) -> None: ...

  class FixCameraDrawer(TextureDraw.GenericDrawer):

    def render(self) -> None: ...


class ServerPlayerDB:

  def close(self) -> None: ...

  def process(self) -> None: ...

  def serverLoadNetworkCharacter(self, bb: ByteBuffer, connection: UdpConnection) -> None: ...

  def serverUpdateNetworkCharacter(self, bb: ByteBuffer, connection: UdpConnection) -> None: ...

  @staticmethod
  def getInstance() -> ServerPlayerDB: ...

  @staticmethod
  def isAllow() -> bool: ...

  @staticmethod
  def isAvailable() -> bool: ...

  @staticmethod
  def setAllow(en: bool) -> None: ...

  def __init__(self): ...

  class NetworkCharacterData:

    def __init__(self, arg0: ByteBuffer, arg1: UdpConnection): ...

