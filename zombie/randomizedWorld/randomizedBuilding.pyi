from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.lang import Integer
from java.util import ArrayList, HashMap, LinkedHashMap
from zombie.characters import IsoZombie, IsoGameCharacter, SurvivorDesc
from zombie.core.skinnedmodel.visual import HumanVisual, ItemVisuals, BaseVisual
from zombie.inventory import ItemContainer, InventoryItem
from zombie.inventory.types import HandWeapon
from zombie.iso import BuildingDef, IsoGridSquare, IsoObject, RoomDef, IsoCell
from zombie.iso.areas import IsoBuilding
from zombie.iso.objects import IsoDoor, IsoWindow
from zombie.randomizedWorld import RandomizedWorldBase
from zombie.randomizedWorld.randomizedDeadSurvivor import RandomizedDeadSurvivorBase

class RBBar(RandomizedBuildingBase):

  def isValid(self, arg0: BuildingDef, force: bool) -> bool: ...

  def randomizeBuilding(self, arg0: BuildingDef) -> None: ...

  def roomValid(self, sq: IsoGridSquare) -> bool: ...

  def __init__(self): ...


class RBBasic(RandomizedBuildingBase):

  def doProfessionStory(self, arg0: BuildingDef, professionChoosed: str) -> None: ...

  def doRandomDeadSurvivorStory(self, buildingDef: BuildingDef, DSDef: RandomizedDeadSurvivorBase) -> None: ...

  def getSurvivorProfession(self) -> ArrayList[str]: ...

  def getSurvivorStories(self) -> ArrayList[RandomizedDeadSurvivorBase]: ...

  def randomizeBuilding(self, arg0: BuildingDef) -> None: ...

  @staticmethod
  def getUniqueRDSSpawned() -> ArrayList[str]: ...

  def __init__(self): ...


class RBBurnt(RandomizedBuildingBase):

  def isValid(self, arg0: BuildingDef, force: bool) -> bool: ...

  def randomizeBuilding(self, arg0: BuildingDef) -> None: ...

  def __init__(self): ...


class RBBurntCorpse(RandomizedBuildingBase):

  def isValid(self, arg0: BuildingDef, arg1: bool) -> bool: ...

  def randomizeBuilding(self, arg0: BuildingDef) -> None: ...

  def __init__(self): ...


class RBBurntFireman(RandomizedBuildingBase):

  def isValid(self, arg0: BuildingDef, arg1: bool) -> bool: ...

  def randomizeBuilding(self, arg0: BuildingDef) -> None: ...

  def __init__(self): ...


class RBCafe(RandomizedBuildingBase):

  def isValid(self, arg0: BuildingDef, force: bool) -> bool: ...

  def randomizeBuilding(self, arg0: BuildingDef) -> None: ...

  def roomValid(self, sq: IsoGridSquare) -> bool: ...

  def __init__(self): ...


class RBClinic(RandomizedBuildingBase):

  def isValid(self, arg0: BuildingDef, force: bool) -> bool: ...

  def randomizeBuilding(self, arg0: BuildingDef) -> None: ...

  def roomValid(self, sq: IsoGridSquare) -> bool: ...

  def __init__(self): ...


class RBHairSalon(RandomizedBuildingBase):

  def isValid(self, arg0: BuildingDef, force: bool) -> bool: ...

  def randomizeBuilding(self, arg0: BuildingDef) -> None: ...

  def roomValid(self, sq: IsoGridSquare) -> bool: ...

  def __init__(self): ...


class RBKateAndBaldspot(RandomizedBuildingBase):

  def isValid(self, arg0: BuildingDef, force: bool) -> bool: ...

  def randomizeBuilding(self, arg0: BuildingDef) -> None: ...

  def __init__(self): ...


class RBLooted(RandomizedBuildingBase):

  def randomizeBuilding(self, arg0: BuildingDef) -> None: ...

  def __init__(self): ...


class RBOffice(RandomizedBuildingBase):

  def isValid(self, arg0: BuildingDef, force: bool) -> bool: ...

  def randomizeBuilding(self, arg0: BuildingDef) -> None: ...

  def roomValid(self, sq: IsoGridSquare) -> bool: ...

  def __init__(self): ...


class RBOther(RandomizedBuildingBase):

  def isValid(self, arg0: BuildingDef, arg1: bool) -> bool: ...

  def randomizeBuilding(self, arg0: BuildingDef) -> None: ...

  def __init__(self): ...


class RBPileOCrepe(RandomizedBuildingBase):

  def isValid(self, arg0: BuildingDef, force: bool) -> bool: ...

  def randomizeBuilding(self, arg0: BuildingDef) -> None: ...

  def roomValid(self, sq: IsoGridSquare) -> bool: ...

  def __init__(self): ...


class RBPizzaWhirled(RandomizedBuildingBase):

  def isValid(self, arg0: BuildingDef, force: bool) -> bool: ...

  def randomizeBuilding(self, arg0: BuildingDef) -> None: ...

  def roomValid(self, sq: IsoGridSquare) -> bool: ...

  def __init__(self): ...


class RBSafehouse(RandomizedBuildingBase):

  def isValid(self, arg0: BuildingDef, arg1: bool) -> bool: ...

  def randomizeBuilding(self, arg0: BuildingDef) -> None: ...

  def __init__(self): ...


class RBSchool(RandomizedBuildingBase):

  def isValid(self, arg0: BuildingDef, force: bool) -> bool: ...

  def randomizeBuilding(self, arg0: BuildingDef) -> None: ...

  def roomValid(self, sq: IsoGridSquare) -> bool: ...

  def __init__(self): ...


class RBShopLooted(RandomizedBuildingBase):

  def isValid(self, arg0: BuildingDef, force: bool) -> bool: ...

  def randomizeBuilding(self, arg0: BuildingDef) -> None: ...

  def __init__(self): ...


class RBSpiffo(RandomizedBuildingBase):

  def isValid(self, arg0: BuildingDef, force: bool) -> bool: ...

  def randomizeBuilding(self, arg0: BuildingDef) -> None: ...

  def roomValid(self, sq: IsoGridSquare) -> bool: ...

  def __init__(self): ...


class RBStripclub(RandomizedBuildingBase):

  def isValid(self, arg0: BuildingDef, force: bool) -> bool: ...

  def randomizeBuilding(self, arg0: BuildingDef) -> None: ...

  def __init__(self): ...


class RBTableStory(RandomizedBuildingBase):

  allStories: ArrayList[RBTableStory.StoryDef]

  def initStories(self) -> None: ...

  def isValid(self, arg0: BuildingDef, force: bool) -> bool: ...

  def randomizeBuilding(self, arg0: BuildingDef) -> None: ...

  def __init__(self):
    self.fulltablemap: ArrayList[HashMap[str, Integer]]
    self.table1: IsoObject
    self.table2: IsoObject

  class StorySpawnItem:

    @overload
    def __init__(self, arg0: RBTableStory, arg1: LinkedHashMap, arg2: str, arg3: Integer): ...
    @overload
    def __init__(self, arg0: RBTableStory, arg1: LinkedHashMap, arg2: str, arg3: Integer, arg4: float): ...

  class StoryDef:

    @overload
    def __init__(self, arg0: RBTableStory, arg1: ArrayList):
      self.addblood: bool

      self.items: ArrayList[RBTableStory.StorySpawnItem]

      self.rooms: ArrayList[str]

    @overload
    def __init__(self, arg0: RBTableStory, arg1: ArrayList, arg2: ArrayList): ...


class RandomizedBuildingBase(RandomizedWorldBase):

  def addBarricade(self, sq: IsoGridSquare, numPlanks: int) -> None: ...

  def addRandomRangedWeapon(self, container: ItemContainer, addBulletsInGun: bool, addBoxInContainer: bool, attachPart: bool) -> HandWeapon: ...

  @overload
  def addWorldItem(self, item: str, sq: IsoGridSquare, obj: IsoObject) -> InventoryItem: ...

  @overload
  def addWorldItem(self, item: str, sq: IsoGridSquare, xoffset: float, yoffset: float, zoffset: float) -> InventoryItem: ...

  @overload
  def addWorldItem(self, item: str, sq: IsoGridSquare, xoffset: float, yoffset: float, zoffset: float, worldZ: int) -> InventoryItem: ...

  def addZombies(self, arg0: BuildingDef, totalZombies: int, outfit: str, femaleChance: Integer, room: RoomDef) -> ArrayList[IsoZombie]: ...

  def addZombiesOnSquare(self, totalZombies: int, outfit: str, femaleChance: Integer, square: IsoGridSquare) -> ArrayList[IsoZombie]: ...

  def getChance(self) -> int: ...

  def getDoor(self, sq: IsoGridSquare) -> IsoDoor: ...

  def getMinimumDays(self) -> int: ...

  def getMinimumRooms(self) -> int: ...

  def getWindow(self, sq: IsoGridSquare) -> IsoWindow: ...

  def init(self) -> None: ...

  def isAlwaysDo(self) -> bool: ...

  def isTableFor3DItems(self, obj: IsoObject, sq: IsoGridSquare) -> bool: ...

  def isValid(self, arg0: BuildingDef, force: bool) -> bool: ...

  def randomizeBuilding(self, arg0: BuildingDef) -> None: ...

  def setAlwaysDo(self, alwaysDo: bool) -> None: ...

  def setChance(self, chance: int) -> None: ...

  def setMinimumDays(self, minimumDays: int) -> None: ...

  def setMinimumRooms(self, minimumRooms: int) -> None: ...

  def spawnItemsInContainers(self, arg0: BuildingDef, distribName: str, chance: int) -> None: ...

  @staticmethod
  def ChunkLoaded(building: IsoBuilding) -> None: ...

  @staticmethod
  def initAllRBMapChance() -> None: ...

  def __init__(self): ...

  class HumanCorpse(IsoGameCharacter):

    def Dressup(self, desc: SurvivorDesc) -> None: ...

    def dressInNamedOutfit(self, outfitName: str) -> None: ...

    @overload
    def getHumanVisual(self) -> HumanVisual: ...

    @overload
    def getHumanVisual(self) -> HumanVisual: ...

    def getItemVisuals(self, arg0: ItemVisuals) -> None: ...

    @overload
    def getVisual(self) -> BaseVisual: ...

    @overload
    def getVisual(self) -> HumanVisual: ...

    def isFemale(self) -> bool: ...

    @overload
    def isSkeleton(self) -> bool: ...

    @overload
    def isSkeleton(self) -> bool: ...

    def isZombie(self) -> bool: ...

    def __init__(self, cell: IsoCell, x: float, y: float, z: float):
      self.isskeleton: bool

