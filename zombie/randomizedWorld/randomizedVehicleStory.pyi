from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.lang import Integer, Class
from java.util import ArrayList, HashMap
from zombie.iso import IsoMetaGrid, IsoChunk, IsoGridSquare, Vector2
from zombie.randomizedWorld import RandomizedWorldBase
from zombie.vehicles import BaseVehicle

E = TypeVar('E', default=Any)

class RVSAmbulanceCrash(RandomizedVehicleStoryBase):

  def initVehicleStorySpawner(self, zone: IsoMetaGrid.Zone, chunk: IsoChunk, debug: bool) -> bool: ...

  def randomizeVehicleStory(self, zone: IsoMetaGrid.Zone, chunk: IsoChunk) -> None: ...

  def spawnElement(self, spawner: VehicleStorySpawner, element: VehicleStorySpawner.Element) -> None: ...

  def __init__(self): ...


class RVSBanditRoad(RandomizedVehicleStoryBase):

  def initVehicleStorySpawner(self, zone: IsoMetaGrid.Zone, chunk: IsoChunk, debug: bool) -> bool: ...

  def randomizeVehicleStory(self, zone: IsoMetaGrid.Zone, chunk: IsoChunk) -> None: ...

  def spawnElement(self, spawner: VehicleStorySpawner, element: VehicleStorySpawner.Element) -> None: ...

  def __init__(self): ...


class RVSBurntCar(RandomizedVehicleStoryBase):

  def initVehicleStorySpawner(self, zone: IsoMetaGrid.Zone, chunk: IsoChunk, debug: bool) -> bool: ...

  def randomizeVehicleStory(self, zone: IsoMetaGrid.Zone, chunk: IsoChunk) -> None: ...

  def spawnElement(self, spawner: VehicleStorySpawner, element: VehicleStorySpawner.Element) -> None: ...

  def __init__(self): ...


class RVSCarCrash(RandomizedVehicleStoryBase):

  def initVehicleStorySpawner(self, zone: IsoMetaGrid.Zone, chunk: IsoChunk, debug: bool) -> bool: ...

  def randomizeVehicleStory(self, zone: IsoMetaGrid.Zone, chunk: IsoChunk) -> None: ...

  def spawnElement(self, spawner: VehicleStorySpawner, element: VehicleStorySpawner.Element) -> None: ...

  def __init__(self): ...


class RVSCarCrashCorpse(RandomizedVehicleStoryBase):

  def initVehicleStorySpawner(self, zone: IsoMetaGrid.Zone, chunk: IsoChunk, debug: bool) -> bool: ...

  def randomizeVehicleStory(self, zone: IsoMetaGrid.Zone, chunk: IsoChunk) -> None: ...

  def spawnElement(self, spawner: VehicleStorySpawner, element: VehicleStorySpawner.Element) -> None: ...

  def __init__(self): ...


class RVSChangingTire(RandomizedVehicleStoryBase):

  def initVehicleStorySpawner(self, zone: IsoMetaGrid.Zone, chunk: IsoChunk, debug: bool) -> bool: ...

  def randomizeVehicleStory(self, zone: IsoMetaGrid.Zone, chunk: IsoChunk) -> None: ...

  def spawnElement(self, spawner: VehicleStorySpawner, element: VehicleStorySpawner.Element) -> None: ...

  def __init__(self): ...


class RVSConstructionSite(RandomizedVehicleStoryBase):

  def initVehicleStorySpawner(self, zone: IsoMetaGrid.Zone, chunk: IsoChunk, debug: bool) -> bool: ...

  def randomizeVehicleStory(self, zone: IsoMetaGrid.Zone, chunk: IsoChunk) -> None: ...

  def spawnElement(self, spawner: VehicleStorySpawner, element: VehicleStorySpawner.Element) -> None: ...

  def __init__(self): ...


class RVSCrashHorde(RandomizedVehicleStoryBase):

  def initVehicleStorySpawner(self, zone: IsoMetaGrid.Zone, chunk: IsoChunk, debug: bool) -> bool: ...

  def randomizeVehicleStory(self, zone: IsoMetaGrid.Zone, chunk: IsoChunk) -> None: ...

  def spawnElement(self, spawner: VehicleStorySpawner, element: VehicleStorySpawner.Element) -> None: ...

  def __init__(self): ...


class RVSFlippedCrash(RandomizedVehicleStoryBase):

  def initVehicleStorySpawner(self, zone: IsoMetaGrid.Zone, chunk: IsoChunk, debug: bool) -> bool: ...

  def randomizeVehicleStory(self, zone: IsoMetaGrid.Zone, chunk: IsoChunk) -> None: ...

  def spawnElement(self, spawner: VehicleStorySpawner, element: VehicleStorySpawner.Element) -> None: ...

  def __init__(self): ...


class RVSPoliceBlockade(RandomizedVehicleStoryBase):

  def initVehicleStorySpawner(self, zone: IsoMetaGrid.Zone, chunk: IsoChunk, debug: bool) -> bool: ...

  def randomizeVehicleStory(self, zone: IsoMetaGrid.Zone, chunk: IsoChunk) -> None: ...

  def spawnElement(self, spawner: VehicleStorySpawner, element: VehicleStorySpawner.Element) -> None: ...

  def __init__(self): ...


class RVSPoliceBlockadeShooting(RandomizedVehicleStoryBase):

  def initVehicleStorySpawner(self, zone: IsoMetaGrid.Zone, chunk: IsoChunk, debug: bool) -> bool: ...

  def isValid(self, zone: IsoMetaGrid.Zone, chunk: IsoChunk, force: bool) -> bool: ...

  def randomizeVehicleStory(self, zone: IsoMetaGrid.Zone, chunk: IsoChunk) -> None: ...

  def spawnElement(self, spawner: VehicleStorySpawner, element: VehicleStorySpawner.Element) -> None: ...

  def __init__(self): ...


class RVSTrailerCrash(RandomizedVehicleStoryBase):

  def initVehicleStorySpawner(self, zone: IsoMetaGrid.Zone, chunk: IsoChunk, debug: bool) -> bool: ...

  def randomizeVehicleStory(self, zone: IsoMetaGrid.Zone, chunk: IsoChunk) -> None: ...

  def spawnElement(self, spawner: VehicleStorySpawner, element: VehicleStorySpawner.Element) -> None: ...

  def __init__(self): ...


class RVSUtilityVehicle(RandomizedVehicleStoryBase):

  def doUtilityVehicle(self, zone: IsoMetaGrid.Zone, chunk: IsoChunk, zoneName: str, scriptName: str, outfits: str, femaleChance: Integer, vehicleDistrib: str, items: ArrayList[str], nbrOfItem: int, addTrailer: bool) -> None: ...

  def initVehicleStorySpawner(self, zone: IsoMetaGrid.Zone, chunk: IsoChunk, debug: bool) -> bool: ...

  def randomizeVehicleStory(self, zone: IsoMetaGrid.Zone, chunk: IsoChunk) -> None: ...

  def spawnElement(self, spawner: VehicleStorySpawner, element: VehicleStorySpawner.Element) -> None: ...

  def __init__(self): ...

  class Params: ...


class RandomizedVehicleStoryBase(RandomizedWorldBase):

  baseChance: float

  def addSmashedOverlay(self, v1: BaseVehicle, v2: BaseVehicle, xOffset: int, yOffset: int, horizontalZone: bool, addBlood: bool) -> list[BaseVehicle]: ...

  def callVehicleStorySpawner(self, zone: IsoMetaGrid.Zone, chunk: IsoChunk, additionalRotationRadians: float) -> bool: ...

  def getCenterOfChunk(self, zone: IsoMetaGrid.Zone, chunk: IsoChunk) -> IsoGridSquare: ...

  def getChance(self) -> int: ...

  def getDebugLine(self) -> str: ...

  def getMaximumDays(self) -> int: ...

  def getMinZoneHeight(self) -> int: ...

  def getMinZoneWidth(self) -> int: ...

  def getMinimumDays(self) -> int: ...

  def getName(self) -> str: ...

  def getPolylineSpawnPoint(self, zone: IsoMetaGrid.Zone, chunk: IsoChunk, result: list[float]) -> bool: ...

  def getRectangleSpawnPoint(self, zone: IsoMetaGrid.Zone, chunk: IsoChunk, result: list[float]) -> bool: ...

  def getSpawnPoint(self, zone: IsoMetaGrid.Zone, chunk: IsoChunk, result: list[float]) -> bool: ...

  def initSpawnDataForChunk(self, zone: IsoMetaGrid.Zone, chunk: IsoChunk) -> VehicleStorySpawnData: ...

  def initVehicleStorySpawner(self, zone: IsoMetaGrid.Zone, chunk: IsoChunk, debug: bool) -> bool: ...

  def isChunkLoaded(self, wx: int, wy: int) -> bool: ...

  def isFullyStreamedIn(self, x1: int, y1: int, x2: int, y2: int) -> bool: ...

  def isValid(self, zone: IsoMetaGrid.Zone, chunk: IsoChunk, force: bool) -> bool: ...

  def randomizeVehicleStory(self, zone: IsoMetaGrid.Zone, chunk: IsoChunk) -> None: ...

  def registerCustomOutfits(self) -> None: ...

  def setChance(self, chance: int) -> None: ...

  def setMaximumDays(self, maximumDays: int) -> None: ...

  def setMinimumDays(self, minimumDays: int) -> None: ...

  def spawnElement(self, spawner: VehicleStorySpawner, element: VehicleStorySpawner.Element) -> None: ...

  @staticmethod
  def doRandomStory(zone: IsoMetaGrid.Zone, chunk: IsoChunk, force: bool) -> bool: ...

  @staticmethod
  def initAllRVSMapChance(zone: IsoMetaGrid.Zone, chunk: IsoChunk) -> None: ...

  def __init__(self): ...


class VehicleStorySpawnData:

  def isValid(self, zone: IsoMetaGrid.Zone, chunk: IsoChunk) -> bool: ...

  def __init__(self, story: RandomizedVehicleStoryBase, zone: IsoMetaGrid.Zone, spawnX: float, spawnY: float, direction: float, x1: int, y1: int, x2: int, y2: int):
    self.m_direction: float
    self.m_spawnx: float
    self.m_spawny: float
    self.m_story: RandomizedVehicleStoryBase
    self.m_x1: int
    self.m_x2: int
    self.m_y1: int
    self.m_y2: int
    self.m_zone: IsoMetaGrid.Zone


class VehicleStorySpawner:

  def addElement(self, id: str, x: float, y: float, direction: float, width: float, height: float) -> VehicleStorySpawner.Element: ...

  def clear(self) -> None: ...

  def getAABB(self, centerX: float, centerY: float, width: float, height: float, angleRadians: float, aabb: list[int]) -> None: ...

  def getParameter(self, key: str, clazz: Class[E]) -> object: ...

  def getParameterBoolean(self, key: str) -> bool: ...

  def getParameterFloat(self, key: str) -> float: ...

  def getParameterInteger(self, key: str) -> int: ...

  def getParameterString(self, key: str) -> str: ...

  def render(self, centerX: float, centerY: float, z: float, width: float, height: float, angleRadians: float) -> None: ...

  def rotate(self, centerX: float, centerY: float, v: Vector2, angleRadians: float) -> Vector2: ...

  @overload
  def setParameter(self, key: str, value: bool) -> None: ...

  @overload
  def setParameter(self, key: str, value: float) -> None: ...

  @overload
  def setParameter(self, key: str, value: int) -> None: ...

  @overload
  def setParameter(self, key: str, value: object) -> None: ...

  def spawn(self, worldX: float, worldY: float, worldZ: float, angleRadians: float, spawner: VehicleStorySpawner.IElementSpawner) -> None: ...

  @staticmethod
  def getInstance() -> VehicleStorySpawner: ...

  def __init__(self):
    self.m_elements: ArrayList[VehicleStorySpawner.Element]
    self.m_storyparams: HashMap[str, object]

  class Element:

    def __init__(self): ...

  class IElementSpawner:

    def spawn(self, spawner: VehicleStorySpawner, element: VehicleStorySpawner.Element) -> None: ...

