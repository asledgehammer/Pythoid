from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.io import InputStreamReader, PrintStream, InputStream
from java.lang import Double, Integer, Float, Enum, ThreadGroup, Thread
from java.util import ArrayList, Map, HashMap
from java.util.function import BooleanSupplier, Consumer
from org.uncommons.maths.random import CellularAutomatonRNG
from se.krka.kahlua.vm import KahluaTable
from zombie.core.Styles import AbstractStyle
from zombie.core.opengl import Shader
from zombie.core.skinnedmodel import ModelManager
from zombie.core.sprite import SpriteRenderState, SpriteRendererStates
from zombie.core.textures import ColorInfo, TextureFBO, MultiTextureFBO2, TextureDraw, Texture
from zombie.iso import PlayerCamera
from zombie.ui import UITextBox2

class BoxedStaticValues:

  @staticmethod
  def toDouble(d: float) -> Double: ...

  def __init__(self): ...


class Clipboard:

  @staticmethod
  def getClipboard() -> str: ...

  @staticmethod
  def initMainThread() -> None: ...

  @staticmethod
  def rememberCurrentValue() -> None: ...

  @staticmethod
  def setClipboard(str: str) -> None: ...

  @staticmethod
  def updateMainThread() -> None: ...

  def __init__(self): ...


class Color:

  black: Color

  blue: Color

  cyan: Color

  darkGray: Color

  darkGreen: Color

  gray: Color

  green: Color

  lightGray: Color

  lightGreen: Color

  magenta: Color

  orange: Color

  pink: Color

  purple: Color

  red: Color

  transparent: Color

  white: Color

  yellow: Color

  def add(self, c: Color) -> None: ...

  def addToCopy(self, c: Color) -> Color: ...

  @overload
  def brighter(self) -> Color: ...

  @overload
  def brighter(self, scale: float) -> Color: ...

  def changeHSBValue(self, hFactor: float, sFactor: float, bFactor: float) -> None: ...

  @overload
  def darker(self) -> Color: ...

  @overload
  def darker(self, scale: float) -> Color: ...

  def equals(self, other: object) -> bool: ...

  def fromColor(self, valueABGR: int) -> None: ...

  def getAlpha(self) -> int: ...

  def getAlphaByte(self) -> int: ...

  def getAlphaFloat(self) -> float: ...

  def getB(self) -> float: ...

  def getBlue(self) -> int: ...

  def getBlueByte(self) -> int: ...

  def getBlueFloat(self) -> float: ...

  def getG(self) -> float: ...

  def getGreen(self) -> int: ...

  def getGreenByte(self) -> int: ...

  def getGreenFloat(self) -> float: ...

  def getR(self) -> float: ...

  def getRed(self) -> int: ...

  def getRedByte(self) -> int: ...

  def getRedFloat(self) -> float: ...

  def hashCode(self) -> int: ...

  def interp(self, to: Color, delta: float, dest: Color) -> None: ...

  def multiply(self, c: Color) -> Color: ...

  def scale(self, value: float) -> Color: ...

  def scaleCopy(self, value: float) -> Color: ...

  @overload
  def set(self, other: Color) -> Color: ...

  @overload
  def set(self, r: float, g: float, b: float) -> Color: ...

  @overload
  def set(self, r: float, g: float, b: float, a: float) -> Color: ...

  def setABGR(self, valueABGR: int) -> None: ...

  def setColor(self, A: Color, B: Color, delta: float) -> None: ...

  def toString(self) -> str: ...

  @staticmethod
  @overload
  def HSBtoRGB(hue: float, saturation: float, brightness: float) -> Color: ...

  @staticmethod
  @overload
  def HSBtoRGB(hue: float, saturation: float, brightness: float, result: Color) -> Color: ...

  @staticmethod
  def abgrToColor(valueABGR: int, out_result: Color) -> Color: ...

  @staticmethod
  def blendABGR(valueABGR: int, targetABGR: int) -> int: ...

  @staticmethod
  def blendBGR(valueABGR: int, targetABGR: int) -> int: ...

  @staticmethod
  @overload
  def colorToABGR(val: Color) -> int: ...

  @staticmethod
  @overload
  def colorToABGR(r: float, g: float, b: float, a: float) -> int: ...

  @staticmethod
  def decode(nm: str) -> Color: ...

  @staticmethod
  def getAlphaChannelFromABGR(valueABGR: int) -> float: ...

  @staticmethod
  def getBlueChannelFromABGR(valueABGR: int) -> float: ...

  @staticmethod
  def getGreenChannelFromABGR(valueABGR: int) -> float: ...

  @staticmethod
  def getRedChannelFromABGR(valueABGR: int) -> float: ...

  @staticmethod
  def lerpABGR(colA: int, colB: int, alpha: float) -> int: ...

  @staticmethod
  def multiplyABGR(valueABGR: int, multiplierABGR: int) -> int: ...

  @staticmethod
  def multiplyBGR(valueABGR: int, multiplierABGR: int) -> int: ...

  @staticmethod
  def random() -> Color: ...

  @staticmethod
  def setAlphaChannelToABGR(valueABGR: int, a: float) -> int: ...

  @staticmethod
  def setBlueChannelToABGR(valueABGR: int, b: float) -> int: ...

  @staticmethod
  def setGreenChannelToABGR(valueABGR: int, g: float) -> int: ...

  @staticmethod
  def setRedChannelToABGR(valueABGR: int, r: float) -> int: ...

  @staticmethod
  def tintABGR(targetABGR: int, tintABGR: int) -> int: ...

  @overload
  def __init__(self):
    self.a: float

    self.b: float

    self.g: float

    self.r: float

  @overload
  def __init__(self, value: int): ...
  @overload
  def __init__(self, color: Color): ...
  @overload
  def __init__(self, r: float, g: float, b: float): ...
  @overload
  def __init__(self, r: int, g: int, b: int): ...
  @overload
  def __init__(self, A: Color, B: Color, delta: float): ...
  @overload
  def __init__(self, r: float, g: float, b: float, a: float): ...
  @overload
  def __init__(self, r: int, g: int, b: int, a: int): ...


class Colors:

  Aqua: Color

  Aquamarine: Color

  Bisque: Color

  BlanchedAlmond: Color

  Blue: Color

  BlueViolet: Color

  Brown: Color

  BurlyWood: Color

  CadetBlue: Color

  Chartreuse: Color

  Chocolate: Color

  Coral: Color

  CornFlowerBlue: Color

  CornSilk: Color

  Crimson: Color

  Cyan: Color

  DarkBlue: Color

  DarkCyan: Color

  DarkGoldenrod: Color

  DarkGreen: Color

  DarkKhaki: Color

  DarkMagenta: Color

  DarkOliveGreen: Color

  DarkOrange: Color

  DarkOrchid: Color

  DarkRed: Color

  DarkSalmon: Color

  DarkSeaGreen: Color

  DarkSlateBlue: Color

  DarkTurquoise: Color

  DarkViolet: Color

  DeepPink: Color

  DeepSkyBlue: Color

  DodgerBlue: Color

  FireBrick: Color

  ForestGreen: Color

  Fuchsia: Color

  Gold: Color

  Goldenrod: Color

  Green: Color

  GreenYellow: Color

  HotPink: Color

  IndianRed: Color

  Indigo: Color

  Khaki: Color

  Lavender: Color

  LawnGreen: Color

  LemonChiffon: Color

  LightBlue: Color

  LightCoral: Color

  LightCyan: Color

  LightGoldenrodYellow: Color

  LightGreen: Color

  LightPink: Color

  LightSalmon: Color

  LightSeaGreen: Color

  LightSkyBlue: Color

  LightSteelBlue: Color

  LightYellow: Color

  Lime: Color

  LimeGreen: Color

  Magenta: Color

  Maroon: Color

  MediumAquamarine: Color

  MediumBlue: Color

  MediumOrchid: Color

  MediumPurple: Color

  MediumSeaGreen: Color

  MediumSlateBlue: Color

  MediumSpringGreen: Color

  MediumTurquoise: Color

  MediumVioletRed: Color

  MidnightBlue: Color

  Moccasin: Color

  NavajoWhite: Color

  Navy: Color

  Olive: Color

  OliveDrab: Color

  Orange: Color

  OrangeRed: Color

  Orchid: Color

  PaleGoldenrod: Color

  PaleGreen: Color

  PaleTurquoise: Color

  PaleVioletRed: Color

  PapayaWhip: Color

  PeachPu: Color

  Peru: Color

  Pink: Color

  Plum: Color

  PowderBlue: Color

  Purple: Color

  Red: Color

  RosyBrown: Color

  RoyalBlue: Color

  SaddleBrown: Color

  Salmon: Color

  SandyBrown: Color

  SeaGreen: Color

  Sienna: Color

  SkyBlue: Color

  SlateBlue: Color

  SpringGreen: Color

  SteelBlue: Color

  Tan: Color

  Teal: Color

  Thistle: Color

  Tomato: Color

  Turquoise: Color

  Violet: Color

  Wheat: Color

  Yellow: Color

  YellowGreen: Color

  @staticmethod
  def ColorExists(name: str) -> bool: ...

  @staticmethod
  def GetColorByName(name: str) -> Color: ...

  @staticmethod
  def GetColorFromIndex(index: int) -> Color: ...

  @staticmethod
  def GetColorNames() -> ArrayList[str]: ...

  @staticmethod
  def GetColorsCount() -> int: ...

  @staticmethod
  def GetRandomColor() -> Color: ...

  def __init__(self): ...


class Core:

  bAltMoveMethod: bool

  bDebug: bool

  bDemo: bool

  bExiting: bool

  bLastStand: bool

  blinkAlpha: float

  blinkAlphaIncrease: bool

  bTutorial: bool

  ChallengeID: str

  CurrentTextEntryBox: UITextBox2

  GameMap: str

  GameMode: str

  GameSaveWorld: str

  height: int

  iPerfPuddles_All: int

  iPerfPuddles_GroundOnly: int

  iPerfPuddles_GroundWithRuts: int

  iPerfPuddles_None: int

  iPerfSkybox_High: int

  iPerfSkybox_Medium: int

  iPerfSkybox_Static: int

  MaxJukeBoxesActive: int

  NumJukeBoxesActive: int

  Option3DGroundItem: bool

  OptionAmbientVolume: int

  OptionAutoProneAtk: bool

  OptionBloodDecals: int

  OptionBorderlessWindow: bool

  OptionChatFadeTime: float

  OptionChatFontSize: str

  OptionChatOpaqueOnFocus: bool

  OptionClock24Hour: bool

  OptionClockFormat: int

  OptionClockSize: int

  OptionContextMenuFont: str

  OptiondblTapJogToSprint: bool

  OptionDoContainerOutline: bool

  OptionDoDoorSpriteEffects: bool

  OptionDoWindSpriteEffects: bool

  OptionEnableContentTranslations: bool

  OptionFontSize: int

  OptionInventoryFont: str

  OptionJumpScareVolume: int

  OptionLockCursorToWindow: bool

  OptionMaxChatOpaque: float

  OptionMeasurementFormat: str

  OptionMinChatOpaque: float

  OptionModelTextureMipmaps: bool

  OptionModsEnabled: bool

  OptionMusicActionStyle: int

  OptionMusicLibrary: int

  OptionMusicVolume: int

  OptionPanCameraWhileAiming: bool

  OptionPanCameraWhileDriving: bool

  OptionRackProgress: bool

  OptionRadialMenuKeyToggle: bool

  OptionReloadDifficulty: int

  OptionReloadRadialInstant: bool

  OptionRenderPrecipIndoors: bool

  OptionRenderPrecipitation: int

  OptionShowChatTimestamp: bool

  OptionShowChatTitle: bool

  OptionShowCursorWhileAiming: bool

  OptionSoundVolume: int

  OptionTemperatureDisplayCelsius: bool

  OptionTexture2x: bool

  OptionTextureCompression: bool

  OptionTooltipFont: str

  OptionUIFBO: bool

  OptionUIRenderFPS: int

  OptionUpdateSneakButton: bool

  OptionVehicleEngineVolume: int

  OptionVoiceAGCMode: int

  OptionVoiceEnable: bool

  OptionVoiceMode: int

  OptionVoiceRecordDeviceName: str

  OptionVoiceVADMode: int

  OptionVoiceVolumeMic: int

  OptionVoiceVolumePlayers: int

  OptionVSync: bool

  OptionZoom: bool

  SafeMode: bool

  SafeModeForced: bool

  SoundDisabled: bool

  TileScale: int

  width: int

  xx: int

  yy: int

  zz: int

  def CheckDelayResetLua(self) -> None: ...

  def DelayResetLua(self, activeMods: str, reason: str) -> None: ...

  def DoEndFrameStuff(self, w: int, h: int) -> None: ...

  def DoEndFrameStuffFx(self, w: int, h: int, player: int) -> None: ...

  def DoFrameReady(self) -> None: ...

  def DoPopIsoStuff(self) -> None: ...

  def DoPushIsoParticleStuff(self, ox: float, oy: float, oz: float) -> None: ...

  def DoPushIsoStuff(self, ox: float, oy: float, oz: float, useangle: float, vehicle: bool) -> None: ...

  @overload
  def DoStartFrameStuff(self, w: int, h: int, zoom: float, player: int) -> None: ...

  @overload
  def DoStartFrameStuff(self, w: int, h: int, zoom: float, player: int, isTextFrame: bool) -> None: ...

  def DoStartFrameStuffSmartTextureFx(self, w: int, h: int, player: int) -> None: ...

  @overload
  def EndFrame(self) -> None: ...

  @overload
  def EndFrame(self, nPlayer: int) -> None: ...

  def EndFrameText(self, nPlayer: int) -> None: ...

  def EndFrameUI(self) -> None: ...

  def MoveMethodToggle(self) -> None: ...

  def RenderOffScreenBuffer(self) -> None: ...

  @overload
  def ResetLua(self, sp: bool, reason: str) -> None: ...

  @overload
  def ResetLua(self, activeMods: str, reason: str) -> None: ...

  @overload
  def StartFrame(self) -> None: ...

  @overload
  def StartFrame(self, nPlayer: int, clear: bool) -> None: ...

  def StartFrameText(self, nPlayer: int) -> None: ...

  def StartFrameUI(self) -> bool: ...

  def TakeFullScreenshot(self, filename: str) -> None: ...

  @overload
  def TakeScreenshot(self) -> None: ...

  @overload
  def TakeScreenshot(self, width: int, height: int, readBuffer: int) -> None: ...

  @overload
  def TakeScreenshot(self, x: int, y: int, width: int, height: int, readBuffer: int) -> None: ...

  def addKeyBinding(self, keyName: str, key: Integer) -> None: ...

  def countMissing3DItems(self) -> None: ...

  def doZoomScroll(self, playerIndex: int, arg1: int) -> None: ...

  def exitToMenu(self) -> None: ...

  def getAutoZoom(self, playerIndex: int) -> bool: ...

  def getBadHighlitedColor(self) -> ColorInfo: ...

  def getBlinkingMoodle(self) -> str: ...

  def getChallengeID(self) -> str: ...

  def getContentTranslationsEnabled(self) -> bool: ...

  def getCurrentPlayerZoom(self) -> float: ...

  def getDebug(self) -> bool: ...

  def getDefaultZoomLevels(self) -> ArrayList[Integer]: ...

  def getGameMode(self) -> str: ...

  def getGameVersion(self) -> GameVersion: ...

  def getGoodHighlitedColor(self) -> ColorInfo: ...

  def getIgnoreProneZombieRange(self) -> float: ...

  def getIsoCursorVisibility(self) -> int: ...

  def getKey(self, keyName: str) -> int: ...

  def getKeyMaps(self) -> Map[str, Integer]: ...

  def getMaxTextureSize(self) -> int: ...

  def getMaxTextureSizeFromFlags(self, arg0: int) -> int: ...

  def getMaxTextureSizeFromOption(self, arg0: int) -> int: ...

  def getMaxVehicleTextureSize(self) -> int: ...

  def getMaxZoom(self) -> float: ...

  def getMicVolumeError(self) -> bool: ...

  def getMicVolumeIndicator(self) -> int: ...

  def getMinZoom(self) -> float: ...

  def getMpTextColor(self) -> ColorInfo: ...

  def getNextZoom(self, playerIndex: int, arg1: int) -> float: ...

  def getObjectHighlitedColor(self) -> ColorInfo: ...

  @overload
  def getOffscreenBuffer(self) -> TextureFBO: ...

  @overload
  def getOffscreenBuffer(self, nPlayer: int) -> TextureFBO: ...

  def getOffscreenHeight(self, playerIndex: int) -> int: ...

  def getOffscreenTrueHeight(self) -> int: ...

  def getOffscreenTrueWidth(self) -> int: ...

  def getOffscreenWidth(self, playerIndex: int) -> int: ...

  def getOptionActiveController(self, guid: str) -> bool: ...

  def getOptionAimOutline(self) -> int: ...

  def getOptionAmbientVolume(self) -> int: ...

  def getOptionAutoDrink(self) -> bool: ...

  def getOptionAutoWalkContainer(self) -> bool: ...

  def getOptionBloodDecals(self) -> int: ...

  def getOptionBorderlessWindow(self) -> bool: ...

  def getOptionChatFadeTime(self) -> float: ...

  def getOptionChatFontSize(self) -> str: ...

  def getOptionChatOpaqueOnFocus(self) -> bool: ...

  def getOptionClock24Hour(self) -> bool: ...

  def getOptionClockFormat(self) -> int: ...

  def getOptionClockSize(self) -> int: ...

  def getOptionContextMenuFont(self) -> str: ...

  def getOptionCorpseShadows(self) -> bool: ...

  def getOptionCycleContainerKey(self) -> str: ...

  def getOptionDisplayAsCelsius(self) -> bool: ...

  def getOptionDoContainerOutline(self) -> bool: ...

  def getOptionDoDoorSpriteEffects(self) -> bool: ...

  def getOptionDoWindSpriteEffects(self) -> bool: ...

  def getOptionDropItemsOnSquareCenter(self) -> bool: ...

  def getOptionEnableLeftJoystickRadialMenu(self) -> bool: ...

  def getOptionFontSize(self) -> int: ...

  def getOptionIgnoreProneZombieRange(self) -> int: ...

  def getOptionInventoryContainerSize(self) -> int: ...

  def getOptionInventoryFont(self) -> str: ...

  def getOptionJumpScareVolume(self) -> int: ...

  def getOptionLanguageName(self) -> str: ...

  def getOptionLeaveKeyInIgnition(self) -> bool: ...

  def getOptionLockCursorToWindow(self) -> bool: ...

  def getOptionMaxChatOpaque(self) -> float: ...

  def getOptionMaxTextureSize(self) -> int: ...

  def getOptionMaxVehicleTextureSize(self) -> int: ...

  def getOptionMeasurementFormat(self) -> str: ...

  def getOptionMinChatOpaque(self) -> float: ...

  def getOptionModelTextureMipmaps(self) -> bool: ...

  def getOptionModsEnabled(self) -> bool: ...

  def getOptionMusicActionStyle(self) -> int: ...

  def getOptionMusicLibrary(self) -> int: ...

  def getOptionMusicVolume(self) -> int: ...

  def getOptionOnStartup(self, name: str) -> object: ...

  def getOptionPanCameraWhileAiming(self) -> bool: ...

  def getOptionPanCameraWhileDriving(self) -> bool: ...

  def getOptionRackProgress(self) -> bool: ...

  def getOptionRadialMenuKeyToggle(self) -> bool: ...

  def getOptionReloadDifficulty(self) -> int: ...

  def getOptionReloadRadialInstant(self) -> bool: ...

  def getOptionRenderPrecipitation(self) -> int: ...

  def getOptionSearchModeOverlayEffect(self) -> int: ...

  def getOptionShoulderButtonContainerSwitch(self) -> int: ...

  def getOptionShowCursorWhileAiming(self) -> bool: ...

  def getOptionShowItemModInfo(self) -> bool: ...

  def getOptionShowSurvivalGuide(self) -> bool: ...

  def getOptionSimpleClothingTextures(self) -> int: ...

  def getOptionSimpleWeaponTextures(self) -> bool: ...

  def getOptionSingleContextMenu(self, playerIndex: int) -> bool: ...

  def getOptionSoundVolume(self) -> int: ...

  def getOptionTexture2x(self) -> bool: ...

  def getOptionTextureCompression(self) -> bool: ...

  def getOptionTieredZombieUpdates(self) -> bool: ...

  def getOptionTimedActionGameSpeedReset(self) -> bool: ...

  def getOptionTooltipFont(self) -> str: ...

  def getOptionUIFBO(self) -> bool: ...

  def getOptionUIRenderFPS(self) -> int: ...

  def getOptionUpdateSneakButton(self) -> bool: ...

  def getOptionVSync(self) -> bool: ...

  def getOptionVehicleEngineVolume(self) -> int: ...

  def getOptionVoiceAGCMode(self) -> int: ...

  def getOptionVoiceEnable(self) -> bool: ...

  def getOptionVoiceMode(self) -> int: ...

  def getOptionVoiceRecordDevice(self) -> int: ...

  def getOptionVoiceRecordDeviceName(self) -> str: ...

  def getOptionVoiceVADMode(self) -> int: ...

  def getOptionVoiceVolumeMic(self) -> int: ...

  def getOptionVoiceVolumePlayers(self) -> int: ...

  def getOptionZoom(self) -> bool: ...

  def getOptionZoomLevels1x(self) -> str: ...

  def getOptionZoomLevels2x(self) -> str: ...

  def getPerfPuddles(self) -> int: ...

  def getPerfPuddlesOnLoad(self) -> int: ...

  def getPerfReflections(self) -> bool: ...

  def getPerfReflectionsOnLoad(self) -> bool: ...

  def getPerfSkybox(self) -> int: ...

  def getPerfSkyboxOnLoad(self) -> int: ...

  def getPoisonousBerry(self) -> str: ...

  def getPoisonousMushroom(self) -> str: ...

  def getRealOptionSoundVolume(self) -> float: ...

  def getSaveFolder(self) -> str: ...

  def getScreenHeight(self) -> int: ...

  def getScreenModes(self) -> KahluaTable: ...

  def getScreenWidth(self) -> int: ...

  def getSeenUpdateText(self) -> str: ...

  def getServerVOIPEnable(self) -> bool: ...

  def getSteamServerVersion(self) -> str: ...

  def getTermsOfServiceVersion(self) -> int: ...

  def getUseShaders(self) -> bool: ...

  def getVersion(self) -> str: ...

  def getVersionNumber(self) -> str: ...

  def getVidMem(self) -> int: ...

  def getXAngle(self, width: int, angle: float) -> int: ...

  def getYAngle(self, width: int, angle: float) -> int: ...

  def getZoom(self, playerIndex: int) -> float: ...

  def gotNewBelt(self) -> bool: ...

  def init(self, width: int, height: int) -> None: ...

  def initFBOs(self) -> None: ...

  def initPoisonousBerry(self) -> None: ...

  def initPoisonousMushroom(self) -> None: ...

  def initShaders(self) -> None: ...

  def isAnimPopupDone(self) -> bool: ...

  def isAzerty(self) -> bool: ...

  def isCelsius(self) -> bool: ...

  def isChallenge(self) -> bool: ...

  def isCollideZombies(self) -> bool: ...

  def isDedicated(self) -> bool: ...

  def isDefaultOptions(self) -> bool: ...

  def isDoingTextEntry(self) -> bool: ...

  def isDoneNewSaveFolder(self) -> bool: ...

  def isFlashIsoCursor(self) -> bool: ...

  def isForceSnow(self) -> bool: ...

  def isFullScreen(self) -> bool: ...

  def isInDebug(self) -> bool: ...

  def isModsPopupDone(self) -> bool: ...

  def isMultiThread(self) -> bool: ...

  def isNewReloading(self) -> bool: ...

  def isNoSave(self) -> bool: ...

  def isOption3DGroundItem(self) -> bool: ...

  def isOptionAutoProneAtk(self) -> bool: ...

  def isOptionProgressBar(self) -> bool: ...

  def isOptionShowChatTimestamp(self) -> bool: ...

  def isOptionShowChatTitle(self) -> bool: ...

  def isOptionSimpleClothingTextures(self, bZombie: bool) -> bool: ...

  def isOptiondblTapJogToSprint(self) -> bool: ...

  def isRenderPrecipIndoors(self) -> bool: ...

  def isRiversideDone(self) -> bool: ...

  def isSelectingAll(self) -> bool: ...

  def isShowFirstTimeSearchTutorial(self) -> bool: ...

  def isShowFirstTimeSneakTutorial(self) -> bool: ...

  def isShowFirstTimeVehicleTutorial(self) -> bool: ...

  def isShowFirstTimeWeatherTutorial(self) -> bool: ...

  def isShowPing(self) -> bool: ...

  def isShowYourUsername(self) -> bool: ...

  def isToggleToAim(self) -> bool: ...

  def isToggleToRun(self) -> bool: ...

  def isToggleToSprint(self) -> bool: ...

  def isTutorialDone(self) -> bool: ...

  def isVehiclesWarningShow(self) -> bool: ...

  def isZombieGroupSound(self) -> bool: ...

  def isZoomEnabled(self) -> bool: ...

  def loadOptions(self) -> bool: ...

  def loadedShader(self) -> bool: ...

  def quit(self) -> None: ...

  def quitToDesktop(self) -> None: ...

  def reinitKeyMaps(self) -> None: ...

  def saveOptions(self) -> None: ...

  def setAnimPopupDone(self, done: bool) -> None: ...

  def setAutoZoom(self, playerIndex: int, auto: bool) -> None: ...

  def setAzerty(self, isAzerty: bool) -> None: ...

  def setBadHighlitedColor(self, arg0: ColorInfo) -> None: ...

  def setBlinkingMoodle(self, blinkingMoodle: str) -> None: ...

  def setCelsius(self, celsius: bool) -> None: ...

  def setChallenge(self, bChallenge: bool) -> None: ...

  def setCollideZombies(self, collideZombies: bool) -> None: ...

  def setContentTranslationsEnabled(self, b: bool) -> None: ...

  def setDoneNewSaveFolder(self, doneNewSaveFolder: bool) -> None: ...

  def setFlashIsoCursor(self, flashIsoCursor: bool) -> None: ...

  def setForceSnow(self, forceSnow: bool) -> None: ...

  def setFramerate(self, index: int) -> None: ...

  def setGoodHighlitedColor(self, arg0: ColorInfo) -> None: ...

  def setGotNewBelt(self, gotit: bool) -> None: ...

  def setIsSelectingAll(self, isSelectingAll: bool) -> None: ...

  def setIsoCursorVisibility(self, isoCursorVisibility: int) -> None: ...

  def setKeyMaps(self, keyMaps: Map[str, Integer]) -> None: ...

  def setLastRenderedFBO(self, fbo: TextureFBO) -> None: ...

  def setModsPopupDone(self, done: bool) -> None: ...

  def setMpTextColor(self, mpTextColor: ColorInfo) -> None: ...

  def setMultiThread(self, val: bool) -> None: ...

  def setNewReloading(self, newReloading: bool) -> None: ...

  def setNoSave(self, noSave: bool) -> None: ...

  def setObjectHighlitedColor(self, objectHighlitedColor: ColorInfo) -> None: ...

  def setOption3DGroundItem(self, option3Dgrounditem: bool) -> None: ...

  def setOptionActiveController(self, controllerIndex: int, active: bool) -> None: ...

  def setOptionAimOutline(self, choice: int) -> None: ...

  def setOptionAmbientVolume(self, volume: int) -> None: ...

  def setOptionAutoDrink(self, enable: bool) -> None: ...

  def setOptionAutoProneAtk(self, optionAutoProneAtk: bool) -> None: ...

  def setOptionAutoWalkContainer(self, arg0: bool) -> None: ...

  def setOptionBloodDecals(self, n: int) -> None: ...

  def setOptionBorderlessWindow(self, b: bool) -> None: ...

  def setOptionChatFadeTime(self, optionChatFadeTime: float) -> None: ...

  def setOptionChatFontSize(self, optionChatFontSize: str) -> None: ...

  def setOptionChatOpaqueOnFocus(self, optionChatOpaqueOnFocus: bool) -> None: ...

  def setOptionClock24Hour(self, b24Hour: bool) -> None: ...

  def setOptionClockFormat(self, fmt: int) -> None: ...

  def setOptionClockSize(self, size: int) -> None: ...

  def setOptionContextMenuFont(self, font: str) -> None: ...

  def setOptionCorpseShadows(self, enable: bool) -> None: ...

  def setOptionCycleContainerKey(self, s: str) -> None: ...

  def setOptionDisplayAsCelsius(self, b: bool) -> None: ...

  def setOptionDoContainerOutline(self, arg0: bool) -> None: ...

  def setOptionDoDoorSpriteEffects(self, b: bool) -> None: ...

  def setOptionDoWindSpriteEffects(self, b: bool) -> None: ...

  def setOptionDropItemsOnSquareCenter(self, b: bool) -> None: ...

  def setOptionEnableLeftJoystickRadialMenu(self, b: bool) -> None: ...

  def setOptionFontSize(self, size: int) -> None: ...

  def setOptionIgnoreProneZombieRange(self, i: int) -> None: ...

  def setOptionInventoryContainerSize(self, size: int) -> None: ...

  def setOptionInventoryFont(self, font: str) -> None: ...

  def setOptionJumpScareVolume(self, volume: int) -> None: ...

  def setOptionLanguageName(self, name: str) -> None: ...

  def setOptionLeaveKeyInIgnition(self, enable: bool) -> None: ...

  def setOptionLockCursorToWindow(self, b: bool) -> None: ...

  def setOptionMaxChatOpaque(self, optionMaxChatOpaque: float) -> None: ...

  def setOptionMaxTextureSize(self, arg0: int) -> None: ...

  def setOptionMaxVehicleTextureSize(self, arg0: int) -> None: ...

  def setOptionMeasurementFormat(self, format: str) -> None: ...

  def setOptionMinChatOpaque(self, optionMinChatOpaque: float) -> None: ...

  def setOptionModelTextureMipmaps(self, b: bool) -> None: ...

  def setOptionModsEnabled(self, enabled: bool) -> None: ...

  def setOptionMusicActionStyle(self, v: int) -> None: ...

  def setOptionMusicLibrary(self, m: int) -> None: ...

  def setOptionMusicVolume(self, volume: int) -> None: ...

  def setOptionOnStartup(self, name: str, value: object) -> None: ...

  def setOptionPanCameraWhileAiming(self, enable: bool) -> None: ...

  def setOptionPanCameraWhileDriving(self, enable: bool) -> None: ...

  def setOptionProgressBar(self, optionProgressBar: bool) -> None: ...

  def setOptionRackProgress(self, b: bool) -> None: ...

  def setOptionRadialMenuKeyToggle(self, toggle: bool) -> None: ...

  def setOptionReloadDifficulty(self, d: int) -> None: ...

  def setOptionReloadRadialInstant(self, enable: bool) -> None: ...

  def setOptionRenderPrecipitation(self, optionRenderPrecipitation: int) -> None: ...

  def setOptionSearchModeOverlayEffect(self, v: int) -> None: ...

  def setOptionShoulderButtonContainerSwitch(self, v: int) -> None: ...

  def setOptionShowChatTimestamp(self, optionShowChatTimestamp: bool) -> None: ...

  def setOptionShowChatTitle(self, optionShowChatTitle: bool) -> None: ...

  def setOptionShowCursorWhileAiming(self, show: bool) -> None: ...

  def setOptionShowItemModInfo(self, b: bool) -> None: ...

  def setOptionShowSurvivalGuide(self, b: bool) -> None: ...

  def setOptionSimpleClothingTextures(self, v: int) -> None: ...

  def setOptionSimpleWeaponTextures(self, enable: bool) -> None: ...

  def setOptionSingleContextMenu(self, playerIndex: int, b: bool) -> None: ...

  def setOptionSoundVolume(self, volume: int) -> None: ...

  def setOptionTexture2x(self, b: bool) -> None: ...

  def setOptionTextureCompression(self, b: bool) -> None: ...

  def setOptionTieredZombieUpdates(self, val: bool) -> None: ...

  def setOptionTimedActionGameSpeedReset(self, b: bool) -> None: ...

  def setOptionTooltipFont(self, font: str) -> None: ...

  def setOptionUIFBO(self, use: bool) -> None: ...

  def setOptionUIRenderFPS(self, fps: int) -> None: ...

  def setOptionUpdateSneakButton(self, b: bool) -> None: ...

  def setOptionVSync(self, sync: bool) -> None: ...

  def setOptionVehicleEngineVolume(self, volume: int) -> None: ...

  def setOptionVoiceAGCMode(self, option: int) -> None: ...

  def setOptionVoiceEnable(self, option: bool) -> None: ...

  def setOptionVoiceMode(self, option: int) -> None: ...

  def setOptionVoiceRecordDevice(self, option: int) -> None: ...

  def setOptionVoiceRecordDeviceName(self, option: str) -> None: ...

  def setOptionVoiceVADMode(self, option: int) -> None: ...

  def setOptionVoiceVolumeMic(self, option: int) -> None: ...

  def setOptionVoiceVolumePlayers(self, option: int) -> None: ...

  def setOptionZoom(self, zoom: bool) -> None: ...

  def setOptionZoomLevels1x(self, levels: str) -> None: ...

  def setOptionZoomLevels2x(self, levels: str) -> None: ...

  def setOptiondblTapJogToSprint(self, dbltap: bool) -> None: ...

  def setPerfPuddles(self, val: int) -> None: ...

  def setPerfReflections(self, val: bool) -> None: ...

  def setPerfSkybox(self, val: int) -> None: ...

  def setPoisonousBerry(self, poisonousBerry: str) -> None: ...

  def setPoisonousMushroom(self, poisonousMushroom: str) -> None: ...

  def setRenderPrecipIndoors(self, optionRenderPrecipIndoors: bool) -> None: ...

  def setResolution(self, res: str) -> None: ...

  def setResolutionAndFullScreen(self, w: int, h: int, fullScreen: bool) -> None: ...

  def setRiversideDone(self, riversideDone: bool) -> None: ...

  def setScreenSize(self, width: int, height: int) -> None: ...

  def setSeenUpdateText(self, seenUpdateText: str) -> None: ...

  def setShowFirstTimeSearchTutorial(self, showFirstTimeSearchTutorial: bool) -> None: ...

  def setShowFirstTimeSneakTutorial(self, showFirstTimeSneakTutorial: bool) -> None: ...

  def setShowFirstTimeVehicleTutorial(self, showFirstTimeVehicleTutorial: bool) -> None: ...

  def setShowFirstTimeWeatherTutorial(self, showFirstTimeWeatherTutorial: bool) -> None: ...

  def setShowPing(self, showPing: bool) -> None: ...

  def setShowYourUsername(self, showYourUsername: bool) -> None: ...

  def setTermsOfServiceVersion(self, arg0: int) -> None: ...

  def setTestingMicrophone(self, testing: bool) -> None: ...

  def setToggleToAim(self, enable: bool) -> None: ...

  def setToggleToRun(self, toggleToRun: bool) -> None: ...

  def setToggleToSprint(self, toggleToSprint: bool) -> None: ...

  def setTutorialDone(self, done: bool) -> None: ...

  def setUseShaders(self, bUse: bool) -> None: ...

  def setVehiclesWarningShow(self, done: bool) -> None: ...

  def setVidMem(self, mem: int) -> None: ...

  def setWindowed(self, b: bool) -> None: ...

  def setZombieGroupSound(self, zombieGroupSound: bool) -> None: ...

  def shadersOptionChanged(self) -> None: ...

  def supportRes(self, width: int, height: int) -> bool: ...

  def supportsFBO(self) -> bool: ...

  def updateKeyboard(self) -> None: ...

  def zoomLevelsChanged(self) -> None: ...

  def zoomOptionChanged(self, inGame: bool) -> None: ...

  @staticmethod
  def UnfocusActiveTextEntryBox() -> None: ...

  @staticmethod
  def flipPixels(imgPixels: list[int], imgw: int, imgh: int) -> list[int]: ...

  @staticmethod
  def getDifficulty() -> str: ...

  @staticmethod
  def getGLMajorVersion() -> int: ...

  @staticmethod
  def getGLVersion() -> str: ...

  @staticmethod
  def getInstance() -> Core: ...

  @staticmethod
  def getMyDocumentFolder() -> str: ...

  @staticmethod
  def getOpenGLVersions() -> None: ...

  @staticmethod
  def getTileScale() -> int: ...

  @staticmethod
  def isLastStand() -> bool: ...

  @staticmethod
  def setDifficulty(vdifficulty: str) -> None: ...

  @staticmethod
  def setDisplayMode(width: int, height: int, fullscreen: bool) -> None: ...

  @staticmethod
  def setFullScreen(bool: bool) -> None: ...

  @staticmethod
  def supportCompressedTextures() -> bool: ...

  @staticmethod
  def supportNPTTexture() -> bool: ...

  def __init__(self):
    self.buseshaders: bool
    self.fileversion: int
    self.floatparammap: HashMap[Integer, Float]
    self.framestage: int
    self.offscreenbuffer: MultiTextureFBO2
    self.rendershader: Shader
    self.steamserverversion: str
    self.uirenderaccumulator: float
    self.uirenderthisframe: bool
    self.version: int
    self.vidmem: int


class FastTrig:

  @staticmethod
  def cos(radians: float) -> float: ...

  @staticmethod
  def sin(radians: float) -> float: ...

  def __init__(self): ...


class GUID:

  @staticmethod
  def generateGUID() -> str: ...

  def __init__(self): ...


class GameVersion:

  def equals(self, obj: object) -> bool: ...

  def getInt(self) -> int: ...

  def getMajor(self) -> int: ...

  def getMinor(self) -> int: ...

  def getSuffix(self) -> str: ...

  def isGreaterThan(self, rhs: GameVersion) -> bool: ...

  def isGreaterThanOrEqualTo(self, rhs: GameVersion) -> bool: ...

  def isLessThan(self, rhs: GameVersion) -> bool: ...

  def isLessThanOrEqualTo(self, rhs: GameVersion) -> bool: ...

  def toString(self) -> str: ...

  @staticmethod
  def parse(str: str) -> GameVersion: ...

  def __init__(self, major: int, minor: int, suffix: str): ...


class ImmutableColor:

  black: ImmutableColor

  blue: ImmutableColor

  cyan: ImmutableColor

  darkGray: ImmutableColor

  darkGreen: ImmutableColor

  gray: ImmutableColor

  green: ImmutableColor

  lightGray: ImmutableColor

  lightGreen: ImmutableColor

  magenta: ImmutableColor

  orange: ImmutableColor

  pink: ImmutableColor

  purple: ImmutableColor

  red: ImmutableColor

  transparent: ImmutableColor

  white: ImmutableColor

  yellow: ImmutableColor

  def add(self, c: ImmutableColor) -> ImmutableColor: ...

  @overload
  def brighter(self) -> ImmutableColor: ...

  @overload
  def brighter(self, scale: float) -> ImmutableColor: ...

  @overload
  def darker(self) -> ImmutableColor: ...

  @overload
  def darker(self, scale: float) -> ImmutableColor: ...

  def equals(self, other: object) -> bool: ...

  def getAlphaByte(self) -> int: ...

  def getAlphaFloat(self) -> float: ...

  def getAlphaInt(self) -> int: ...

  def getBlueByte(self) -> int: ...

  def getBlueFloat(self) -> float: ...

  def getBlueInt(self) -> int: ...

  def getGreenByte(self) -> int: ...

  def getGreenFloat(self) -> float: ...

  def getGreenInt(self) -> int: ...

  def getRedByte(self) -> int: ...

  def getRedFloat(self) -> float: ...

  def getRedInt(self) -> int: ...

  def hashCode(self) -> int: ...

  def interp(self, to: ImmutableColor, delta: float) -> ImmutableColor: ...

  def multiply(self, c: Color) -> ImmutableColor: ...

  def scale(self, value: float) -> ImmutableColor: ...

  def toMutableColor(self) -> Color: ...

  def toString(self) -> str: ...

  @staticmethod
  def HSBtoRGB(hue: float, saturation: float, brightness: float) -> list[Integer]: ...

  @staticmethod
  def decode(nm: str) -> ImmutableColor: ...

  @staticmethod
  def random() -> ImmutableColor: ...

  @overload
  def __init__(self, value: int):
    self.a: float

    self.b: float

    self.g: float

    self.r: float

  @overload
  def __init__(self, color: Color): ...
  @overload
  def __init__(self, color: ImmutableColor): ...
  @overload
  def __init__(self, r: float, g: float, b: float): ...
  @overload
  def __init__(self, r: int, g: int, b: int): ...
  @overload
  def __init__(self, A: Color, B: Color, delta: float): ...
  @overload
  def __init__(self, r: float, g: float, b: float, a: float): ...
  @overload
  def __init__(self, r: int, g: int, b: int, a: int): ...


class IndieFileLoader:

  @staticmethod
  @overload
  def getStreamReader(path: str) -> InputStreamReader: ...

  @staticmethod
  @overload
  def getStreamReader(path: str, bIgnoreJar: bool) -> InputStreamReader: ...

  def __init__(self): ...


class Language:

  def base(self) -> str: ...

  def charset(self) -> str: ...

  def index(self) -> int: ...

  def isAzerty(self) -> bool: ...

  def name(self) -> str: ...

  def text(self) -> str: ...

  def toString(self) -> str: ...

  @staticmethod
  def FromString(str: str) -> Language: ...

  @staticmethod
  def fromIndex(index: int) -> Language: ...


class LanguageFile:

  def read(self, path: str, data: LanguageFileData) -> bool: ...

  def __init__(self): ...


class LanguageFileData:

  def __init__(self): ...


class Languages:

  instance: Languages

  def getByIndex(self, index: int) -> Language: ...

  def getByName(self, name: str) -> Language: ...

  def getDefaultLanguage(self) -> Language: ...

  def getIndexByName(self, name: str) -> int: ...

  def getNumLanguages(self) -> int: ...

  def init(self) -> None: ...

  def __init__(self): ...


class PerformanceSettings:

  AnimationSkip: int

  auto3DZombies: bool

  BaseStaticAnimFramerate: int

  FogQuality: int

  instance: PerformanceSettings

  InterpolateAnims: bool

  LightingFPS: int

  LightingFrameSkip: int

  LightingThread: bool

  ManualFrameSkips: int

  ModelLighting: bool

  NewRoofHiding: bool

  numberZombiesBlended: int

  PuddlesQuality: int

  UseFBOs: bool

  WaterQuality: int

  ZombieAnimationSpeedFalloffCount: int

  ZombieBonusFullspeedFalloff: int

  def getFogQuality(self) -> int: ...

  def getFramerate(self) -> int: ...

  def getLightingFPS(self) -> int: ...

  def getLightingQuality(self) -> int: ...

  def getNewRoofHiding(self) -> bool: ...

  def getPuddlesQuality(self) -> int: ...

  def getUIRenderFPS(self) -> int: ...

  def getWaterQuality(self) -> int: ...

  def isFramerateUncapped(self) -> bool: ...

  def setFogQuality(self, fogQuality: int) -> None: ...

  def setFramerate(self, framerate: int) -> None: ...

  def setFramerateUncapped(self, val: bool) -> None: ...

  def setLightingFPS(self, fps: int) -> None: ...

  def setLightingQuality(self, lighting: int) -> None: ...

  def setNewRoofHiding(self, enabled: bool) -> None: ...

  def setPuddlesQuality(self, puddles: int) -> None: ...

  def setWaterQuality(self, water: int) -> None: ...

  @staticmethod
  def getLockFPS() -> int: ...

  @staticmethod
  def isUncappedFPS() -> bool: ...

  @staticmethod
  def setLockFPS(lockFPS: int) -> None: ...

  @staticmethod
  def setUncappedFPS(uncappedFPS: bool) -> None: ...

  def __init__(self): ...


class ProxyPrintStream(PrintStream):

  def flush(self) -> None: ...

  def print(self, str: str) -> None: ...

  @overload
  def println(self, o: object) -> None: ...

  @overload
  def println(self, str: str) -> None: ...

  def write(self, buf: list[int], __off__: int, len: int) -> None: ...

  def __init__(self, system: PrintStream, file: PrintStream): ...


class Rand:

  id: int

  rand: CellularAutomatonRNG

  randlua: CellularAutomatonRNG

  @staticmethod
  def AdjustForFramerate(chance: int) -> int: ...

  @staticmethod
  @overload
  def Next(max: int) -> int: ...

  @staticmethod
  @overload
  def Next(max: int) -> int: ...

  @staticmethod
  @overload
  def Next(min: float, max: float) -> float: ...

  @staticmethod
  @overload
  def Next(min: int, max: int) -> int: ...

  @staticmethod
  @overload
  def Next(min: int, max: int) -> int: ...

  @staticmethod
  @overload
  def Next(max: int, randomizer: CellularAutomatonRNG) -> int: ...

  @staticmethod
  @overload
  def Next(min: float, max: float, randomizer: CellularAutomatonRNG) -> float: ...

  @staticmethod
  @overload
  def Next(min: int, max: int, randomizer: CellularAutomatonRNG) -> int: ...

  @staticmethod
  @overload
  def Next(min: int, max: int, randomizer: CellularAutomatonRNG) -> int: ...

  @staticmethod
  def NextBool(invProbability: int) -> bool: ...

  @staticmethod
  def init() -> None: ...

  def __init__(self): ...

  class PZSeedGenerator:

    @overload
    def generateSeed(self, length: int) -> list[int]: ...

    @overload
    def generateSeed(self, length: int) -> list[int]: ...


class SpriteRenderer:

  GL_BLENDFUNC_ENABLED: bool

  instance: SpriteRenderer

  NUM_RENDER_STATES: int

  ringBuffer: SpriteRenderer.RingBuffer

  def EndShader(self) -> None: ...

  def ShaderUpdate1f(self, shaderID: int, uniform: int, uniformValue: float) -> None: ...

  def ShaderUpdate1i(self, shaderID: int, uniform: int, uniformValue: int) -> None: ...

  def ShaderUpdate2f(self, shaderID: int, uniform: int, value1: float, value2: float) -> None: ...

  def ShaderUpdate3f(self, shaderID: int, uniform: int, value1: float, value2: float, value3: float) -> None: ...

  def ShaderUpdate4f(self, shaderID: int, uniform: int, value1: float, value2: float, value3: float, value4: float) -> None: ...

  def StartShader(self, iD: int, playerIndex: int) -> None: ...

  def acquireStateForRendering(self, waitCallback: BooleanSupplier) -> SpriteRenderState: ...

  def clearCutawayTexture(self) -> None: ...

  def clearSprites(self) -> None: ...

  def clearUseVertColorsArray(self) -> None: ...

  def create(self) -> None: ...

  def doCoreIntParam(self, id: int, val: float) -> None: ...

  def drawGeneric(self, gd: TextureDraw.GenericDrawer) -> None: ...

  def drawModel(self, model: ModelManager.ModelSlot) -> None: ...

  def drawParticles(self, playerIndex: int, var1: int, var2: int) -> None: ...

  def drawPuddles(self, shader: Shader, playerIndex: int, apiId: int, z: int) -> None: ...

  def drawSkyBox(self, shader: Shader, playerIndex: int, apiId: int, bufferId: int) -> None: ...

  def drawWater(self, shader: Shader, playerIndex: int, apiId: int, bShore: bool) -> None: ...

  def getDoAdditive(self) -> bool: ...

  def getMainStateIndex(self) -> int: ...

  def getPlayerMaxZoom(self) -> float: ...

  def getPlayerMinZoom(self) -> float: ...

  def getPlayerZoomLevel(self) -> float: ...

  def getPopulatingState(self) -> SpriteRenderState: ...

  def getRenderStateIndex(self) -> int: ...

  def getRenderingPlayerCamera(self, userId: int) -> PlayerCamera: ...

  def getRenderingPlayerIndex(self) -> int: ...

  def getRenderingState(self) -> SpriteRenderState: ...

  def glAlphaFunc(self, a: int, b: float) -> None: ...

  def glBind(self, a: int) -> None: ...

  def glBlendEquation(self, a: int) -> None: ...

  def glBlendFunc(self, a: int, b: int) -> None: ...

  def glBlendFuncSeparate(self, a: int, b: int, c: int, d: int) -> None: ...

  def glBuffer(self, i: int, p: int) -> None: ...

  def glClear(self, a: int) -> None: ...

  def glClearColor(self, r: int, g: int, b: int, a: int) -> None: ...

  def glColorMask(self, a: int, b: int, c: int, d: int) -> None: ...

  def glDepthMask(self, b: bool) -> None: ...

  def glDisable(self, a: int) -> None: ...

  def glDoEndFrame(self) -> None: ...

  def glDoEndFrameFx(self, player: int) -> None: ...

  @overload
  def glDoStartFrame(self, w: int, h: int, zoom: float, player: int) -> None: ...

  @overload
  def glDoStartFrame(self, w: int, h: int, zoom: float, player: int, isTextFrame: bool) -> None: ...

  def glDoStartFrameFx(self, w: int, h: int, player: int) -> None: ...

  def glEnable(self, a: int) -> None: ...

  def glGenerateMipMaps(self, a: int) -> None: ...

  def glIgnoreStyles(self, b: bool) -> None: ...

  def glLoadIdentity(self) -> None: ...

  def glStencilFunc(self, a: int, b: int, c: int) -> None: ...

  def glStencilMask(self, a: int) -> None: ...

  def glStencilOp(self, a: int, b: int, c: int) -> None: ...

  def glTexParameteri(self, a: int, b: int, c: int) -> None: ...

  def glViewport(self, x: int, y: int, width: int, height: int) -> None: ...

  def initFromIsoCamera(self, nPlayer: int) -> None: ...

  def isMaxZoomLevel(self) -> bool: ...

  def isMinZoomLevel(self) -> bool: ...

  def isWaitingForRenderState(self) -> bool: ...

  def notifyRenderStateQueue(self) -> None: ...

  def postRender(self) -> None: ...

  def prePopulating(self) -> None: ...

  def pushFrameDown(self) -> None: ...

  @overload
  def render(self, tex: Texture, x: float, y: float, width: float, height: float, r: float, g: float, b: float, a: float, texdModifier: Consumer[TextureDraw]) -> None: ...

  @overload
  def render(self, tex: Texture, x1: float, y1: float, x2: float, y2: float, x3: float, y3: float, x4: float, y4: float, c1: int, c2: int, c3: int, c4: int) -> None: ...

  @overload
  def render(self, tex: Texture, x1: float, y1: float, x2: float, y2: float, x3: float, y3: float, x4: float, y4: float, r: float, g: float, b: float, a: float, texdModifier: Consumer[TextureDraw]) -> None: ...

  @overload
  def render(self, tex: Texture, x: float, y: float, width: float, height: float, r: float, g: float, b: float, a: float, u1: float, v1: float, u2: float, v2: float, u3: float, v3: float, u4: float, v4: float) -> None: ...

  @overload
  def render(self, tex: Texture, x: float, y: float, width: float, height: float, r: float, g: float, b: float, a: float, u1: float, v1: float, u2: float, v2: float, u3: float, v3: float, u4: float, v4: float, texdModifier: Consumer[TextureDraw]) -> None: ...

  @overload
  def render(self, tex: Texture, x1: float, y1: float, x2: float, y2: float, x3: float, y3: float, x4: float, y4: float, r1: float, g1: float, b1: float, a1: float, r2: float, g2: float, b2: float, a2: float, r3: float, g3: float, b3: float, a3: float, r4: float, g4: float, b4: float, a4: float, texdModifier: Consumer[TextureDraw]) -> None: ...

  def renderClamped(self, tex: Texture, x: int, y: int, width: int, height: int, clampX: int, clampY: int, clampW: int, clampH: int, r: float, g: float, b: float, a: float, texdModifier: Consumer[TextureDraw]) -> None: ...

  @overload
  def renderPoly(self, x1: float, y1: float, x2: float, y2: float, x3: float, y3: float, x4: float, y4: float, r: float, g: float, b: float, a: float) -> None: ...

  @overload
  def renderPoly(self, tex: Texture, x1: float, y1: float, x2: float, y2: float, x3: float, y3: float, x4: float, y4: float, r: float, g: float, b: float, a: float) -> None: ...

  @overload
  def renderPoly(self, tex: Texture, x1: float, y1: float, x2: float, y2: float, x3: float, y3: float, x4: float, y4: float, r: float, g: float, b: float, a: float, u1: float, v1: float, u2: float, v2: float, u3: float, v3: float, u4: float, v4: float) -> None: ...

  def renderRect(self, x: int, y: int, width: int, height: int, r: float, g: float, b: float, a: float) -> None: ...

  def renderdebug(self, tex: Texture, x1: float, y1: float, x2: float, y2: float, x3: float, y3: float, x4: float, y4: float, r1: float, g1: float, b1: float, a1: float, r2: float, g2: float, b2: float, a2: float, r3: float, g3: float, b3: float, a3: float, r4: float, g4: float, b4: float, a4: float, texdModifier: Consumer[TextureDraw]) -> None: ...

  def renderflipped(self, tex: Texture, x: float, y: float, width: float, height: float, r: float, g: float, b: float, a: float, texdModifier: Consumer[TextureDraw]) -> None: ...

  def renderi(self, tex: Texture, x: int, y: int, width: int, height: int, r: float, g: float, b: float, a: float, texdModifier: Consumer[TextureDraw]) -> None: ...

  @overload
  def renderline(self, tex: Texture, x1: int, y1: int, x2: int, y2: int, r: float, g: float, b: float, a: float) -> None: ...

  @overload
  def renderline(self, tex: Texture, x1: int, y1: int, x2: int, y2: int, r: float, g: float, b: float, a: float, thickness: int) -> None: ...

  def setCutawayTexture(self, tex: Texture, x: int, y: int, w: int, h: int) -> None: ...

  def setDefaultStyle(self, style: AbstractStyle) -> None: ...

  def setDoAdditive(self, bDoAdditive: bool) -> None: ...

  def setExtraWallShaderParams(self, wallTexRender: SpriteRenderer.WallShaderTexRender) -> None: ...

  def setRenderingPlayerIndex(self, player: int) -> None: ...

  def setUseVertColorsArray(self, whichShader: int, c0: int, c1: int, c2: int, c3: int) -> None: ...

  def startOffscreenUI(self) -> None: ...

  def stopOffscreenUI(self) -> None: ...

  def __init__(self):
    self.m_states: SpriteRendererStates

  class RingBuffer:

    IGNORE_STYLES: bool

    def checkShaderChangedTexture1(self) -> None: ...

    def debugBoundTexture(self, texture0: Texture, _unit: int) -> None: ...

    def shaderChangedTexture1(self) -> None: ...

    class StateRun:

      def toString(self) -> str: ...

  class WallShaderTexRender(Enum):

    All: SpriteRenderer.WallShaderTexRender

    LeftOnly: SpriteRenderer.WallShaderTexRender

    RightOnly: SpriteRenderer.WallShaderTexRender

    @staticmethod
    def valueOf(arg0: str) -> SpriteRenderer.WallShaderTexRender: ...

    @staticmethod
    def values() -> list[SpriteRenderer.WallShaderTexRender]: ...

  class s_performance: ...


class ThreadGroups:

  Main: ThreadGroup

  Network: ThreadGroup

  Root: ThreadGroup

  Workers: ThreadGroup

  def __init__(self): ...


class TilePropertyAliasMap:

  instance: TilePropertyAliasMap

  def Generate(self, propertyValueMap: HashMap[str, ArrayList[str]]) -> None: ...

  def getIDFromPropertyName(self, name: str) -> int: ...

  def getIDFromPropertyValue(self, property: int, value: str) -> int: ...

  def getPropertyValueString(self, property: int, value: int) -> str: ...

  def __init__(self):
    self.properties: ArrayList[TilePropertyAliasMap.TileProperty]
    self.propertytoid: HashMap[str, Integer]

  class TileProperty:

    def __init__(self):
      self.idmap: HashMap[str, Integer]
      self.possiblevalues: ArrayList[str]
      self.propertyname: str


class Translator:

  debug: bool

  language: Language

  @staticmethod
  def addLanguageToList(language: Language, languages: ArrayList[Language]) -> None: ...

  @staticmethod
  def debugItemEvolvedRecipeNames() -> None: ...

  @staticmethod
  def debugItemNames() -> None: ...

  @staticmethod
  def debugMultiStageBuildNames() -> None: ...

  @staticmethod
  def debugRecipeNames() -> None: ...

  @staticmethod
  def getAvailableLanguage() -> ArrayList[Language]: ...

  @staticmethod
  def getAzertyMap() -> ArrayList[str]: ...

  @staticmethod
  def getCharset() -> str: ...

  @staticmethod
  def getDefaultLanguage() -> Language: ...

  @staticmethod
  def getDisplayItemName(trim: str) -> str: ...

  @staticmethod
  def getItemEvolvedRecipeName(fullType: str) -> str: ...

  @staticmethod
  def getItemNameFromFullType(fullType: str) -> str: ...

  @staticmethod
  def getLanguage() -> Language: ...

  @staticmethod
  def getMoveableDisplayName(name: str) -> str: ...

  @staticmethod
  def getMoveableDisplayNameOrNull(name: str) -> str: ...

  @staticmethod
  def getMultiStageBuild(name: str) -> str: ...

  @staticmethod
  def getNewsVersions() -> ArrayList[str]: ...

  @staticmethod
  def getRadioText(s: str) -> str: ...

  @staticmethod
  def getRecipeName(name: str) -> str: ...

  @staticmethod
  @overload
  def getText(desc: str) -> str: ...

  @staticmethod
  @overload
  def getText(desc: str, arg1: object) -> str: ...

  @staticmethod
  @overload
  def getText(desc: str, arg1: object, arg2: object) -> str: ...

  @staticmethod
  @overload
  def getText(desc: str, arg1: object, arg2: object, arg3: object) -> str: ...

  @staticmethod
  @overload
  def getText(desc: str, arg1: object, arg2: object, arg3: object, arg4: object) -> str: ...

  @staticmethod
  def getTextMediaEN(desc: str) -> str: ...

  @staticmethod
  @overload
  def getTextOrNull(desc: str) -> str: ...

  @staticmethod
  @overload
  def getTextOrNull(desc: str, arg1: object) -> str: ...

  @staticmethod
  @overload
  def getTextOrNull(desc: str, arg1: object, arg2: object) -> str: ...

  @staticmethod
  @overload
  def getTextOrNull(desc: str, arg1: object, arg2: object, arg3: object) -> str: ...

  @staticmethod
  @overload
  def getTextOrNull(desc: str, arg1: object, arg2: object, arg3: object, arg4: object) -> str: ...

  @staticmethod
  def loadFiles() -> None: ...

  @staticmethod
  def setDefaultItemEvolvedRecipeName(fullType: str, english: str) -> None: ...

  @staticmethod
  @overload
  def setLanguage(languageId: int) -> None: ...

  @staticmethod
  @overload
  def setLanguage(newlanguage: Language) -> None: ...

  def __init__(self): ...

  class News: ...


class WinReqistry:

  @staticmethod
  def getSteamDirectory() -> str: ...

  @staticmethod
  def readRegistry(location: str, key: str) -> str: ...

  def __init__(self): ...

  class StreamReader(Thread):

    def getResult(self) -> str: ...

    def run(self) -> None: ...

    def __init__(self, arg0: InputStream): ...

