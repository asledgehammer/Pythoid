from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.lang import Class, Integer

class AltCommandArgs:

  def annotationType(self) -> Class[Annotation]: ...

  def equals(self, arg0: object) -> bool: ...

  def hashCode(self) -> int: ...

  def toString(self) -> str: ...

  def value(self) -> list[CommandArgs]: ...


class CommandArgs:

  DEFAULT_OPTIONAL_ARGUMENT: str

  def annotationType(self) -> Class[Annotation]: ...

  def argName(self) -> str: ...

  def equals(self, arg0: object) -> bool: ...

  def hashCode(self) -> int: ...

  def optional(self) -> str: ...

  def required(self) -> list[str]: ...

  def toString(self) -> str: ...

  def varArgs(self) -> bool: ...


class CommandBase:

  def Execute(self) -> str: ...

  def canBeExecuted(self) -> bool: ...

  def getCommandArg(self, argNumber: Integer) -> str: ...

  def getCommandArgsCount(self) -> int: ...

  def hasHelp(self) -> bool: ...

  def hasOptionalArg(self, argNumber: Integer) -> bool: ...

  def isCommandComeFromServerConsole(self) -> bool: ...

  def isParsingSuccessful(self) -> bool: ...

  def parseCommand(self) -> bool: ...

  @staticmethod
  def accessLevelToInt(level: str) -> int: ...

  @staticmethod
  def findCommandCls(command: str) -> Class: ...

  @staticmethod
  def getCommandName(cls: Class) -> str: ...

  @staticmethod
  def getHelp(cls: Class) -> str: ...

  @staticmethod
  def getSubClasses() -> list[Class]: ...

  @staticmethod
  def isDisabled(cls: Class) -> bool: ...


class CommandHelp:

  def annotationType(self) -> Class[Annotation]: ...

  def equals(self, arg0: object) -> bool: ...

  def hashCode(self) -> int: ...

  def helpText(self) -> str: ...

  def shouldTranslated(self) -> bool: ...

  def toString(self) -> str: ...


class CommandName:

  def annotationType(self) -> Class[Annotation]: ...

  def equals(self, arg0: object) -> bool: ...

  def hashCode(self) -> int: ...

  def name(self) -> str: ...

  def toString(self) -> str: ...


class CommandNames:

  def annotationType(self) -> Class[Annotation]: ...

  def equals(self, arg0: object) -> bool: ...

  def hashCode(self) -> int: ...

  def toString(self) -> str: ...

  def value(self) -> list[CommandName]: ...


class DisabledCommand:

  def annotationType(self) -> Class[Annotation]: ...

  def equals(self, arg0: object) -> bool: ...

  def hashCode(self) -> int: ...

  def toString(self) -> str: ...


class PlayerType:

  admin: int

  all: int

  allExceptPlayer: int

  deprecated: int

  fromServerOnly: int

  gm: int

  moderator: int

  observer: int

  overseer: int

  player: int

  @staticmethod
  def fromString(type: str) -> int: ...

  @staticmethod
  def isPrivileged(accessLevel: int) -> bool: ...

  @staticmethod
  def toString(arg0: int) -> str: ...


class RequiredRight:

  def annotationType(self) -> Class[Annotation]: ...

  def equals(self, arg0: object) -> bool: ...

  def hashCode(self) -> int: ...

  def requiredRights(self) -> int: ...

  def toString(self) -> str: ...

