from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.util import ArrayList
from zombie.Lua import LuaManager
from zombie.core.textures import Texture
from zombie.popman import ObjectPool
from zombie.worldMap import WorldMapFeature, WorldMapRenderer, UIWorldMap, UIWorldMapV1

class WorldMapLineStyleLayer(WorldMapStyleLayer):

  def getTypeString(self) -> str: ...

  def render(self, feature: WorldMapFeature, args: WorldMapStyleLayer.RenderArgs) -> None: ...

  def __init__(self, id: str):
    self.m_fill: ArrayList[WorldMapStyleLayer.ColorStop]
    self.m_linewidth: ArrayList[WorldMapStyleLayer.FloatStop]


class WorldMapPolygonStyleLayer(WorldMapStyleLayer):

  def getTypeString(self) -> str: ...

  def render(self, feature: WorldMapFeature, args: WorldMapStyleLayer.RenderArgs) -> None: ...

  def __init__(self, id: str):
    self.m_fill: ArrayList[WorldMapStyleLayer.ColorStop]
    self.m_scale: ArrayList[WorldMapStyleLayer.FloatStop]
    self.m_texture: ArrayList[WorldMapStyleLayer.TextureStop]


class WorldMapStyle:

  def copyFrom(self, other: WorldMapStyle) -> None: ...

  def __init__(self):
    self.m_layers: ArrayList[WorldMapStyleLayer]


class WorldMapStyleLayer:

  def filter(self, feature: WorldMapFeature, args: WorldMapStyleLayer.FilterArgs) -> bool: ...

  def getTypeString(self) -> str: ...

  def render(self, feature: WorldMapFeature, args: WorldMapStyleLayer.RenderArgs) -> None: ...

  def renderCell(self, args: WorldMapStyleLayer.RenderArgs) -> None: ...

  def __init__(self, id: str):
    self.m_filter: WorldMapStyleLayer.IWorldMapStyleFilter
    self.m_filterkey: str
    self.m_filtervalue: str
    self.m_id: str
    self.m_minzoom: float

  class Stop: ...

  class RGBAf:

    s_pool: ObjectPool[WorldMapStyleLayer.RGBAf]

    def init(self, r: float, g: float, b: float, a: float) -> WorldMapStyleLayer.RGBAf: ...

    def __init__(self):
      self.a: float
      self.b: float
      self.g: float
      self.r: float

  class RenderArgs:

    def __init__(self):
      self.cellx: int
      self.celly: int
      self.drawer: WorldMapRenderer.Drawer
      self.renderer: WorldMapRenderer

  class ColorStop(WorldMapStyleLayer.Stop):

    def __init__(self, zoom: float, r: int, g: int, b: int, a: int):
      self.a: int
      self.b: int
      self.g: int
      self.r: int

  class FloatStop(WorldMapStyleLayer.Stop):

    def __init__(self, zoom: float, f: float):
      self.f: float

  class TextureStop(WorldMapStyleLayer.Stop):

    def __init__(self, zoom: float, texturePath: str):
      self.texture: Texture
      self.texturepath: str

  class IWorldMapStyleFilter:

    def filter(self, feature: WorldMapFeature, args: WorldMapStyleLayer.FilterArgs) -> bool: ...

  class FilterArgs:

    def __init__(self):
      self.renderer: WorldMapRenderer


class WorldMapStyleV1:

  def clear(self) -> None: ...

  def getLayerByIndex(self, index: int) -> WorldMapStyleV1.WorldMapStyleLayerV1: ...

  def getLayerByName(self, id: str) -> WorldMapStyleV1.WorldMapStyleLayerV1: ...

  def getLayerCount(self) -> int: ...

  def indexOfLayer(self, id: str) -> int: ...

  def moveLayer(self, indexFrom: int, indexTo: int) -> None: ...

  def newLineLayer(self, id: str) -> WorldMapStyleV1.WorldMapStyleLayerV1: ...

  def newPolygonLayer(self, id: str) -> WorldMapStyleV1.WorldMapStyleLayerV1: ...

  def newTextureLayer(self, id: str) -> WorldMapStyleV1.WorldMapStyleLayerV1: ...

  def removeLayerById(self, id: str) -> None: ...

  def removeLayerByIndex(self, index: int) -> None: ...

  @staticmethod
  def setExposed(exposer: LuaManager.Exposer) -> None: ...

  def __init__(self, ui: UIWorldMap):
    self.m_api: UIWorldMapV1
    self.m_layers: ArrayList[WorldMapStyleV1.WorldMapStyleLayerV1]
    self.m_style: WorldMapStyle
    self.m_ui: UIWorldMap

  class WorldMapLineStyleLayerV1(WorldMapStyleV1.WorldMapStyleLayerV1):

    def addFill(self, zoom: float, r: int, g: int, b: int, a: int) -> None: ...

    def addLineWidth(self, zoom: float, width: float) -> None: ...

    def setFilter(self, key: str, value: str) -> None: ...

  class WorldMapPolygonStyleLayerV1(WorldMapStyleV1.WorldMapStyleLayerV1):

    def addFill(self, zoom: float, r: int, g: int, b: int, a: int) -> None: ...

    def addScale(self, zoom: float, scale: float) -> None: ...

    def addTexture(self, zoom: float, texturePath: str) -> None: ...

    def getFillAlpha(self, index: int) -> int: ...

    def getFillBlue(self, index: int) -> int: ...

    def getFillGreen(self, index: int) -> int: ...

    def getFillRed(self, index: int) -> int: ...

    def getFillStops(self) -> int: ...

    def getFillZoom(self, index: int) -> float: ...

    def getFilterKey(self) -> str: ...

    def getFilterValue(self) -> str: ...

    def getTexture(self, index: int) -> Texture: ...

    def getTexturePath(self, index: int) -> str: ...

    def getTextureStops(self) -> int: ...

    def getTextureZoom(self, index: int) -> float: ...

    def moveFill(self, indexFrom: int, indexTo: int) -> None: ...

    def moveTexture(self, indexFrom: int, indexTo: int) -> None: ...

    def removeFill(self, index: int) -> None: ...

    def removeTexture(self, index: int) -> None: ...

    def setFillRGBA(self, index: int, r: int, g: int, b: int, a: int) -> None: ...

    def setFillZoom(self, index: int, zoom: float) -> None: ...

    def setFilter(self, key: str, value: str) -> None: ...

    def setTexturePath(self, index: int, texturePath: str) -> None: ...

    def setTextureZoom(self, index: int, zoom: float) -> None: ...

  class WorldMapTextureStyleLayerV1(WorldMapStyleV1.WorldMapStyleLayerV1):

    def addFill(self, zoom: float, r: int, g: int, b: int, a: int) -> None: ...

    def addTexture(self, zoom: float, texturePath: str) -> None: ...

    def getFillAlpha(self, index: int) -> int: ...

    def getFillBlue(self, index: int) -> int: ...

    def getFillGreen(self, index: int) -> int: ...

    def getFillRed(self, index: int) -> int: ...

    def getFillStops(self) -> int: ...

    def getFillZoom(self, index: int) -> float: ...

    def getHeightInSquares(self) -> int: ...

    def getMaxXInSquares(self) -> int: ...

    def getMaxYInSquares(self) -> int: ...

    def getMinXInSquares(self) -> int: ...

    def getMinYInSquares(self) -> int: ...

    def getTexture(self, index: int) -> Texture: ...

    def getTexturePath(self, index: int) -> str: ...

    def getTextureStops(self) -> int: ...

    def getTextureZoom(self, index: int) -> float: ...

    def getWidthInSquares(self) -> int: ...

    def isTile(self) -> bool: ...

    def isUseWorldBounds(self) -> bool: ...

    def moveFill(self, indexFrom: int, indexTo: int) -> None: ...

    def moveTexture(self, indexFrom: int, indexTo: int) -> None: ...

    def removeAllFill(self) -> None: ...

    def removeAllTexture(self) -> None: ...

    def removeFill(self, index: int) -> None: ...

    def removeTexture(self, index: int) -> None: ...

    def setBoundsInSquares(self, minX: int, minY: int, maxX: int, maxY: int) -> None: ...

    def setFillRGBA(self, index: int, r: int, g: int, b: int, a: int) -> None: ...

    def setFillZoom(self, index: int, zoom: float) -> None: ...

    def setTexturePath(self, index: int, texturePath: str) -> None: ...

    def setTextureZoom(self, index: int, zoom: float) -> None: ...

    def setTile(self, tile: bool) -> None: ...

    def setUseWorldBounds(self, useWorldBounds: bool) -> None: ...

  class WorldMapStyleLayerV1:

    def getId(self) -> str: ...

    def getMinZoom(self) -> float: ...

    def getTypeString(self) -> str: ...

    def setId(self, id: str) -> None: ...

    def setMinZoom(self, minZoom: float) -> None: ...


class WorldMapTextureStyleLayer(WorldMapStyleLayer):

  def filter(self, feature: WorldMapFeature, args: WorldMapStyleLayer.FilterArgs) -> bool: ...

  def getTypeString(self) -> str: ...

  def render(self, feature: WorldMapFeature, args: WorldMapStyleLayer.RenderArgs) -> None: ...

  def renderCell(self, args: WorldMapStyleLayer.RenderArgs) -> None: ...

  def __init__(self, id: str):
    self.m_fill: ArrayList[WorldMapStyleLayer.ColorStop]
    self.m_texture: ArrayList[WorldMapStyleLayer.TextureStop]
    self.m_tile: bool
    self.m_useworldbounds: bool
    self.m_worldx1: int
    self.m_worldx2: int
    self.m_worldy1: int
    self.m_worldy2: int

