from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.lang import Enum
from java.nio import ByteBuffer
from zombie.characters import IsoPlayer
from zombie.chat import ChatBase, ChatSettings, ChatTab, ChatMessage, ServerChatMessage
from zombie.core.network import ByteBufferWriter
from zombie.radio.devices import DeviceData

class AdminChat(ChatBase):

  @staticmethod
  def getDefaultSettings() -> ChatSettings: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, id: int, tab: ChatTab): ...
  @overload
  def __init__(self, bb: ByteBuffer, tab: ChatTab, owner: IsoPlayer): ...


class FactionChat(ChatBase):

  @staticmethod
  def getDefaultSettings() -> ChatSettings: ...

  @overload
  def __init__(self, id: int, tab: ChatTab): ...
  @overload
  def __init__(self, bb: ByteBuffer, tab: ChatTab, owner: IsoPlayer): ...


class GeneralChat(ChatBase):

  def getMessagePrefix(self, msg: ChatMessage) -> str: ...

  def packMessage(self, b: ByteBufferWriter, msg: ChatMessage) -> None: ...

  def sendMessageToChatMembers(self, msg: ChatMessage) -> None: ...

  def sendToDiscordGeneralChatDisabled(self) -> None: ...

  def unpackMessage(self, bb: ByteBuffer) -> ChatMessage: ...

  @staticmethod
  def getDefaultSettings() -> ChatSettings: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, id: int, tab: ChatTab, discordEnabled: bool): ...
  @overload
  def __init__(self, bb: ByteBuffer, tab: ChatTab, owner: IsoPlayer): ...


class RadioChat(RangeBasedChat):

  def createBroadcastingMessage(self, text: str, channel: int) -> ChatMessage: ...

  def createMessage(self, text: str) -> ChatMessage: ...

  def createStaticSoundMessage(self, text: str) -> ChatMessage: ...

  def getMessagePrefix(self, msg: ChatMessage) -> str: ...

  def packMessage(self, b: ByteBufferWriter, msg: ChatMessage) -> None: ...

  def sendToServer(self, msg: ChatMessage, deviceData: DeviceData) -> None: ...

  def showMessage(self, msg: ChatMessage) -> None: ...

  def unpackMessage(self, bb: ByteBuffer) -> ChatMessage: ...

  @staticmethod
  def getDefaultSettings() -> ChatSettings: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, id: int, tab: ChatTab): ...
  @overload
  def __init__(self, bb: ByteBuffer, tab: ChatTab, owner: IsoPlayer): ...


class RangeBasedChat(ChatBase):

  def Init(self) -> None: ...

  def createBubbleMessage(self, text: str) -> ChatMessage: ...

  def createMessage(self, text: str) -> ChatMessage: ...

  def isSendingToRadio(self) -> bool: ...

  def sendMessageToChatMembers(self, msg: ChatMessage) -> None: ...

  def showMessage(self, msg: ChatMessage) -> None: ...


class SafehouseChat(ChatBase):

  @staticmethod
  def getDefaultSettings() -> ChatSettings: ...

  @overload
  def __init__(self, id: int, tab: ChatTab): ...
  @overload
  def __init__(self, bb: ByteBuffer, tab: ChatTab, owner: IsoPlayer): ...


class SayChat(RangeBasedChat):

  def createCalloutMessage(self, text: str) -> ChatMessage: ...

  def createInfoMessage(self, text: str) -> ChatMessage: ...

  def getMessageTextWithPrefix(self, msg: ChatMessage) -> str: ...

  @staticmethod
  def getDefaultSettings() -> ChatSettings: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, id: int, tab: ChatTab): ...
  @overload
  def __init__(self, bb: ByteBuffer, tab: ChatTab, owner: IsoPlayer): ...


class ServerChat(ChatBase):

  def createMessage(self, author: str, text: str, isAlert: bool) -> ChatMessage: ...

  def createServerMessage(self, text: str, isAlert: bool) -> ServerChatMessage: ...

  def getMessagePrefix(self, msg: ChatMessage) -> str: ...

  def getMessageTextWithPrefix(self, msg: ChatMessage) -> str: ...

  def getTabID(self) -> int: ...

  def packMessage(self, b: ByteBufferWriter, msg: ChatMessage) -> None: ...

  def sendMessageToChatMembers(self, msg: ChatMessage) -> None: ...

  def showMessage(self, msg: ChatMessage) -> None: ...

  def unpackMessage(self, bb: ByteBuffer) -> ChatMessage: ...

  @staticmethod
  def getDefaultSettings() -> ChatSettings: ...

  @overload
  def __init__(self, id: int, tab: ChatTab): ...
  @overload
  def __init__(self, bb: ByteBuffer, tab: ChatTab, owner: IsoPlayer): ...


class ShoutChat(RangeBasedChat):

  @staticmethod
  def getDefaultSettings() -> ChatSettings: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, id: int, tab: ChatTab): ...
  @overload
  def __init__(self, bb: ByteBuffer, tab: ChatTab, owner: IsoPlayer): ...


class WhisperChat(ChatBase):

  def getCompanionName(self) -> str: ...

  def getMessagePrefix(self, msg: ChatMessage) -> str: ...

  def init(self) -> None: ...

  @staticmethod
  def getDefaultSettings() -> ChatSettings: ...

  @overload
  def __init__(self, bb: ByteBuffer, tab: ChatTab, owner: IsoPlayer): ...
  @overload
  def __init__(self, id: int, tab: ChatTab, firstMember: str, secondMember: str): ...

  class ChatStatus(Enum):

    Creating: WhisperChat.ChatStatus

    # None: WhisperChat.ChatStatus

    PlayerNotFound: WhisperChat.ChatStatus

    @staticmethod
    def valueOf(arg0: str) -> WhisperChat.ChatStatus: ...

    @staticmethod
    def values() -> list[WhisperChat.ChatStatus]: ...

