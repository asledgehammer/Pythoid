from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from gnu.trove.map.hash import THashMap, TLongObjectHashMap
from jassimp import AiPostProcessSteps
from java.lang import Enum, Class
from java.util import ArrayList, EnumSet
from zombie.fileSystem import FileSystem, IFile, FileTask, IFileTaskCallback

class Asset:

  def addDependency(self, dependent_asset: Asset) -> None: ...

  def getAssetManager(self) -> AssetManager: ...

  def getObserverCb(self) -> Asset.ObserverCallback: ...

  def getPath(self) -> AssetPath: ...

  def getRefCount(self) -> int: ...

  def getState(self) -> Asset.State: ...

  def getType(self) -> AssetType: ...

  def isEmpty(self) -> bool: ...

  def isFailure(self) -> bool: ...

  def isReady(self) -> bool: ...

  def onCreated(self, state: Asset.State) -> None: ...

  def removeDependency(self, dependent_asset: Asset) -> None: ...

  def setAssetParams(self, params: AssetManager.AssetParams) -> None: ...

  class PRIVATE:

    @overload
    def onStateChanged(self, arg0: Asset.State, arg1: Asset.State, arg2: Asset) -> None: ...

    @overload
    def onStateChanged(self, arg0: Asset.State, arg1: Asset.State, arg2: Asset) -> None: ...

  class State(Enum):

    EMPTY: Asset.State

    FAILURE: Asset.State

    READY: Asset.State

    @staticmethod
    def valueOf(arg0: str) -> Asset.State: ...

    @staticmethod
    def values() -> list[Asset.State]: ...

  class ObserverCallback(ArrayList):

    def invoke(self, oldState: Asset.State, newState: Asset.State, asset: Asset) -> None: ...

    def __init__(self): ...


class AssetManager:

  def create(self, type: AssetType, owner: AssetManagers) -> None: ...

  def destroy(self) -> None: ...

  def enableUnload(self, enable: bool) -> None: ...

  def getAssetTable(self) -> AssetManager.AssetTable: ...

  def getOwner(self) -> AssetManagers: ...

  @overload
  def load(self, asset: Asset) -> None: ...

  @overload
  def load(self, path: AssetPath) -> Asset: ...

  @overload
  def load(self, path: AssetPath, params: AssetManager.AssetParams) -> Asset: ...

  @overload
  def onStateChanged(self, old_state: Asset.State, new_state: Asset.State, asset: Asset) -> None: ...

  @overload
  def onStateChanged(self, old_state: Asset.State, new_state: Asset.State, asset: Asset) -> None: ...

  @overload
  def reload(self, asset: Asset) -> None: ...

  @overload
  def reload(self, path: AssetPath) -> None: ...

  @overload
  def reload(self, asset: Asset, params: AssetManager.AssetParams) -> None: ...

  def removeUnreferenced(self) -> None: ...

  @overload
  def unload(self, asset: Asset) -> None: ...

  @overload
  def unload(self, path: AssetPath) -> None: ...

  def __init__(self): ...

  class AssetTable(THashMap):

    def __init__(self): ...

  class AssetParams:

    def __init__(self): ...


class AssetManagers:

  def add(self, type: AssetType, rm: AssetManager) -> None: ...

  def get(self, type: AssetType) -> AssetManager: ...

  def getFileSystem(self) -> FileSystem: ...

  def __init__(self, fileSystem: FileSystem): ...

  class AssetManagerTable(TLongObjectHashMap):

    def __init__(self): ...


class AssetPath:

  def getHash(self) -> int: ...

  def getPath(self) -> str: ...

  def isValid(self) -> bool: ...

  def toString(self) -> str: ...

  def __init__(self, path: str): ...


class AssetStateObserver:

  def onStateChanged(self, oldState: Asset.State, newState: Asset.State, asset: Asset) -> None: ...


class AssetTask:

  def cancel(self) -> None: ...

  def execute(self) -> None: ...

  def __init__(self, asset: Asset):
    self.m_asset: Asset


class AssetTask_LoadFromFileAsync(AssetTask):

  def cancel(self) -> None: ...

  def execute(self) -> None: ...

  @overload
  def onFileTaskFinished(self, arg0: IFile, arg1: object) -> None: ...

  @overload
  def onFileTaskFinished(self, arg0: IFile, arg1: object) -> None: ...


class AssetTask_RunFileTask(AssetTask):

  def cancel(self) -> None: ...

  def execute(self) -> None: ...

  def __init__(self, fileTask: FileTask, asset: Asset): ...


class AssetType:

  INVALID_ASSET_TYPE: AssetType

  def __init__(self, typeName: str):
    self.type: int


class FileTask_Exists(FileTask):

  def call(self) -> object: ...

  def done(self) -> None: ...

  def __init__(self, fileName: str, cb: IFileTaskCallback, fileSystem: FileSystem): ...


class FileTask_LoadAiScene(FileTask):

  def call(self) -> object: ...

  def done(self) -> None: ...

  def getErrorMessage(self) -> str: ...

  def __init__(self, filename: str, pps: EnumSet[AiPostProcessSteps], cb: IFileTaskCallback, fileSystem: FileSystem): ...


class FileTask_LoadImageData(FileTask):

  def call(self) -> object: ...

  def done(self) -> None: ...

  def getErrorMessage(self) -> str: ...

  def __init__(self, imageName: str, fs: FileSystem, cb: IFileTaskCallback): ...


class FileTask_LoadPackImage(FileTask):

  def call(self) -> object: ...

  def done(self) -> None: ...

  def __init__(self, packName: str, imageName: str, fs: FileSystem, cb: IFileTaskCallback): ...


class FileTask_ParseXML(FileTask):

  def call(self) -> object: ...

  def done(self) -> None: ...

  def getErrorMessage(self) -> str: ...

  def __init__(self, klass: Class[Any], filename: str, cb: IFileTaskCallback, fileSystem: FileSystem): ...

