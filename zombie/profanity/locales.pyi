from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation

class Locale:

  def addFilterContains(self, str: str) -> None: ...

  def addFilterRawWord(self, word: str) -> None: ...

  def addFilterWord(self, word: str) -> None: ...

  def addWhiteListWord(self, word: str) -> None: ...

  @overload
  def filterWord(self, str: str) -> str: ...

  @overload
  def filterWord(self, str: str, includeContaining: bool) -> str: ...

  def getFilterWordsCount(self) -> int: ...

  def getID(self) -> str: ...

  def getPhoneticRules(self) -> str: ...

  def isWhiteListedWord(self, str: str) -> bool: ...

  def removeFilterContains(self, str: str) -> None: ...

  def removeFilterWord(self, word: str) -> None: ...

  def removeFilterWordRaw(self, word: str) -> None: ...

  def removeWhiteListWord(self, word: str) -> None: ...

  def returnMatchSetForWord(self, str: str) -> str: ...

  def returnPhonizedWord(self, str: str) -> str: ...

  def validateWord(self, str: str, includeContaining: bool) -> str: ...


class LocaleChinese(Locale):

  def __init__(self, tag: str): ...


class LocaleEnglish(Locale):

  def __init__(self, tag: str): ...


class LocaleGerman(LocaleEnglish):

  def __init__(self, tag: str): ...

