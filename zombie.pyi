from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from fmod.fmod import FMODSoundEmitter, Audio
from java.io import File, DataInputStream, DataOutputStream, FileFilter
from java.lang import Long, Integer, Runnable, Thread, Throwable, Enum, Class
from java.net import URI
from java.nio import ByteBuffer
from java.util import ArrayList, ArrayDeque, HashMap, List, BitSet
from java.util.concurrent import ConcurrentHashMap
from java.util.function import Predicate
from org.joml import Vector2f
from se.krka.kahlua.vm import KahluaTable
from zombie.asset import AssetManagers
from zombie.audio import BaseSoundEmitter, GameSound, GameSoundClip, FMODParameterList
from zombie.characters import IsoPlayer, IsoGameCharacter, IsoZombie
from zombie.characters.BodyDamage import BodyPartType
from zombie.config import EnumConfigOption, ConfigOption, IntegerConfigOption, DoubleConfigOption, BooleanConfigOption, StringConfigOption
from zombie.core.input import Input
from zombie.core.logger import ZLogger
from zombie.core.math import Vector4
from zombie.core.opengl import Shader
from zombie.core.raknet import UdpConnection
from zombie.core.skinnedmodel.animation.debug import GenericNameValueRecordingFrame
from zombie.core.skinnedmodel.visual import HumanVisual, ItemVisuals
from zombie.core.textures import Texture
from zombie.fileSystem import FileSystem
from zombie.gameStates import GameStateMachine, ChooseGameInfo
from zombie.input import JoypadManager
from zombie.iso import RoomDef, BuildingDef, IsoGridSquare, IsoMovingObject, Vector2, IsoChunk, Vector3, IsoObject, IsoMetaGrid, IsoCell
from zombie.iso.SpriteDetails import IsoFlagType, IsoObjectType
from zombie.iso.areas import IsoRoom
from zombie.iso.objects import IsoDeadBody
from zombie.modding import ActiveMods
from zombie.sandbox import CustomSandboxOption
from zombie.util import PooledObject, PZCalendar
from zombie.util.lambda import Invokers

T1 = TypeVar('T1', default=Any)
T2 = TypeVar('T2', default=Any)
T3 = TypeVar('T3', default=Any)
T4 = TypeVar('T4', default=Any)
T = TypeVar('T', default=Any)

class AmbientSoundManager(BaseAmbientStreamManager):

  def addAmbient(self, name: str, x: int, y: int, radius: int, volume: float) -> None: ...

  def addAmbientEmitter(self, x: float, y: float, z: int, name: str) -> None: ...

  def addBlend(self, name: str, vol: float, bIndoors: bool, bRain: bool, bNight: bool, bDay: bool) -> None: ...

  def addDaytimeAmbientEmitter(self, x: float, y: float, z: int, name: str) -> None: ...

  def doAlarm(self, room: RoomDef) -> None: ...

  def doGunEvent(self) -> None: ...

  def doOneShotAmbients(self) -> None: ...

  def init(self) -> None: ...

  def stop(self) -> None: ...

  def update(self) -> None: ...

  def __init__(self):
    self.ambient: ArrayList[AmbientSoundManager.Ambient]
    self.initialized: bool

  class Ambient:

    def finished(self) -> bool: ...

    def update(self) -> None: ...

    def __init__(self, arg0: AmbientSoundManager, arg1: str, arg2: float, arg3: float, arg4: float, arg5: float):
      self.duration: int
      self.name: str
      self.radius: float
      self.volume: float
      self.worldsounddelay: int
      self.x: float
      self.y: float


class AmbientStreamManager(BaseAmbientStreamManager):

  instance: BaseAmbientStreamManager

  MaxAmbientCount: int

  MaxRange: float

  OneInAmbienceChance: int

  def addAmbient(self, name: str, x: int, y: int, radius: int, volume: float) -> None: ...

  def addAmbientEmitter(self, x: float, y: float, z: int, name: str) -> None: ...

  def addBlend(self, name: str, vol: float, bIndoors: bool, bRain: bool, bNight: bool, bDay: bool) -> None: ...

  def addDaytimeAmbientEmitter(self, x: float, y: float, z: int, name: str) -> None: ...

  def addRandomAmbient(self) -> None: ...

  def doAlarm(self, room: RoomDef) -> None: ...

  def doGunEvent(self) -> None: ...

  def doOneShotAmbients(self) -> None: ...

  def getNearestBuilding(self, px: float, py: float, closestXY: Vector2f) -> BuildingDef: ...

  def init(self) -> None: ...

  def stop(self) -> None: ...

  def update(self) -> None: ...

  @staticmethod
  def getInstance() -> BaseAmbientStreamManager: ...

  def __init__(self):
    self.allambient: ArrayList[AmbientStreamManager.AmbientLoop]
    self.ambient: ArrayList[AmbientStreamManager.Ambient]
    self.dayambient: ArrayList[AmbientStreamManager.AmbientLoop]
    self.freeemitters: ArrayDeque[AmbientStreamManager.WorldSoundEmitter]
    self.indoorambient: ArrayList[AmbientStreamManager.AmbientLoop]
    self.initialized: bool
    self.nightambient: ArrayList[AmbientStreamManager.AmbientLoop]
    self.outdoorambient: ArrayList[AmbientStreamManager.AmbientLoop]
    self.rainambient: ArrayList[AmbientStreamManager.AmbientLoop]
    self.windambient: ArrayList[AmbientStreamManager.AmbientLoop]
    self.worldemitters: ArrayList[AmbientStreamManager.WorldSoundEmitter]

  class WorldSoundEmitter:

    def __init__(self):
      self.channel: int
      self.dawn: float
      self.daytime: str
      self.dusk: float
      self.fmodemitter: FMODSoundEmitter
      self.x: float
      self.y: float
      self.z: float

  class AmbientLoop:

    volChangeAmount: float

    def stop(self) -> None: ...

    def update(self) -> None: ...

    def __init__(self, startVol: float, name: str, volDel: float):
      self.channel: int
      self.currvol: float
      self.emitter: FMODSoundEmitter
      self.name: str
      self.targvol: float
      self.volumedelta: float

  class Ambient:

    def finished(self) -> bool: ...

    def repeatWorldSounds(self, radius: int, volume: int) -> None: ...

    def update(self) -> None: ...

    @overload
    def __init__(self, name: str, x: float, y: float, radius: float, volume: float):
      self.name: str

      self.trackmouse: bool

      self.x: float

      self.y: float

    @overload
    def __init__(self, name: str, x: float, y: float, radius: float, volume: float, remote: bool): ...


class BaseAmbientStreamManager:

  def addAmbient(self, name: str, x: int, y: int, radius: int, volume: float) -> None: ...

  def addAmbientEmitter(self, x: float, y: float, z: int, name: str) -> None: ...

  def addBlend(self, name: str, vol: float, bIndoors: bool, bRain: bool, bNight: bool, bDay: bool) -> None: ...

  def addDaytimeAmbientEmitter(self, x: float, y: float, z: int, name: str) -> None: ...

  def doAlarm(self, room: RoomDef) -> None: ...

  def doGunEvent(self) -> None: ...

  def doOneShotAmbients(self) -> None: ...

  def init(self) -> None: ...

  def stop(self) -> None: ...

  def update(self) -> None: ...

  def __init__(self): ...


class BaseSoundManager:

  def BlendThenStart(self, musicTrack: Audio, f: float, PrefMusic: str) -> Audio: ...

  @overload
  def BlendVolume(self, audio: Audio, targetVolume: float) -> None: ...

  @overload
  def BlendVolume(self, audio: Audio, targetVolume: float, blendSpeedAlpha: float) -> None: ...

  def CacheSound(self, file: str) -> None: ...

  def CheckDoMusic(self) -> None: ...

  def DoMusic(self, name: str, bLoop: bool) -> None: ...

  def FadeOutMusic(self, name: str, milli: int) -> None: ...

  def IsMusicPlaying(self) -> bool: ...

  @overload
  def PlayAsMusic(self, name: str, musicTrack: Audio, loop: bool, volume: float) -> None: ...

  @overload
  def PlayAsMusic(self, name: str, musicTrack: Audio, volume: float, bloop: bool) -> None: ...

  def PlayJukeboxSound(self, name: str, loop: bool, maxGain: float) -> Audio: ...

  def PlayMusic(self, n: str, name: str, loop: bool, maxGain: float) -> Audio: ...

  @overload
  def PlaySound(self, name: str, loop: bool, maxGain: float) -> Audio: ...

  @overload
  def PlaySound(self, name: str, loop: bool, pitchVar: float, maxGain: float) -> Audio: ...

  def PlaySoundEvenSilent(self, name: str, loop: bool, maxGain: float) -> Audio: ...

  @overload
  def PlaySoundWav(self, name: str, loop: bool, maxGain: float) -> Audio: ...

  @overload
  def PlaySoundWav(self, name: str, loop: bool, maxGain: float, pitchVar: float) -> Audio: ...

  @overload
  def PlaySoundWav(self, name: str, variations: int, loop: bool, maxGain: float) -> Audio: ...

  @overload
  def PlayWorldSound(self, name: str, source: IsoGridSquare, pitchVar: float, radius: float, maxGain: float, ignoreOutside: bool) -> Audio: ...

  @overload
  def PlayWorldSound(self, name: str, loop: bool, source: IsoGridSquare, pitchVar: float, radius: float, maxGain: float, ignoreOutside: bool) -> Audio: ...

  @overload
  def PlayWorldSound(self, name: str, source: IsoGridSquare, pitchVar: float, radius: float, maxGain: float, choices: int, ignoreOutside: bool) -> Audio: ...

  def PlayWorldSoundImpl(self, name: str, loop: bool, sx: int, sy: int, sz: int, pitchVar: float, radius: float, maxGain: float, ignoreOutside: bool) -> Audio: ...

  @overload
  def PlayWorldSoundWav(self, name: str, source: IsoGridSquare, pitchVar: float, radius: float, maxGain: float, ignoreOutside: bool) -> Audio: ...

  @overload
  def PlayWorldSoundWav(self, name: str, loop: bool, source: IsoGridSquare, pitchVar: float, radius: float, maxGain: float, ignoreOutside: bool) -> Audio: ...

  @overload
  def PlayWorldSoundWav(self, name: str, source: IsoGridSquare, pitchVar: float, radius: float, maxGain: float, choices: int, ignoreOutside: bool) -> None: ...

  def PlayWorldSoundWavImpl(self, name: str, loop: bool, source: IsoGridSquare, pitchVar: float, radius: float, maxGain: float, ignoreOutside: bool) -> Audio: ...

  def PrepareMusic(self, name: str) -> Audio: ...

  def Purge(self) -> None: ...

  def Start(self, musicTrack: Audio, f: float, PrefMusic: str) -> Audio: ...

  def StopMusic(self) -> None: ...

  def StopSound(self, SoundEffect: Audio) -> None: ...

  def Update(self) -> None: ...

  def debugScriptSounds(self) -> None: ...

  def getAmbientPieces(self) -> ArrayList[Audio]: ...

  def getAmbientVolume(self) -> float: ...

  def getCurrentMusicLibrary(self) -> str: ...

  def getCurrentMusicName(self) -> str: ...

  def getMusicPosition(self) -> float: ...

  def getMusicVolume(self) -> float: ...

  def getSoundVolume(self) -> float: ...

  def getVehicleEngineVolume(self) -> float: ...

  def isListenerInRange(self, x: float, y: float, range: float) -> bool: ...

  def isPlayingMusic(self) -> bool: ...

  @overload
  def isPlayingUISound(self, name: str) -> bool: ...

  @overload
  def isPlayingUISound(self, eventInstance: int) -> bool: ...

  def isRemastered(self) -> bool: ...

  def pauseSoundAndMusic(self) -> None: ...

  def playAmbient(self, name: str) -> None: ...

  def playMusic(self, name: str) -> None: ...

  def playMusicNonTriggered(self, name: str, gain: float) -> None: ...

  def playNightAmbient(self, choice: str) -> None: ...

  def playUISound(self, name: str) -> int: ...

  def registerEmitter(self, emitter: BaseSoundEmitter) -> None: ...

  def resumeSoundAndMusic(self) -> None: ...

  def setAmbientVolume(self, volume: float) -> None: ...

  def setMusicState(self, stateName: str) -> None: ...

  def setMusicVolume(self, volume: float) -> None: ...

  def setMusicWakeState(self, player: IsoPlayer, stateName: str) -> None: ...

  def setSoundVolume(self, volume: float) -> None: ...

  def setVehicleEngineVolume(self, volume: float) -> None: ...

  def stop(self) -> None: ...

  def stopMusic(self, name: str) -> None: ...

  def stopUISound(self, eventInstance: int) -> None: ...

  def unregisterEmitter(self, emitter: BaseSoundEmitter) -> None: ...

  def update1(self) -> None: ...

  def update2(self) -> None: ...

  def update3(self) -> None: ...

  def update3D(self) -> None: ...

  def update4(self) -> None: ...

  def __init__(self):
    self.allowmusic: bool


class BitMatrix:

  @staticmethod
  def Is(test: int, x: int, y: int, z: int) -> bool: ...

  @staticmethod
  def Set(set: int, x: int, y: int, z: int, bTrue: bool) -> int: ...

  def __init__(self): ...


class ChunkMapFilenames:

  instance: ChunkMapFilenames

  def clear(self) -> None: ...

  def getDir(self, gameSaveWorld: str) -> File: ...

  def getFilename(self, wx: int, wy: int) -> File: ...

  def getHeader(self, wX: int, wY: int) -> str: ...

  def __init__(self):
    self.headermap: ConcurrentHashMap[Long, object]
    self.map: ConcurrentHashMap[Long, object]


class CollisionManager:

  instance: CollisionManager

  def AddContact(self, a: IsoMovingObject, b: IsoMovingObject) -> None: ...

  def IntervalDistance(self, minA: float, maxA: float, minB: float, maxB: float) -> float: ...

  def PolygonCollision(self, velocity: Vector2) -> CollisionManager.PolygonCollisionResult: ...

  def ResolveContacts(self) -> None: ...

  def initUpdate(self) -> None: ...

  def __init__(self):
    self.contactmap: ArrayList[CollisionManager.Contact]

  class PolygonCollisionResult:

    def __init__(self, arg0: CollisionManager):
      self.intersect: bool
      self.minimumtranslationvector: Vector2
      self.willintersect: bool

  class Contact:

    def __init__(self, arg0: CollisionManager, arg1: IsoMovingObject, arg2: IsoMovingObject):
      self.a: IsoMovingObject
      self.b: IsoMovingObject

  class s_performance: ...

  class l_ResolveContacts: ...


class CollisionMatrixPrototypes:

  instance: CollisionMatrixPrototypes

  def Add(self, bitMatrix: int) -> list[list[list[bool]]]: ...

  def ToBitMatrix(self, bools: list[list[list[bool]]]) -> int: ...

  def __init__(self):
    self.map: HashMap[Integer, boolean]


class DebugFileWatcher:

  instance: DebugFileWatcher

  def add(self, watcher: PredicatedFileWatcher) -> None: ...

  def addDirectory(self, path: str) -> None: ...

  def addDirectoryRecurse(self, path: str) -> None: ...

  def init(self) -> None: ...

  def remove(self, watcher: PredicatedFileWatcher) -> None: ...

  def update(self) -> None: ...


class DummyAmbientStreamManager(BaseAmbientStreamManager):

  def addAmbient(self, name: str, x: int, y: int, radius: int, volume: float) -> None: ...

  def addAmbientEmitter(self, x: float, y: float, z: int, name: str) -> None: ...

  def addBlend(self, name: str, vol: float, bIndoors: bool, bRain: bool, bNight: bool, bDay: bool) -> None: ...

  def addDaytimeAmbientEmitter(self, x: float, y: float, z: int, name: str) -> None: ...

  def doAlarm(self, room: RoomDef) -> None: ...

  def doGunEvent(self) -> None: ...

  def doOneShotAmbients(self) -> None: ...

  def init(self) -> None: ...

  def stop(self) -> None: ...

  def update(self) -> None: ...

  def __init__(self): ...


class DummySoundManager(BaseSoundManager):

  def BlendThenStart(self, musicTrack: Audio, f: float, PrefMusic: str) -> Audio: ...

  @overload
  def BlendVolume(self, audio: Audio, targetVolume: float) -> None: ...

  @overload
  def BlendVolume(self, audio: Audio, targetVolume: float, blendSpeedAlpha: float) -> None: ...

  def CacheSound(self, file: str) -> None: ...

  def CheckDoMusic(self) -> None: ...

  def DoMusic(self, name: str, bLoop: bool) -> None: ...

  def FadeOutMusic(self, name: str, milli: int) -> None: ...

  def IsMusicPlaying(self) -> bool: ...

  @overload
  def PlayAsMusic(self, name: str, musicTrack: Audio, loop: bool, volume: float) -> None: ...

  @overload
  def PlayAsMusic(self, name: str, musicTrack: Audio, volume: float, bloop: bool) -> None: ...

  def PlayJukeboxSound(self, name: str, loop: bool, maxGain: float) -> Audio: ...

  def PlayMusic(self, n: str, name: str, loop: bool, maxGain: float) -> Audio: ...

  @overload
  def PlaySound(self, name: str, loop: bool, maxGain: float) -> Audio: ...

  @overload
  def PlaySound(self, name: str, loop: bool, pitchVar: float, maxGain: float) -> Audio: ...

  def PlaySoundEvenSilent(self, name: str, loop: bool, maxGain: float) -> Audio: ...

  @overload
  def PlaySoundWav(self, name: str, loop: bool, maxGain: float) -> Audio: ...

  @overload
  def PlaySoundWav(self, name: str, loop: bool, maxGain: float, pitchVar: float) -> Audio: ...

  @overload
  def PlaySoundWav(self, name: str, variations: int, loop: bool, maxGain: float) -> Audio: ...

  @overload
  def PlayWorldSound(self, name: str, source: IsoGridSquare, pitchVar: float, radius: float, maxGain: float, ignoreOutside: bool) -> Audio: ...

  @overload
  def PlayWorldSound(self, name: str, loop: bool, source: IsoGridSquare, pitchVar: float, radius: float, maxGain: float, ignoreOutside: bool) -> Audio: ...

  @overload
  def PlayWorldSound(self, name: str, source: IsoGridSquare, pitchVar: float, radius: float, maxGain: float, choices: int, ignoreOutside: bool) -> Audio: ...

  def PlayWorldSoundImpl(self, name: str, loop: bool, sx: int, sy: int, sz: int, pitchVar: float, radius: float, maxGain: float, ignoreOutside: bool) -> Audio: ...

  @overload
  def PlayWorldSoundWav(self, name: str, source: IsoGridSquare, pitchVar: float, radius: float, maxGain: float, ignoreOutside: bool) -> Audio: ...

  @overload
  def PlayWorldSoundWav(self, name: str, loop: bool, source: IsoGridSquare, pitchVar: float, radius: float, maxGain: float, ignoreOutside: bool) -> Audio: ...

  @overload
  def PlayWorldSoundWav(self, name: str, source: IsoGridSquare, pitchVar: float, radius: float, maxGain: float, choices: int, ignoreOutside: bool) -> None: ...

  def PlayWorldSoundWavImpl(self, name: str, loop: bool, source: IsoGridSquare, pitchVar: float, radius: float, maxGain: float, ignoreOutside: bool) -> Audio: ...

  def PrepareMusic(self, name: str) -> Audio: ...

  def Purge(self) -> None: ...

  def Start(self, musicTrack: Audio, f: float, PrefMusic: str) -> Audio: ...

  def StopMusic(self) -> None: ...

  def StopSound(self, SoundEffect: Audio) -> None: ...

  def Update(self) -> None: ...

  def debugScriptSounds(self) -> None: ...

  def getAmbientPieces(self) -> ArrayList[Audio]: ...

  def getAmbientVolume(self) -> float: ...

  def getCurrentMusicLibrary(self) -> str: ...

  def getCurrentMusicName(self) -> str: ...

  def getMusicPosition(self) -> float: ...

  def getMusicVolume(self) -> float: ...

  def getSoundVolume(self) -> float: ...

  def getVehicleEngineVolume(self) -> float: ...

  def isListenerInRange(self, x: float, y: float, range: float) -> bool: ...

  def isPlayingMusic(self) -> bool: ...

  @overload
  def isPlayingUISound(self, name: str) -> bool: ...

  @overload
  def isPlayingUISound(self, eventInstance: int) -> bool: ...

  def isRemastered(self) -> bool: ...

  def pauseSoundAndMusic(self) -> None: ...

  def playAmbient(self, name: str) -> None: ...

  def playMusic(self, name: str) -> None: ...

  def playMusicNonTriggered(self, name: str, gain: float) -> None: ...

  def playNightAmbient(self, choice: str) -> None: ...

  def playUISound(self, name: str) -> int: ...

  def registerEmitter(self, emitter: BaseSoundEmitter) -> None: ...

  def resumeSoundAndMusic(self) -> None: ...

  def setAmbientVolume(self, volume: float) -> None: ...

  def setMusicState(self, stateName: str) -> None: ...

  def setMusicVolume(self, volume: float) -> None: ...

  def setMusicWakeState(self, player: IsoPlayer, stateName: str) -> None: ...

  def setSoundVolume(self, volume: float) -> None: ...

  def setVehicleEngineVolume(self, volume: float) -> None: ...

  def stop(self) -> None: ...

  def stopMusic(self, name: str) -> None: ...

  def stopUISound(self, eventInstance: int) -> None: ...

  def unregisterEmitter(self, emitter: BaseSoundEmitter) -> None: ...

  def update1(self) -> None: ...

  def update2(self) -> None: ...

  def update3(self) -> None: ...

  def update3D(self) -> None: ...

  def update4(self) -> None: ...

  def __init__(self): ...


class FPSTracking:

  def frameStep(self) -> int: ...

  def init(self) -> None: ...

  def updateFPS(self, timeDiff: int) -> None: ...

  def __init__(self): ...


class FileGuidPair:

  def __init__(self):
    self.guid: str
    self.path: str


class FileGuidTable:

  def clear(self) -> None: ...

  def getFilePathFromGuid(self, guid: str) -> str: ...

  def getGuidFromFilePath(self, path: str) -> str: ...

  def loaded(self) -> None: ...

  def mergeFrom(self, other: FileGuidTable) -> None: ...

  def setModID(self, modID: str) -> None: ...

  def __init__(self):
    self.files: ArrayList[FileGuidPair]


class FliesSound:

  instance: FliesSound

  def Reset(self) -> None: ...

  def chunkLoaded(self, chunk: IsoChunk) -> None: ...

  def corpseAdded(self, x: int, y: int, z: int) -> None: ...

  def corpseRemoved(self, x: int, y: int, z: int) -> None: ...

  def getCorpseCount(self, chr: IsoGameCharacter) -> int: ...

  def render(self) -> None: ...

  def update(self) -> None: ...

  def __init__(self): ...

  class PlayerData: ...

  class FadeEmitter: ...

  class ChunkData: ...

  class ChunkLevelData: ...


class GameProfileRecording(GenericNameValueRecordingFrame):

  def close(self) -> None: ...

  def closeAndDiscard(self) -> None: ...

  def getValueAt(self, i: int) -> str: ...

  def logTimeSpan(self, area: GameProfiler.ProfileArea) -> None: ...

  def reset(self) -> None: ...

  def setNumFramesPerSegment(self, count: int) -> None: ...

  def setStartTime(self, startTime: int) -> None: ...

  def __init__(self, fileKey: str): ...

  class Row:

    def reset(self) -> None: ...

    def __init__(self): ...

  class Span(PooledObject):

    def onReleased(self) -> None: ...

    @staticmethod
    def alloc() -> GameProfileRecording.Span: ...

    def __init__(self): ...


class GameProfiler:

  def end(self, arg0: GameProfiler.ProfileArea) -> None: ...

  def endFrame(self) -> None: ...

  @overload
  def invokeAndMeasure(self, areaKey: str, invoke: Runnable) -> None: ...

  @overload
  def invokeAndMeasure(self, arg0: str, arg1: object, arg2: Invokers.Params1.ICallback) -> None: ...

  @overload
  def invokeAndMeasure(self, arg0: str, arg1: object, arg2: object, arg3: Invokers.Params2.ICallback) -> None: ...

  @overload
  def invokeAndMeasure(self, arg0: str, arg1: object, arg2: object, arg3: object, arg4: Invokers.Params3.ICallback) -> None: ...

  def invokeAndMeasureFrame(self, invokerKey: str, invoke: Runnable) -> None: ...

  def render(self, x: int, y: int) -> None: ...

  @overload
  def start(self, areaKey: str) -> GameProfiler.ProfileArea: ...

  @overload
  def start(self, area: GameProfiler.ProfileArea) -> GameProfiler.ProfileArea: ...

  @overload
  def start(self, area: GameProfiler.ProfileArea, timeNs: int) -> GameProfiler.ProfileArea: ...

  def startFrame(self, frameInvokerKey: str) -> None: ...

  @staticmethod
  def getInstance() -> GameProfiler: ...

  @staticmethod
  def getTimeNs() -> int: ...

  @staticmethod
  def init() -> None: ...

  @staticmethod
  def isRunning() -> bool: ...

  class RecordingFrame:

    def clear(self) -> None: ...

    def transferFrom(self, srcFrame: GameProfiler.RecordingFrame) -> None: ...

    def __init__(self): ...

  class ProfileArea(PooledObject):

    def clear(self) -> None: ...

    def onReleased(self) -> None: ...

    @staticmethod
    def alloc() -> GameProfiler.ProfileArea: ...

    def __init__(self):
      self.b: float
      self.children: List[GameProfiler.ProfileArea]
      self.depth: int
      self.endtime: int
      self.g: float
      self.key: str
      self.r: float
      self.starttime: int
      self.total: int


class GameSounds:

  soundIsPaused: bool

  VERSION: int

  @staticmethod
  def ReloadFile(fileName: str) -> None: ...

  @staticmethod
  def Reset() -> None: ...

  @staticmethod
  def ScriptsLoaded() -> None: ...

  @staticmethod
  def addSound(sound: GameSound) -> None: ...

  @staticmethod
  def fix3DListenerPosition(inMenu: bool) -> None: ...

  @staticmethod
  def getCategories() -> ArrayList[str]: ...

  @staticmethod
  def getOrCreateSound(name: str) -> GameSound: ...

  @staticmethod
  def getSound(name: str) -> GameSound: ...

  @staticmethod
  def getSoundsInCategory(category: str) -> ArrayList[GameSound]: ...

  @staticmethod
  def isKnownSound(name: str) -> bool: ...

  @staticmethod
  def isPreviewPlaying() -> bool: ...

  @staticmethod
  def loadINI() -> None: ...

  @staticmethod
  def previewSound(name: str) -> None: ...

  @staticmethod
  def saveINI() -> None: ...

  @staticmethod
  def stopPreview() -> None: ...

  def __init__(self): ...

  class IPreviewSound:

    def isPlaying(self) -> bool: ...

    def play(self, arg0: GameSoundClip) -> bool: ...

    def stop(self) -> None: ...

    def update(self) -> bool: ...

  class BankPreviewSound:

    @overload
    def isPlaying(self) -> bool: ...

    @overload
    def isPlaying(self) -> bool: ...

    @overload
    def play(self, arg0: GameSoundClip) -> bool: ...

    @overload
    def play(self, arg0: GameSoundClip) -> bool: ...

    @overload
    def stop(self) -> None: ...

    @overload
    def stop(self) -> None: ...

    @overload
    def update(self) -> bool: ...

    @overload
    def update(self) -> bool: ...

  class FilePreviewSound:

    @overload
    def isPlaying(self) -> bool: ...

    @overload
    def isPlaying(self) -> bool: ...

    @overload
    def play(self, arg0: GameSoundClip) -> bool: ...

    @overload
    def play(self, arg0: GameSoundClip) -> bool: ...

    @overload
    def stop(self) -> None: ...

    @overload
    def stop(self) -> None: ...

    @overload
    def update(self) -> bool: ...

    @overload
    def update(self) -> bool: ...


class GameTime:

  instance: GameTime

  MULTIPLIER: float

  def Lerp(self, start: float, __end__: float, delta: float) -> float: ...

  def RemoveZombiesIndiscriminate(self, i: int) -> None: ...

  def TimeLerp(self, startVal: float, endVal: float, startTime: float, endTime: float) -> float: ...

  def daysInMonth(self, year: int, month: int) -> int: ...

  def getAmbient(self) -> float: ...

  def getAmbientMax(self) -> float: ...

  def getAmbientMin(self) -> float: ...

  def getCalender(self) -> PZCalendar: ...

  def getDawn(self) -> int: ...

  def getDay(self) -> int: ...

  def getDayPlusOne(self) -> int: ...

  def getDaysSurvived(self) -> int: ...

  def getDeathString(self, playerObj: IsoPlayer) -> str: ...

  def getDeltaMinutesPerDay(self) -> float: ...

  def getDusk(self) -> int: ...

  def getGameModeText(self) -> str: ...

  def getGameWorldSecondsSinceLastUpdate(self) -> float: ...

  def getHelicopterDay(self) -> int: ...

  def getHelicopterDay1(self) -> int: ...

  def getHelicopterEndHour(self) -> int: ...

  def getHelicopterStartHour(self) -> int: ...

  def getHour(self) -> int: ...

  def getHoursSurvived(self) -> float: ...

  def getInvMultiplier(self) -> float: ...

  def getLastTimeOfDay(self) -> float: ...

  def getMaxZombieCount(self) -> float: ...

  def getMaxZombieCountStart(self) -> float: ...

  def getMinZombieCount(self) -> float: ...

  def getMinZombieCountStart(self) -> float: ...

  def getMinutes(self) -> int: ...

  def getMinutesPerDay(self) -> float: ...

  def getMinutesStamp(self) -> int: ...

  def getModData(self) -> KahluaTable: ...

  def getMonth(self) -> int: ...

  def getMultipliedSecondsSinceLastUpdate(self) -> float: ...

  def getMultiplier(self) -> float: ...

  def getNight(self) -> float: ...

  def getNightMax(self) -> float: ...

  def getNightMin(self) -> float: ...

  def getNightTint(self) -> float: ...

  def getNightsSurvived(self) -> int: ...

  def getRealworldSecondsSinceLastUpdate(self) -> float: ...

  def getServerMultiplier(self) -> float: ...

  def getStartDay(self) -> int: ...

  def getStartMonth(self) -> int: ...

  def getStartTimeOfDay(self) -> float: ...

  def getStartYear(self) -> int: ...

  def getThunderStorm(self) -> bool: ...

  def getTimeDelta(self) -> float: ...

  def getTimeOfDay(self) -> float: ...

  def getTimeSurvived(self, playerObj: IsoPlayer) -> str: ...

  def getTrueMultiplier(self) -> float: ...

  def getUnmoddedMultiplier(self) -> float: ...

  def getViewDist(self) -> float: ...

  def getViewDistMax(self) -> float: ...

  def getViewDistMin(self) -> float: ...

  def getWorldAgeHours(self) -> float: ...

  def getYear(self) -> int: ...

  def getZombieKilledText(self, playerObj: IsoPlayer) -> str: ...

  def init(self) -> None: ...

  def isRainingToday(self) -> bool: ...

  def isThunderDay(self) -> bool: ...

  @overload
  def load(self) -> None: ...

  @overload
  def load(self, input: DataInputStream) -> None: ...

  @overload
  def load(self, input: ByteBuffer) -> None: ...

  @overload
  def save(self) -> None: ...

  @overload
  def save(self, output: DataOutputStream) -> None: ...

  @overload
  def save(self, output: ByteBuffer) -> None: ...

  def saveToPacket(self, bb: ByteBuffer) -> None: ...

  def setAmbient(self, Ambient: float) -> None: ...

  def setAmbientMax(self, AmbientMax: float) -> None: ...

  def setAmbientMin(self, AmbientMin: float) -> None: ...

  def setCalender(self, Calender: PZCalendar) -> None: ...

  def setDawn(self, dawn: int) -> None: ...

  def setDay(self, Day: int) -> None: ...

  def setDusk(self, dusk: int) -> None: ...

  def setHelicopterDay(self, day: int) -> None: ...

  def setHelicopterEndHour(self, hour: int) -> None: ...

  def setHelicopterStartHour(self, hour: int) -> None: ...

  def setHoursSurvived(self, HoursSurvived: float) -> None: ...

  def setLastTimeOfDay(self, LastTimeOfDay: float) -> None: ...

  def setMaxZombieCount(self, MaxZombieCount: float) -> None: ...

  def setMaxZombieCountStart(self, MaxZombieCountStart: float) -> None: ...

  def setMinZombieCount(self, MinZombieCount: float) -> None: ...

  def setMinZombieCountStart(self, MinZombieCountStart: float) -> None: ...

  def setMinutesPerDay(self, MinutesPerDay: float) -> None: ...

  def setMonth(self, Month: int) -> None: ...

  def setMoon(self, moon: float) -> None: ...

  def setMultiplier(self, Multiplier: float) -> None: ...

  def setNight(self, NightTint: float) -> None: ...

  def setNightMax(self, max: float) -> None: ...

  def setNightMin(self, min: float) -> None: ...

  def setNightTint(self, NightTint: float) -> None: ...

  def setNightsSurvived(self, NightsSurvived: int) -> None: ...

  def setStartDay(self, StartDay: int) -> None: ...

  def setStartMonth(self, StartMonth: int) -> None: ...

  def setStartTimeOfDay(self, StartTimeOfDay: float) -> None: ...

  def setStartYear(self, StartYear: int) -> None: ...

  def setTargetZombies(self, TargetZombies: int) -> None: ...

  def setThunderDay(self, thunderDay: bool) -> None: ...

  def setTimeOfDay(self, TimeOfDay: float) -> None: ...

  def setViewDistMax(self, ViewDistMax: float) -> None: ...

  def setViewDistMin(self, ViewDistMin: float) -> None: ...

  def setYear(self, Year: int) -> None: ...

  def update(self, bSleeping: bool) -> None: ...

  def updateCalendar(self, year: int, month: int, dayOfMonth: int, hourOfDay: int, minute: int) -> None: ...

  @staticmethod
  def getAnimSpeedFix() -> float: ...

  @staticmethod
  def getInstance() -> GameTime: ...

  @staticmethod
  def getServerTime() -> int: ...

  @staticmethod
  def getServerTimeMills() -> int: ...

  @staticmethod
  def getServerTimeShiftIsSet() -> bool: ...

  @staticmethod
  def isGamePaused() -> bool: ...

  @staticmethod
  def receiveTimeSync(bb: ByteBuffer, connection: UdpConnection) -> None: ...

  @staticmethod
  def setInstance(aInstance: GameTime) -> None: ...

  @staticmethod
  def setServerTimeShift(tshift: int) -> None: ...

  @staticmethod
  def syncServerTime(timeClientSend: int, timeServer: int, timeClientReceive: int) -> None: ...

  def __init__(self):
    self.calender: PZCalendar
    self.fpsmultiplier: float
    self.lastlasttimeofday: float
    self.lightsourceupdate: float
    self.moon: float
    self.multiplierbias: float
    self.nightssurvived: int
    self.perobjectmultiplier: float
    self.serverlasttimeofday: float
    self.servernewdays: int
    self.servertimeofday: float
    self.timeofday: float

  class AnimTimer:

    def finished(self) -> bool: ...

    def init(self, ticks: int) -> None: ...

    def ratio(self) -> float: ...

    def update(self) -> None: ...

    def __init__(self):
      self.duration: float
      self.elapsed: float
      self.finished: bool
      self.ticks: int


class GameWindow:

  ActivatedJoyPad: JoypadManager.Joypad

  assetManagers: AssetManagers

  averageFPS: float

  bGameThreadExited: bool

  bLoadedAsClient: bool

  bLuaDebuggerKeyDown: bool

  bServerDisconnected: bool

  closeRequested: bool

  DEBUG_SAVE: bool

  DrawReloadingLua: bool

  fileSystem: FileSystem

  GameInput: Input

  GameThread: Thread

  kickReason: str

  lastP: str

  OkToSaveOnExit: bool

  states: GameStateMachine

  texturePacks: ArrayList[GameWindow.TexturePack]

  texturePackTextures: FileSystem.TexturePackTextures

  version: str

  @staticmethod
  def DoLoadingText(text: str) -> None: ...

  @staticmethod
  def InitDisplay() -> None: ...

  @staticmethod
  def InitGameThread() -> None: ...

  @staticmethod
  @overload
  def LoadTexturePack(pack: str, flags: int) -> None: ...

  @staticmethod
  @overload
  def LoadTexturePack(pack: str, flags: int, modID: str) -> None: ...

  @staticmethod
  def LoadTexturePackDDS(pack: str) -> None: ...

  @staticmethod
  @overload
  def ReadString(input: DataInputStream) -> str: ...

  @staticmethod
  @overload
  def ReadString(input: ByteBuffer) -> str: ...

  @staticmethod
  def ReadStringUTF(input: ByteBuffer) -> str: ...

  @staticmethod
  @overload
  def WriteString(output: DataOutputStream, str: str) -> None: ...

  @staticmethod
  @overload
  def WriteString(output: ByteBuffer, str: str) -> None: ...

  @staticmethod
  def WriteStringUTF(output: ByteBuffer, str: str) -> None: ...

  @staticmethod
  def doRenderEvent(b: bool) -> None: ...

  @staticmethod
  def getCoopServerHome() -> str: ...

  @staticmethod
  def readInt(__in__: DataInputStream) -> int: ...

  @staticmethod
  def readLong(__in__: DataInputStream) -> int: ...

  @staticmethod
  def render() -> None: ...

  @staticmethod
  def save(bDoChars: bool) -> None: ...

  @staticmethod
  def setTexturePackLookup() -> None: ...

  @staticmethod
  def uncaughtException(thread: Thread, e: Throwable) -> None: ...

  def __init__(self): ...

  class s_performance: ...

  class TexturePack: ...

  class StringUTF: ...

  class OSValidator:

    @staticmethod
    def isMac() -> bool: ...

    @staticmethod
    def isSolaris() -> bool: ...

    @staticmethod
    def isUnix() -> bool: ...

    @staticmethod
    def isWindows() -> bool: ...

    def __init__(self): ...


class ISoundSystem:

  @overload
  def cacheSound(self, format: ISoundSystem.SoundFormat, path: str, rootName: str) -> None: ...

  @overload
  def cacheSound(self, format: ISoundSystem.SoundFormat, path: str, rootName: str, nVariants: int) -> None: ...

  def clearSoundCache(self) -> None: ...

  def countInstances(self, rootName: str) -> int: ...

  def fadeOutAll(self, fSeconds: float) -> None: ...

  def init(self) -> None: ...

  @overload
  def playSound(self, format: ISoundSystem.SoundFormat, path: str, rootName: str, bStreaming: bool, bLooped: bool, fVolume: float) -> ISoundSystem.ISoundInstance: ...

  @overload
  def playSound(self, format: ISoundSystem.SoundFormat, path: str, rootName: str, bStreaming: bool, bLooped: bool, fVolume: float, fPanning: float) -> ISoundSystem.ISoundInstance: ...

  @overload
  def playSound(self, format: ISoundSystem.SoundFormat, path: str, rootName: str, nVariants: int, bStreaming: bool, bLooped: bool, fVolume: float) -> ISoundSystem.ISoundInstance: ...

  @overload
  def playSound(self, format: ISoundSystem.SoundFormat, path: str, rootName: str, bStreaming: bool, bLooped: bool, fVolume: float, fPanning: float, fPitch: float) -> ISoundSystem.ISoundInstance: ...

  @overload
  def playSound(self, format: ISoundSystem.SoundFormat, path: str, rootName: str, nVariants: int, bStreaming: bool, bLooped: bool, fVolume: float, fPanning: float) -> ISoundSystem.ISoundInstance: ...

  @overload
  def playSound(self, format: ISoundSystem.SoundFormat, path: str, rootName: str, nVariants: int, bStreaming: bool, bLooped: bool, fVolume: float, fPanning: float, fPitch: float) -> ISoundSystem.ISoundInstance: ...

  def purge(self) -> None: ...

  def setInstanceLimit(self, rootName: str, limit: int, onFail: ISoundSystem.InstanceFailAction) -> None: ...

  def update(self) -> None: ...

  class InstanceFailAction(Enum):

    FailToPlay: ISoundSystem.InstanceFailAction

    StopOldest: ISoundSystem.InstanceFailAction

    StopRandom: ISoundSystem.InstanceFailAction

    @staticmethod
    def valueOf(arg0: str) -> ISoundSystem.InstanceFailAction: ...

    @staticmethod
    def values() -> list[ISoundSystem.InstanceFailAction]: ...

  class ISoundInstance:

    def blendVolume(self, fVolume: float, fSeconds: float, bAutoStopWhenSilent: bool) -> None: ...

    def countInstances(self) -> int: ...

    def disposed(self) -> bool: ...

    def getPanning(self) -> float: ...

    def getPitch(self) -> float: ...

    def getVolume(self) -> float: ...

    def isLooped(self) -> bool: ...

    def isPlaying(self) -> bool: ...

    def isStreamed(self) -> bool: ...

    def pause(self) -> None: ...

    def play(self) -> None: ...

    def setLooped(self, bLoop: bool) -> None: ...

    def setPanning(self, fVolume: float) -> None: ...

    def setPitch(self, fVolume: float) -> None: ...

    def setVolume(self, fVolume: float) -> None: ...

    def stop(self) -> None: ...

  class SoundFormat(Enum):

    Ogg: ISoundSystem.SoundFormat

    Wav: ISoundSystem.SoundFormat

    @staticmethod
    def valueOf(arg0: str) -> ISoundSystem.SoundFormat: ...

    @staticmethod
    def values() -> list[ISoundSystem.SoundFormat]: ...


class IndieGL:

  nCount: int

  @staticmethod
  def EndShader() -> None: ...

  @staticmethod
  def ShaderUpdate1f(shaderID: int, uniform: int, uniformValue: float) -> None: ...

  @staticmethod
  def ShaderUpdate1i(shaderID: int, uniform: int, uniformValue: int) -> None: ...

  @staticmethod
  def ShaderUpdate2f(shaderID: int, uniform: int, value1: float, value2: float) -> None: ...

  @staticmethod
  def ShaderUpdate3f(shaderID: int, uniform: int, value1: float, value2: float, value3: float) -> None: ...

  @staticmethod
  def ShaderUpdate4f(shaderID: int, uniform: int, value1: float, value2: float, value3: float, value4: float) -> None: ...

  @staticmethod
  @overload
  def StartShader(ID: int) -> None: ...

  @staticmethod
  @overload
  def StartShader(shader: Shader) -> None: ...

  @staticmethod
  @overload
  def StartShader(ID: int, playerIndex: int) -> None: ...

  @staticmethod
  @overload
  def StartShader(shader: Shader, playerIndex: int) -> None: ...

  @staticmethod
  @overload
  def bindShader(shader: Shader, invoke: Runnable) -> None: ...

  @staticmethod
  @overload
  def bindShader(arg0: Shader, arg1: object, arg2: Invokers.Params1.ICallback) -> None: ...

  @staticmethod
  @overload
  def bindShader(arg0: Shader, arg1: object, arg2: object, arg3: Invokers.Params2.ICallback) -> None: ...

  @staticmethod
  @overload
  def bindShader(arg0: Shader, arg1: object, arg2: object, arg3: object, arg4: Invokers.Params3.ICallback) -> None: ...

  @staticmethod
  @overload
  def bindShader(arg0: Shader, arg1: object, arg2: object, arg3: object, arg4: object, arg5: Invokers.Params4.ICallback) -> None: ...

  @staticmethod
  def disableAlphaTest() -> None: ...

  @staticmethod
  def disableStencilTest() -> None: ...

  @staticmethod
  def enableAlphaTest() -> None: ...

  @staticmethod
  def enableStencilTest() -> None: ...

  @staticmethod
  def glAlphaFunc(a: int, b: float) -> None: ...

  @staticmethod
  def glAlphaFuncA(a: int, b: float) -> None: ...

  @staticmethod
  def glBind(offscreenTexture: Texture) -> None: ...

  @staticmethod
  def glBlendFunc(a: int, b: int) -> None: ...

  @staticmethod
  def glBlendFuncA(a: int, b: int) -> None: ...

  @staticmethod
  def glBlendFuncSeparate(a: int, b: int, c: int, d: int) -> None: ...

  @staticmethod
  def glClear(a: int) -> None: ...

  @staticmethod
  def glClearA(a: int) -> None: ...

  @staticmethod
  def glColorMask(bln: bool, bln1: bool, bln2: bool, bln3: bool) -> None: ...

  @staticmethod
  def glColorMaskA(bln: bool, bln1: bool, bln2: bool, bln3: bool) -> None: ...

  @staticmethod
  def glDisable(a: int) -> None: ...

  @staticmethod
  def glDisableA(a: int) -> None: ...

  @staticmethod
  def glDoEndFrame() -> None: ...

  @staticmethod
  @overload
  def glDoStartFrame(w: int, h: int, zoom: float, player: int) -> None: ...

  @staticmethod
  @overload
  def glDoStartFrame(w: int, h: int, zoom: float, player: int, isTextFrame: bool) -> None: ...

  @staticmethod
  def glEnable(a: int) -> None: ...

  @staticmethod
  def glEnableA(a: int) -> None: ...

  @staticmethod
  def glLoadIdentity() -> None: ...

  @staticmethod
  def glStencilFunc(a: int, b: int, c: int) -> None: ...

  @staticmethod
  def glStencilFuncA(a: int, b: int, c: int) -> None: ...

  @staticmethod
  def glStencilMask(a: int) -> None: ...

  @staticmethod
  def glStencilMaskA(a: int) -> None: ...

  @staticmethod
  def glStencilOp(a: int, b: int, c: int) -> None: ...

  @staticmethod
  def glStencilOpA(a: int, b: int, c: int) -> None: ...

  @staticmethod
  def glTexParameteri(a: int, b: int, c: int) -> None: ...

  @staticmethod
  def glTexParameteriActual(glTexture2d: int, glTextureMagFilter: int, glLinear: int) -> None: ...

  @staticmethod
  def isMaxZoomLevel() -> bool: ...

  @staticmethod
  def isMinZoomLevel() -> bool: ...

  @staticmethod
  def popShader(shader: Shader) -> None: ...

  @staticmethod
  def pushShader(shader: Shader) -> None: ...

  @staticmethod
  def shaderSetSamplerUnit(shader: Shader, loc: str, textureUnit: int) -> None: ...

  @staticmethod
  @overload
  def shaderSetValue(shader: Shader, loc: str, val: float) -> None: ...

  @staticmethod
  @overload
  def shaderSetValue(shader: Shader, loc: str, val: int) -> None: ...

  @staticmethod
  @overload
  def shaderSetValue(shader: Shader, loc: str, val: Vector4) -> None: ...

  @staticmethod
  @overload
  def shaderSetValue(shader: Shader, loc: str, val: Vector2) -> None: ...

  @staticmethod
  @overload
  def shaderSetValue(shader: Shader, loc: str, val: Vector3) -> None: ...

  @staticmethod
  def shaderSetVector2(shader: Shader, loc: str, val_x: float, val_y: float) -> None: ...

  @staticmethod
  def shaderSetVector3(shader: Shader, loc: str, val_x: float, val_y: float, val_z: float) -> None: ...

  @staticmethod
  def shaderSetVector4(shader: Shader, loc: str, val_x: float, val_y: float, val_z: float, val_w: float) -> None: ...

  def __init__(self): ...


class IntArrayCache:

  instance: IntArrayCache

  def Init(self) -> None: ...

  def get(self, size: int) -> list[Integer]: ...

  def put(self, array: list[Integer]) -> None: ...

  def __init__(self): ...


class LoadGridsquarePerformanceWorkaround:

  @staticmethod
  def LoadGridsquare(sq: IsoGridSquare) -> None: ...

  @staticmethod
  def init(wx: int, wy: int) -> None: ...

  def __init__(self): ...

  class ItemPicker:

    instance: LoadGridsquarePerformanceWorkaround.ItemPicker

    def begin(self, arg0: IsoGridSquare) -> bool: ...

    def checkObject(self, arg0: IsoObject) -> None: ...

    def end(self, arg0: IsoGridSquare) -> None: ...

    def init(self) -> None: ...


class LootRespawn:

  @staticmethod
  def Reset() -> None: ...

  @staticmethod
  def chunkLoaded(chunk: IsoChunk) -> None: ...

  @staticmethod
  def update() -> None: ...

  def __init__(self): ...


class MapCollisionData:

  BIT_ROOM: int

  BIT_SOLID: int

  BIT_WALLN: int

  BIT_WALLW: int

  BIT_WATER: int

  instance: MapCollisionData

  def addChunkToWorld(self, chunk: IsoChunk) -> None: ...

  def hasDataForThread(self) -> bool: ...

  def init(self, metaGrid: IsoMetaGrid) -> None: ...

  def notifyThread(self) -> None: ...

  def removeChunkFromWorld(self, chunk: IsoChunk) -> None: ...

  def save(self) -> None: ...

  def squareChanged(self, sq: IsoGridSquare) -> None: ...

  def start(self) -> None: ...

  def startGame(self) -> None: ...

  def stop(self) -> None: ...

  def updateGameState(self) -> None: ...

  def updateMain(self) -> None: ...

  def __init__(self):
    self.renderlock: object

  class Sync: ...

  class MCDThread(Thread):

    def run(self) -> None: ...

  class PathTask:

    def execute(self) -> None: ...

    def init(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: MapCollisionData.IPathResult) -> None: ...

    def release(self) -> None: ...

  class IPathResult:

    def finished(self, status: int, x: int, y: int) -> None: ...


class MapGroups:

  def checkMapConflicts(self) -> bool: ...

  @overload
  def createGroups(self) -> None: ...

  @overload
  def createGroups(self, activeMods: ActiveMods, includeVanilla: bool) -> None: ...

  @overload
  def createGroups(self, activeMods: ActiveMods, includeVanilla: bool, includeChallenges: bool) -> None: ...

  def getAllMapsInOrder(self) -> ArrayList[str]: ...

  def getMapConflicts(self, mapName: str) -> ArrayList[str]: ...

  def getMapDirectoriesInGroup(self, groupIndex: int) -> ArrayList[str]: ...

  def getNumberOfGroups(self) -> int: ...

  def setWorld(self, groupIndex: int) -> None: ...

  @staticmethod
  def addMissingVanillaDirectories(mapName: str) -> str: ...

  def __init__(self): ...

  class MapDirectory:

    def getLotHeaders(self, arg0: ArrayList[str]) -> None: ...

    @overload
    def __init__(self, arg0: MapGroups, arg1: str, arg2: str): ...
    @overload
    def __init__(self, arg0: MapGroups, arg1: str, arg2: str, arg3: ArrayList): ...

  class MapGroup: ...


class MovingObjectUpdateScheduler:

  instance: MovingObjectUpdateScheduler

  def getBucket(self) -> ArrayList[IsoMovingObject]: ...

  def getFrameCounter(self) -> int: ...

  def isEnabled(self) -> bool: ...

  def postupdate(self) -> None: ...

  def removeObject(self, object: IsoMovingObject) -> None: ...

  def setEnabled(self, enabled: bool) -> None: ...

  def startFrame(self) -> None: ...

  def update(self) -> None: ...

  def __init__(self): ...


class MovingObjectUpdateSchedulerUpdateBucket:

  def add(self, o: IsoMovingObject) -> None: ...

  def clear(self) -> None: ...

  def getBucket(self, frameCounter: int) -> ArrayList[IsoMovingObject]: ...

  def init(self, frameMod: int) -> None: ...

  def postupdate(self, frameCounter: int) -> None: ...

  def remove(self, obj: IsoMovingObject) -> None: ...

  def removeObject(self, object: IsoMovingObject) -> None: ...

  def update(self, frameCounter: int) -> None: ...

  def __init__(self, mod: int):
    self.framemod: int


class PersistentOutfits:

  FEMALE_BIT: int

  instance: PersistentOutfits

  INVALID_ID: int

  NO_HAT_BIT: int

  def dressInOutfit(self, chr: IsoGameCharacter, outfitID: int) -> None: ...

  def getOutfit(self, ID: int) -> int: ...

  def getOutfitNames(self) -> ArrayList[str]: ...

  def init(self) -> None: ...

  @overload
  def isHatFallen(self, outfitID: int) -> bool: ...

  @overload
  def isHatFallen(self, chr: IsoGameCharacter) -> bool: ...

  @overload
  def load(self) -> None: ...

  @overload
  def load(self, input: ByteBuffer) -> None: ...

  def pickOutfit(self, outfitName: str, female: bool) -> int: ...

  def pickOutfitFemale(self, outfitName: str) -> int: ...

  def pickOutfitMale(self, outfitName: str) -> int: ...

  def pickRandomFemale(self) -> int: ...

  def pickRandomMale(self) -> int: ...

  def registerOutfitter(self, id: str, useSeed: bool, outfitter: PersistentOutfits.IOutfitter) -> None: ...

  def removeFallenHat(self, outfitID: int, chr: IsoGameCharacter) -> bool: ...

  @overload
  def save(self) -> None: ...

  @overload
  def save(self, output: ByteBuffer) -> None: ...

  def setFallenHat(self, chr: IsoGameCharacter, fallen: bool) -> None: ...

  def __init__(self): ...

  class DataList(ArrayList): ...

  class IOutfitter:

    def accept(self, outfitID: int, outfitName: str, chr: IsoGameCharacter) -> None: ...

  class Data: ...


class PredicatedFileWatcher:

  def getPath(self) -> str: ...

  def onModified(self, entryKey: str) -> None: ...

  @overload
  def __init__(self, path: str, callback: PredicatedFileWatcher.IPredicatedFileWatcherCallback): ...
  @overload
  def __init__(self, predicate: Predicate[str], callback: PredicatedFileWatcher.IPredicatedFileWatcherCallback): ...
  @overload
  def __init__(self, path: str, clazz: Class[T], callback: PredicatedFileWatcher.IPredicatedDataPacketFileWatcherCallback): ...
  @overload
  def __init__(self, path: str, predicate: Predicate[str], callback: PredicatedFileWatcher.IPredicatedFileWatcherCallback): ...

  class IPredicatedFileWatcherCallback:

    def call(self, entryKey: str) -> None: ...

  class GenericPredicatedFileWatcherCallback[T]:

    @overload
    def call(self, xmlFile: str) -> None: ...

    @overload
    def call(self, xmlFile: str) -> None: ...

    def __init__(self, clazz: Class[T], callback: PredicatedFileWatcher.IPredicatedDataPacketFileWatcherCallback): ...

  class IPredicatedDataPacketFileWatcherCallback[T]:

    def call(self, arg0: object) -> None: ...


class ReanimatedPlayers:

  instance: ReanimatedPlayers

  def addReanimatedPlayersToChunk(self, chunk: IsoChunk) -> None: ...

  def loadReanimatedPlayers(self) -> None: ...

  def removeReanimatedPlayerFromWorld(self, zombie: IsoZombie) -> None: ...

  def saveReanimatedPlayers(self) -> None: ...

  def __init__(self): ...


class SandboxOptions:

  instance: SandboxOptions

  def applySettings(self) -> None: ...

  def copyValuesFrom(self, other: SandboxOptions) -> None: ...

  def getAllClothesUnlocked(self) -> bool: ...

  def getCompostHours(self) -> int: ...

  def getDayLengthMinutes(self) -> int: ...

  def getDayLengthMinutesDefault(self) -> int: ...

  def getElecShutModifier(self) -> int: ...

  def getEnduranceRegenMultiplier(self) -> float: ...

  def getErosionSpeed(self) -> int: ...

  def getFirstYear(self) -> int: ...

  def getFoodLootModifier(self) -> int: ...

  def getNumOptions(self) -> int: ...

  def getOptionByIndex(self, index: int) -> SandboxOptions.SandboxOption: ...

  def getOptionByName(self, name: str) -> SandboxOptions.SandboxOption: ...

  def getOtherLootModifier(self) -> int: ...

  def getRainModifier(self) -> int: ...

  def getStatsDecreaseMultiplier(self) -> float: ...

  def getTemperatureModifier(self) -> int: ...

  def getTimeSinceApo(self) -> int: ...

  def getWaterShutModifier(self) -> int: ...

  def getWeaponLootModifier(self) -> int: ...

  def handleOldServerZombiesFile(self) -> None: ...

  def handleOldZombiesFile1(self) -> None: ...

  def handleOldZombiesFile2(self) -> None: ...

  def initSandboxVars(self) -> None: ...

  @overload
  def load(self) -> None: ...

  @overload
  def load(self, input: ByteBuffer) -> None: ...

  def loadCurrentGameBinFile(self) -> None: ...

  def loadGameFile(self, presetName: str) -> bool: ...

  def loadPresetFile(self, presetName: str) -> bool: ...

  def loadServerLuaFile(self, serverName: str) -> bool: ...

  def loadServerTextFile(self, serverName: str) -> bool: ...

  def loadServerZombiesFile(self, serverName: str) -> bool: ...

  def newCopy(self) -> SandboxOptions: ...

  def newCustomOption(self, customSandboxOption: CustomSandboxOption) -> None: ...

  def randomElectricityShut(self, electricityShutoffModifier: int) -> int: ...

  def randomWaterShut(self, waterShutoffModifier: int) -> int: ...

  def resetToDefault(self) -> None: ...

  def save(self, output: ByteBuffer) -> None: ...

  def saveGameFile(self, presetName: str) -> bool: ...

  def savePresetFile(self, presetName: str) -> bool: ...

  def saveServerLuaFile(self, serverName: str) -> bool: ...

  def sendToServer(self) -> None: ...

  def set(self, name: str, o: object) -> None: ...

  def setDefaultsToCurrentValues(self) -> None: ...

  def toLua(self) -> None: ...

  def updateFromLua(self) -> None: ...

  @staticmethod
  def Reset() -> None: ...

  @staticmethod
  def getInstance() -> SandboxOptions: ...

  @staticmethod
  def isValidPresetName(name: str) -> bool: ...

  def __init__(self):
    self.alarm: SandboxOptions.EnumSandboxOption
    self.allclothesunlocked: SandboxOptions.BooleanSandboxOption
    self.allowexteriorgenerator: SandboxOptions.BooleanSandboxOption
    self.ammoloot: SandboxOptions.EnumSandboxOption
    self.annotatedmapchance: SandboxOptions.EnumSandboxOption
    self.attackblockmovements: SandboxOptions.BooleanSandboxOption
    self.bloodlevel: SandboxOptions.EnumSandboxOption
    self.bonefracture: SandboxOptions.BooleanSandboxOption
    self.cannedfoodloot: SandboxOptions.EnumSandboxOption
    self.caralarm: SandboxOptions.EnumSandboxOption
    self.cardamageonimpact: SandboxOptions.EnumSandboxOption
    self.cargasconsumption: SandboxOptions.DoubleSandboxOption
    self.cargeneralcondition: SandboxOptions.EnumSandboxOption
    self.carspawnrate: SandboxOptions.EnumSandboxOption
    self.chancehasgas: SandboxOptions.EnumSandboxOption
    self.characterfreepoints: SandboxOptions.IntegerSandboxOption
    self.clothingdegradation: SandboxOptions.EnumSandboxOption
    self.composttime: SandboxOptions.EnumSandboxOption
    self.constructionbonuspoints: SandboxOptions.EnumSandboxOption
    self.damagetoplayerfromhitbyacar: SandboxOptions.EnumSandboxOption
    self.daylength: SandboxOptions.EnumSandboxOption
    self.daysforrottenfoodremoval: SandboxOptions.IntegerSandboxOption
    self.decayingcorpsehealthimpact: SandboxOptions.EnumSandboxOption
    self.distribution: SandboxOptions.EnumSandboxOption
    self.elecshut: SandboxOptions.EnumSandboxOption
    self.elecshutmodifier: SandboxOptions.IntegerSandboxOption
    self.enablepoisoning: SandboxOptions.EnumSandboxOption
    self.enablesnowonground: SandboxOptions.BooleanSandboxOption
    self.enabletaintedwatertext: SandboxOptions.BooleanSandboxOption
    self.enablevehicles: SandboxOptions.BooleanSandboxOption
    self.endregen: SandboxOptions.EnumSandboxOption
    self.erosiondays: SandboxOptions.IntegerSandboxOption
    self.erosionspeed: SandboxOptions.EnumSandboxOption
    self.farming: SandboxOptions.EnumSandboxOption
    self.firespread: SandboxOptions.BooleanSandboxOption
    self.first_year: int
    self.foodloot: SandboxOptions.EnumSandboxOption
    self.foodrotspeed: SandboxOptions.EnumSandboxOption
    self.fridgefactor: SandboxOptions.EnumSandboxOption
    self.fuelstationgas: SandboxOptions.EnumSandboxOption
    self.generatorfuelconsumption: SandboxOptions.DoubleSandboxOption
    self.generatorspawning: SandboxOptions.EnumSandboxOption
    self.helicopter: SandboxOptions.EnumSandboxOption
    self.hoursforcorpseremoval: SandboxOptions.DoubleSandboxOption
    self.hoursforworlditemremoval: SandboxOptions.DoubleSandboxOption
    self.initialgas: SandboxOptions.EnumSandboxOption
    self.injuryseverity: SandboxOptions.EnumSandboxOption
    self.itemremovallistblacklisttoggle: SandboxOptions.BooleanSandboxOption
    self.lightbulblifespan: SandboxOptions.DoubleSandboxOption
    self.literatureloot: SandboxOptions.EnumSandboxOption
    self.lockedcar: SandboxOptions.EnumSandboxOption
    self.lockedhouses: SandboxOptions.EnumSandboxOption
    self.lootrespawn: SandboxOptions.EnumSandboxOption
    self.lore: SandboxOptions.ZombieLore
    self.maggotspawn: SandboxOptions.EnumSandboxOption
    self.map: SandboxOptions.Map
    self.maxfogintensity: SandboxOptions.EnumSandboxOption
    self.maxrainfxintensity: SandboxOptions.EnumSandboxOption
    self.mechanicsloot: SandboxOptions.EnumSandboxOption
    self.medicalloot: SandboxOptions.EnumSandboxOption
    self.metaevent: SandboxOptions.EnumSandboxOption
    self.multihitzombies: SandboxOptions.BooleanSandboxOption
    self.natureabundance: SandboxOptions.EnumSandboxOption
    self.nightdarkness: SandboxOptions.EnumSandboxOption
    self.nightlength: SandboxOptions.EnumSandboxOption
    self.nutrition: SandboxOptions.BooleanSandboxOption
    self.otherloot: SandboxOptions.EnumSandboxOption
    self.plantabundance: SandboxOptions.EnumSandboxOption
    self.plantresilience: SandboxOptions.EnumSandboxOption
    self.playerdamagefromcrash: SandboxOptions.BooleanSandboxOption
    self.rain: SandboxOptions.EnumSandboxOption
    self.rangedweaponloot: SandboxOptions.EnumSandboxOption
    self.rearvulnerability: SandboxOptions.EnumSandboxOption
    self.recentlysurvivorvehicles: SandboxOptions.EnumSandboxOption
    self.seenhourspreventlootrespawn: SandboxOptions.IntegerSandboxOption
    self.sirenshutoffhours: SandboxOptions.DoubleSandboxOption
    self.sleepingevent: SandboxOptions.EnumSandboxOption
    self.speed: int
    self.startday: SandboxOptions.EnumSandboxOption
    self.starterkit: SandboxOptions.BooleanSandboxOption
    self.startmonth: SandboxOptions.EnumSandboxOption
    self.starttime: SandboxOptions.EnumSandboxOption
    self.startyear: SandboxOptions.EnumSandboxOption
    self.statsdecrease: SandboxOptions.EnumSandboxOption
    self.survivalgearsloot: SandboxOptions.EnumSandboxOption
    self.survivorhousechance: SandboxOptions.EnumSandboxOption
    self.temperature: SandboxOptions.EnumSandboxOption
    self.timesinceapo: SandboxOptions.EnumSandboxOption
    self.trafficjam: SandboxOptions.BooleanSandboxOption
    self.vehicleeasyuse: SandboxOptions.BooleanSandboxOption
    self.vehiclestorychance: SandboxOptions.EnumSandboxOption
    self.watershut: SandboxOptions.EnumSandboxOption
    self.watershutmodifier: SandboxOptions.IntegerSandboxOption
    self.weaponloot: SandboxOptions.EnumSandboxOption
    self.worlditemremovallist: SandboxOptions.StringSandboxOption
    self.xpmultiplier: SandboxOptions.DoubleSandboxOption
    self.xpmultiplieraffectspassive: SandboxOptions.BooleanSandboxOption
    self.zombieattractionmultiplier: SandboxOptions.DoubleSandboxOption
    self.zombieconfig: SandboxOptions.ZombieConfig
    self.zombies: SandboxOptions.EnumSandboxOption
    self.zonestorychance: SandboxOptions.EnumSandboxOption

  class Map: ...

  class ZombieLore: ...

  class ZombieConfig: ...

  class EnumSandboxOption(EnumConfigOption):

    @overload
    def asConfigOption(self) -> ConfigOption: ...

    @overload
    def asConfigOption(self) -> ConfigOption: ...

    @overload
    def fromTable(self, table: KahluaTable) -> None: ...

    @overload
    def fromTable(self, table: KahluaTable) -> None: ...

    @overload
    def getPageName(self) -> str: ...

    @overload
    def getPageName(self) -> str: ...

    @overload
    def getShortName(self) -> str: ...

    @overload
    def getShortName(self) -> str: ...

    @overload
    def getTableName(self) -> str: ...

    @overload
    def getTableName(self) -> str: ...

    @overload
    def getTooltip(self) -> str: ...

    @overload
    def getTooltip(self) -> str: ...

    @overload
    def getTranslatedName(self) -> str: ...

    @overload
    def getTranslatedName(self) -> str: ...

    def getValueTranslation(self) -> str: ...

    def getValueTranslationByIndex(self, index: int) -> str: ...

    def getValueTranslationByIndexOrNull(self, index: int) -> str: ...

    @overload
    def isCustom(self) -> bool: ...

    @overload
    def isCustom(self) -> bool: ...

    @overload
    def setCustom(self) -> None: ...

    @overload
    def setCustom(self) -> None: ...

    @overload
    def setPageName(self, pageName: str) -> SandboxOptions.SandboxOption: ...

    @overload
    def setPageName(self, pageName: str) -> SandboxOptions.SandboxOption: ...

    @overload
    def setTranslation(self, translation: str) -> SandboxOptions.SandboxOption: ...

    @overload
    def setTranslation(self, translation: str) -> SandboxOptions.SandboxOption: ...

    def setValueTranslation(self, translation: str) -> SandboxOptions.EnumSandboxOption: ...

    @overload
    def toTable(self, table: KahluaTable) -> None: ...

    @overload
    def toTable(self, table: KahluaTable) -> None: ...

    def __init__(self, owner: SandboxOptions, name: str, numValues: int, defaultValue: int): ...

  class SandboxOption:

    def asConfigOption(self) -> ConfigOption: ...

    def fromTable(self, table: KahluaTable) -> None: ...

    def getPageName(self) -> str: ...

    def getShortName(self) -> str: ...

    def getTableName(self) -> str: ...

    def getTooltip(self) -> str: ...

    def getTranslatedName(self) -> str: ...

    def isCustom(self) -> bool: ...

    def setCustom(self) -> None: ...

    def setPageName(self, pageName: str) -> SandboxOptions.SandboxOption: ...

    def setTranslation(self, translation: str) -> SandboxOptions.SandboxOption: ...

    def toTable(self, table: KahluaTable) -> None: ...

  class IntegerSandboxOption(IntegerConfigOption):

    @overload
    def asConfigOption(self) -> ConfigOption: ...

    @overload
    def asConfigOption(self) -> ConfigOption: ...

    @overload
    def fromTable(self, table: KahluaTable) -> None: ...

    @overload
    def fromTable(self, table: KahluaTable) -> None: ...

    @overload
    def getPageName(self) -> str: ...

    @overload
    def getPageName(self) -> str: ...

    @overload
    def getShortName(self) -> str: ...

    @overload
    def getShortName(self) -> str: ...

    @overload
    def getTableName(self) -> str: ...

    @overload
    def getTableName(self) -> str: ...

    @overload
    def getTooltip(self) -> str: ...

    @overload
    def getTooltip(self) -> str: ...

    @overload
    def getTranslatedName(self) -> str: ...

    @overload
    def getTranslatedName(self) -> str: ...

    @overload
    def isCustom(self) -> bool: ...

    @overload
    def isCustom(self) -> bool: ...

    @overload
    def setCustom(self) -> None: ...

    @overload
    def setCustom(self) -> None: ...

    @overload
    def setPageName(self, pageName: str) -> SandboxOptions.SandboxOption: ...

    @overload
    def setPageName(self, pageName: str) -> SandboxOptions.SandboxOption: ...

    @overload
    def setTranslation(self, translation: str) -> SandboxOptions.SandboxOption: ...

    @overload
    def setTranslation(self, translation: str) -> SandboxOptions.SandboxOption: ...

    @overload
    def toTable(self, table: KahluaTable) -> None: ...

    @overload
    def toTable(self, table: KahluaTable) -> None: ...

    def __init__(self, owner: SandboxOptions, name: str, min: int, max: int, defaultValue: int): ...

  class DoubleSandboxOption(DoubleConfigOption):

    @overload
    def asConfigOption(self) -> ConfigOption: ...

    @overload
    def asConfigOption(self) -> ConfigOption: ...

    @overload
    def fromTable(self, table: KahluaTable) -> None: ...

    @overload
    def fromTable(self, table: KahluaTable) -> None: ...

    @overload
    def getPageName(self) -> str: ...

    @overload
    def getPageName(self) -> str: ...

    @overload
    def getShortName(self) -> str: ...

    @overload
    def getShortName(self) -> str: ...

    @overload
    def getTableName(self) -> str: ...

    @overload
    def getTableName(self) -> str: ...

    @overload
    def getTooltip(self) -> str: ...

    @overload
    def getTooltip(self) -> str: ...

    @overload
    def getTranslatedName(self) -> str: ...

    @overload
    def getTranslatedName(self) -> str: ...

    @overload
    def isCustom(self) -> bool: ...

    @overload
    def isCustom(self) -> bool: ...

    @overload
    def setCustom(self) -> None: ...

    @overload
    def setCustom(self) -> None: ...

    @overload
    def setPageName(self, pageName: str) -> SandboxOptions.SandboxOption: ...

    @overload
    def setPageName(self, pageName: str) -> SandboxOptions.SandboxOption: ...

    @overload
    def setTranslation(self, translation: str) -> SandboxOptions.SandboxOption: ...

    @overload
    def setTranslation(self, translation: str) -> SandboxOptions.SandboxOption: ...

    @overload
    def toTable(self, table: KahluaTable) -> None: ...

    @overload
    def toTable(self, table: KahluaTable) -> None: ...

    def __init__(self, owner: SandboxOptions, name: str, min: float, max: float, defaultValue: float): ...

  class BooleanSandboxOption(BooleanConfigOption):

    @overload
    def asConfigOption(self) -> ConfigOption: ...

    @overload
    def asConfigOption(self) -> ConfigOption: ...

    @overload
    def fromTable(self, table: KahluaTable) -> None: ...

    @overload
    def fromTable(self, table: KahluaTable) -> None: ...

    @overload
    def getPageName(self) -> str: ...

    @overload
    def getPageName(self) -> str: ...

    @overload
    def getShortName(self) -> str: ...

    @overload
    def getShortName(self) -> str: ...

    @overload
    def getTableName(self) -> str: ...

    @overload
    def getTableName(self) -> str: ...

    @overload
    def getTooltip(self) -> str: ...

    @overload
    def getTooltip(self) -> str: ...

    @overload
    def getTranslatedName(self) -> str: ...

    @overload
    def getTranslatedName(self) -> str: ...

    @overload
    def isCustom(self) -> bool: ...

    @overload
    def isCustom(self) -> bool: ...

    @overload
    def setCustom(self) -> None: ...

    @overload
    def setCustom(self) -> None: ...

    @overload
    def setPageName(self, pageName: str) -> SandboxOptions.SandboxOption: ...

    @overload
    def setPageName(self, pageName: str) -> SandboxOptions.SandboxOption: ...

    @overload
    def setTranslation(self, translation: str) -> SandboxOptions.SandboxOption: ...

    @overload
    def setTranslation(self, translation: str) -> SandboxOptions.SandboxOption: ...

    @overload
    def toTable(self, table: KahluaTable) -> None: ...

    @overload
    def toTable(self, table: KahluaTable) -> None: ...

    def __init__(self, owner: SandboxOptions, name: str, defaultValue: bool): ...

  class StringSandboxOption(StringConfigOption):

    @overload
    def asConfigOption(self) -> ConfigOption: ...

    @overload
    def asConfigOption(self) -> ConfigOption: ...

    @overload
    def fromTable(self, table: KahluaTable) -> None: ...

    @overload
    def fromTable(self, table: KahluaTable) -> None: ...

    @overload
    def getPageName(self) -> str: ...

    @overload
    def getPageName(self) -> str: ...

    @overload
    def getShortName(self) -> str: ...

    @overload
    def getShortName(self) -> str: ...

    @overload
    def getTableName(self) -> str: ...

    @overload
    def getTableName(self) -> str: ...

    @overload
    def getTooltip(self) -> str: ...

    @overload
    def getTooltip(self) -> str: ...

    @overload
    def getTranslatedName(self) -> str: ...

    @overload
    def getTranslatedName(self) -> str: ...

    @overload
    def isCustom(self) -> bool: ...

    @overload
    def isCustom(self) -> bool: ...

    @overload
    def setCustom(self) -> None: ...

    @overload
    def setCustom(self) -> None: ...

    @overload
    def setPageName(self, pageName: str) -> SandboxOptions.SandboxOption: ...

    @overload
    def setPageName(self, pageName: str) -> SandboxOptions.SandboxOption: ...

    @overload
    def setTranslation(self, translation: str) -> SandboxOptions.SandboxOption: ...

    @overload
    def setTranslation(self, translation: str) -> SandboxOptions.SandboxOption: ...

    @overload
    def toTable(self, table: KahluaTable) -> None: ...

    @overload
    def toTable(self, table: KahluaTable) -> None: ...

    def __init__(self, owner: SandboxOptions, name: str, defaultValue: str, maxLength: int): ...


class ShaderStackEntry(PooledObject):

  def getPlayerIndex(self) -> int: ...

  def getShader(self) -> Shader: ...

  @staticmethod
  def alloc(shader: Shader, playerIndex: int) -> ShaderStackEntry: ...

  def __init__(self): ...


class SharedDescriptors:

  @staticmethod
  def ApplyReanimatedPlayerOutfit(outfitID: int, outfitName: str, chr: IsoGameCharacter) -> None: ...

  @staticmethod
  def createPlayerZombieDescriptor(zombie: IsoZombie) -> None: ...

  @staticmethod
  def getPlayerZombieDescriptors() -> list[SharedDescriptors.Descriptor]: ...

  @staticmethod
  def initSharedDescriptors() -> None: ...

  @staticmethod
  def registerPlayerZombieDescriptor(desc: SharedDescriptors.Descriptor) -> None: ...

  @staticmethod
  def releasePlayerZombieDescriptor(zombie: IsoZombie) -> None: ...

  def __init__(self): ...

  class Descriptor:

    @overload
    def getHumanVisual(self) -> HumanVisual: ...

    @overload
    def getHumanVisual(self) -> HumanVisual: ...

    def getID(self) -> int: ...

    @overload
    def getItemVisuals(self, itemVisuals: ItemVisuals) -> None: ...

    @overload
    def getItemVisuals(self, itemVisuals: ItemVisuals) -> None: ...

    def getPersistentOutfitID(self) -> int: ...

    @overload
    def isFemale(self) -> bool: ...

    @overload
    def isFemale(self) -> bool: ...

    @overload
    def isSkeleton(self) -> bool: ...

    @overload
    def isSkeleton(self) -> bool: ...

    @overload
    def isZombie(self) -> bool: ...

    @overload
    def isZombie(self) -> bool: ...

    def load(self, input: ByteBuffer, WorldVersion: int) -> None: ...

    def save(self, output: ByteBuffer) -> None: ...

    def __init__(self):
      self.bfemale: bool
      self.bzombie: bool
      self.humanvisual: HumanVisual
      self.id: int
      self.itemvisuals: ItemVisuals
      self.outfitname: str
      self.persistentoutfitid: int

  class DescriptorList(ArrayList): ...


class SoundManager(BaseSoundManager):

  instance: BaseSoundManager

  def BlendThenStart(self, musicTrack: Audio, f: float, PrefMusic: str) -> Audio: ...

  @overload
  def BlendVolume(self, audio: Audio, targetVolume: float) -> None: ...

  @overload
  def BlendVolume(self, audio: Audio, targetVolume: float, blendSpeedAlpha: float) -> None: ...

  def CacheSound(self, file: str) -> None: ...

  def CheckDoMusic(self) -> None: ...

  def DoMusic(self, name: str, bLoop: bool) -> None: ...

  def FadeOutMusic(self, name: str, milli: int) -> None: ...

  def IsMusicPlaying(self) -> bool: ...

  @overload
  def PlayAsMusic(self, name: str, musicTrack: Audio, loop: bool, volume: float) -> None: ...

  @overload
  def PlayAsMusic(self, name: str, musicTrack: Audio, volume: float, bloop: bool) -> None: ...

  def PlayJukeboxSound(self, name: str, loop: bool, maxGain: float) -> Audio: ...

  def PlayMusic(self, n: str, name: str, loop: bool, maxGain: float) -> Audio: ...

  @overload
  def PlaySound(self, name: str, loop: bool, maxGain: float) -> Audio: ...

  @overload
  def PlaySound(self, name: str, loop: bool, maxGain: float, pitchVar: float) -> Audio: ...

  def PlaySoundEvenSilent(self, name: str, loop: bool, maxGain: float) -> Audio: ...

  @overload
  def PlaySoundWav(self, name: str, loop: bool, maxGain: float) -> Audio: ...

  @overload
  def PlaySoundWav(self, name: str, loop: bool, maxGain: float, pitchVar: float) -> Audio: ...

  @overload
  def PlaySoundWav(self, name: str, variations: int, loop: bool, maxGain: float) -> Audio: ...

  @overload
  def PlayWorldSound(self, name: str, source: IsoGridSquare, pitchVar: float, radius: float, maxGain: float, ignoreOutside: bool) -> Audio: ...

  @overload
  def PlayWorldSound(self, name: str, loop: bool, source: IsoGridSquare, pitchVar: float, radius: float, maxGain: float, ignoreOutside: bool) -> Audio: ...

  @overload
  def PlayWorldSound(self, name: str, source: IsoGridSquare, pitchVar: float, radius: float, maxGain: float, choices: int, ignoreOutside: bool) -> Audio: ...

  def PlayWorldSoundImpl(self, name: str, loop: bool, sx: int, sy: int, sz: int, pitchVar: float, radius: float, maxGain: float, ignoreOutside: bool) -> Audio: ...

  @overload
  def PlayWorldSoundWav(self, name: str, source: IsoGridSquare, pitchVar: float, radius: float, maxGain: float, ignoreOutside: bool) -> Audio: ...

  @overload
  def PlayWorldSoundWav(self, name: str, loop: bool, source: IsoGridSquare, pitchVar: float, radius: float, maxGain: float, ignoreOutside: bool) -> Audio: ...

  @overload
  def PlayWorldSoundWav(self, name: str, source: IsoGridSquare, pitchVar: float, radius: float, maxGain: float, choices: int, ignoreOutside: bool) -> None: ...

  def PlayWorldSoundWavImpl(self, name: str, loop: bool, source: IsoGridSquare, pitchVar: float, radius: float, maxGain: float, ignoreOutside: bool) -> Audio: ...

  def PrepareMusic(self, name: str) -> Audio: ...

  def Purge(self) -> None: ...

  def Start(self, musicTrack: Audio, f: float, PrefMusic: str) -> Audio: ...

  def StopMusic(self) -> None: ...

  def StopSound(self, SoundEffect: Audio) -> None: ...

  def Update(self) -> None: ...

  def debugScriptSounds(self) -> None: ...

  def getAmbientPieces(self) -> ArrayList[Audio]: ...

  def getAmbientVolume(self) -> float: ...

  def getCurrentMusicLibrary(self) -> str: ...

  def getCurrentMusicName(self) -> str: ...

  @overload
  def getFMODParameters(self) -> FMODParameterList: ...

  @overload
  def getFMODParameters(self) -> FMODParameterList: ...

  def getMusicPosition(self) -> float: ...

  def getMusicVolume(self) -> float: ...

  def getSoundVolume(self) -> float: ...

  def getVehicleEngineVolume(self) -> float: ...

  def isListenerInRange(self, x: float, y: float, range: float) -> bool: ...

  def isPlayingMusic(self) -> bool: ...

  @overload
  def isPlayingUISound(self, name: str) -> bool: ...

  @overload
  def isPlayingUISound(self, eventInstance: int) -> bool: ...

  def isRemastered(self) -> bool: ...

  def pauseSoundAndMusic(self) -> None: ...

  def playAmbient(self, name: str) -> None: ...

  def playMusic(self, name: str) -> None: ...

  def playMusicNonTriggered(self, name: str, gain: float) -> None: ...

  def playNightAmbient(self, choice: str) -> None: ...

  def playUISound(self, name: str) -> int: ...

  def registerEmitter(self, emitter: BaseSoundEmitter) -> None: ...

  def resumeSoundAndMusic(self) -> None: ...

  def setAmbientVolume(self, volume: float) -> None: ...

  def setMusicState(self, stateName: str) -> None: ...

  def setMusicVolume(self, volume: float) -> None: ...

  def setMusicWakeState(self, player: IsoPlayer, stateName: str) -> None: ...

  def setSoundVolume(self, volume: float) -> None: ...

  def setVehicleEngineVolume(self, volume: float) -> None: ...

  @overload
  def startEvent(self, eventInstance: int, clip: GameSoundClip, parameterSet: BitSet) -> None: ...

  @overload
  def startEvent(self, eventInstance: int, clip: GameSoundClip, parameterSet: BitSet) -> None: ...

  def stop(self) -> None: ...

  @overload
  def stopEvent(self, eventInstance: int, clip: GameSoundClip, parameterSet: BitSet) -> None: ...

  @overload
  def stopEvent(self, eventInstance: int, clip: GameSoundClip, parameterSet: BitSet) -> None: ...

  def stopMusic(self, name: str) -> None: ...

  def stopUISound(self, eventInstance: int) -> None: ...

  def unregisterEmitter(self, emitter: BaseSoundEmitter) -> None: ...

  def update1(self) -> None: ...

  def update2(self) -> None: ...

  def update3(self) -> None: ...

  def update3D(self) -> None: ...

  def update4(self) -> None: ...

  @overload
  def updateEvent(self, eventInstance: int, clip: GameSoundClip) -> None: ...

  @overload
  def updateEvent(self, eventInstance: int, clip: GameSoundClip) -> None: ...

  def __init__(self):
    self.ambientpieces: ArrayList[Audio]
    self.ambientvolume: float
    self.musicvolume: float
    self.soundvolume: float
    self.vehicleenginevolume: float

  class Music:

    def getPosition(self) -> float: ...

    def isPlaying(self) -> bool: ...

    def stop(self) -> None: ...

    def update(self) -> None: ...

  class AmbientSoundEffect:

    @overload
    def getName(self) -> str: ...

    @overload
    def getName(self) -> str: ...

    @overload
    def isPlaying(self) -> bool: ...

    @overload
    def isPlaying(self) -> bool: ...

    @overload
    def pause(self) -> None: ...

    @overload
    def pause(self) -> None: ...

    @overload
    def setName(self, choice: str) -> None: ...

    @overload
    def setName(self, choice: str) -> None: ...

    @overload
    def setVolume(self, volume: float) -> None: ...

    @overload
    def setVolume(self, volume: float) -> None: ...

    @overload
    def start(self) -> None: ...

    @overload
    def start(self) -> None: ...

    @overload
    def stop(self) -> None: ...

    @overload
    def stop(self) -> None: ...

    def update(self) -> None: ...

    def __init__(self, name: str):
      self.clip: GameSoundClip
      self.effectivevolume: float
      self.eventinstance: int
      self.gain: float
      self.name: str


class SvnVersion:

  date: str

  revision: str

  time: str

  def __init__(self): ...


class SystemDisabler:

  doCharacterStats: bool

  doEnableDetectOpenGLErrorsInTexture: bool

  doKickInDebug: bool

  doObjectStateSyncEnable: bool

  doOverridePOVCharacters: bool

  doPlayerCreation: bool

  doSurvivorCreation: bool

  doVehiclesEverywhere: bool

  doVehiclesWithoutTextures: bool

  doWorldSyncEnable: bool

  doZombieCreation: bool

  useNetworkCharacter: bool

  zombiesDontAttack: bool

  zombiesSwitchOwnershipEachUpdate: bool

  @staticmethod
  def Reset() -> None: ...

  @staticmethod
  def getAllowDebugConnections() -> bool: ...

  @staticmethod
  def getDoMainLoopDealWithNetData() -> bool: ...

  @staticmethod
  def getEnableAdvancedSoundOptions() -> bool: ...

  @staticmethod
  def getOverrideServerConnectDebugCheck() -> bool: ...

  @staticmethod
  def getdoHighFriction() -> bool: ...

  @staticmethod
  def getdoVehicleLowRider() -> bool: ...

  @staticmethod
  def setDoCharacterStats(bDo: bool) -> None: ...

  @staticmethod
  def setDoPlayerCreation(bDo: bool) -> None: ...

  @staticmethod
  def setDoSurvivorCreation(bDo: bool) -> None: ...

  @staticmethod
  def setDoZombieCreation(bDo: bool) -> None: ...

  @staticmethod
  def setEnableAdvancedSoundOptions(enable: bool) -> None: ...

  @staticmethod
  def setObjectStateSyncEnable(bDo: bool) -> None: ...

  @staticmethod
  def setOverridePOVCharacters(bDo: bool) -> None: ...

  @staticmethod
  def setVehiclesEverywhere(bDo: bool) -> None: ...

  @staticmethod
  def setWorldSyncEnable(bDo: bool) -> None: ...

  def __init__(self): ...


class TimeDebugger:

  def add(self, td: TimeDebugger) -> None: ...

  def clear(self) -> None: ...

  def getExecTime(self) -> int: ...

  def print(self) -> None: ...

  @overload
  def record(self) -> None: ...

  @overload
  def record(self, note: str) -> None: ...

  def recordTO(self, note: str, minTime: int) -> None: ...

  def start(self) -> None: ...

  def __init__(self, _name: str): ...


class VirtualZombieManager:

  instance: VirtualZombieManager

  def AddBloodToMap(self, nSize: int, chk: IsoChunk) -> None: ...

  def RemoveZombie(self, obj: IsoZombie) -> None: ...

  def Reset(self) -> None: ...

  def addDeadZombiesToMap(self, nSize: int, room: RoomDef) -> None: ...

  @overload
  def addIndoorZombiesToChunk(self, chunk: IsoChunk, room: IsoRoom) -> None: ...

  @overload
  def addIndoorZombiesToChunk(self, chunk: IsoChunk, room: IsoRoom, zombieCountForRoom: int, zombies: ArrayList[IsoZombie]) -> None: ...

  def addToReusable(self, z: IsoZombie) -> None: ...

  @overload
  def addZombiesToMap(self, nSize: int, room: RoomDef) -> ArrayList[IsoZombie]: ...

  @overload
  def addZombiesToMap(self, nSize: int, room: RoomDef, bAllowDead: bool) -> ArrayList[IsoZombie]: ...

  def canSpawnAt(self, x: int, y: int, z: int) -> bool: ...

  def createEatingZombies(self, target: IsoDeadBody, nb: int) -> None: ...

  def createHordeFromTo(self, spawnX: float, spawnY: float, targetX: float, targetY: float, count: int) -> None: ...

  def createRealZombie(self, x: float, y: float, z: float) -> IsoZombie: ...

  @overload
  def createRealZombieAlways(self, ZombieDir: int, bDead: bool) -> IsoZombie: ...

  @overload
  def createRealZombieAlways(self, ZombieDir: int, bDead: bool, outfitID: int) -> IsoZombie: ...

  @overload
  def createRealZombieAlways(self, descriptorID: int, ZombieDir: int, bDead: bool) -> IsoZombie: ...

  def createRealZombieNow(self, x: float, y: float, z: float) -> IsoZombie: ...

  def init(self) -> None: ...

  def isReused(self, z: IsoZombie) -> bool: ...

  def removeZombieFromWorld(self, z: IsoZombie) -> bool: ...

  def reusableZombiesSize(self) -> int: ...

  def roomSpotted(self, room: IsoRoom) -> None: ...

  def tryAddIndoorZombies(self, room: RoomDef, bAllowDead: bool) -> None: ...

  def update(self) -> None: ...

  def __init__(self):
    self.choices: ArrayList[IsoGridSquare]
    self.maxrealzombies: int


class WorldSoundManager:

  instance: WorldSoundManager

  def KillCell(self) -> None: ...

  @overload
  def addSound(self, source: object, x: int, y: int, z: int, radius: int, volume: int) -> WorldSoundManager.WorldSound: ...

  @overload
  def addSound(self, source: object, x: int, y: int, z: int, radius: int, volume: int, stressHumans: bool) -> WorldSoundManager.WorldSound: ...

  @overload
  def addSound(self, source: object, x: int, y: int, z: int, radius: int, volume: int, stressHumans: bool, zombieIgnoreDist: float, stressMod: float) -> WorldSoundManager.WorldSound: ...

  @overload
  def addSound(self, source: object, x: int, y: int, z: int, radius: int, volume: int, stressHumans: bool, zombieIgnoreDist: float, stressMod: float, sourceIsZombie: bool, doSend: bool, remote: bool) -> WorldSoundManager.WorldSound: ...

  def addSoundRepeating(self, source: object, x: int, y: int, z: int, radius: int, volume: int, StressHumans: bool) -> WorldSoundManager.WorldSound: ...

  def getBiggestSoundZomb(self, x: int, y: int, z: int, ignoreBySameType: bool, zom: IsoZombie) -> WorldSoundManager.ResultBiggestSound: ...

  @overload
  def getHearingMultiplier(self, arg0: int) -> float: ...

  @overload
  def getHearingMultiplier(self, arg0: IsoZombie) -> float: ...

  def getNew(self) -> WorldSoundManager.WorldSound: ...

  def getSoundAttract(self, sound: WorldSoundManager.WorldSound, zom: IsoZombie) -> float: ...

  def getSoundZomb(self, zom: IsoZombie) -> WorldSoundManager.WorldSound: ...

  def getStressFromSounds(self, x: int, y: int, z: int) -> float: ...

  def init(self, cell: IsoCell) -> None: ...

  def initFrame(self) -> None: ...

  def render(self) -> None: ...

  def update(self) -> None: ...

  def __init__(self):
    self.soundlist: ArrayList[WorldSoundManager.WorldSound]

  class WorldSound:

    @overload
    def init(self, arg0: object, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int) -> WorldSoundManager.WorldSound: ...

    @overload
    def init(self, arg0: object, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: bool) -> WorldSoundManager.WorldSound: ...

    @overload
    def init(self, arg0: bool, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: bool, arg7: float, arg8: float) -> WorldSoundManager.WorldSound: ...

    @overload
    def init(self, arg0: object, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: bool, arg7: float, arg8: float) -> WorldSoundManager.WorldSound: ...

    def __init__(self, arg0: WorldSoundManager):
      self.brepeating: bool
      self.life: int
      self.radius: int
      self.source: object
      self.sourceiszombie: bool
      self.stresshumans: bool
      self.stressmod: float
      self.volume: int
      self.x: int
      self.y: int
      self.z: int
      self.zombieignoredist: float

  class ResultBiggestSound:

    def init(self, sound: WorldSoundManager.WorldSound, attract: float) -> WorldSoundManager.ResultBiggestSound: ...

    def __init__(self):
      self.attract: float
      self.sound: WorldSoundManager.WorldSound


class ZombieSpawnRecorder:

  instance: ZombieSpawnRecorder

  def init(self) -> None: ...

  def quit(self) -> None: ...

  @overload
  def record(self, zombies: ArrayList[IsoZombie], reason: str) -> None: ...

  @overload
  def record(self, zombie: IsoZombie, reason: str) -> None: ...

  def __init__(self):
    self.m_logger: ZLogger


class ZombieTemplateManager:

  def addOverlayToTexture(self, overlays: ArrayList[ZombieTemplateManager.BodyOverlay], tex: Texture) -> Texture: ...

  def __init__(self): ...

  class ZombieTemplate:

    def __init__(self, arg0: ZombieTemplateManager):
      self.tex: Texture

  class BodyOverlay:

    def __init__(self, arg0: ZombieTemplateManager):
      self.location: BodyPartType
      self.type: ZombieTemplateManager.OverlayType

  class OverlayType(Enum):

    BloodHeavy: ZombieTemplateManager.OverlayType

    BloodLight: ZombieTemplateManager.OverlayType

    BloodMedium: ZombieTemplateManager.OverlayType

    @staticmethod
    def valueOf(arg0: str) -> ZombieTemplateManager.OverlayType: ...

    @staticmethod
    def values() -> list[ZombieTemplateManager.OverlayType]: ...


class ZomboidBitFlag:

  def Or(self, arg0: ZomboidBitFlag) -> None: ...

  def clear(self) -> None: ...

  def getFromLong(self, l: int) -> None: ...

  @overload
  def isSet(self, __off__: int) -> bool: ...

  @overload
  def isSet(self, flag: IsoFlagType) -> bool: ...

  @overload
  def isSet(self, flag: IsoObjectType) -> bool: ...

  def load(self, input: DataInputStream) -> None: ...

  def save(self, output: DataOutputStream) -> None: ...

  @overload
  def set(self, __off__: int, b: bool) -> None: ...

  @overload
  def set(self, flag: IsoFlagType, b: bool) -> None: ...

  @overload
  def set(self, flag: IsoObjectType, b: bool) -> None: ...

  @overload
  def __init__(self, size: int): ...
  @overload
  def __init__(self, fl: ZomboidBitFlag): ...


class ZomboidFileSystem:

  instance: ZomboidFileSystem

  def Reset(self) -> None: ...

  def cleanMultiplayerSaves(self) -> None: ...

  def deleteFile(self, filePath: str) -> bool: ...

  def getAbsolutePath(self, rel: str) -> str: ...

  def getAbsoluteWorkDir(self) -> str: ...

  def getActionGroupsPath(self) -> str: ...

  def getAllModFolders(self, out: List[str]) -> None: ...

  @overload
  def getAllPathsContaining(self, str: str) -> list[object]: ...

  @overload
  def getAllPathsContaining(self, str: str, str2: str) -> list[object]: ...

  def getAnimName(self, mediaURI: URI, file: File) -> str: ...

  def getAnimSetsPath(self) -> str: ...

  def getCacheDir(self) -> str: ...

  def getCacheDirSub(self, subPath: str) -> str: ...

  @overload
  def getCanonicalFile(self, file: File) -> File: ...

  @overload
  def getCanonicalFile(self, path: str) -> File: ...

  @overload
  def getCanonicalFile(self, arg0: File, arg1: str) -> File: ...

  @overload
  def getCanonicalPath(self, file: File) -> str: ...

  @overload
  def getCanonicalPath(self, path: str) -> str: ...

  def getCanonicalURI(self, path: str) -> URI: ...

  def getCurrentSaveDir(self) -> str: ...

  def getFileGuidTable(self) -> FileGuidTable: ...

  @overload
  def getFileInCurrentSave(self, fileName: str) -> File: ...

  @overload
  def getFileInCurrentSave(self, subDir: str, fileName: str) -> File: ...

  @overload
  def getFileInCurrentSave(self, subDir1: str, subDir2: str, fileName: str) -> File: ...

  @overload
  def getFileNameInCurrentSave(self, fileName: str) -> str: ...

  @overload
  def getFileNameInCurrentSave(self, subDir: str, fileName: str) -> str: ...

  @overload
  def getFileNameInCurrentSave(self, subDir1: str, subDir2: str, fileName: str) -> str: ...

  def getFilePathFromGuid(self, guid: str) -> str: ...

  def getGameModeCacheDir(self) -> str: ...

  def getGuidFromFilePath(self, path: str) -> str: ...

  def getInstalledItemModsFolders(self, out: ArrayList[str]) -> None: ...

  def getLocalWorkDir(self) -> str: ...

  def getLocalWorkDirSub(self, subPath: str) -> str: ...

  def getMediaFile(self, subPath: str) -> File: ...

  def getMediaPath(self, subPath: str) -> str: ...

  def getMediaRootFile(self) -> File: ...

  def getMediaRootPath(self) -> str: ...

  def getMessagingDir(self) -> str: ...

  def getMessagingDirSub(self, subPath: str) -> str: ...

  def getModDir(self, modId: str) -> str: ...

  def getModIDs(self) -> ArrayList[str]: ...

  def getModInfoForDir(self, modDir: str) -> ChooseGameInfo.Mod: ...

  @overload
  def getRelativeFile(self, file: File) -> str: ...

  @overload
  def getRelativeFile(self, string: str) -> str: ...

  @overload
  def getRelativeFile(self, root: URI, file: File) -> str: ...

  @overload
  def getRelativeFile(self, root: URI, string: str) -> str: ...

  def getSaveDir(self) -> str: ...

  def getSaveDirSub(self, subPath: str) -> str: ...

  def getScreenshotDir(self) -> str: ...

  def getScreenshotDirSub(self, subPath: str) -> str: ...

  def getStagedItemModsFolders(self, out: ArrayList[str]) -> None: ...

  def getString(self, str: str) -> str: ...

  def getWorkshopItemMods(self, itemID: int) -> ArrayList[ChooseGameInfo.Mod]: ...

  def init(self) -> None: ...

  def isKnownFile(self, arg0: str) -> bool: ...

  def isValidFilePathGuid(self, source: str) -> bool: ...

  def loadFileGuidTable(self) -> None: ...

  def loadMod(self, path: str) -> None: ...

  def loadModPackFiles(self) -> None: ...

  def loadModTileDefPropertyStrings(self) -> None: ...

  def loadModTileDefs(self) -> None: ...

  @overload
  def loadMods(self, activeMods: str) -> None: ...

  @overload
  def loadMods(self, toLoad: ArrayList[str]) -> None: ...

  def loadModsAux(self, toLoad: ArrayList[str], ordered: ArrayList[str]) -> str: ...

  def normalizeFolderPath(self, path: str) -> str: ...

  def resetDefaultModsForNewRelease(self, versionStr: str) -> None: ...

  def resetModFolders(self) -> None: ...

  def resolveAllDirectories(self, relPath: str, filter: FileFilter, recursive: bool) -> list[str]: ...

  def resolveAllFiles(self, relPath: str, filter: FileFilter, recursive: bool) -> list[str]: ...

  def resolveFileOrGUID(self, source: str) -> str: ...

  def resolveRelativePath(self, srcFilePath: str, relativePath: str) -> str: ...

  def saveModsFile(self) -> None: ...

  def searchFolders(self, fo: File) -> None: ...

  def searchForModInfo(self, path: File, modSearched: str, mods: ArrayList[ChooseGameInfo.Mod]) -> ChooseGameInfo.Mod: ...

  def setCacheDir(self, dir: str) -> None: ...

  def setModFoldersOrder(self, s: str) -> None: ...

  def tryDeleteFile(self, filePath: str) -> bool: ...

  def update(self) -> None: ...

  def walkGameAndModFiles(self, relPath: str, recursive: bool, consumer: ZomboidFileSystem.IWalkFilesVisitor) -> None: ...

  @staticmethod
  @overload
  def ensureFolderExists(directory: File) -> bool: ...

  @staticmethod
  @overload
  def ensureFolderExists(path: str) -> bool: ...

  @staticmethod
  @overload
  def listAllDirectories(root: File, filter: FileFilter, recursive: bool) -> list[File]: ...

  @staticmethod
  @overload
  def listAllDirectories(rootPath: str, filter: FileFilter, recursive: bool) -> list[File]: ...

  @staticmethod
  @overload
  def listAllFiles(folder: File, filter: FileFilter, recursive: bool) -> list[File]: ...

  @staticmethod
  @overload
  def listAllFiles(folderPath: str, filter: FileFilter, recursive: bool) -> list[File]: ...

  @staticmethod
  def processFilePath(filePath: str, separatorChar: str) -> str: ...

  class IWalkFilesVisitor:

    def visit(self, file: File, relPath: str) -> None: ...


class ZomboidGlobals:

  AngerDecrease: float

  BoredomDecreaseRate: float

  BoredomIncreaseRate: float

  BroodingAngerDecreaseMultiplier: float

  CatchAColdDecreaseRate: float

  CatchAColdIncreaseRate: float

  FatigueIncrease: float

  FoodSicknessDecrease: float

  HungerIncrease: float

  HungerIncreaseWhenExercise: float

  HungerIncreaseWhenWellFed: float

  HungerIncreaseWhileAsleep: float

  ImobileEnduranceReduce: float

  PoisonHealthReduction: float

  PoisonLevelDecrease: float

  RunningEnduranceReduce: float

  SittingEnduranceMultiplier: float

  SleepFatigueReduction: float

  SprintingEnduranceReduce: float

  StressFromBiteOrScratch: float

  StressFromHemophobic: float

  StressFromSoundsMultiplier: float

  StressReduction: float

  ThirstIncrease: float

  ThirstLevelReductionOnAutoDrink: float

  ThirstLevelToAutoDrink: float

  ThirstSleepingIncrease: float

  UnhappinessIncrease: float

  WetnessDecrease: float

  WetnessIncrease: float

  @staticmethod
  def Load() -> None: ...

  @staticmethod
  def toLua() -> None: ...

  def __init__(self): ...

