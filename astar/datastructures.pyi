from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from astar import ISearchNode
from java.util import Comparator, HashMap, TreeMap

K = TypeVar('K', default=Any)
V = TypeVar('V', default=Any)

class ClosedSet:

  @overload
  def add(self, arg0: ISearchNode) -> None: ...

  @overload
  def add(self, arg0: ISearchNode) -> None: ...

  @overload
  def clear(self) -> None: ...

  @overload
  def clear(self) -> None: ...

  @overload
  def contains(self, arg0: ISearchNode) -> bool: ...

  @overload
  def contains(self, arg0: ISearchNode) -> bool: ...

  @overload
  def min(self) -> ISearchNode: ...

  @overload
  def min(self) -> ISearchNode: ...

  def __init__(self, arg0: Comparator[ISearchNode]): ...


class ClosedSetHash:

  @overload
  def add(self, arg0: ISearchNode) -> None: ...

  @overload
  def add(self, arg0: ISearchNode) -> None: ...

  @overload
  def clear(self) -> None: ...

  @overload
  def clear(self) -> None: ...

  @overload
  def contains(self, arg0: ISearchNode) -> bool: ...

  @overload
  def contains(self, arg0: ISearchNode) -> bool: ...

  @overload
  def min(self) -> ISearchNode: ...

  @overload
  def min(self) -> ISearchNode: ...

  def __init__(self, arg0: Comparator[ISearchNode]): ...

  class MinNodeProc:

    @overload
    def execute(self, arg0: ISearchNode) -> bool: ...

    @overload
    def execute(self, arg0: object) -> bool: ...

    @overload
    def execute(self, arg0: object) -> bool: ...


class HashPriorityQueue[K, V]:

  def add(self, arg0: object, arg1: object) -> bool: ...

  def clear(self) -> None: ...

  def contains(self, arg0: object) -> bool: ...

  def get(self, arg0: object) -> object: ...

  def getHashMap(self) -> HashMap[K, V]: ...

  def getTreeMap(self) -> TreeMap[V, K]: ...

  def isEmpty(self) -> bool: ...

  def poll(self) -> object: ...

  def remove(self, arg0: object, arg1: object) -> bool: ...

  def size(self) -> int: ...

  def __init__(self, arg0: Comparator[V]): ...


class IClosedSet:

  def add(self, arg0: ISearchNode) -> None: ...

  def clear(self) -> None: ...

  def contains(self, arg0: ISearchNode) -> bool: ...

  def min(self) -> ISearchNode: ...


class IOpenSet:

  def add(self, arg0: ISearchNode) -> None: ...

  def clear(self) -> None: ...

  def getNode(self, arg0: ISearchNode) -> ISearchNode: ...

  def poll(self) -> ISearchNode: ...

  def remove(self, arg0: ISearchNode) -> None: ...

  def size(self) -> int: ...


class OpenSet:

  @overload
  def add(self, arg0: ISearchNode) -> None: ...

  @overload
  def add(self, arg0: ISearchNode) -> None: ...

  @overload
  def clear(self) -> None: ...

  @overload
  def clear(self) -> None: ...

  @overload
  def getNode(self, arg0: ISearchNode) -> ISearchNode: ...

  @overload
  def getNode(self, arg0: ISearchNode) -> ISearchNode: ...

  @overload
  def poll(self) -> ISearchNode: ...

  @overload
  def poll(self) -> ISearchNode: ...

  @overload
  def remove(self, arg0: ISearchNode) -> None: ...

  @overload
  def remove(self, arg0: ISearchNode) -> None: ...

  @overload
  def size(self) -> int: ...

  @overload
  def size(self) -> int: ...

  def __init__(self, arg0: Comparator[ISearchNode]): ...


class OpenSetHash:

  @overload
  def add(self, arg0: ISearchNode) -> None: ...

  @overload
  def add(self, arg0: ISearchNode) -> None: ...

  @overload
  def clear(self) -> None: ...

  @overload
  def clear(self) -> None: ...

  @overload
  def getNode(self, arg0: ISearchNode) -> ISearchNode: ...

  @overload
  def getNode(self, arg0: ISearchNode) -> ISearchNode: ...

  @overload
  def poll(self) -> ISearchNode: ...

  @overload
  def poll(self) -> ISearchNode: ...

  @overload
  def remove(self, arg0: ISearchNode) -> None: ...

  @overload
  def remove(self, arg0: ISearchNode) -> None: ...

  @overload
  def size(self) -> int: ...

  @overload
  def size(self) -> int: ...

  def toString(self) -> str: ...

  def __init__(self, arg0: Comparator[ISearchNode]): ...

