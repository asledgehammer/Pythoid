from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.io import FileDescriptor
from jdk.internal.misc import ScopedMemoryAccess

class MemorySegmentProxy:

  def checkAccess(self, arg0: int, arg1: int, arg2: bool) -> None: ...

  def isSmall(self) -> bool: ...

  def maxAlignMask(self) -> int: ...

  def scope(self) -> ScopedMemoryAccess.Scope: ...

  def unsafeGetBase(self) -> object: ...

  def unsafeGetOffset(self) -> int: ...

  @staticmethod
  def addOffsets(arg0: int, arg1: int, arg2: MemorySegmentProxy) -> int: ...

  @staticmethod
  def multiplyOffsets(arg0: int, arg1: int, arg2: MemorySegmentProxy) -> int: ...

  def __init__(self): ...


class UnmapperProxy:

  def address(self) -> int: ...

  def fileDescriptor(self) -> FileDescriptor: ...

  def isSync(self) -> bool: ...

  def unmap(self) -> None: ...

