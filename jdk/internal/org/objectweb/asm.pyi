from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.io import InputStream
from java.lang import Class
from java.lang.reflect import Constructor, Method

class AnnotationVisitor:

  def visit(self, arg0: str, arg1: object) -> None: ...

  def visitAnnotation(self, arg0: str, arg1: str) -> AnnotationVisitor: ...

  def visitArray(self, arg0: str) -> AnnotationVisitor: ...

  def visitEnd(self) -> None: ...

  def visitEnum(self, arg0: str, arg1: str, arg2: str) -> None: ...

  @overload
  def __init__(self, arg0: int): ...
  @overload
  def __init__(self, arg0: int, arg1: AnnotationVisitor): ...


class AnnotationWriter(AnnotationVisitor):

  def visit(self, arg0: str, arg1: object) -> None: ...

  def visitAnnotation(self, arg0: str, arg1: str) -> AnnotationVisitor: ...

  def visitArray(self, arg0: str) -> AnnotationVisitor: ...

  def visitEnd(self) -> None: ...

  def visitEnum(self, arg0: str, arg1: str, arg2: str) -> None: ...


class Attribute:

  def isCodeAttribute(self) -> bool: ...

  def isUnknown(self) -> bool: ...

  class Set: ...


class ByteVector:

  def putByte(self, arg0: int) -> ByteVector: ...

  def putByteArray(self, arg0: list[int], arg1: int, arg2: int) -> ByteVector: ...

  def putInt(self, arg0: int) -> ByteVector: ...

  def putLong(self, arg0: int) -> ByteVector: ...

  def putShort(self, arg0: int) -> ByteVector: ...

  def putUTF8(self, arg0: str) -> ByteVector: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: int): ...


class ClassReader:

  EXPAND_FRAMES: int

  SKIP_CODE: int

  SKIP_DEBUG: int

  SKIP_FRAMES: int

  @overload
  def accept(self, arg0: ClassVisitor, arg1: int) -> None: ...

  @overload
  def accept(self, arg0: ClassVisitor, arg1: list[Attribute], arg2: int) -> None: ...

  def getAccess(self) -> int: ...

  def getClassName(self) -> str: ...

  def getInterfaces(self) -> list[str]: ...

  def getItem(self, arg0: int) -> int: ...

  def getItemCount(self) -> int: ...

  def getMaxStringLength(self) -> int: ...

  def getSuperName(self) -> str: ...

  def readByte(self, arg0: int) -> int: ...

  def readClass(self, arg0: int, arg1: list[str]) -> str: ...

  def readConst(self, arg0: int, arg1: list[str]) -> object: ...

  def readInt(self, arg0: int) -> int: ...

  def readLong(self, arg0: int) -> int: ...

  def readModule(self, arg0: int, arg1: list[str]) -> str: ...

  def readPackage(self, arg0: int, arg1: list[str]) -> str: ...

  def readShort(self, arg0: int) -> int: ...

  def readUTF8(self, arg0: int, arg1: list[str]) -> str: ...

  def readUnsignedShort(self, arg0: int) -> int: ...

  @overload
  def __init__(self, arg0: list[int]):
    self.b: list[int]

    self.header: int

  @overload
  def __init__(self, arg0: InputStream): ...
  @overload
  def __init__(self, arg0: str): ...
  @overload
  def __init__(self, arg0: list[int], arg1: int, arg2: int): ...


class ClassVisitor:

  def visit(self, arg0: int, arg1: int, arg2: str, arg3: str, arg4: str, arg5: list[str]) -> None: ...

  def visitAnnotation(self, arg0: str, arg1: bool) -> AnnotationVisitor: ...

  def visitAttribute(self, arg0: Attribute) -> None: ...

  def visitEnd(self) -> None: ...

  def visitField(self, arg0: int, arg1: str, arg2: str, arg3: str, arg4: object) -> FieldVisitor: ...

  def visitInnerClass(self, arg0: str, arg1: str, arg2: str, arg3: int) -> None: ...

  def visitMethod(self, arg0: int, arg1: str, arg2: str, arg3: str, arg4: list[str]) -> MethodVisitor: ...

  def visitModule(self, arg0: str, arg1: int, arg2: str) -> ModuleVisitor: ...

  def visitNestHost(self, arg0: str) -> None: ...

  def visitNestMember(self, arg0: str) -> None: ...

  def visitOuterClass(self, arg0: str, arg1: str, arg2: str) -> None: ...

  def visitPermittedSubclassExperimental(self, arg0: str) -> None: ...

  def visitRecordComponent(self, arg0: str, arg1: str, arg2: str) -> RecordComponentVisitor: ...

  def visitSource(self, arg0: str, arg1: str) -> None: ...

  def visitTypeAnnotation(self, arg0: int, arg1: TypePath, arg2: str, arg3: bool) -> AnnotationVisitor: ...

  @overload
  def __init__(self, arg0: int): ...
  @overload
  def __init__(self, arg0: int, arg1: ClassVisitor): ...


class ClassWriter(ClassVisitor):

  COMPUTE_FRAMES: int

  COMPUTE_MAXS: int

  def newClass(self, arg0: str) -> int: ...

  def newConst(self, arg0: object) -> int: ...

  def newConstantDynamic(self, arg0: str, arg1: str, arg2: Handle, arg3: list[object]) -> int: ...

  def newField(self, arg0: str, arg1: str, arg2: str) -> int: ...

  @overload
  def newHandle(self, arg0: int, arg1: str, arg2: str, arg3: str) -> int: ...

  @overload
  def newHandle(self, arg0: int, arg1: str, arg2: str, arg3: str, arg4: bool) -> int: ...

  def newInvokeDynamic(self, arg0: str, arg1: str, arg2: Handle, arg3: list[object]) -> int: ...

  def newMethod(self, arg0: str, arg1: str, arg2: str, arg3: bool) -> int: ...

  def newMethodType(self, arg0: str) -> int: ...

  def newModule(self, arg0: str) -> int: ...

  def newNameType(self, arg0: str, arg1: str) -> int: ...

  def newPackage(self, arg0: str) -> int: ...

  def newUTF8(self, arg0: str) -> int: ...

  def toByteArray(self) -> list[int]: ...

  def visit(self, arg0: int, arg1: int, arg2: str, arg3: str, arg4: str, arg5: list[str]) -> None: ...

  def visitAnnotation(self, arg0: str, arg1: bool) -> AnnotationVisitor: ...

  def visitAttribute(self, arg0: Attribute) -> None: ...

  def visitEnd(self) -> None: ...

  def visitField(self, arg0: int, arg1: str, arg2: str, arg3: str, arg4: object) -> FieldVisitor: ...

  def visitInnerClass(self, arg0: str, arg1: str, arg2: str, arg3: int) -> None: ...

  def visitMethod(self, arg0: int, arg1: str, arg2: str, arg3: str, arg4: list[str]) -> MethodVisitor: ...

  def visitModule(self, arg0: str, arg1: int, arg2: str) -> ModuleVisitor: ...

  def visitNestHost(self, arg0: str) -> None: ...

  def visitNestMember(self, arg0: str) -> None: ...

  def visitOuterClass(self, arg0: str, arg1: str, arg2: str) -> None: ...

  def visitPermittedSubclassExperimental(self, arg0: str) -> None: ...

  def visitRecordComponent(self, arg0: str, arg1: str, arg2: str) -> RecordComponentVisitor: ...

  def visitSource(self, arg0: str, arg1: str) -> None: ...

  def visitTypeAnnotation(self, arg0: int, arg1: TypePath, arg2: str, arg3: bool) -> AnnotationVisitor: ...

  @overload
  def __init__(self, arg0: int): ...
  @overload
  def __init__(self, arg0: ClassReader, arg1: int): ...


class ConstantDynamic:

  def equals(self, arg0: object) -> bool: ...

  def getBootstrapMethod(self) -> Handle: ...

  def getBootstrapMethodArgument(self, arg0: int) -> object: ...

  def getBootstrapMethodArgumentCount(self) -> int: ...

  def getDescriptor(self) -> str: ...

  def getName(self) -> str: ...

  def getSize(self) -> int: ...

  def hashCode(self) -> int: ...

  def toString(self) -> str: ...

  def __init__(self, arg0: str, arg1: str, arg2: Handle, arg3: list[object]): ...


class Context: ...


class Edge: ...


class FieldVisitor:

  def visitAnnotation(self, arg0: str, arg1: bool) -> AnnotationVisitor: ...

  def visitAttribute(self, arg0: Attribute) -> None: ...

  def visitEnd(self) -> None: ...

  def visitTypeAnnotation(self, arg0: int, arg1: TypePath, arg2: str, arg3: bool) -> AnnotationVisitor: ...

  @overload
  def __init__(self, arg0: int): ...
  @overload
  def __init__(self, arg0: int, arg1: FieldVisitor): ...


class FieldWriter(FieldVisitor):

  def visitAnnotation(self, arg0: str, arg1: bool) -> AnnotationVisitor: ...

  def visitAttribute(self, arg0: Attribute) -> None: ...

  def visitEnd(self) -> None: ...

  def visitTypeAnnotation(self, arg0: int, arg1: TypePath, arg2: str, arg3: bool) -> AnnotationVisitor: ...


class Frame: ...


class Handle:

  def equals(self, arg0: object) -> bool: ...

  def getDesc(self) -> str: ...

  def getName(self) -> str: ...

  def getOwner(self) -> str: ...

  def getTag(self) -> int: ...

  def hashCode(self) -> int: ...

  def isInterface(self) -> bool: ...

  def toString(self) -> str: ...

  @overload
  def __init__(self, arg0: int, arg1: str, arg2: str, arg3: str): ...
  @overload
  def __init__(self, arg0: int, arg1: str, arg2: str, arg3: str, arg4: bool): ...


class Handler: ...


class Label:

  def getOffset(self) -> int: ...

  def toString(self) -> str: ...

  def __init__(self):
    self.info: object


class MethodVisitor:

  def visitAnnotableParameterCount(self, arg0: int, arg1: bool) -> None: ...

  def visitAnnotation(self, arg0: str, arg1: bool) -> AnnotationVisitor: ...

  def visitAnnotationDefault(self) -> AnnotationVisitor: ...

  def visitAttribute(self, arg0: Attribute) -> None: ...

  def visitCode(self) -> None: ...

  def visitEnd(self) -> None: ...

  def visitFieldInsn(self, arg0: int, arg1: str, arg2: str, arg3: str) -> None: ...

  def visitFrame(self, arg0: int, arg1: int, arg2: list[object], arg3: int, arg4: list[object]) -> None: ...

  def visitIincInsn(self, arg0: int, arg1: int) -> None: ...

  def visitInsn(self, arg0: int) -> None: ...

  def visitInsnAnnotation(self, arg0: int, arg1: TypePath, arg2: str, arg3: bool) -> AnnotationVisitor: ...

  def visitIntInsn(self, arg0: int, arg1: int) -> None: ...

  def visitInvokeDynamicInsn(self, arg0: str, arg1: str, arg2: Handle, arg3: list[object]) -> None: ...

  def visitJumpInsn(self, arg0: int, arg1: Label) -> None: ...

  def visitLabel(self, arg0: Label) -> None: ...

  def visitLdcInsn(self, arg0: object) -> None: ...

  def visitLineNumber(self, arg0: int, arg1: Label) -> None: ...

  def visitLocalVariable(self, arg0: str, arg1: str, arg2: str, arg3: Label, arg4: Label, arg5: int) -> None: ...

  def visitLocalVariableAnnotation(self, arg0: int, arg1: TypePath, arg2: list[Label], arg3: list[Label], arg4: list[int], arg5: str, arg6: bool) -> AnnotationVisitor: ...

  def visitLookupSwitchInsn(self, arg0: Label, arg1: list[int], arg2: list[Label]) -> None: ...

  def visitMaxs(self, arg0: int, arg1: int) -> None: ...

  @overload
  def visitMethodInsn(self, arg0: int, arg1: str, arg2: str, arg3: str) -> None: ...

  @overload
  def visitMethodInsn(self, arg0: int, arg1: str, arg2: str, arg3: str, arg4: bool) -> None: ...

  def visitMultiANewArrayInsn(self, arg0: str, arg1: int) -> None: ...

  def visitParameter(self, arg0: str, arg1: int) -> None: ...

  def visitParameterAnnotation(self, arg0: int, arg1: str, arg2: bool) -> AnnotationVisitor: ...

  def visitTableSwitchInsn(self, arg0: int, arg1: int, arg2: Label, arg3: list[Label]) -> None: ...

  def visitTryCatchAnnotation(self, arg0: int, arg1: TypePath, arg2: str, arg3: bool) -> AnnotationVisitor: ...

  def visitTryCatchBlock(self, arg0: Label, arg1: Label, arg2: Label, arg3: str) -> None: ...

  def visitTypeAnnotation(self, arg0: int, arg1: TypePath, arg2: str, arg3: bool) -> AnnotationVisitor: ...

  def visitTypeInsn(self, arg0: int, arg1: str) -> None: ...

  def visitVarInsn(self, arg0: int, arg1: int) -> None: ...

  @overload
  def __init__(self, arg0: int): ...
  @overload
  def __init__(self, arg0: int, arg1: MethodVisitor): ...


class MethodWriter(MethodVisitor):

  def visitAnnotableParameterCount(self, arg0: int, arg1: bool) -> None: ...

  def visitAnnotation(self, arg0: str, arg1: bool) -> AnnotationVisitor: ...

  def visitAnnotationDefault(self) -> AnnotationVisitor: ...

  def visitAttribute(self, arg0: Attribute) -> None: ...

  def visitCode(self) -> None: ...

  def visitEnd(self) -> None: ...

  def visitFieldInsn(self, arg0: int, arg1: str, arg2: str, arg3: str) -> None: ...

  def visitFrame(self, arg0: int, arg1: int, arg2: list[object], arg3: int, arg4: list[object]) -> None: ...

  def visitIincInsn(self, arg0: int, arg1: int) -> None: ...

  def visitInsn(self, arg0: int) -> None: ...

  def visitInsnAnnotation(self, arg0: int, arg1: TypePath, arg2: str, arg3: bool) -> AnnotationVisitor: ...

  def visitIntInsn(self, arg0: int, arg1: int) -> None: ...

  def visitInvokeDynamicInsn(self, arg0: str, arg1: str, arg2: Handle, arg3: list[object]) -> None: ...

  def visitJumpInsn(self, arg0: int, arg1: Label) -> None: ...

  def visitLabel(self, arg0: Label) -> None: ...

  def visitLdcInsn(self, arg0: object) -> None: ...

  def visitLineNumber(self, arg0: int, arg1: Label) -> None: ...

  def visitLocalVariable(self, arg0: str, arg1: str, arg2: str, arg3: Label, arg4: Label, arg5: int) -> None: ...

  def visitLocalVariableAnnotation(self, arg0: int, arg1: TypePath, arg2: list[Label], arg3: list[Label], arg4: list[int], arg5: str, arg6: bool) -> AnnotationVisitor: ...

  def visitLookupSwitchInsn(self, arg0: Label, arg1: list[int], arg2: list[Label]) -> None: ...

  def visitMaxs(self, arg0: int, arg1: int) -> None: ...

  def visitMethodInsn(self, arg0: int, arg1: str, arg2: str, arg3: str, arg4: bool) -> None: ...

  def visitMultiANewArrayInsn(self, arg0: str, arg1: int) -> None: ...

  def visitParameter(self, arg0: str, arg1: int) -> None: ...

  def visitParameterAnnotation(self, arg0: int, arg1: str, arg2: bool) -> AnnotationVisitor: ...

  def visitTableSwitchInsn(self, arg0: int, arg1: int, arg2: Label, arg3: list[Label]) -> None: ...

  def visitTryCatchAnnotation(self, arg0: int, arg1: TypePath, arg2: str, arg3: bool) -> AnnotationVisitor: ...

  def visitTryCatchBlock(self, arg0: Label, arg1: Label, arg2: Label, arg3: str) -> None: ...

  def visitTypeAnnotation(self, arg0: int, arg1: TypePath, arg2: str, arg3: bool) -> AnnotationVisitor: ...

  def visitTypeInsn(self, arg0: int, arg1: str) -> None: ...

  def visitVarInsn(self, arg0: int, arg1: int) -> None: ...


class ModuleVisitor:

  def visitEnd(self) -> None: ...

  def visitExport(self, arg0: str, arg1: int, arg2: list[str]) -> None: ...

  def visitMainClass(self, arg0: str) -> None: ...

  def visitOpen(self, arg0: str, arg1: int, arg2: list[str]) -> None: ...

  def visitPackage(self, arg0: str) -> None: ...

  def visitProvide(self, arg0: str, arg1: list[str]) -> None: ...

  def visitRequire(self, arg0: str, arg1: int, arg2: str) -> None: ...

  def visitUse(self, arg0: str) -> None: ...

  @overload
  def __init__(self, arg0: int): ...
  @overload
  def __init__(self, arg0: int, arg1: ModuleVisitor): ...


class ModuleWriter(ModuleVisitor):

  def visitEnd(self) -> None: ...

  def visitExport(self, arg0: str, arg1: int, arg2: list[str]) -> None: ...

  def visitMainClass(self, arg0: str) -> None: ...

  def visitOpen(self, arg0: str, arg1: int, arg2: list[str]) -> None: ...

  def visitPackage(self, arg0: str) -> None: ...

  def visitProvide(self, arg0: str, arg1: list[str]) -> None: ...

  def visitRequire(self, arg0: str, arg1: int, arg2: str) -> None: ...

  def visitUse(self, arg0: str) -> None: ...


class RecordComponentVisitor:

  def getDelegate(self) -> RecordComponentVisitor: ...

  def visitAnnotation(self, arg0: str, arg1: bool) -> AnnotationVisitor: ...

  def visitAttribute(self, arg0: Attribute) -> None: ...

  def visitEnd(self) -> None: ...

  def visitTypeAnnotation(self, arg0: int, arg1: TypePath, arg2: str, arg3: bool) -> AnnotationVisitor: ...

  @overload
  def __init__(self, arg0: int): ...
  @overload
  def __init__(self, arg0: int, arg1: RecordComponentVisitor): ...


class RecordComponentWriter(RecordComponentVisitor):

  def visitAnnotation(self, arg0: str, arg1: bool) -> AnnotationVisitor: ...

  def visitAttribute(self, arg0: Attribute) -> None: ...

  def visitEnd(self) -> None: ...

  def visitTypeAnnotation(self, arg0: int, arg1: TypePath, arg2: str, arg3: bool) -> AnnotationVisitor: ...


class Symbol: ...


class SymbolTable:

  class Entry(Symbol): ...


class Type:

  ARRAY: int

  BOOLEAN: int

  BOOLEAN_TYPE: Type

  BYTE: int

  BYTE_TYPE: Type

  CHAR: int

  CHAR_TYPE: Type

  DOUBLE: int

  DOUBLE_TYPE: Type

  FLOAT: int

  FLOAT_TYPE: Type

  INT: int

  INT_TYPE: Type

  LONG: int

  LONG_TYPE: Type

  METHOD: int

  OBJECT: int

  SHORT: int

  SHORT_TYPE: Type

  VOID: int

  VOID_TYPE: Type

  def equals(self, arg0: object) -> bool: ...

  def getArgumentTypes(self) -> list[Type]: ...

  def getArgumentsAndReturnSizes(self) -> int: ...

  def getClassName(self) -> str: ...

  def getDescriptor(self) -> str: ...

  def getDimensions(self) -> int: ...

  def getElementType(self) -> Type: ...

  def getInternalName(self) -> str: ...

  def getOpcode(self, arg0: int) -> int: ...

  def getReturnType(self) -> Type: ...

  def getSize(self) -> int: ...

  def getSort(self) -> int: ...

  def hashCode(self) -> int: ...

  def toString(self) -> str: ...

  @staticmethod
  def getConstructorDescriptor(arg0: Constructor[Any]) -> str: ...

  @staticmethod
  @overload
  def getMethodDescriptor(arg0: Method) -> str: ...

  @staticmethod
  @overload
  def getMethodDescriptor(arg0: Type, arg1: list[Type]) -> str: ...

  @staticmethod
  @overload
  def getMethodType(arg0: str) -> Type: ...

  @staticmethod
  @overload
  def getMethodType(arg0: Type, arg1: list[Type]) -> Type: ...

  @staticmethod
  def getObjectType(arg0: str) -> Type: ...

  @staticmethod
  @overload
  def getType(arg0: Class[Any]) -> Type: ...

  @staticmethod
  @overload
  def getType(arg0: str) -> Type: ...

  @staticmethod
  @overload
  def getType(arg0: Constructor[Any]) -> Type: ...

  @staticmethod
  @overload
  def getType(arg0: Method) -> Type: ...


class TypePath:

  ARRAY_ELEMENT: int

  INNER_TYPE: int

  TYPE_ARGUMENT: int

  WILDCARD_BOUND: int

  def getLength(self) -> int: ...

  def getStep(self, arg0: int) -> int: ...

  def getStepArgument(self, arg0: int) -> int: ...

  def toString(self) -> str: ...

  @staticmethod
  def fromString(arg0: str) -> TypePath: ...

