from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.io import InputStream
from java.nio import ByteOrder, ByteBuffer
from java.nio.file import Path
from java.nio.file.attribute import FileTime, BasicFileAttributes
from java.util import List
from java.util.function import Consumer

class BasicImageReader:

  @overload
  def close(self) -> None: ...

  @overload
  def close(self) -> None: ...

  @overload
  def findLocation(self, arg0: str) -> ImageLocation: ...

  @overload
  def findLocation(self, arg0: str, arg1: str) -> ImageLocation: ...

  def getAttributes(self, arg0: int) -> list[int]: ...

  def getByteOrder(self) -> ByteOrder: ...

  def getEntryNames(self) -> list[str]: ...

  def getHeader(self) -> ImageHeader: ...

  def getImagePath(self) -> Path: ...

  def getLocationIndex(self, arg0: str) -> int: ...

  def getName(self) -> str: ...

  @overload
  def getResource(self, arg0: str) -> list[int]: ...

  @overload
  def getResource(self, arg0: ImageLocation) -> list[int]: ...

  def getResourceBuffer(self, arg0: ImageLocation) -> ByteBuffer: ...

  def getResourceStream(self, arg0: ImageLocation) -> InputStream: ...

  def getString(self, arg0: int) -> str: ...

  def getStrings(self) -> ImageStringsReader: ...

  def match(self, arg0: int, arg1: str, arg2: int) -> int: ...

  def verifyLocation(self, arg0: str, arg1: str) -> bool: ...

  @staticmethod
  def open(arg0: Path) -> BasicImageReader: ...

  @staticmethod
  def releaseByteBuffer(arg0: ByteBuffer) -> None: ...


class ImageHeader:

  MAGIC: int

  MAJOR_VERSION: int

  MINOR_VERSION: int

  def getFlags(self) -> int: ...

  def getIndexSize(self) -> int: ...

  def getLocationsSize(self) -> int: ...

  def getMagic(self) -> int: ...

  def getMajorVersion(self) -> int: ...

  def getMinorVersion(self) -> int: ...

  def getOffsetsSize(self) -> int: ...

  def getRedirectSize(self) -> int: ...

  def getResourceCount(self) -> int: ...

  def getStringsSize(self) -> int: ...

  def getTableLength(self) -> int: ...

  @overload
  def writeTo(self, arg0: ByteBuffer) -> None: ...

  @overload
  def writeTo(self, arg0: ImageStream) -> None: ...

  @staticmethod
  def getHeaderSize() -> int: ...

  @overload
  def __init__(self, arg0: int, arg1: int, arg2: int, arg3: int): ...
  @overload
  def __init__(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int): ...


class ImageLocation:

  ATTRIBUTE_BASE: int

  ATTRIBUTE_COMPRESSED: int

  ATTRIBUTE_COUNT: int

  ATTRIBUTE_END: int

  ATTRIBUTE_EXTENSION: int

  ATTRIBUTE_MODULE: int

  ATTRIBUTE_OFFSET: int

  ATTRIBUTE_PARENT: int

  ATTRIBUTE_UNCOMPRESSED: int

  def getBase(self) -> str: ...

  def getBaseOffset(self) -> int: ...

  def getCompressedSize(self) -> int: ...

  def getContentOffset(self) -> int: ...

  def getExtension(self) -> str: ...

  def getExtensionOffset(self) -> int: ...

  @overload
  def getFullName(self) -> str: ...

  @overload
  def getFullName(self, arg0: bool) -> str: ...

  def getModule(self) -> str: ...

  def getModuleOffset(self) -> int: ...

  def getParent(self) -> str: ...

  def getParentOffset(self) -> int: ...

  def getUncompressedSize(self) -> int: ...

  def verify(self, arg0: str) -> bool: ...

  @staticmethod
  def compress(arg0: list[int]) -> list[int]: ...

  def __init__(self, arg0: list[int], arg1: ImageStrings): ...


class ImageReader:

  @overload
  def close(self) -> None: ...

  @overload
  def close(self) -> None: ...

  @overload
  def findLocation(self, arg0: str) -> ImageLocation: ...

  @overload
  def findLocation(self, arg0: str, arg1: str) -> ImageLocation: ...

  def findNode(self, arg0: str) -> ImageReader.Node: ...

  def getAttributes(self, arg0: int) -> list[int]: ...

  def getByteOrder(self) -> ByteOrder: ...

  def getEntryNames(self) -> list[str]: ...

  def getHeader(self) -> ImageHeader: ...

  def getImagePath(self) -> Path: ...

  def getModuleNames(self) -> list[str]: ...

  def getName(self) -> str: ...

  @overload
  def getResource(self, arg0: str) -> list[int]: ...

  @overload
  def getResource(self, arg0: ImageLocation) -> list[int]: ...

  @overload
  def getResource(self, arg0: ImageReader.Node) -> list[int]: ...

  @overload
  def getResource(self, arg0: ImageReader.Resource) -> list[int]: ...

  def getResourceBuffer(self, arg0: ImageLocation) -> ByteBuffer: ...

  def getResourceStream(self, arg0: ImageLocation) -> InputStream: ...

  def getRootDirectory(self) -> ImageReader.Directory: ...

  def getString(self, arg0: int) -> str: ...

  def getStrings(self) -> ImageStringsReader: ...

  def verifyLocation(self, arg0: str, arg1: str) -> bool: ...

  @staticmethod
  @overload
  def open(arg0: Path) -> ImageReader: ...

  @staticmethod
  @overload
  def open(arg0: Path, arg1: ByteOrder) -> ImageReader: ...

  @staticmethod
  def releaseByteBuffer(arg0: ByteBuffer) -> None: ...

  class SharedImageReader(BasicImageReader):

    def close(self, arg0: ImageReader) -> None: ...

    @staticmethod
    def open(arg0: Path, arg1: ByteOrder) -> ImageReader: ...

    class LocationVisitor:

      def visit(self, arg0: ImageLocation) -> None: ...

  class Directory(ImageReader.Node):

    def getChildren(self) -> List[ImageReader.Node]: ...

    def isDirectory(self) -> bool: ...

    def walk(self, arg0: Consumer[ImageReader.Node]) -> None: ...

  class Node:

    def compressedSize(self) -> int: ...

    def contentOffset(self) -> int: ...

    def creationTime(self) -> FileTime: ...

    def equals(self, arg0: object) -> bool: ...

    def extension(self) -> str: ...

    def getChildren(self) -> List[ImageReader.Node]: ...

    def getFileAttributes(self) -> BasicFileAttributes: ...

    def getLocation(self) -> ImageLocation: ...

    def getName(self) -> str: ...

    def getNameString(self) -> str: ...

    def hashCode(self) -> int: ...

    def isCompleted(self) -> bool: ...

    def isDirectory(self) -> bool: ...

    def isLink(self) -> bool: ...

    def isModulesDir(self) -> bool: ...

    def isPackagesDir(self) -> bool: ...

    def isResource(self) -> bool: ...

    def isRootDir(self) -> bool: ...

    def lastAccessTime(self) -> FileTime: ...

    def lastModifiedTime(self) -> FileTime: ...

    @overload
    def resolveLink(self) -> ImageReader.Node: ...

    @overload
    def resolveLink(self, arg0: bool) -> ImageReader.Node: ...

    def setCompleted(self, arg0: bool) -> None: ...

    def setIsModulesDir(self) -> None: ...

    def setIsPackagesDir(self) -> None: ...

    def setIsRootDir(self) -> None: ...

    def size(self) -> int: ...

    def toString(self) -> str: ...

  class Resource(ImageReader.Node):

    def compressedSize(self) -> int: ...

    def contentOffset(self) -> int: ...

    def extension(self) -> str: ...

    def getLocation(self) -> ImageLocation: ...

    def isCompleted(self) -> bool: ...

    def isResource(self) -> bool: ...

    def size(self) -> int: ...

  class LinkNode(ImageReader.Node):

    def isCompleted(self) -> bool: ...

    def isLink(self) -> bool: ...

    def resolveLink(self, arg0: bool) -> ImageReader.Node: ...


class ImageReaderFactory:

  @staticmethod
  def get(arg0: Path) -> ImageReader: ...

  @staticmethod
  def getImageReader() -> ImageReader: ...


class ImageStream:

  def align(self, arg0: int) -> ImageStream: ...

  def ensure(self, arg0: int) -> None: ...

  @overload
  def get(self) -> int: ...

  @overload
  def get(self, arg0: list[int], arg1: int, arg2: int) -> None: ...

  def getBuffer(self) -> ByteBuffer: ...

  def getBytes(self) -> list[int]: ...

  def getInt(self) -> int: ...

  def getLong(self) -> int: ...

  def getPosition(self) -> int: ...

  def getShort(self) -> int: ...

  def getSize(self) -> int: ...

  def hasByte(self) -> bool: ...

  def hasBytes(self, arg0: int) -> bool: ...

  @overload
  def put(self, arg0: int) -> ImageStream: ...

  @overload
  def put(self, arg0: int) -> ImageStream: ...

  @overload
  def put(self, arg0: ImageStream) -> ImageStream: ...

  @overload
  def put(self, arg0: list[int], arg1: int, arg2: int) -> ImageStream: ...

  def putInt(self, arg0: int) -> ImageStream: ...

  def putLong(self, arg0: int) -> ImageStream: ...

  @overload
  def putShort(self, arg0: int) -> ImageStream: ...

  @overload
  def putShort(self, arg0: int) -> ImageStream: ...

  def setPosition(self, arg0: int) -> None: ...

  def skip(self, arg0: int) -> None: ...

  def toArray(self) -> list[int]: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: list[int]): ...
  @overload
  def __init__(self, arg0: int): ...
  @overload
  def __init__(self, arg0: ByteBuffer): ...
  @overload
  def __init__(self, arg0: ByteOrder): ...
  @overload
  def __init__(self, arg0: list[int], arg1: ByteOrder): ...
  @overload
  def __init__(self, arg0: int, arg1: ByteOrder): ...


class ImageStrings:

  def add(self, arg0: str) -> int: ...

  def get(self, arg0: int) -> str: ...

  def match(self, arg0: int, arg1: str, arg2: int) -> int: ...


class ImageStringsReader:

  HASH_MULTIPLIER: int

  POSITIVE_MASK: int

  @overload
  def add(self, arg0: str) -> int: ...

  @overload
  def add(self, arg0: str) -> int: ...

  @overload
  def get(self, arg0: int) -> str: ...

  @overload
  def get(self, arg0: int) -> str: ...

  @overload
  def match(self, arg0: int, arg1: str, arg2: int) -> int: ...

  @overload
  def match(self, arg0: int, arg1: str, arg2: int) -> int: ...

  @staticmethod
  @overload
  def hashCode(arg0: str) -> int: ...

  @staticmethod
  @overload
  def hashCode(arg0: str, arg1: int) -> int: ...

  @staticmethod
  @overload
  def hashCode(arg0: str, arg1: str) -> int: ...

  @staticmethod
  @overload
  def hashCode(arg0: str, arg1: str, arg2: int) -> int: ...

  @staticmethod
  def mutf8FromString(arg0: str) -> list[int]: ...

  @staticmethod
  def stringFromByteBuffer(arg0: ByteBuffer) -> str: ...

  @staticmethod
  @overload
  def stringFromMUTF8(arg0: list[int]) -> str: ...

  @staticmethod
  @overload
  def stringFromMUTF8(arg0: list[int], arg1: int, arg2: int) -> str: ...

  @staticmethod
  def unmaskedHashCode(arg0: str, arg1: int) -> int: ...


class NativeImageBuffer: ...

