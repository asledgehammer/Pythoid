from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.nio import ByteBuffer

class Perf:

  @overload
  def attach(self, arg0: int, arg1: str) -> ByteBuffer: ...

  @overload
  def attach(self, arg0: str, arg1: int, arg2: str) -> ByteBuffer: ...

  def createByteArray(self, arg0: str, arg1: int, arg2: int, arg3: list[int], arg4: int) -> ByteBuffer: ...

  def createLong(self, arg0: str, arg1: int, arg2: int, arg3: int) -> ByteBuffer: ...

  @overload
  def createString(self, arg0: str, arg1: int, arg2: int, arg3: str) -> ByteBuffer: ...

  @overload
  def createString(self, arg0: str, arg1: int, arg2: int, arg3: str, arg4: int) -> ByteBuffer: ...

  def highResCounter(self) -> int: ...

  def highResFrequency(self) -> int: ...

  @staticmethod
  def getPerf() -> Perf: ...

  class CleanerAction:

    @overload
    def run(self) -> None: ...

    @overload
    def run(self) -> None: ...

  class GetPerfAction:

    @overload
    def run(self) -> Perf: ...

    @overload
    def run(self) -> object: ...

    @overload
    def run(self) -> object: ...

    def __init__(self): ...


class PerfCounter:

  def add(self, arg0: int) -> None: ...

  def addElapsedTimeFrom(self, arg0: int) -> None: ...

  def addTime(self, arg0: int) -> None: ...

  def get(self) -> int: ...

  def increment(self) -> None: ...

  def set(self, arg0: int) -> None: ...

  def toString(self) -> str: ...

  @staticmethod
  def getFindClassTime() -> PerfCounter: ...

  @staticmethod
  def getFindClasses() -> PerfCounter: ...

  @staticmethod
  def getParentDelegationTime() -> PerfCounter: ...

  @staticmethod
  def getReadClassBytesTime() -> PerfCounter: ...

  @staticmethod
  def getZipFileCount() -> PerfCounter: ...

  @staticmethod
  def getZipFileOpenTime() -> PerfCounter: ...

  @staticmethod
  def newConstantPerfCounter(arg0: str) -> PerfCounter: ...

  @staticmethod
  def newPerfCounter(arg0: str) -> PerfCounter: ...

  class CoreCounters: ...

