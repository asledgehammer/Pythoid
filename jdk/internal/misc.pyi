from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.io import FileDescriptor
from java.lang import ClassLoader, Class, Thread, Runnable, Error, ThreadLocal, Throwable
from java.lang.reflect import Field
from java.nio import ByteBuffer
from java.security import ProtectionDomain
from java.util import Collection, List, Map
from jdk.internal.vm.vector import VectorSupport

V = TypeVar('V', default=Any)
E = TypeVar('E', default=Any)
S = TypeVar('S', default=Any)
M = TypeVar('M', default=Any)
T = TypeVar('T', default=Any)

class CDS:

  @staticmethod
  def defineArchivedModules(arg0: ClassLoader, arg1: ClassLoader) -> None: ...

  @staticmethod
  def getRandomSeedForDumping() -> int: ...

  @staticmethod
  def initializeFromArchive(arg0: Class[Any]) -> None: ...

  @staticmethod
  def isDumpingArchive() -> bool: ...

  @staticmethod
  def isDumpingClassList() -> bool: ...

  @staticmethod
  def isSharingEnabled() -> bool: ...

  @staticmethod
  def traceLambdaFormInvoker(arg0: str, arg1: str, arg2: str, arg3: str) -> None: ...

  @staticmethod
  def traceSpeciesType(arg0: str, arg1: str) -> None: ...

  def __init__(self): ...


class InnocuousThread(Thread):

  def eraseThreadLocals(self) -> None: ...

  def run(self) -> None: ...

  def setContextClassLoader(self, arg0: ClassLoader) -> None: ...

  def setUncaughtExceptionHandler(self, arg0: Thread.UncaughtExceptionHandler) -> None: ...

  @staticmethod
  @overload
  def newSystemThread(arg0: Runnable) -> Thread: ...

  @staticmethod
  @overload
  def newSystemThread(arg0: str, arg1: Runnable) -> Thread: ...

  @staticmethod
  @overload
  def newSystemThread(arg0: str, arg1: Runnable, arg2: int) -> Thread: ...

  @staticmethod
  @overload
  def newThread(arg0: Runnable) -> Thread: ...

  @staticmethod
  @overload
  def newThread(arg0: str, arg1: Runnable) -> Thread: ...

  @staticmethod
  @overload
  def newThread(arg0: str, arg1: Runnable, arg2: int) -> Thread: ...


class OSEnvironment:

  @staticmethod
  def initialize() -> None: ...

  def __init__(self): ...


class ScopedMemoryAccess:

  def closeScope(self, arg0: ScopedMemoryAccess.Scope) -> bool: ...

  def compareAndExchangeDouble(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: float, arg4: float) -> float: ...

  def compareAndExchangeDoubleAcquire(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: float, arg4: float) -> float: ...

  def compareAndExchangeDoubleRelease(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: float, arg4: float) -> float: ...

  def compareAndExchangeFloat(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: float, arg4: float) -> float: ...

  def compareAndExchangeFloatAcquire(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: float, arg4: float) -> float: ...

  def compareAndExchangeFloatRelease(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: float, arg4: float) -> float: ...

  def compareAndExchangeInt(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int, arg4: int) -> int: ...

  def compareAndExchangeIntAcquire(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int, arg4: int) -> int: ...

  def compareAndExchangeIntRelease(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int, arg4: int) -> int: ...

  def compareAndExchangeLong(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int, arg4: int) -> int: ...

  def compareAndExchangeLongAcquire(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int, arg4: int) -> int: ...

  def compareAndExchangeLongRelease(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int, arg4: int) -> int: ...

  def compareAndSetDouble(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: float, arg4: float) -> bool: ...

  def compareAndSetFloat(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: float, arg4: float) -> bool: ...

  def compareAndSetInt(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int, arg4: int) -> bool: ...

  def compareAndSetLong(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int, arg4: int) -> bool: ...

  def copyMemory(self, arg0: ScopedMemoryAccess.Scope, arg1: ScopedMemoryAccess.Scope, arg2: object, arg3: int, arg4: object, arg5: int, arg6: int) -> None: ...

  def copySwapMemory(self, arg0: ScopedMemoryAccess.Scope, arg1: ScopedMemoryAccess.Scope, arg2: object, arg3: int, arg4: object, arg5: int, arg6: int, arg7: int) -> None: ...

  def force(self, arg0: ScopedMemoryAccess.Scope, arg1: FileDescriptor, arg2: int, arg3: bool, arg4: int, arg5: int) -> None: ...

  def forceInternal(self, arg0: ScopedMemoryAccess.Scope, arg1: FileDescriptor, arg2: int, arg3: bool, arg4: int, arg5: int) -> None: ...

  def getAndAddByte(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> int: ...

  def getAndAddByteAcquire(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> int: ...

  def getAndAddByteRelease(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> int: ...

  def getAndAddChar(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: str) -> str: ...

  def getAndAddCharAcquire(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: str) -> str: ...

  def getAndAddCharRelease(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: str) -> str: ...

  def getAndAddDouble(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: float) -> float: ...

  def getAndAddDoubleAcquire(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: float) -> float: ...

  def getAndAddDoubleRelease(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: float) -> float: ...

  def getAndAddFloat(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: float) -> float: ...

  def getAndAddFloatAcquire(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: float) -> float: ...

  def getAndAddFloatRelease(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: float) -> float: ...

  def getAndAddInt(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> int: ...

  def getAndAddIntAcquire(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> int: ...

  def getAndAddIntRelease(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> int: ...

  def getAndAddLong(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> int: ...

  def getAndAddLongAcquire(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> int: ...

  def getAndAddLongRelease(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> int: ...

  def getAndAddShort(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> int: ...

  def getAndAddShortAcquire(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> int: ...

  def getAndAddShortRelease(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> int: ...

  def getAndBitwiseAndByte(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> int: ...

  def getAndBitwiseAndByteAcquire(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> int: ...

  def getAndBitwiseAndByteRelease(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> int: ...

  def getAndBitwiseAndChar(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: str) -> str: ...

  def getAndBitwiseAndCharAcquire(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: str) -> str: ...

  def getAndBitwiseAndCharRelease(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: str) -> str: ...

  def getAndBitwiseAndInt(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> int: ...

  def getAndBitwiseAndIntAcquire(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> int: ...

  def getAndBitwiseAndIntRelease(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> int: ...

  def getAndBitwiseAndLong(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> int: ...

  def getAndBitwiseAndLongAcquire(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> int: ...

  def getAndBitwiseAndLongRelease(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> int: ...

  def getAndBitwiseAndShort(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> int: ...

  def getAndBitwiseAndShortAcquire(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> int: ...

  def getAndBitwiseAndShortRelease(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> int: ...

  def getAndBitwiseOrByte(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> int: ...

  def getAndBitwiseOrByteAcquire(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> int: ...

  def getAndBitwiseOrByteRelease(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> int: ...

  def getAndBitwiseOrChar(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: str) -> str: ...

  def getAndBitwiseOrCharAcquire(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: str) -> str: ...

  def getAndBitwiseOrCharRelease(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: str) -> str: ...

  def getAndBitwiseOrInt(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> int: ...

  def getAndBitwiseOrIntAcquire(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> int: ...

  def getAndBitwiseOrIntRelease(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> int: ...

  def getAndBitwiseOrLong(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> int: ...

  def getAndBitwiseOrLongAcquire(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> int: ...

  def getAndBitwiseOrLongRelease(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> int: ...

  def getAndBitwiseOrShort(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> int: ...

  def getAndBitwiseOrShortAcquire(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> int: ...

  def getAndBitwiseOrShortRelease(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> int: ...

  def getAndBitwiseXorByte(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> int: ...

  def getAndBitwiseXorByteAcquire(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> int: ...

  def getAndBitwiseXorByteRelease(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> int: ...

  def getAndBitwiseXorChar(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: str) -> str: ...

  def getAndBitwiseXorCharAcquire(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: str) -> str: ...

  def getAndBitwiseXorCharRelease(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: str) -> str: ...

  def getAndBitwiseXorInt(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> int: ...

  def getAndBitwiseXorIntAcquire(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> int: ...

  def getAndBitwiseXorIntRelease(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> int: ...

  def getAndBitwiseXorLong(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> int: ...

  def getAndBitwiseXorLongAcquire(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> int: ...

  def getAndBitwiseXorLongRelease(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> int: ...

  def getAndBitwiseXorShort(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> int: ...

  def getAndBitwiseXorShortAcquire(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> int: ...

  def getAndBitwiseXorShortRelease(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> int: ...

  def getAndSetDouble(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: float) -> float: ...

  def getAndSetDoubleAcquire(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: float) -> float: ...

  def getAndSetDoubleRelease(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: float) -> float: ...

  def getAndSetFloat(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: float) -> float: ...

  def getAndSetFloatAcquire(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: float) -> float: ...

  def getAndSetFloatRelease(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: float) -> float: ...

  def getAndSetInt(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> int: ...

  def getAndSetIntAcquire(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> int: ...

  def getAndSetIntRelease(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> int: ...

  def getAndSetLong(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> int: ...

  def getAndSetLongAcquire(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> int: ...

  def getAndSetLongRelease(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> int: ...

  def getByte(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int) -> int: ...

  def getByteAcquire(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int) -> int: ...

  def getByteOpaque(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int) -> int: ...

  def getByteVolatile(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int) -> int: ...

  def getChar(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int) -> str: ...

  def getCharAcquire(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int) -> str: ...

  def getCharOpaque(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int) -> str: ...

  def getCharUnaligned(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: bool) -> str: ...

  def getCharVolatile(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int) -> str: ...

  def getDouble(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int) -> float: ...

  def getDoubleAcquire(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int) -> float: ...

  def getDoubleOpaque(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int) -> float: ...

  def getDoubleVolatile(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int) -> float: ...

  def getFloat(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int) -> float: ...

  def getFloatAcquire(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int) -> float: ...

  def getFloatOpaque(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int) -> float: ...

  def getFloatVolatile(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int) -> float: ...

  def getInt(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int) -> int: ...

  def getIntAcquire(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int) -> int: ...

  def getIntOpaque(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int) -> int: ...

  def getIntUnaligned(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: bool) -> int: ...

  def getIntVolatile(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int) -> int: ...

  def getLong(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int) -> int: ...

  def getLongAcquire(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int) -> int: ...

  def getLongOpaque(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int) -> int: ...

  def getLongUnaligned(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: bool) -> int: ...

  def getLongVolatile(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int) -> int: ...

  def getShort(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int) -> int: ...

  def getShortAcquire(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int) -> int: ...

  def getShortOpaque(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int) -> int: ...

  def getShortUnaligned(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: bool) -> int: ...

  def getShortVolatile(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int) -> int: ...

  def isLoaded(self, arg0: ScopedMemoryAccess.Scope, arg1: int, arg2: bool, arg3: int) -> bool: ...

  def isLoadedInternal(self, arg0: ScopedMemoryAccess.Scope, arg1: int, arg2: bool, arg3: int) -> bool: ...

  def load(self, arg0: ScopedMemoryAccess.Scope, arg1: int, arg2: bool, arg3: int) -> None: ...

  def loadInternal(self, arg0: ScopedMemoryAccess.Scope, arg1: int, arg2: bool, arg3: int) -> None: ...

  def putByte(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> None: ...

  def putByteOpaque(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> None: ...

  def putByteRelease(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> None: ...

  def putByteVolatile(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> None: ...

  def putChar(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: str) -> None: ...

  def putCharOpaque(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: str) -> None: ...

  def putCharRelease(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: str) -> None: ...

  def putCharUnaligned(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: str, arg4: bool) -> None: ...

  def putCharVolatile(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: str) -> None: ...

  def putDouble(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: float) -> None: ...

  def putDoubleOpaque(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: float) -> None: ...

  def putDoubleRelease(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: float) -> None: ...

  def putDoubleVolatile(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: float) -> None: ...

  def putFloat(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: float) -> None: ...

  def putFloatOpaque(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: float) -> None: ...

  def putFloatRelease(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: float) -> None: ...

  def putFloatVolatile(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: float) -> None: ...

  def putInt(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> None: ...

  def putIntOpaque(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> None: ...

  def putIntRelease(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> None: ...

  def putIntUnaligned(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int, arg4: bool) -> None: ...

  def putIntVolatile(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> None: ...

  def putLong(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> None: ...

  def putLongOpaque(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> None: ...

  def putLongRelease(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> None: ...

  def putLongUnaligned(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int, arg4: bool) -> None: ...

  def putLongVolatile(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> None: ...

  def putShort(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> None: ...

  def putShortOpaque(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> None: ...

  def putShortRelease(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> None: ...

  def putShortUnaligned(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int, arg4: bool) -> None: ...

  def putShortVolatile(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int) -> None: ...

  def setMemory(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int, arg4: int) -> None: ...

  def unload(self, arg0: ScopedMemoryAccess.Scope, arg1: int, arg2: bool, arg3: int) -> None: ...

  def unloadInternal(self, arg0: ScopedMemoryAccess.Scope, arg1: int, arg2: bool, arg3: int) -> None: ...

  def vectorizedMismatch(self, arg0: ScopedMemoryAccess.Scope, arg1: ScopedMemoryAccess.Scope, arg2: object, arg3: int, arg4: object, arg5: int, arg6: int, arg7: int) -> int: ...

  def weakCompareAndSetDouble(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: float, arg4: float) -> bool: ...

  def weakCompareAndSetDoubleAcquire(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: float, arg4: float) -> bool: ...

  def weakCompareAndSetDoublePlain(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: float, arg4: float) -> bool: ...

  def weakCompareAndSetDoubleRelease(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: float, arg4: float) -> bool: ...

  def weakCompareAndSetFloat(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: float, arg4: float) -> bool: ...

  def weakCompareAndSetFloatAcquire(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: float, arg4: float) -> bool: ...

  def weakCompareAndSetFloatPlain(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: float, arg4: float) -> bool: ...

  def weakCompareAndSetFloatRelease(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: float, arg4: float) -> bool: ...

  def weakCompareAndSetInt(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int, arg4: int) -> bool: ...

  def weakCompareAndSetIntAcquire(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int, arg4: int) -> bool: ...

  def weakCompareAndSetIntPlain(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int, arg4: int) -> bool: ...

  def weakCompareAndSetIntRelease(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int, arg4: int) -> bool: ...

  def weakCompareAndSetLong(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int, arg4: int) -> bool: ...

  def weakCompareAndSetLongAcquire(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int, arg4: int) -> bool: ...

  def weakCompareAndSetLongPlain(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int, arg4: int) -> bool: ...

  def weakCompareAndSetLongRelease(self, arg0: ScopedMemoryAccess.Scope, arg1: object, arg2: int, arg3: int, arg4: int) -> bool: ...

  @staticmethod
  def getScopedMemoryAccess() -> ScopedMemoryAccess: ...

  @staticmethod
  def isReadOnly(arg0: ByteBuffer) -> bool: ...

  @staticmethod
  def loadFromByteBuffer(arg0: Class[V], arg1: Class[E], arg2: int, arg3: ByteBuffer, arg4: int, arg5: VectorSupport.VectorSpecies, arg6: VectorSupport.LoadOperation) -> VectorSupport.Vector: ...

  @staticmethod
  def loadFromByteBufferMasked(arg0: Class[V], arg1: Class[M], arg2: Class[E], arg3: int, arg4: ByteBuffer, arg5: int, arg6: VectorSupport.VectorMask, arg7: VectorSupport.VectorSpecies, arg8: VectorSupport.LoadVectorMaskedOperation) -> VectorSupport.Vector: ...

  @staticmethod
  def storeIntoByteBuffer(arg0: Class[V], arg1: Class[E], arg2: int, arg3: VectorSupport.Vector, arg4: ByteBuffer, arg5: int, arg6: VectorSupport.StoreVectorOperation) -> None: ...

  @staticmethod
  def storeIntoByteBufferMasked(arg0: Class[V], arg1: Class[M], arg2: Class[E], arg3: int, arg4: VectorSupport.Vector, arg5: VectorSupport.VectorMask, arg6: ByteBuffer, arg7: int, arg8: VectorSupport.StoreVectorMaskedOperation) -> None: ...

  class Scope:

    def acquire0(self) -> None: ...

    def checkValidState(self) -> None: ...

    def ownerThread(self) -> Thread: ...

    def release0(self) -> None: ...

    class ScopedAccessError(Error):

      INSTANCE: ScopedMemoryAccess.Scope.ScopedAccessError

  class BufferAccess: ...

  class Scoped:

    def annotationType(self) -> Class[Annotation]: ...

    def equals(self, arg0: object) -> bool: ...

    def hashCode(self) -> int: ...

    def toString(self) -> str: ...


class Signal:

  def equals(self, arg0: object) -> bool: ...

  def getName(self) -> str: ...

  def getNumber(self) -> int: ...

  def hashCode(self) -> int: ...

  def toString(self) -> str: ...

  @staticmethod
  def handle(arg0: Signal, arg1: Signal.Handler) -> Signal.Handler: ...

  def __init__(self, arg0: str): ...

  class NativeHandler:

    SIG_DFL: Signal.Handler

    SIG_IGN: Signal.Handler

    @overload
    def handle(self, arg0: Signal) -> None: ...

    @overload
    def handle(self, arg0: Signal) -> None: ...

    def toString(self) -> str: ...

  class Handler:

    SIG_DFL: Signal.Handler

    SIG_IGN: Signal.Handler

    def handle(self, arg0: Signal) -> None: ...


class TerminatingThreadLocal[T](ThreadLocal):

  REGISTRY: ThreadLocal[Collection[TerminatingThreadLocal[Any]]]

  def remove(self) -> None: ...

  def set(self, arg0: object) -> None: ...

  @staticmethod
  def register(arg0: TerminatingThreadLocal[Any]) -> None: ...

  @staticmethod
  def threadTerminated() -> None: ...

  def __init__(self): ...


class Unsafe:

  ADDRESS_SIZE: int

  ARRAY_BOOLEAN_BASE_OFFSET: int

  ARRAY_BOOLEAN_INDEX_SCALE: int

  ARRAY_BYTE_BASE_OFFSET: int

  ARRAY_BYTE_INDEX_SCALE: int

  ARRAY_CHAR_BASE_OFFSET: int

  ARRAY_CHAR_INDEX_SCALE: int

  ARRAY_DOUBLE_BASE_OFFSET: int

  ARRAY_DOUBLE_INDEX_SCALE: int

  ARRAY_FLOAT_BASE_OFFSET: int

  ARRAY_FLOAT_INDEX_SCALE: int

  ARRAY_INT_BASE_OFFSET: int

  ARRAY_INT_INDEX_SCALE: int

  ARRAY_LONG_BASE_OFFSET: int

  ARRAY_LONG_INDEX_SCALE: int

  ARRAY_OBJECT_BASE_OFFSET: int

  ARRAY_OBJECT_INDEX_SCALE: int

  ARRAY_SHORT_BASE_OFFSET: int

  ARRAY_SHORT_INDEX_SCALE: int

  INVALID_FIELD_OFFSET: int

  def addressSize(self) -> int: ...

  def allocateInstance(self, arg0: Class[Any]) -> object: ...

  def allocateMemory(self, arg0: int) -> int: ...

  def allocateUninitializedArray(self, arg0: Class[Any], arg1: int) -> object: ...

  def arrayBaseOffset(self, arg0: Class[Any]) -> int: ...

  def arrayIndexScale(self, arg0: Class[Any]) -> int: ...

  def compareAndExchangeBoolean(self, arg0: object, arg1: int, arg2: bool, arg3: bool) -> bool: ...

  def compareAndExchangeBooleanAcquire(self, arg0: object, arg1: int, arg2: bool, arg3: bool) -> bool: ...

  def compareAndExchangeBooleanRelease(self, arg0: object, arg1: int, arg2: bool, arg3: bool) -> bool: ...

  def compareAndExchangeByte(self, arg0: object, arg1: int, arg2: int, arg3: int) -> int: ...

  def compareAndExchangeByteAcquire(self, arg0: object, arg1: int, arg2: int, arg3: int) -> int: ...

  def compareAndExchangeByteRelease(self, arg0: object, arg1: int, arg2: int, arg3: int) -> int: ...

  def compareAndExchangeChar(self, arg0: object, arg1: int, arg2: str, arg3: str) -> str: ...

  def compareAndExchangeCharAcquire(self, arg0: object, arg1: int, arg2: str, arg3: str) -> str: ...

  def compareAndExchangeCharRelease(self, arg0: object, arg1: int, arg2: str, arg3: str) -> str: ...

  def compareAndExchangeDouble(self, arg0: object, arg1: int, arg2: float, arg3: float) -> float: ...

  def compareAndExchangeDoubleAcquire(self, arg0: object, arg1: int, arg2: float, arg3: float) -> float: ...

  def compareAndExchangeDoubleRelease(self, arg0: object, arg1: int, arg2: float, arg3: float) -> float: ...

  def compareAndExchangeFloat(self, arg0: object, arg1: int, arg2: float, arg3: float) -> float: ...

  def compareAndExchangeFloatAcquire(self, arg0: object, arg1: int, arg2: float, arg3: float) -> float: ...

  def compareAndExchangeFloatRelease(self, arg0: object, arg1: int, arg2: float, arg3: float) -> float: ...

  def compareAndExchangeInt(self, arg0: object, arg1: int, arg2: int, arg3: int) -> int: ...

  def compareAndExchangeIntAcquire(self, arg0: object, arg1: int, arg2: int, arg3: int) -> int: ...

  def compareAndExchangeIntRelease(self, arg0: object, arg1: int, arg2: int, arg3: int) -> int: ...

  def compareAndExchangeLong(self, arg0: object, arg1: int, arg2: int, arg3: int) -> int: ...

  def compareAndExchangeLongAcquire(self, arg0: object, arg1: int, arg2: int, arg3: int) -> int: ...

  def compareAndExchangeLongRelease(self, arg0: object, arg1: int, arg2: int, arg3: int) -> int: ...

  def compareAndExchangeObject(self, arg0: object, arg1: int, arg2: object, arg3: object) -> object: ...

  def compareAndExchangeObjectAcquire(self, arg0: object, arg1: int, arg2: object, arg3: object) -> object: ...

  def compareAndExchangeObjectRelease(self, arg0: object, arg1: int, arg2: object, arg3: object) -> object: ...

  def compareAndExchangeReference(self, arg0: object, arg1: int, arg2: object, arg3: object) -> object: ...

  def compareAndExchangeReferenceAcquire(self, arg0: object, arg1: int, arg2: object, arg3: object) -> object: ...

  def compareAndExchangeReferenceRelease(self, arg0: object, arg1: int, arg2: object, arg3: object) -> object: ...

  def compareAndExchangeShort(self, arg0: object, arg1: int, arg2: int, arg3: int) -> int: ...

  def compareAndExchangeShortAcquire(self, arg0: object, arg1: int, arg2: int, arg3: int) -> int: ...

  def compareAndExchangeShortRelease(self, arg0: object, arg1: int, arg2: int, arg3: int) -> int: ...

  def compareAndSetBoolean(self, arg0: object, arg1: int, arg2: bool, arg3: bool) -> bool: ...

  def compareAndSetByte(self, arg0: object, arg1: int, arg2: int, arg3: int) -> bool: ...

  def compareAndSetChar(self, arg0: object, arg1: int, arg2: str, arg3: str) -> bool: ...

  def compareAndSetDouble(self, arg0: object, arg1: int, arg2: float, arg3: float) -> bool: ...

  def compareAndSetFloat(self, arg0: object, arg1: int, arg2: float, arg3: float) -> bool: ...

  def compareAndSetInt(self, arg0: object, arg1: int, arg2: int, arg3: int) -> bool: ...

  def compareAndSetLong(self, arg0: object, arg1: int, arg2: int, arg3: int) -> bool: ...

  def compareAndSetObject(self, arg0: object, arg1: int, arg2: object, arg3: object) -> bool: ...

  def compareAndSetReference(self, arg0: object, arg1: int, arg2: object, arg3: object) -> bool: ...

  def compareAndSetShort(self, arg0: object, arg1: int, arg2: int, arg3: int) -> bool: ...

  @overload
  def copyMemory(self, arg0: int, arg1: int, arg2: int) -> None: ...

  @overload
  def copyMemory(self, arg0: object, arg1: int, arg2: object, arg3: int, arg4: int) -> None: ...

  @overload
  def copySwapMemory(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...

  @overload
  def copySwapMemory(self, arg0: object, arg1: int, arg2: object, arg3: int, arg4: int, arg5: int) -> None: ...

  def dataCacheLineAlignDown(self, arg0: int) -> int: ...

  def dataCacheLineFlushSize(self) -> int: ...

  def defineClass(self, arg0: str, arg1: list[int], arg2: int, arg3: int, arg4: ClassLoader, arg5: ProtectionDomain) -> Class[Any]: ...

  def defineClass0(self, arg0: str, arg1: list[int], arg2: int, arg3: int, arg4: ClassLoader, arg5: ProtectionDomain) -> Class[Any]: ...

  def ensureClassInitialized(self, arg0: Class[Any]) -> None: ...

  def freeMemory(self, arg0: int) -> None: ...

  def fullFence(self) -> None: ...

  @overload
  def getAddress(self, arg0: int) -> int: ...

  @overload
  def getAddress(self, arg0: object, arg1: int) -> int: ...

  def getAndAddByte(self, arg0: object, arg1: int, arg2: int) -> int: ...

  def getAndAddByteAcquire(self, arg0: object, arg1: int, arg2: int) -> int: ...

  def getAndAddByteRelease(self, arg0: object, arg1: int, arg2: int) -> int: ...

  def getAndAddChar(self, arg0: object, arg1: int, arg2: str) -> str: ...

  def getAndAddCharAcquire(self, arg0: object, arg1: int, arg2: str) -> str: ...

  def getAndAddCharRelease(self, arg0: object, arg1: int, arg2: str) -> str: ...

  def getAndAddDouble(self, arg0: object, arg1: int, arg2: float) -> float: ...

  def getAndAddDoubleAcquire(self, arg0: object, arg1: int, arg2: float) -> float: ...

  def getAndAddDoubleRelease(self, arg0: object, arg1: int, arg2: float) -> float: ...

  def getAndAddFloat(self, arg0: object, arg1: int, arg2: float) -> float: ...

  def getAndAddFloatAcquire(self, arg0: object, arg1: int, arg2: float) -> float: ...

  def getAndAddFloatRelease(self, arg0: object, arg1: int, arg2: float) -> float: ...

  def getAndAddInt(self, arg0: object, arg1: int, arg2: int) -> int: ...

  def getAndAddIntAcquire(self, arg0: object, arg1: int, arg2: int) -> int: ...

  def getAndAddIntRelease(self, arg0: object, arg1: int, arg2: int) -> int: ...

  def getAndAddLong(self, arg0: object, arg1: int, arg2: int) -> int: ...

  def getAndAddLongAcquire(self, arg0: object, arg1: int, arg2: int) -> int: ...

  def getAndAddLongRelease(self, arg0: object, arg1: int, arg2: int) -> int: ...

  def getAndAddShort(self, arg0: object, arg1: int, arg2: int) -> int: ...

  def getAndAddShortAcquire(self, arg0: object, arg1: int, arg2: int) -> int: ...

  def getAndAddShortRelease(self, arg0: object, arg1: int, arg2: int) -> int: ...

  def getAndBitwiseAndBoolean(self, arg0: object, arg1: int, arg2: bool) -> bool: ...

  def getAndBitwiseAndBooleanAcquire(self, arg0: object, arg1: int, arg2: bool) -> bool: ...

  def getAndBitwiseAndBooleanRelease(self, arg0: object, arg1: int, arg2: bool) -> bool: ...

  def getAndBitwiseAndByte(self, arg0: object, arg1: int, arg2: int) -> int: ...

  def getAndBitwiseAndByteAcquire(self, arg0: object, arg1: int, arg2: int) -> int: ...

  def getAndBitwiseAndByteRelease(self, arg0: object, arg1: int, arg2: int) -> int: ...

  def getAndBitwiseAndChar(self, arg0: object, arg1: int, arg2: str) -> str: ...

  def getAndBitwiseAndCharAcquire(self, arg0: object, arg1: int, arg2: str) -> str: ...

  def getAndBitwiseAndCharRelease(self, arg0: object, arg1: int, arg2: str) -> str: ...

  def getAndBitwiseAndInt(self, arg0: object, arg1: int, arg2: int) -> int: ...

  def getAndBitwiseAndIntAcquire(self, arg0: object, arg1: int, arg2: int) -> int: ...

  def getAndBitwiseAndIntRelease(self, arg0: object, arg1: int, arg2: int) -> int: ...

  def getAndBitwiseAndLong(self, arg0: object, arg1: int, arg2: int) -> int: ...

  def getAndBitwiseAndLongAcquire(self, arg0: object, arg1: int, arg2: int) -> int: ...

  def getAndBitwiseAndLongRelease(self, arg0: object, arg1: int, arg2: int) -> int: ...

  def getAndBitwiseAndShort(self, arg0: object, arg1: int, arg2: int) -> int: ...

  def getAndBitwiseAndShortAcquire(self, arg0: object, arg1: int, arg2: int) -> int: ...

  def getAndBitwiseAndShortRelease(self, arg0: object, arg1: int, arg2: int) -> int: ...

  def getAndBitwiseOrBoolean(self, arg0: object, arg1: int, arg2: bool) -> bool: ...

  def getAndBitwiseOrBooleanAcquire(self, arg0: object, arg1: int, arg2: bool) -> bool: ...

  def getAndBitwiseOrBooleanRelease(self, arg0: object, arg1: int, arg2: bool) -> bool: ...

  def getAndBitwiseOrByte(self, arg0: object, arg1: int, arg2: int) -> int: ...

  def getAndBitwiseOrByteAcquire(self, arg0: object, arg1: int, arg2: int) -> int: ...

  def getAndBitwiseOrByteRelease(self, arg0: object, arg1: int, arg2: int) -> int: ...

  def getAndBitwiseOrChar(self, arg0: object, arg1: int, arg2: str) -> str: ...

  def getAndBitwiseOrCharAcquire(self, arg0: object, arg1: int, arg2: str) -> str: ...

  def getAndBitwiseOrCharRelease(self, arg0: object, arg1: int, arg2: str) -> str: ...

  def getAndBitwiseOrInt(self, arg0: object, arg1: int, arg2: int) -> int: ...

  def getAndBitwiseOrIntAcquire(self, arg0: object, arg1: int, arg2: int) -> int: ...

  def getAndBitwiseOrIntRelease(self, arg0: object, arg1: int, arg2: int) -> int: ...

  def getAndBitwiseOrLong(self, arg0: object, arg1: int, arg2: int) -> int: ...

  def getAndBitwiseOrLongAcquire(self, arg0: object, arg1: int, arg2: int) -> int: ...

  def getAndBitwiseOrLongRelease(self, arg0: object, arg1: int, arg2: int) -> int: ...

  def getAndBitwiseOrShort(self, arg0: object, arg1: int, arg2: int) -> int: ...

  def getAndBitwiseOrShortAcquire(self, arg0: object, arg1: int, arg2: int) -> int: ...

  def getAndBitwiseOrShortRelease(self, arg0: object, arg1: int, arg2: int) -> int: ...

  def getAndBitwiseXorBoolean(self, arg0: object, arg1: int, arg2: bool) -> bool: ...

  def getAndBitwiseXorBooleanAcquire(self, arg0: object, arg1: int, arg2: bool) -> bool: ...

  def getAndBitwiseXorBooleanRelease(self, arg0: object, arg1: int, arg2: bool) -> bool: ...

  def getAndBitwiseXorByte(self, arg0: object, arg1: int, arg2: int) -> int: ...

  def getAndBitwiseXorByteAcquire(self, arg0: object, arg1: int, arg2: int) -> int: ...

  def getAndBitwiseXorByteRelease(self, arg0: object, arg1: int, arg2: int) -> int: ...

  def getAndBitwiseXorChar(self, arg0: object, arg1: int, arg2: str) -> str: ...

  def getAndBitwiseXorCharAcquire(self, arg0: object, arg1: int, arg2: str) -> str: ...

  def getAndBitwiseXorCharRelease(self, arg0: object, arg1: int, arg2: str) -> str: ...

  def getAndBitwiseXorInt(self, arg0: object, arg1: int, arg2: int) -> int: ...

  def getAndBitwiseXorIntAcquire(self, arg0: object, arg1: int, arg2: int) -> int: ...

  def getAndBitwiseXorIntRelease(self, arg0: object, arg1: int, arg2: int) -> int: ...

  def getAndBitwiseXorLong(self, arg0: object, arg1: int, arg2: int) -> int: ...

  def getAndBitwiseXorLongAcquire(self, arg0: object, arg1: int, arg2: int) -> int: ...

  def getAndBitwiseXorLongRelease(self, arg0: object, arg1: int, arg2: int) -> int: ...

  def getAndBitwiseXorShort(self, arg0: object, arg1: int, arg2: int) -> int: ...

  def getAndBitwiseXorShortAcquire(self, arg0: object, arg1: int, arg2: int) -> int: ...

  def getAndBitwiseXorShortRelease(self, arg0: object, arg1: int, arg2: int) -> int: ...

  def getAndSetBoolean(self, arg0: object, arg1: int, arg2: bool) -> bool: ...

  def getAndSetBooleanAcquire(self, arg0: object, arg1: int, arg2: bool) -> bool: ...

  def getAndSetBooleanRelease(self, arg0: object, arg1: int, arg2: bool) -> bool: ...

  def getAndSetByte(self, arg0: object, arg1: int, arg2: int) -> int: ...

  def getAndSetByteAcquire(self, arg0: object, arg1: int, arg2: int) -> int: ...

  def getAndSetByteRelease(self, arg0: object, arg1: int, arg2: int) -> int: ...

  def getAndSetChar(self, arg0: object, arg1: int, arg2: str) -> str: ...

  def getAndSetCharAcquire(self, arg0: object, arg1: int, arg2: str) -> str: ...

  def getAndSetCharRelease(self, arg0: object, arg1: int, arg2: str) -> str: ...

  def getAndSetDouble(self, arg0: object, arg1: int, arg2: float) -> float: ...

  def getAndSetDoubleAcquire(self, arg0: object, arg1: int, arg2: float) -> float: ...

  def getAndSetDoubleRelease(self, arg0: object, arg1: int, arg2: float) -> float: ...

  def getAndSetFloat(self, arg0: object, arg1: int, arg2: float) -> float: ...

  def getAndSetFloatAcquire(self, arg0: object, arg1: int, arg2: float) -> float: ...

  def getAndSetFloatRelease(self, arg0: object, arg1: int, arg2: float) -> float: ...

  def getAndSetInt(self, arg0: object, arg1: int, arg2: int) -> int: ...

  def getAndSetIntAcquire(self, arg0: object, arg1: int, arg2: int) -> int: ...

  def getAndSetIntRelease(self, arg0: object, arg1: int, arg2: int) -> int: ...

  def getAndSetLong(self, arg0: object, arg1: int, arg2: int) -> int: ...

  def getAndSetLongAcquire(self, arg0: object, arg1: int, arg2: int) -> int: ...

  def getAndSetLongRelease(self, arg0: object, arg1: int, arg2: int) -> int: ...

  def getAndSetObject(self, arg0: object, arg1: int, arg2: object) -> object: ...

  def getAndSetObjectAcquire(self, arg0: object, arg1: int, arg2: object) -> object: ...

  def getAndSetObjectRelease(self, arg0: object, arg1: int, arg2: object) -> object: ...

  def getAndSetReference(self, arg0: object, arg1: int, arg2: object) -> object: ...

  def getAndSetReferenceAcquire(self, arg0: object, arg1: int, arg2: object) -> object: ...

  def getAndSetReferenceRelease(self, arg0: object, arg1: int, arg2: object) -> object: ...

  def getAndSetShort(self, arg0: object, arg1: int, arg2: int) -> int: ...

  def getAndSetShortAcquire(self, arg0: object, arg1: int, arg2: int) -> int: ...

  def getAndSetShortRelease(self, arg0: object, arg1: int, arg2: int) -> int: ...

  def getBoolean(self, arg0: object, arg1: int) -> bool: ...

  def getBooleanAcquire(self, arg0: object, arg1: int) -> bool: ...

  def getBooleanOpaque(self, arg0: object, arg1: int) -> bool: ...

  def getBooleanVolatile(self, arg0: object, arg1: int) -> bool: ...

  @overload
  def getByte(self, arg0: int) -> int: ...

  @overload
  def getByte(self, arg0: object, arg1: int) -> int: ...

  def getByteAcquire(self, arg0: object, arg1: int) -> int: ...

  def getByteOpaque(self, arg0: object, arg1: int) -> int: ...

  def getByteVolatile(self, arg0: object, arg1: int) -> int: ...

  @overload
  def getChar(self, arg0: int) -> str: ...

  @overload
  def getChar(self, arg0: object, arg1: int) -> str: ...

  def getCharAcquire(self, arg0: object, arg1: int) -> str: ...

  def getCharOpaque(self, arg0: object, arg1: int) -> str: ...

  @overload
  def getCharUnaligned(self, arg0: object, arg1: int) -> str: ...

  @overload
  def getCharUnaligned(self, arg0: object, arg1: int, arg2: bool) -> str: ...

  def getCharVolatile(self, arg0: object, arg1: int) -> str: ...

  @overload
  def getDouble(self, arg0: int) -> float: ...

  @overload
  def getDouble(self, arg0: object, arg1: int) -> float: ...

  def getDoubleAcquire(self, arg0: object, arg1: int) -> float: ...

  def getDoubleOpaque(self, arg0: object, arg1: int) -> float: ...

  def getDoubleVolatile(self, arg0: object, arg1: int) -> float: ...

  @overload
  def getFloat(self, arg0: int) -> float: ...

  @overload
  def getFloat(self, arg0: object, arg1: int) -> float: ...

  def getFloatAcquire(self, arg0: object, arg1: int) -> float: ...

  def getFloatOpaque(self, arg0: object, arg1: int) -> float: ...

  def getFloatVolatile(self, arg0: object, arg1: int) -> float: ...

  @overload
  def getInt(self, arg0: int) -> int: ...

  @overload
  def getInt(self, arg0: object, arg1: int) -> int: ...

  def getIntAcquire(self, arg0: object, arg1: int) -> int: ...

  def getIntOpaque(self, arg0: object, arg1: int) -> int: ...

  @overload
  def getIntUnaligned(self, arg0: object, arg1: int) -> int: ...

  @overload
  def getIntUnaligned(self, arg0: object, arg1: int, arg2: bool) -> int: ...

  def getIntVolatile(self, arg0: object, arg1: int) -> int: ...

  def getLoadAverage(self, arg0: list[float], arg1: int) -> int: ...

  @overload
  def getLong(self, arg0: int) -> int: ...

  @overload
  def getLong(self, arg0: object, arg1: int) -> int: ...

  def getLongAcquire(self, arg0: object, arg1: int) -> int: ...

  def getLongOpaque(self, arg0: object, arg1: int) -> int: ...

  @overload
  def getLongUnaligned(self, arg0: object, arg1: int) -> int: ...

  @overload
  def getLongUnaligned(self, arg0: object, arg1: int, arg2: bool) -> int: ...

  def getLongVolatile(self, arg0: object, arg1: int) -> int: ...

  def getObject(self, arg0: object, arg1: int) -> object: ...

  def getObjectAcquire(self, arg0: object, arg1: int) -> object: ...

  def getObjectOpaque(self, arg0: object, arg1: int) -> object: ...

  def getObjectVolatile(self, arg0: object, arg1: int) -> object: ...

  def getReference(self, arg0: object, arg1: int) -> object: ...

  def getReferenceAcquire(self, arg0: object, arg1: int) -> object: ...

  def getReferenceOpaque(self, arg0: object, arg1: int) -> object: ...

  def getReferenceVolatile(self, arg0: object, arg1: int) -> object: ...

  @overload
  def getShort(self, arg0: int) -> int: ...

  @overload
  def getShort(self, arg0: object, arg1: int) -> int: ...

  def getShortAcquire(self, arg0: object, arg1: int) -> int: ...

  def getShortOpaque(self, arg0: object, arg1: int) -> int: ...

  @overload
  def getShortUnaligned(self, arg0: object, arg1: int) -> int: ...

  @overload
  def getShortUnaligned(self, arg0: object, arg1: int, arg2: bool) -> int: ...

  def getShortVolatile(self, arg0: object, arg1: int) -> int: ...

  def getUncompressedObject(self, arg0: int) -> object: ...

  def invokeCleaner(self, arg0: ByteBuffer) -> None: ...

  def isBigEndian(self) -> bool: ...

  def loadFence(self) -> None: ...

  def loadLoadFence(self) -> None: ...

  @overload
  def objectFieldOffset(self, arg0: Field) -> int: ...

  @overload
  def objectFieldOffset(self, arg0: Class[Any], arg1: str) -> int: ...

  def pageSize(self) -> int: ...

  def park(self, arg0: bool, arg1: int) -> None: ...

  @overload
  def putAddress(self, arg0: int, arg1: int) -> None: ...

  @overload
  def putAddress(self, arg0: object, arg1: int, arg2: int) -> None: ...

  def putBoolean(self, arg0: object, arg1: int, arg2: bool) -> None: ...

  def putBooleanOpaque(self, arg0: object, arg1: int, arg2: bool) -> None: ...

  def putBooleanRelease(self, arg0: object, arg1: int, arg2: bool) -> None: ...

  def putBooleanVolatile(self, arg0: object, arg1: int, arg2: bool) -> None: ...

  @overload
  def putByte(self, arg0: int, arg1: int) -> None: ...

  @overload
  def putByte(self, arg0: object, arg1: int, arg2: int) -> None: ...

  def putByteOpaque(self, arg0: object, arg1: int, arg2: int) -> None: ...

  def putByteRelease(self, arg0: object, arg1: int, arg2: int) -> None: ...

  def putByteVolatile(self, arg0: object, arg1: int, arg2: int) -> None: ...

  @overload
  def putChar(self, arg0: int, arg1: str) -> None: ...

  @overload
  def putChar(self, arg0: object, arg1: int, arg2: str) -> None: ...

  def putCharOpaque(self, arg0: object, arg1: int, arg2: str) -> None: ...

  def putCharRelease(self, arg0: object, arg1: int, arg2: str) -> None: ...

  @overload
  def putCharUnaligned(self, arg0: object, arg1: int, arg2: str) -> None: ...

  @overload
  def putCharUnaligned(self, arg0: object, arg1: int, arg2: str, arg3: bool) -> None: ...

  def putCharVolatile(self, arg0: object, arg1: int, arg2: str) -> None: ...

  @overload
  def putDouble(self, arg0: int, arg1: float) -> None: ...

  @overload
  def putDouble(self, arg0: object, arg1: int, arg2: float) -> None: ...

  def putDoubleOpaque(self, arg0: object, arg1: int, arg2: float) -> None: ...

  def putDoubleRelease(self, arg0: object, arg1: int, arg2: float) -> None: ...

  def putDoubleVolatile(self, arg0: object, arg1: int, arg2: float) -> None: ...

  @overload
  def putFloat(self, arg0: int, arg1: float) -> None: ...

  @overload
  def putFloat(self, arg0: object, arg1: int, arg2: float) -> None: ...

  def putFloatOpaque(self, arg0: object, arg1: int, arg2: float) -> None: ...

  def putFloatRelease(self, arg0: object, arg1: int, arg2: float) -> None: ...

  def putFloatVolatile(self, arg0: object, arg1: int, arg2: float) -> None: ...

  @overload
  def putInt(self, arg0: int, arg1: int) -> None: ...

  @overload
  def putInt(self, arg0: object, arg1: int, arg2: int) -> None: ...

  def putIntOpaque(self, arg0: object, arg1: int, arg2: int) -> None: ...

  def putIntRelease(self, arg0: object, arg1: int, arg2: int) -> None: ...

  @overload
  def putIntUnaligned(self, arg0: object, arg1: int, arg2: int) -> None: ...

  @overload
  def putIntUnaligned(self, arg0: object, arg1: int, arg2: int, arg3: bool) -> None: ...

  def putIntVolatile(self, arg0: object, arg1: int, arg2: int) -> None: ...

  @overload
  def putLong(self, arg0: int, arg1: int) -> None: ...

  @overload
  def putLong(self, arg0: object, arg1: int, arg2: int) -> None: ...

  def putLongOpaque(self, arg0: object, arg1: int, arg2: int) -> None: ...

  def putLongRelease(self, arg0: object, arg1: int, arg2: int) -> None: ...

  @overload
  def putLongUnaligned(self, arg0: object, arg1: int, arg2: int) -> None: ...

  @overload
  def putLongUnaligned(self, arg0: object, arg1: int, arg2: int, arg3: bool) -> None: ...

  def putLongVolatile(self, arg0: object, arg1: int, arg2: int) -> None: ...

  def putObject(self, arg0: object, arg1: int, arg2: object) -> None: ...

  def putObjectOpaque(self, arg0: object, arg1: int, arg2: object) -> None: ...

  def putObjectRelease(self, arg0: object, arg1: int, arg2: object) -> None: ...

  def putObjectVolatile(self, arg0: object, arg1: int, arg2: object) -> None: ...

  def putReference(self, arg0: object, arg1: int, arg2: object) -> None: ...

  def putReferenceOpaque(self, arg0: object, arg1: int, arg2: object) -> None: ...

  def putReferenceRelease(self, arg0: object, arg1: int, arg2: object) -> None: ...

  def putReferenceVolatile(self, arg0: object, arg1: int, arg2: object) -> None: ...

  @overload
  def putShort(self, arg0: int, arg1: int) -> None: ...

  @overload
  def putShort(self, arg0: object, arg1: int, arg2: int) -> None: ...

  def putShortOpaque(self, arg0: object, arg1: int, arg2: int) -> None: ...

  def putShortRelease(self, arg0: object, arg1: int, arg2: int) -> None: ...

  @overload
  def putShortUnaligned(self, arg0: object, arg1: int, arg2: int) -> None: ...

  @overload
  def putShortUnaligned(self, arg0: object, arg1: int, arg2: int, arg3: bool) -> None: ...

  def putShortVolatile(self, arg0: object, arg1: int, arg2: int) -> None: ...

  def reallocateMemory(self, arg0: int, arg1: int) -> int: ...

  @overload
  def setMemory(self, arg0: int, arg1: int, arg2: int) -> None: ...

  @overload
  def setMemory(self, arg0: object, arg1: int, arg2: int, arg3: int) -> None: ...

  def shouldBeInitialized(self, arg0: Class[Any]) -> bool: ...

  def staticFieldBase(self, arg0: Field) -> object: ...

  def staticFieldOffset(self, arg0: Field) -> int: ...

  def storeFence(self) -> None: ...

  def storeStoreFence(self) -> None: ...

  def throwException(self, arg0: Throwable) -> None: ...

  def unalignedAccess(self) -> bool: ...

  def unpark(self, arg0: object) -> None: ...

  def weakCompareAndSetBoolean(self, arg0: object, arg1: int, arg2: bool, arg3: bool) -> bool: ...

  def weakCompareAndSetBooleanAcquire(self, arg0: object, arg1: int, arg2: bool, arg3: bool) -> bool: ...

  def weakCompareAndSetBooleanPlain(self, arg0: object, arg1: int, arg2: bool, arg3: bool) -> bool: ...

  def weakCompareAndSetBooleanRelease(self, arg0: object, arg1: int, arg2: bool, arg3: bool) -> bool: ...

  def weakCompareAndSetByte(self, arg0: object, arg1: int, arg2: int, arg3: int) -> bool: ...

  def weakCompareAndSetByteAcquire(self, arg0: object, arg1: int, arg2: int, arg3: int) -> bool: ...

  def weakCompareAndSetBytePlain(self, arg0: object, arg1: int, arg2: int, arg3: int) -> bool: ...

  def weakCompareAndSetByteRelease(self, arg0: object, arg1: int, arg2: int, arg3: int) -> bool: ...

  def weakCompareAndSetChar(self, arg0: object, arg1: int, arg2: str, arg3: str) -> bool: ...

  def weakCompareAndSetCharAcquire(self, arg0: object, arg1: int, arg2: str, arg3: str) -> bool: ...

  def weakCompareAndSetCharPlain(self, arg0: object, arg1: int, arg2: str, arg3: str) -> bool: ...

  def weakCompareAndSetCharRelease(self, arg0: object, arg1: int, arg2: str, arg3: str) -> bool: ...

  def weakCompareAndSetDouble(self, arg0: object, arg1: int, arg2: float, arg3: float) -> bool: ...

  def weakCompareAndSetDoubleAcquire(self, arg0: object, arg1: int, arg2: float, arg3: float) -> bool: ...

  def weakCompareAndSetDoublePlain(self, arg0: object, arg1: int, arg2: float, arg3: float) -> bool: ...

  def weakCompareAndSetDoubleRelease(self, arg0: object, arg1: int, arg2: float, arg3: float) -> bool: ...

  def weakCompareAndSetFloat(self, arg0: object, arg1: int, arg2: float, arg3: float) -> bool: ...

  def weakCompareAndSetFloatAcquire(self, arg0: object, arg1: int, arg2: float, arg3: float) -> bool: ...

  def weakCompareAndSetFloatPlain(self, arg0: object, arg1: int, arg2: float, arg3: float) -> bool: ...

  def weakCompareAndSetFloatRelease(self, arg0: object, arg1: int, arg2: float, arg3: float) -> bool: ...

  def weakCompareAndSetInt(self, arg0: object, arg1: int, arg2: int, arg3: int) -> bool: ...

  def weakCompareAndSetIntAcquire(self, arg0: object, arg1: int, arg2: int, arg3: int) -> bool: ...

  def weakCompareAndSetIntPlain(self, arg0: object, arg1: int, arg2: int, arg3: int) -> bool: ...

  def weakCompareAndSetIntRelease(self, arg0: object, arg1: int, arg2: int, arg3: int) -> bool: ...

  def weakCompareAndSetLong(self, arg0: object, arg1: int, arg2: int, arg3: int) -> bool: ...

  def weakCompareAndSetLongAcquire(self, arg0: object, arg1: int, arg2: int, arg3: int) -> bool: ...

  def weakCompareAndSetLongPlain(self, arg0: object, arg1: int, arg2: int, arg3: int) -> bool: ...

  def weakCompareAndSetLongRelease(self, arg0: object, arg1: int, arg2: int, arg3: int) -> bool: ...

  def weakCompareAndSetObject(self, arg0: object, arg1: int, arg2: object, arg3: object) -> bool: ...

  def weakCompareAndSetObjectAcquire(self, arg0: object, arg1: int, arg2: object, arg3: object) -> bool: ...

  def weakCompareAndSetObjectPlain(self, arg0: object, arg1: int, arg2: object, arg3: object) -> bool: ...

  def weakCompareAndSetObjectRelease(self, arg0: object, arg1: int, arg2: object, arg3: object) -> bool: ...

  def weakCompareAndSetReference(self, arg0: object, arg1: int, arg2: object, arg3: object) -> bool: ...

  def weakCompareAndSetReferenceAcquire(self, arg0: object, arg1: int, arg2: object, arg3: object) -> bool: ...

  def weakCompareAndSetReferencePlain(self, arg0: object, arg1: int, arg2: object, arg3: object) -> bool: ...

  def weakCompareAndSetReferenceRelease(self, arg0: object, arg1: int, arg2: object, arg3: object) -> bool: ...

  def weakCompareAndSetShort(self, arg0: object, arg1: int, arg2: int, arg3: int) -> bool: ...

  def weakCompareAndSetShortAcquire(self, arg0: object, arg1: int, arg2: int, arg3: int) -> bool: ...

  def weakCompareAndSetShortPlain(self, arg0: object, arg1: int, arg2: int, arg3: int) -> bool: ...

  def weakCompareAndSetShortRelease(self, arg0: object, arg1: int, arg2: int, arg3: int) -> bool: ...

  def writebackMemory(self, arg0: int, arg1: int) -> None: ...

  @staticmethod
  def getUnsafe() -> Unsafe: ...

  @staticmethod
  def isWritebackEnabled() -> bool: ...


class UnsafeConstants: ...


class VM:

  @staticmethod
  def addFinalRefCount(arg0: int) -> None: ...

  @staticmethod
  def awaitInitLevel(arg0: int) -> None: ...

  @staticmethod
  def classFileVersion() -> int: ...

  @staticmethod
  def getBufferPools() -> List[VM.BufferPool]: ...

  @staticmethod
  def getFinalRefCount() -> int: ...

  @staticmethod
  def getNanoTimeAdjustment(arg0: int) -> int: ...

  @staticmethod
  def getPeakFinalRefCount() -> int: ...

  @staticmethod
  def getRuntimeArguments() -> list[str]: ...

  @staticmethod
  def getSavedProperties() -> Map[str, str]: ...

  @staticmethod
  def getSavedProperty(arg0: str) -> str: ...

  @staticmethod
  def getegid() -> int: ...

  @staticmethod
  def geteuid() -> int: ...

  @staticmethod
  def getgid() -> int: ...

  @staticmethod
  def getuid() -> int: ...

  @staticmethod
  @overload
  def initLevel() -> int: ...

  @staticmethod
  @overload
  def initLevel(arg0: int) -> None: ...

  @staticmethod
  def initializeOSEnvironment() -> None: ...

  @staticmethod
  def isBooted() -> bool: ...

  @staticmethod
  def isDirectMemoryPageAligned() -> bool: ...

  @staticmethod
  def isJavaLangInvokeInited() -> bool: ...

  @staticmethod
  def isModuleSystemInited() -> bool: ...

  @staticmethod
  def isSetUID() -> bool: ...

  @staticmethod
  def isShutdown() -> bool: ...

  @staticmethod
  def isSupportedClassFileVersion(arg0: int, arg1: int) -> bool: ...

  @staticmethod
  def isSupportedModuleDescriptorVersion(arg0: int, arg1: int) -> bool: ...

  @staticmethod
  def isSystemDomainLoader(arg0: ClassLoader) -> bool: ...

  @staticmethod
  def latestUserDefinedLoader() -> ClassLoader: ...

  @staticmethod
  def maxDirectMemory() -> int: ...

  @staticmethod
  def saveProperties(arg0: Map[str, str]) -> None: ...

  @staticmethod
  def setJavaLangInvokeInited() -> None: ...

  @staticmethod
  def shutdown() -> None: ...

  @staticmethod
  def toThreadState(arg0: int) -> Thread.State: ...

  def __init__(self): ...

  class BufferPoolsHolder: ...

  class BufferPool:

    def getCount(self) -> int: ...

    def getMemoryUsed(self) -> int: ...

    def getName(self) -> str: ...

    def getTotalCapacity(self) -> int: ...

