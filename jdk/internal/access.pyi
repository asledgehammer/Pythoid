from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.io import Console, FileDescriptor, FilePermission, File, RandomAccessFile, PrintStream, ObjectInputFilter, ObjectInputStream
from java.lang import Class, Module, ModuleLayer, ClassLoader, Package, Enum, Runnable, Thread, Throwable
from java.lang.annotation import Annotation
from java.lang.invoke import MethodType, MethodHandle, VarHandle, MethodHandles
from java.lang.module import ModuleDescriptor, ModuleFinder, Configuration
from java.lang.reflect import Constructor, Method, Executable, Field
from java.net import URI, HttpCookie, Inet6Address, Inet4Address, InetAddress, URL, URLStreamHandler
from java.nio import ByteOrder, Buffer, ByteBuffer
from java.nio.charset import Charset
from java.security import ProtectionDomain, AccessControlContext, PrivilegedAction, PermissionCollection, Signature, PrivateKey, SecureRandom, PublicKey, CodeSource
from java.security.cert import Certificate
from java.security.spec import AlgorithmParameterSpec, EncodedKeySpec
from java.util import Set, Map, List, Collection, Enumeration, Locale, ResourceBundle
from java.util.concurrent import ConcurrentHashMap
from java.util.jar import JarFile, JarEntry, Manifest, Attributes
from java.util.stream import Stream
from java.util.zip import ZipFile, ZipEntry
from javax.crypto import SealedObject, Cipher
from javax.crypto.spec import SecretKeySpec
from jdk.internal.access.foreign import MemorySegmentProxy, UnmapperProxy
from jdk.internal.invoke import NativeEntryPoint
from jdk.internal.misc import VM
from jdk.internal.module import ServicesCatalog
from jdk.internal.ref import PhantomCleanable
from jdk.internal.reflect import ConstantPool, ConstructorAccessor, MethodAccessor
from sun.nio.ch import Interruptible
from sun.reflect.annotation import AnnotationType

E = TypeVar('E', default=Any)
T = TypeVar('T', default=Any)

class JavaAWTAccess:

  def getAppletContext(self) -> object: ...


class JavaAWTFontAccess:

  def getTextAttributeConstant(self, arg0: str) -> object: ...

  def shape(self, arg0: object, arg1: list[str], arg2: int, arg3: int) -> None: ...


class JavaBeansAccess:

  def getConstructorPropertiesValue(self, arg0: Constructor[Any]) -> list[str]: ...

  def getReadMethod(self, arg0: Class[Any], arg1: str) -> Method: ...


class JavaIOAccess:

  def charset(self) -> Charset: ...

  def console(self) -> Console: ...


class JavaIOFileDescriptorAccess:

  def close(self, arg0: FileDescriptor) -> None: ...

  def get(self, arg0: FileDescriptor) -> int: ...

  def getAppend(self, arg0: FileDescriptor) -> bool: ...

  def getHandle(self, arg0: FileDescriptor) -> int: ...

  @overload
  def registerCleanup(self, arg0: FileDescriptor) -> None: ...

  @overload
  def registerCleanup(self, arg0: FileDescriptor, arg1: PhantomCleanable[FileDescriptor]) -> None: ...

  def set(self, arg0: FileDescriptor, arg1: int) -> None: ...

  def setAppend(self, arg0: FileDescriptor, arg1: bool) -> None: ...

  def setHandle(self, arg0: FileDescriptor, arg1: int) -> None: ...

  def unregisterCleanup(self, arg0: FileDescriptor) -> None: ...


class JavaIOFilePermissionAccess:

  def newPermPlusAltPath(self, arg0: FilePermission) -> FilePermission: ...

  def newPermUsingAltPath(self, arg0: FilePermission) -> FilePermission: ...


class JavaIORandomAccessFileAccess:

  def openAndDelete(self, arg0: File, arg1: str) -> RandomAccessFile: ...


class JavaLangAccess:

  def addEnableNativeAccess(self, arg0: Module) -> Module: ...

  def addEnableNativeAccessAllUnnamed(self) -> None: ...

  @overload
  def addExports(self, arg0: Module, arg1: str) -> None: ...

  @overload
  def addExports(self, arg0: Module, arg1: str, arg2: Module) -> None: ...

  def addExportsToAllUnnamed(self, arg0: Module, arg1: str) -> None: ...

  def addNonExportedPackages(self, arg0: ModuleLayer) -> None: ...

  def addOpens(self, arg0: Module, arg1: str, arg2: Module) -> None: ...

  @overload
  def addOpensToAllUnnamed(self, arg0: Module, arg1: str) -> None: ...

  @overload
  def addOpensToAllUnnamed(self, arg0: Module, arg1: Set[str], arg2: Set[str]) -> None: ...

  def addReads(self, arg0: Module, arg1: Module) -> None: ...

  def addReadsAllUnnamed(self, arg0: Module) -> None: ...

  def addUses(self, arg0: Module, arg1: Class[Any]) -> None: ...

  def bindToLoader(self, arg0: ModuleLayer, arg1: ClassLoader) -> None: ...

  def blockedOn(self, arg0: Interruptible) -> None: ...

  def casAnnotationType(self, arg0: Class[Any], arg1: AnnotationType, arg2: AnnotationType) -> bool: ...

  def classData(self, arg0: Class[Any]) -> object: ...

  def createOrGetClassLoaderValueMap(self, arg0: ClassLoader) -> ConcurrentHashMap[Any, Any]: ...

  def decodeASCII(self, arg0: list[int], arg1: int, arg2: list[str], arg3: int, arg4: int) -> int: ...

  @overload
  def defineClass(self, arg0: ClassLoader, arg1: str, arg2: list[int], arg3: ProtectionDomain, arg4: str) -> Class[Any]: ...

  @overload
  def defineClass(self, arg0: ClassLoader, arg1: Class[Any], arg2: str, arg3: list[int], arg4: ProtectionDomain, arg5: bool, arg6: int, arg7: object) -> Class[Any]: ...

  def defineModule(self, arg0: ClassLoader, arg1: ModuleDescriptor, arg2: URI) -> Module: ...

  def definePackage(self, arg0: ClassLoader, arg1: str, arg2: Module) -> Package: ...

  def defineUnnamedModule(self, arg0: ClassLoader) -> Module: ...

  def encodeASCII(self, arg0: list[str], arg1: int, arg2: list[int], arg3: int, arg4: int) -> int: ...

  def exit(self, arg0: int) -> None: ...

  def fastUUID(self, arg0: int, arg1: int) -> str: ...

  def findBootstrapClassOrNull(self, arg0: str) -> Class[Any]: ...

  def findNative(self, arg0: ClassLoader, arg1: str) -> int: ...

  def getAnnotationType(self, arg0: Class[Any]) -> AnnotationType: ...

  def getBytesNoRepl(self, arg0: str, arg1: Charset) -> list[int]: ...

  def getBytesUTF8NoRepl(self, arg0: str) -> list[int]: ...

  def getConstantPool(self, arg0: Class[Any]) -> ConstantPool: ...

  def getDeclaredAnnotationMap(self, arg0: Class[Any]) -> Map[Class[Annotation], Annotation]: ...

  def getDeclaredPublicMethods(self, arg0: Class[Any], arg1: str, arg2: list[Class]) -> List[Method]: ...

  def getEnumConstantsShared(self, arg0: Class[E]) -> list[Enum]: ...

  def getRawClassAnnotations(self, arg0: Class[Any]) -> list[int]: ...

  def getRawClassTypeAnnotations(self, arg0: Class[Any]) -> list[int]: ...

  def getRawExecutableTypeAnnotations(self, arg0: Executable) -> list[int]: ...

  def getServicesCatalog(self, arg0: ModuleLayer) -> ServicesCatalog: ...

  def inflateBytesToChars(self, arg0: list[int], arg1: int, arg2: list[str], arg3: int, arg4: int) -> None: ...

  def invalidatePackageAccessCache(self) -> None: ...

  def invokeFinalize(self, arg0: object) -> None: ...

  def isEnableNativeAccess(self, arg0: Module) -> bool: ...

  def isReflectivelyExported(self, arg0: Module, arg1: str, arg2: Module) -> bool: ...

  def isReflectivelyOpened(self, arg0: Module, arg1: str, arg2: Module) -> bool: ...

  def join(self, arg0: str, arg1: str, arg2: str, arg3: list[str], arg4: int) -> str: ...

  @overload
  def layers(self, arg0: ClassLoader) -> Stream[ModuleLayer]: ...

  @overload
  def layers(self, arg0: ModuleLayer) -> Stream[ModuleLayer]: ...

  def newStringNoRepl(self, arg0: list[int], arg1: Charset) -> str: ...

  def newStringUTF8NoRepl(self, arg0: list[int], arg1: int, arg2: int) -> str: ...

  def newThreadWithAcc(self, arg0: Runnable, arg1: AccessControlContext) -> Thread: ...

  def protectionDomain(self, arg0: Class[Any]) -> ProtectionDomain: ...

  def registerShutdownHook(self, arg0: int, arg1: bool, arg2: Runnable) -> None: ...

  def setCause(self, arg0: Throwable, arg1: Throwable) -> None: ...

  def stringConcatHelper(self, arg0: str, arg1: MethodType) -> MethodHandle: ...

  def stringConcatInitialCoder(self) -> int: ...

  def stringConcatMix(self, arg0: int, arg1: str) -> int: ...


class JavaLangInvokeAccess:

  def collectCoordinates(self, arg0: VarHandle, arg1: int, arg2: MethodHandle) -> VarHandle: ...

  def defineHiddenClassWithClassData(self, arg0: MethodHandles.Lookup, arg1: str, arg2: list[int], arg3: object, arg4: bool) -> MethodHandles.Lookup: ...

  def dropCoordinates(self, arg0: VarHandle, arg1: int, arg2: list[Class]) -> VarHandle: ...

  def ensureCustomized(self, arg0: MethodHandle) -> None: ...

  def exceptionTypes(self, arg0: MethodHandle) -> list[Class]: ...

  def filterCoordinates(self, arg0: VarHandle, arg1: int, arg2: list[MethodHandle]) -> VarHandle: ...

  def filterValue(self, arg0: VarHandle, arg1: MethodHandle, arg2: MethodHandle) -> VarHandle: ...

  def findStatic(self, arg0: Class[Any], arg1: str, arg2: MethodType) -> MethodHandle: ...

  def findVirtual(self, arg0: Class[Any], arg1: str, arg2: MethodType) -> MethodHandle: ...

  def generateHolderClasses(self, arg0: Stream[str]) -> Map[str, byte]: ...

  def getDeclaringClass(self, arg0: object) -> Class[Any]: ...

  def getMethodDescriptor(self, arg0: object) -> str: ...

  def getMethodType(self, arg0: object) -> MethodType: ...

  def getName(self, arg0: object) -> str: ...

  def insertCoordinates(self, arg0: VarHandle, arg1: int, arg2: list[object]) -> VarHandle: ...

  def isNative(self, arg0: object) -> bool: ...

  def memoryAccessVarHandle(self, arg0: Class[Any], arg1: bool, arg2: int, arg3: ByteOrder) -> VarHandle: ...

  def nativeMethodHandle(self, arg0: NativeEntryPoint, arg1: MethodHandle) -> MethodHandle: ...

  def newMemberName(self) -> object: ...

  def permuteCoordinates(self, arg0: VarHandle, arg1: List[Class[Any]], arg2: list[int]) -> VarHandle: ...

  def reflectiveInvoker(self, arg0: Class[Any]) -> MethodHandle: ...

  def unreflectConstructor(self, arg0: Constructor[Any]) -> MethodHandle: ...

  def unreflectField(self, arg0: Field, arg1: bool) -> MethodHandle: ...


class JavaLangModuleAccess:

  def newConfiguration(self, arg0: ModuleFinder, arg1: Map[str, Set[str]]) -> Configuration: ...

  @overload
  def newExports(self, arg0: Set[ModuleDescriptor.Exports.Modifier], arg1: str) -> ModuleDescriptor.Exports: ...

  @overload
  def newExports(self, arg0: Set[ModuleDescriptor.Exports.Modifier], arg1: str, arg2: Set[str]) -> ModuleDescriptor.Exports: ...

  def newModuleBuilder(self, arg0: str, arg1: bool, arg2: Set[ModuleDescriptor.Modifier]) -> ModuleDescriptor.Builder: ...

  def newModuleDescriptor(self, arg0: str, arg1: ModuleDescriptor.Version, arg2: Set[ModuleDescriptor.Modifier], arg3: Set[ModuleDescriptor.Requires], arg4: Set[ModuleDescriptor.Exports], arg5: Set[ModuleDescriptor.Opens], arg6: Set[str], arg7: Set[ModuleDescriptor.Provides], arg8: Set[str], arg9: str, arg10: int) -> ModuleDescriptor: ...

  @overload
  def newOpens(self, arg0: Set[ModuleDescriptor.Opens.Modifier], arg1: str) -> ModuleDescriptor.Opens: ...

  @overload
  def newOpens(self, arg0: Set[ModuleDescriptor.Opens.Modifier], arg1: str, arg2: Set[str]) -> ModuleDescriptor.Opens: ...

  def newProvides(self, arg0: str, arg1: List[str]) -> ModuleDescriptor.Provides: ...

  def newRequires(self, arg0: Set[ModuleDescriptor.Requires.Modifier], arg1: str, arg2: ModuleDescriptor.Version) -> ModuleDescriptor.Requires: ...

  def packages(self, arg0: ModuleDescriptor.Builder) -> Set[str]: ...

  def requires(self, arg0: ModuleDescriptor.Builder, arg1: Set[ModuleDescriptor.Requires.Modifier], arg2: str, arg3: str) -> None: ...

  def resolveAndBind(self, arg0: ModuleFinder, arg1: Collection[str], arg2: PrintStream) -> Configuration: ...


class JavaLangRefAccess:

  def runFinalization(self) -> None: ...

  def waitForReferenceProcessing(self) -> bool: ...


class JavaLangReflectAccess:

  def copyConstructor(self, arg0: Constructor[T]) -> Constructor[T]: ...

  def copyField(self, arg0: Field) -> Field: ...

  def copyMethod(self, arg0: Method) -> Method: ...

  def getConstructorAccessor(self, arg0: Constructor[Any]) -> ConstructorAccessor: ...

  def getConstructorAnnotations(self, arg0: Constructor[Any]) -> list[int]: ...

  def getConstructorParameterAnnotations(self, arg0: Constructor[Any]) -> list[int]: ...

  def getConstructorSignature(self, arg0: Constructor[Any]) -> str: ...

  def getConstructorSlot(self, arg0: Constructor[Any]) -> int: ...

  def getExecutableSharedParameterTypes(self, arg0: Executable) -> list[Class]: ...

  def getExecutableTypeAnnotationBytes(self, arg0: Executable) -> list[int]: ...

  def getMethodAccessor(self, arg0: Method) -> MethodAccessor: ...

  def getRoot(self, arg0: T) -> T: ...

  def isTrustedFinalField(self, arg0: Field) -> bool: ...

  def leafCopyMethod(self, arg0: Method) -> Method: ...

  def newConstructor(self, arg0: Class[T], arg1: list[Class], arg2: list[Class], arg3: int, arg4: int, arg5: str, arg6: list[int], arg7: list[int]) -> Constructor[T]: ...

  def newInstance(self, arg0: Constructor[T], arg1: list[object], arg2: Class[Any]) -> object: ...

  def setConstructorAccessor(self, arg0: Constructor[Any], arg1: ConstructorAccessor) -> None: ...

  def setMethodAccessor(self, arg0: Method, arg1: MethodAccessor) -> None: ...


class JavaNetHttpCookieAccess:

  def header(self, arg0: HttpCookie) -> str: ...

  def parse(self, arg0: str) -> List[HttpCookie]: ...


class JavaNetInetAddressAccess:

  def addressBytes(self, arg0: Inet6Address) -> list[int]: ...

  def addressValue(self, arg0: Inet4Address) -> int: ...

  def getOriginalHostName(self, arg0: InetAddress) -> str: ...


class JavaNetURLAccess:

  def getHandler(self, arg0: URL) -> URLStreamHandler: ...


class JavaNetUriAccess:

  def create(self, arg0: str, arg1: str) -> URI: ...


class JavaNioAccess:

  def acquireScope(self, arg0: Buffer, arg1: bool) -> Runnable: ...

  def bufferSegment(self, arg0: Buffer) -> MemorySegmentProxy: ...

  def force(self, arg0: FileDescriptor, arg1: int, arg2: bool, arg3: int, arg4: int) -> None: ...

  def getBufferAddress(self, arg0: ByteBuffer) -> int: ...

  def getBufferBase(self, arg0: ByteBuffer) -> object: ...

  def getDirectBufferPool(self) -> VM.BufferPool: ...

  def isLoaded(self, arg0: int, arg1: bool, arg2: int) -> bool: ...

  def load(self, arg0: int, arg1: bool, arg2: int) -> None: ...

  def newDirectByteBuffer(self, arg0: int, arg1: int, arg2: object, arg3: MemorySegmentProxy) -> ByteBuffer: ...

  def newHeapByteBuffer(self, arg0: list[int], arg1: int, arg2: int, arg3: MemorySegmentProxy) -> ByteBuffer: ...

  def newMappedByteBuffer(self, arg0: UnmapperProxy, arg1: int, arg2: int, arg3: object, arg4: MemorySegmentProxy) -> ByteBuffer: ...

  def pageSize(self) -> int: ...

  def reserveMemory(self, arg0: int, arg1: int) -> None: ...

  def unload(self, arg0: int, arg1: bool, arg2: int) -> None: ...

  def unmapper(self, arg0: ByteBuffer) -> UnmapperProxy: ...

  def unreserveMemory(self, arg0: int, arg1: int) -> None: ...


class JavaObjectInputFilterAccess:

  def createFilter2(self, arg0: str) -> ObjectInputFilter: ...


class JavaObjectInputStreamAccess:

  def checkArray(self, arg0: ObjectInputStream, arg1: Class[Any], arg2: int) -> None: ...


class JavaObjectInputStreamReadString:

  def readString(self, arg0: ObjectInputStream) -> str: ...


class JavaSecurityAccess:

  @overload
  def doIntersectionPrivilege(self, arg0: PrivilegedAction[T], arg1: AccessControlContext) -> object: ...

  @overload
  def doIntersectionPrivilege(self, arg0: PrivilegedAction[T], arg1: AccessControlContext, arg2: AccessControlContext) -> object: ...

  def getProtectDomains(self, arg0: AccessControlContext) -> list[ProtectionDomain]: ...

  def getProtectionDomainCache(self) -> JavaSecurityAccess.ProtectionDomainCache: ...

  class ProtectionDomainCache:

    def get(self, arg0: ProtectionDomain) -> PermissionCollection: ...

    def put(self, arg0: ProtectionDomain, arg1: PermissionCollection) -> None: ...


class JavaSecuritySignatureAccess:

  def initSign(self, arg0: Signature, arg1: PrivateKey, arg2: AlgorithmParameterSpec, arg3: SecureRandom) -> None: ...

  @overload
  def initVerify(self, arg0: Signature, arg1: PublicKey, arg2: AlgorithmParameterSpec) -> None: ...

  @overload
  def initVerify(self, arg0: Signature, arg1: Certificate, arg2: AlgorithmParameterSpec) -> None: ...


class JavaSecuritySpecAccess:

  def clearEncodedKeySpec(self, arg0: EncodedKeySpec) -> None: ...


class JavaUtilCollectionAccess:

  def listFromTrustedArray(self, arg0: list[object]) -> List[E]: ...

  def listFromTrustedArrayNullsAllowed(self, arg0: list[object]) -> List[E]: ...


class JavaUtilJarAccess:

  def ensureInitialization(self, arg0: JarFile) -> None: ...

  def entries2(self, arg0: JarFile) -> Enumeration[JarEntry]: ...

  def entryFor(self, arg0: JarFile, arg1: str) -> JarEntry: ...

  def entryNames(self, arg0: JarFile, arg1: list[CodeSource]) -> Enumeration[str]: ...

  def getCodeSource(self, arg0: JarFile, arg1: URL, arg2: str) -> CodeSource: ...

  def getCodeSources(self, arg0: JarFile, arg1: URL) -> list[CodeSource]: ...

  def getManifestDigests(self, arg0: JarFile) -> List[object]: ...

  def getTrustedAttributes(self, arg0: Manifest, arg1: str) -> Attributes: ...

  def isInitializing(self) -> bool: ...

  def jarFileHasClassPathAttribute(self, arg0: JarFile) -> bool: ...

  def setEagerValidation(self, arg0: JarFile, arg1: bool) -> None: ...


class JavaUtilResourceBundleAccess:

  def getBundle(self, arg0: str, arg1: Locale, arg2: Module) -> ResourceBundle: ...

  def getParent(self, arg0: ResourceBundle) -> ResourceBundle: ...

  def newResourceBundle(self, arg0: Class[ResourceBundle]) -> ResourceBundle: ...

  def setLocale(self, arg0: ResourceBundle, arg1: Locale) -> None: ...

  def setName(self, arg0: ResourceBundle, arg1: str) -> None: ...

  def setParent(self, arg0: ResourceBundle, arg1: ResourceBundle) -> None: ...


class JavaUtilZipFileAccess:

  def entries(self, arg0: ZipFile) -> Enumeration[JarEntry]: ...

  def entryNameStream(self, arg0: ZipFile) -> Stream[str]: ...

  def getExtraAttributes(self, arg0: ZipEntry) -> int: ...

  def getManifestAndSignatureRelatedFiles(self, arg0: JarFile) -> List[str]: ...

  def getManifestName(self, arg0: JarFile, arg1: bool) -> str: ...

  def getManifestNum(self, arg0: JarFile) -> int: ...

  def getMetaInfVersions(self, arg0: JarFile) -> list[int]: ...

  def setExtraAttributes(self, arg0: ZipEntry, arg1: int) -> None: ...

  def startsWithLocHeader(self, arg0: ZipFile) -> bool: ...

  def stream(self, arg0: ZipFile) -> Stream[JarEntry]: ...


class JavaxCryptoSealedObjectAccess:

  def getExtObjectInputStream(self, arg0: SealedObject, arg1: Cipher) -> ObjectInputStream: ...


class JavaxCryptoSpecAccess:

  def clearSecretKeySpec(self, arg0: SecretKeySpec) -> None: ...


class SharedSecrets:

  @staticmethod
  def getJavaAWTAccess() -> JavaAWTAccess: ...

  @staticmethod
  def getJavaAWTFontAccess() -> JavaAWTFontAccess: ...

  @staticmethod
  def getJavaBeansAccess() -> JavaBeansAccess: ...

  @staticmethod
  def getJavaIOAccess() -> JavaIOAccess: ...

  @staticmethod
  def getJavaIOFileDescriptorAccess() -> JavaIOFileDescriptorAccess: ...

  @staticmethod
  def getJavaIOFilePermissionAccess() -> JavaIOFilePermissionAccess: ...

  @staticmethod
  def getJavaIORandomAccessFileAccess() -> JavaIORandomAccessFileAccess: ...

  @staticmethod
  def getJavaLangAccess() -> JavaLangAccess: ...

  @staticmethod
  def getJavaLangInvokeAccess() -> JavaLangInvokeAccess: ...

  @staticmethod
  def getJavaLangModuleAccess() -> JavaLangModuleAccess: ...

  @staticmethod
  def getJavaLangRefAccess() -> JavaLangRefAccess: ...

  @staticmethod
  def getJavaLangReflectAccess() -> JavaLangReflectAccess: ...

  @staticmethod
  def getJavaNetHttpCookieAccess() -> JavaNetHttpCookieAccess: ...

  @staticmethod
  def getJavaNetInetAddressAccess() -> JavaNetInetAddressAccess: ...

  @staticmethod
  def getJavaNetURLAccess() -> JavaNetURLAccess: ...

  @staticmethod
  def getJavaNetUriAccess() -> JavaNetUriAccess: ...

  @staticmethod
  def getJavaNioAccess() -> JavaNioAccess: ...

  @staticmethod
  def getJavaObjectInputFilterAccess() -> JavaObjectInputFilterAccess: ...

  @staticmethod
  def getJavaObjectInputStreamAccess() -> JavaObjectInputStreamAccess: ...

  @staticmethod
  def getJavaObjectInputStreamReadString() -> JavaObjectInputStreamReadString: ...

  @staticmethod
  def getJavaSecurityAccess() -> JavaSecurityAccess: ...

  @staticmethod
  def getJavaSecuritySignatureAccess() -> JavaSecuritySignatureAccess: ...

  @staticmethod
  def getJavaSecuritySpecAccess() -> JavaSecuritySpecAccess: ...

  @staticmethod
  def getJavaUtilCollectionAccess() -> JavaUtilCollectionAccess: ...

  @staticmethod
  def getJavaUtilResourceBundleAccess() -> JavaUtilResourceBundleAccess: ...

  @staticmethod
  def getJavaUtilZipFileAccess() -> JavaUtilZipFileAccess: ...

  @staticmethod
  def getJavaxCryptoSealedObjectAccess() -> JavaxCryptoSealedObjectAccess: ...

  @staticmethod
  def getJavaxCryptoSpecAccess() -> JavaxCryptoSpecAccess: ...

  @staticmethod
  def javaUtilJarAccess() -> JavaUtilJarAccess: ...

  @staticmethod
  def setJavaAWTAccess(arg0: JavaAWTAccess) -> None: ...

  @staticmethod
  def setJavaAWTFontAccess(arg0: JavaAWTFontAccess) -> None: ...

  @staticmethod
  def setJavaBeansAccess(arg0: JavaBeansAccess) -> None: ...

  @staticmethod
  def setJavaIOAccess(arg0: JavaIOAccess) -> None: ...

  @staticmethod
  def setJavaIOFileDescriptorAccess(arg0: JavaIOFileDescriptorAccess) -> None: ...

  @staticmethod
  def setJavaIOFilePermissionAccess(arg0: JavaIOFilePermissionAccess) -> None: ...

  @staticmethod
  def setJavaIORandomAccessFileAccess(arg0: JavaIORandomAccessFileAccess) -> None: ...

  @staticmethod
  def setJavaLangAccess(arg0: JavaLangAccess) -> None: ...

  @staticmethod
  def setJavaLangInvokeAccess(arg0: JavaLangInvokeAccess) -> None: ...

  @staticmethod
  def setJavaLangModuleAccess(arg0: JavaLangModuleAccess) -> None: ...

  @staticmethod
  def setJavaLangRefAccess(arg0: JavaLangRefAccess) -> None: ...

  @staticmethod
  def setJavaLangReflectAccess(arg0: JavaLangReflectAccess) -> None: ...

  @staticmethod
  def setJavaNetHttpCookieAccess(arg0: JavaNetHttpCookieAccess) -> None: ...

  @staticmethod
  def setJavaNetInetAddressAccess(arg0: JavaNetInetAddressAccess) -> None: ...

  @staticmethod
  def setJavaNetURLAccess(arg0: JavaNetURLAccess) -> None: ...

  @staticmethod
  def setJavaNetUriAccess(arg0: JavaNetUriAccess) -> None: ...

  @staticmethod
  def setJavaNioAccess(arg0: JavaNioAccess) -> None: ...

  @staticmethod
  def setJavaObjectInputFilterAccess(arg0: JavaObjectInputFilterAccess) -> None: ...

  @staticmethod
  def setJavaObjectInputStreamAccess(arg0: JavaObjectInputStreamAccess) -> None: ...

  @staticmethod
  def setJavaObjectInputStreamReadString(arg0: JavaObjectInputStreamReadString) -> None: ...

  @staticmethod
  def setJavaSecurityAccess(arg0: JavaSecurityAccess) -> None: ...

  @staticmethod
  def setJavaSecuritySignatureAccess(arg0: JavaSecuritySignatureAccess) -> None: ...

  @staticmethod
  def setJavaSecuritySpecAccess(arg0: JavaSecuritySpecAccess) -> None: ...

  @staticmethod
  def setJavaUtilCollectionAccess(arg0: JavaUtilCollectionAccess) -> None: ...

  @staticmethod
  def setJavaUtilJarAccess(arg0: JavaUtilJarAccess) -> None: ...

  @staticmethod
  def setJavaUtilResourceBundleAccess(arg0: JavaUtilResourceBundleAccess) -> None: ...

  @staticmethod
  def setJavaUtilZipFileAccess(arg0: JavaUtilZipFileAccess) -> None: ...

  @staticmethod
  def setJavaxCryptoSealedObjectAccess(arg0: JavaxCryptoSealedObjectAccess) -> None: ...

  @staticmethod
  def setJavaxCryptoSpecAccess(arg0: JavaxCryptoSpecAccess) -> None: ...

  def __init__(self): ...

