from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from de.jarnbjo.ogg import LogicalOggStream
from de.jarnbjo.util.io import BitInputStream
from java.io import File, InputStream, IOException
from java.net import URL
from javax.sound.sampled import AudioFileFormat, AudioInputStream
from javax.sound.sampled.spi import AudioFileReader

class AudioPacket:

  def getFreqencyDomain(self) -> list[list[float]]: ...

  def getPcm(self) -> list[list[int]]: ...


class CodeBook: ...


class CommentHeader:

  ALBUM: str

  ARTIST: str

  CONTACT: str

  COPYRIGHT: str

  DATE: str

  DESCRIPTION: str

  GENRE: str

  ISRC: str

  LICENSE: str

  LOCATION: str

  ORGANIZATION: str

  PERFORMER: str

  TITLE: str

  TRACKNUMBER: str

  VERSION: str

  def getAlbum(self) -> str: ...

  def getAlbums(self) -> list[str]: ...

  def getArtist(self) -> str: ...

  def getArtists(self) -> list[str]: ...

  def getComment(self, arg0: str) -> str: ...

  def getComments(self, arg0: str) -> list[str]: ...

  def getContact(self) -> str: ...

  def getContacts(self) -> list[str]: ...

  def getCopyright(self) -> str: ...

  def getCopyrights(self) -> list[str]: ...

  def getDate(self) -> str: ...

  def getDates(self) -> list[str]: ...

  def getDescription(self) -> str: ...

  def getDescriptions(self) -> list[str]: ...

  def getGenre(self) -> str: ...

  def getGenres(self) -> list[str]: ...

  def getIsrc(self) -> str: ...

  def getIsrcs(self) -> list[str]: ...

  def getLicense(self) -> str: ...

  def getLicenses(self) -> list[str]: ...

  def getLocation(self) -> str: ...

  def getLocations(self) -> list[str]: ...

  def getOrganization(self) -> str: ...

  def getOrganizations(self) -> list[str]: ...

  def getPerformer(self) -> str: ...

  def getPerformers(self) -> list[str]: ...

  def getTitle(self) -> str: ...

  def getTitles(self) -> list[str]: ...

  def getTrackNumber(self) -> str: ...

  def getTrackNumbers(self) -> list[str]: ...

  def getVendor(self) -> str: ...

  def getVersion(self) -> str: ...

  def getVersions(self) -> list[str]: ...

  def __init__(self, arg0: BitInputStream): ...


class Floor:

  DB_STATIC_TABLE: list[float]

  def __init__(self): ...


class IdentificationHeader:

  def getBlockSize0(self) -> int: ...

  def getBlockSize1(self) -> int: ...

  def getChannels(self) -> int: ...

  def getMaximumBitrate(self) -> int: ...

  def getMinimumBitrate(self) -> int: ...

  def getNominalBitrate(self) -> int: ...

  def getSampleRate(self) -> int: ...

  def getVersion(self) -> int: ...

  def __init__(self, arg0: BitInputStream): ...


class Mapping: ...


class MdctFloat: ...


class Mode: ...


class Residue:

  class Look: ...


class SetupHeader:

  def getCodeBooks(self) -> list[CodeBook]: ...

  def getFloors(self) -> list[Floor]: ...

  def getMappings(self) -> list[Mapping]: ...

  def getModes(self) -> list[Mode]: ...

  def getResidues(self) -> list[Residue]: ...

  def __init__(self, arg0: VorbisStream, arg1: BitInputStream): ...


class Util:

  @staticmethod
  def float32unpack(arg0: int) -> float: ...

  @staticmethod
  def highNeighbour(arg0: list[int], arg1: int) -> int: ...

  @staticmethod
  def icount(arg0: int) -> int: ...

  @staticmethod
  def ilog(arg0: int) -> int: ...

  @staticmethod
  def intPow(arg0: int, arg1: int) -> int: ...

  @staticmethod
  def isBitSet(arg0: int, arg1: int) -> bool: ...

  @staticmethod
  def lookup1Values(arg0: int, arg1: int) -> int: ...

  @staticmethod
  def lowNeighbour(arg0: list[int], arg1: int) -> int: ...

  @staticmethod
  def renderLine(arg0: int, arg1: int, arg2: int, arg3: int, arg4: list[float]) -> None: ...

  @staticmethod
  def renderPoint(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int) -> int: ...

  def __init__(self): ...


class VorbisAudioFileReader(AudioFileReader):

  @overload
  def getAudioFileFormat(self, arg0: File) -> AudioFileFormat: ...

  @overload
  def getAudioFileFormat(self, arg0: InputStream) -> AudioFileFormat: ...

  @overload
  def getAudioFileFormat(self, arg0: URL) -> AudioFileFormat: ...

  @overload
  def getAudioInputStream(self, arg0: File) -> AudioInputStream: ...

  @overload
  def getAudioInputStream(self, arg0: InputStream) -> AudioInputStream: ...

  @overload
  def getAudioInputStream(self, arg0: URL) -> AudioInputStream: ...

  def __init__(self): ...

  class VorbisFormatType(AudioFileFormat.Type):

    @staticmethod
    def getInstance() -> AudioFileFormat.Type: ...

  class VorbisInputStream(InputStream):

    @overload
    def read(self) -> int: ...

    @overload
    def read(self, arg0: list[int]) -> int: ...

    @overload
    def read(self, arg0: list[int], arg1: int, arg2: int) -> int: ...

    def __init__(self, arg0: VorbisStream): ...


class VorbisFormatException(IOException):

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: str): ...


class VorbisStream:

  BIG_ENDIAN: int

  LITTLE_ENDIAN: int

  def close(self) -> None: ...

  def getCommentHeader(self) -> CommentHeader: ...

  def getCurrentBitRate(self) -> int: ...

  def getCurrentGranulePosition(self) -> int: ...

  def getIdentificationHeader(self) -> IdentificationHeader: ...

  def isOpen(self) -> bool: ...

  def processPacket(self, arg0: list[int]) -> list[int]: ...

  def readPcm(self, arg0: list[int], arg1: int, arg2: int) -> int: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: LogicalOggStream): ...

