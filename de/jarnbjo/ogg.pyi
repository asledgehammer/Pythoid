from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.io import InputStream, RandomAccessFile, IOException
from java.net import URL
from java.util import Collection, LinkedList

class BasicStream:

  @overload
  def close(self) -> None: ...

  @overload
  def close(self) -> None: ...

  def getContentLength(self) -> int: ...

  @overload
  def getLogicalStreams(self) -> Collection: ...

  @overload
  def getLogicalStreams(self) -> Collection: ...

  @overload
  def getOggPage(self, arg0: int) -> OggPage: ...

  @overload
  def getOggPage(self, arg0: int) -> OggPage: ...

  def getPosition(self) -> int: ...

  @overload
  def isOpen(self) -> bool: ...

  @overload
  def isOpen(self) -> bool: ...

  @overload
  def isSeekable(self) -> bool: ...

  @overload
  def isSeekable(self) -> bool: ...

  @overload
  def setTime(self, arg0: int) -> None: ...

  @overload
  def setTime(self, arg0: int) -> None: ...

  def __init__(self, arg0: InputStream): ...


class CachedUrlStream:

  @overload
  def close(self) -> None: ...

  @overload
  def close(self) -> None: ...

  def getCacheLength(self) -> int: ...

  @overload
  def getLogicalStreams(self) -> Collection: ...

  @overload
  def getLogicalStreams(self) -> Collection: ...

  @overload
  def getOggPage(self, arg0: int) -> OggPage: ...

  @overload
  def getOggPage(self, arg0: int) -> OggPage: ...

  @overload
  def isOpen(self) -> bool: ...

  @overload
  def isOpen(self) -> bool: ...

  @overload
  def isSeekable(self) -> bool: ...

  @overload
  def isSeekable(self) -> bool: ...

  @overload
  def setTime(self, arg0: int) -> None: ...

  @overload
  def setTime(self, arg0: int) -> None: ...

  @overload
  def __init__(self, arg0: URL): ...
  @overload
  def __init__(self, arg0: URL, arg1: RandomAccessFile): ...

  class LoaderThread:

    def isBosDone(self) -> bool: ...

    @overload
    def run(self) -> None: ...

    @overload
    def run(self) -> None: ...

    def __init__(self, arg0: CachedUrlStream, arg1: InputStream, arg2: RandomAccessFile, arg3: list[int]): ...


class EndOfOggStreamException(IOException):

  def __init__(self): ...


class FileStream:

  @overload
  def close(self) -> None: ...

  @overload
  def close(self) -> None: ...

  @overload
  def getLogicalStreams(self) -> Collection: ...

  @overload
  def getLogicalStreams(self) -> Collection: ...

  @overload
  def getOggPage(self, arg0: int) -> OggPage: ...

  @overload
  def getOggPage(self, arg0: int) -> OggPage: ...

  @overload
  def isOpen(self) -> bool: ...

  @overload
  def isOpen(self) -> bool: ...

  @overload
  def isSeekable(self) -> bool: ...

  @overload
  def isSeekable(self) -> bool: ...

  @overload
  def setTime(self, arg0: int) -> None: ...

  @overload
  def setTime(self, arg0: int) -> None: ...

  def __init__(self, arg0: RandomAccessFile): ...


class LogicalOggStream:

  FORMAT_FLAC: str

  FORMAT_THEORA: str

  FORMAT_UNKNOWN: str

  FORMAT_VORBIS: str

  def close(self) -> None: ...

  def getFormat(self) -> str: ...

  def getMaximumGranulePosition(self) -> int: ...

  def getNextOggPacket(self) -> list[int]: ...

  def getNextOggPage(self) -> OggPage: ...

  def getTime(self) -> int: ...

  def isOpen(self) -> bool: ...

  def reset(self) -> None: ...

  def setTime(self, arg0: int) -> None: ...


class LogicalOggStreamImpl:

  FORMAT_FLAC: str

  FORMAT_THEORA: str

  FORMAT_UNKNOWN: str

  FORMAT_VORBIS: str

  def addGranulePosition(self, arg0: int) -> None: ...

  def addPageNumberMapping(self, arg0: int) -> None: ...

  def checkFormat(self, arg0: OggPage) -> None: ...

  @overload
  def close(self) -> None: ...

  @overload
  def close(self) -> None: ...

  @overload
  def getFormat(self) -> str: ...

  @overload
  def getFormat(self) -> str: ...

  @overload
  def getMaximumGranulePosition(self) -> int: ...

  @overload
  def getMaximumGranulePosition(self) -> int: ...

  @overload
  def getNextOggPacket(self) -> list[int]: ...

  @overload
  def getNextOggPacket(self) -> list[int]: ...

  @overload
  def getNextOggPage(self) -> OggPage: ...

  @overload
  def getNextOggPage(self) -> OggPage: ...

  @overload
  def getTime(self) -> int: ...

  @overload
  def getTime(self) -> int: ...

  @overload
  def isOpen(self) -> bool: ...

  @overload
  def isOpen(self) -> bool: ...

  @overload
  def reset(self) -> None: ...

  @overload
  def reset(self) -> None: ...

  @overload
  def setTime(self, arg0: int) -> None: ...

  @overload
  def setTime(self, arg0: int) -> None: ...

  def __init__(self, arg0: PhysicalOggStream, arg1: int): ...


class OggFormatException(IOException):

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: str): ...


class OggPage:

  def getAbsoluteGranulePosition(self) -> int: ...

  def getData(self) -> list[int]: ...

  def getHeader(self) -> list[int]: ...

  def getPageCheckSum(self) -> int: ...

  def getPageSequenceNumber(self) -> int: ...

  def getSegmentLengths(self) -> list[int]: ...

  def getSegmentOffsets(self) -> list[int]: ...

  def getSegmentTable(self) -> list[int]: ...

  def getStreamSerialNumber(self) -> int: ...

  def getTotalLength(self) -> int: ...

  def isBos(self) -> bool: ...

  def isContinued(self) -> bool: ...

  def isEos(self) -> bool: ...

  def isFresh(self) -> bool: ...

  @staticmethod
  @overload
  def create(arg0: list[int]) -> OggPage: ...

  @staticmethod
  @overload
  def create(arg0: InputStream) -> OggPage: ...

  @staticmethod
  @overload
  def create(arg0: RandomAccessFile) -> OggPage: ...

  @staticmethod
  @overload
  def create(arg0: list[int], arg1: bool) -> OggPage: ...

  @staticmethod
  @overload
  def create(arg0: InputStream, arg1: bool) -> OggPage: ...

  @staticmethod
  @overload
  def create(arg0: RandomAccessFile, arg1: bool) -> OggPage: ...


class OnDemandUrlStream:

  @overload
  def close(self) -> None: ...

  @overload
  def close(self) -> None: ...

  def getContentLength(self) -> int: ...

  @overload
  def getLogicalStreams(self) -> Collection: ...

  @overload
  def getLogicalStreams(self) -> Collection: ...

  @overload
  def getOggPage(self, arg0: int) -> OggPage: ...

  @overload
  def getOggPage(self, arg0: int) -> OggPage: ...

  def getPosition(self) -> int: ...

  @overload
  def isOpen(self) -> bool: ...

  @overload
  def isOpen(self) -> bool: ...

  @overload
  def isSeekable(self) -> bool: ...

  @overload
  def isSeekable(self) -> bool: ...

  @overload
  def setTime(self, arg0: int) -> None: ...

  @overload
  def setTime(self, arg0: int) -> None: ...

  def __init__(self, arg0: URL): ...


class PhysicalOggStream:

  def close(self) -> None: ...

  def getLogicalStreams(self) -> Collection: ...

  def getOggPage(self, arg0: int) -> OggPage: ...

  def isOpen(self) -> bool: ...

  def isSeekable(self) -> bool: ...

  def setTime(self, arg0: int) -> None: ...


class UncachedUrlStream:

  @overload
  def close(self) -> None: ...

  @overload
  def close(self) -> None: ...

  @overload
  def getLogicalStreams(self) -> Collection: ...

  @overload
  def getLogicalStreams(self) -> Collection: ...

  @overload
  def getOggPage(self, arg0: int) -> OggPage: ...

  @overload
  def getOggPage(self, arg0: int) -> OggPage: ...

  @overload
  def isOpen(self) -> bool: ...

  @overload
  def isOpen(self) -> bool: ...

  @overload
  def isSeekable(self) -> bool: ...

  @overload
  def isSeekable(self) -> bool: ...

  @overload
  def setTime(self, arg0: int) -> None: ...

  @overload
  def setTime(self, arg0: int) -> None: ...

  def __init__(self, arg0: URL): ...

  class LoaderThread:

    def isBosDone(self) -> bool: ...

    @overload
    def run(self) -> None: ...

    @overload
    def run(self) -> None: ...

    def __init__(self, arg0: UncachedUrlStream, arg1: InputStream, arg2: LinkedList): ...

