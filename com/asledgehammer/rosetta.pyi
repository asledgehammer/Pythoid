from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.io import File
from java.lang import Class, Package
from java.lang.reflect import Method
from java.util import Map, List

class Rosetta:

  def addDirectory(self, arg0: File) -> None: ...

  def addNamespace(self, arg0: RosettaNamespace) -> None: ...

  def getClass(self, arg0: Class[Any]) -> RosettaClass: ...

  def getFiles(self) -> Map[str, RosettaFile]: ...

  @overload
  def getNamespace(self, arg0: Package) -> RosettaNamespace: ...

  @overload
  def getNamespace(self, arg0: str) -> RosettaNamespace: ...

  def getNamespaces(self) -> Map[str, RosettaNamespace]: ...

  def printNamespaces(self, arg0: str) -> None: ...

  def toString(self) -> str: ...

  @staticmethod
  def main(arg0: list[str]) -> None: ...

  def __init__(self): ...


class RosettaClass(RosettaEntity):

  def getConstructor(self, arg0: list[Class]) -> RosettaConstructor: ...

  def getConstructors(self) -> List[RosettaConstructor]: ...

  def getExtends(self) -> str: ...

  def getField(self, arg0: str) -> RosettaField: ...

  def getFields(self) -> Map[str, RosettaField]: ...

  @overload
  def getMethod(self, arg0: Method) -> RosettaMethod: ...

  @overload
  def getMethod(self, arg0: str, arg1: list[Class]) -> RosettaMethod: ...

  def getMethods(self) -> Map[str, RosettaMethodCluster]: ...

  def getMethodsByName(self, arg0: str) -> RosettaMethodCluster: ...

  def getModifiers(self) -> list[str]: ...

  def getName(self) -> str: ...

  def getNotes(self) -> str: ...

  def hasNotes(self) -> bool: ...

  def printClass(self, arg0: str) -> None: ...

  def toJSON(self) -> Map[str, object]: ...

  def toString(self) -> str: ...

  def __init__(self, arg0: str, arg1: Map[str, object]): ...


class RosettaConstructor(RosettaEntity):

  def asJavaString(self, arg0: str) -> str: ...

  def getClazz(self) -> RosettaClass: ...

  def getModifiers(self) -> list[str]: ...

  def getNotes(self) -> str: ...

  def getParameters(self) -> List[RosettaParameter]: ...

  def hasNotes(self) -> bool: ...

  def hasParameters(self) -> bool: ...

  def isDeprecated(self) -> bool: ...

  def toJSON(self) -> Map[str, object]: ...

  def toString(self) -> str: ...

  def __init__(self, arg0: RosettaClass, arg1: Map[str, object]):
    self.clazz: RosettaClass


class RosettaEntity: ...


class RosettaField(RosettaEntity):

  def asJavaString(self, arg0: str) -> str: ...

  def getModifiers(self) -> list[str]: ...

  def getName(self) -> str: ...

  def getNotes(self) -> str: ...

  def getType(self) -> RosettaType: ...

  def hasNotes(self) -> bool: ...

  def isDeprecated(self) -> bool: ...

  def toJSON(self) -> Map[str, object]: ...

  def __init__(self, arg0: str, arg1: Map[str, object]): ...


class RosettaFile(RosettaEntity):

  @overload
  def getMethod(self, arg0: Method) -> RosettaMethod: ...

  @overload
  def getMethod(self, arg0: str, arg1: list[Class]) -> RosettaMethod: ...

  def getMethods(self) -> Map[str, RosettaMethodCluster]: ...

  def getMethodsByName(self, arg0: str) -> RosettaMethodCluster: ...

  def getNamespace(self, arg0: str) -> RosettaNamespace: ...

  def getNamespaces(self) -> Map[str, RosettaNamespace]: ...

  def toJSON(self) -> Map[str, object]: ...

  def toString(self) -> str: ...


class RosettaMethod(RosettaEntity):

  def asJavaString(self, arg0: str) -> str: ...

  def getModifiers(self) -> list[str]: ...

  def getName(self) -> str: ...

  def getNotes(self) -> str: ...

  def getParameters(self) -> List[RosettaParameter]: ...

  def getReturns(self) -> RosettaReturns: ...

  def hasNotes(self) -> bool: ...

  def hasParameters(self) -> bool: ...

  def isDeprecated(self) -> bool: ...

  def toJSON(self) -> Map[str, object]: ...

  def __init__(self, arg0: Map[str, object]): ...


class RosettaMethodCluster:

  def add(self, arg0: RosettaMethod) -> None: ...

  def getMethods(self) -> List[RosettaMethod]: ...

  def getName(self) -> str: ...

  def getWithParameters(self, arg0: list[Class]) -> RosettaMethod: ...

  def toString(self) -> str: ...


class RosettaNamespace(RosettaEntity):

  @overload
  def getClass(self, arg0: Class[Any]) -> RosettaClass: ...

  @overload
  def getClass(self, arg0: str) -> RosettaClass: ...

  def getClasses(self) -> Map[str, RosettaClass]: ...

  def getName(self) -> str: ...

  def parse(self, arg0: Map[str, object]) -> None: ...

  def printClasses(self, arg0: str) -> None: ...

  def toJSON(self) -> Map[str, object]: ...

  def toString(self) -> str: ...


class RosettaParameter(RosettaEntity):

  def getName(self) -> str: ...

  def getNotes(self) -> str: ...

  def getType(self) -> RosettaType: ...

  def hasNotes(self) -> bool: ...

  def toJSON(self) -> Map[str, object]: ...

  def toString(self) -> str: ...

  def __init__(self, arg0: Map[str, object]): ...


class RosettaReturns(RosettaEntity):

  def getNotes(self) -> str: ...

  def getType(self) -> RosettaType: ...

  def hasNotes(self) -> bool: ...

  def toJSON(self) -> Map[str, object]: ...

  def toString(self) -> str: ...


class RosettaType(RosettaEntity):

  def getBasic(self) -> str: ...

  def getFull(self) -> str: ...

  def getRawBasic(self) -> str: ...

  def hasFull(self) -> bool: ...

  @overload
  def matches(self, arg0: str) -> bool: ...

  @overload
  def matches(self, arg0: str, arg1: str) -> bool: ...

  def toJSON(self) -> Map[str, object]: ...

  def toString(self) -> str: ...

  @staticmethod
  def isNullPossible(arg0: str) -> bool: ...

  def __init__(self, arg0: Map[str, object]): ...


class RosettaUtils:

  RESERVED_FUNCTION_NAMES: list[str]

  RESERVED_WORDS: list[str]

  @staticmethod
  def formatName(arg0: str) -> str: ...

  def __init__(self): ...

