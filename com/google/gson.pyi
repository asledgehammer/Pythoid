from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from com.google.gson.internal import Excluder
from com.google.gson.reflect import TypeToken
from com.google.gson.stream import JsonReader, JsonWriter
from java.io import Reader, Writer
from java.lang import Class, Enum, Appendable, Boolean, Character, Number, Throwable, RuntimeException, Long
from java.lang.annotation import Annotation
from java.lang.reflect import Type, Field
from java.math import BigDecimal, BigInteger
from java.util import Collection, Iterator, Spliterator, Set, Map
from java.util.function import Consumer

T = TypeVar('T', default=Any)

class ExclusionStrategy:

  def shouldSkipClass(self, arg0: Class[Any]) -> bool: ...

  def shouldSkipField(self, arg0: FieldAttributes) -> bool: ...


class FieldAttributes:

  def getAnnotation(self, arg0: Class[T]) -> T: ...

  def getAnnotations(self) -> Collection[Annotation]: ...

  def getDeclaredClass(self) -> Class[Any]: ...

  def getDeclaredType(self) -> Type: ...

  def getDeclaringClass(self) -> Class[Any]: ...

  def getName(self) -> str: ...

  def hasModifier(self, arg0: int) -> bool: ...

  def __init__(self, arg0: Field): ...


class FieldNamingPolicy(Enum):

  IDENTITY: FieldNamingPolicy

  LOWER_CASE_WITH_DASHES: FieldNamingPolicy

  LOWER_CASE_WITH_DOTS: FieldNamingPolicy

  LOWER_CASE_WITH_UNDERSCORES: FieldNamingPolicy

  UPPER_CAMEL_CASE: FieldNamingPolicy

  UPPER_CAMEL_CASE_WITH_SPACES: FieldNamingPolicy

  UPPER_CASE_WITH_UNDERSCORES: FieldNamingPolicy

  def translateName(self, arg0: Field) -> str: ...

  @staticmethod
  def valueOf(arg0: str) -> FieldNamingPolicy: ...

  @staticmethod
  def values() -> list[FieldNamingPolicy]: ...


class FieldNamingStrategy:

  def translateName(self, arg0: Field) -> str: ...


class Gson:

  def excluder(self) -> Excluder: ...

  def fieldNamingStrategy(self) -> FieldNamingStrategy: ...

  @overload
  def fromJson(self, arg0: JsonElement, arg1: Class[T]) -> object: ...

  @overload
  def fromJson(self, arg0: JsonElement, arg1: Type) -> object: ...

  @overload
  def fromJson(self, arg0: JsonReader, arg1: Type) -> object: ...

  @overload
  def fromJson(self, arg0: Reader, arg1: Class[T]) -> object: ...

  @overload
  def fromJson(self, arg0: Reader, arg1: Type) -> object: ...

  @overload
  def fromJson(self, arg0: str, arg1: Class[T]) -> object: ...

  @overload
  def fromJson(self, arg0: str, arg1: Type) -> object: ...

  @overload
  def getAdapter(self, arg0: TypeToken[T]) -> TypeAdapter[T]: ...

  @overload
  def getAdapter(self, arg0: Class[T]) -> TypeAdapter[T]: ...

  def getDelegateAdapter(self, arg0: TypeAdapterFactory, arg1: TypeToken[T]) -> TypeAdapter[T]: ...

  def htmlSafe(self) -> bool: ...

  def newBuilder(self) -> GsonBuilder: ...

  def newJsonReader(self, arg0: Reader) -> JsonReader: ...

  def newJsonWriter(self, arg0: Writer) -> JsonWriter: ...

  def serializeNulls(self) -> bool: ...

  @overload
  def toJson(self, arg0: JsonElement) -> str: ...

  @overload
  def toJson(self, arg0: object) -> str: ...

  @overload
  def toJson(self, arg0: JsonElement, arg1: JsonWriter) -> None: ...

  @overload
  def toJson(self, arg0: JsonElement, arg1: Appendable) -> None: ...

  @overload
  def toJson(self, arg0: object, arg1: Appendable) -> None: ...

  @overload
  def toJson(self, arg0: object, arg1: Type) -> str: ...

  @overload
  def toJson(self, arg0: object, arg1: Type, arg2: JsonWriter) -> None: ...

  @overload
  def toJson(self, arg0: object, arg1: Type, arg2: Appendable) -> None: ...

  @overload
  def toJsonTree(self, arg0: object) -> JsonElement: ...

  @overload
  def toJsonTree(self, arg0: object, arg1: Type) -> JsonElement: ...

  def toString(self) -> str: ...

  def __init__(self): ...

  class FutureTypeAdapter[T](TypeAdapter):

    def read(self, arg0: JsonReader) -> object: ...

    def setDelegate(self, arg0: TypeAdapter[T]) -> None: ...

    def write(self, arg0: JsonWriter, arg1: object) -> None: ...


class GsonBuilder:

  def addDeserializationExclusionStrategy(self, arg0: ExclusionStrategy) -> GsonBuilder: ...

  def addSerializationExclusionStrategy(self, arg0: ExclusionStrategy) -> GsonBuilder: ...

  def create(self) -> Gson: ...

  def disableHtmlEscaping(self) -> GsonBuilder: ...

  def disableInnerClassSerialization(self) -> GsonBuilder: ...

  def disableJdkUnsafe(self) -> GsonBuilder: ...

  def enableComplexMapKeySerialization(self) -> GsonBuilder: ...

  def excludeFieldsWithModifiers(self, arg0: list[int]) -> GsonBuilder: ...

  def excludeFieldsWithoutExposeAnnotation(self) -> GsonBuilder: ...

  def generateNonExecutableJson(self) -> GsonBuilder: ...

  def registerTypeAdapter(self, arg0: Type, arg1: object) -> GsonBuilder: ...

  def registerTypeAdapterFactory(self, arg0: TypeAdapterFactory) -> GsonBuilder: ...

  def registerTypeHierarchyAdapter(self, arg0: Class[Any], arg1: object) -> GsonBuilder: ...

  def serializeNulls(self) -> GsonBuilder: ...

  def serializeSpecialFloatingPointValues(self) -> GsonBuilder: ...

  @overload
  def setDateFormat(self, arg0: int) -> GsonBuilder: ...

  @overload
  def setDateFormat(self, arg0: str) -> GsonBuilder: ...

  @overload
  def setDateFormat(self, arg0: int, arg1: int) -> GsonBuilder: ...

  def setExclusionStrategies(self, arg0: list[ExclusionStrategy]) -> GsonBuilder: ...

  def setFieldNamingPolicy(self, arg0: FieldNamingPolicy) -> GsonBuilder: ...

  def setFieldNamingStrategy(self, arg0: FieldNamingStrategy) -> GsonBuilder: ...

  def setLenient(self) -> GsonBuilder: ...

  def setLongSerializationPolicy(self, arg0: LongSerializationPolicy) -> GsonBuilder: ...

  def setNumberToNumberStrategy(self, arg0: ToNumberStrategy) -> GsonBuilder: ...

  def setObjectToNumberStrategy(self, arg0: ToNumberStrategy) -> GsonBuilder: ...

  def setPrettyPrinting(self) -> GsonBuilder: ...

  def setVersion(self, arg0: float) -> GsonBuilder: ...

  def __init__(self): ...


class InstanceCreator[T]:

  def createInstance(self, arg0: Type) -> object: ...


class JsonArray(JsonElement):

  @overload
  def add(self, arg0: JsonElement) -> None: ...

  @overload
  def add(self, arg0: Boolean) -> None: ...

  @overload
  def add(self, arg0: str) -> None: ...

  @overload
  def add(self, arg0: Number) -> None: ...

  @overload
  def add(self, arg0: str) -> None: ...

  def addAll(self, arg0: JsonArray) -> None: ...

  def contains(self, arg0: JsonElement) -> bool: ...

  @overload
  def deepCopy(self) -> JsonArray: ...

  @overload
  def deepCopy(self) -> JsonElement: ...

  def equals(self, arg0: object) -> bool: ...

  def forEach(self, arg0: Consumer[T]) -> None: ...

  def get(self, arg0: int) -> JsonElement: ...

  def getAsBigDecimal(self) -> BigDecimal: ...

  def getAsBigInteger(self) -> BigInteger: ...

  def getAsBoolean(self) -> bool: ...

  def getAsByte(self) -> int: ...

  def getAsCharacter(self) -> str: ...

  def getAsDouble(self) -> float: ...

  def getAsFloat(self) -> float: ...

  def getAsInt(self) -> int: ...

  def getAsLong(self) -> int: ...

  def getAsNumber(self) -> Number: ...

  def getAsShort(self) -> int: ...

  def getAsString(self) -> str: ...

  def hashCode(self) -> int: ...

  def isEmpty(self) -> bool: ...

  @overload
  def iterator(self) -> Iterator[JsonElement]: ...

  @overload
  def iterator(self) -> Iterator[T]: ...

  @overload
  def remove(self, arg0: JsonElement) -> bool: ...

  @overload
  def remove(self, arg0: int) -> JsonElement: ...

  def set(self, arg0: int, arg1: JsonElement) -> JsonElement: ...

  def size(self) -> int: ...

  def spliterator(self) -> Spliterator[T]: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: int): ...


class JsonDeserializationContext:

  def deserialize(self, arg0: JsonElement, arg1: Type) -> object: ...


class JsonDeserializer[T]:

  def deserialize(self, arg0: JsonElement, arg1: Type, arg2: JsonDeserializationContext) -> object: ...


class JsonElement:

  def deepCopy(self) -> JsonElement: ...

  def getAsBigDecimal(self) -> BigDecimal: ...

  def getAsBigInteger(self) -> BigInteger: ...

  def getAsBoolean(self) -> bool: ...

  def getAsByte(self) -> int: ...

  def getAsCharacter(self) -> str: ...

  def getAsDouble(self) -> float: ...

  def getAsFloat(self) -> float: ...

  def getAsInt(self) -> int: ...

  def getAsJsonArray(self) -> JsonArray: ...

  def getAsJsonNull(self) -> JsonNull: ...

  def getAsJsonObject(self) -> JsonObject: ...

  def getAsJsonPrimitive(self) -> JsonPrimitive: ...

  def getAsLong(self) -> int: ...

  def getAsNumber(self) -> Number: ...

  def getAsShort(self) -> int: ...

  def getAsString(self) -> str: ...

  def isJsonArray(self) -> bool: ...

  def isJsonNull(self) -> bool: ...

  def isJsonObject(self) -> bool: ...

  def isJsonPrimitive(self) -> bool: ...

  def toString(self) -> str: ...

  def __init__(self): ...


class JsonIOException(JsonParseException):

  @overload
  def __init__(self, arg0: str): ...
  @overload
  def __init__(self, arg0: Throwable): ...
  @overload
  def __init__(self, arg0: str, arg1: Throwable): ...


class JsonNull(JsonElement):

  INSTANCE: JsonNull

  @overload
  def deepCopy(self) -> JsonNull: ...

  @overload
  def deepCopy(self) -> JsonElement: ...

  def equals(self, arg0: object) -> bool: ...

  def hashCode(self) -> int: ...

  def __init__(self): ...


class JsonObject(JsonElement):

  def add(self, arg0: str, arg1: JsonElement) -> None: ...

  @overload
  def addProperty(self, arg0: str, arg1: Boolean) -> None: ...

  @overload
  def addProperty(self, arg0: str, arg1: str) -> None: ...

  @overload
  def addProperty(self, arg0: str, arg1: Number) -> None: ...

  @overload
  def addProperty(self, arg0: str, arg1: str) -> None: ...

  @overload
  def deepCopy(self) -> JsonObject: ...

  @overload
  def deepCopy(self) -> JsonElement: ...

  def entrySet(self) -> Set[Map.Entry[str, JsonElement]]: ...

  def equals(self, arg0: object) -> bool: ...

  def get(self, arg0: str) -> JsonElement: ...

  def getAsJsonArray(self, arg0: str) -> JsonArray: ...

  def getAsJsonObject(self, arg0: str) -> JsonObject: ...

  def getAsJsonPrimitive(self, arg0: str) -> JsonPrimitive: ...

  def has(self, arg0: str) -> bool: ...

  def hashCode(self) -> int: ...

  def keySet(self) -> Set[str]: ...

  def remove(self, arg0: str) -> JsonElement: ...

  def size(self) -> int: ...

  def __init__(self): ...


class JsonParseException(RuntimeException):

  @overload
  def __init__(self, arg0: str): ...
  @overload
  def __init__(self, arg0: Throwable): ...
  @overload
  def __init__(self, arg0: str, arg1: Throwable): ...


class JsonPrimitive(JsonElement):

  @overload
  def deepCopy(self) -> JsonPrimitive: ...

  @overload
  def deepCopy(self) -> JsonElement: ...

  def equals(self, arg0: object) -> bool: ...

  def getAsBigDecimal(self) -> BigDecimal: ...

  def getAsBigInteger(self) -> BigInteger: ...

  def getAsBoolean(self) -> bool: ...

  def getAsByte(self) -> int: ...

  def getAsCharacter(self) -> str: ...

  def getAsDouble(self) -> float: ...

  def getAsFloat(self) -> float: ...

  def getAsInt(self) -> int: ...

  def getAsLong(self) -> int: ...

  def getAsNumber(self) -> Number: ...

  def getAsShort(self) -> int: ...

  def getAsString(self) -> str: ...

  def hashCode(self) -> int: ...

  def isBoolean(self) -> bool: ...

  def isNumber(self) -> bool: ...

  def isString(self) -> bool: ...

  @overload
  def __init__(self, arg0: Boolean): ...
  @overload
  def __init__(self, arg0: str): ...
  @overload
  def __init__(self, arg0: Number): ...
  @overload
  def __init__(self, arg0: str): ...


class JsonSerializationContext:

  @overload
  def serialize(self, arg0: object) -> JsonElement: ...

  @overload
  def serialize(self, arg0: object, arg1: Type) -> JsonElement: ...


class JsonSerializer[T]:

  def serialize(self, arg0: object, arg1: Type, arg2: JsonSerializationContext) -> JsonElement: ...


class JsonSyntaxException(JsonParseException):

  @overload
  def __init__(self, arg0: str): ...
  @overload
  def __init__(self, arg0: Throwable): ...
  @overload
  def __init__(self, arg0: str, arg1: Throwable): ...


class LongSerializationPolicy(Enum):

  DEFAULT: LongSerializationPolicy

  STRING: LongSerializationPolicy

  def serialize(self, arg0: Long) -> JsonElement: ...

  @staticmethod
  def valueOf(arg0: str) -> LongSerializationPolicy: ...

  @staticmethod
  def values() -> list[LongSerializationPolicy]: ...


class ToNumberPolicy(Enum):

  BIG_DECIMAL: ToNumberPolicy

  DOUBLE: ToNumberPolicy

  LAZILY_PARSED_NUMBER: ToNumberPolicy

  LONG_OR_DOUBLE: ToNumberPolicy

  def readNumber(self, arg0: JsonReader) -> Number: ...

  @staticmethod
  def valueOf(arg0: str) -> ToNumberPolicy: ...

  @staticmethod
  def values() -> list[ToNumberPolicy]: ...


class ToNumberStrategy:

  def readNumber(self, arg0: JsonReader) -> Number: ...


class TypeAdapter[T]:

  @overload
  def fromJson(self, arg0: Reader) -> object: ...

  @overload
  def fromJson(self, arg0: str) -> object: ...

  def fromJsonTree(self, arg0: JsonElement) -> object: ...

  def nullSafe(self) -> TypeAdapter[T]: ...

  def read(self, arg0: JsonReader) -> object: ...

  @overload
  def toJson(self, arg0: object) -> str: ...

  @overload
  def toJson(self, arg0: Writer, arg1: object) -> None: ...

  def toJsonTree(self, arg0: object) -> JsonElement: ...

  def write(self, arg0: JsonWriter, arg1: object) -> None: ...

  def __init__(self): ...


class TypeAdapterFactory:

  def create(self, arg0: Gson, arg1: TypeToken[T]) -> TypeAdapter[T]: ...

