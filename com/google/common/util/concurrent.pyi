from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.lang import Throwable, Runnable
from java.util import Collection, List
from java.util.concurrent import Executor, TimeUnit, Future, Callable

V = TypeVar('V', default=Any)
T = TypeVar('T', default=Any)

class FutureCallback[V]:

  def onFailure(self, arg0: Throwable) -> None: ...

  def onSuccess(self, arg0: object) -> None: ...


class ListenableFuture[V]:

  def addListener(self, arg0: Runnable, arg1: Executor) -> None: ...

  def cancel(self, arg0: bool) -> bool: ...

  @overload
  def get(self) -> object: ...

  @overload
  def get(self, arg0: int, arg1: TimeUnit) -> object: ...

  def isCancelled(self) -> bool: ...

  def isDone(self) -> bool: ...


class ListeningExecutorService:

  def awaitTermination(self, arg0: int, arg1: TimeUnit) -> bool: ...

  @overload
  def invokeAll(self, arg0: Collection[Callable[T]]) -> List[Future[T]]: ...

  @overload
  def invokeAll(self, arg0: Collection[Callable[T]]) -> List[Future[T]]: ...

  @overload
  def invokeAll(self, arg0: Collection[Callable[T]], arg1: int, arg2: TimeUnit) -> List[Future[T]]: ...

  @overload
  def invokeAll(self, arg0: Collection[Callable[T]], arg1: int, arg2: TimeUnit) -> List[Future[T]]: ...

  @overload
  def invokeAny(self, arg0: Collection[Callable[T]]) -> object: ...

  @overload
  def invokeAny(self, arg0: Collection[Callable[T]], arg1: int, arg2: TimeUnit) -> object: ...

  def isShutdown(self) -> bool: ...

  def isTerminated(self) -> bool: ...

  def shutdown(self) -> None: ...

  def shutdownNow(self) -> List[Runnable]: ...

  @overload
  def submit(self, arg0: Runnable) -> ListenableFuture[Any]: ...

  @overload
  def submit(self, arg0: Runnable) -> Future[Any]: ...

  @overload
  def submit(self, arg0: Callable[T]) -> ListenableFuture[T]: ...

  @overload
  def submit(self, arg0: Callable[T]) -> Future[T]: ...

  @overload
  def submit(self, arg0: Runnable, arg1: object) -> ListenableFuture[T]: ...

  @overload
  def submit(self, arg0: Runnable, arg1: object) -> Future[T]: ...

