from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.io import Reader, Writer, IOException
from java.lang import Enum, Boolean, Number, Throwable

class JsonReader:

  def beginArray(self) -> None: ...

  def beginObject(self) -> None: ...

  @overload
  def close(self) -> None: ...

  @overload
  def close(self) -> None: ...

  def endArray(self) -> None: ...

  def endObject(self) -> None: ...

  def getPath(self) -> str: ...

  def getPreviousPath(self) -> str: ...

  def hasNext(self) -> bool: ...

  def isLenient(self) -> bool: ...

  def nextBoolean(self) -> bool: ...

  def nextDouble(self) -> float: ...

  def nextInt(self) -> int: ...

  def nextLong(self) -> int: ...

  def nextName(self) -> str: ...

  def nextNull(self) -> None: ...

  def nextString(self) -> str: ...

  def peek(self) -> JsonToken: ...

  def setLenient(self, arg0: bool) -> None: ...

  def skipValue(self) -> None: ...

  def toString(self) -> str: ...

  def __init__(self, arg0: Reader): ...


class JsonToken(Enum):

  BEGIN_ARRAY: JsonToken

  BEGIN_OBJECT: JsonToken

  BOOLEAN: JsonToken

  END_ARRAY: JsonToken

  END_DOCUMENT: JsonToken

  END_OBJECT: JsonToken

  NAME: JsonToken

  NULL: JsonToken

  NUMBER: JsonToken

  STRING: JsonToken

  @staticmethod
  def valueOf(arg0: str) -> JsonToken: ...

  @staticmethod
  def values() -> list[JsonToken]: ...


class JsonWriter:

  def beginArray(self) -> JsonWriter: ...

  def beginObject(self) -> JsonWriter: ...

  @overload
  def close(self) -> None: ...

  @overload
  def close(self) -> None: ...

  def endArray(self) -> JsonWriter: ...

  def endObject(self) -> JsonWriter: ...

  @overload
  def flush(self) -> None: ...

  @overload
  def flush(self) -> None: ...

  def getSerializeNulls(self) -> bool: ...

  def isHtmlSafe(self) -> bool: ...

  def isLenient(self) -> bool: ...

  def jsonValue(self, arg0: str) -> JsonWriter: ...

  def name(self, arg0: str) -> JsonWriter: ...

  def nullValue(self) -> JsonWriter: ...

  def setHtmlSafe(self, arg0: bool) -> None: ...

  def setIndent(self, arg0: str) -> None: ...

  def setLenient(self, arg0: bool) -> None: ...

  def setSerializeNulls(self, arg0: bool) -> None: ...

  @overload
  def value(self, arg0: bool) -> JsonWriter: ...

  @overload
  def value(self, arg0: float) -> JsonWriter: ...

  @overload
  def value(self, arg0: Boolean) -> JsonWriter: ...

  @overload
  def value(self, arg0: Number) -> JsonWriter: ...

  @overload
  def value(self, arg0: str) -> JsonWriter: ...

  @overload
  def value(self, arg0: int) -> JsonWriter: ...

  def __init__(self, arg0: Writer): ...


class MalformedJsonException(IOException):

  @overload
  def __init__(self, arg0: str): ...
  @overload
  def __init__(self, arg0: Throwable): ...
  @overload
  def __init__(self, arg0: str, arg1: Throwable): ...

