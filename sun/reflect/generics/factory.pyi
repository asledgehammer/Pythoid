from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.lang.reflect import TypeVariable, Type, ParameterizedType, WildcardType, GenericDeclaration
from sun.reflect.generics.scope import Scope
from sun.reflect.generics.tree import FieldTypeSignature

class CoreReflectionFactory:

  @overload
  def findTypeVariable(self, arg0: str) -> TypeVariable[Any]: ...

  @overload
  def findTypeVariable(self, arg0: str) -> TypeVariable[Any]: ...

  @overload
  def makeArrayType(self, arg0: Type) -> Type: ...

  @overload
  def makeArrayType(self, arg0: Type) -> Type: ...

  @overload
  def makeBool(self) -> Type: ...

  @overload
  def makeBool(self) -> Type: ...

  @overload
  def makeByte(self) -> Type: ...

  @overload
  def makeByte(self) -> Type: ...

  @overload
  def makeChar(self) -> Type: ...

  @overload
  def makeChar(self) -> Type: ...

  @overload
  def makeDouble(self) -> Type: ...

  @overload
  def makeDouble(self) -> Type: ...

  @overload
  def makeFloat(self) -> Type: ...

  @overload
  def makeFloat(self) -> Type: ...

  @overload
  def makeInt(self) -> Type: ...

  @overload
  def makeInt(self) -> Type: ...

  @overload
  def makeLong(self) -> Type: ...

  @overload
  def makeLong(self) -> Type: ...

  @overload
  def makeNamedType(self, arg0: str) -> Type: ...

  @overload
  def makeNamedType(self, arg0: str) -> Type: ...

  @overload
  def makeParameterizedType(self, arg0: Type, arg1: list[Type], arg2: Type) -> ParameterizedType: ...

  @overload
  def makeParameterizedType(self, arg0: Type, arg1: list[Type], arg2: Type) -> ParameterizedType: ...

  @overload
  def makeShort(self) -> Type: ...

  @overload
  def makeShort(self) -> Type: ...

  @overload
  def makeTypeVariable(self, arg0: str, arg1: list[FieldTypeSignature]) -> TypeVariable[Any]: ...

  @overload
  def makeTypeVariable(self, arg0: str, arg1: list[FieldTypeSignature]) -> TypeVariable[Any]: ...

  @overload
  def makeVoid(self) -> Type: ...

  @overload
  def makeVoid(self) -> Type: ...

  @overload
  def makeWildcard(self, arg0: list[FieldTypeSignature], arg1: list[FieldTypeSignature]) -> WildcardType: ...

  @overload
  def makeWildcard(self, arg0: list[FieldTypeSignature], arg1: list[FieldTypeSignature]) -> WildcardType: ...

  @staticmethod
  def make(arg0: GenericDeclaration, arg1: Scope) -> CoreReflectionFactory: ...


class GenericsFactory:

  def findTypeVariable(self, arg0: str) -> TypeVariable[Any]: ...

  def makeArrayType(self, arg0: Type) -> Type: ...

  def makeBool(self) -> Type: ...

  def makeByte(self) -> Type: ...

  def makeChar(self) -> Type: ...

  def makeDouble(self) -> Type: ...

  def makeFloat(self) -> Type: ...

  def makeInt(self) -> Type: ...

  def makeLong(self) -> Type: ...

  def makeNamedType(self, arg0: str) -> Type: ...

  def makeParameterizedType(self, arg0: Type, arg1: list[Type], arg2: Type) -> ParameterizedType: ...

  def makeShort(self) -> Type: ...

  def makeTypeVariable(self, arg0: str, arg1: list[FieldTypeSignature]) -> TypeVariable[Any]: ...

  def makeVoid(self) -> Type: ...

  def makeWildcard(self, arg0: list[FieldTypeSignature], arg1: list[FieldTypeSignature]) -> WildcardType: ...

