from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.lang import Class
from java.lang.annotation import Annotation
from java.lang.reflect import Type, AnnotatedType
from sun.reflect.generics.factory import GenericsFactory
from sun.reflect.generics.tree import FieldTypeSignature

D = TypeVar('D', default=Any)
T = TypeVar('T', default=Any)

class GenericArrayTypeImpl:

  def equals(self, arg0: object) -> bool: ...

  @overload
  def getGenericComponentType(self) -> Type: ...

  @overload
  def getGenericComponentType(self) -> Type: ...

  def hashCode(self) -> int: ...

  def toString(self) -> str: ...

  @staticmethod
  def make(arg0: Type) -> GenericArrayTypeImpl: ...


class LazyReflectiveObjectGenerator: ...


class ParameterizedTypeImpl:

  def equals(self, arg0: object) -> bool: ...

  @overload
  def getActualTypeArguments(self) -> list[Type]: ...

  @overload
  def getActualTypeArguments(self) -> list[Type]: ...

  @overload
  def getOwnerType(self) -> Type: ...

  @overload
  def getOwnerType(self) -> Type: ...

  @overload
  def getRawType(self) -> Type: ...

  @overload
  def getRawType(self) -> Class[Any]: ...

  @overload
  def getRawType(self) -> Type: ...

  def hashCode(self) -> int: ...

  def toString(self) -> str: ...

  @staticmethod
  def make(arg0: Class[Any], arg1: list[Type], arg2: Type) -> ParameterizedTypeImpl: ...


class TypeVariableImpl[D](LazyReflectiveObjectGenerator):

  def equals(self, arg0: object) -> bool: ...

  @overload
  def getAnnotatedBounds(self) -> list[AnnotatedType]: ...

  @overload
  def getAnnotatedBounds(self) -> list[AnnotatedType]: ...

  def getAnnotation(self, arg0: Class[T]) -> T: ...

  def getAnnotations(self) -> list[Annotation]: ...

  def getAnnotationsByType(self, arg0: Class[T]) -> list[Annotation]: ...

  @overload
  def getBounds(self) -> list[Type]: ...

  @overload
  def getBounds(self) -> list[Type]: ...

  def getDeclaredAnnotation(self, arg0: Class[T]) -> T: ...

  def getDeclaredAnnotations(self) -> list[Annotation]: ...

  def getDeclaredAnnotationsByType(self, arg0: Class[T]) -> list[Annotation]: ...

  @overload
  def getGenericDeclaration(self) -> D: ...

  @overload
  def getGenericDeclaration(self) -> D: ...

  @overload
  def getName(self) -> str: ...

  @overload
  def getName(self) -> str: ...

  def hashCode(self) -> int: ...

  def toString(self) -> str: ...

  @staticmethod
  def make(arg0: T, arg1: str, arg2: list[FieldTypeSignature], arg3: GenericsFactory) -> TypeVariableImpl[T]: ...


class WildcardTypeImpl(LazyReflectiveObjectGenerator):

  def equals(self, arg0: object) -> bool: ...

  @overload
  def getLowerBounds(self) -> list[Type]: ...

  @overload
  def getLowerBounds(self) -> list[Type]: ...

  @overload
  def getUpperBounds(self) -> list[Type]: ...

  @overload
  def getUpperBounds(self) -> list[Type]: ...

  def hashCode(self) -> int: ...

  def toString(self) -> str: ...

  @staticmethod
  def make(arg0: list[FieldTypeSignature], arg1: list[FieldTypeSignature], arg2: GenericsFactory) -> WildcardTypeImpl: ...

