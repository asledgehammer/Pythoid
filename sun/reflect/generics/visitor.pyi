from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.lang.reflect import Type
from sun.reflect.generics.factory import GenericsFactory
from sun.reflect.generics.tree import ArrayTypeSignature, BooleanSignature, BottomSignature, ByteSignature, CharSignature, ClassTypeSignature, DoubleSignature, FloatSignature, FormalTypeParameter, IntSignature, LongSignature, ShortSignature, SimpleClassTypeSignature, TypeVariableSignature, VoidDescriptor, Wildcard, ClassSignature, MethodTypeSignature

T = TypeVar('T', default=Any)

class Reifier:

  @overload
  def getResult(self) -> Type: ...

  @overload
  def getResult(self) -> object: ...

  @overload
  def getResult(self) -> object: ...

  @overload
  def visitArrayTypeSignature(self, arg0: ArrayTypeSignature) -> None: ...

  @overload
  def visitArrayTypeSignature(self, arg0: ArrayTypeSignature) -> None: ...

  @overload
  def visitBooleanSignature(self, arg0: BooleanSignature) -> None: ...

  @overload
  def visitBooleanSignature(self, arg0: BooleanSignature) -> None: ...

  @overload
  def visitBottomSignature(self, arg0: BottomSignature) -> None: ...

  @overload
  def visitBottomSignature(self, arg0: BottomSignature) -> None: ...

  @overload
  def visitByteSignature(self, arg0: ByteSignature) -> None: ...

  @overload
  def visitByteSignature(self, arg0: ByteSignature) -> None: ...

  @overload
  def visitCharSignature(self, arg0: CharSignature) -> None: ...

  @overload
  def visitCharSignature(self, arg0: CharSignature) -> None: ...

  @overload
  def visitClassTypeSignature(self, arg0: ClassTypeSignature) -> None: ...

  @overload
  def visitClassTypeSignature(self, arg0: ClassTypeSignature) -> None: ...

  @overload
  def visitDoubleSignature(self, arg0: DoubleSignature) -> None: ...

  @overload
  def visitDoubleSignature(self, arg0: DoubleSignature) -> None: ...

  @overload
  def visitFloatSignature(self, arg0: FloatSignature) -> None: ...

  @overload
  def visitFloatSignature(self, arg0: FloatSignature) -> None: ...

  @overload
  def visitFormalTypeParameter(self, arg0: FormalTypeParameter) -> None: ...

  @overload
  def visitFormalTypeParameter(self, arg0: FormalTypeParameter) -> None: ...

  @overload
  def visitIntSignature(self, arg0: IntSignature) -> None: ...

  @overload
  def visitIntSignature(self, arg0: IntSignature) -> None: ...

  @overload
  def visitLongSignature(self, arg0: LongSignature) -> None: ...

  @overload
  def visitLongSignature(self, arg0: LongSignature) -> None: ...

  @overload
  def visitShortSignature(self, arg0: ShortSignature) -> None: ...

  @overload
  def visitShortSignature(self, arg0: ShortSignature) -> None: ...

  @overload
  def visitSimpleClassTypeSignature(self, arg0: SimpleClassTypeSignature) -> None: ...

  @overload
  def visitSimpleClassTypeSignature(self, arg0: SimpleClassTypeSignature) -> None: ...

  @overload
  def visitTypeVariableSignature(self, arg0: TypeVariableSignature) -> None: ...

  @overload
  def visitTypeVariableSignature(self, arg0: TypeVariableSignature) -> None: ...

  @overload
  def visitVoidDescriptor(self, arg0: VoidDescriptor) -> None: ...

  @overload
  def visitVoidDescriptor(self, arg0: VoidDescriptor) -> None: ...

  @overload
  def visitWildcard(self, arg0: Wildcard) -> None: ...

  @overload
  def visitWildcard(self, arg0: Wildcard) -> None: ...

  @staticmethod
  def make(arg0: GenericsFactory) -> Reifier: ...


class TypeTreeVisitor[T]:

  def getResult(self) -> object: ...

  def visitArrayTypeSignature(self, arg0: ArrayTypeSignature) -> None: ...

  def visitBooleanSignature(self, arg0: BooleanSignature) -> None: ...

  def visitBottomSignature(self, arg0: BottomSignature) -> None: ...

  def visitByteSignature(self, arg0: ByteSignature) -> None: ...

  def visitCharSignature(self, arg0: CharSignature) -> None: ...

  def visitClassTypeSignature(self, arg0: ClassTypeSignature) -> None: ...

  def visitDoubleSignature(self, arg0: DoubleSignature) -> None: ...

  def visitFloatSignature(self, arg0: FloatSignature) -> None: ...

  def visitFormalTypeParameter(self, arg0: FormalTypeParameter) -> None: ...

  def visitIntSignature(self, arg0: IntSignature) -> None: ...

  def visitLongSignature(self, arg0: LongSignature) -> None: ...

  def visitShortSignature(self, arg0: ShortSignature) -> None: ...

  def visitSimpleClassTypeSignature(self, arg0: SimpleClassTypeSignature) -> None: ...

  def visitTypeVariableSignature(self, arg0: TypeVariableSignature) -> None: ...

  def visitVoidDescriptor(self, arg0: VoidDescriptor) -> None: ...

  def visitWildcard(self, arg0: Wildcard) -> None: ...


class Visitor[T]:

  def getResult(self) -> object: ...

  def visitArrayTypeSignature(self, arg0: ArrayTypeSignature) -> None: ...

  def visitBooleanSignature(self, arg0: BooleanSignature) -> None: ...

  def visitBottomSignature(self, arg0: BottomSignature) -> None: ...

  def visitByteSignature(self, arg0: ByteSignature) -> None: ...

  def visitCharSignature(self, arg0: CharSignature) -> None: ...

  def visitClassSignature(self, arg0: ClassSignature) -> None: ...

  def visitClassTypeSignature(self, arg0: ClassTypeSignature) -> None: ...

  def visitDoubleSignature(self, arg0: DoubleSignature) -> None: ...

  def visitFloatSignature(self, arg0: FloatSignature) -> None: ...

  def visitFormalTypeParameter(self, arg0: FormalTypeParameter) -> None: ...

  def visitIntSignature(self, arg0: IntSignature) -> None: ...

  def visitLongSignature(self, arg0: LongSignature) -> None: ...

  def visitMethodTypeSignature(self, arg0: MethodTypeSignature) -> None: ...

  def visitShortSignature(self, arg0: ShortSignature) -> None: ...

  def visitSimpleClassTypeSignature(self, arg0: SimpleClassTypeSignature) -> None: ...

  def visitTypeVariableSignature(self, arg0: TypeVariableSignature) -> None: ...

  def visitVoidDescriptor(self, arg0: VoidDescriptor) -> None: ...

  def visitWildcard(self, arg0: Wildcard) -> None: ...

