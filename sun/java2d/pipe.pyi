from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.awt import Shape, BasicStroke, Rectangle, Image, Color
from java.awt.font import GlyphVector
from java.awt.geom import AffineTransform, Rectangle2D, PathIterator
from java.awt.image import ImageObserver, BufferedImage, BufferedImageOp
from sun.awt.geom import PathConsumer2D
from sun.java2d import SunGraphics2D, ReentrantContext

class AAShapePipe:

  @overload
  def draw(self, arg0: SunGraphics2D, arg1: Shape) -> None: ...

  @overload
  def draw(self, arg0: SunGraphics2D, arg1: Shape) -> None: ...

  @overload
  def drawParallelogram(self, arg0: SunGraphics2D, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float, arg10: float, arg11: float, arg12: float) -> None: ...

  @overload
  def drawParallelogram(self, arg0: SunGraphics2D, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float, arg10: float, arg11: float, arg12: float) -> None: ...

  @overload
  def fill(self, arg0: SunGraphics2D, arg1: Shape) -> None: ...

  @overload
  def fill(self, arg0: SunGraphics2D, arg1: Shape) -> None: ...

  @overload
  def fillParallelogram(self, arg0: SunGraphics2D, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float, arg10: float) -> None: ...

  @overload
  def fillParallelogram(self, arg0: SunGraphics2D, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float, arg10: float) -> None: ...

  def renderPath(self, arg0: SunGraphics2D, arg1: Shape, arg2: BasicStroke) -> None: ...

  def renderTiles(self, arg0: SunGraphics2D, arg1: Shape, arg2: AATileGenerator, arg3: list[int], arg4: AAShapePipe.TileState) -> None: ...

  def __init__(self, arg0: CompositePipe): ...

  class TileState(ReentrantContext): ...


class AATileGenerator:

  def dispose(self) -> None: ...

  def getAlpha(self, arg0: list[int], arg1: int, arg2: int) -> None: ...

  def getTileHeight(self) -> int: ...

  def getTileWidth(self) -> int: ...

  def getTypicalAlpha(self) -> int: ...

  def nextTile(self) -> None: ...


class AlphaColorPipe:

  @overload
  def drawParallelogram(self, arg0: SunGraphics2D, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float, arg10: float, arg11: float, arg12: float) -> None: ...

  @overload
  def drawParallelogram(self, arg0: SunGraphics2D, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float, arg10: float, arg11: float, arg12: float) -> None: ...

  @overload
  def endSequence(self, arg0: object) -> None: ...

  @overload
  def endSequence(self, arg0: object) -> None: ...

  @overload
  def fillParallelogram(self, arg0: SunGraphics2D, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float, arg10: float) -> None: ...

  @overload
  def fillParallelogram(self, arg0: SunGraphics2D, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float, arg10: float) -> None: ...

  @overload
  def needTile(self, arg0: object, arg1: int, arg2: int, arg3: int, arg4: int) -> bool: ...

  @overload
  def needTile(self, arg0: object, arg1: int, arg2: int, arg3: int, arg4: int) -> bool: ...

  @overload
  def renderPathTile(self, arg0: object, arg1: list[int], arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int) -> None: ...

  @overload
  def renderPathTile(self, arg0: object, arg1: list[int], arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int) -> None: ...

  @overload
  def skipTile(self, arg0: object, arg1: int, arg2: int) -> None: ...

  @overload
  def skipTile(self, arg0: object, arg1: int, arg2: int) -> None: ...

  @overload
  def startSequence(self, arg0: SunGraphics2D, arg1: Shape, arg2: Rectangle, arg3: list[int]) -> object: ...

  @overload
  def startSequence(self, arg0: SunGraphics2D, arg1: Shape, arg2: Rectangle, arg3: list[int]) -> object: ...

  def __init__(self): ...


class CompositePipe:

  def endSequence(self, arg0: object) -> None: ...

  def needTile(self, arg0: object, arg1: int, arg2: int, arg3: int, arg4: int) -> bool: ...

  def renderPathTile(self, arg0: object, arg1: list[int], arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int) -> None: ...

  def skipTile(self, arg0: object, arg1: int, arg2: int) -> None: ...

  def startSequence(self, arg0: SunGraphics2D, arg1: Shape, arg2: Rectangle, arg3: list[int]) -> object: ...


class DrawImagePipe:

  @overload
  def copyImage(self, arg0: SunGraphics2D, arg1: Image, arg2: int, arg3: int, arg4: Color, arg5: ImageObserver) -> bool: ...

  @overload
  def copyImage(self, arg0: SunGraphics2D, arg1: Image, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: Color, arg9: ImageObserver) -> bool: ...

  @overload
  def scaleImage(self, arg0: SunGraphics2D, arg1: Image, arg2: int, arg3: int, arg4: int, arg5: int, arg6: Color, arg7: ImageObserver) -> bool: ...

  @overload
  def scaleImage(self, arg0: SunGraphics2D, arg1: Image, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: int, arg10: Color, arg11: ImageObserver) -> bool: ...

  @overload
  def transformImage(self, arg0: SunGraphics2D, arg1: Image, arg2: AffineTransform, arg3: ImageObserver) -> bool: ...

  @overload
  def transformImage(self, arg0: SunGraphics2D, arg1: BufferedImage, arg2: BufferedImageOp, arg3: int, arg4: int) -> None: ...


class LoopBasedPipe: ...


class LoopPipe:

  @overload
  def draw(self, arg0: SunGraphics2D, arg1: Shape) -> None: ...

  @overload
  def draw(self, arg0: SunGraphics2D, arg1: Shape) -> None: ...

  @overload
  def drawArc(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int) -> None: ...

  @overload
  def drawArc(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int) -> None: ...

  @overload
  def drawLine(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int) -> None: ...

  @overload
  def drawLine(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int) -> None: ...

  @overload
  def drawOval(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int) -> None: ...

  @overload
  def drawOval(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int) -> None: ...

  @overload
  def drawParallelogram(self, arg0: SunGraphics2D, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float, arg10: float, arg11: float, arg12: float) -> None: ...

  @overload
  def drawParallelogram(self, arg0: SunGraphics2D, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float, arg10: float, arg11: float, arg12: float) -> None: ...

  @overload
  def drawPolygon(self, arg0: SunGraphics2D, arg1: list[int], arg2: list[int], arg3: int) -> None: ...

  @overload
  def drawPolygon(self, arg0: SunGraphics2D, arg1: list[int], arg2: list[int], arg3: int) -> None: ...

  @overload
  def drawPolyline(self, arg0: SunGraphics2D, arg1: list[int], arg2: list[int], arg3: int) -> None: ...

  @overload
  def drawPolyline(self, arg0: SunGraphics2D, arg1: list[int], arg2: list[int], arg3: int) -> None: ...

  @overload
  def drawRect(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int) -> None: ...

  @overload
  def drawRect(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int) -> None: ...

  @overload
  def drawRoundRect(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int) -> None: ...

  @overload
  def drawRoundRect(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int) -> None: ...

  @overload
  def fill(self, arg0: SunGraphics2D, arg1: Shape) -> None: ...

  @overload
  def fill(self, arg0: SunGraphics2D, arg1: Shape) -> None: ...

  @overload
  def fillArc(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int) -> None: ...

  @overload
  def fillArc(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int) -> None: ...

  @overload
  def fillOval(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int) -> None: ...

  @overload
  def fillOval(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int) -> None: ...

  @overload
  def fillParallelogram(self, arg0: SunGraphics2D, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float, arg10: float) -> None: ...

  @overload
  def fillParallelogram(self, arg0: SunGraphics2D, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float, arg10: float) -> None: ...

  @overload
  def fillPolygon(self, arg0: SunGraphics2D, arg1: list[int], arg2: list[int], arg3: int) -> None: ...

  @overload
  def fillPolygon(self, arg0: SunGraphics2D, arg1: list[int], arg2: list[int], arg3: int) -> None: ...

  @overload
  def fillRect(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int) -> None: ...

  @overload
  def fillRect(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int) -> None: ...

  @overload
  def fillRoundRect(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int) -> None: ...

  @overload
  def fillRoundRect(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int) -> None: ...

  @staticmethod
  def getFillSSI(arg0: SunGraphics2D) -> ShapeSpanIterator: ...

  @staticmethod
  def getStrokeSpans(arg0: SunGraphics2D, arg1: Shape) -> ShapeSpanIterator: ...

  def __init__(self): ...


class ParallelogramPipe:

  def drawParallelogram(self, arg0: SunGraphics2D, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float, arg10: float, arg11: float, arg12: float) -> None: ...

  def fillParallelogram(self, arg0: SunGraphics2D, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float, arg10: float) -> None: ...


class PixelDrawPipe:

  def drawArc(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int) -> None: ...

  def drawLine(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int) -> None: ...

  def drawOval(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int) -> None: ...

  def drawPolygon(self, arg0: SunGraphics2D, arg1: list[int], arg2: list[int], arg3: int) -> None: ...

  def drawPolyline(self, arg0: SunGraphics2D, arg1: list[int], arg2: list[int], arg3: int) -> None: ...

  def drawRect(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int) -> None: ...

  def drawRoundRect(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int) -> None: ...


class PixelFillPipe:

  def fillArc(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int) -> None: ...

  def fillOval(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int) -> None: ...

  def fillPolygon(self, arg0: SunGraphics2D, arg1: list[int], arg2: list[int], arg3: int) -> None: ...

  def fillRect(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int) -> None: ...

  def fillRoundRect(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int) -> None: ...


class PixelToParallelogramConverter(PixelToShapeConverter):

  @overload
  def draw(self, arg0: SunGraphics2D, arg1: Shape) -> None: ...

  @overload
  def draw(self, arg0: SunGraphics2D, arg1: Shape) -> None: ...

  def drawGeneralLine(self, arg0: SunGraphics2D, arg1: float, arg2: float, arg3: float, arg4: float) -> bool: ...

  def drawLine(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int) -> None: ...

  def drawRect(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int) -> None: ...

  def drawRectangle(self, arg0: SunGraphics2D, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> None: ...

  @overload
  def fill(self, arg0: SunGraphics2D, arg1: Shape) -> None: ...

  @overload
  def fill(self, arg0: SunGraphics2D, arg1: Shape) -> None: ...

  def fillOuterParallelogram(self, arg0: SunGraphics2D, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float, arg10: float, arg11: float, arg12: float, arg13: float, arg14: float) -> None: ...

  def fillRect(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int) -> None: ...

  def fillRectangle(self, arg0: SunGraphics2D, arg1: float, arg2: float, arg3: float, arg4: float) -> None: ...

  def __init__(self, arg0: ShapeDrawPipe, arg1: ParallelogramPipe, arg2: float, arg3: float, arg4: bool): ...


class PixelToShapeConverter:

  @overload
  def drawArc(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int) -> None: ...

  @overload
  def drawArc(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int) -> None: ...

  @overload
  def drawLine(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int) -> None: ...

  @overload
  def drawLine(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int) -> None: ...

  @overload
  def drawOval(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int) -> None: ...

  @overload
  def drawOval(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int) -> None: ...

  @overload
  def drawPolygon(self, arg0: SunGraphics2D, arg1: list[int], arg2: list[int], arg3: int) -> None: ...

  @overload
  def drawPolygon(self, arg0: SunGraphics2D, arg1: list[int], arg2: list[int], arg3: int) -> None: ...

  @overload
  def drawPolyline(self, arg0: SunGraphics2D, arg1: list[int], arg2: list[int], arg3: int) -> None: ...

  @overload
  def drawPolyline(self, arg0: SunGraphics2D, arg1: list[int], arg2: list[int], arg3: int) -> None: ...

  @overload
  def drawRect(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int) -> None: ...

  @overload
  def drawRect(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int) -> None: ...

  @overload
  def drawRoundRect(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int) -> None: ...

  @overload
  def drawRoundRect(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int) -> None: ...

  @overload
  def fillArc(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int) -> None: ...

  @overload
  def fillArc(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int) -> None: ...

  @overload
  def fillOval(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int) -> None: ...

  @overload
  def fillOval(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int) -> None: ...

  @overload
  def fillPolygon(self, arg0: SunGraphics2D, arg1: list[int], arg2: list[int], arg3: int) -> None: ...

  @overload
  def fillPolygon(self, arg0: SunGraphics2D, arg1: list[int], arg2: list[int], arg3: int) -> None: ...

  @overload
  def fillRect(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int) -> None: ...

  @overload
  def fillRect(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int) -> None: ...

  @overload
  def fillRoundRect(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int) -> None: ...

  @overload
  def fillRoundRect(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int) -> None: ...

  def __init__(self, arg0: ShapeDrawPipe): ...


class Region:

  EMPTY_REGION: Region

  WHOLE_REGION: Region

  def clipBoxToBounds(self, arg0: list[int]) -> None: ...

  def contains(self, arg0: int, arg1: int) -> bool: ...

  def encompasses(self, arg0: Region) -> bool: ...

  def encompassesXYWH(self, arg0: int, arg1: int, arg2: int, arg3: int) -> bool: ...

  def encompassesXYXY(self, arg0: int, arg1: int, arg2: int, arg3: int) -> bool: ...

  def equals(self, arg0: object) -> bool: ...

  def filter(self, arg0: SpanIterator) -> SpanIterator: ...

  def getBounds(self, arg0: list[int]) -> None: ...

  @overload
  def getBoundsIntersection(self, arg0: Rectangle) -> Region: ...

  @overload
  def getBoundsIntersection(self, arg0: Region) -> Region: ...

  def getBoundsIntersectionXYWH(self, arg0: int, arg1: int, arg2: int, arg3: int) -> Region: ...

  def getBoundsIntersectionXYXY(self, arg0: int, arg1: int, arg2: int, arg3: int) -> Region: ...

  def getDifference(self, arg0: Region) -> Region: ...

  def getExclusiveOr(self, arg0: Region) -> Region: ...

  def getHeight(self) -> int: ...

  def getHiX(self) -> int: ...

  def getHiY(self) -> int: ...

  @overload
  def getIntersection(self, arg0: Rectangle) -> Region: ...

  @overload
  def getIntersection(self, arg0: Rectangle2D) -> Region: ...

  @overload
  def getIntersection(self, arg0: Region) -> Region: ...

  def getIntersectionXYWH(self, arg0: int, arg1: int, arg2: int, arg3: int) -> Region: ...

  @overload
  def getIntersectionXYXY(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Region: ...

  @overload
  def getIntersectionXYXY(self, arg0: int, arg1: int, arg2: int, arg3: int) -> Region: ...

  def getIterator(self) -> RegionIterator: ...

  def getLoX(self) -> int: ...

  def getLoY(self) -> int: ...

  def getScaledRegion(self, arg0: float, arg1: float) -> Region: ...

  @overload
  def getSpanIterator(self) -> SpanIterator: ...

  @overload
  def getSpanIterator(self, arg0: list[int]) -> SpanIterator: ...

  def getTranslatedRegion(self, arg0: int, arg1: int) -> Region: ...

  def getUnion(self, arg0: Region) -> Region: ...

  def getWidth(self) -> int: ...

  def hashCode(self) -> int: ...

  def intersectsQuickCheck(self, arg0: Region) -> bool: ...

  def intersectsQuickCheckXYXY(self, arg0: int, arg1: int, arg2: int, arg3: int) -> bool: ...

  def isEmpty(self) -> bool: ...

  def isInsideQuickCheck(self, arg0: Region) -> bool: ...

  def isInsideXYWH(self, arg0: int, arg1: int, arg2: int, arg3: int) -> bool: ...

  def isInsideXYXY(self, arg0: int, arg1: int, arg2: int, arg3: int) -> bool: ...

  def isRectangular(self) -> bool: ...

  def toString(self) -> str: ...

  @staticmethod
  def clipAdd(arg0: int, arg1: int) -> int: ...

  @staticmethod
  def clipRound(arg0: float) -> int: ...

  @staticmethod
  def clipScale(arg0: int, arg1: float) -> int: ...

  @staticmethod
  def dimAdd(arg0: int, arg1: int) -> int: ...

  @staticmethod
  @overload
  def getInstance(arg0: list[int]) -> Region: ...

  @staticmethod
  @overload
  def getInstance(arg0: Rectangle) -> Region: ...

  @staticmethod
  @overload
  def getInstance(arg0: list[int], arg1: SpanIterator) -> Region: ...

  @staticmethod
  @overload
  def getInstance(arg0: Shape, arg1: AffineTransform) -> Region: ...

  @staticmethod
  @overload
  def getInstance(arg0: Region, arg1: Shape, arg2: AffineTransform) -> Region: ...

  @staticmethod
  @overload
  def getInstance(arg0: Region, arg1: bool, arg2: Shape, arg3: AffineTransform) -> Region: ...

  @staticmethod
  def getInstanceXYWH(arg0: int, arg1: int, arg2: int, arg3: int) -> Region: ...

  @staticmethod
  def getInstanceXYXY(arg0: int, arg1: int, arg2: int, arg3: int) -> Region: ...


class RegionIterator:

  def copyStateFrom(self, arg0: RegionIterator) -> None: ...

  def createCopy(self) -> RegionIterator: ...

  def nextXBand(self, arg0: list[int]) -> bool: ...

  def nextYRange(self, arg0: list[int]) -> bool: ...


class RenderingEngine:

  def createStrokedShape(self, arg0: Shape, arg1: float, arg2: int, arg3: int, arg4: float, arg5: list[float], arg6: float) -> Shape: ...

  @overload
  def getAATileGenerator(self, arg0: Shape, arg1: AffineTransform, arg2: Region, arg3: BasicStroke, arg4: bool, arg5: bool, arg6: list[int]) -> AATileGenerator: ...

  @overload
  def getAATileGenerator(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: Region, arg9: list[int]) -> AATileGenerator: ...

  def getMinimumAAPenSize(self) -> float: ...

  @overload
  def strokeTo(self, arg0: Shape, arg1: AffineTransform, arg2: BasicStroke, arg3: bool, arg4: bool, arg5: bool, arg6: PathConsumer2D) -> None: ...

  @overload
  def strokeTo(self, arg0: Shape, arg1: AffineTransform, arg2: Region, arg3: BasicStroke, arg4: bool, arg5: bool, arg6: bool, arg7: PathConsumer2D) -> None: ...

  @staticmethod
  def feedConsumer(arg0: PathIterator, arg1: PathConsumer2D) -> None: ...

  @staticmethod
  def getInstance() -> RenderingEngine: ...

  def __init__(self): ...

  class Tracer(RenderingEngine):

    def createStrokedShape(self, arg0: Shape, arg1: float, arg2: int, arg3: int, arg4: float, arg5: list[float], arg6: float) -> Shape: ...

    @overload
    def getAATileGenerator(self, arg0: Shape, arg1: AffineTransform, arg2: Region, arg3: BasicStroke, arg4: bool, arg5: bool, arg6: list[int]) -> AATileGenerator: ...

    @overload
    def getAATileGenerator(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: Region, arg9: list[int]) -> AATileGenerator: ...

    def getMinimumAAPenSize(self) -> float: ...

    @overload
    def strokeTo(self, arg0: Shape, arg1: AffineTransform, arg2: BasicStroke, arg3: bool, arg4: bool, arg5: bool, arg6: PathConsumer2D) -> None: ...

    @overload
    def strokeTo(self, arg0: Shape, arg1: AffineTransform, arg2: Region, arg3: BasicStroke, arg4: bool, arg5: bool, arg6: bool, arg7: PathConsumer2D) -> None: ...

    def __init__(self, arg0: RenderingEngine): ...


class ShapeDrawPipe:

  def draw(self, arg0: SunGraphics2D, arg1: Shape) -> None: ...

  def fill(self, arg0: SunGraphics2D, arg1: Shape) -> None: ...


class ShapeSpanIterator:

  def addSegment(self, arg0: int, arg1: list[float]) -> None: ...

  def appendPath(self, arg0: PathIterator) -> None: ...

  def appendPoly(self, arg0: list[int], arg1: list[int], arg2: int, arg3: int, arg4: int) -> None: ...

  @overload
  def closePath(self) -> None: ...

  @overload
  def closePath(self) -> None: ...

  @overload
  def curveTo(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> None: ...

  @overload
  def curveTo(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> None: ...

  def dispose(self) -> None: ...

  @overload
  def getNativeConsumer(self) -> int: ...

  @overload
  def getNativeConsumer(self) -> int: ...

  @overload
  def getNativeIterator(self) -> int: ...

  @overload
  def getNativeIterator(self) -> int: ...

  @overload
  def getPathBox(self, arg0: list[int]) -> None: ...

  @overload
  def getPathBox(self, arg0: list[int]) -> None: ...

  @overload
  def intersectClipBox(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...

  @overload
  def intersectClipBox(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...

  @overload
  def lineTo(self, arg0: float, arg1: float) -> None: ...

  @overload
  def lineTo(self, arg0: float, arg1: float) -> None: ...

  @overload
  def moveTo(self, arg0: float, arg1: float) -> None: ...

  @overload
  def moveTo(self, arg0: float, arg1: float) -> None: ...

  @overload
  def nextSpan(self, arg0: list[int]) -> bool: ...

  @overload
  def nextSpan(self, arg0: list[int]) -> bool: ...

  @overload
  def pathDone(self) -> None: ...

  @overload
  def pathDone(self) -> None: ...

  @overload
  def quadTo(self, arg0: float, arg1: float, arg2: float, arg3: float) -> None: ...

  @overload
  def quadTo(self, arg0: float, arg1: float, arg2: float, arg3: float) -> None: ...

  @overload
  def setOutputArea(self, arg0: Rectangle) -> None: ...

  @overload
  def setOutputArea(self, arg0: Region) -> None: ...

  def setOutputAreaXYWH(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...

  def setOutputAreaXYXY(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...

  def setRule(self, arg0: int) -> None: ...

  @overload
  def skipDownTo(self, arg0: int) -> None: ...

  @overload
  def skipDownTo(self, arg0: int) -> None: ...

  @staticmethod
  def initIDs() -> None: ...

  def __init__(self, arg0: bool): ...


class SpanIterator:

  def getNativeIterator(self) -> int: ...

  def getPathBox(self, arg0: list[int]) -> None: ...

  def intersectClipBox(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...

  def nextSpan(self, arg0: list[int]) -> bool: ...

  def skipDownTo(self, arg0: int) -> None: ...


class SpanShapeRenderer:

  NON_RECTILINEAR_TRANSFORM_MASK: int

  @overload
  def draw(self, arg0: SunGraphics2D, arg1: Shape) -> None: ...

  @overload
  def draw(self, arg0: SunGraphics2D, arg1: Shape) -> None: ...

  def endSequence(self, arg0: object) -> None: ...

  @overload
  def fill(self, arg0: SunGraphics2D, arg1: Shape) -> None: ...

  @overload
  def fill(self, arg0: SunGraphics2D, arg1: Shape) -> None: ...

  def renderBox(self, arg0: object, arg1: int, arg2: int, arg3: int, arg4: int) -> None: ...

  def renderRect(self, arg0: SunGraphics2D, arg1: Rectangle2D) -> None: ...

  def renderSpans(self, arg0: SunGraphics2D, arg1: Region, arg2: Shape, arg3: ShapeSpanIterator) -> None: ...

  def spanClipLoop(self, arg0: object, arg1: SpanIterator, arg2: Region, arg3: list[int]) -> None: ...

  def startSequence(self, arg0: SunGraphics2D, arg1: Shape, arg2: Rectangle, arg3: list[int]) -> object: ...

  def __init__(self): ...

  class Simple(SpanShapeRenderer):

    def endSequence(self, arg0: object) -> None: ...

    def renderBox(self, arg0: object, arg1: int, arg2: int, arg3: int, arg4: int) -> None: ...

    def startSequence(self, arg0: SunGraphics2D, arg1: Shape, arg2: Rectangle, arg3: list[int]) -> object: ...

    def __init__(self): ...

  class Composite(SpanShapeRenderer):

    def endSequence(self, arg0: object) -> None: ...

    def renderBox(self, arg0: object, arg1: int, arg2: int, arg3: int, arg4: int) -> None: ...

    def startSequence(self, arg0: SunGraphics2D, arg1: Shape, arg2: Rectangle, arg3: list[int]) -> object: ...

    def __init__(self, arg0: CompositePipe): ...


class TextPipe:

  def drawChars(self, arg0: SunGraphics2D, arg1: list[str], arg2: int, arg3: int, arg4: int, arg5: int) -> None: ...

  def drawGlyphVector(self, arg0: SunGraphics2D, arg1: GlyphVector, arg2: float, arg3: float) -> None: ...

  def drawString(self, arg0: SunGraphics2D, arg1: str, arg2: float, arg3: float) -> None: ...


class ValidatePipe:

  @overload
  def copyImage(self, arg0: SunGraphics2D, arg1: Image, arg2: int, arg3: int, arg4: Color, arg5: ImageObserver) -> bool: ...

  @overload
  def copyImage(self, arg0: SunGraphics2D, arg1: Image, arg2: int, arg3: int, arg4: Color, arg5: ImageObserver) -> bool: ...

  @overload
  def copyImage(self, arg0: SunGraphics2D, arg1: Image, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: Color, arg9: ImageObserver) -> bool: ...

  @overload
  def copyImage(self, arg0: SunGraphics2D, arg1: Image, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: Color, arg9: ImageObserver) -> bool: ...

  @overload
  def draw(self, arg0: SunGraphics2D, arg1: Shape) -> None: ...

  @overload
  def draw(self, arg0: SunGraphics2D, arg1: Shape) -> None: ...

  @overload
  def drawArc(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int) -> None: ...

  @overload
  def drawArc(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int) -> None: ...

  @overload
  def drawChars(self, arg0: SunGraphics2D, arg1: list[str], arg2: int, arg3: int, arg4: int, arg5: int) -> None: ...

  @overload
  def drawChars(self, arg0: SunGraphics2D, arg1: list[str], arg2: int, arg3: int, arg4: int, arg5: int) -> None: ...

  @overload
  def drawGlyphVector(self, arg0: SunGraphics2D, arg1: GlyphVector, arg2: float, arg3: float) -> None: ...

  @overload
  def drawGlyphVector(self, arg0: SunGraphics2D, arg1: GlyphVector, arg2: float, arg3: float) -> None: ...

  @overload
  def drawLine(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int) -> None: ...

  @overload
  def drawLine(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int) -> None: ...

  @overload
  def drawOval(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int) -> None: ...

  @overload
  def drawOval(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int) -> None: ...

  @overload
  def drawPolygon(self, arg0: SunGraphics2D, arg1: list[int], arg2: list[int], arg3: int) -> None: ...

  @overload
  def drawPolygon(self, arg0: SunGraphics2D, arg1: list[int], arg2: list[int], arg3: int) -> None: ...

  @overload
  def drawPolyline(self, arg0: SunGraphics2D, arg1: list[int], arg2: list[int], arg3: int) -> None: ...

  @overload
  def drawPolyline(self, arg0: SunGraphics2D, arg1: list[int], arg2: list[int], arg3: int) -> None: ...

  @overload
  def drawRect(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int) -> None: ...

  @overload
  def drawRect(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int) -> None: ...

  @overload
  def drawRoundRect(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int) -> None: ...

  @overload
  def drawRoundRect(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int) -> None: ...

  @overload
  def drawString(self, arg0: SunGraphics2D, arg1: str, arg2: float, arg3: float) -> None: ...

  @overload
  def drawString(self, arg0: SunGraphics2D, arg1: str, arg2: float, arg3: float) -> None: ...

  @overload
  def fill(self, arg0: SunGraphics2D, arg1: Shape) -> None: ...

  @overload
  def fill(self, arg0: SunGraphics2D, arg1: Shape) -> None: ...

  @overload
  def fillArc(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int) -> None: ...

  @overload
  def fillArc(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int) -> None: ...

  @overload
  def fillOval(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int) -> None: ...

  @overload
  def fillOval(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int) -> None: ...

  @overload
  def fillPolygon(self, arg0: SunGraphics2D, arg1: list[int], arg2: list[int], arg3: int) -> None: ...

  @overload
  def fillPolygon(self, arg0: SunGraphics2D, arg1: list[int], arg2: list[int], arg3: int) -> None: ...

  @overload
  def fillRect(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int) -> None: ...

  @overload
  def fillRect(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int) -> None: ...

  @overload
  def fillRoundRect(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int) -> None: ...

  @overload
  def fillRoundRect(self, arg0: SunGraphics2D, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int) -> None: ...

  @overload
  def scaleImage(self, arg0: SunGraphics2D, arg1: Image, arg2: int, arg3: int, arg4: int, arg5: int, arg6: Color, arg7: ImageObserver) -> bool: ...

  @overload
  def scaleImage(self, arg0: SunGraphics2D, arg1: Image, arg2: int, arg3: int, arg4: int, arg5: int, arg6: Color, arg7: ImageObserver) -> bool: ...

  @overload
  def scaleImage(self, arg0: SunGraphics2D, arg1: Image, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: int, arg10: Color, arg11: ImageObserver) -> bool: ...

  @overload
  def scaleImage(self, arg0: SunGraphics2D, arg1: Image, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: int, arg10: Color, arg11: ImageObserver) -> bool: ...

  @overload
  def transformImage(self, arg0: SunGraphics2D, arg1: Image, arg2: AffineTransform, arg3: ImageObserver) -> bool: ...

  @overload
  def transformImage(self, arg0: SunGraphics2D, arg1: Image, arg2: AffineTransform, arg3: ImageObserver) -> bool: ...

  @overload
  def transformImage(self, arg0: SunGraphics2D, arg1: BufferedImage, arg2: BufferedImageOp, arg3: int, arg4: int) -> None: ...

  @overload
  def transformImage(self, arg0: SunGraphics2D, arg1: BufferedImage, arg2: BufferedImageOp, arg3: int, arg4: int) -> None: ...

  def validate(self, arg0: SunGraphics2D) -> bool: ...

  def __init__(self): ...

