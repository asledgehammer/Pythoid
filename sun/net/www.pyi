from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.io import InputStream, PrintStream, File
from java.net import URL, URI
from java.util import Map, List, Iterator
from java.util.function import Consumer

class MessageHeader:

  def add(self, arg0: str, arg1: str) -> None: ...

  def filterAndAddHeaders(self, arg0: list[str], arg1: Map[str, List[str]]) -> Map[str, List[str]]: ...

  def filterNTLMResponses(self, arg0: str) -> bool: ...

  def findNextValue(self, arg0: str, arg1: str) -> str: ...

  def findValue(self, arg0: str) -> str: ...

  def getHeaderNamesInList(self) -> str: ...

  @overload
  def getHeaders(self) -> Map[str, List[str]]: ...

  @overload
  def getHeaders(self, arg0: list[str]) -> Map[str, List[str]]: ...

  @overload
  def getKey(self, arg0: int) -> str: ...

  @overload
  def getKey(self, arg0: str) -> int: ...

  def getValue(self, arg0: int) -> str: ...

  def mergeHeader(self, arg0: InputStream) -> None: ...

  def multiValueIterator(self, arg0: str) -> Iterator[str]: ...

  def parseHeader(self, arg0: InputStream) -> None: ...

  def prepend(self, arg0: str, arg1: str) -> None: ...

  def print(self, arg0: PrintStream) -> None: ...

  def remove(self, arg0: str) -> None: ...

  def reset(self) -> None: ...

  @overload
  def set(self, arg0: str, arg1: str) -> None: ...

  @overload
  def set(self, arg0: int, arg1: str, arg2: str) -> None: ...

  def setIfNotSet(self, arg0: str, arg1: str) -> None: ...

  def toString(self) -> str: ...

  @staticmethod
  def canonicalID(arg0: str) -> str: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: InputStream): ...

  class HeaderIterator:

    def forEachRemaining(self, arg0: Consumer[E]) -> None: ...

    @overload
    def hasNext(self) -> bool: ...

    @overload
    def hasNext(self) -> bool: ...

    @overload
    def next(self) -> object: ...

    @overload
    def next(self) -> str: ...

    @overload
    def next(self) -> object: ...

    @overload
    def remove(self) -> None: ...

    @overload
    def remove(self) -> None: ...

    def __init__(self, arg0: MessageHeader, arg1: str, arg2: object): ...


class ParseUtil:

  @staticmethod
  def decode(arg0: str) -> str: ...

  @staticmethod
  @overload
  def encodePath(arg0: str) -> str: ...

  @staticmethod
  @overload
  def encodePath(arg0: str, arg1: bool) -> str: ...

  @staticmethod
  def fileToEncodedURL(arg0: File) -> URL: ...

  @staticmethod
  def toURI(arg0: URL) -> URI: ...

