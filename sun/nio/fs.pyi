from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.io import File
from java.lang import Exception, Throwable, Iterable, Class, Enum
from java.net import URI
from java.nio.channels import AsynchronousFileChannel, SeekableByteChannel, FileChannel
from java.nio.file import Path, LinkOption, FileSystem, FileStore, PathMatcher, WatchService, AccessMode, CopyOption, DirectoryStream, WatchEvent, WatchKey
from java.nio.file.attribute import BasicFileAttributes, FileTime, DosFileAttributes, UserPrincipalLookupService, FileAttribute
from java.nio.file.spi import FileSystemProvider
from java.util import Map, Set, Iterator
from java.util.concurrent import ExecutorService
from java.util.function import Consumer

V = TypeVar('V', default=Any)
A = TypeVar('A', default=Any)

class AbstractBasicFileAttributeView:

  @overload
  def name(self) -> str: ...

  @overload
  def name(self) -> str: ...

  @overload
  def readAttributes(self) -> BasicFileAttributes: ...

  @overload
  def readAttributes(self, arg0: list[str]) -> Map[str, object]: ...

  @overload
  def readAttributes(self, arg0: list[str]) -> Map[str, object]: ...

  @overload
  def setAttribute(self, arg0: str, arg1: object) -> None: ...

  @overload
  def setAttribute(self, arg0: str, arg1: object) -> None: ...

  def setTimes(self, arg0: FileTime, arg1: FileTime, arg2: FileTime) -> None: ...

  class AttributesBuilder: ...


class AbstractFileSystemProvider(FileSystemProvider):

  def delete(self, arg0: Path) -> None: ...

  def deleteIfExists(self, arg0: Path) -> bool: ...

  def exists(self, arg0: Path) -> bool: ...

  def getSunPathForSocketFile(self, arg0: Path) -> list[int]: ...

  def isDirectory(self, arg0: Path) -> bool: ...

  def isRegularFile(self, arg0: Path) -> bool: ...

  def readAttributes(self, arg0: Path, arg1: str, arg2: list[LinkOption]) -> Map[str, object]: ...

  def setAttribute(self, arg0: Path, arg1: str, arg2: object, arg3: list[LinkOption]) -> None: ...


class BasicFileAttributesHolder:

  def get(self) -> BasicFileAttributes: ...

  def invalidate(self) -> None: ...


class DefaultFileSystemProvider:

  @staticmethod
  def instance() -> WindowsFileSystemProvider: ...

  @staticmethod
  def theFileSystem() -> FileSystem: ...


class DynamicFileAttributeView:

  def readAttributes(self, arg0: list[str]) -> Map[str, object]: ...

  def setAttribute(self, arg0: str, arg1: object) -> None: ...


class NativeBuffer:

  @overload
  def close(self) -> None: ...

  @overload
  def close(self) -> None: ...

  class Deallocator:

    @overload
    def run(self) -> None: ...

    @overload
    def run(self) -> None: ...


class NativeBuffers: ...


class Util: ...


class WindowsException(Exception):

  def fillInStackTrace(self) -> Throwable: ...

  def getMessage(self) -> str: ...


class WindowsFileAttributeViews:

  class Basic(AbstractBasicFileAttributeView):

    @overload
    def readAttributes(self) -> BasicFileAttributes: ...

    @overload
    def readAttributes(self) -> WindowsFileAttributes: ...

    def setTimes(self, arg0: FileTime, arg1: FileTime, arg2: FileTime) -> None: ...

  class Dos(WindowsFileAttributeViews.Basic):

    @overload
    def name(self) -> str: ...

    @overload
    def name(self) -> str: ...

    @overload
    def readAttributes(self) -> DosFileAttributes: ...

    @overload
    def readAttributes(self) -> BasicFileAttributes: ...

    @overload
    def readAttributes(self) -> DosFileAttributes: ...

    @overload
    def readAttributes(self, arg0: list[str]) -> Map[str, object]: ...

    @overload
    def setArchive(self, arg0: bool) -> None: ...

    @overload
    def setArchive(self, arg0: bool) -> None: ...

    def setAttribute(self, arg0: str, arg1: object) -> None: ...

    @overload
    def setHidden(self, arg0: bool) -> None: ...

    @overload
    def setHidden(self, arg0: bool) -> None: ...

    @overload
    def setReadOnly(self, arg0: bool) -> None: ...

    @overload
    def setReadOnly(self, arg0: bool) -> None: ...

    @overload
    def setSystem(self, arg0: bool) -> None: ...

    @overload
    def setSystem(self, arg0: bool) -> None: ...


class WindowsFileAttributes:

  def creationTime(self) -> FileTime: ...

  def fileKey(self) -> object: ...

  @overload
  def isArchive(self) -> bool: ...

  @overload
  def isArchive(self) -> bool: ...

  def isDirectory(self) -> bool: ...

  @overload
  def isHidden(self) -> bool: ...

  @overload
  def isHidden(self) -> bool: ...

  def isOther(self) -> bool: ...

  @overload
  def isReadOnly(self) -> bool: ...

  @overload
  def isReadOnly(self) -> bool: ...

  def isRegularFile(self) -> bool: ...

  def isSymbolicLink(self) -> bool: ...

  @overload
  def isSystem(self) -> bool: ...

  @overload
  def isSystem(self) -> bool: ...

  def lastAccessTime(self) -> FileTime: ...

  def lastModifiedTime(self) -> FileTime: ...

  def size(self) -> int: ...


class WindowsFileSystem(FileSystem):

  def close(self) -> None: ...

  def getFileStores(self) -> Iterable[FileStore]: ...

  def getPath(self, arg0: str, arg1: list[str]) -> Path: ...

  def getPathMatcher(self, arg0: str) -> PathMatcher: ...

  def getRootDirectories(self) -> Iterable[Path]: ...

  def getSeparator(self) -> str: ...

  def getUserPrincipalLookupService(self) -> UserPrincipalLookupService: ...

  def isOpen(self) -> bool: ...

  def isReadOnly(self) -> bool: ...

  def newWatchService(self) -> WatchService: ...

  def provider(self) -> FileSystemProvider: ...

  def supportedFileAttributeViews(self) -> Set[str]: ...

  class LookupService: ...

  class FileStoreIterator:

    def forEachRemaining(self, arg0: Consumer[E]) -> None: ...

    @overload
    def hasNext(self) -> bool: ...

    @overload
    def hasNext(self) -> bool: ...

    @overload
    def next(self) -> object: ...

    @overload
    def next(self) -> FileStore: ...

    @overload
    def next(self) -> object: ...

    @overload
    def remove(self) -> None: ...

    @overload
    def remove(self) -> None: ...


class WindowsFileSystemProvider(AbstractFileSystemProvider):

  def checkAccess(self, arg0: Path, arg1: list[AccessMode]) -> None: ...

  def copy(self, arg0: Path, arg1: Path, arg2: list[CopyOption]) -> None: ...

  def createDirectory(self, arg0: Path, arg1: list[FileAttribute]) -> None: ...

  def createLink(self, arg0: Path, arg1: Path) -> None: ...

  def createSymbolicLink(self, arg0: Path, arg1: Path, arg2: list[FileAttribute]) -> None: ...

  @overload
  def getFileAttributeView(self, arg0: Path, arg1: Class[V], arg2: list[LinkOption]) -> V: ...

  @overload
  def getFileAttributeView(self, arg0: Path, arg1: str, arg2: list[LinkOption]) -> DynamicFileAttributeView: ...

  def getFileStore(self, arg0: Path) -> FileStore: ...

  def getFileSystem(self, arg0: URI) -> FileSystem: ...

  def getPath(self, arg0: URI) -> Path: ...

  def getScheme(self) -> str: ...

  def getSunPathForSocketFile(self, arg0: Path) -> list[int]: ...

  def isHidden(self, arg0: Path) -> bool: ...

  def isSameFile(self, arg0: Path, arg1: Path) -> bool: ...

  def move(self, arg0: Path, arg1: Path, arg2: list[CopyOption]) -> None: ...

  def newAsynchronousFileChannel(self, arg0: Path, arg1: Set[OpenOption], arg2: ExecutorService, arg3: list[FileAttribute]) -> AsynchronousFileChannel: ...

  def newByteChannel(self, arg0: Path, arg1: Set[OpenOption], arg2: list[FileAttribute]) -> SeekableByteChannel: ...

  def newDirectoryStream(self, arg0: Path, arg1: DirectoryStream.Filter) -> DirectoryStream[Path]: ...

  def newFileChannel(self, arg0: Path, arg1: Set[OpenOption], arg2: list[FileAttribute]) -> FileChannel: ...

  def newFileSystem(self, arg0: URI, arg1: Map[str, Any]) -> FileSystem: ...

  def readAttributes(self, arg0: Path, arg1: Class[A], arg2: list[LinkOption]) -> A: ...

  def readSymbolicLink(self, arg0: Path) -> Path: ...

  def __init__(self): ...


class WindowsNativeDispatcher:

  class FirstFile:

    def attributes(self) -> int: ...

    def handle(self) -> int: ...

    def name(self) -> str: ...

  class FirstStream:

    def handle(self) -> int: ...

    def name(self) -> str: ...

  class VolumeInformation:

    def fileSystemName(self) -> str: ...

    def flags(self) -> int: ...

    def volumeName(self) -> str: ...

    def volumeSerialNumber(self) -> int: ...

  class DiskFreeSpace:

    def bytesPerSector(self) -> int: ...

    def freeBytesAvailable(self) -> int: ...

    def totalNumberOfBytes(self) -> int: ...

    def totalNumberOfFreeBytes(self) -> int: ...

  class AclInformation:

    def aceCount(self) -> int: ...

  class Account:

    def domain(self) -> str: ...

    def name(self) -> str: ...

    def use(self) -> int: ...

  class CompletionStatus: ...


class WindowsPath:

  @overload
  def compareTo(self, arg0: object) -> int: ...

  @overload
  def compareTo(self, arg0: object) -> int: ...

  @overload
  def compareTo(self, arg0: Path) -> int: ...

  @overload
  def compareTo(self, arg0: Path) -> int: ...

  @overload
  def endsWith(self, arg0: str) -> bool: ...

  @overload
  def endsWith(self, arg0: Path) -> bool: ...

  @overload
  def endsWith(self, arg0: Path) -> bool: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def getFileName(self) -> Path: ...

  @overload
  def getFileName(self) -> Path: ...

  @overload
  def getFileSystem(self) -> WindowsFileSystem: ...

  @overload
  def getFileSystem(self) -> FileSystem: ...

  @overload
  def getFileSystem(self) -> FileSystem: ...

  @overload
  def getName(self, arg0: int) -> WindowsPath: ...

  @overload
  def getName(self, arg0: int) -> Path: ...

  @overload
  def getName(self, arg0: int) -> Path: ...

  @overload
  def getNameCount(self) -> int: ...

  @overload
  def getNameCount(self) -> int: ...

  @overload
  def getParent(self) -> WindowsPath: ...

  @overload
  def getParent(self) -> Path: ...

  @overload
  def getParent(self) -> Path: ...

  @overload
  def getRoot(self) -> WindowsPath: ...

  @overload
  def getRoot(self) -> Path: ...

  @overload
  def getRoot(self) -> Path: ...

  @overload
  def hashCode(self) -> int: ...

  @overload
  def hashCode(self) -> int: ...

  @overload
  def isAbsolute(self) -> bool: ...

  @overload
  def isAbsolute(self) -> bool: ...

  def iterator(self) -> Iterator[Path]: ...

  @overload
  def normalize(self) -> WindowsPath: ...

  @overload
  def normalize(self) -> Path: ...

  @overload
  def normalize(self) -> Path: ...

  @overload
  def register(self, arg0: WatchService, arg1: list[WatchEvent.Kind]) -> WatchKey: ...

  @overload
  def register(self, arg0: WatchService, arg1: list[WatchEvent.Kind], arg2: list[WatchEvent.Modifier]) -> WatchKey: ...

  @overload
  def register(self, arg0: WatchService, arg1: list[WatchEvent.Kind], arg2: list[WatchEvent.Modifier]) -> WatchKey: ...

  @overload
  def relativize(self, arg0: Path) -> Path: ...

  @overload
  def relativize(self, arg0: Path) -> WindowsPath: ...

  @overload
  def relativize(self, arg0: Path) -> Path: ...

  @overload
  def resolve(self, arg0: str) -> Path: ...

  @overload
  def resolve(self, arg0: Path) -> WindowsPath: ...

  @overload
  def resolve(self, arg0: Path) -> Path: ...

  @overload
  def resolve(self, arg0: Path) -> Path: ...

  @overload
  def resolveSibling(self, arg0: str) -> Path: ...

  @overload
  def resolveSibling(self, arg0: Path) -> Path: ...

  @overload
  def startsWith(self, arg0: str) -> bool: ...

  @overload
  def startsWith(self, arg0: Path) -> bool: ...

  @overload
  def startsWith(self, arg0: Path) -> bool: ...

  @overload
  def subpath(self, arg0: int, arg1: int) -> WindowsPath: ...

  @overload
  def subpath(self, arg0: int, arg1: int) -> Path: ...

  @overload
  def subpath(self, arg0: int, arg1: int) -> Path: ...

  @overload
  def toAbsolutePath(self) -> Path: ...

  @overload
  def toAbsolutePath(self) -> WindowsPath: ...

  @overload
  def toAbsolutePath(self) -> Path: ...

  def toFile(self) -> File: ...

  @overload
  def toRealPath(self, arg0: list[LinkOption]) -> Path: ...

  @overload
  def toRealPath(self, arg0: list[LinkOption]) -> WindowsPath: ...

  @overload
  def toRealPath(self, arg0: list[LinkOption]) -> Path: ...

  @overload
  def toString(self) -> str: ...

  @overload
  def toString(self) -> str: ...

  @overload
  def toUri(self) -> URI: ...

  @overload
  def toUri(self) -> URI: ...

  @staticmethod
  @overload
  def of(arg0: URI) -> Path: ...

  @staticmethod
  @overload
  def of(arg0: str, arg1: list[str]) -> Path: ...

  class WindowsPathWithAttributes(WindowsPath):

    def compareTo(self, arg0: object) -> int: ...

    @overload
    def get(self) -> BasicFileAttributes: ...

    @overload
    def get(self) -> BasicFileAttributes: ...

    def getFileSystem(self) -> FileSystem: ...

    def getName(self, arg0: int) -> Path: ...

    def getParent(self) -> Path: ...

    def getRoot(self) -> Path: ...

    @overload
    def invalidate(self) -> None: ...

    @overload
    def invalidate(self) -> None: ...

    def normalize(self) -> Path: ...

    def relativize(self, arg0: Path) -> Path: ...

    def resolve(self, arg0: Path) -> Path: ...

    def subpath(self, arg0: int, arg1: int) -> Path: ...

    def toAbsolutePath(self) -> Path: ...

    def toRealPath(self, arg0: list[LinkOption]) -> Path: ...


class WindowsPathParser:

  class Result: ...


class WindowsPathType(Enum):

  ABSOLUTE: WindowsPathType

  DIRECTORY_RELATIVE: WindowsPathType

  DRIVE_RELATIVE: WindowsPathType

  RELATIVE: WindowsPathType

  UNC: WindowsPathType

  @staticmethod
  def valueOf(arg0: str) -> WindowsPathType: ...

  @staticmethod
  def values() -> list[WindowsPathType]: ...

