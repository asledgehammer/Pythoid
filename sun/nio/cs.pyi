from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.io import Reader, InputStream, Writer, OutputStream
from java.nio import CharBuffer
from java.nio.channels import ReadableByteChannel, WritableByteChannel
from java.nio.charset import Charset, CharsetDecoder, CharsetEncoder, CoderResult
from java.nio.charset.spi import CharsetProvider
from java.util import Iterator
from sun.util import PreHashedMap

class ArrayDecoder:

  def decode(self, arg0: list[int], arg1: int, arg2: int, arg3: list[str]) -> int: ...

  def decodeToLatin1(self, arg0: list[int], arg1: int, arg2: int, arg3: list[int]) -> int: ...

  def isASCIICompatible(self) -> bool: ...

  def isLatin1Decodable(self) -> bool: ...


class ArrayEncoder:

  def encode(self, arg0: list[str], arg1: int, arg2: int, arg3: list[int]) -> int: ...

  def encodeFromLatin1(self, arg0: list[int], arg1: int, arg2: int, arg3: list[int]) -> int: ...

  def encodeFromUTF16(self, arg0: list[int], arg1: int, arg2: int, arg3: list[int]) -> int: ...

  def isASCIICompatible(self) -> bool: ...


class HistoricallyNamedCharset:

  def historicalName(self) -> str: ...


class ISO_8859_1(Charset):

  INSTANCE: ISO_8859_1

  def contains(self, arg0: Charset) -> bool: ...

  @overload
  def historicalName(self) -> str: ...

  @overload
  def historicalName(self) -> str: ...

  def newDecoder(self) -> CharsetDecoder: ...

  def newEncoder(self) -> CharsetEncoder: ...

  def __init__(self): ...

  class Decoder(CharsetDecoder): ...

  class Encoder(CharsetEncoder):

    def canEncode(self, arg0: str) -> bool: ...

    def isLegalReplacement(self, arg0: list[int]) -> bool: ...


class MS1252(Charset):

  def contains(self, arg0: Charset) -> bool: ...

  @overload
  def historicalName(self) -> str: ...

  @overload
  def historicalName(self) -> str: ...

  def newDecoder(self) -> CharsetDecoder: ...

  def newEncoder(self) -> CharsetEncoder: ...

  def __init__(self): ...

  class Holder: ...


class SingleByte:

  @staticmethod
  def initC2B(arg0: list[str], arg1: list[str], arg2: list[str], arg3: list[str]) -> None: ...

  def __init__(self): ...

  class Encoder(CharsetEncoder):

    def canEncode(self, arg0: str) -> bool: ...

    @overload
    def encode(self, arg0: str) -> int: ...

    @overload
    def encode(self, arg0: list[str], arg1: int, arg2: int, arg3: list[int]) -> int: ...

    @overload
    def encode(self, arg0: list[str], arg1: int, arg2: int, arg3: list[int]) -> int: ...

    @overload
    def encodeFromLatin1(self, arg0: list[int], arg1: int, arg2: int, arg3: list[int]) -> int: ...

    @overload
    def encodeFromLatin1(self, arg0: list[int], arg1: int, arg2: int, arg3: list[int]) -> int: ...

    @overload
    def encodeFromUTF16(self, arg0: list[int], arg1: int, arg2: int, arg3: list[int]) -> int: ...

    @overload
    def encodeFromUTF16(self, arg0: list[int], arg1: int, arg2: int, arg3: list[int]) -> int: ...

    @overload
    def isASCIICompatible(self) -> bool: ...

    @overload
    def isASCIICompatible(self) -> bool: ...

    def isLegalReplacement(self, arg0: list[int]) -> bool: ...

    def __init__(self, arg0: Charset, arg1: list[str], arg2: list[str], arg3: bool): ...

  class Decoder(CharsetDecoder):

    @overload
    def decode(self, arg0: int) -> str: ...

    @overload
    def decode(self, arg0: list[int], arg1: int, arg2: int, arg3: list[str]) -> int: ...

    @overload
    def decode(self, arg0: list[int], arg1: int, arg2: int, arg3: list[str]) -> int: ...

    @overload
    def decodeToLatin1(self, arg0: list[int], arg1: int, arg2: int, arg3: list[int]) -> int: ...

    @overload
    def decodeToLatin1(self, arg0: list[int], arg1: int, arg2: int, arg3: list[int]) -> int: ...

    @overload
    def isASCIICompatible(self) -> bool: ...

    @overload
    def isASCIICompatible(self) -> bool: ...

    @overload
    def isLatin1Decodable(self) -> bool: ...

    @overload
    def isLatin1Decodable(self) -> bool: ...

    @overload
    def __init__(self, arg0: Charset, arg1: list[str]): ...
    @overload
    def __init__(self, arg0: Charset, arg1: list[str], arg2: bool): ...
    @overload
    def __init__(self, arg0: Charset, arg1: list[str], arg2: bool, arg3: bool): ...


class StandardCharsets(CharsetProvider):

  def charsetForName(self, arg0: str) -> Charset: ...

  def charsets(self) -> Iterator[Charset]: ...

  def __init__(self): ...

  class Aliases(PreHashedMap): ...

  class Classes(PreHashedMap): ...

  class Cache(PreHashedMap): ...


class StreamDecoder(Reader):

  def close(self) -> None: ...

  def getEncoding(self) -> str: ...

  @overload
  def read(self) -> int: ...

  @overload
  def read(self, arg0: list[str], arg1: int, arg2: int) -> int: ...

  def ready(self) -> bool: ...

  @staticmethod
  def forDecoder(arg0: ReadableByteChannel, arg1: CharsetDecoder, arg2: int) -> StreamDecoder: ...

  @staticmethod
  @overload
  def forInputStreamReader(arg0: InputStream, arg1: object, arg2: str) -> StreamDecoder: ...

  @staticmethod
  @overload
  def forInputStreamReader(arg0: InputStream, arg1: object, arg2: Charset) -> StreamDecoder: ...

  @staticmethod
  @overload
  def forInputStreamReader(arg0: InputStream, arg1: object, arg2: CharsetDecoder) -> StreamDecoder: ...


class StreamEncoder(Writer):

  def close(self) -> None: ...

  def flush(self) -> None: ...

  def flushBuffer(self) -> None: ...

  def getEncoding(self) -> str: ...

  @overload
  def write(self, arg0: int) -> None: ...

  @overload
  def write(self, arg0: CharBuffer) -> None: ...

  @overload
  def write(self, arg0: list[str], arg1: int, arg2: int) -> None: ...

  @overload
  def write(self, arg0: str, arg1: int, arg2: int) -> None: ...

  @staticmethod
  def forEncoder(arg0: WritableByteChannel, arg1: CharsetEncoder, arg2: int) -> StreamEncoder: ...

  @staticmethod
  @overload
  def forOutputStreamWriter(arg0: OutputStream, arg1: object, arg2: str) -> StreamEncoder: ...

  @staticmethod
  @overload
  def forOutputStreamWriter(arg0: OutputStream, arg1: object, arg2: Charset) -> StreamEncoder: ...

  @staticmethod
  @overload
  def forOutputStreamWriter(arg0: OutputStream, arg1: object, arg2: CharsetEncoder) -> StreamEncoder: ...


class Surrogate:

  MAX: str

  MAX_HIGH: str

  MAX_LOW: str

  MIN: str

  MIN_HIGH: str

  MIN_LOW: str

  UCS4_MAX: int

  UCS4_MIN: int

  @staticmethod
  def high(arg0: int) -> str: ...

  @staticmethod
  def isHigh(arg0: int) -> bool: ...

  @staticmethod
  def isLow(arg0: int) -> bool: ...

  @staticmethod
  def low(arg0: int) -> str: ...

  @staticmethod
  def neededFor(arg0: int) -> bool: ...

  @staticmethod
  def toUCS4(arg0: str, arg1: str) -> int: ...

  class Generator:

    def error(self) -> CoderResult: ...

    @overload
    def generate(self, arg0: int, arg1: int, arg2: CharBuffer) -> int: ...

    @overload
    def generate(self, arg0: int, arg1: int, arg2: list[str], arg3: int, arg4: int) -> int: ...

    def __init__(self): ...

  class Parser:

    def character(self) -> int: ...

    def error(self) -> CoderResult: ...

    def increment(self) -> int: ...

    def isPair(self) -> bool: ...

    @overload
    def parse(self, arg0: str, arg1: CharBuffer) -> int: ...

    @overload
    def parse(self, arg0: str, arg1: list[str], arg2: int, arg3: int) -> int: ...

    def unmappableResult(self) -> CoderResult: ...

    def __init__(self): ...


class US_ASCII(Charset):

  INSTANCE: US_ASCII

  def contains(self, arg0: Charset) -> bool: ...

  @overload
  def historicalName(self) -> str: ...

  @overload
  def historicalName(self) -> str: ...

  def newDecoder(self) -> CharsetDecoder: ...

  def newEncoder(self) -> CharsetEncoder: ...

  def __init__(self): ...

  class Decoder(CharsetDecoder): ...

  class Encoder(CharsetEncoder):

    def canEncode(self, arg0: str) -> bool: ...

    def isLegalReplacement(self, arg0: list[int]) -> bool: ...


class UTF_16(Unicode):

  def contains(self, arg0: Charset) -> bool: ...

  def historicalName(self) -> str: ...

  def newDecoder(self) -> CharsetDecoder: ...

  def newEncoder(self) -> CharsetEncoder: ...

  def __init__(self): ...

  class Decoder(UnicodeDecoder):

    def __init__(self, arg0: Charset): ...

  class Encoder(UnicodeEncoder):

    def __init__(self, arg0: Charset): ...


class UTF_16BE(Unicode):

  def contains(self, arg0: Charset) -> bool: ...

  def historicalName(self) -> str: ...

  def newDecoder(self) -> CharsetDecoder: ...

  def newEncoder(self) -> CharsetEncoder: ...

  def __init__(self): ...

  class Decoder(UnicodeDecoder):

    def __init__(self, arg0: Charset): ...

  class Encoder(UnicodeEncoder):

    def __init__(self, arg0: Charset): ...


class UTF_16LE(Unicode):

  def contains(self, arg0: Charset) -> bool: ...

  def historicalName(self) -> str: ...

  def newDecoder(self) -> CharsetDecoder: ...

  def newEncoder(self) -> CharsetEncoder: ...

  def __init__(self): ...

  class Decoder(UnicodeDecoder):

    def __init__(self, arg0: Charset): ...

  class Encoder(UnicodeEncoder):

    def __init__(self, arg0: Charset): ...


class UTF_8(Unicode):

  INSTANCE: UTF_8

  def contains(self, arg0: Charset) -> bool: ...

  def historicalName(self) -> str: ...

  def newDecoder(self) -> CharsetDecoder: ...

  def newEncoder(self) -> CharsetEncoder: ...

  def __init__(self): ...

  class Decoder(CharsetDecoder): ...

  class Encoder(CharsetEncoder):

    def canEncode(self, arg0: str) -> bool: ...

    def isLegalReplacement(self, arg0: list[int]) -> bool: ...


class Unicode(Charset):

  def contains(self, arg0: Charset) -> bool: ...

  def historicalName(self) -> str: ...

  def __init__(self, arg0: str, arg1: list[str]): ...


class UnicodeDecoder(CharsetDecoder):

  @overload
  def __init__(self, arg0: Charset, arg1: int): ...
  @overload
  def __init__(self, arg0: Charset, arg1: int, arg2: int): ...


class UnicodeEncoder(CharsetEncoder):

  def canEncode(self, arg0: str) -> bool: ...

