from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.util import AbstractList, Collection, Iterator, ListIterator, Comparator, Spliterator, List
from java.util.function import UnaryOperator

E = TypeVar('E', default=Any)
T = TypeVar('T', default=Any)

class IdentityArrayList[E](AbstractList):

  @overload
  def add(self, arg0: object) -> bool: ...

  @overload
  def add(self, arg0: object) -> bool: ...

  @overload
  def add(self, arg0: int, arg1: object) -> None: ...

  @overload
  def add(self, arg0: int, arg1: object) -> None: ...

  @overload
  def addAll(self, arg0: Collection[E]) -> bool: ...

  @overload
  def addAll(self, arg0: Collection[E]) -> bool: ...

  @overload
  def addAll(self, arg0: int, arg1: Collection[E]) -> bool: ...

  @overload
  def addAll(self, arg0: int, arg1: Collection[E]) -> bool: ...

  @overload
  def clear(self) -> None: ...

  @overload
  def clear(self) -> None: ...

  @overload
  def contains(self, arg0: object) -> bool: ...

  @overload
  def contains(self, arg0: object) -> bool: ...

  def containsAll(self, arg0: Collection[Any]) -> bool: ...

  def ensureCapacity(self, arg0: int) -> None: ...

  def equals(self, arg0: object) -> bool: ...

  @overload
  def get(self, arg0: int) -> object: ...

  @overload
  def get(self, arg0: int) -> object: ...

  def hashCode(self) -> int: ...

  @overload
  def indexOf(self, arg0: object) -> int: ...

  @overload
  def indexOf(self, arg0: object) -> int: ...

  @overload
  def isEmpty(self) -> bool: ...

  @overload
  def isEmpty(self) -> bool: ...

  def iterator(self) -> Iterator[E]: ...

  @overload
  def lastIndexOf(self, arg0: object) -> int: ...

  @overload
  def lastIndexOf(self, arg0: object) -> int: ...

  @overload
  def listIterator(self) -> ListIterator[E]: ...

  @overload
  def listIterator(self, arg0: int) -> ListIterator[E]: ...

  @overload
  def remove(self, arg0: int) -> object: ...

  @overload
  def remove(self, arg0: int) -> object: ...

  @overload
  def remove(self, arg0: object) -> bool: ...

  @overload
  def remove(self, arg0: object) -> bool: ...

  def removeAll(self, arg0: Collection[Any]) -> bool: ...

  def replaceAll(self, arg0: UnaryOperator[E]) -> None: ...

  def retainAll(self, arg0: Collection[Any]) -> bool: ...

  @overload
  def set(self, arg0: int, arg1: object) -> object: ...

  @overload
  def set(self, arg0: int, arg1: object) -> object: ...

  @overload
  def size(self) -> int: ...

  @overload
  def size(self) -> int: ...

  def sort(self, arg0: Comparator[E]) -> None: ...

  def spliterator(self) -> Spliterator[E]: ...

  def subList(self, arg0: int, arg1: int) -> List[E]: ...

  @overload
  def toArray(self) -> list[object]: ...

  @overload
  def toArray(self) -> list[object]: ...

  @overload
  def toArray(self, arg0: list[object]) -> list[object]: ...

  @overload
  def toArray(self, arg0: list[object]) -> list[object]: ...

  def trimToSize(self) -> None: ...

  @staticmethod
  def copyOf(arg0: Collection[E]) -> List[E]: ...

  @staticmethod
  @overload
  def of() -> List[E]: ...

  @staticmethod
  @overload
  def of(arg0: list[object]) -> List[E]: ...

  @staticmethod
  @overload
  def of(arg0: object) -> List[E]: ...

  @staticmethod
  @overload
  def of(arg0: object, arg1: object) -> List[E]: ...

  @staticmethod
  @overload
  def of(arg0: object, arg1: object, arg2: object) -> List[E]: ...

  @staticmethod
  @overload
  def of(arg0: object, arg1: object, arg2: object, arg3: object) -> List[E]: ...

  @staticmethod
  @overload
  def of(arg0: object, arg1: object, arg2: object, arg3: object, arg4: object) -> List[E]: ...

  @staticmethod
  @overload
  def of(arg0: object, arg1: object, arg2: object, arg3: object, arg4: object, arg5: object) -> List[E]: ...

  @staticmethod
  @overload
  def of(arg0: object, arg1: object, arg2: object, arg3: object, arg4: object, arg5: object, arg6: object) -> List[E]: ...

  @staticmethod
  @overload
  def of(arg0: object, arg1: object, arg2: object, arg3: object, arg4: object, arg5: object, arg6: object, arg7: object) -> List[E]: ...

  @staticmethod
  @overload
  def of(arg0: object, arg1: object, arg2: object, arg3: object, arg4: object, arg5: object, arg6: object, arg7: object, arg8: object) -> List[E]: ...

  @staticmethod
  @overload
  def of(arg0: object, arg1: object, arg2: object, arg3: object, arg4: object, arg5: object, arg6: object, arg7: object, arg8: object, arg9: object) -> List[E]: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: int): ...
  @overload
  def __init__(self, arg0: Collection[E]): ...

