from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.awt import Component
from java.awt.datatransfer import DataFlavor, Transferable
from java.awt.dnd import DropTarget
from java.awt.event import MouseEvent

class SunDropTargetContextPeer:

  DISPATCH_SYNC: bool

  @overload
  def acceptDrag(self, arg0: int) -> None: ...

  @overload
  def acceptDrag(self, arg0: int) -> None: ...

  @overload
  def acceptDrop(self, arg0: int) -> None: ...

  @overload
  def acceptDrop(self, arg0: int) -> None: ...

  @overload
  def dropComplete(self, arg0: bool) -> None: ...

  @overload
  def dropComplete(self, arg0: bool) -> None: ...

  @overload
  def getDropTarget(self) -> DropTarget: ...

  @overload
  def getDropTarget(self) -> DropTarget: ...

  @overload
  def getTargetActions(self) -> int: ...

  @overload
  def getTargetActions(self) -> int: ...

  @overload
  def getTransferData(self, arg0: DataFlavor) -> object: ...

  @overload
  def getTransferData(self, arg0: DataFlavor) -> object: ...

  @overload
  def getTransferDataFlavors(self) -> list[DataFlavor]: ...

  @overload
  def getTransferDataFlavors(self) -> list[DataFlavor]: ...

  @overload
  def getTransferDataFlavors(self) -> list[DataFlavor]: ...

  @overload
  def getTransferable(self) -> Transferable: ...

  @overload
  def getTransferable(self) -> Transferable: ...

  @overload
  def isDataFlavorSupported(self, arg0: DataFlavor) -> bool: ...

  @overload
  def isDataFlavorSupported(self, arg0: DataFlavor) -> bool: ...

  @overload
  def isTransferableJVMLocal(self) -> bool: ...

  @overload
  def isTransferableJVMLocal(self) -> bool: ...

  @overload
  def rejectDrag(self) -> None: ...

  @overload
  def rejectDrag(self) -> None: ...

  @overload
  def rejectDrop(self) -> None: ...

  @overload
  def rejectDrop(self) -> None: ...

  @overload
  def setTargetActions(self, arg0: int) -> None: ...

  @overload
  def setTargetActions(self, arg0: int) -> None: ...

  @staticmethod
  def setCurrentJVMLocalSourceTransferable(arg0: Transferable) -> None: ...

  def __init__(self): ...

  class EventDispatcher:

    def unregisterAllEvents(self) -> None: ...


class SunDropTargetEvent(MouseEvent):

  MOUSE_DROPPED: int

  def consume(self) -> None: ...

  def dispatch(self) -> None: ...

  def dispose(self) -> None: ...

  def getDispatcher(self) -> SunDropTargetContextPeer.EventDispatcher: ...

  def paramString(self) -> str: ...

  def __init__(self, arg0: Component, arg1: int, arg2: int, arg3: int, arg4: SunDropTargetContextPeer.EventDispatcher): ...

