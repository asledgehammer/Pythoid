from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.awt import Paint, Font, Rectangle, GraphicsConfiguration
from java.awt.font import GraphicAttribute, NumericShaper, TransformAttribute, TextAttribute, LineMetrics, FontRenderContext, GlyphVector
from java.awt.geom import AffineTransform
from java.awt.im import InputMethodHighlight
from java.awt.image import Raster
from java.awt.peer import FontPeer
from java.io import File, OutputStream
from java.lang import Enum
from java.text import Annotation, AttributedCharacterIterator
from java.util import Map, Hashtable, Locale
from sun.java2d import SurfaceData
from sun.java2d.loops import FontInfo

class AttributeValues:

  MASK_ALL: int

  def allDefined(self, arg0: int) -> bool: ...

  def anyDefined(self, arg0: int) -> bool: ...

  def anyNonDefault(self, arg0: int) -> bool: ...

  def applyIMHighlight(self) -> AttributeValues: ...

  @overload
  def clone(self) -> object: ...

  @overload
  def clone(self) -> AttributeValues: ...

  def defineAll(self, arg0: int) -> None: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def equals(self, arg0: AttributeValues) -> bool: ...

  def get(self, arg0: EAttribute) -> object: ...

  def getBackground(self) -> Paint: ...

  def getBaselineTransform(self) -> AffineTransform: ...

  def getBidiEmbedding(self) -> int: ...

  def getCharReplacement(self) -> GraphicAttribute: ...

  def getCharTransform(self) -> AffineTransform: ...

  def getFamily(self) -> str: ...

  def getFont(self) -> Font: ...

  def getForeground(self) -> Paint: ...

  def getInputMethodHighlight(self) -> object: ...

  def getInputMethodUnderline(self) -> int: ...

  def getJustification(self) -> float: ...

  def getKerning(self) -> int: ...

  def getLigatures(self) -> int: ...

  def getNumericShaping(self) -> NumericShaper: ...

  def getPosture(self) -> float: ...

  def getRunDirection(self) -> int: ...

  def getSize(self) -> float: ...

  def getStrikethrough(self) -> bool: ...

  def getSuperscript(self) -> int: ...

  def getSwapColors(self) -> bool: ...

  def getTracking(self) -> float: ...

  def getTransform(self) -> AffineTransform: ...

  def getUnderline(self) -> int: ...

  def getWeight(self) -> float: ...

  def getWidth(self) -> float: ...

  def hashCode(self) -> int: ...

  def isDefined(self, arg0: EAttribute) -> bool: ...

  def isNonDefault(self, arg0: EAttribute) -> bool: ...

  @overload
  def merge(self, arg0: Map[AttributedCharacterIterator.Attribute, Any]) -> AttributeValues: ...

  @overload
  def merge(self, arg0: AttributeValues) -> AttributeValues: ...

  @overload
  def merge(self, arg0: Map[AttributedCharacterIterator.Attribute, Any], arg1: int) -> AttributeValues: ...

  @overload
  def merge(self, arg0: AttributeValues, arg1: int) -> AttributeValues: ...

  @overload
  def set(self, arg0: EAttribute, arg1: object) -> None: ...

  @overload
  def set(self, arg0: EAttribute, arg1: AttributeValues) -> None: ...

  def setBackground(self, arg0: Paint) -> None: ...

  def setBidiEmbedding(self, arg0: int) -> None: ...

  def setCharReplacement(self, arg0: GraphicAttribute) -> None: ...

  def setDefault(self, arg0: EAttribute) -> None: ...

  def setFamily(self, arg0: str) -> None: ...

  def setFont(self, arg0: Font) -> None: ...

  def setForeground(self, arg0: Paint) -> None: ...

  @overload
  def setInputMethodHighlight(self, arg0: InputMethodHighlight) -> None: ...

  @overload
  def setInputMethodHighlight(self, arg0: Annotation) -> None: ...

  def setInputMethodUnderline(self, arg0: int) -> None: ...

  def setJustification(self, arg0: float) -> None: ...

  def setKerning(self, arg0: int) -> None: ...

  def setLigatures(self, arg0: int) -> None: ...

  def setNumericShaping(self, arg0: NumericShaper) -> None: ...

  def setPosture(self, arg0: float) -> None: ...

  def setRunDirection(self, arg0: int) -> None: ...

  def setSize(self, arg0: float) -> None: ...

  def setStrikethrough(self, arg0: bool) -> None: ...

  def setSuperscript(self, arg0: int) -> None: ...

  def setSwapColors(self, arg0: bool) -> None: ...

  def setTracking(self, arg0: float) -> None: ...

  @overload
  def setTransform(self, arg0: TransformAttribute) -> None: ...

  @overload
  def setTransform(self, arg0: AffineTransform) -> None: ...

  def setUnderline(self, arg0: int) -> None: ...

  def setWeight(self, arg0: float) -> None: ...

  def setWidth(self, arg0: float) -> None: ...

  def toMap(self, arg0: Map[TextAttribute, object]) -> Map[TextAttribute, object]: ...

  def toSerializableHashtable(self) -> Hashtable[object, object]: ...

  def toString(self) -> str: ...

  def unset(self, arg0: EAttribute) -> None: ...

  def unsetDefault(self) -> None: ...

  def updateDerivedTransforms(self) -> None: ...

  @staticmethod
  def extractXRotation(arg0: AffineTransform, arg1: bool) -> AffineTransform: ...

  @staticmethod
  def extractYRotation(arg0: AffineTransform, arg1: bool) -> AffineTransform: ...

  @staticmethod
  @overload
  def fromMap(arg0: Map[AttributedCharacterIterator.Attribute, Any]) -> AttributeValues: ...

  @staticmethod
  @overload
  def fromMap(arg0: Map[AttributedCharacterIterator.Attribute, Any], arg1: int) -> AttributeValues: ...

  @staticmethod
  def fromSerializableHashtable(arg0: Hashtable[object, object]) -> AttributeValues: ...

  @staticmethod
  @overload
  def getMask(arg0: list[EAttribute]) -> int: ...

  @staticmethod
  @overload
  def getMask(arg0: EAttribute) -> int: ...

  @staticmethod
  def is16Hashtable(arg0: Hashtable[object, object]) -> bool: ...

  def __init__(self): ...


class CharToGlyphMapper:

  HI_SURROGATE_END: int

  HI_SURROGATE_START: int

  INVISIBLE_GLYPH_ID: int

  INVISIBLE_GLYPHS: int

  LO_SURROGATE_END: int

  LO_SURROGATE_START: int

  UNINITIALIZED_GLYPH: int

  VS_END: int

  VS_START: int

  VSS_END: int

  VSS_START: int

  @overload
  def canDisplay(self, arg0: str) -> bool: ...

  @overload
  def canDisplay(self, arg0: int) -> bool: ...

  @overload
  def charToGlyph(self, arg0: str) -> int: ...

  @overload
  def charToGlyph(self, arg0: int) -> int: ...

  def charToVariationGlyph(self, arg0: int, arg1: int) -> int: ...

  @overload
  def charsToGlyphs(self, arg0: int, arg1: list[str], arg2: list[int]) -> None: ...

  @overload
  def charsToGlyphs(self, arg0: int, arg1: list[int], arg2: list[int]) -> None: ...

  def charsToGlyphsNS(self, arg0: int, arg1: list[str], arg2: list[int]) -> bool: ...

  def getMissingGlyphCode(self) -> int: ...

  def getNumGlyphs(self) -> int: ...

  @staticmethod
  def isVariationSelector(arg0: int) -> bool: ...

  def __init__(self): ...


class ColorGlyphSurfaceData(SurfaceData):

  def getBounds(self) -> Rectangle: ...

  def getDestination(self) -> object: ...

  def getDeviceConfiguration(self) -> GraphicsConfiguration: ...

  def getRaster(self, arg0: int, arg1: int, arg2: int, arg3: int) -> Raster: ...

  def getReplacement(self) -> SurfaceData: ...


class CoreMetrics:

  def effectiveBaselineOffset(self, arg0: list[float]) -> float: ...

  @overload
  def equals(self, arg0: object) -> bool: ...

  @overload
  def equals(self, arg0: CoreMetrics) -> bool: ...

  def hashCode(self) -> int: ...

  @staticmethod
  def get(arg0: LineMetrics) -> CoreMetrics: ...

  def __init__(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: int, arg5: list[float], arg6: float, arg7: float, arg8: float, arg9: float, arg10: float, arg11: float):
    self.ascent: float
    self.baselineindex: int
    self.baselineoffsets: list[float]
    self.descent: float
    self.height: float
    self.italicangle: float
    self.leading: float
    self.ssoffset: float
    self.strikethroughoffset: float
    self.strikethroughthickness: float
    self.underlineoffset: float
    self.underlinethickness: float


class CreatedFontTracker:

  MAX_FILE_SIZE: int

  MAX_TOTAL_BYTES: int

  def acquirePermit(self) -> bool: ...

  def add(self, arg0: File) -> None: ...

  def addBytes(self, arg0: int) -> None: ...

  def getNumBytes(self) -> int: ...

  def releasePermit(self) -> None: ...

  def remove(self, arg0: File) -> None: ...

  def set(self, arg0: File, arg1: OutputStream) -> None: ...

  def subBytes(self, arg0: int) -> None: ...

  @staticmethod
  def getTracker() -> CreatedFontTracker: ...

  class TempFileDeletionHook: ...


class EAttribute(Enum):

  EBACKGROUND: EAttribute

  EBASELINE_TRANSFORM: EAttribute

  EBIDI_EMBEDDING: EAttribute

  ECHAR_REPLACEMENT: EAttribute

  EFAMILY: EAttribute

  EFONT: EAttribute

  EFOREGROUND: EAttribute

  EINPUT_METHOD_HIGHLIGHT: EAttribute

  EINPUT_METHOD_UNDERLINE: EAttribute

  EJUSTIFICATION: EAttribute

  EKERNING: EAttribute

  ELIGATURES: EAttribute

  ENUMERIC_SHAPING: EAttribute

  EPOSTURE: EAttribute

  ERUN_DIRECTION: EAttribute

  ESIZE: EAttribute

  ESTRIKETHROUGH: EAttribute

  ESUPERSCRIPT: EAttribute

  ESWAP_COLORS: EAttribute

  ETRACKING: EAttribute

  ETRANSFORM: EAttribute

  EUNDERLINE: EAttribute

  EWEIGHT: EAttribute

  EWIDTH: EAttribute

  def toString(self) -> str: ...

  @staticmethod
  def forAttribute(arg0: AttributedCharacterIterator.Attribute) -> EAttribute: ...

  @staticmethod
  def valueOf(arg0: str) -> EAttribute: ...

  @staticmethod
  def values() -> list[EAttribute]: ...


class Font2D:

  DEFAULT_RANK: int

  FONT_CONFIG_RANK: int

  FWEIGHT_BOLD: int

  FWEIGHT_NORMAL: int

  FWIDTH_NORMAL: int

  JRE_RANK: int

  NATIVE_RANK: int

  TTF_RANK: int

  TYPE1_RANK: int

  UNKNOWN_RANK: int

  @overload
  def canDisplay(self, arg0: str) -> bool: ...

  @overload
  def canDisplay(self, arg0: int) -> bool: ...

  def canDoStyle(self, arg0: int) -> bool: ...

  def charToGlyph(self, arg0: int) -> int: ...

  def charToVariationGlyph(self, arg0: int, arg1: int) -> int: ...

  def getBaselineFor(self, arg0: str) -> int: ...

  def getFamilyName(self, arg0: Locale) -> str: ...

  @overload
  def getFontMetrics(self, arg0: Font, arg1: FontRenderContext, arg2: list[float]) -> None: ...

  @overload
  def getFontMetrics(self, arg0: Font, arg1: AffineTransform, arg2: object, arg3: object, arg4: list[float]) -> None: ...

  def getFontName(self, arg0: Locale) -> str: ...

  def getItalicAngle(self, arg0: Font, arg1: AffineTransform, arg2: object, arg3: object) -> float: ...

  def getMissingGlyphCode(self) -> int: ...

  def getNumGlyphs(self) -> int: ...

  def getPostscriptName(self) -> str: ...

  @overload
  def getStrike(self, arg0: Font) -> FontStrike: ...

  @overload
  def getStrike(self, arg0: Font, arg1: FontRenderContext) -> FontStrike: ...

  @overload
  def getStrike(self, arg0: Font, arg1: AffineTransform, arg2: int, arg3: int) -> FontStrike: ...

  @overload
  def getStrike(self, arg0: Font, arg1: AffineTransform, arg2: AffineTransform, arg3: int, arg4: int) -> FontStrike: ...

  def getStyle(self) -> int: ...

  def getStyleMetrics(self, arg0: float, arg1: list[float], arg2: int) -> None: ...

  def getWeight(self) -> int: ...

  def getWidth(self) -> int: ...

  def hasSupplementaryChars(self) -> bool: ...

  def useAAForPtSize(self, arg0: int) -> bool: ...

  def __init__(self):
    self.handle: Font2DHandle


class Font2DHandle:

  def __init__(self, arg0: Font2D):
    self.font2d: Font2D


class FontAccess:

  def getFont2D(self, arg0: Font) -> Font2D: ...

  def getFontPeer(self, arg0: Font) -> FontPeer: ...

  def isCreatedFont(self, arg0: Font) -> bool: ...

  def setCreatedFont(self, arg0: Font) -> None: ...

  def setFont2D(self, arg0: Font, arg1: Font2DHandle) -> None: ...

  @staticmethod
  def getFontAccess() -> FontAccess: ...

  @staticmethod
  def setFontAccess(arg0: FontAccess) -> None: ...

  def __init__(self): ...


class FontFamily:

  def getFamilyName(self) -> str: ...

  def getFont(self, arg0: int) -> Font2D: ...

  def getFontWithExactStyleMatch(self, arg0: int) -> Font2D: ...

  def getRank(self) -> int: ...

  def setFont(self, arg0: Font2D, arg1: int) -> None: ...

  def toString(self) -> str: ...

  @staticmethod
  def getAllFamilyNames() -> list[str]: ...

  @staticmethod
  def getAllFontFamilies() -> list[FontFamily]: ...

  @staticmethod
  def getFamily(arg0: str) -> FontFamily: ...

  @staticmethod
  def getLocaleFamily(arg0: str) -> FontFamily: ...

  def __init__(self, arg0: str, arg1: bool, arg2: int): ...


class FontLineMetrics(LineMetrics):

  def clone(self) -> object: ...

  def equals(self, arg0: object) -> bool: ...

  def getAscent(self) -> float: ...

  def getBaselineIndex(self) -> int: ...

  def getBaselineOffsets(self) -> list[float]: ...

  def getDescent(self) -> float: ...

  def getHeight(self) -> float: ...

  def getLeading(self) -> float: ...

  def getNumChars(self) -> int: ...

  def getStrikethroughOffset(self) -> float: ...

  def getStrikethroughThickness(self) -> float: ...

  def getUnderlineOffset(self) -> float: ...

  def getUnderlineThickness(self) -> float: ...

  def hashCode(self) -> int: ...

  def __init__(self, arg0: int, arg1: CoreMetrics, arg2: FontRenderContext):
    self.cm: CoreMetrics
    self.frc: FontRenderContext
    self.numchars: int


class FontStrike:

  def getNumGlyphs(self) -> int: ...

  def __init__(self): ...


class FontStrikeDesc:

  def equals(self, arg0: object) -> bool: ...

  def hashCode(self) -> int: ...

  def toString(self) -> str: ...

  @staticmethod
  @overload
  def getAAHintIntVal(arg0: object, arg1: Font2D, arg2: int) -> int: ...

  @staticmethod
  @overload
  def getAAHintIntVal(arg0: Font2D, arg1: Font, arg2: FontRenderContext) -> int: ...

  @staticmethod
  def getFMHintIntVal(arg0: object) -> int: ...

  def __init__(self, arg0: AffineTransform, arg1: AffineTransform, arg2: int, arg3: int, arg4: int): ...


class FontStrikeDisposer:

  @overload
  def dispose(self) -> None: ...

  @overload
  def dispose(self) -> None: ...

  @overload
  def __init__(self, arg0: Font2D, arg1: FontStrikeDesc): ...
  @overload
  def __init__(self, arg0: Font2D, arg1: FontStrikeDesc, arg2: int): ...
  @overload
  def __init__(self, arg0: Font2D, arg1: FontStrikeDesc, arg2: int, arg3: list[int]): ...
  @overload
  def __init__(self, arg0: Font2D, arg1: FontStrikeDesc, arg2: int, arg3: list[int]): ...


class GlyphList:

  def dispose(self) -> None: ...

  def getBounds(self, arg0: int) -> list[int]: ...

  def getColorGlyphData(self) -> SurfaceData: ...

  def getGrayBits(self) -> list[int]: ...

  def getImages(self) -> list[int]: ...

  def getMetrics(self) -> list[int]: ...

  def getNumGlyphs(self) -> int: ...

  def getPositions(self) -> list[float]: ...

  def getStrike(self) -> object: ...

  def getX(self) -> float: ...

  def getY(self) -> float: ...

  def isColorGlyph(self, arg0: int) -> bool: ...

  def isRGBOrder(self) -> bool: ...

  def isSubPixPos(self) -> bool: ...

  def setFromChars(self, arg0: FontInfo, arg1: list[str], arg2: int, arg3: int, arg4: float, arg5: float) -> bool: ...

  def setFromGlyphVector(self, arg0: FontInfo, arg1: GlyphVector, arg2: float, arg3: float) -> None: ...

  def setFromString(self, arg0: FontInfo, arg1: str, arg2: float, arg3: float) -> bool: ...

  def setGlyphIndex(self, arg0: int) -> None: ...

  def startGlyphIteration(self) -> None: ...

  def usePositions(self) -> bool: ...

  @staticmethod
  def canContainColorGlyphs() -> bool: ...

  @staticmethod
  def getInstance() -> GlyphList: ...


class StrikeMetrics:

  def getAscent(self) -> float: ...

  def getDescent(self) -> float: ...

  def getLeading(self) -> float: ...

  def getMaxAdvance(self) -> float: ...

  def toString(self) -> str: ...

