from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.lang import Character, Exception
from java.lang.ref import SoftReference
from java.util import List, Set, Map

K = TypeVar('K', default=Any)
V = TypeVar('V', default=Any)
CacheEntry_K = TypeVar('CacheEntry_K', default=Any)
CacheEntry_V = TypeVar('CacheEntry_V', default=Any)

class BaseLocale:

  CANADA: int

  CANADA_FRENCH: int

  CHINESE: int

  constantBaseLocales: list[BaseLocale]

  ENGLISH: int

  FRANCE: int

  FRENCH: int

  GERMAN: int

  GERMANY: int

  ITALIAN: int

  ITALY: int

  JAPAN: int

  JAPANESE: int

  KOREA: int

  KOREAN: int

  NUM_CONSTANTS: int

  ROOT: int

  SEP: str

  SIMPLIFIED_CHINESE: int

  TRADITIONAL_CHINESE: int

  UK: int

  US: int

  def equals(self, arg0: object) -> bool: ...

  def getLanguage(self) -> str: ...

  def getRegion(self) -> str: ...

  def getScript(self) -> str: ...

  def getVariant(self) -> str: ...

  def hashCode(self) -> int: ...

  def toString(self) -> str: ...

  @staticmethod
  def convertOldISOCodes(arg0: str) -> str: ...

  @staticmethod
  def getInstance(arg0: str, arg1: str, arg2: str, arg3: str) -> BaseLocale: ...

  class Key:

    def equals(self, arg0: object) -> bool: ...

    def hashCode(self) -> int: ...

    @staticmethod
    def normalize(arg0: BaseLocale.Key) -> BaseLocale.Key: ...

  class Cache(LocaleObjectCache):

    def __init__(self): ...


class Extension:

  def getID(self) -> str: ...

  def getKey(self) -> str: ...

  def getValue(self) -> str: ...

  def toString(self) -> str: ...


class InternalLocaleBuilder:

  def addUnicodeLocaleAttribute(self, arg0: str) -> InternalLocaleBuilder: ...

  def clear(self) -> InternalLocaleBuilder: ...

  def clearExtensions(self) -> InternalLocaleBuilder: ...

  def getBaseLocale(self) -> BaseLocale: ...

  def getLocaleExtensions(self) -> LocaleExtensions: ...

  def removeUnicodeLocaleAttribute(self, arg0: str) -> InternalLocaleBuilder: ...

  def setExtension(self, arg0: str, arg1: str) -> InternalLocaleBuilder: ...

  def setExtensions(self, arg0: str) -> InternalLocaleBuilder: ...

  def setLanguage(self, arg0: str) -> InternalLocaleBuilder: ...

  def setLanguageTag(self, arg0: LanguageTag) -> InternalLocaleBuilder: ...

  def setLocale(self, arg0: BaseLocale, arg1: LocaleExtensions) -> InternalLocaleBuilder: ...

  def setRegion(self, arg0: str) -> InternalLocaleBuilder: ...

  def setScript(self, arg0: str) -> InternalLocaleBuilder: ...

  def setUnicodeLocaleKeyword(self, arg0: str, arg1: str) -> InternalLocaleBuilder: ...

  def setVariant(self, arg0: str) -> InternalLocaleBuilder: ...

  def __init__(self): ...

  class CaseInsensitiveString:

    def equals(self, arg0: object) -> bool: ...

    def hashCode(self) -> int: ...

    def value(self) -> str: ...

  class CaseInsensitiveChar:

    def equals(self, arg0: object) -> bool: ...

    def hashCode(self) -> int: ...

    def value(self) -> str: ...


class LanguageTag:

  PRIVATEUSE: str

  PRIVUSE_VARIANT_PREFIX: str

  SEP: str

  UNDETERMINED: str

  def getExtensions(self) -> List[str]: ...

  def getExtlangs(self) -> List[str]: ...

  def getLanguage(self) -> str: ...

  def getPrivateuse(self) -> str: ...

  def getRegion(self) -> str: ...

  def getScript(self) -> str: ...

  def getVariants(self) -> List[str]: ...

  def toString(self) -> str: ...

  @staticmethod
  def canonicalizeExtension(arg0: str) -> str: ...

  @staticmethod
  def canonicalizeExtensionSingleton(arg0: str) -> str: ...

  @staticmethod
  def canonicalizeExtensionSubtag(arg0: str) -> str: ...

  @staticmethod
  def canonicalizeExtlang(arg0: str) -> str: ...

  @staticmethod
  def canonicalizeLanguage(arg0: str) -> str: ...

  @staticmethod
  def canonicalizePrivateuse(arg0: str) -> str: ...

  @staticmethod
  def canonicalizePrivateuseSubtag(arg0: str) -> str: ...

  @staticmethod
  def canonicalizeRegion(arg0: str) -> str: ...

  @staticmethod
  def canonicalizeScript(arg0: str) -> str: ...

  @staticmethod
  def canonicalizeVariant(arg0: str) -> str: ...

  @staticmethod
  def isExtensionSingleton(arg0: str) -> bool: ...

  @staticmethod
  def isExtensionSingletonChar(arg0: str) -> bool: ...

  @staticmethod
  def isExtensionSubtag(arg0: str) -> bool: ...

  @staticmethod
  def isExtlang(arg0: str) -> bool: ...

  @staticmethod
  def isLanguage(arg0: str) -> bool: ...

  @staticmethod
  def isPrivateusePrefix(arg0: str) -> bool: ...

  @staticmethod
  def isPrivateusePrefixChar(arg0: str) -> bool: ...

  @staticmethod
  def isPrivateuseSubtag(arg0: str) -> bool: ...

  @staticmethod
  def isRegion(arg0: str) -> bool: ...

  @staticmethod
  def isScript(arg0: str) -> bool: ...

  @staticmethod
  def isVariant(arg0: str) -> bool: ...

  @staticmethod
  def parse(arg0: str, arg1: ParseStatus) -> LanguageTag: ...

  @staticmethod
  def parseLocale(arg0: BaseLocale, arg1: LocaleExtensions) -> LanguageTag: ...


class LocaleExtensions:

  CALENDAR_JAPANESE: LocaleExtensions

  NUMBER_THAI: LocaleExtensions

  def equals(self, arg0: object) -> bool: ...

  def getExtension(self, arg0: str) -> Extension: ...

  def getExtensionValue(self, arg0: str) -> str: ...

  def getID(self) -> str: ...

  def getKeys(self) -> Set[str]: ...

  def getUnicodeLocaleAttributes(self) -> Set[str]: ...

  def getUnicodeLocaleKeys(self) -> Set[str]: ...

  def getUnicodeLocaleType(self, arg0: str) -> str: ...

  def hashCode(self) -> int: ...

  def isEmpty(self) -> bool: ...

  def toString(self) -> str: ...

  @staticmethod
  def isValidKey(arg0: str) -> bool: ...

  @staticmethod
  def isValidUnicodeLocaleKey(arg0: str) -> bool: ...


class LocaleObjectCache[K, V]:

  def get(self, arg0: object) -> object: ...

  @overload
  def __init__(self): ...
  @overload
  def __init__(self, arg0: int, arg1: float, arg2: int): ...

  class CacheEntry[CacheEntry_K, CacheEntry_V](SoftReference): ...


class LocaleSyntaxException(Exception):

  def getErrorIndex(self) -> int: ...

  @overload
  def __init__(self, arg0: str): ...
  @overload
  def __init__(self, arg0: str, arg1: int): ...


class LocaleUtils:

  @staticmethod
  def caseIgnoreMatch(arg0: str, arg1: str) -> bool: ...

  @staticmethod
  def isAlphaNumericString(arg0: str) -> bool: ...

  @staticmethod
  @overload
  def isEmpty(arg0: str) -> bool: ...

  @staticmethod
  @overload
  def isEmpty(arg0: List[Any]) -> bool: ...

  @staticmethod
  @overload
  def isEmpty(arg0: Map[Any, Any]) -> bool: ...

  @staticmethod
  @overload
  def isEmpty(arg0: Set[Any]) -> bool: ...

  @staticmethod
  def toLowerString(arg0: str) -> str: ...


class ParseStatus:

  def getErrorIndex(self) -> int: ...

  def getErrorMessage(self) -> str: ...

  def getParseLength(self) -> int: ...

  def isError(self) -> bool: ...

  def reset(self) -> None: ...

  def __init__(self): ...


class StringTokenIterator:

  def current(self) -> str: ...

  def currentEnd(self) -> int: ...

  def currentStart(self) -> int: ...

  def first(self) -> str: ...

  def hasNext(self) -> bool: ...

  def isDone(self) -> bool: ...

  def next(self) -> str: ...

  def setStart(self, arg0: int) -> StringTokenIterator: ...

  def setText(self, arg0: str) -> StringTokenIterator: ...

  def __init__(self, arg0: str, arg1: str): ...

