from typing import Any, overload, TypeVar
from java.lang.annotation import Annotation
from java.lang import Class, Enum
from java.lang.ref import SoftReference
from java.text import NumberFormat
from java.text.spi import BreakIteratorProvider, CollatorProvider, DateFormatProvider, DateFormatSymbolsProvider, DecimalFormatSymbolsProvider, NumberFormatProvider
from java.util import Locale, Set, List, Calendar, ResourceBundle
from java.util.spi import CalendarDataProvider, CalendarNameProvider, CurrencyNameProvider, LocaleNameProvider, TimeZoneNameProvider
from sun.text.spi import JavaTimeDateTimePatternProvider
from sun.util.spi import CalendarProvider

P = TypeVar('P', default=Any)

class LocaleProviderAdapter:

  def getAdapterType(self) -> LocaleProviderAdapter.Type: ...

  def getAvailableLocales(self) -> list[Locale]: ...

  def getBreakIteratorProvider(self) -> BreakIteratorProvider: ...

  def getCalendarDataProvider(self) -> CalendarDataProvider: ...

  def getCalendarNameProvider(self) -> CalendarNameProvider: ...

  def getCalendarProvider(self) -> CalendarProvider: ...

  def getCollatorProvider(self) -> CollatorProvider: ...

  def getCurrencyNameProvider(self) -> CurrencyNameProvider: ...

  def getDateFormatProvider(self) -> DateFormatProvider: ...

  def getDateFormatSymbolsProvider(self) -> DateFormatSymbolsProvider: ...

  def getDecimalFormatSymbolsProvider(self) -> DecimalFormatSymbolsProvider: ...

  def getJavaTimeDateTimePatternProvider(self) -> JavaTimeDateTimePatternProvider: ...

  def getLocaleNameProvider(self) -> LocaleNameProvider: ...

  def getLocaleResources(self, arg0: Locale) -> LocaleResources: ...

  def getLocaleServiceProvider(self, arg0: Class[P]) -> P: ...

  def getNumberFormatProvider(self) -> NumberFormatProvider: ...

  def getTimeZoneNameProvider(self) -> TimeZoneNameProvider: ...

  def isSupportedProviderLocale(self, arg0: Locale, arg1: Set[str]) -> bool: ...

  @staticmethod
  def forJRE() -> LocaleProviderAdapter: ...

  @staticmethod
  def forType(arg0: LocaleProviderAdapter.Type) -> LocaleProviderAdapter: ...

  @staticmethod
  def getAdapter(arg0: Class[LocaleServiceProvider], arg1: Locale) -> LocaleProviderAdapter: ...

  @staticmethod
  def getAdapterPreference() -> List[LocaleProviderAdapter.Type]: ...

  @staticmethod
  def getResourceBundleBased() -> LocaleProviderAdapter: ...

  @staticmethod
  def toLocaleArray(arg0: Set[str]) -> list[Locale]: ...

  def __init__(self): ...

  class Type(Enum):

    CLDR: LocaleProviderAdapter.Type

    FALLBACK: LocaleProviderAdapter.Type

    HOST: LocaleProviderAdapter.Type

    JRE: LocaleProviderAdapter.Type

    SPI: LocaleProviderAdapter.Type

    def getAdapterClassName(self) -> str: ...

    def getTextResourcesPackage(self) -> str: ...

    def getUtilResourcesPackage(self) -> str: ...

    @staticmethod
    def valueOf(arg0: str) -> LocaleProviderAdapter.Type: ...

    @staticmethod
    def values() -> list[LocaleProviderAdapter.Type]: ...


class LocaleResources:

  def getCNPatterns(self, arg0: NumberFormat.Style) -> list[str]: ...

  def getCalendarData(self, arg0: str) -> str: ...

  def getCollationData(self) -> str: ...

  def getCurrencyName(self, arg0: str) -> str: ...

  def getDateTimePattern(self, arg0: int, arg1: int, arg2: Calendar) -> str: ...

  def getDecimalFormatSymbolsData(self) -> list[object]: ...

  def getJavaTimeDateTimePattern(self, arg0: int, arg1: int, arg2: str) -> str: ...

  def getJavaTimeFormatData(self) -> ResourceBundle: ...

  def getLocaleName(self, arg0: str) -> str: ...

  def getNumberPatterns(self) -> list[str]: ...

  def getRules(self) -> list[str]: ...

  def getTimeZoneNames(self, arg0: str) -> object: ...

  @staticmethod
  def trace(arg0: str, arg1: list[object]) -> None: ...

  class ResourceReference(SoftReference): ...

